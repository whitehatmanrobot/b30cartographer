;0;L;;;;;N;;;1040E;;1040E
10437;DESERET SMALL LETTER YEE;Ll;0;L;;;;;N;;;1040F;;1040F
10438;DESERET SMALL LETTER H;Ll;0;L;;;;;N;;;10410;;10410
10439;DESERET SMALL LETTER PEE;Ll;0;L;;;;;N;;;10411;;10411
1043A;DESERET SMALL LETTER BEE;Ll;0;L;;;;;N;;;10412;;10412
1043B;DESERET SMALL LETTER TEE;Ll;0;L;;;;;N;;;10413;;10413
1043C;DESERET SMALL LETTER DEE;Ll;0;L;;;;;N;;;10414;;10414
1043D;DESERET SMALL LETTER CHEE;Ll;0;L;;;;;N;;;10415;;10415
1043E;DESERET SMALL LETTER JEE;Ll;0;L;;;;;N;;;10416;;10416
1043F;DESERET SMALL LETTER KAY;Ll;0;L;;;;;N;;;10417;;10417
10440;DESERET SMALL LETTER GAY;Ll;0;L;;;;;N;;;10418;;10418
10441;DESERET SMALL LETTER EF;Ll;0;L;;;;;N;;;10419;;10419
10442;DESERET SMALL LETTER VEE;Ll;0;L;;;;;N;;;1041A;;1041A
10443;DESERET SMALL LETTER ETH;Ll;0;L;;;;;N;;;1041B;;1041B
10444;DESERET SMALL LETTER THEE;Ll;0;L;;;;;N;;;1041C;;1041C
10445;DESERET SMALL LETTER ES;Ll;0;L;;;;;N;;;1041D;;1041D
10446;DESERET SMALL LETTER ZEE;Ll;0;L;;;;;N;;;1041E;;1041E
10447;DESERET SMALL LETTER ESH;Ll;0;L;;;;;N;;;1041F;;1041F
10448;DESERET SMALL LETTER ZHEE;Ll;0;L;;;;;N;;;10420;;10420
10449;DESERET SMALL LETTER ER;Ll;0;L;;;;;N;;;10421;;10421
1044A;DESERET SMALL LETTER EL;Ll;0;L;;;;;N;;;10422;;10422
1044B;DESERET SMALL LETTER EM;Ll;0;L;;;;;N;;;10423;;10423
1044C;DESERET SMALL LETTER EN;Ll;0;L;;;;;N;;;10424;;10424
1044D;DESERET SMALL LETTER ENG;Ll;0;L;;;;;N;;;10425;;10425
1044E;DESERET SMALL LETTER OI;Ll;0;L;;;;;N;;;10426;;10426
1044F;DESERET SMALL LETTER EW;Ll;0;L;;;;;N;;;10427;;10427
10450;SHAVIAN LETTER PEEP;Lo;0;L;;;;;N;;;;;
10451;SHAVIAN LETTER TOT;Lo;0;L;;;;;N;;;;;
10452;SHAVIAN LETTER KICK;Lo;0;L;;;;;N;;;;;
10453;SHAVIAN LETTER FEE;Lo;0;L;;;;;N;;;;;
10454;SHAVIAN LETTER THIGH;Lo;0;L;;;;;N;;;;;
10455;SHAVIAN LETTER SO;Lo;0;L;;;;;N;;;;;
10456;SHAVIAN LETTER SURE;Lo;0;L;;;;;N;;;;;
10457;SHAVIAN LETTER CHURCH;Lo;0;L;;;;;N;;;;;
10458;SHAVIAN LETTER YEA;Lo;0;L;;;;;N;;;;;
10459;SHAVIAN LETTER HUNG;Lo;0;L;;;;;N;;;;;
1045A;SHAVIAN LETTER BIB;Lo;0;L;;;;;N;;;;;
1045B;SHAVIAN LETTER DEAD;Lo;0;L;;;;;N;;;;;
1045C;SHAVIAN LETTER GAG;Lo;0;L;;;;;N;;;;;
1045D;SHAVIAN LETTER VOW;Lo;0;L;;;;;N;;;;;
1045E;SHAVIAN LETTER THEY;Lo;0;L;;;;;N;;;;;
1045F;SHAVIAN LETTER ZOO;Lo;0;L;;;;;N;;;;;
10460;SHAVIAN LETTER MEASURE;Lo;0;L;;;;;N;;;;;
10461;SHAVIAN LETTER JUDGE;Lo;0;L;;;;;N;;;;;
10462;SHAVIAN LETTER WOE;Lo;0;L;;;;;N;;;;;
10463;SHAVIAN LETTER HA-HA;Lo;0;L;;;;;N;;;;;
10464;SHAVIAN LETTER LOLL;Lo;0;L;;;;;N;;;;;
10465;SHAVIAN LETTER MIME;Lo;0;L;;;;;N;;;;;
10466;SHAVIAN LETTER IF;Lo;0;L;;;;;N;;;;;
10467;SHAVIAN LETTER EGG;Lo;0;L;;;;;N;;;;;
10468;SHAVIAN LETTER ASH;Lo;0;L;;;;;N;;;;;
10469;SHAVIAN LETTER ADO;Lo;0;L;;;;;N;;;;;
1046A;SHAVIAN LETTER ON;Lo;0;L;;;;;N;;;;;
1046B;SHAVIAN LETTER WOOL;Lo;0;L;;;;;N;;;;;
1046C;SHAVIAN LETTER OUT;Lo;0;L;;;;;N;;;;;
1046D;SHAVIAN LETTER AH;Lo;0;L;;;;;N;;;;;
1046E;SHAVIAN LETTER ROAR;Lo;0;L;;;;;N;;;;;
1046F;SHAVIAN LETTER NUN;Lo;0;L;;;;;N;;;;;
10470;SHAVIAN LETTER EAT;Lo;0;L;;;;;N;;;;;
10471;SHAVIAN LETTER AGE;Lo;0;L;;;;;N;;;;;
10472;SHAVIAN LETTER ICE;Lo;0;L;;;;;N;;;;;
10473;SHAVIAN LETTER UP;Lo;0;L;;;;;N;;;;;
10474;SHAVIAN LETTER OAK;Lo;0;L;;;;;N;;;;;
10475;SHAVIAN LETTER OOZE;Lo;0;L;;;;;N;;;;;
10476;SHAVIAN LETTER OIL;Lo;0;L;;;;;N;;;;;
10477;SHAVIAN LETTER AWE;Lo;0;L;;;;;N;;;;;
10478;SHAVIAN LETTER ARE;Lo;0;L;;;;;N;;;;;
10479;SHAVIAN LETTER OR;Lo;0;L;;;;;N;;;;;
1047A;SHAVIAN LETTER AIR;Lo;0;L;;;;;N;;;;;
1047B;SHAVIAN LETTER ERR;Lo;0;L;;;;;N;;;;;
1047C;SHAVIAN LETTER ARRAY;Lo;0;L;;;;;N;;;;;
1047D;SHAVIAN LETTER EAR;Lo;0;L;;;;;N;;;;;
1047E;SHAVIAN LETTER IAN;Lo;0;L;;;;;N;;;;;
1047F;SHAVIAN LETTER YEW;Lo;0;L;;;;;N;;;;;
10480;OSMANYA LETTER ALEF;Lo;0;L;;;;;N;;;;;
10481;OSMANYA LETTER BA;Lo;0;L;;;;;N;;;;;
10482;OSMANYA LETTER TA;Lo;0;L;;;;;N;;;;;
10483;OSMANYA LETTER JA;Lo;0;L;;;;;N;;;;;
10484;OSMANYA LETTER XA;Lo;0;L;;;;;N;;;;;
10485;OSMANYA LETTER KHA;Lo;0;L;;;;;N;;;;;
10486;OSMANYA LETTER DEEL;Lo;0;L;;;;;N;;;;;
10487;OSMANYA LETTER RA;Lo;0;L;;;;;N;;;;;
10488;OSMANYA LETTER SA;Lo;0;L;;;;;N;;;;;
10489;OSMANYA LETTER SHIIN;Lo;0;L;;;;;N;;;;;
1048A;OSMANYA LETTER DHA;Lo;0;L;;;;;N;;;;;
1048B;OSMANYA LETTER CAYN;Lo;0;L;;;;;N;;;;;
1048C;OSMANYA LETTER GA;Lo;0;L;;;;;N;;;;;
1048D;OSMANYA LETTER FA;Lo;0;L;;;;;N;;;;;
1048E;OSMANYA LETTER QAAF;Lo;0;L;;;;;N;;;;;
1048F;OSMANYA LETTER KAAF;Lo;0;L;;;;;N;;;;;
10490;OSMANYA LETTER LAAN;Lo;0;L;;;;;N;;;;;
10491;OSMANYA LETTER MIIN;Lo;0;L;;;;;N;;;;;
10492;OSMANYA LETTER NUUN;Lo;0;L;;;;;N;;;;;
10493;OSMANYA LETTER WAW;Lo;0;L;;;;;N;;;;;
10494;OSMANYA LETTER HA;Lo;0;L;;;;;N;;;;;
10495;OSMANYA LETTER YA;Lo;0;L;;;;;N;;;;;
10496;OSMANYA LETTER A;Lo;0;L;;;;;N;;;;;
10497;OSMANYA LETTER E;Lo;0;L;;;;;N;;;;;
10498;OSMANYA LETTER I;Lo;0;L;;;;;N;;;;;
10499;OSMANYA LETTER O;Lo;0;L;;;;;N;;;;;
1049A;OSMANYA LETTER U;Lo;0;L;;;;;N;;;;;
1049B;OSMANYA LETTER AA;Lo;0;L;;;;;N;;;;;
1049C;OSMANYA LETTER EE;Lo;0;L;;;;;N;;;;;
1049D;OSMANYA LETTER OO;Lo;0;L;;;;;N;;;;;
104A0;OSMANYA DIGIT ZERO;Nd;0;L;;0;0;0;N;;;;;
104A1;OSMANYA DIGIT ONE;Nd;0;L;;1;1;1;N;;;;;
104A2;OSMANYA DIGIT TWO;Nd;0;L;;2;2;2;N;;;;;
104A3;OSMANYA DIGIT THREE;Nd;0;L;;3;3;3;N;;;;;
104A4;OSMANYA DIGIT FOUR;Nd;0;L;;4;4;4;N;;;;;
104A5;OSMANYA DIGIT FIVE;Nd;0;L;;5;5;5;N;;;;;
104A6;OSMANYA DIGIT SIX;Nd;0;L;;6;6;6;N;;;;;
104A7;OSMANYA DIGIT SEVEN;Nd;0;L;;7;7;7;N;;;;;
104A8;OSMANYA DIGIT EIGHT;Nd;0;L;;8;8;8;N;;;;;
104A9;OSMANYA DIGIT NINE;Nd;0;L;;9;9;9;N;;;;;
10800;CYPRIOT SYLLABLE A;Lo;0;R;;;;;N;;;;;
10801;CYPRIOT SYLLABLE E;Lo;0;R;;;;;N;;;;;
10802;CYPRIOT SYLLABLE I;Lo;0;R;;;;;N;;;;;
10803;CYPRIOT SYLLABLE O;Lo;0;R;;;;;N;;;;;
10804;CYPRIOT SYLLABLE U;Lo;0;R;;;;;N;;;;;
10805;CYPRIOT SYLLABLE JA;Lo;0;R;;;;;N;;;;;
10808;CYPRIOT SYLLABLE JO;Lo;0;R;;;;;N;;;;;
1080A;CYPRIOT SYLLABLE KA;Lo;0;R;;;;;N;;;;;
1080B;CYPRIOT SYLLABLE KE;Lo;0;R;;;;;N;;;;;
1080C;CYPRIOT SYLLABLE KI;Lo;0;R;;;;;N;;;;;
1080D;CYPRIOT SYLLABLE KO;Lo;0;R;;;;;N;;;;;
1080E;CYPRIOT SYLLABLE KU;Lo;0;R;;;;;N;;;;;
1080F;CYPRIOT SYLLABLE LA;Lo;0;R;;;;;N;;;;;
10810;CYPRIOT SYLLABLE LE;Lo;0;R;;;;;N;;;;;
10811;CYPRIOT SYLLABLE LI;Lo;0;R;;;;;N;;;;;
10812;CYPRIOT SYLLABLE LO;Lo;0;R;;;;;N;;;;;
10813;CYPRIOT SYLLABLE LU;Lo;0;R;;;;;N;;;;;
10814;CYPRIOT SYLLABLE MA;Lo;0;R;;;;;N;;;;;
10815;CYPRIOT SYLLABLE ME;Lo;0;R;;;;;N;;;;;
10816;CYPRIOT SYLLABLE MI;Lo;0;R;;;;;N;;;;;
10817;CYPRIOT SYLLABLE MO;Lo;0;R;;;;;N;;;;;
10818;CYPRIOT SYLLABLE MU;Lo;0;R;;;;;N;;;;;
10819;CYPRIOT SYLLABLE NA;Lo;0;R;;;;;N;;;;;
1081A;CYPRIOT SYLLABLE NE;Lo;0;R;;;;;N;;;;;
1081B;CYPRIOT SYLLABLE NI;Lo;0;R;;;;;N;;;;;
1081C;CYPRIOT SYLLABLE NO;Lo;0;R;;;;;N;;;;;
1081D;CYPRIOT SYLLABLE NU;Lo;0;R;;;;;N;;;;;
1081E;CYPRIOT SYLLABLE PA;Lo;0;R;;;;;N;;;;;
1081F;CYPRIOT SYLLABLE PE;Lo;0;R;;;;;N;;;;;
10820;CYPRIOT SYLLABLE PI;Lo;0;R;;;;;N;;;;;
10821;CYPRIOT SYLLABLE PO;Lo;0;R;;;;;N;;;;;
10822;CYPRIOT SYLLABLE PU;Lo;0;R;;;;;N;;;;;
10823;CYPRIOT SYLLABLE RA;Lo;0;R;;;;;N;;;;;
10824;CYPRIOT SYLLABLE RE;Lo;0;R;;;;;N;;;;;
10825;CYPRIOT SYLLABLE RI;Lo;0;R;;;;;N;;;;;
10826;CYPRIOT SYLLABLE RO;Lo;0;R;;;;;N;;;;;
10827;CYPRIOT SYLLABLE RU;Lo;0;R;;;;;N;;;;;
10828;CYPRIOT SYLLABLE SA;Lo;0;R;;;;;N;;;;;
10829;CYPRIOT SYLLABLE SE;Lo;0;R;;;;;N;;;;;
1082A;CYPRIOT SYLLABLE SI;Lo;0;R;;;;;N;;;;;
1082B;CYPRIOT SYLLABLE SO;Lo;0;R;;;;;N;;;;;
1082C;CYPRIOT SYLLABLE SU;Lo;0;R;;;;;N;;;;;
1082D;CYPRIOT SYLLABLE TA;Lo;0;R;;;;;N;;;;;
1082E;CYPRIOT SYLLABLE TE;Lo;0;R;;;;;N;;;;;
1082F;CYPRIOT SYLLABLE TI;Lo;0;R;;;;;N;;;;;
10830;CYPRIOT SYLLABLE TO;Lo;0;R;;;;;N;;;;;
10831;CYPRIOT SYLLABLE TU;Lo;0;R;;;;;N;;;;;
10832;CYPRIOT SYLLABLE WA;Lo;0;R;;;;;N;;;;;
10833;CYPRIOT SYLLABLE WE;Lo;0;R;;;;;N;;;;;
10834;CYPRIOT SYLLABLE WI;Lo;0;R;;;;;N;;;;;
10835;CYPRIOT SYLLABLE WO;Lo;0;R;;;;;N;;;;;
10837;CYPRIOT SYLLABLE XA;Lo;0;R;;;;;N;;;;;
10838;CYPRIOT SYLLABLE XE;Lo;0;R;;;;;N;;;;;
1083C;CYPRIOT SYLLABLE ZA;Lo;0;R;;;;;N;;;;;
1083F;CYPRIOT SYLLABLE ZO;Lo;0;R;;;;;N;;;;;
10900;PHOENICIAN LETTER ALF;Lo;0;R;;;;;N;;;;;
10901;PHOENICIAN LETTER BET;Lo;0;R;;;;;N;;;;;
10902;PHOENICIAN LETTER GAML;Lo;0;R;;;;;N;;;;;
10903;PHOENICIAN LETTER DELT;Lo;0;R;;;;;N;;;;;
10904;PHOENICIAN LETTER HE;Lo;0;R;;;;;N;;;;;
10905;PHOENICIAN LETTER WAU;Lo;0;R;;;;;N;;;;;
10906;PHOENICIAN LETTER ZAI;Lo;0;R;;;;;N;;;;;
10907;PHOENICIAN LETTER HET;Lo;0;R;;;;;N;;;;;
10908;PHOENICIAN LETTER TET;Lo;0;R;;;;;N;;;;;
10909;PHOENICIAN LETTER YOD;Lo;0;R;;;;;N;;;;;
1090A;PHOENICIAN LETTER KAF;Lo;0;R;;;;;N;;;;;
1090B;PHOENICIAN LETTER LAMD;Lo;0;R;;;;;N;;;;;
1090C;PHOENICIAN LETTER MEM;Lo;0;R;;;;;N;;;;;
1090D;PHOENICIAN LETTER NUN;Lo;0;R;;;;;N;;;;;
1090E;PHOENICIAN LETTER SEMK;Lo;0;R;;;;;N;;;;;
1090F;PHOENICIAN LETTER AIN;Lo;0;R;;;;;N;;;;;
10910;PHOENICIAN LETTER PE;Lo;0;R;;;;;N;;;;;
10911;PHOENICIAN LETTER SADE;Lo;0;R;;;;;N;;;;;
10912;PHOENICIAN LETTER QOF;Lo;0;R;;;;;N;;;;;
10913;PHOENICIAN LETTER ROSH;Lo;0;R;;;;;N;;;;;
10914;PHOENICIAN LETTER SHIN;Lo;0;R;;;;;N;;;;;
10915;PHOENICIAN LETTER TAU;Lo;0;R;;;;;N;;;;;
10916;PHOENICIAN NUMBER ONE;No;0;R;;;;1;N;;;;;
10917;PHOENICIAN NUMBER TEN;No;0;R;;;;10;N;;;;;
10918;PHOENICIAN NUMBER TWENTY;No;0;R;;;;20;N;;;;;
10919;PHOENICIAN NUMBER ONE HUNDRED;No;0;R;;;;100;N;;;;;
1091F;PHOENICIAN WORD SEPARATOR;Po;0;ON;;;;;N;;;;;
10A00;KHAROSHTHI LETTER A;Lo;0;R;;;;;N;;;;;
10A01;KHAROSHTHI VOWEL SIGN I;Mn;0;NSM;;;;;N;;;;;
10A02;KHAROSHTHI VOWEL SIGN U;Mn;0;NSM;;;;;N;;;;;
10A03;KHAROSHTHI VOWEL SIGN VOCALIC R;Mn;0;NSM;;;;;N;;;;;
10A05;KHAROSHTHI VOWEL SIGN E;Mn;0;NSM;;;;;N;;;;;
10A06;KHAROSHTHI VOWEL SIGN O;Mn;0;NSM;;;;;N;;;;;
10A0C;KHAROSHTHI VOWEL LENGTH MARK;Mn;0;NSM;;;;;N;;;;;
10A0D;KHAROSHTHI SIGN DOUBLE RING BELOW;Mn;220;NSM;;;;;N;;;;;
10A0E;KHAROSHTHI SIGN ANUSVARA;Mn;0;NSM;;;;;N;;;;;
10A0F;KHAROSHTHI SIGN VISARGA;Mn;230;NSM;;;;;N;;;;;
10A10;KHAROSHTHI LETTER KA;Lo;0;R;;;;;N;;;;;
10A11;KHAROSHTHI LETTER KHA;Lo;0;R;;;;;N;;;;;
10A12;KHAROSHTHI LETTER GA;Lo;0;R;;;;;N;;;;;
10A13;KHAROSHTHI LETTER GHA;Lo;0;R;;;;;N;;;;;
10A15;KHAROSHTHI LETTER CA;Lo;0;R;;;;;N;;;;;
10A16;KHAROSHTHI LETTER CHA;Lo;0;R;;;;;N;;;;;
10A17;KHAROSHTHI LETTER JA;Lo;0;R;;;;;N;;;;;
10A19;KHAROSHTHI LETTER NYA;Lo;0;R;;;;;N;;;;;
10A1A;KHAROSHTHI LETTER TTA;Lo;0;R;;;;;N;;;;;
10A1B;KHAROSHTHI LETTER TTHA;Lo;0;R;;;;;N;;;;;
10A1C;KHAROSHTHI LETTER DDA;Lo;0;R;;;;;N;;;;;
10A1D;KHAROSHTHI LETTER DDHA;Lo;0;R;;;;;N;;;;;
10A1E;KHAROSHTHI LETTER NNA;Lo;0;R;;;;;N;;;;;
10A1F;KHAROSHTHI LETTER TA;Lo;0;R;;;;;N;;;;;
10A20;KHAROSHTHI LETTER THA;Lo;0;R;;;;;N;;;;;
10A21;KHAROSHTHI LETTER DA;Lo;0;R;;;;;N;;;;;
10A22;KHAROSHTHI LETTER DHA;Lo;0;R;;;;;N;;;;;
10A23;KHAROSHTHI LETTER NA;Lo;0;R;;;;;N;;;;;
10A24;KHAROSHTHI LETTER PA;Lo;0;R;;;;;N;;;;;
10A25;KHAROSHTHI LETTER PHA;Lo;0;R;;;;;N;;;;;
10A26;KHAROSHTHI LETTER BA;Lo;0;R;;;;;N;;;;;
10A27;KHAROSHTHI LETTER BHA;Lo;0;R;;;;;N;;;;;
10A28;KHAROSHTHI LETTER MA;Lo;0;R;;;;;N;;;;;
10A29;KHAROSHTHI LETTER YA;Lo;0;R;;;;;N;;;;;
10A2A;KHAROSHTHI LETTER RA;Lo;0;R;;;;;N;;;;;
10A2B;KHAROSHTHI LETTER LA;Lo;0;R;;;;;N;;;;;
10A2C;KHAROSHTHI LETTER VA;Lo;0;R;;;;;N;;;;;
10A2D;KHAROSHTHI LETTER SHA;Lo;0;R;;;;;N;;;;;
10A2E;KHAROSHTHI LETTER SSA;Lo;0;R;;;;;N;;;;;
10A2F;KHAROSHTHI LETTER SA;Lo;0;R;;;;;N;;;;;
10A30;KHAROSHTHI LETTER ZA;Lo;0;R;;;;;N;;;;;
10A31;KHAROSHTHI LETTER HA;Lo;0;R;;;;;N;;;;;
10A32;KHAROSHTHI LETTER KKA;Lo;0;R;;;;;N;;;;;
10A33;KHAROSHTHI LETTER TTTHA;Lo;0;R;;;;;N;;;;;
10A38;KHAROSHTHI SIGN BAR ABOVE;Mn;230;NSM;;;;;N;;;;;
10A39;KHAROSHTHI SIGN CAUDA;Mn;1;NSM;;;;;N;;;;;
10A3A;KHAROSHTHI SIGN DOT BELOW;Mn;220;NSM;;;;;N;;;;;
10A3F;KHAROSHTHI VIRAMA;Mn;9;NSM;;;;;N;;;;;
10A40;KHAROSHTHI DIGIT ONE;No;0;R;;;1;1;N;;;;;
10A41;KHAROSHTHI DIGIT TWO;No;0;R;;;2;2;N;;;;;
10A42;KHAROSHTHI DIGIT THREE;No;0;R;;;3;3;N;;;;;
10A43;KHAROSHTHI DIGIT FOUR;No;0;R;;;4;4;N;;;;;
10A44;KHAROSHTHI NUMBER TEN;No;0;R;;;;10;N;;;;;
10A45;KHAROSHTHI NUMBER TWENTY;No;0;R;;;;20;N;;;;;
10A46;KHAROSHTHI NUMBER ONE HUNDRED;No;0;R;;;;100;N;;;;;
10A47;KHAROSHTHI NUMBER ONE THOUSAND;No;0;R;;;;1000;N;;;;;
10A50;KHAROSHTHI PUNCTUATION DOT;Po;0;R;;;;;N;;;;;
10A51;KHAROSHTHI PUNCTUATION SMALL CIRCLE;Po;0;R;;;;;N;;;;;
10A52;KHAROSHTHI PUNCTUATION CIRCLE;Po;0;R;;;;;N;;;;;
10A53;KHAROSHTHI PUNCTUATION CRESCENT BAR;Po;0;R;;;;;N;;;;;
10A54;KHAROSHTHI PUNCTUATION MANGALAM;Po;0;R;;;;;N;;;;;
10A55;KHAROSHTHI PUNCTUATION LOTUS;Po;0;R;;;;;N;;;;;
10A56;KHAROSHTHI PUNCTUATION DANDA;Po;0;R;;;;;N;;;;;
10A57;KHAROSHTHI PUNCTUATION DOUBLE DANDA;Po;0;R;;;;;N;;;;;
10A58;KHAROSHTHI PUNCTUATION LINES;Po;0;R;;;;;N;;;;;
12000;CUNEIFORM SIGN A;Lo;0;L;;;;;N;;;;;
12001;CUNEIFORM SIGN A TIMES A;Lo;0;L;;;;;N;;;;;
12002;CUNEIFORM SIGN A TIMES BAD;Lo;0;L;;;;;N;;;;;
12003;CUNEIFORM SIGN A TIMES GAN2 TENU;Lo;0;L;;;;;N;;;;;
12004;CUNEIFORM SIGN A TIMES HA;Lo;0;L;;;;;N;;;;;
12005;CUNEIFORM SIGN A TIMES IGI;Lo;0;L;;;;;N;;;;;
12006;CUNEIFORM SIGN A TIMES LAGAR GUNU;Lo;0;L;;;;;N;;;;;
12007;CUNEIFORM SIGN A TIMES MUSH;Lo;0;L;;;;;N;;;;;
12008;CUNEIFORM SIGN A TIMES SAG;Lo;0;L;;;;;N;;;;;
12009;CUNEIFORM SIGN A2;Lo;0;L;;;;;N;;;;;
1200A;CUNEIFORM SIGN AB;Lo;0;L;;;;;N;;;;;
1200B;CUNEIFORM SIGN AB TIMES ASH2;Lo;0;L;;;;;N;;;;;
1200C;CUNEIFORM SIGN AB TIMES DUN3 GUNU;Lo;0;L;;;;;N;;;;;
1200D;CUNEIFORM SIGN AB TIMES GAL;Lo;0;L;;;;;N;;;;;
1200E;CUNEIFORM SIGN AB TIMES GAN2 TENU;Lo;0;L;;;;;N;;;;;
1200F;CUNEIFORM SIGN AB TIMES HA;Lo;0;L;;;;;N;;;;;
12010;CUNEIFORM SIGN AB TIMES IGI GUNU;Lo;0;L;;;;;N;;;;;
12011;CUNEIFORM SIGN AB TIMES IMIN;Lo;0;L;;;;;N;;;;;
12012;CUNEIFORM SIGN AB TIMES LAGAB;Lo;0;L;;;;;N;;;;;
12013;CUNEIFORM SIGN AB TIMES SHESH;Lo;0;L;;;;;N;;;;;
12014;CUNEIFORM SIGN AB TIMES U PLUS U PLUS U;Lo;0;L;;;;;N;;;;;
12015;CUNEIFORM SIGN AB GUNU;Lo;0;L;;;;;N;;;;;
12016;CUNEIFORM SIGN AB2;Lo;0;L;;;;;N;;;;;
12017;CUNEIFORM SIGN AB2 TIMES BALAG;Lo;0;L;;;;;N;;;;;
12018;CUNEIFORM SIGN AB2 TIMES GAN2 TENU;Lo;0;L;;;;;N;;;;;
12019;CUNEIFORM SIGN AB2 TIMES ME PLUS EN;Lo;0;L;;;;;N;;;;;
1201A;CUNEIFORM SIGN AB2 TIMES SHA3;Lo;0;L;;;;;N;;;;;
1201B;CUNEIFORM SIGN AB2 TIMES TAK4;Lo;0;L;;;;;N;;;;;
1201C;CUNEIFORM SIGN AD;Lo;0;L;;;;;N;;;;;
1201D;CUNEIFORM SIGN AK;Lo;0;L;;;;;N;;;;;
1201E;CUNEIFORM SIGN AK TIMES ERIN2;Lo;0;L;;;;;N;;;;;
1201F;CUNEIFORM SIGN AK TIMES SHITA PLUS GISH;Lo;0;L;;;;;N;;;;;
12020;CUNEIFORM SIGN AL;Lo;0;L;;;;;N;;;;;
12021;CUNEIFORM SIGN AL TIMES AL;Lo;0;L;;;;;N;;;;;
12022;CUNEIFORM SIGN AL TIMES DIM2;Lo;0;L;;;;;N;;;;;
12023;CUNEIFORM SIGN AL TIMES GISH;Lo;0;L;;;;;N;;;;;
12024;CUNEIFORM SIGN AL TIMES HA;Lo;0;L;;;;;N;;;;;
12025;CUNEIFORM SIGN AL TIMES KAD3;Lo;0;L;;;;;N;;;;;
12026;CUNEIFORM SIGN AL TIMES KI;Lo;0;L;;;;;N;;;;;
12027;CUNEIFORM SIGN AL TIMES SHE;Lo;0;L;;;;;N;;;;;
12028;CUNEIFORM SIGN AL TIMES USH;Lo;0;L;;;;;N;;;;;
12029;CUNEIFORM SIGN ALAN;Lo;0;L;;;;;N;;;;;
1202A;CUNEIFORM SIGN ALEPH;Lo;0;L;;;;;N;;;;;
1202B;CUNEIFORM SIGN AMAR;Lo;0;L;;;;;N;;;;;
1202C;CUNEIFORM SIGN AMAR TIMES SHE;Lo;0;L;;;;;N;;;;;
1202D;CUNEIFORM SIGN AN;Lo;0;L;;;;;N;;;;;
1202E;CUNEIFORM SIGN AN OVER AN;Lo;0;L;;;;;N;;;;;
1202F;CUNEIFORM SIGN AN THREE TIMES;Lo;0;L;;;;;N;;;;;
12030;CUNEIFORM SIGN AN PLUS NAGA OPPOSING AN PLUS NAGA;Lo;0;L;;;;;N;;;;;
12031;CUNEIFORM SIGN AN PLUS NAGA SQUARED;Lo;0;L;;;;;N;;;;;
12032;CUNEIFORM SIGN ANSHE;Lo;0;L;;;;;N;;;;;
12033;CUNEIFORM SIGN APIN;Lo;0;L;;;;;N;;;;;
12034;CUNEIFORM SIGN ARAD;Lo;0;L;;;;;N;;;;;
12035;CUNEIFORM SIGN ARAD TIMES KUR;Lo;0;L;;;;;N;;;;;
12036;CUNEIFORM SIGN ARKAB;Lo;0;L;;;;;N;;;;;
12037;CUNEIFORM SIGN ASAL2;Lo;0;L;;;;;N;;;;;
12038;CUNEIFORM SIGN ASH;Lo;0;L;;;;;N;;;;;
12039;CUNEIFORM SIGN ASH ZIDA TENU;Lo;0;L;;;;;N;;;;;
1203A;CUNEIFORM SIGN ASH KABA TENU;Lo;0;L;;;;;N;;;;;
1203B;CUNEIFORM SIGN ASH OVER ASH TUG2 OVER TUG2 TUG2 OVER TUG2 PAP;Lo;0;L;;;;;N;;;;;
1203C;CUNEIFORM SIGN ASH OVER ASH OVER ASH;Lo;0;L;;;;;N;;;;;
1203D;CUNEIFORM SIGN ASH OVER ASH OVER ASH CROSSING ASH OVER ASH OVER ASH;Lo;0;L;;;;;N;;;;;
1203E;CUNEIFORM SIGN ASH2;Lo;0;L;;;;;N;;;;;
1203F;CUNEIFORM SIGN ASHGAB;Lo;0;L;;;;;N;;;;;
12040;CUNEIFORM SIGN BA;Lo;0;L;;;;;N;;;;;
12041;CUNEIFORM SIGN BAD;Lo;0;L;;;;;N;;;;;
12042;CUNEIFORM SIGN BAG3;Lo;0;L;;;;;N;;;;;
12043;CUNEIFORM SIGN BAHAR2;Lo;0;L;;;;;N;;;;;
12044;CUNEIFORM SIGN BAL;Lo;0;L;;;;;N;;;;;
12045;CUNEIFORM SIGN BAL OVER BAL;Lo;0;L;;;;;N;;;;;
12046;CUNEIFORM SIGN BALAG;Lo;0;L;;;;;N;;;;;
12047;CUNEIFORM SIGN BAR;Lo;0;L;;;;;N;;;;;
12048;CUNEIFORM SIGN BARA2;Lo;0;L;;;;;N;;;;;
12049;CUNEIFORM SIGN BI;Lo;0;L;;;;;N;;;;;
1204A;CUNEIFORM SIGN BI TIMES A;Lo;0;L;;;;;N;;;;;
1204B;CUNEIFORM SIGN BI TIMES GAR;Lo;0;L;;;;;N;;;;;
1204C;CUNEIFORM SIGN BI TIMES IGI GUNU;Lo;0;L;;;;;N;;;;;
1204D;CUNEIFORM SIGN BU;Lo;0;L;;;;;N;;;;;
1204E;CUNEIFORM SIGN BU OVER BU AB;Lo;0;L;;;;;N;;;;;
1204F;CUNEIFORM SIGN BU OVER BU UN;Lo;0;L;;;;;N;;;;;
12050;CUNEIFORM SIGN BU CROSSING BU;Lo;0;L;;;;;N;;;;;
12051;CUNEIFORM SIGN BULUG;Lo;0;L;;;;;N;;;;;
12052;CUNEIFORM SIGN BULUG OVER BULUG;Lo;0;L;;;;;N;;;;;
12053;CUNEIFORM SIGN BUR;Lo;0;L;;;;;N;;;;;
12054;CUNEIFORM SIGN BUR2;Lo;0;L;;;;;N;;;;;
12055;CUNEIFORM SIGN DA;Lo;0;L;;;;;N;;;;;
12056;CUNEIFORM SIGN DAG;Lo;0;L;;;;;N;;;;;
12057;CUNEIFORM SIGN DAG KISIM5 TIMES A PLUS MASH;Lo;0;L;;;;;N;;;;;
12058;CUNEIFORM SIGN DAG KISIM5 TIMES AMAR;Lo;0;L;;;;;N;;;;;
12059;CUNEIFORM SIGN DAG KISIM5 TIMES BALAG;Lo;0;L;;;;;N;;;;;
1205A;CUNEIFORM SIGN DAG KISIM5 TIMES BI;Lo;0;L;;;;;N;;;;;
1205B;CUNEIFORM SIGN DAG KISIM5 TIMES GA;Lo;0;L;;;;;N;;;;;
1205C;CUNEIFORM SIGN DAG KISIM5 TIMES GA PLUS MASH;Lo;0;L;;;;;N;;;;;
1205D;CUNEIFORM SIGN DAG KISIM5 TIMES GI;Lo;0;L;;;;;N;;;;;
1205E;CUNEIFORM SIGN DAG KISIM5 TIMES GIR2;Lo;0;L;;;;;N;;;;;
1205F;CUNEIFORM SIGN DAG KISIM5 TIMES GUD;Lo;0;L;;;;;N;;;;;
12060;CUNEIFORM SIGN DAG KISIM5 TIMES HA;Lo;0;L;;;;;N;;;;;
12061;CUNEIFORM SIGN DAG KISIM5 TIMES IR;Lo;0;L;;;;;N;;;;;
12062;CUNEIFORM SIGN DAG KISIM5 TIMES IR PLUS LU;Lo;0;L;;;;;N;;;;;
12063;CUNEIFORM SIGN DAG KISIM5 TIMES KAK;Lo;0;L;;;;;N;;;;;
12064;CUNEIFORM SIGN DAG KISIM5 TIMES LA;Lo;0;L;;;;;N;;;;;
12065;CUNEIFORM SIGN DAG KISIM5 TIMES LU;Lo;0;L;;;;;N;;;;;
12066;CUNEIFORM SIGN DAG KISIM5 TIMES LU PLUS MASH2;Lo;0;L;;;;;N;;;;;
12067;CUNEIFORM SIGN DAG KISIM5 TIMES LUM;Lo;0;L;;;;;N;;;;;
12068;CUNEIFORM SIGN DAG KISIM5 TIMES NE;Lo;0;L;;;;;N;;;;;
12069;CUNEIFORM SIGN DAG KISIM5 TIMES PAP PLUS PAP;Lo;0;L;;;;;N;;;;;
1206A;CUNEIFORM SIGN DAG KISIM5 TIMES SI;Lo;0;L;;;;;N;;;;;
1206B;CUNEIFORM SIGN DAG KISIM5 TIMES TAK4;Lo;0;L;;;;;N;;;;;
1206C;CUNEIFORM SIGN DAG KISIM5 TIMES U2 PLUS GIR2;Lo;0;L;;;;;N;;;;;
1206D;CUNEIFORM SIGN DAG KISIM5 TIMES USH;Lo;0;L;;;;;N;;;;;
1206E;CUNEIFORM SIGN DAM;Lo;0;L;;;;;N;;;;;
1206F;CUNEIFORM SIGN DAR;Lo;0;L;;;;;N;;;;;
12070;CUNEIFORM SIGN DARA3;Lo;0;L;;;;;N;;;;;
12071;CUNEIFORM SIGN DARA4;Lo;0;L;;;;;N;;;;;
12072;CUNEIFORM SIGN DI;Lo;0;L;;;;;N;;;;;
12073;CUNEIFORM SIGN DIB;Lo;0;L;;;;;N;;;;;
12074;CUNEIFORM SIGN DIM;Lo;0;L;;;;;N;;;;;
12075;CUNEIFORM SIGN DIM TIMES SHE;Lo;0;L;;;;;N;;;;;
12076;CUNEIFORM SIGN DIM2;Lo;0;L;;;;;N;;;;;
12077;CUNEIFORM SIGN DIN;Lo;0;L;;;;;N;;;;;
12078;CUNEIFORM SIGN DIN KASKAL U GUNU DISH;Lo;0;L;;;;;N;;;;;
12079;CUNEIFORM SIGN DISH;Lo;0;L;;;;;N;;;;;
1207A;CUNEIFORM SIGN DU;Lo;0;L;;;;;N;;;;;
1207B;CUNEIFORM SIGN DU OVER DU;Lo;0;L;;;;;N;;;;;
1207C;CUNEIFORM SIGN DU GUNU;Lo;0;L;;;;;N;;;;;
1207D;CUNEIFORM SIGN DU SHESHIG;Lo;0;L;;;;;N;;;;;
1207E;CUNEIFORM SIGN DUB;Lo;0;L;;;;;N;;;;;
1207F;CUNEIFORM SIGN DUB TIMES ESH2;Lo;0;L;;;;;N;;;;;
12080;CUNEIFORM SIGN DUB2;Lo;0;L;;;;;N;;;;;
12081;CUNEIFORM SIGN DUG;Lo;0;L;;;;;N;;;;;
12082;CUNEIFORM SIGN DUGUD;Lo;0;L;;;;;N;;;;;
12083;CUNEIFORM SIGN DUH;Lo;0;L;;;;;N;;;;;
12084;CUNEIFORM SIGN DUN;Lo;0;L;;;;;N;;;;;
12085;CUNEIFORM SIGN DUN3;Lo;0;L;;;;;N;;;;;
12086;CUNEIFORM SIGN DUN3 GUNU;Lo;0;L;;;;;N;;;;;
12087;CUNEIFORM SIGN DUN3 GUNU GUNU;Lo;0;L;;;;;N;;;;;
12088;CUNEIFORM SIGN DUN4;Lo;0;L;;;;;N;;;;;
12089;CUNEIFORM SIGN DUR2;Lo;0;L;;;;;N;;;;;
1208A;CUNEIFORM SIGN E;Lo;0;L;;;;;N;;;;;
1208B;CUNEIFORM SIGN E TIMES PAP;Lo;0;L;;;;;N;;;;;
1208C;CUNEIFORM SIGN E OVER E NUN OVER NUN;Lo;0;L;;;;;N;;;;;
1208D;CUNEIFORM SIGN E2;Lo;0;L;;;;;N;;;;;
1208E;CUNEIFORM SIGN E2 TIMES A PLUS HA PLUS DA;Lo;0;L;;;;;N;;;;;
1208F;CUNEIFORM SIGN E2 TIMES GAR;Lo;0;L;;;;;N;;;;;
12090;CUNEIFORM SIGN E2 TIMES MI;Lo;0;L;;;;;N;;;;;
12091;CUNEIFORM SIGN E2 TIMES SAL;Lo;0;L;;;;;N;;;;;
12092;CUNEIFORM SIGN E2 TIMES SHE;Lo;0;L;;;;;N;;;;;
12093;CUNEIFORM SIGN E2 TIMES U;Lo;0;L;;;;;N;;;;;
12094;CUNEIFORM SIGN EDIN;Lo;0;L;;;;;N;;;;;
12095;CUNEIFORM SIGN EGIR;Lo;0;L;;;;;N;;;;;
12096;CUNEIFORM SIGN EL;Lo;0;L;;;;;N;;;;;
12097;CUNEIFORM SIGN EN;Lo;0;L;;;;;N;;;;;
12098;CUNEIFORM SIGN EN TIMES GAN2;Lo;0;L;;;;;N;;;;;
12099;CUNEIFORM SIGN EN TIMES GAN2 TENU;Lo;0;L;;;;;N;;;;;
1209A;CUNEIFORM SIGN EN TIMES ME;Lo;0;L;;;;;N;;;;;
1209B;CUNEIFORM SIGN EN CROSSING EN;Lo;0;L;;;;;N;;;;;
1209C;CUNEIFORM SIGN EN OPPOSING EN;Lo;0;L;;;;;N;;;;;
1209D;CUNEIFORM SIGN EN SQUARED;Lo;0;L;;;;;N;;;;;
1209E;CUNEIFORM SIGN EREN;Lo;0;L;;;;;N;;;;;
1209F;CUNEIFORM SIGN ERIN2;Lo;0;L;;;;;N;;;;;
120A0;CUNEIFORM SIGN ESH2;Lo;0;L;;;;;N;;;;;
120A1;CUNEIFORM SIGN EZEN;Lo;0;L;;;;;N;;;;;
120A2;CUNEIFORM SIGN EZEN TIMES A;Lo;0;L;;;;;N;;;;;
120A3;CUNEIFORM SIGN EZEN TIMES A PLUS LAL;Lo;0;L;;;;;N;;;;;
120A4;CUNEIFORM SIGN EZEN TIMES A PLUS LAL TIMES LAL;Lo;0;L;;;;;N;;;;;
120A5;CUNEIFORM SIGN EZEN TIMES AN;Lo;0;L;;;;;N;;;;;
120A6;CUNEIFORM SIGN EZEN TIMES BAD;Lo;0;L;;;;;N;;;;;
120A7;CUNEIFORM SIGN EZEN TIMES DUN3 GUNU;Lo;0;L;;;;;N;;;;;
120A8;CUNEIFORM SIGN EZEN TIMES DUN3 GUNU GUNU;Lo;0;L;;;;;N;;;;;
120A9;CUNEIFORM SIGN EZEN TIMES HA;Lo;0;L;;;;;N;;;;;
120AA;CUNEIFORM SIGN EZEN TIMES HA GUNU;Lo;0;L;;;;;N;;;;;
120AB;CUNEIFORM SIGN EZEN TIMES IGI GUNU;Lo;0;L;;;;;N;;;;;
120AC;CUNEIFORM SIGN EZEN TIMES KASKAL;Lo;0;L;;;;;N;;;;;
120AD;CUNEIFORM SIGN EZEN TIMES KASKAL SQUARED;Lo;0;L;;;;;N;;;;;
120AE;CUNEIFORM SIGN EZEN TIMES KU3;Lo;0;L;;;;;N;;;;;
120AF;CUNEIFORM SIGN EZEN TIMES LA;Lo;0;L;;;;;N;;;;;
120B0;CUNEIFORM SIGN EZEN TIMES LAL TIMES LAL;Lo;0;L;;;;;N;;;;;
120B1;CUNEIFORM SIGN EZEN TIMES LI;Lo;0;L;;;;;N;;;;;
120B2;CUNEIFORM SIGN EZEN TIMES LU;Lo;0;L;;;;;N;;;;;
120B3;CUNEIFORM SIGN EZEN TIMES U2;Lo;0;L;;;;;N;;;;;
120B4;CUNEIFORM SIGN EZEN TIMES UD;Lo;0;L;;;;;N;;;;;
120B5;CUNEIFORM SIGN GA;Lo;0;L;;;;;N;;;;;
120B6;CUNEIFORM SIGN GA GUNU;Lo;0;L;;;;;N;;;;;
120B7;CUNEIFORM SIGN GA2;Lo;0;L;;;;;N;;;;;
120B8;CUNEIFORM SIGN GA2 TIMES A PLUS DA PLUS HA;Lo;0;L;;;;;N;;;;;
120B9;CUNEIFORM SIGN GA2 TIMES A PLUS HA;Lo;0;L;;;;;N;;;;;
120BA;CUNEIFORM SIGN GA2 TIMES A PLUS IGI;Lo;0;L;;;;;N;;;;;
120BB;CUNEIFORM SIGN GA2 TIMES AB2 TENU PLUS TAB;Lo;0;L;;;;;N;;;;;
120BC;CUNEIFORM SIGN GA2 TIMES AN;Lo;0;L;;;;;N;;;;;
120BD;CUNEIFORM SIGN GA2 TIMES ASH;Lo;0;L;;;;;N;;;;;
120BE;CUNEIFORM SIGN GA2 TIMES ASH2 PLUS GAL;Lo;0;L;;;;;N;;;;;
120BF;CUNEIFORM SIGN GA2 TIMES BAD;Lo;0;L;;;;;N;;;;;
120C0;CUNEIFORM SIGN GA2 TIMES BAR PLUS RA;Lo;0;L;;;;;N;;;;;
120C1;CUNEIFORM SIGN GA2 TIMES BUR;Lo;0;L;;;;;N;;;;;
120C2;CUNEIFORM SIGN GA2 TIMES BUR PLUS RA;Lo;0;L;;;;;N;;;;;
120C3;CUNEIFORM SIGN GA2 TIMES DA;Lo;0;L;;;;;N;;;;;
120C4;CUNEIFORM SIGN GA2 TIMES DI;Lo;0;L;;;;;N;;;;;
120C5;CUNEIFORM SIGN GA2 TIMES DIM TIMES SHE;Lo;0;L;;;;;N;;;;;
120C6;CUNEIFORM SIGN GA2 TIMES DUB;Lo;0;L;;;;;N;;;;;
120C7;CUNEIFORM SIGN GA2 TIMES EL;Lo;0;L;;;;;N;;;;;
120C8;CUNEIFORM SIGN GA2 TIMES EL PLUS LA;Lo;0;L;;;;;N;;;;;
120C9;CUNEIFORM SIGN GA2 TIMES EN;Lo;0;L;;;;;N;;;;;
120CA;CUNEIFORM SIGN GA2 TIMES EN TIMES GAN2 TENU;Lo;0;L;;;;;N;;;;;
120CB;CUNEIFORM SIGN GA2 TIMES GAN2 TENU;Lo;0;L;;;;;N;;;;;
120CC;CUNEIFORM SIGN GA2 TIMES GAR;Lo;0;L;;;;;N;;;;;
120CD;CUNEIFORM SIGN GA2 TIMES GI;Lo;0;L;;;;;N;;;;;
120CE;CUNEIFORM SIGN GA2 TIMES GI4;Lo;0;L;;;;;N;;;;;
120CF;CUNEIFORM SIGN GA2 TIMES GI4 PLUS A;Lo;0;L;;;;;N;;;;;
120D0;CUNEIFORM SIGN GA2 TIMES GIR2 PLUS SU;Lo;0;L;;;;;N;;;;;
120D1;CUNEIFORM SIGN GA2 TIMES HA PLUS LU PLUS ESH2;Lo;0;L;;;;;N;;;;;
120D2;CUNEIFORM SIGN GA2 TIMES HAL;Lo;0;L;;;;;N;;;;;
120D3;CUNEIFORM SIGN GA2 TIMES HAL PLUS LA;Lo;0;L;;;;;N;;;;;
120D4;CUNEIFORM SIGN GA2 TIMES HI PLUS LI;Lo;0;L;;;;;N;;;;;
120D5;CUNEIFORM SIGN GA2 TIMES HUB2;Lo;0;L;;;;;N;;;;;
120D6;CUNEIFORM SIGN GA2 TIMES IGI GUNU;Lo;0;L;;;;;N;;;;;
120D7;CUNEIFORM SIGN GA2 TIMES ISH PLUS HU PLUS ASH;Lo;0;L;;;;;N;;;;;
120D8;CUNEIFORM SIGN GA2 TIMES KAK;Lo;0;L;;;;;N;;;;;
120D9;CUNEIFORM SIGN GA2 TIMES KASKAL;Lo;0;L;;;;;N;;;;;
120DA;CUNEIFORM SIGN GA2 TIMES KID;Lo;0;L;;;;;N;;;;;
120DB;CUNEIFORM SIGN GA2 TIMES KID PLUS LAL;Lo;0;L;;;;;N;;;;;
120DC;CUNEIFORM SIGN GA2 TIMES KU3 PLUS AN;Lo;0;L;;;;;N;;;;;
120DD;CUNEIFORM SIGN GA2 TIMES LA;Lo;0;L;;;;;N;;;;;
120DE;CUNEIFORM SIGN GA2 TIMES ME PLUS EN;Lo;0;L;;;;;N;;;;;
120DF;CUNEIFORM SIGN GA2 TIMES MI;Lo;0;L;;;;;N;;;;;
120E0;CUNEIFORM SIGN GA2 TIMES NUN;Lo;0;L;;;;;N;;;;;
120E1;CUNEIFORM SIGN GA2 TIMES NUN OVER NUN;Lo;0;L;;;;;N;;;;;
120E2;CUNEIFORM SIGN GA2 TIMES PA;Lo;0;L;;;;;N;;;;;
120E3;CUNEIFORM SIGN GA2 TIMES SAL;Lo;0;L;;;;;N;;;;;
120E4;CUNEIFORM SIGN GA2 TIMES SAR;Lo;0;L;;;;;N;;;;;
120E5;CUNEIFORM SIGN GA2 TIMES SHE;Lo;0;L;;;;;N;;;;;
120E6;CUNEIFORM SIGN GA2 TIMES SHE PLUS TUR;Lo;0;L;;;;;N;;;;;
120E7;CUNEIFORM SIGN GA2 TIMES SHID;Lo;0;L;;;;;N;;;;;
120E8;CUNEIFORM SIGN GA2 TIMES SUM;Lo;0;L;;;;;N;;;;;
120E9;CUNEIFORM SIGN GA2 TIMES TAK4;Lo;0;L;;;;;N;;;;;
120EA;CUNEIFORM SIGN GA2 TIMES U;Lo;0;L;;;;;N;;;;;
120EB;CUNEIFORM SIGN GA2 TIMES UD;Lo;0;L;;;;;N;;;;;
120EC;CUNEIFORM SIGN GA2 TIMES UD PLUS DU;Lo;0;L;;;;;N;;;;;
120ED;CUNEIFORM SIGN GA2 OVER GA2;Lo;0;L;;;;;N;;;;;
120EE;CUNEIFORM SIGN GABA;Lo;0;L;;;;;N;;;;;
120EF;CUNEIFORM SIGN GABA CROSSING GABA;Lo;0;L;;;;;N;;;;;
120F0;CUNEIFORM SIGN GAD;Lo;0;L;;;;;N;;;;;
120F1;CUNEIFORM SIGN GAD OVER GAD GAR OVER GAR;Lo;0;L;;;;;N;;;;;
120F2;CUNEIFORM SIGN GAL;Lo;0;L;;;;;N;;;;;
120F3;CUNEIFORM SIGN GAL GAD OVER GAD GAR OVER GAR;Lo;0;L;;;;;N;;;;;
120F4;CUNEIFORM SIGN GALAM;Lo;0;L;;;;;N;;;;;
120F5;CUNEIFORM SIGN GAM;Lo;0;L;;;;;N;;;;;
120F6;CUNEIFORM SIGN GAN;Lo;0;L;;;;;N;;;;;
120F7;CUNEIFORM SIGN GAN2;Lo;0;L;;;;;N;;;;;
120F8;CUNEIFORM SIGN GAN2 TENU;Lo;0;L;;;;;N;;;;;
120F9;CUNEIFORM SIGN GAN2 OVER GAN2;Lo;0;L;;;;;N;;;;;
120FA;CUNEIFORM SIGN GAN2 CROSSING GAN2;Lo;0;L;;;;;N;;;;;
120FB;CUNEIFORM SIGN GAR;Lo;0;L;;;;;N;;;;;
120FC;CUNEIFORM SIGN GAR3;Lo;0;L;;;;;N;;;;;
120FD;CUNEIFORM SIGN GASHAN;Lo;0;L;;;;;N;;;;;
120FE;CUNEIFORM SIGN GESHTIN;Lo;0;L;;;;;N;;;;;
120FF;CUNEIFORM SIGN GESHTIN TIMES KUR;Lo;0;L;;;;;N;;;;;
12100;CUNEIFORM SIGN GI;Lo;0;L;;;;;N;;;;;
12101;CUNEIFORM SIGN GI TIMES E;Lo;0;L;;;;;N;;;;;
12102;CUNEIFORM SIGN GI TIMES U;Lo;0;L;;;;;N;;;;;
12103;CUNEIFORM SIGN GI CROSSING GI;Lo;0;L;;;;;N;;;;;
12104;CUNEIFORM SIGN GI4;Lo;0;L;;;;;N;;;;;
12105;CUNEIFORM SIGN GI4 OVER GI4;Lo;0;L;;;;;N;;;;;
12106;CUNEIFORM SIGN GI4 CROSSING GI4;Lo;0;L;;;;;N;;;;;
12107;CUNEIFORM SIGN GIDIM;Lo;0;L;;;;;N;;;;;
12108;CUNEIFORM SIGN GIR2;Lo;0;L;;;;;N;;;;;
12109;CUNEIFORM SIGN GIR2 GUNU;Lo;0;L;;;;;N;;;;;
1210A;CUNEIFORM SIGN GIR3;Lo;0;L;;;;;N;;;;;
1210B;CUNEIFORM SIGN GIR3 TIMES A PLUS IGI;Lo;0;L;;;;;N;;;;;
1210C;CUNEIFORM SIGN GIR3 TIMES GAN2 TENU;Lo;0;L;;;;;N;;;;;
1210D;CUNEIFORM SIGN GIR3 TIMES IGI;Lo;0;L;;;;;N;;;;;
1210E;CUNEIFORM SIGN GIR3 TIMES LU PLUS IGI;Lo;0;L;;;;;N;;;;;
1210F;CUNEIFORM SIGN GIR3 TIMES PA;Lo;0;L;;;;;N;;;;;
12110;CUNEIFORM SIGN GISAL;Lo;0;L;;;;;N;;;;;
12111;CUNEIFORM SIGN GISH;Lo;0;L;;;;;N;;;;;
12112;CUNEIFORM SIGN GISH CROSSING GISH;Lo;0;L;;;;;N;;;;;
12113;CUNEIFORM SIGN GISH TIMES BAD;Lo;0;L;;;;;N;;;;;
12114;CUNEIFORM SIGN GISH TIMES TAK4;Lo;0;L;;;;;N;;;;;
12115;CUNEIFORM SIGN GISH TENU;Lo;0;L;;;;;N;;;;;
12116;CUNEIFORM SIGN GU;Lo;0;L;;;;;N;;;;;
12117;CUNEIFORM SIGN GU CROSSING GU;Lo;0;L;;;;;N;;;;;
12118;CUNEIFORM SIGN GU2;Lo;0;L;;;;;N;;;;;
12119;CUNEIFORM SIGN GU2 TIMES KAK;Lo;0;L;;;;;N;;;;;
1211A;CUNEIFORM SIGN GU2 TIMES KAK TIMES IGI GUNU;Lo;0;L;;;;;N;;;;;
1211B;CUNEIFORM SIGN GU2 TIMES NUN;Lo;0;L;;;;;N;;;;;
1211C;CUNEIFORM SIGN GU2 TIMES SAL PLUS TUG2;Lo;0;L;;;;;N;;;;;
1211D;CUNEIFORM SIGN GU2 GUNU;Lo;0;L;;;;;N;;;;;
1211E;CUNEIFORM SIGN GUD;Lo;0;L;;;;;N;;;;;
1211F;CUNEIFORM SIGN GUD TIMES A PLUS KUR;Lo;0;L;;;;;N;;;;;
12120;CUNEIFORM SIGN GUD TIMES KUR;Lo;0;L;;;;;N;;;;;
12121;CUNEIFORM SIGN GUD OVER GUD LUGAL;Lo;0;L;;;;;N;;;;;
12122;CUNEIFORM SIGN GUL;Lo;0;L;;;;;N;;;;;
12123;CUNEIFORM SIGN GUM;Lo;0;L;;;;;N;;;;;
12124;CUNEIFORM SIGN GUM TIMES SHE;Lo;0;L;;;;;N;;;;;
12125;CUNEIFORM SIGN GUR;Lo;0;L;;;;;N;;;;;
12126;CUNEIFORM SIGN GUR7;Lo;0;L;;;;;N;;;;;
12127;CUNEIFORM SIGN GURUN;Lo;0;L;;;;;N;;;;;
12128;CUNEIFORM SIGN GURUSH;Lo;0;L;;;;;N;;;;;
12129;CUNEIFORM SIGN HA;Lo;0;L;;;;;N;;;;;
1212A;CUNEIFORM SIGN HA TENU;Lo;0;L;;;;;N;;;;;
1212B;CUNEIFORM SIGN HA GUNU;Lo;0;L;;;;;N;;;;;
1212C;CUNEIFORM SIGN HAL;Lo;0;L;;;;;N;;;;;
1212D;CUNEIFORM SIGN HI;Lo;0;L;;;;;N;;;;;
1212E;CUNEIFORM SIGN HI TIMES ASH;Lo;0;L;;;;;N;;;;;
1212F;CUNEIFORM SIGN HI TIMES ASH2;Lo;0;L;;;;;N;;;;;
12130;CUNEIFORM SIGN HI TIMES BAD;Lo;0;L;;;;;N;;;;;
12131;CUNEIFORM SIGN HI TIMES DISH;Lo;0;L;;;;;N;;;;;
12132;CUNEIFORM SIGN HI TIMES GAD;Lo;0;L;;;;;N;;;;;
12133;CUNEIFORM SIGN HI TIMES KIN;Lo;0;L;;;;;N;;;;;
12134;CUNEIFORM SIGN HI TIMES NUN;Lo;0;L;;;;;N;;;;;
12135;CUNEIFORM SIGN HI TIMES SHE;Lo;0;L;;;;;N;;;;;
12136;CUNEIFORM SIGN HI TIMES U;Lo;0;L;;;;;N;;;;;
12137;CUNEIFORM SIGN HU;Lo;0;L;;;;;N;;;;;
12138;CUNEIFORM SIGN HUB2;Lo;0;L;;;;;N;;;;;
12139;CUNEIFORM SIGN HUB2 TIMES AN;Lo;0;L;;;;;N;;;;;
1213A;CUNEIFORM SIGN HUB2 TIMES HAL;Lo;0;L;;;;;N;;;;;
1213B;CUNEIFORM SIGN HUB2 TIMES KASKAL;Lo;0;L;;;;;N;;;;;
1213C;CUNEIFORM SIGN HUB2 TIMES LISH;Lo;0;L;;;;;N;;;;;
1213D;CUNEIFORM SIGN HUB2 TIMES UD;Lo;0;L;;;;;N;;;;;
1213E;CUNEIFORM SIGN HUL2;Lo;0;L;;;;;N;;;;;
1213F;CUNEIFORM SIGN I;Lo;0;L;;;;;N;;;;;
12140;CUNEIFORM SIGN I A;Lo;0;L;;;;;N;;;;;
12141;CUNEIFORM SIGN IB;Lo;0;L;;;;;N;;;;;
12142;CUNEIFORM SIGN IDIM;Lo;0;L;;;;;N;;;;;
12143;CUNEIFORM SIGN IDIM OVER IDIM BUR;Lo;0;L;;;;;N;;;;;
12144;CUNEIFORM SIGN IDIM OVER IDIM SQUARED;Lo;0;L;;;;;N;;;;;
12145;CUNEIFORM SIGN IG;Lo;0;L;;;;;N;;;;;
12146;CUNEIFORM SIGN IGI;Lo;0;L;;;;;N;;;;;
12147;CUNEIFORM SIGN IGI DIB;Lo;0;L;;;;;N;;;;;
12148;CUNEIFORM SIGN IGI RI;Lo;0;L;;;;;N;;;;;
12149;CUNEIFORM SIGN IGI OVER IGI SHIR OVER SHIR UD OVER UD;Lo;0;L;;;;;N;;;;;
1214A;CUNEIFORM SIGN IGI GUNU;Lo;0;L;;;;;N;;;;;
1214B;CUNEIFORM SIGN IL;Lo;0;L;;;;;N;;;;;
1214C;CUNEIFORM SIGN IL TIMES GAN2 TENU;Lo;0;L;;;;;N;;;;;
1214D;CUNEIFORM SIGN IL2;Lo;0;L;;;;;N;;;;;
1214E;CUNEIFORM SIGN IM;Lo;0;L;;;;;N;;;;;
1214F;CUNEIFORM SIGN IM TIMES TAK4;Lo;0;L;;;;;N;;;;;
12150;CUNEIFORM SIGN IM CROSSING IM;Lo;0;L;;;;;N;;;;;
12151;CUNEIFORM SIGN IM OPPOSING IM;Lo;0;L;;;;;N;;;;;
12152;CUNEIFORM SIGN IM SQUARED;Lo;0;L;;;;;N;;;;;
12153;CUNEIFORM SIGN IMIN;Lo;0;L;;;;;N;;;;;
12154;CUNEIFORM SIGN IN;Lo;0;L;;;;;N;;;;;
12155;CUNEIFORM SIGN IR;Lo;0;L;;;;;N;;;;;
12156;CUNEIFORM SIGN ISH;Lo;0;L;;;;;N;;;;;
12157;CUNEIFORM SIGN KA;Lo;0;L;;;;;N;;;;;
12158;CUNEIFORM SIGN KA TIMES A;Lo;0;L;;;;;N;;;;;
12159;CUNEIFORM SIGN KA TIMES AD;Lo;0;L;;;;;N;;;;;
1215A;CUNEIFORM SIGN KA TIMES AD PLUS KU3;Lo;0;L;;;;;N;;;;;
1215B;CUNEIFORM SIGN KA TIMES ASH2;Lo;0;L;;;;;N;;;;;
1215C;CUNEIFORM SIGN KA TIMES BAD;Lo;0;L;;;;;N;;;;;
1215D;CUNEIFORM SIGN KA TIMES BALAG;Lo;0;L;;;;;N;;;;;
1215E;CUNEIFORM SIGN KA TIMES BAR;Lo;0;L;;;;;N;;;;;
1215F;CUNEIFORM SIGN KA TIMES BI;Lo;0;L;;;;;N;;;;;
12160;CUNEIFORM SIGN KA TIMES ERIN2;Lo;0;L;;;;;N;;;;;
12161;CUNEIFORM SIGN KA TIMES ESH2;Lo;0;L;;;;;N;;;;;
12162;CUNEIFORM SIGN KA TIMES GA;Lo;0;L;;;;;N;;;;;
12163;CUNEIFORM SIGN KA TIMES GAL;Lo;0;L;;;;;N;;;;;
12164;CUNEIFORM SIGN KA TIMES GAN2 TENU;Lo;0;L;;;;;N;;;;;
12165;CUNEIFORM SIGN KA TIMES GAR;Lo;0;L;;;;;N;;;;;
12166;CUNEIFORM SIGN KA TIMES GAR PLUS SHA3 PLUS A;Lo;0;L;;;;;N;;;;;
12167;CUNEIFORM SIGN KA TIMES GI;Lo;0;L;;;;;N;;;;;
12168;CUNEIFORM SIGN KA TIMES GIR2;Lo;0;L;;;;;N;;;;;
12169;CUNEIFORM SIGN KA TIMES GISH PLUS SAR;Lo;0;L;;;;;N;;;;;
1216A;CUNEIFORM SIGN KA TIMES GISH CROSSING GISH;Lo;0;L;;;;;N;;;;;
1216B;CUNEIFORM SIGN KA TIMES GU;Lo;0;L;;;;;N;;;;;
1216C;CUNEIFORM SIGN KA TIMES GUR7;Lo;0;L;;;;;N;;;;;
1216D;CUNEIFORM SIGN KA TIMES IGI;Lo;0;L;;;;;N;;;;;
1216E;CUNEIFORM SIGN KA TIMES IM;Lo;0;L;;;;;N;;;;;
1216F;CUNEIFORM SIGN KA TIMES KAK;Lo;0;L;;;;;N;;;;;
12170;CUNEIFORM SIGN KA TIMES KI;Lo;0;L;;;;;N;;;;;
12171;CUNEIFORM SIGN KA TIMES KID;Lo;0;L;;;;;N;;;;;
12172;CUNEIFORM SIGN KA TIMES LI;Lo;0;L;;;;;N;;;;;
12173;CUNEIFORM SIGN KA TIMES LU;Lo;0;L;;;;;N;;;;;
12174;CUNEIFORM SIGN KA TIMES ME;Lo;0;L;;;;;N;;;;;
12175;CUNEIFORM SIGN KA TIMES ME PLUS DU;Lo;0;L;;;;;N;;;;;
12176;CUNEIFORM SIGN KA TIMES ME PLUS GI;Lo;0;L;;;;;N;;;;;
12177;CUNEIFORM SIGN KA TIMES ME PLUS TE;Lo;0;L;;;;;N;;;;;
12178;CUNEIFORM SIGN KA TIMES MI;Lo;0;L;;;;;N;;;;;
12179;CUNEIFORM SIGN KA TIMES MI PLUS NUNUZ;Lo;0;L;;;;;N;;;;;
1217A;CUNEIFORM SIGN KA TIMES NE;Lo;0;L;;;;;N;;;;;
1217B;CUNEIFORM SIGN KA TIMES NUN;Lo;0;L;;;;;N;;;;;
1217C;CUNEIFORM SIGN KA TIMES PI;Lo;0;L;;;;;N;;;;;
1217D;CUNEIFORM SIGN KA TIMES RU;Lo;0;L;;;;;N;;;;;
1217E;CUNEIFORM SIGN KA TIMES SA;Lo;0;L;;;;;N;;;;;
1217F;CUNEIFORM SIGN KA TIMES SAR;Lo;0;L;;;;;N;;;;;
12180;CUNEIFORM SIGN KA TIMES SHA;Lo;0;L;;;;;N;;;;;
12181;CUNEIFORM SIGN KA TIMES SHE;Lo;0;L;;;;;N;;;;;
12182;CUNEIFORM SIGN KA TIMES SHID;Lo;0;L;;;;;N;;;;;
12183;CUNEIFORM SIGN KA TIMES SHU;Lo;0;L;;;;;N;;;;;
12184;CUNEIFORM SIGN KA TIMES SIG;Lo;0;L;;;;;N;;;;;
12185;CUNEIFORM SIGN KA TIMES SUHUR;Lo;0;L;;;;;N;;;;;
12186;CUNEIFORM SIGN KA TIMES TAR;Lo;0;L;;;;;N;;;;;
12187;CUNEIFORM SIGN KA TIMES U;Lo;0;L;;;;;N;;;;;
12188;CUNEIFORM SIGN KA TIMES U2;Lo;0;L;;;;;N;;;;;
12189;CUNEIFORM SIGN KA TIMES UD;Lo;0;L;;;;;N;;;;;
1218A;CUNEIFORM SIGN KA TIMES UMUM TIMES PA;Lo;0;L;;;;;N;;;;;
1218B;CUNEIFORM SIGN KA TIMES USH;Lo;0;L;;;;;N;;;;;
1218C;CUNEIFORM SIGN KA TIMES ZI;Lo;0;L;;;;;N;;;;;
1218D;CUNEIFORM SIGN KA2;Lo;0;L;;;;;N;;;;;
1218E;CUNEIFORM SIGN KA2 CROSSING KA2;Lo;0;L;;;;;N;;;;;
1218F;CUNEIFORM SIGN KAB;Lo;0;L;;;;;N;;;;;
12190;CUNEIFORM SIGN KAD2;Lo;0;L;;;;;N;;;;;
12191;CUNEIFORM SIGN KAD3;Lo;0;L;;;;;N;;;;;
12192;CUNEIFORM SIGN KAD4;Lo;0;L;;;;;N;;;;;
12193;CUNEIFORM SIGN KAD5;Lo;0;L;;;;;N;;;;;
12194;CUNEIFORM SIGN KAD5 OVER KAD5;Lo;0;L;;;;;N;;;;;
12195;CUNEIFORM SIGN KAK;Lo;0;L;;;;;N;;;;;
12196;CUNEIFORM SIGN KAK TIMES IGI GUNU;Lo;0;L;;;;;N;;;;;
12197;CUNEIFORM SIGN KAL;Lo;0;L;;;;;N;;;;;
12198;CUNEIFORM SIGN KAL TIMES BAD;Lo;0;L;;;;;N;;;;;
12199;CUNEIFORM SIGN KAL CROSSING KAL;Lo;0;L;;;;;N;;;;;
1219A;CUNEIFORM SIGN KAM2;Lo;0;L;;;;;N;;;;;
1219B;CUNEIFORM SIGN KAM4;Lo;0;L;;;;;N;;;;;
1219C;CUNEIFORM SIGN KASKAL;Lo;0;L;;;;;N;;;;;
1219D;CUNEIFORM SIGN KASKAL LAGAB TIMES U OVER LAGAB TIMES U;Lo;0;L;;;;;N;;;;;
1219E;CUNEIFORM SIGN KASKAL OVER KASKAL LAGAB TIMES U OVER LAGAB TIMES U;Lo;0;L;;;;;N;;;;;
1219F;CUNEIFORM SIGN KESH2;Lo;0;L;;;;;N;;;;;
121A0;CUNEIFORM SIGN KI;Lo;0;L;;;;;N;;;;;
121A1;CUNEIFORM SIGN KI TIMES BAD;Lo;0;L;;;;;N;;;;;
121A2;CUNEIFORM SIGN KI TIMES U;Lo;0;L;;;;;N;;;;;
121A3;CUNEIFORM SIGN KI TIMES UD;Lo;0;L;;;;;N;;;;;
121A4;CUNEIFORM SIGN KID;Lo;0;L;;;;;N;;;;;
121A5;CUNEIFORM SIGN KIN;Lo;0;L;;;;;N;;;;;
121A6;CUNEIFORM SIGN KISAL;Lo;0;L;;;;;N;;;;;
121A7;CUNEIFORM SIGN KISH;Lo;0;L;;;;;N;;;;;
121A8;CUNEIFORM SIGN KISIM5;Lo;0;L;;;;;N;;;;;
121A9;CUNEIFORM SIGN KISIM5 OVER KISIM5;Lo;0;L;;;;;N;;;;;
121AA;CUNEIFORM SIGN KU;Lo;0;L;;;;;N;;;;;
121AB;CUNEIFORM SIGN KU OVER HI TIMES ASH2 KU OVER HI TIMES ASH2;Lo;0;L;;;;;N;;;;;
121AC;CUNEIFORM SIGN KU3;Lo;0;L;;;;;N;;;;;
121AD;CUNEIFORM SIGN KU4;Lo;0;L;;;;;N;;;;;
121AE;CUNEIFORM SIGN KU4 VARIANT FORM;Lo;0;L;;;;;N;;;;;
121AF;CUNEIFORM SIGN KU7;Lo;0;L;;;;;N;;;;;
121B0;CUNEIFORM SIGN KUL;Lo;0;L;;;;;N;;;;;
121B1;CUNEIFORM SIGN KUL GUNU;Lo;0;L;;;;;N;;;;;
121B2;CUNEIFORM SIGN KUN;Lo;0;L;;;;;N;;;;;
121B3;CUNEIFORM SIGN KUR;Lo;0;L;;;;;N;;;;;
121B4;CUNEIFORM SIGN KUR OPPOSING KUR;Lo;0;L;;;;;N;;;;;
121B5;CUNEIFORM SIGN KUSHU2;Lo;0;L;;;;;N;;;;;
121B6;CUNEIFORM SIGN KWU318;Lo;0;L;;;;;N;;;;;
121B7;CUNEIFORM SIGN LA;Lo;0;L;;;;;N;;;;;
121B8;CUNEIFORM SIGN LAGAB;Lo;0;L;;;;;N;;;;;
121B9;CUNEIFORM SIGN LAGAB TIMES A;Lo;0;L;;;;;N;;;;;
121BA;CUNEIFORM SIGN LAGAB TIMES A PLUS DA PLUS HA;Lo;0;L;;;;;N;;;;;
121BB;CUNEIFORM SIGN LAGAB TIMES A PLUS GAR;Lo;0;L;;;;;N;;;;;
121BC;CUNEIFORM SIGN LAGAB TIMES A PLUS LAL;Lo;0;L;;;;;N;;;;;
121BD;CUNEIFORM SIGN LAGAB TIMES AL;Lo;0;L;;;;;N;;;;;
121BE;CUNEIFORM SIGN LAGAB TIMES AN;Lo;0;L;;;;;N;;;;;
121BF;CUNEIFORM SIGN LAGAB TIMES ASH ZIDA TENU;Lo;0;L;;;;;N;;;;;
121C0;CUNEIFORM SIGN LAGAB TIMES BAD;Lo;0;L;;;;;N;;;;;
121C1;CUNEIFORM SIGN LAGAB TIMES BI;Lo;0;L;;;;;N;;;;;
121C2;CUNEIFORM SIGN LAGAB TIMES DAR;Lo;0;L;;;;;N;;;;;
121C3;CUNEIFORM SIGN LAGAB TIMES EN;Lo;0;L;;;;;N;;;;;
121C4;CUNEIFORM SIGN LAGAB TIMES GA;Lo;0;L;;;;;N;;;;;
121C5;CUNEIFORM SIGN LAGAB TIMES GAR;Lo;0;L;;;;;N;;;;;
121C6;CUNEIFORM SIGN LAGAB TIMES GUD;Lo;0;L;;;;;N;;;;;
121C7;CUNEIFORM SIGN LAGAB TIMES GUD PLUS GUD;Lo;0;L;;;;;N;;;;;
121C8;CUNEIFORM SIGN LAGAB TIMES HA;Lo;0;L;;;;;N;;;;;
121C9;CUNEIFORM SIGN LAGAB TIMES HAL;Lo;0;L;;;;;N;;;;;
121CA;CUNEIFORM SIGN LAGAB TIMES HI TIMES NUN;Lo;0;L;;;;;N;;;;;
121CB;CUNEIFORM SIGN LAGAB TIMES IGI GUNU;Lo;0;L;;;;;N;;;;;
121CC;CUNEIFORM SIGN LAGAB TIMES IM;Lo;0;L;;;;;N;;;;;
121CD;CUNEIFORM SIGN LAGAB TIMES IM PLUS HA;Lo;0;L;;;;;N;;;;;
121CE;CUNEIFORM SIGN LAGAB TIMES IM PLUS LU;Lo;0;L;;;;;N;;;;;
121CF;CUNEIFORM SIGN LAGAB TIMES KI;Lo;0;L;;;;;N;;;;;
121D0;CUNEIFORM SIGN LAGAB TIMES KIN;Lo;0;L;;;;;N;;;;;
121D1;CUNEIFORM SIGN LAGAB TIMES KU3;Lo;0;L;;;;;N;;;;;
121D2;CUNEIFORM SIGN LAGAB TIMES KUL;Lo;0;L;;;;;N;;;;;
121D3;CUNEIFORM SIGN LAGAB TIMES KUL PLUS HI PLUS A;Lo;0;L;;;;;N;;;;;
121D4;CUNEIFORM SIGN LAGAB TIMES LAGAB;Lo;0;L;;;;;N;;;;;
121D5;CUNEIFORM SIGN LAGAB TIMES LISH;Lo;0;L;;;;;N;;;;;
121D6;CUNEIFORM SIGN LAGAB TIMES LU;Lo;0;L;;;;;N;;;;;
121D7;CUNEIFORM SIGN LAGAB TIMES LUL;Lo;0;L;;;;;N;;;;;
121D8;CUNEIFORM SIGN LAGAB TIMES ME;Lo;0;L;;;;;N;;;;;
121D9;CUNEIFORM SIGN LAGAB TIMES ME PLUS EN;Lo;0;L;;;;;N;;;;;
121DA;CUNEIFORM SIGN LAGAB TIMES MUSH;Lo;0;L;;;;;N;;;;;
121DB;CUNEIFORM SIGN LAGAB TIMES NE;Lo;0;L;;;;;N;;;;;
121DC;CUNEIFORM SIGN LAGAB TIMES SHE PLUS SUM;Lo;0;L;;;;;N;;;;;
121DD;CUNEIFORM SIGN LAGAB TIMES SHITA PLUS GISH PLUS ERIN2;Lo;0;L;;;;;N;;;;;
121DE;CUNEIFORM SIGN LAGAB TIMES SHITA PLUS GISH TENU;Lo;0;L;;;;;N;;;;;
121DF;CUNEIFORM SIGN LAGAB TIMES SHU2;Lo;0;L;;;;;N;;;;;
121E0;CUNEIFORM SIGN LAGAB TIMES SHU2 PLUS SHU2;Lo;0;L;;;;;N;;;;;
121E1;CUNEIFORM SIGN LAGAB TIMES SUM;Lo;0;L;;;;;N;;;;;
121E2;CUNEIFORM SIGN LAGAB TIMES TAG;Lo;0;L;;;;;N;;;;;
121E3;CUNEIFORM SIGN LAGAB TIMES TAK4;Lo;0;L;;;;;N;;;;;
121E4;CUNEIFORM SIGN LAGAB TIMES TE PLUS A PLUS SU PLUS NA;Lo;0;L;;;;;N;;;;;
121E5;CUNEIFORM SIGN LAGAB TIMES U;Lo;0;L;;;;;N;;;;;
121E6;CUNEIFORM SIGN LAGAB TIMES U PLUS A;Lo;0;L;;;;;N;;;;;
121E7;CUNEIFORM SIGN LAGAB TIMES U PLUS U PLUS U;Lo;0;L;;;;;N;;;;;
121E8;CUNEIFORM SIGN LAGAB TIMES U2 PLUS ASH;Lo;0;L;;;;;N;;;;;
121E9;CUNEIFORM SIGN LAGAB TIMES UD;Lo;0;L;;;;;N;;;;;
121EA;CUNEIFORM SIGN LAGAB TIMES USH;Lo;0;L;;;;;N;;;;;
121EB;CUNEIFORM SIGN LAGAB SQUARED;Lo;0;L;;;;;N;;;;;
121EC;CUNEIFORM SIGN LAGAR;Lo;0;L;;;;;N;;;;;
121ED;CUNEIFORM SIGN LAGAR TIMES SHE;Lo;0;L;;;;;N;;;;;
121EE;CUNEIFORM SIGN LAGAR TIMES SHE PLUS SUM;Lo;0;L;;;;;N;;;;;
121EF;CUNEIFORM SIGN LAGAR GUNU;Lo;0;L;;;;;N;;;;;
121F0;CUNEIFORM SIGN LAGAR GUNU OVER LAGAR GUNU SHE;Lo;0;L;;;;;N;;;;;
121F1;CUNEIFORM SIGN LAHSHU;Lo;0;L;;;;;N;;;;;
121F2;CUNEIFORM SIGN LAL;Lo;0;L;;;;;N;;;;;
121F3;CUNEIFORM SIGN LAL TIMES LAL;Lo;0;L;;;;;N;;;;;
121F4;CUNEIFORM SIGN LAM;Lo;0;L;;;;;N;;;;;
121F5;CUNEIFORM SIGN LAM TIMES KUR;Lo;0;L;;;;;N;;;;;
121F6;CUNEIFORM SIGN LAM TIMES KUR PLUS RU;Lo;0;L;;;;;N;;;;;
121F7;CUNEIFORM SIGN LI;Lo;0;L;;;;;N;;;;;
121F8;CUNEIFORM SIGN LIL;Lo;0;L;;;;;N;;;;;
121F9;CUNEIFORM SIGN LIMMU2;Lo;0;L;;;;;N;;;;;
121FA;CUNEIFORM SIGN LISH;Lo;0;L;;;;;N;;;;;
121FB;CUNEIFORM SIGN LU;Lo;0;L;;;;;N;;;;;
121FC;CUNEIFORM SIGN LU TIMES BAD;Lo;0;L;;;;;N;;;;;
121FD;CUNEIFORM SIGN LU2;Lo;0;L;;;;;N;;;;;
121FE;CUNEIFORM SIGN LU2 TIMES AL;Lo;0;L;;;;;N;;;;;
121FF;CUNEIFORM SIGN LU2 TIMES BAD;Lo;0;L;;;;;N;;;;;
12200;CUNEIFORM SIGN LU2 TIMES ESH2;Lo;0;L;;;;;N;;;;;
12201;CUNEIFORM SIGN LU2 TIMES ESH2 TENU;Lo;0;L;;;;;N;;;;;
12202;CUNEIFORM SIGN LU2 TIMES GAN2 TENU;Lo;0;L;;;;;N;;;;;
12203;CUNEIFORM SIGN LU2 TIMES HI TIMES BAD;Lo;0;L;;;;;N;;;;;
12204;CUNEIFORM SIGN LU2 TIMES IM;Lo;0;L;;;;;N;;;;;
12205;CUNEIFORM SIGN LU2 TIMES KAD2;Lo;0;L;;;;;N;;;;;
12206;CUNEIFORM SIGN LU2 TIMES KAD3;Lo;0;L;;;;;N;;;;;
12207;CUNEIFORM SIGN LU2 TIMES KAD3 PLUS ASH;Lo;0;L;;;;;N;;;;;
12208;CUNEIFORM SIGN LU2 TIMES KI;Lo;0;L;;;;;N;;;;;
12209;CUNEIFORM SIGN LU2 TIMES LA PLUS ASH;Lo;0;L;;;;;N;;;;;
1220A;CUNEIFORM SIGN LU2 TIMES LAGAB;Lo;0;L;;;;;N;;;;;
1220B;CUNEIFORM SIGN LU2 TIMES ME PLUS EN;Lo;0;L;;;;;N;;;;;
1220C;CUNEIFORM SIGN LU2 TIMES NE;Lo;0;L;;;;;N;;;;;
1220D;CUNEIFORM SIGN LU2 TIMES NU;Lo;0;L;;;;;N;;;;;
1220E;CUNEIFORM SIGN LU2 TIMES SI PLUS ASH;Lo;0;L;;;;;N;;;;;
1220F;CUNEIFORM SIGN LU2 TIMES SIK2 PLUS BU;Lo;0;L;;;;;N;;;;;
12210;CUNEIFORM SIGN LU2 TIMES TUG2;Lo;0;L;;;;;N;;;;;
12211;CUNEIFORM SIGN LU2 TENU;Lo;0;L;;;;;N;;;;;
12212;CUNEIFORM SIGN LU2 CROSSING LU2;Lo;0;L;;;;;N;;;;;
12213;CUNEIFORM SIGN LU2 OPPOSING LU2;Lo;0;L;;;;;N;;;;;
12214;CUNEIFORM SIGN LU2 SQUARED;Lo;0;L;;;;;N;;;;;
12215;CUNEIFORM SIGN LU2 SHESHIG;Lo;0;L;;;;;N;;;;;
12216;CUNEIFORM SIGN LU3;Lo;0;L;;;;;N;;;;;
12217;CUNEIFORM SIGN LUGAL;Lo;0;L;;;;;N;;;;;
12218;CUNEIFORM SIGN LUGAL OVER LUGAL;Lo;0;L;;;;;N;;;;;
12219;CUNEIFORM SIGN LUGAL OPPOSING LUGAL;Lo;0;L;;;;;N;;;;;
1221A;CUNEIFORM SIGN LUGAL SHESHIG;Lo;0;L;;;;;N;;;;;
1221B;CUNEIFORM SIGN LUH;Lo;0;L;;;;;N;;;;;
1221C;CUNEIFORM SIGN LUL;Lo;0;L;;;;;N;;;;;
1221D;CUNEIFORM SIGN LUM;Lo;0;L;;;;;N;;;;;
1221E;CUNEIFORM SIGN LUM OVER LUM;Lo;0;L;;;;;N;;;;;
1221F;CUNEIFORM SIGN LUM OVER LUM GAR OVER GAR;Lo;0;L;;;;;N;;;;;
12220;CUNEIFORM SIGN MA;Lo;0;L;;;;;N;;;;;
12221;CUNEIFORM SIGN MA TIMES TAK4;Lo;0;L;;;;;N;;;;;
12222;CUNEIFORM SIGN MA GUNU;Lo;0;L;;;;;N;;;;;
12223;CUNEIFORM SIGN MA2;Lo;0;L;;;;;N;;;;;
12224;CUNEIFORM SIGN MAH;Lo;0;L;;;;;N;;;;;
12225;CUNEIFORM SIGN MAR;Lo;0;L;;;;;N;;;;;
12226;CUNEIFORM SIGN MASH;Lo;0;L;;;;;N;;;;;
12227;CUNEIFORM SIGN MASH2;Lo;0;L;;;;;N;;;;;
12228;CUNEIFORM SIGN ME;Lo;0;L;;;;;N;;;;;
12229;CUNEIFORM SIGN MES;Lo;0;L;;;;;N;;;;;
1222A;CUNEIFORM SIGN MI;Lo;0;L;;;;;N;;;;;
1222B;CUNEIFORM SIGN MIN;Lo;0;L;;;;;N;;;;;
1222C;CUNEIFORM SIGN MU;Lo;0;L;;;;;N;;;;;
1222D;CUNEIFORM SIGN MU OVER MU;Lo;0;L;;;;;N;;;;;
1222E;CUNEIFORM SIGN MUG;Lo;0;L;;;;;N;;;;;
1222F;CUNEIFORM SIGN MUG GUNU;Lo;0;L;;;;;N;;;;;
12230;CUNEIFORM SIGN MUNSUB;Lo;0;L;;;;;N;;;;;
12231;CUNEIFORM SIGN MURGU2;Lo;0;L;;;;;N;;;;;
12232;CUNEIFORM SIGN MUSH;Lo;0;L;;;;;N;;;;;
12233;CUNEIFORM SIGN MUSH TIMES A;Lo;0;L;;;;;N;;;;;
12234;CUNEIFORM SIGN MUSH TIMES KUR;Lo;0;L;;;;;N;;;;;
12235;CUNEIFORM SIGN MUSH TIMES ZA;Lo;0;L;;;;;N;;;;;
12236;CUNEIFORM SIGN MUSH OVER MUSH;Lo;0;L;;;;;N;;;;;
12237;CUNEIFORM SIGN MUSH OVER MUSH TIMES A PLUS NA;Lo;0;L;;;;;N;;;;;
12238;CUNEIFORM SIGN MUSH CROSSING MUSH;Lo;0;L;;;;;N;;;;;
12239;CUNEIFORM SIGN MUSH3;Lo;0;L;;;;;N;;;;;
1223A;CUNEIFORM SIGN MUSH3 TIMES A;Lo;0;L;;;;;N;;;;;
1223B;CUNEIFORM SIGN MUSH3 TIMES A PLUS DI;Lo;0;L;;;;;N;;;;;
1223C;CUNEIFORM SIGN MUSH3 TIMES DI;Lo;0;L;;;;;N;;;;;
1223D;CUNEIFORM SIGN MUSH3 GUNU;Lo;0;L;;;;;N;;;;;
1223E;CUNEIFORM SIGN NA;Lo;0;L;;;;;N;;;;;
1223F;CUNEIFORM SIGN NA2;Lo;0;L;;;;;N;;;;;
12240;CUNEIFORM SIGN NAGA;Lo;0;L;;;;;N;;;;;
12241;CUNEIFORM SIGN NAGA INVERTED;Lo;0;L;;;;;N;;;;;
12242;CUNEIFORM SIGN NAGA TIMES SHU TENU;Lo;0;L;;;;;N;;;;;
12243;CUNEIFORM SIGN NAGA OPPOSING NAGA;Lo;0;L;;;;;N;;;;;
12244;CUNEIFORM SIGN NAGAR;Lo;0;L;;;;;N;;;;;
12245;CUNEIFORM SIGN NAM NUTILLU;Lo;0;L;;;;;N;;;;;
12246;CUNEIFORM SIGN NAM;Lo;0;L;;;;;N;;;;;
12247;CUNEIFORM SIGN NAM2;Lo;0;L;;;;;N;;;;;
12248;CUNEIFORM SIGN NE;Lo;0;L;;;;;N;;;;;
12249;CUNEIFORM SIGN NE TIMES A;Lo;0;L;;;;;N;;;;;
1224A;CUNEIFORM SIGN NE TIMES UD;Lo;0;L;;;;;N;;;;;
1224B;CUNEIFORM SIGN NE SHESHIG;Lo;0;L;;;;;N;;;;;
1224C;CUNEIFORM SIGN NI;Lo;0;L;;;;;N;;;;;
1224D;CUNEIFORM SIGN NI TIMES E;Lo;0;L;;;;;N;;;;;
1224E;CUNEIFORM SIGN NI2;Lo;0;L;;;;;N;;;;;
1224F;CUNEIFORM SIGN NIM;Lo;0;L;;;;;N;;;;;
12250;CUNEIFORM SIGN NIM TIMES GAN2 TENU;Lo;0;L;;;;;N;;;;;
12251;CUNEIFORM SIGN NIM TIMES GAR PLUS GAN2 TENU;Lo;0;L;;;;;N;;;;;
12252;CUNEIFORM SIGN NINDA2;Lo;0;L;;;;;N;;;;;
12253;CUNEIFORM SIGN NINDA2 TIMES AN;Lo;0;L;;;;;N;;;;;
12254;CUNEIFORM SIGN NINDA2 TIMES ASH;Lo;0;L;;;;;N;;;;;
12255;CUNEIFORM SIGN NINDA2 TIMES ASH PLUS ASH;Lo;0;L;;;;;N;;;;;
12256;CUNEIFORM SIGN NINDA2 TIMES GUD;Lo;0;L;;;;;N;;;;;
12257;CUNEIFORM SIGN NINDA2 TIMES ME PLUS GAN2 TENU;Lo;0;L;;;;;N;;;;;
12258;CUNEIFORM SIGN NINDA2 TIMES NE;Lo;0;L;;;;;N;;;;;
12259;CUNEIFORM SIGN NINDA2 TIMES NUN;Lo;0;L;;;;;N;;;;;
1225A;CUNEIFORM SIGN NINDA2 TIMES SHE;Lo;0;L;;;;;N;;;;;
1225B;CUNEIFORM SIGN NINDA2 TIMES SHE PLUS A AN;Lo;0;L;;;;;N;;;;;
1225C;CUNEIFORM SIGN NINDA2 TIMES SHE PLUS ASH;Lo;0;L;;;;;N;;;;;
1225D;CUNEIFORM SIGN NINDA2 TIMES SHE PLUS ASH PLUS ASH;Lo;0;L;;;;;N;;;;;
1225E;CUNEIFORM SIGN NINDA2 TIMES U2 PLUS ASH;Lo;0;L;;;;;N;;;;;
1225F;CUNEIFORM SIGN NINDA2 TIMES USH;Lo;0;L;;;;;N;;;;;
12260;CUNEIFORM SIGN NISAG;Lo;0;L;;;;;N;;;;;
12261;CUNEIFORM SIGN NU;Lo;0;L;;;;;N;;;;;
12262;CUNEIFORM SIGN NU11;Lo;0;L;;;;;N;;;;;
12263;CUNEIFORM SIGN NUN;Lo;0;L;;;;;N;;;;;
12264;CUNEIFORM SIGN NUN LAGAR TIMES GAR;Lo;0;L;;;;;N;;;;;
12265;CUNEIFORM SIGN NUN LAGAR TIMES MASH;Lo;0;L;;;;;N;;;;;
12266;CUNEIFORM SIGN NUN LAGAR TIMES SAL;Lo;0;L;;;;;N;;;;;
12267;CUNEIFORM SIGN NUN LAGAR TIMES SAL OVER NUN LAGAR TIMES SAL;Lo;0;L;;;;;N;;;;;
12268;CUNEIFORM SIGN NUN LAGAR TIMES USH;Lo;0;L;;;;;N;;;;;
12269;CUNEIFORM SIGN NUN TENU;Lo;0;L;;;;;N;;;;;
1226A;CUNEIFORM SIGN NUN OVER NUN;Lo;0;L;;;;;N;;;;;
1226B;CUNEIFORM SIGN NUN CROSSING NUN;Lo;0;L;;;;;N;;;;;
1226C;CUNEIFORM SIGN NUN CROSSING NUN LAGAR OVER LAGAR;Lo;0;L;;;;;N;;;;;
1226D;CUNEIFORM SIGN NUNUZ;Lo;0;L;;;;;N;;;;;
1226E;CUNEIFORM SIGN NUNUZ AB2 TIMES ASHGAB;Lo;0;L;;;;;N;;;;;
1226F;CUNEIFORM SIGN NUNUZ AB2 TIMES BI;Lo;0;L;;;;;N;;;;;
12270;CUNEIFORM SIGN NUNUZ AB2 TIMES DUG;Lo;0;L;;;;;N;;;;;
12271;CUNEIFORM SIGN NUNUZ AB2 TIMES GUD;Lo;0;L;;;;;N;;;;;
12272;CUNEIFORM SIGN NUNUZ AB2 TIMES IGI GUNU;Lo;0;L;;;;;N;;;;;
12273;CUNEIFORM SIGN NUNUZ AB2 TIMES KAD3;Lo;0;L;;;;;N;;;;;
12274;CUNEIFORM SIGN NUNUZ AB2 TIMES LA;Lo;0;L;;;;;N;;;;;
12275;CUNEIFORM SIGN NUNUZ AB2 TIMES NE;Lo;0;L;;;;;N;;;;;
12276;CUNEIFORM SIGN NUNUZ AB2 TIMES SILA3;Lo;0;L;;;;;N;;;;;
12277;CUNEIFORM SIGN NUNUZ AB2 TIMES U2;Lo;0;L;;;;;N;;;;;
12278;CUNEIFORM SIGN NUNUZ KISIM5 TIMES BI;Lo;0;L;;;;;N;;;;;
12279;CUNEIFORM SIGN NUNUZ KISIM5 TIMES BI U;Lo;0;L;;;;;N;;;;;
1227A;CUNEIFORM SIGN PA;Lo;0;L;;;;;N;;;;;
1227B;CUNEIFORM SIGN PAD;Lo;0;L;;;;;N;;;;;
1227C;CUNEIFORM SIGN PAN;Lo;0;L;;;;;N;;;;;
1227D;CUNEIFORM SIGN PAP;Lo;0;L;;;;;N;;;;;
1227E;CUNEIFORM SIGN PESH2;Lo;0;L;;;;;N;;;;;
1227F;CUNEIFORM SIGN PI;Lo;0;L;;;;;N;;;;;
12280;CUNEIFORM SIGN PI TIMES A;Lo;0;L;;;;;N;;;;;
12281;CUNEIFORM SIGN PI TIMES AB;Lo;0;L;;;;;N;;;;;
12282;CUNEIFORM SIGN PI TIMES BI;Lo;0;L;;;;;N;;;;;
12283;CUNEIFORM SIGN PI TIMES BU;Lo;0;L;;;;;N;;;;;
12284;CUNEIFORM SIGN PI TIMES E;Lo;0;L;;;;;N;;;;;
12285;CUNEIFORM SIGN PI TIMES I;Lo;0;L;;;;;N;;;;;
12286;CUNEIFORM SIGN PI TIMES IB;Lo;0;L;;;;;N;;;;;
12287;CUNEIFORM SIGN PI TIMES U;Lo;0;L;;;;;N;;;;;
12288;CUNEIFORM SIGN PI TIMES U2;Lo;0;L;;;;;N;;;;;
12289;CUNEIFORM SIGN PI CROSSING PI;Lo;0;L;;;;;N;;;;;
1228A;CUNEIFORM SIGN PIRIG;Lo;0;L;;;;;N;;;;;
1228B;CUNEIFORM SIGN PIRIG TIMES KAL;Lo;0;L;;;;;N;;;;;
1228C;CUNEIFORM SIGN PIRIG TIMES UD;Lo;0;L;;;;;N;;;;;
1228D;CUNEIFORM SIGN PIRIG TIMES ZA;Lo;0;L;;;;;N;;;;;
1228E;CUNEIFORM SIGN PIRIG OPPOSING PIRIG;Lo;0;L;;;;;N;;;;;
1228F;CUNEIFORM SIGN RA;Lo;0;L;;;;;N;;;;;
12290;CUNEIFORM SIGN RAB;Lo;0;L;;;;;N;;;;;
12291;CUNEIFORM SIGN RI;Lo;0;L;;;;;N;;;;;
12292;CUNEIFORM SIGN RU;Lo;0;L;;;;;N;;;;;
12293;CUNEIFORM SIGN SA;Lo;0;L;;;;;N;;;;;
12294;CUNEIFORM SIGN SAG NUTILLU;Lo;0;L;;;;;N;;;;;
12295;CUNEIFORM SIGN SAG;Lo;0;L;;;;;N;;;;;
12296;CUNEIFORM SIGN SAG TIMES A;Lo;0;L;;;;;N;;;;;
12297;CUNEIFORM SIGN SAG TIMES DU;Lo;0;L;;;;;N;;;;;
12298;CUNEIFORM SIGN SAG TIMES DUB;Lo;0;L;;;;;N;;;;;
12299;CUNEIFORM SIGN SAG TIMES HA;Lo;0;L;;;;;N;;;;;
1229A;CUNEIFORM SIGN SAG TIMES KAK;Lo;0;L;;;;;N;;;;;
1229B;CUNEIFORM SIGN SAG TIMES KUR;Lo;0;L;;;;;N;;;;;
1229C;CUNEIFORM SIGN SAG TIMES LUM;Lo;0;L;;;;;N;;;;;
1229D;CUNEIFORM SIGN SAG TIMES MI;Lo;0;L;;;;;N;;;;;
1229E;CUNEIFORM SIGN SAG TIMES NUN;Lo;0;L;;;;;N;;;;;
1229F;CUNEIFORM SIGN SAG TIMES SAL;Lo;0;L;;;;;N;;;;;
122A0;CUNEIFORM SIGN SAG TIMES SHID;Lo;0;L;;;;;N;;;;;
122A1;CUNEIFORM SIGN SAG TIMES TAB;Lo;0;L;;;;;N;;;;;
122A2;CUNEIFORM SIGN SAG TIMES U2;Lo;0;L;;;;;N;;;;;
122A3;CUNEIFORM SIGN SAG TIMES UB;Lo;0;L;;;;;N;;;;;
122A4;CUNEIFORM SIGN SAG TIMES UM;Lo;0;L;;;;;N;;;;;
122A5;CUNEIFORM SIGN SAG TIMES UR;Lo;0;L;;;;;N;;;;;
122A6;CUNEIFORM SIGN SAG TIMES USH;Lo;0;L;;;;;N;;;;;
122A7;CUNEIFORM SIGN SAG OVER SAG;Lo;0;L;;;;;N;;;;;
122A8;CUNEIFORM SIGN SAG GUNU;Lo;0;L;;;;;N;;;;;
122A9;CUNEIFORM SIGN SAL;Lo;0;L;;;;;N;;;;;
122AA;CUNEIFORM SIGN SAL LAGAB TIMES ASH2;Lo;0;L;;;;;N;;;;;
122AB;CUNEIFORM SIGN SANGA2;Lo;0;L;;;;;N;;;;;
122AC;CUNEIFORM SIGN SAR;Lo;0;L;;;;;N;;;;;
122AD;CUNEIFORM SIGN SHA;Lo;0;L;;;;;N;;;;;
122AE;CUNEIFORM SIGN SHA3;Lo;0;L;;;;;N;;;;;
122AF;CUNEIFORM SIGN SHA3 TIMES A;Lo;0;L;;;;;N;;;;;
122B0;CUNEIFORM SIGN SHA3 TIMES BAD;Lo;0;L;;;;;N;;;;;
122B1;CUNEIFORM SIGN SHA3 TIMES GISH;Lo;0;L;;;;;N;;;;;
122B2;CUNEIFORM SIGN SHA3 TIMES NE;Lo;0;L;;;;;N;;;;;
122B3;CUNEIFORM SIGN SHA3 TIMES SHU2;Lo;0;L;;;;;N;;;;;
122B4;CUNEIFORM SIGN SHA3 TIMES TUR;Lo;0;L;;;;;N;;;;;
122B5;CUNEIFORM SIGN SHA3 TIMES U;Lo;0;L;;;;;N;;;;;
122B6;CUNEIFORM SIGN SHA3 TIMES U PLUS A;Lo;0;L;;;;;N;;;;;
122B7;CUNEIFORM SIGN SHA6;Lo;0;L;;;;;N;;;;;
122B8;CUNEIFORM SIGN SHAB6;Lo;0;L;;;;;N;;;;;
122B9;CUNEIFORM SIGN SHAR2;Lo;0;L;;;;;N;;;;;
122BA;CUNEIFORM SIGN SHE;Lo;0;L;;;;;N;;;;;
122BB;CUNEIFORM SIGN SHE HU;Lo;0;L;;;;;N;;;;;
122BC;CUNEIFORM SIGN SHE OVER SHE GAD OVER GAD GAR OVER GAR;Lo;0;L;;;;;N;;;;;
122BD;CUNEIFORM SIGN SHE OVER SHE TAB OVER TAB GAR OVER GAR;Lo;0;L;;;;;N;;;;;
122BE;CUNEIFORM SIGN SHEG9;Lo;0;L;;;;;N;;;;;
122BF;CUNEIFORM SIGN SHEN;Lo;0;L;;;;;N;;;;;
122C0;CUNEIFORM SIGN SHESH;Lo;0;L;;;;;N;;;;;
122C1;CUNEIFORM SIGN SHESH2;Lo;0;L;;;;;N;;;;;
122C2;CUNEIFORM SIGN SHESHLAM;Lo;0;L;;;;;N;;;;;
122C3;CUNEIFORM SIGN SHID;Lo;0;L;;;;;N;;;;;
122C4;CUNEIFORM SIGN SHID TIMES A;Lo;0;L;;;;;N;;;;;
122C5;CUNEIFORM SIGN SHID TIMES IM;Lo;0;L;;;;;N;;;;;
122C6;CUNEIFORM SIGN SHIM;Lo;0;L;;;;;N;;;;;
122C7;CUNEIFORM SIGN SHIM TIMES A;Lo;0;L;;;;;N;;;;;
122C8;CUNEIFORM SIGN SHIM TIMES BAL;Lo;0;L;;;;;N;;;;;
122C9;CUNEIFORM SIGN SHIM TIMES BULUG;Lo;0;L;;;;;N;;;;;
122CA;CUNEIFORM SIGN SHIM TIMES DIN;Lo;0;L;;;;;N;;;;;
122CB;CUNEIFORM SIGN SHIM TIMES GAR;Lo;0;L;;;;;N;;;;;
122CC;CUNEIFORM SIGN SHIM TIMES IGI;Lo;0;L;;;;;N;;;;;
122CD;CUNEIFORM SIGN SHIM TIMES IGI GUNU;Lo;0;L;;;;;N;;;;;
122CE;CUNEIFORM SIGN SHIM TIMES KUSHU2;Lo;0;L;;;;;N;;;;;
122CF;CUNEIFORM SIGN SHIM TIMES LUL;Lo;0;L;;;;;N;;;;;
122D0;CUNEIFORM SIGN SHIM TIMES MUG;Lo;0;L;;;;;N;;;;;
122D1;CUNEIFORM SIGN SHIM TIMES SAL;Lo;0;L;;;;;N;;;;;
122D2;CUNEIFORM SIGN SHINIG;Lo;0;L;;;;;N;;;;;
122D3;CUNEIFORM SIGN SHIR;Lo;0;L;;;;;N;;;;;
122D4;CUNEIFORM SIGN SHIR TENU;Lo;0;L;;;;;N;;;;;
122D5;CUNEIFORM SIGN SHIR OVER SHIR BUR OVER BUR;Lo;0;L;;;;;N;;;;;
122D6;CUNEIFORM SIGN SHITA;Lo;0;L;;;;;N;;;;;
122D7;CUNEIFORM SIGN SHU;Lo;0;L;;;;;N;;;;;
122D8;CUNEIFORM SIGN SHU OVER INVERTED SHU;Lo;0;L;;;;;N;;;;;
122D9;CUNEIFORM SIGN SHU2;Lo;0;L;;;;;N;;;;;
122DA;CUNEIFORM SIGN SHUBUR;Lo;0;L;;;;;N;;;;;
122DB;CUNEIFORM SIGN SI;Lo;0;L;;;;;N;;;;;
122DC;CUNEIFORM SIGN SI GUNU;Lo;0;L;;;;;N;;;;;
122DD;CUNEIFORM SIGN SIG;Lo;0;L;;;;;N;;;;;
122DE;CUNEIFORM SIGN SIG4;Lo;0;L;;;;;N;;;;;
122DF;CUNEIFORM SIGN SIG4 OVER SIG4 SHU2;Lo;0;L;;;;;N;;;;;
122E0;CUNEIFORM SIGN SIK2;Lo;0;L;;;;;N;;;;;
122E1;CUNEIFORM SIGN SILA3;Lo;0;L;;;;;N;;;;;
122E2;CUNEIFORM SIGN SU;Lo;0;L;;;;;N;;;;;
122E3;CUNEIFORM SIGN SU OVER SU;Lo;0;L;;;;;N;;;;;
122E4;CUNEIFORM SIGN SUD;Lo;0;L;;;;;N;;;;;
122E5;CUNEIFORM SIGN SUD2;Lo;0;L;;;;;N;;;;;
122E6;CUNEIFORM SIGN SUHUR;Lo;0;L;;;;;N;;;;;
122E7;CUNEIFORM SIGN SUM;Lo;0;L;;;;;N;;;;;
122E8;CUNEIFORM SIGN SUMASH;Lo;0;L;;;;;N;;;;;
122E9;CUNEIFORM SIGN SUR;Lo;0;L;;;;;N;;;;;
122EA;CUNEIFORM SIGN SUR9;Lo;0;L;;;;;N;;;;;
122EB;CUNEIFORM SIGN TA;Lo;0;L;;;;;N;;;;;
122EC;CUNEIFORM SIGN TA ASTERISK;Lo;0;L;;;;;N;;;;;
122ED;CUNEIFORM SIGN TA TIMES HI;Lo;0;L;;;;;N;;;;;
122EE;CUNEIFORM SIGN TA TIMES MI;Lo;0;L;;;;;N;;;;;
122EF;CUNEIFORM SIGN TA GUNU;Lo;0;L;;;;;N;;;;;
122F0;CUNEIFORM SIGN TAB;Lo;0;L;;;;;N;;;;;
122F1;CUNEIFORM SIGN TAB OVER TAB NI OVER NI DISH OVER DISH;Lo;0;L;;;;;N;;;;;
122F2;CUNEIFORM SIGN TAB SQUARED;Lo;0;L;;;;;N;;;;;
122F3;CUNEIFORM SIGN TAG;Lo;0;L;;;;;N;;;;;
122F4;CUNEIFORM SIGN TAG TIMES BI;Lo;0;L;;;;;N;;;;;
122F5;CUNEIFORM SIGN TAG TIMES GUD;Lo;0;L;;;;;N;;;;;
122F6;CUNEIFORM SIGN TAG TIMES SHE;Lo;0;L;;;;;N;;;;;
122F7;CUNEIFORM SIGN TAG TIMES SHU;Lo;0;L;;;;;N;;;;;
122F8;CUNEIFORM SIGN TAG TIMES TUG2;Lo;0;L;;;;;N;;;;;
122F9;CUNEIFORM SIGN TAG TIMES UD;Lo;0;L;;;;;N;;;;;
122FA;CUNEIFORM SIGN TAK4;Lo;0;L;;;;;N;;;;;
122FB;CUNEIFORM SIGN TAR;Lo;0;L;;;;;N;;;;;
122FC;CUNEIFORM SIGN TE;Lo;0;L;;;;;N;;;;;
122FD;CUNEIFORM SIGN TE GUNU;Lo;0;L;;;;;N;;;;;
122FE;CUNEIFORM SIGN TI;Lo;0;L;;;;;N;;;;;
122FF;CUNEIFORM SIGN TI TENU;Lo;0;L;;;;;N;;;;;
12300;CUNEIFORM SIGN TIL;Lo;0;L;;;;;N;;;;;
12301;CUNEIFORM SIGN TIR;Lo;0;L;;;;;N;;;;;
12302;CUNEIFORM SIGN TIR TIMES TAK4;Lo;0;L;;;;;N;;;;;
12303;CUNEIFORM SIGN TIR OVER TIR;Lo;0;L;;;;;N;;;;;
12304;CUNEIFORM SIGN TIR OVER TIR GAD OVER GAD GAR OVER GAR;Lo;0;L;;;;;N;;;;;
12305;CUNEIFORM SIGN TU;Lo;0;L;;;;;N;;;;;
12306;CUNEIFORM SIGN TUG2;Lo;0;L;;;;;N;;;;;
12307;CUNEIFORM SIGN TUK;Lo;0;L;;;;;N;;;;;
12308;CUNEIFORM SIGN TUM;Lo;0;L;;;;;N;;;;;
12309;CUNEIFORM SIGN TUR;Lo;0;L;;;;;N;;;;;
1230A;CUNEIFORM SIGN TUR OVER TUR ZA OVER ZA;Lo;0;L;;;;;N;;;;;
1230B;CUNEIFORM SIGN U;Lo;0;L;;;;;N;;;;;
1230C;CUNEIFORM SIGN U GUD;Lo;0;L;;;;;N;;;;;
1230D;CUNEIFORM SIGN U U U;Lo;0;L;;;;;N;;;;;
1230E;CUNEIFORM SIGN U OVER U PA OVER PA GAR OVER GAR;Lo;0;L;;;;;N;;;;;
1230F;CUNEIFORM SIGN U OVER U SUR OVER SUR;Lo;0;L;;;;;N;;;;;
12310;CUNEIFORM SIGN U OVER U U REVERSED OVER U REVERSED;Lo;0;L;;;;;N;;;;;
12311;CUNEIFORM SIGN U2;Lo;0;L;;;;;N;;;;;
12312;CUNEIFORM SIGN UB;Lo;0;L;;;;;N;;;;;
12313;CUNEIFORM SIGN UD;Lo;0;L;;;;;N;;;;;
12314;CUNEIFORM SIGN UD KUSHU2;Lo;0;L;;;;;N;;;;;
12315;CUNEIFORM SIGN UD TIMES BAD;Lo;0;L;;;;;N;;;;;
12316;CUNEIFORM SIGN UD TIMES MI;Lo;0;L;;;;;N;;;;;
12317;CUNEIFORM SIGN UD TIMES U PLUS U PLUS U;Lo;0;L;;;;;N;;;;;
12318;CUNEIFORM SIGN UD TIMES U PLUS U PLUS U GUNU;Lo;0;L;;;;;N;;;;;
12319;CUNEIFORM SIGN UD GUNU;Lo;0;L;;;;;N;;;;;
1231A;CUNEIFORM SIGN UD SHESHIG;Lo;0;L;;;;;N;;;;;
1231B;CUNEIFORM SIGN UD SHESHIG TIMES BAD;Lo;0;L;;;;;N;;;;;
1231C;CUNEIFORM SIGN UDUG;Lo;0;L;;;;;N;;;;;
1231D;CUNEIFORM SIGN UM;Lo;0;L;;;;;N;;;;;
1231E;CUNEIFORM SIGN UM TIMES LAGAB;Lo;0;L;;;;;N;;;;;
1231F;CUNEIFORM SIGN UM TIMES ME PLUS DA;Lo;0;L;;;;;N;;;;;
12320;CUNEIFORM SIGN UM TIMES SHA3;Lo;0;L;;;;;N;;;;;
12321;CUNEIFORM SIGN UM TIMES U;Lo;0;L;;;;;N;;;;;
12322;CUNEIFORM SIGN UMBIN;Lo;0;L;;;;;N;;;;;
12323;CUNEIFORM SIGN UMUM;Lo;0;L;;;;;N;;;;;
12324;CUNEIFORM SIGN UMUM TIMES KASKAL;Lo;0;L;;;;;N;;;;;
12325;CUNEIFORM SIGN UMUM TIMES PA;Lo;0;L;;;;;N;;;;;
12326;CUNEIFORM SIGN UN;Lo;0;L;;;;;N;;;;;
12327;CUNEIFORM SIGN UN GUNU;Lo;0;L;;;;;N;;;;;
12328;CUNEIFORM SIGN UR;Lo;0;L;;;;;N;;;;;
12329;CUNEIFORM SIGN UR CROSSING UR;Lo;0;L;;;;;N;;;;;
1232A;CUNEIFORM SIGN UR SHESHIG;Lo;0;L;;;;;N;;;;;
1232B;CUNEIFORM SIGN UR2;Lo;0;L;;;;;N;;;;;
1232C;CUNEIFORM SIGN UR2 TIMES A PLUS HA;Lo;0;L;;;;;N;;;;;
1232D;CUNEIFORM SIGN UR2 TIMES A PLUS NA;Lo;0;L;;;;;N;;;;;
1232E;CUNEIFORM SIGN UR2 TIMES AL;Lo;0;L;;;;;N;;;;;
1232F;CUNEIFORM SIGN UR2 TIMES HA;Lo;0;L;;;;;N;;;;;
12330;CUNEIFORM SIGN UR2 TIMES NUN;Lo;0;L;;;;;N;;;;;
12331;CUNEIFORM SIGN UR2 TIMES U2;Lo;0;L;;;;;N;;;;;
12332;CUNEIFORM SIGN UR2 TIMES U2 PLUS ASH;Lo;0;L;;;;;N;;;;;
12333;CUNEIFORM SIGN UR2 TIMES U2 PLUS BI;Lo;0;L;;;;;N;;;;;
12334;CUNEIFORM SIGN UR4;Lo;0;L;;;;;N;;;;;
12335;CUNEIFORM SIGN URI;Lo;0;L;;;;;N;;;;;
12336;CUNEIFORM SIGN URI3;Lo;0;L;;;;;N;;;;;
12337;CUNEIFORM SIGN URU;Lo;0;L;;;;;N;;;;;
12338;CUNEIFORM SIGN URU TIMES A;Lo;0;L;;;;;N;;;;;
12339;CUNEIFORM SIGN URU TIMES ASHGAB;Lo;0;L;;;;;N;;;;;
1233A;CUNEIFORM SIGN URU TIMES BAR;Lo;0;L;;;;;N;;;;;
1233B;CUNEIFORM SIGN URU TIMES DUN;Lo;0;L;;;;;N;;;;;
1233C;CUNEIFORM SIGN URU TIMES GA;Lo;0;L;;;;;N;;;;;
1233D;CUNEIFORM SIGN URU TIMES GAL;Lo;0;L;;;;;N;;;;;
1233E;CUNEIFORM SIGN URU TIMES GAN2 TENU;Lo;0;L;;;;;N;;;;;
1233F;CUNEIFORM SIGN URU TIMES GAR;Lo;0;L;;;;;N;;;;;
12340;CUNEIFORM SIGN URU TIMES GU;Lo;0;L;;;;;N;;;;;
12341;CUNEIFORM SIGN URU TIMES HA;Lo;0;L;;;;;N;;;;;
12342;CUNEIFORM SIGN URU TIMES IGI;Lo;0;L;;;;;N;;;;;
12343;CUNEIFORM SIGN URU TIMES IM;Lo;0;L;;;;;N;;;;;
12344;CUNEIFORM SIGN URU TIMES ISH;Lo;0;L;;;;;N;;;;;
12345;CUNEIFORM SIGN URU TIMES KI;Lo;0;L;;;;;N;;;;;
12346;CUNEIFORM SIGN URU TIMES LUM;Lo;0;L;;;;;N;;;;;
12347;CUNEIFORM SIGN URU TIMES MIN;Lo;0;L;;;;;N;;;;;
12348;CUNEIFORM SIGN URU TIMES PA;Lo;0;L;;;;;N;;;;;
12349;CUNEIFORM SIGN URU TIMES SHE;Lo;0;L;;;;;N;;;;;
1234A;CUNEIFORM SIGN URU TIMES SIG4;Lo;0;L;;;;;N;;;;;
1234B;CUNEIFORM SIGN URU TIMES TU;Lo;0;L;;;;;N;;;;;
1234C;CUNEIFORM SIGN URU TIMES U PLUS GUD;Lo;0;L;;;;;N;;;;;
1234D;CUNEIFORM SIGN URU TIMES UD;Lo;0;L;;;;;N;;;;;
1234E;CUNEIFORM SIGN URU TIMES URUDA;Lo;0;L;;;;;N;;;;;
1234F;CUNEIFORM SIGN URUDA;Lo;0;L;;;;;N;;;;;
12350;CUNEIFORM SIGN URUDA TIMES U;Lo;0;L;;;;;N;;;;;
12351;CUNEIFORM SIGN USH;Lo;0;L;;;;;N;;;;;
12352;CUNEIFORM SIGN USH TIMES A;Lo;0;L;;;;;N;;;;;
12353;CUNEIFORM SIGN USH TIMES KU;Lo;0;L;;;;;N;;;;;
12354;CUNEIFORM SIGN USH TIMES KUR;Lo;0;L;;;;;N;;;;;
12355;CUNEIFORM SIGN USH TIMES TAK4;Lo;0;L;;;;;N;;;;;
12356;CUNEIFORM SIGN USHX;Lo;0;L;;;;;N;;;;;
12357;CUNEIFORM SIGN USH2;Lo;0;L;;;;;N;;;;;
12358;CUNEIFORM SIGN USHUMX;Lo;0;L;;;;;N;;;;;
12359;CUNEIFORM SIGN UTUKI;Lo;0;L;;;;;N;;;;;
1235A;CUNEIFORM SIGN UZ3;Lo;0;L;;;;;N;;;;;
1235B;CUNEIFORM SIGN UZ3 TIMES KASKAL;Lo;0;L;;;;;N;;;;;
1235C;CUNEIFORM SIGN UZU;Lo;0;L;;;;;N;;;;;
1235D;CUNEIFORM SIGN ZA;Lo;0;L;;;;;N;;;;;
1235E;CUNEIFORM SIGN ZA TENU;Lo;0;L;;;;;N;;;;;
1235F;CUNEIFORM SIGN ZA SQUARED TIMES KUR;Lo;0;L;;;;;N;;;;;
12360;CUNEIFORM SIGN ZAG;Lo;0;L;;;;;N;;;;;
12361;CUNEIFORM SIGN ZAMX;Lo;0;L;;;;;N;;;;;
12362;CUNEIFORM SIGN ZE2;Lo;0;L;;;;;N;;;;;
12363;CUNEIFORM SIGN ZI;Lo;0;L;;;;;N;;;;;
12364;CUNEIFORM SIGN ZI OVER ZI;Lo;0;L;;;;;N;;;;;
12365;CUNEIFORM SIGN ZI3;Lo;0;L;;;;;N;;;;;
12366;CUNEIFORM SIGN ZIB;Lo;0;L;;;;;N;;;;;
12367;CUNEIFORM SIGN ZIB KABA TENU;Lo;0;L;;;;;N;;;;;
12368;CUNEIFORM SIGN ZIG;Lo;0;L;;;;;N;;;;;
12369;CUNEIFORM SIGN ZIZ2;Lo;0;L;;;;;N;;;;;
1236A;CUNEIFORM SIGN ZU;Lo;0;L;;;;;N;;;;;
1236B;CUNEIFORM SIGN ZU5;Lo;0;L;;;;;N;;;;;
1236C;CUNEIFORM SIGN ZU5 TIMES A;Lo;0;L;;;;;N;;;;;
1236D;CUNEIFORM SIGN ZUBUR;Lo;0;L;;;;;N;;;;;
1236E;CUNEIFORM SIGN ZUM;Lo;0;L;;;;;N;;;;;
12400;CUNEIFORM NUMERIC SIGN TWO ASH;Nl;0;L;;;;2;N;;;;;
12401;CUNEIFORM NUMERIC SIGN THREE ASH;Nl;0;L;;;;3;N;;;;;
12402;CUNEIFORM NUMERIC SIGN FOUR ASH;Nl;0;L;;;;4;N;;;;;
12403;CUNEIFORM NUMERIC SIGN FIVE ASH;Nl;0;L;;;;5;N;;;;;
12404;CUNEIFORM NUMERIC SIGN SIX ASH;Nl;0;L;;;;6;N;;;;;
12405;CUNEIFORM NUMERIC SIGN SEVEN ASH;Nl;0;L;;;;7;N;;;;;
12406;CUNEIFORM NUMERIC SIGN EIGHT ASH;Nl;0;L;;;;8;N;;;;;
12407;CUNEIFORM NUMERIC SIGN NINE ASH;Nl;0;L;;;;9;N;;;;;
12408;CUNEIFORM NUMERIC SIGN THREE DISH;Nl;0;L;;;;3;N;;;;;
12409;CUNEIFORM NUMERIC SIGN FOUR DISH;Nl;0;L;;;;4;N;;;;;
1240A;CUNEIFORM NUMERIC SIGN FIVE DISH;Nl;0;L;;;;5;N;;;;;
1240B;CUNEIFORM NUMERIC SIGN SIX DISH;Nl;0;L;;;;6;N;;;;;
1240C;CUNEIFORM NUMERIC SIGN SEVEN DISH;Nl;0;L;;;;7;N;;;;;
1240D;CUNEIFORM NUMERIC SIGN EIGHT DISH;Nl;0;L;;;;8;N;;;;;
1240E;CUNEIFORM NUMERIC SIGN NINE DISH;Nl;0;L;;;;9;N;;;;;
1240F;CUNEIFORM NUMERIC SIGN FOUR U;Nl;0;L;;;;4;N;;;;;
12410;CUNEIFORM NUMERIC SIGN FIVE U;Nl;0;L;;;;5;N;;;;;
12411;CUNEIFORM NUMERIC SIGN SIX U;Nl;0;L;;;;6;N;;;;;
12412;CUNEIFORM NUMERIC SIGN SEVEN U;Nl;0;L;;;;7;N;;;;;
12413;CUNEIFORM NUMERIC SIGN EIGHT U;Nl;0;L;;;;8;N;;;;;
12414;CUNEIFORM NUMERIC SIGN NINE U;Nl;0;L;;;;9;N;;;;;
12415;CUNEIFORM NUMERIC SIGN ONE GESH2;Nl;0;L;;;;1;N;;;;;
12416;CUNEIFORM NUMERIC SIGN TWO GESH2;Nl;0;L;;;;2;N;;;;;
12417;CUNEIFORM NUMERIC SIGN THREE GESH2;Nl;0;L;;;;3;N;;;;;
12418;CUNEIFORM NUMERIC SIGN FOUR GESH2;Nl;0;L;;;;4;N;;;;;
12419;CUNEIFORM NUMERIC SIGN FIVE GESH2;Nl;0;L;;;;5;N;;;;;
1241A;CUNEIFORM NUMERIC SIGN SIX GESH2;Nl;0;L;;;;6;N;;;;;
1241B;CUNEIFORM NUMERIC SIGN SEVEN GESH2;Nl;0;L;;;;7;N;;;;;
1241C;CUNEIFORM NUMERIC SIGN EIGHT GESH2;Nl;0;L;;;;8;N;;;;;
1241D;CUNEIFORM NUMERIC SIGN NINE GESH2;Nl;0;L;;;;9;N;;;;;
1241E;CUNEIFORM NUMERIC SIGN ONE GESHU;Nl;0;L;;;;1;N;;;;;
1241F;CUNEIFORM NUMERIC SIGN TWO GESHU;Nl;0;L;;;;2;N;;;;;
12420;CUNEIFORM NUMERIC SIGN THREE GESHU;Nl;0;L;;;;3;N;;;;;
12421;CUNEIFORM NUMERIC SIGN FOUR GESHU;Nl;0;L;;;;4;N;;;;;
12422;CUNEIFORM NUMERIC SIGN FIVE GESHU;Nl;0;L;;;;5;N;;;;;
12423;CUNEIFORM NUMERIC SIGN TWO SHAR2;Nl;0;L;;;;2;N;;;;;
12424;CUNEIFORM NUMERIC SIGN THREE SHAR2;Nl;0;L;;;;3;N;;;;;
12425;CUNEIFORM NUMERIC SIGN THREE SHAR2 VARIANT FORM;Nl;0;L;;;;3;N;;;;;
12426;CUNEIFORM NUMERIC SIGN FOUR SHAR2;Nl;0;L;;;;4;N;;;;;
12427;CUNEIFORM NUMERIC SIGN FIVE SHAR2;Nl;0;L;;;;5;N;;;;;
12428;CUNEIFORM NUMERIC SIGN SIX SHAR2;Nl;0;L;;;;6;N;;;;;
12429;CUNEIFORM NUMERIC SIGN SEVEN SHAR2;Nl;0;L;;;;7;N;;;;;
1242A;CUNEIFORM NUMERIC SIGN EIGHT SHAR2;Nl;0;L;;;;8;N;;;;;
1242B;CUNEIFORM NUMERIC SIGN NINE SHAR2;Nl;0;L;;;;9;N;;;;;
1242C;CUNEIFORM NUMERIC SIGN ONE SHARU;Nl;0;L;;;;1;N;;;;;
1242D;CUNEIFORM NUMERIC SIGN TWO SHARU;Nl;0;L;;;;2;N;;;;;
1242E;CUNEIFORM NUMERIC SIGN THREE SHARU;Nl;0;L;;;;3;N;;;;;
1242F;CUNEIFORM NUMERIC SIGN THREE SHARU VARIANT FORM;Nl;0;L;;;;3;N;;;;;
12430;CUNEIFORM NUMERIC SIGN FOUR SHARU;Nl;0;L;;;;4;N;;;;;
12431;CUNEIFORM NUMERIC SIGN FIVE SHARU;Nl;0;L;;;;5;N;;;;;
12432;CUNEIFORM NUMERIC SIGN SHAR2 TIMES GAL PLUS DISH;Nl;0;L;;;;;N;;;;;
12433;CUNEIFORM NUMERIC SIGN SHAR2 TIMES GAL PLUS MIN;Nl;0;L;;;;;N;;;;;
12434;CUNEIFORM NUMERIC SIGN ONE BURU;Nl;0;L;;;;1;N;;;;;
12435;CUNEIFORM NUMERIC SIGN TWO BURU;Nl;0;L;;;;2;N;;;;;
12436;CUNEIFORM NUMERIC SIGN THREE BURU;Nl;0;L;;;;3;N;;;;;
12437;CUNEIFORM NUMERIC SIGN THREE BURU VARIANT FORM;Nl;0;L;;;;3;N;;;;;
12438;CUNEIFORM NUMERIC SIGN FOUR BURU;Nl;0;L;;;;4;N;;;;;
12439;CUNEIFORM NUMERIC SIGN FIVE BURU;Nl;0;L;;;;5;N;;;;;
1243A;CUNEIFORM NUMERIC SIGN THREE VARIANT FORM ESH16;Nl;0;L;;;;3;N;;;;;
1243B;CUNEIFORM NUMERIC SIGN THREE VARIANT FORM ESH21;Nl;0;L;;;;3;N;;;;;
1243C;CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU;Nl;0;L;;;;4;N;;;;;
1243D;CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU4;Nl;0;L;;;;4;N;;;;;
1243E;CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU A;Nl;0;L;;;;4;N;;;;;
1243F;CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU B;Nl;0;L;;;;4;N;;;;;
12440;CUNEIFORM NUMERIC SIGN SIX VARIANT FORM ASH9;Nl;0;L;;;;6;N;;;;;
12441;CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN3;Nl;0;L;;;;7;N;;;;;
12442;CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN A;Nl;0;L;;;;7;N;;;;;
12443;CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN B;Nl;0;L;;;;7;N;;;;;
12444;CUNEIFORM NUMERIC SIGN EIGHT VARIANT FORM USSU;Nl;0;L;;;;8;N;;;;;
12445;CUNEIFORM NUMERIC SIGN EIGHT VARIANT FORM USSU3;Nl;0;L;;;;8;N;;;;;
12446;CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU;Nl;0;L;;;;9;N;;;;;
12447;CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU3;Nl;0;L;;;;9;N;;;;;
12448;CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU4;Nl;0;L;;;;9;N;;;;;
12449;CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU A;Nl;0;L;;;;9;N;;;;;
1244A;CUNEIFORM NUMERIC SIGN TWO ASH TENU;Nl;0;L;;;;2;N;;;;;
1244B;CUNEIFORM NUMERIC SIGN THREE ASH TENU;Nl;0;L;;;;3;N;;;;;
1244C;CUNEIFORM NUMERIC SIGN FOUR ASH TENU;Nl;0;L;;;;4;N;;;;;
1244D;CUNEIFORM NUMERIC SIGN FIVE ASH TENU;Nl;0;L;;;;5;N;;;;;
1244E;CUNEIFORM NUMERIC SIGN SIX ASH TENU;Nl;0;L;;;;6;N;;;;;
1244F;CUNEIFORM NUMERIC SIGN ONE BAN2;Nl;0;L;;;;1;N;;;;;
12450;CUNEIFORM NUMERIC SIGN TWO BAN2;Nl;0;L;;;;2;N;;;;;
12451;CUNEIFORM NUMERIC SIGN THREE BAN2;Nl;0;L;;;;3;N;;;;;
12452;CUNEIFORM NUMERIC SIGN FOUR BAN2;Nl;0;L;;;;4;N;;;;;
12453;CUNEIFORM NUMERIC SIGN FOUR BAN2 VARIANT FORM;Nl;0;L;;;;4;N;;;;;
12454;CUNEIFORM NUMERIC SIGN FIVE BAN2;Nl;0;L;;;;5;N;;;;;
12455;CUNEIFORM NUMERIC SIGN FIVE BAN2 VARIANT FORM;Nl;0;L;;;;5;N;;;;;
12456;CUNEIFORM NUMERIC SIGN NIGIDAMIN;Nl;0;L;;;;;N;;;;;
12457;CUNEIFORM NUMERIC SIGN NIGIDAESH;Nl;0;L;;;;;N;;;;;
12458;CUNEIFORM NUMERIC SIGN ONE ESHE3;Nl;0;L;;;;1;N;;;;;
12459;CUNEIFORM NUMERIC SIGN TWO ESHE3;Nl;0;L;;;;2;N;;;;;
1245A;CUNEIFORM NUMERIC SIGN ONE THIRD DISH;Nl;0;L;;;;1/3;N;;;;;
1245B;CUNEIFORM NUMERIC SIGN TWO THIRDS DISH;Nl;0;L;;;;2/3;N;;;;;
1245C;CUNEIFORM NUMERIC SIGN FIVE SIXTHS DISH;Nl;0;L;;;;5/6;N;;;;;
1245D;CUNEIFORM NUMERIC SIGN ONE THIRD VARIANT FORM A;Nl;0;L;;;;1/3;N;;;;;
1245E;CUNEIFORM NUMERIC SIGN TWO THIRDS VARIANT FORM A;Nl;0;L;;;;2/3;N;;;;;
1245F;CUNEIFORM NUMERIC SIGN ONE EIGHTH ASH;Nl;0;L;;;;1/8;N;;;;;
12460;CUNEIFORM NUMERIC SIGN ONE QUARTER ASH;Nl;0;L;;;;1/4;N;;;;;
12461;CUNEIFORM NUMERIC SIGN OLD ASSYRIAN ONE SIXTH;Nl;0;L;;;;1/6;N;;;;;
12462;CUNEIFORM NUMERIC SIGN OLD ASSYRIAN ONE QUARTER;Nl;0;L;;;;1/4;N;;;;;
12470;CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER;Po;0;L;;;;;N;;;;;
12471;CUNEIFORM PUNCTUATION SIGN VERTICAL COLON;Po;0;L;;;;;N;;;;;
12472;CUNEIFORM PUNCTUATION SIGN DIAGONAL COLON;Po;0;L;;;;;N;;;;;
12473;CUNEIFORM PUNCTUATION SIGN DIAGONAL TRICOLON;Po;0;L;;;;;N;;;;;
1D000;BYZANTINE MUSICAL SYMBOL PSILI;So;0;L;;;;;N;;;;;
1D001;BYZANTINE MUSICAL SYMBOL DASEIA;So;0;L;;;;;N;;;;;
1D002;BYZANTINE MUSICAL SYMBOL PERISPOMENI;So;0;L;;;;;N;;;;;
1D003;BYZANTINE MUSICAL SYMBOL OXEIA EKFONITIKON;So;0;L;;;;;N;;;;;
1D004;BYZANTINE MUSICAL SYMBOL OXEIA DIPLI;So;0;L;;;;;N;;;;;
1D005;BYZANTINE MUSICAL SYMBOL VAREIA EKFONITIKON;So;0;L;;;;;N;;;;;
1D006;BYZANTINE MUSICAL SYMBOL VAREIA DIPLI;So;0;L;;;;;N;;;;;
1D007;BYZANTINE MUSICAL SYMBOL KATHISTI;So;0;L;;;;;N;;;;;
1D008;BYZANTINE MUSICAL SYMBOL SYRMATIKI;So;0;L;;;;;N;;;;;
1D009;BYZANTINE MUSICAL SYMBOL PARAKLITIKI;So;0;L;;;;;N;;;;;
1D00A;BYZANTINE MUSICAL SYMBOL YPOKRISIS;So;0;L;;;;;N;;;;;
1D00B;BYZANTINE MUSICAL SYMBOL YPOKRISIS DIPLI;So;0;L;;;;;N;;;;;
1D00C;BYZANTINE MUSICAL SYMBOL KREMASTI;So;0;L;;;;;N;;;;;
1D00D;BYZANTINE MUSICAL SYMBOL APESO EKFONITIKON;So;0;L;;;;;N;;;;;
1D00E;BYZANTINE MUSICAL SYMBOL EXO EKFONITIKON;So;0;L;;;;;N;;;;;
1D00F;BYZANTINE MUSICAL SYMBOL TELEIA;So;0;L;;;;;N;;;;;
1D010;BYZANTINE MUSICAL SYMBOL KENTIMATA;So;0;L;;;;;N;;;;;
1D011;BYZANTINE MUSICAL SYMBOL APOSTROFOS;So;0;L;;;;;N;;;;;
1D012;BYZANTINE MUSICAL SYMBOL APOSTROFOS DIPLI;So;0;L;;;;;N;;;;;
1D013;BYZANTINE MUSICAL SYMBOL SYNEVMA;So;0;L;;;;;N;;;;;
1D014;BYZANTINE MUSICAL SYMBOL THITA;So;0;L;;;;;N;;;;;
1D015;BYZANTINE MUSICAL SYMBOL OLIGON ARCHAION;So;0;L;;;;;N;;;;;
1D016;BYZANTINE MUSICAL SYMBOL GORGON ARCHAION;So;0;L;;;;;N;;;;;
1D017;BYZANTINE MUSICAL SYMBOL PSILON;So;0;L;;;;;N;;;;;
1D018;BYZANTINE MUSICAL SYMBOL CHAMILON;So;0;L;;;;;N;;;;;
1D019;BYZANTINE MUSICAL SYMBOL VATHY;So;0;L;;;;;N;;;;;
1D01A;BYZANTINE MUSICAL SYMBOL ISON ARCHAION;So;0;L;;;;;N;;;;;
1D01B;BYZANTINE MUSICAL SYMBOL KENTIMA ARCHAION;So;0;L;;;;;N;;;;;
1D01C;BYZANTINE MUSICAL SYMBOL KENTIMATA ARCHAION;So;0;L;;;;;N;;;;;
1D01D;BYZANTINE MUSICAL SYMBOL SAXIMATA;So;0;L;;;;;N;;;;;
1D01E;BYZANTINE MUSICAL SYMBOL PARICHON;So;0;L;;;;;N;;;;;
1D01F;BYZANTINE MUSICAL SYMBOL STAVROS APODEXIA;So;0;L;;;;;N;;;;;
1D020;BYZANTINE MUSICAL SYMBOL OXEIAI ARCHAION;So;0;L;;;;;N;;;;;
1D021;BYZANTINE MUSICAL SYMBOL VAREIAI ARCHAION;So;0;L;;;;;N;;;;;
1D022;BYZANTINE MUSICAL SYMBOL APODERMA ARCHAION;So;0;L;;;;;N;;;;;
1D023;BYZANTINE MUSICAL SYMBOL APOTHEMA;So;0;L;;;;;N;;;;;
1D024;BYZANTINE MUSICAL SYMBOL KLASMA;So;0;L;;;;;N;;;;;
1D025;BYZANTINE MUSICAL SYMBOL REVMA;So;0;L;;;;;N;;;;;
1D026;BYZANTINE MUSICAL SYMBOL PIASMA ARCHAION;So;0;L;;;;;N;;;;;
1D027;BYZANTINE MUSICAL SYMBOL TINAGMA;So;0;L;;;;;N;;;;;
1D028;BYZANTINE MUSICAL SYMBOL ANATRICHISMA;So;0;L;;;;;N;;;;;
1D029;BYZANTINE MUSICAL SYMBOL SEISMA;So;0;L;;;;;N;;;;;
1D02A;BYZANTINE MUSICAL SYMBOL SYNAGMA ARCHAION;So;0;L;;;;;N;;;;;
1D02B;BYZANTINE MUSICAL SYMBOL SYNAGMA META STAVROU;So;0;L;;;;;N;;;;;
1D02C;BYZANTINE MUSICAL SYMBOL OYRANISMA ARCHAION;So;0;L;;;;;N;;;;;
1D02D;BYZANTINE MUSICAL SYMBOL THEMA;So;0;L;;;;;N;;;;;
1D02E;BYZANTINE MUSICAL SYMBOL LEMOI;So;0;L;;;;;N;;;;;
1D02F;BYZANTINE MUSICAL SYMBOL DYO;So;0;L;;;;;N;;;;;
1D030;BYZANTINE MUSICAL SYMBOL TRIA;So;0;L;;;;;N;;;;;
1D031;BYZANTINE MUSICAL SYMBOL TESSERA;So;0;L;;;;;N;;;;;
1D032;BYZANTINE MUSICAL SYMBOL KRATIMATA;So;0;L;;;;;N;;;;;
1D033;BYZANTINE MUSICAL SYMBOL APESO EXO NEO;So;0;L;;;;;N;;;;;
1D034;BYZANTINE MUSICAL SYMBOL FTHORA ARCHAION;So;0;L;;;;;N;;;;;
1D035;BYZANTINE MUSICAL SYMBOL IMIFTHORA;So;0;L;;;;;N;;;;;
1D036;BYZANTINE MUSICAL SYMBOL TROMIKON ARCHAION;So;0;L;;;;;N;;;;;
1D037;BYZANTINE MUSICAL SYMBOL KATAVA TROMIKON;So;0;L;;;;;N;;;;;
1D038;BYZANTINE MUSICAL SYMBOL PELASTON;So;0;L;;;;;N;;;;;
1D039;BYZANTINE MUSICAL SYMBOL PSIFISTON;So;0;L;;;;;N;;;;;
1D03A;BYZANTINE MUSICAL SYMBOL KONTEVMA;So;0;L;;;;;N;;;;;
1D03B;BYZANTINE MUSICAL SYMBOL CHOREVMA ARCHAION;So;0;L;;;;;N;;;;;
1D03C;BYZANTINE MUSICAL SYMBOL RAPISMA;So;0;L;;;;;N;;;;;
1D03D;BYZANTINE MUSICAL SYMBOL PARAKALESMA ARCHAION;So;0;L;;;;;N;;;;;
1D03E;BYZANTINE MUSICAL SYMBOL PARAKLITIKI ARCHAION;So;0;L;;;;;N;;;;;
1D03F;BYZANTINE MUSICAL SYMBOL ICHADIN;So;0;L;;;;;N;;;;;
1D040;BYZANTINE MUSICAL SYMBOL NANA;So;0;L;;;;;N;;;;;
1D041;BYZANTINE MUSICAL SYMBOL PETASMA;So;0;L;;;;;N;;;;;
1D042;BYZANTINE MUSICAL SYMBOL KONTEVMA ALLO;So;0;L;;;;;N;;;;;
1D043;BYZANTINE MUSICAL SYMBOL TROMIKON ALLO;So;0;L;;;;;N;;;;;
1D044;BYZANTINE MUSICAL SYMBOL STRAGGISMATA;So;0;L;;;;;N;;;;;
1D045;BYZANTINE MUSICAL SYMBOL GRONTHISMATA;So;0;L;;;;;N;;;;;
1D046;BYZANTINE MUSICAL SYMBOL ISON NEO;So;0;L;;;;;N;;;;;
1D047;BYZANTINE MUSICAL SYMBOL OLIGON NEO;So;0;L;;;;;N;;;;;
1D048;BYZANTINE MUSICAL SYMBOL OXEIA NEO;So;0;L;;;;;N;;;;;
1D049;BYZANTINE MUSICAL SYMBOL PETASTI;So;0;L;;;;;N;;;;;
1D04A;BYZANTINE MUSICAL SYMBOL KOUFISMA;So;0;L;;;;;N;;;;;
1D04B;BYZANTINE MUSICAL SYMBOL PETASTOKOUFISMA;So;0;L;;;;;N;;;;;
1D04C;BYZANTINE MUSICAL SYMBOL KRATIMOKOUFISMA;So;0;L;;;;;N;;;;;
1D04D;BYZANTINE MUSICAL SYMBOL PELASTON NEO;So;0;L;;;;;N;;;;;
1D04E;BYZANTINE MUSICAL SYMBOL KENTIMATA NEO ANO;So;0;L;;;;;N;;;;;
1D04F;BYZANTINE MUSICAL SYMBOL KENTIMA NEO ANO;So;0;L;;;;;N;;;;;
1D050;BYZANTINE MUSICAL SYMBOL YPSILI;So;0;L;;;;;N;;;;;
1D051;BYZANTINE MUSICAL SYMBOL APOSTROFOS NEO;So;0;L;;;;;N;;;;;
1D052;BYZANTINE MUSICAL SYMBOL APOSTROFOI SYNDESMOS NEO;So;0;L;;;;;N;;;;;
1D053;BYZANTINE MUSICAL SYMBOL YPORROI;So;0;L;;;;;N;;;;;
1D054;BYZANTINE MUSICAL SYMBOL KRATIMOYPORROON;So;0;L;;;;;N;;;;;
1D055;BYZANTINE MUSICAL SYMBOL ELAFRON;So;0;L;;;;;N;;;;;
1D056;BYZANTINE MUSICAL SYMBOL CHAMILI;So;0;L;;;;;N;;;;;
1D057;BYZANTINE MUSICAL SYMBOL MIKRON ISON;So;0;L;;;;;N;;;;;
1D058;BYZANTINE MUSICAL SYMBOL VAREIA NEO;So;0;L;;;;;N;;;;;
1D059;BYZANTINE MUSICAL SYMBOL PIASMA NEO;So;0;L;;;;;N;;;;;
1D05A;BYZANTINE MUSICAL SYMBOL PSIFISTON NEO;So;0;L;;;;;N;;;;;
1D05B;BYZANTINE MUSICAL SYMBOL OMALON;So;0;L;;;;;N;;;;;
1D05C;BYZANTINE MUSICAL SYMBOL ANTIKENOMA;So;0;L;;;;;N;;;;;
1D05D;BYZANTINE MUSICAL SYMBOL LYGISMA;So;0;L;;;;;N;;;;;
1D05E;BYZANTINE MUSICAL SYMBOL PARAKLITIKI NEO;So;0;L;;;;;N;;;;;
1D05F;BYZANTINE MUSICAL SYMBOL PARAKALESMA NEO;So;0;L;;;;;N;;;;;
1D060;BYZANTINE MUSICAL SYMBOL ETERON PARAKALESMA;So;0;L;;;;;N;;;;;
1D061;BYZANTINE MUSICAL SYMBOL KYLISMA;So;0;L;;;;;N;;;;;
1D062;BYZANTINE MUSICAL SYMBOL ANTIKENOKYLISMA;So;0;L;;;;;N;;;;;
1D063;BYZANTINE MUSICAL SYMBOL TROMIKON NEO;So;0;L;;;;;N;;;;;
1D064;BYZANTINE MUSICAL SYMBOL EKSTREPTON;So;0;L;;;;;N;;;;;
1D065;BYZANTINE MUSICAL SYMBOL SYNAGMA NEO;So;0;L;;;;;N;;;;;
1D066;BYZANTINE MUSICAL SYMBOL SYRMA;So;0;L;;;;;N;;;;;
1D067;BYZANTINE MUSICAL SYMBOL CHOREVMA NEO;So;0;L;;;;;N;;;;;
1D068;BYZANTINE MUSICAL SYMBOL EPEGERMA;So;0;L;;;;;N;;;;;
1D069;BYZANTINE MUSICAL SYMBOL SEISMA NEO;So;0;L;;;;;N;;;;;
1D06A;BYZANTINE MUSICAL SYMBOL XIRON KLASMA;So;0;L;;;;;N;;;;;
1D06B;BYZANTINE MUSICAL SYMBOL TROMIKOPSIFISTON;So;0;L;;;;;N;;;;;
1D06C;BYZANTINE MUSICAL SYMBOL PSIFISTOLYGISMA;So;0;L;;;;;N;;;;;
1D06D;BYZANTINE MUSICAL SYMBOL TROMIKOLYGISMA;So;0;L;;;;;N;;;;;
1D06E;BYZANTINE MUSICAL SYMBOL TROMIKOPARAKALESMA;So;0;L;;;;;N;;;;;
1D06F;BYZANTINE MUSICAL SYMBOL PSIFISTOPARAKALESMA;So;0;L;;;;;N;;;;;
1D070;BYZANTINE MUSICAL SYMBOL TROMIKOSYNAGMA;So;0;L;;;;;N;;;;;
1D071;BYZANTINE MUSICAL SYMBOL PSIFISTOSYNAGMA;So;0;L;;;;;N;;;;;
1D072;BYZANTINE MUSICAL SYMBOL GORGOSYNTHETON;So;0;L;;;;;N;;;;;
1D073;BYZANTINE MUSICAL SYMBOL ARGOSYNTHETON;So;0;L;;;;;N;;;;;
1D074;BYZANTINE MUSICAL SYMBOL ETERON ARGOSYNTHETON;So;0;L;;;;;N;;;;;
1D075;BYZANTINE MUSICAL SYMBOL OYRANISMA NEO;So;0;L;;;;;N;;;;;
1D076;BYZANTINE MUSICAL SYMBOL THEMATISMOS ESO;So;0;L;;;;;N;;;;;
1D077;BYZANTINE MUSICAL SYMBOL THEMATISMOS EXO;So;0;L;;;;;N;;;;;
1D078;BYZANTINE MUSICAL SYMBOL THEMA APLOUN;So;0;L;;;;;N;;;;;
1D079;BYZANTINE MUSICAL SYMBOL THES KAI APOTHES;So;0;L;;;;;N;;;;;
1D07A;BYZANTINE MUSICAL SYMBOL KATAVASMA;So;0;L;;;;;N;;;;;
1D07B;BYZANTINE MUSICAL SYMBOL ENDOFONON;So;0;L;;;;;N;;;;;
1D07C;BYZANTINE MUSICAL SYMBOL YFEN KATO;So;0;L;;;;;N;;;;;
1D07D;BYZANTINE MUSICAL SYMBOL YFEN ANO;So;0;L;;;;;N;;;;;
1D07E;BYZANTINE MUSICAL SYMBOL STAVROS;So;0;L;;;;;N;;;;;
1D07F;BYZANTINE MUSICAL SYMBOL KLASMA ANO;So;0;L;;;;;N;;;;;
1D080;BYZANTINE MUSICAL SYMBOL DIPLI ARCHAION;So;0;L;;;;;N;;;;;
1D081;BYZANTINE MUSICAL SYMBOL KRATIMA ARCHAION;So;0;L;;;;;N;;;;;
1D082;BYZANTINE MUSICAL SYMBOL KRATIMA ALLO;So;0;L;;;;;N;;;;;
1D083;BYZANTINE MUSICAL SYMBOL KRATIMA NEO;So;0;L;;;;;N;;;;;
1D084;BYZANTINE MUSICAL SYMBOL APODERMA NEO;So;0;L;;;;;N;;;;;
1D085;BYZANTINE MUSICAL SYMBOL APLI;So;0;L;;;;;N;;;;;
1D086;BYZANTINE MUSICAL SYMBOL DIPLI;So;0;L;;;;;N;;;;;
1D087;BYZANTINE MUSICAL SYMBOL TRIPLI;So;0;L;;;;;N;;;;;
1D088;BYZANTINE MUSICAL SYMBOL TETRAPLI;So;0;L;;;;;N;;;;;
1D089;BYZANTINE MUSICAL SYMBOL KORONIS;So;0;L;;;;;N;;;;;
1D08A;BYZANTINE MUSICAL SYMBOL LEIMMA ENOS CHRONOU;So;0;L;;;;;N;;;;;
1D08B;BYZANTINE MUSICAL SYMBOL LEIMMA DYO CHRONON;So;0;L;;;;;N;;;;;
1D08C;BYZANTINE MUSICAL SYMBOL LEIMMA TRION CHRONON;So;0;L;;;;;N;;;;;
1D08D;BYZANTINE MUSICAL SYMBOL LEIMMA TESSARON CHRONON;So;0;L;;;;;N;;;;;
1D08E;BYZANTINE MUSICAL SYMBOL LEIMMA IMISEOS CHRONOU;So;0;L;;;;;N;;;;;
1D08F;BYZANTINE MUSICAL SYMBOL GORGON NEO ANO;So;0;L;;;;;N;;;;;
1D090;BYZANTINE MUSICAL SYMBOL GORGON PARESTIGMENON ARISTERA;So;0;L;;;;;N;;;;;
1D091;BYZANTINE MUSICAL SYMBOL GORGON PARESTIGMENON DEXIA;So;0;L;;;;;N;;;;;
1D092;BYZANTINE MUSICAL SYMBOL DIGORGON;So;0;L;;;;;N;;;;;
1D093;BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON ARISTERA KATO;So;0;L;;;;;N;;;;;
1D094;BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON ARISTERA ANO;So;0;L;;;;;N;;;;;
1D095;BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON DEXIA;So;0;L;;;;;N;;;;;
1D096;BYZANTINE MUSICAL SYMBOL TRIGORGON;So;0;L;;;;;N;;;;;
1D097;BYZANTINE MUSICAL SYMBOL ARGON;So;0;L;;;;;N;;;;;
1D098;BYZANTINE MUSICAL SYMBOL IMIDIARGON;So;0;L;;;;;N;;;;;
1D099;BYZANTINE MUSICAL SYMBOL DIARGON;So;0;L;;;;;N;;;;;
1D09A;BYZANTINE MUSICAL SYMBOL AGOGI POLI ARGI;So;0;L;;;;;N;;;;;
1D09B;BYZANTINE MUSICAL SYMBOL AGOGI ARGOTERI;So;0;L;;;;;N;;;;;
1D09C;BYZANTINE MUSICAL SYMBOL AGOGI ARGI;So;0;L;;;;;N;;;;;
1D09D;BYZANTINE MUSICAL SYMBOL AGOGI METRIA;So;0;L;;;;;N;;;;;
1D09E;BYZANTINE MUSICAL SYMBOL AGOGI MESI;So;0;L;;;;;N;;;;;
1D09F;BYZANTINE MUSICAL SYMBOL AGOGI GORGI;So;0;L;;;;;N;;;;;
1D0A0;BYZANTINE MUSICAL SYMBOL AGOGI GORGOTERI;So;0;L;;;;;N;;;;;
1D0A1;BYZANTINE MUSICAL SYMBOL AGOGI POLI GORGI;So;0;L;;;;;N;;;;;
1D0A2;BYZANTINE MUSICAL SYMBOL MARTYRIA PROTOS ICHOS;So;0;L;;;;;N;;;;;
1D0A3;BYZANTINE MUSICAL SYMBOL MARTYRIA ALLI PROTOS ICHOS;So;0;L;;;;;N;;;;;
1D0A4;BYZANTINE MUSICAL SYMBOL MARTYRIA DEYTEROS ICHOS;So;0;L;;;;;N;;;;;
1D0A5;BYZANTINE MUSICAL SYMBOL MARTYRIA ALLI DEYTEROS ICHOS;So;0;L;;;;;N;;;;;
1D0A6;BYZANTINE MUSICAL SYMBOL MARTYRIA TRITOS ICHOS;So;0;L;;;;;N;;;;;
1D0A7;BYZANTINE MUSICAL SYMBOL MARTYRIA TRIFONIAS;So;0;L;;;;;N;;;;;
1D0A8;BYZANTINE MUSICAL SYMBOL MARTYRIA TETARTOS ICHOS;So;0;L;;;;;N;;;;;
1D0A9;BYZANTINE MUSICAL SYMBOL MARTYRIA TETARTOS LEGETOS ICHOS;So;0;L;;;;;N;;;;;
1D0AA;BYZANTINE MUSICAL SYMBOL MARTYRIA LEGETOS ICHOS;So;0;L;;;;;N;;;;;
1D0AB;BYZANTINE MUSICAL SYMBOL MARTYRIA PLAGIOS ICHOS;So;0;L;;;;;N;;;;;
1D0AC;BYZANTINE MUSICAL SYMBOL ISAKIA TELOUS ICHIMATOS;So;0;L;;;;;N;;;;;
1D0AD;BYZANTINE MUSICAL SYMBOL APOSTROFOI TELOUS ICHIMATOS;So;0;L;;;;;N;;;;;
1D0AE;BYZANTINE MUSICAL SYMBOL FANEROSIS TETRAFONIAS;So;0;L;;;;;N;;;;;
1D0AF;BYZANTINE MUSICAL SYMBOL FANEROSIS MONOFONIAS;So;0;L;;;;;N;;;;;
1D0B0;BYZANTINE MUSICAL SYMBOL FANEROSIS DIFONIAS;So;0;L;;;;;N;;;;;
1D0B1;BYZANTINE MUSICAL SYMBOL MARTYRIA VARYS ICHOS;So;0;L;;;;;N;;;;;
1D0B2;BYZANTINE MUSICAL SYMBOL MARTYRIA PROTOVARYS ICHOS;So;0;L;;;;;N;;;;;
1D0B3;BYZANTINE MUSICAL SYMBOL MARTYRIA PLAGIOS TETARTOS ICHOS;So;0;L;;;;;N;;;;;
1D0B4;BYZANTINE MUSICAL SYMBOL GORTHMIKON N APLOUN;So;0;L;;;;;N;;;;;
1D0B5;BYZANTINE MUSICAL SYMBOL GORTHMIKON N DIPLOUN;So;0;L;;;;;N;;;;;
1D0B6;BYZANTINE MUSICAL SYMBOL ENARXIS KAI FTHORA VOU;So;0;L;;;;;N;;;;;
1D0B7;BYZANTINE MUSICAL SYMBOL IMIFONON;So;0;L;;;;;N;;;;;
1D0B8;BYZANTINE MUSICAL SYMBOL IMIFTHORON;So;0;L;;;;;N;;;;;
1D0B9;BYZANTINE MUSICAL SYMBOL FTHORA ARCHAION DEYTEROU ICHOU;So;0;L;;;;;N;;;;;
1D0BA;BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI PA;So;0;L;;;;;N;;;;;
1D0BB;BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NANA;So;0;L;;;;;N;;;;;
1D0BC;BYZANTINE MUSICAL SYMBOL FTHORA NAOS ICHOS;So;0;L;;;;;N;;;;;
1D0BD;BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI DI;So;0;L;;;;;N;;;;;
1D0BE;BYZANTINE MUSICAL SYMBOL FTHORA SKLIRON DIATONON DI;So;0;L;;;;;N;;;;;
1D0BF;BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI KE;So;0;L;;;;;N;;;;;
1D0C0;BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI ZO;So;0;L;;;;;N;;;;;
1D0C1;BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NI KATO;So;0;L;;;;;N;;;;;
1D0C2;BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NI ANO;So;0;L;;;;;N;;;;;
1D0C3;BYZANTINE MUSICAL SYMBOL FTHORA MALAKON CHROMA DIFONIAS;So;0;L;;;;;N;;;;;
1D0C4;BYZANTINE MUSICAL SYMBOL FTHORA MALAKON CHROMA MONOFONIAS;So;0;L;;;;;N;;;;;
1D0C5;BYZANTINE MUSICAL SYMBOL FHTORA SKLIRON CHROMA VASIS;So;0;L;;;;;N;;;;;
1D0C6;BYZANTINE MUSICAL SYMBOL FTHORA SKLIRON CHROMA SYNAFI;So;0;L;;;;;N;;;;;
1D0C7;BYZANTINE MUSICAL SYMBOL FTHORA NENANO;So;0;L;;;;;N;;;;;
1D0C8;BYZANTINE MUSICAL SYMBOL CHROA ZYGOS;So;0;L;;;;;N;;;;;
1D0C9;BYZANTINE MUSICAL SYMBOL CHROA KLITON;So;0;L;;;;;N;;;;;
1D0CA;BYZANTINE MUSICAL SYMBOL CHROA SPATHI;So;0;L;;;;;N;;;;;
1D0CB;BYZANTINE MUSICAL SYMBOL FTHORA I YFESIS TETARTIMORION;So;0;L;;;;;N;;;;;
1D0CC;BYZANTINE MUSICAL SYMBOL FTHORA ENARMONIOS ANTIFONIA;So;0;L;;;;;N;;;;;
1D0CD;BYZANTINE MUSICAL SYMBOL YFESIS TRITIMORION;So;0;L;;;;;N;;;;;
1D0CE;BYZANTINE MUSICAL SYMBOL DIESIS TRITIMORION;So;0;L;;;;;N;;;;;
1D0CF;BYZANTINE MUSICAL SYMBOL DIESIS TETARTIMORION;So;0;L;;;;;N;;;;;
1D0D0;BYZANTINE MUSICAL SYMBOL DIESIS APLI DYO DODEKATA;So;0;L;;;;;N;;;;;
1D0D1;BYZANTINE MUSICAL SYMBOL DIESIS MONOGRAMMOS TESSERA DODEKATA;So;0;L;;;;;N;;;;;
1D0D2;BYZANTINE MUSICAL SYMBOL DIESIS DIGRAMMOS EX DODEKATA;So;0;L;;;;;N;;;;;
1D0D3;BYZANTINE MUSICAL SYMBOL DIESIS TRIGRAMMOS OKTO DODEKATA;So;0;L;;;;;N;;;;;
1D0D4;BYZANTINE MUSICAL SYMBOL YFESIS APLI DYO DODEKATA;So;0;L;;;;;N;;;;;
1D0D5;BYZANTINE MUSICAL SYMBOL YFESIS MONOGRAMMOS TESSERA DODEKATA;So;0;L;;;;;N;;;;;
1D0D6;BYZANTINE MUSICAL SYMBOL YFESIS DIGRAMMOS EX DODEKATA;So;0;L;;;;;N;;;;;
1D0D7;BYZANTINE MUSICAL SYMBOL YFESIS TRIGRAMMOS OKTO DODEKATA;So;0;L;;;;;N;;;;;
1D0D8;BYZANTINE MUSICAL SYMBOL GENIKI DIESIS;So;0;L;;;;;N;;;;;
1D0D9;BYZANTINE MUSICAL SYMBOL GENIKI YFESIS;So;0;L;;;;;N;;;;;
1D0DA;BYZANTINE MUSICAL SYMBOL DIASTOLI APLI MIKRI;So;0;L;;;;;N;;;;;
1D0DB;BYZANTINE MUSICAL SYMBOL DIASTOLI APLI MEGALI;So;0;L;;;;;N;;;;;
1D0DC;BYZANTINE MUSICAL SYMBOL DIASTOLI DIPLI;So;0;L;;;;;N;;;;;
1D0DD;BYZANTINE MUSICAL SYMBOL DIASTOLI THESEOS;So;0;L;;;;;N;;;;;
1D0DE;BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS;So;0;L;;;;;N;;;;;
1D0DF;BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS DISIMOU;So;0;L;;;;;N;;;;;
1D0E0;BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS TRISIMOU;So;0;L;;;;;N;;;;;
1D0E1;BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS TETRASIMOU;So;0;L;;;;;N;;;;;
1D0E2;BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS;So;0;L;;;;;N;;;;;
1D0E3;BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS DISIMOU;So;0;L;;;;;N;;;;;
1D0E4;BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS TRISIMOU;So;0;L;;;;;N;;;;;
1D0E5;BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS TETRASIMOU;So;0;L;;;;;N;;;;;
1D0E6;BYZANTINE MUSICAL SYMBOL DIGRAMMA GG;So;0;L;;;;;N;;;;;
1D0E7;BYZANTINE MUSICAL SYMBOL DIFTOGGOS OU;So;0;L;;;;;N;;;;;
1D0E8;BYZANTINE MUSICAL SYMBOL STIGMA;So;0;L;;;;;N;;;;;
1D0E9;BYZANTINE MUSICAL SYMBOL ARKTIKO PA;So;0;L;;;;;N;;;;;
1D0EA;BYZANTINE MUSICAL SYMBOL ARKTIKO VOU;So;0;L;;;;;N;;;;;
1D0EB;BYZANTINE MUSICAL SYMBOL ARKTIKO GA;So;0;L;;;;;N;;;;;
1D0EC;BYZANTINE MUSICAL SYMBOL ARKTIKO DI;So;0;L;;;;;N;;;;;
1D0ED;BYZANTINE MUSICAL SYMBOL ARKTIKO KE;So;0;L;;;;;N;;;;;
1D0EE;BYZANTINE MUSICAL SYMBOL ARKTIKO ZO;So;0;L;;;;;N;;;;;
1D0EF;BYZANTINE MUSICAL SYMBOL ARKTIKO NI;So;0;L;;;;;N;;;;;
1D0F0;BYZANTINE MUSICAL SYMBOL KENTIMATA NEO MESO;So;0;L;;;;;N;;;;;
1D0F1;BYZANTINE MUSICAL SYMBOL KENTIMA NEO MESO;So;0;L;;;;;N;;;;;
1D0F2;BYZANTINE MUSICAL SYMBOL KENTIMATA NEO KATO;So;0;L;;;;;N;;;;;
1D0F3;BYZANTINE MUSICAL SYMBOL KENTIMA NEO KATO;So;0;L;;;;;N;;;;;
1D0F4;BYZANTINE MUSICAL SYMBOL KLASMA KATO;So;0;L;;;;;N;;;;;
1D0F5;BYZANTINE MUSICAL SYMBOL GORGON NEO KATO;So;0;L;;;;;N;;;;;
1D100;MUSICAL SYMBOL SINGLE BARLINE;So;0;L;;;;;N;;;;;
1D101;MUSICAL SYMBOL DOUBLE BARLINE;So;0;L;;;;;N;;;;;
1D102;MUSICAL SYMBOL FINAL BARLINE;So;0;L;;;;;N;;;;;
1D103;MUSICAL SYMBOL REVERSE FINAL BARLINE;So;0;L;;;;;N;;;;;
1D104;MUSICAL SYMBOL DASHED BARLINE;So;0;L;;;;;N;;;;;
1D105;MUSICAL SYMBOL SHORT BARLINE;So;0;L;;;;;N;;;;;
1D106;MUSICAL SYMBOL LEFT REPEAT SIGN;So;0;L;;;;;N;;;;;
1D107;MUSICAL SYMBOL RIGHT REPEAT SIGN;So;0;L;;;;;N;;;;;
1D108;MUSICAL SYMBOL REPEAT DOTS;So;0;L;;;;;N;;;;;
1D109;MUSICAL SYMBOL DAL SEGNO;So;0;L;;;;;N;;;;;
1D10A;MUSICAL SYMBOL DA CAPO;So;0;L;;;;;N;;;;;
1D10B;MUSICAL SYMBOL SEGNO;So;0;L;;;;;N;;;;;
1D10C;MUSICAL SYMBOL CODA;So;0;L;;;;;N;;;;;
1D10D;MUSICAL SYMBOL REPEATED FIGURE-1;So;0;L;;;;;N;;;;;
1D10E;MUSICAL SYMBOL REPEATED FIGURE-2;So;0;L;;;;;N;;;;;
1D10F;MUSICAL SYMBOL REPEATED FIGURE-3;So;0;L;;;;;N;;;;;
1D110;MUSICAL SYMBOL FERMATA;So;0;L;;;;;N;;;;;
1D111;MUSICAL SYMBOL FERMATA BELOW;So;0;L;;;;;N;;;;;
1D112;MUSICAL SYMBOL BREATH MARK;So;0;L;;;;;N;;;;;
1D113;MUSICAL SYMBOL CAESURA;So;0;L;;;;;N;;;;;
1D114;MUSICAL SYMBOL BRACE;So;0;L;;;;;N;;;;;
1D115;MUSICAL SYMBOL BRACKET;So;0;L;;;;;N;;;;;
1D116;MUSICAL SYMBOL ONE-LINE STAFF;So;0;L;;;;;N;;;;;
1D117;MUSICAL SYMBOL TWO-LINE STAFF;So;0;L;;;;;N;;;;;
1D118;MUSICAL SYMBOL THREE-LINE STAFF;So;0;L;;;;;N;;;;;
1D119;MUSICAL SYMBOL FOUR-LINE STAFF;So;0;L;;;;;N;;;;;
1D11A;MUSICAL SYMBOL FIVE-LINE STAFF;So;0;L;;;;;N;;;;;
1D11B;MUSICAL SYMBOL SIX-LINE STAFF;So;0;L;;;;;N;;;;;
1D11C;MUSICAL SYMBOL SIX-STRING FRETBOARD;So;0;L;;;;;N;;;;;
1D11D;MUSICAL SYMBOL FOUR-STRING FRETBOARD;So;0;L;;;;;N;;;;;
1D11E;MUSICAL SYMBOL G CLEF;So;0;L;;;;;N;;;;;
1D11F;MUSICAL SYMBOL G CLEF OTTAVA ALTA;So;0;L;;;;;N;;;;;
1D120;MUSICAL SYMBOL G CLEF OTTAVA BASSA;So;0;L;;;;;N;;;;;
1D121;MUSICAL SYMBOL C CLEF;So;0;L;;;;;N;;;;;
1D122;MUSICAL SYMBOL F CLEF;So;0;L;;;;;N;;;;;
1D123;MUSICAL SYMBOL F CLEF OTTAVA ALTA;So;0;L;;;;;N;;;;;
1D124;MUSICAL SYMBOL F CLEF OTTAVA BASSA;So;0;L;;;;;N;;;;;
1D125;MUSICAL SYMBOL DRUM CLEF-1;So;0;L;;;;;N;;;;;
1D126;MUSICAL SYMBOL DRUM CLEF-2;So;0;L;;;;;N;;;;;
1D12A;MUSICAL SYMBOL DOUBLE SHARP;So;0;L;;;;;N;;;;;
1D12B;MUSICAL SYMBOL DOUBLE FLAT;So;0;L;;;;;N;;;;;
1D12C;MUSICAL SYMBOL FLAT UP;So;0;L;;;;;N;;;;;
1D12D;MUSICAL SYMBOL FLAT DOWN;So;0;L;;;;;N;;;;;
1D12E;MUSICAL SYMBOL NATURAL UP;So;0;L;;;;;N;;;;;
1D12F;MUSICAL SYMBOL NATURAL DOWN;So;0;L;;;;;N;;;;;
1D130;MUSICAL SYMBOL SHARP UP;So;0;L;;;;;N;;;;;
1D131;MUSICAL SYMBOL SHARP DOWN;So;0;L;;;;;N;;;;;
1D132;MUSICAL SYMBOL QUARTER TONE SHARP;So;0;L;;;;;N;;;;;
1D133;MUSICAL SYMBOL QUARTER TONE FLAT;So;0;L;;;;;N;;;;;
1D134;MUSICAL SYMBOL COMMON TIME;So;0;L;;;;;N;;;;;
1D135;MUSICAL SYMBOL CUT TIME;So;0;L;;;;;N;;;;;
1D136;MUSICAL SYMBOL OTTAVA ALTA;So;0;L;;;;;N;;;;;
1D137;MUSICAL SYMBOL OTTAVA BASSA;So;0;L;;;;;N;;;;;
1D138;MUSICAL SYMBOL QUINDICESIMA ALTA;So;0;L;;;;;N;;;;;
1D139;MUSICAL SYMBOL QUINDICESIMA BASSA;So;0;L;;;;;N;;;;;
1D13A;MUSICAL SYMBOL MULTI REST;So;0;L;;;;;N;;;;;
1D13B;MUSICAL SYMBOL WHOLE REST;So;0;L;;;;;N;;;;;
1D13C;MUSICAL SYMBOL HALF REST;So;0;L;;;;;N;;;;;
1D13D;MUSICAL SYMBOL QUARTER REST;So;0;L;;;;;N;;;;;
1D13E;MUSICAL SYMBOL EIGHTH REST;So;0;L;;;;;N;;;;;
1D13F;MUSICAL SYMBOL SIXTEENTH REST;So;0;L;;;;;N;;;;;
1D140;MUSICAL SYMBOL THIRTY-SECOND REST;So;0;L;;;;;N;;;;;
1D141;MUSICAL SYMBOL SIXTY-FOURTH REST;So;0;L;;;;;N;;;;;
1D142;MUSICAL SYMBOL ONE HUNDRED TWENTY-EIGHTH REST;So;0;L;;;;;N;;;;;
1D143;MUSICAL SYMBOL X NOTEHEAD;So;0;L;;;;;N;;;;;
1D144;MUSICAL SYMBOL PLUS NOTEHEAD;So;0;L;;;;;N;;;;;
1D145;MUSICAL SYMBOL CIRCLE X NOTEHEAD;So;0;L;;;;;N;;;;;
1D146;MUSICAL SYMBOL SQUARE NOTEHEAD WHITE;So;0;L;;;;;N;;;;;
1D147;MUSICAL SYMBOL SQUARE NOTEHEAD BLACK;So;0;L;;;;;N;;;;;
1D148;MUSICAL SYMBOL TRIANGLE NOTEHEAD UP WHITE;So;0;L;;;;;N;;;;;
1D149;MUSICAL SYMBOL TRIANGLE NOTEHEAD UP BLACK;So;0;L;;;;;N;;;;;
1D14A;MUSICAL SYMBOL TRIANGLE NOTEHEAD LEFT WHITE;So;0;L;;;;;N;;;;;
1D14B;MUSICAL SYMBOL TRIANGLE NOTEHEAD LEFT BLACK;So;0;L;;;;;N;;;;;
1D14C;MUSICAL SYMBOL TRIANGLE NOTEHEAD RIGHT WHITE;So;0;L;;;;;N;;;;;
1D14D;MUSICAL SYMBOL TRIANGLE NOTEHEAD RIGHT BLACK;So;0;L;;;;;N;;;;;
1D14E;MUSICAL SYMBOL TRIANGLE NOTEHEAD DOWN WHITE;So;0;L;;;;;N;;;;;
1D14F;MUSICAL SYMBOL TRIANGLE NOTEHEAD DOWN BLACK;So;0;L;;;;;N;;;;;
1D150;MUSICAL SYMBOL TRIANGLE NOTEHEAD UP RIGHT WHITE;So;0;L;;;;;N;;;;;
1D151;MUSICAL SYMBOL TRIANGLE NOTEHEAD UP RIGHT BLACK;So;0;L;;;;;N;;;;;
1D152;MUSICAL SYMBOL MOON NOTEHEAD WHITE;So;0;L;;;;;N;;;;;
1D153;MUSICAL SYMBOL MOON NOTEHEAD BLACK;So;0;L;;;;;N;;;;;
1D154;MUSICAL SYMBOL TRIANGLE-ROUND NOTEHEAD DOWN WHITE;So;0;L;;;;;N;;;;;
1D155;MUSICAL SYMBOL TRIANGLE-ROUND NOTEHEAD DOWN BLACK;So;0;L;;;;;N;;;;;
1D156;MUSICAL SYMBOL PARENTHESIS NOTEHEAD;So;0;L;;;;;N;;;;;
1D157;MUSICAL SYMBOL VOID NOTEHEAD;So;0;L;;;;;N;;;;;
1D158;MUSICAL SYMBOL NOTEHEAD BLACK;So;0;L;;;;;N;;;;;
1D159;MUSICAL SYMBOL NULL NOTEHEAD;So;0;L;;;;;N;;;;;
1D15A;MUSICAL SYMBOL CLUSTER NOTEHEAD WHITE;So;0;L;;;;;N;;;;;
1D15B;MUSICAL SYMBOL CLUSTER NOTEHEAD BLACK;So;0;L;;;;;N;;;;;
1D15C;MUSICAL SYMBOL BREVE;So;0;L;;;;;N;;;;;
1D15D;MUSICAL SYMBOL WHOLE NOTE;So;0;L;;;;;N;;;;;
1D15E;MUSICAL SYMBOL HALF NOTE;So;0;L;1D157 1D165;;;;N;;;;;
1D15F;MUSICAL SYMBOL QUARTER NOTE;So;0;L;1D158 1D165;;;;N;;;;;
1D160;MUSICAL SYMBOL EIGHTH NOTE;So;0;L;1D15F 1D16E;;;;N;;;;;
1D161;MUSICAL SYMBOL SIXTEENTH NOTE;So;0;L;1D15F 1D16F;;;;N;;;;;
1D162;MUSICAL SYMBOL THIRTY-SECOND NOTE;So;0;L;1D15F 1D170;;;;N;;;;;
1D163;MUSICAL SYMBOL SIXTY-FOURTH NOTE;So;0;L;1D15F 1D171;;;;N;;;;;
1D164;MUSICAL SYMBOL ONE HUNDRED TWENTY-EIGHTH NOTE;So;0;L;1D15F 1D172;;;;N;;;;;
1D165;MUSICAL SYMBOL COMBINING STEM;Mc;216;L;;;;;N;;;;;
1D166;MUSICAL SYMBOL COMBINING SPRECHGESANG STEM;Mc;216;L;;;;;N;;;;;
1D167;MUSICAL SYMBOL COMBINING TREMOLO-1;Mn;1;NSM;;;;;N;;;;;
1D168;MUSICAL SYMBOL COMBINING TREMOLO-2;Mn;1;NSM;;;;;N;;;;;
1D169;MUSICAL SYMBOL COMBINING TREMOLO-3;Mn;1;NSM;;;;;N;;;;;
1D16A;MUSICAL SYMBOL FINGERED TREMOLO-1;So;0;L;;;;;N;;;;;
1D16B;MUSICAL SYMBOL FINGERED TREMOLO-2;So;0;L;;;;;N;;;;;
1D16C;MUSICAL SYMBOL FINGERED TREMOLO-3;So;0;L;;;;;N;;;;;
1D16D;MUSICAL SYMBOL COMBINING AUGMENTATION DOT;Mc;226;L;;;;;N;;;;;
1D16E;MUSICAL SYMBOL COMBINING FLAG-1;Mc;216;L;;;;;N;;;;;
1D16F;MUSICAL SYMBOL COMBINING FLAG-2;Mc;216;L;;;;;N;;;;;
1D170;MUSICAL SYMBOL COMBINING FLAG-3;Mc;216;L;;;;;N;;;;;
1D171;MUSICAL SYMBOL COMBINING FLAG-4;Mc;216;L;;;;;N;;;;;
1D172;MUSICAL SYMBOL COMBINING FLAG-5;Mc;216;L;;;;;N;;;;;
1D173;MUSICAL SYMBOL BEGIN BEAM;Cf;0;BN;;;;;N;;;;;
1D174;MUSICAL SYMBOL END BEAM;Cf;0;BN;;;;;N;;;;;
1D175;MUSICAL SYMBOL BEGIN TIE;Cf;0;BN;;;;;N;;;;;
1D176;MUSICAL SYMBOL END TIE;Cf;0;BN;;;;;N;;;;;
1D177;MUSICAL SYMBOL BEGIN SLUR;Cf;0;BN;;;;;N;;;;;
1D178;MUSICAL SYMBOL END SLUR;Cf;0;BN;;;;;N;;;;;
1D179;MUSICAL SYMBOL BEGIN PHRASE;Cf;0;BN;;;;;N;;;;;
1D17A;MUSICAL SYMBOL END PHRASE;Cf;0;BN;;;;;N;;;;;
1D17B;MUSICAL SYMBOL COMBINING ACCENT;Mn;220;NSM;;;;;N;;;;;
1D17C;MUSICAL SYMBOL COMBINING STACCATO;Mn;220;NSM;;;;;N;;;;;
1D17D;MUSICAL SYMBOL COMBINING TENUTO;Mn;220;NSM;;;;;N;;;;;
1D17E;MUSICAL SYMBOL COMBINING STACCATISSIMO;Mn;220;NSM;;;;;N;;;;;
1D17F;MUSICAL SYMBOL COMBINING MARCATO;Mn;220;NSM;;;;;N;;;;;
1D180;MUSICAL SYMBOL COMBINING MARCATO-STACCATO;Mn;220;NSM;;;;;N;;;;;
1D181;MUSICAL SYMBOL COMBINING ACCENT-STACCATO;Mn;220;NSM;;;;;N;;;;;
1D182;MUSICAL SYMBOL COMBINING LOURE;Mn;220;NSM;;;;;N;;;;;
1D183;MUSICAL SYMBOL ARPEGGIATO UP;So;0;L;;;;;N;;;;;
1D184;MUSICAL SYMBOL ARPEGGIATO DOWN;So;0;L;;;;;N;;;;;
1D185;MUSICAL SYMBOL COMBINING DOIT;Mn;230;NSM;;;;;N;;;;;
1D186;MUSICAL SYMBOL COMBINING RIP;Mn;230;NSM;;;;;N;;;;;
1D187;MUSICAL SYMBOL COMBINING FLIP;Mn;230;NSM;;;;;N;;;;;
1D188;MUSICAL SYMBOL COMBINING SMEAR;Mn;230;NSM;;;;;N;;;;;
1D189;MUSICAL SYMBOL COMBINING BEND;Mn;230;NSM;;;;;N;;;;;
1D18A;MUSICAL SYMBOL COMBINING DOUBLE TONGUE;Mn;220;NSM;;;;;N;;;;;
1D18B;MUSICAL SYMBOL COMBINING TRIPLE TONGUE;Mn;220;NSM;;;;;N;;;;;
1D18C;MUSICAL SYMBOL RINFORZANDO;So;0;L;;;;;N;;;;;
1D18D;MUSICAL SYMBOL SUBITO;So;0;L;;;;;N;;;;;
1D18E;MUSICAL SYMBOL Z;So;0;L;;;;;N;;;;;
1D18F;MUSICAL SYMBOL PIANO;So;0;L;;;;;N;;;;;
1D190;MUSICAL SYMBOL MEZZO;So;0;L;;;;;N;;;;;
1D191;MUSICAL SYMBOL FORTE;So;0;L;;;;;N;;;;;
1D192;MUSICAL SYMBOL CRESCENDO;So;0;L;;;;;N;;;;;
1D193;MUSICAL SYMBOL DECRESCENDO;So;0;L;;;;;N;;;;;
1D194;MUSICAL SYMBOL GRACE NOTE SLASH;So;0;L;;;;;N;;;;;
1D195;MUSICAL SYMBOL GRACE NOTE NO SLASH;So;0;L;;;;;N;;;;;
1D196;MUSICAL SYMBOL TR;So;0;L;;;;;N;;;;;
1D197;MUSICAL SYMBOL TURN;So;0;L;;;;;N;;;;;
1D198;MUSICAL SYMBOL INVERTED TURN;So;0;L;;;;;N;;;;;
1D199;MUSICAL SYMBOL TURN SLASH;So;0;L;;;;;N;;;;;
1D19A;MUSICAL SYMBOL TURN UP;So;0;L;;;;;N;;;;;
1D19B;MUSICAL SYMBOL ORNAMENT STROKE-1;So;0;L;;;;;N;;;;;
1D19C;MUSICAL SYMBOL ORNAMENT STROKE-2;So;0;L;;;;;N;;;;;
1D19D;MUSICAL SYMBOL ORNAMENT STROKE-3;So;0;L;;;;;N;;;;;
1D19E;MUSICAL SYMBOL ORNAMENT STROKE-4;So;0;L;;;;;N;;;;;
1D19F;MUSICAL SYMBOL ORNAMENT STROKE-5;So;0;L;;;;;N;;;;;
1D1A0;MUSICAL SYMBOL ORNAMENT STROKE-6;So;0;L;;;;;N;;;;;
1D1A1;MUSICAL SYMBOL ORNAMENT STROKE-7;So;0;L;;;;;N;;;;;
1D1A2;MUSICAL SYMBOL ORNAMENT STROKE-8;So;0;L;;;;;N;;;;;
1D1A3;MUSICAL SYMBOL ORNAMENT STROKE-9;So;0;L;;;;;N;;;;;
1D1A4;MUSICAL SYMBOL ORNAMENT STROKE-10;So;0;L;;;;;N;;;;;
1D1A5;MUSICAL SYMBOL ORNAMENT STROKE-11;So;0;L;;;;;N;;;;;
1D1A6;MUSICAL SYMBOL HAUPTSTIMME;So;0;L;;;;;N;;;;;
1D1A7;MUSICAL SYMBOL NEBENSTIMME;So;0;L;;;;;N;;;;;
1D1A8;MUSICAL SYMBOL END OF STIMME;So;0;L;;;;;N;;;;;
1D1A9;MUSICAL SYMBOL DEGREE SLASH;So;0;L;;;;;N;;;;;
1D1AA;MUSICAL SYMBOL COMBINING DOWN BOW;Mn;230;NSM;;;;;N;;;;;
1D1AB;MUSICAL SYMBOL COMBINING UP BOW;Mn;230;NSM;;;;;N;;;;;
1D1AC;MUSICAL SYMBOL COMBINING HARMONIC;Mn;230;NSM;;;;;N;;;;;
1D1AD;MUSICAL SYMBOL COMBINING SNAP PIZZICATO;Mn;230;NSM;;;;;N;;;;;
1D1AE;MUSICAL SYMBOL PEDAL MARK;So;0;L;;;;;N;;;;;
1D1AF;MUSICAL SYMBOL PEDAL UP MARK;So;0;L;;;;;N;;;;;
1D1B0;MUSICAL SYMBOL HALF PEDAL MARK;So;0;L;;;;;N;;;;;
1D1B1;MUSICAL SYMBOL GLISSANDO UP;So;0;L;;;;;N;;;;;
1D1B2;MUSICAL SYMBOL GLISSANDO DOWN;So;0;L;;;;;N;;;;;
1D1B3;MUSICAL SYMBOL WITH FINGERNAILS;So;0;L;;;;;N;;;;;
1D1B4;MUSICAL SYMBOL DAMP;So;0;L;;;;;N;;;;;
1D1B5;MUSICAL SYMBOL DAMP ALL;So;0;L;;;;;N;;;;;
1D1B6;MUSICAL SYMBOL MAXIMA;So;0;L;;;;;N;;;;;
1D1B7;MUSICAL SYMBOL LONGA;So;0;L;;;;;N;;;;;
1D1B8;MUSICAL SYMBOL BREVIS;So;0;L;;;;;N;;;;;
1D1B9;MUSICAL SYMBOL SEMIBREVIS WHITE;So;0;L;;;;;N;;;;;
1D1BA;MUSICAL SYMBOL SEMIBREVIS BLACK;So;0;L;;;;;N;;;;;
1D1BB;MUSICAL SYMBOL MINIMA;So;0;L;1D1B9 1D165;;;;N;;;;;
1D1BC;MUSICAL SYMBOL MINIMA BLACK;So;0;L;1D1BA 1D165;;;;N;;;;;
1D1BD;MUSICAL SYMBOL SEMIMINIMA WHITE;So;0;L;1D1BB 1D16E;;;;N;;;;;
1D1BE;MUSICAL SYMBOL SEMIMINIMA BLACK;So;0;L;1D1BC 1D16E;;;;N;;;;;
1D1BF;MUSICAL SYMBOL FUSA WHITE;So;0;L;1D1BB 1D16F;;;;N;;;;;
1D1C0;MUSICAL SYMBOL FUSA BLACK;So;0;L;1D1BC 1D16F;;;;N;;;;;
1D1C1;MUSICAL SYMBOL LONGA PERFECTA REST;So;0;L;;;;;N;;;;;
1D1C2;MUSICAL SYMBOL LONGA IMPERFECTA REST;So;0;L;;;;;N;;;;;
1D1C3;MUSICAL SYMBOL BREVIS REST;So;0;L;;;;;N;;;;;
1D1C4;MUSICAL SYMBOL SEMIBREVIS REST;So;0;L;;;;;N;;;;;
1D1C5;MUSICAL SYMBOL MINIMA REST;So;0;L;;;;;N;;;;;
1D1C6;MUSICAL SYMBOL SEMIMINIMA REST;So;0;L;;;;;N;;;;;
1D1C7;MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE PERFECTA;So;0;L;;;;;N;;;;;
1D1C8;MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE IMPERFECTA;So;0;L;;;;;N;;;;;
1D1C9;MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE PERFECTA DIMINUTION-1;So;0;L;;;;;N;;;;;
1D1CA;MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE PERFECTA;So;0;L;;;;;N;;;;;
1D1CB;MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA;So;0;L;;;;;N;;;;;
1D1CC;MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-1;So;0;L;;;;;N;;;;;
1D1CD;MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-2;So;0;L;;;;;N;;;;;
1D1CE;MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-3;So;0;L;;;;;N;;;;;
1D1CF;MUSICAL SYMBOL CROIX;So;0;L;;;;;N;;;;;
1D1D0;MUSICAL SYMBOL GREGORIAN C CLEF;So;0;L;;;;;N;;;;;
1D1D1;MUSICAL SYMBOL GREGORIAN F CLEF;So;0;L;;;;;N;;;;;
1D1D2;MUSICAL SYMBOL SQUARE B;So;0;L;;;;;N;;;;;
1D1D3;MUSICAL SYMBOL VIRGA;So;0;L;;;;;N;;;;;
1D1D4;MUSICAL SYMBOL PODATUS;So;0;L;;;;;N;;;;;
1D1D5;MUSICAL SYMBOL CLIVIS;So;0;L;;;;;N;;;;;
1D1D6;MUSICAL SYMBOL SCANDICUS;So;0;L;;;;;N;;;;;
1D1D7;MUSICAL SYMBOL CLIMACUS;So;0;L;;;;;N;;;;;
1D1D8;MUSICAL SYMBOL TORCULUS;So;0;L;;;;;N;;;;;
1D1D9;MUSICAL SYMBOL PORRECTUS;So;0;L;;;;;N;;;;;
1D1DA;MUSICAL SYMBOL PORRECTUS FLEXUS;So;0;L;;;;;N;;;;;
1D1DB;MUSICAL SYMBOL SCANDICUS FLEXUS;So;0;L;;;;;N;;;;;
1D1DC;MUSICAL SYMBOL TORCULUS RESUPINUS;So;0;L;;;;;N;;;;;
1D1DD;MUSICAL SYMBOL PES SUBPUNCTIS;So;0;L;;;;;N;;;;;
1D200;GREEK VOCAL NOTATION SYMBOL-1;So;0;ON;;;;;N;;;;;
1D201;GREEK VOCAL NOTATION SYMBOL-2;So;0;ON;;;;;N;;;;;
1D202;GREEK VOCAL NOTATION SYMBOL-3;So;0;ON;;;;;N;;;;;
1D203;GREEK VOCAL NOTATION SYMBOL-4;So;0;ON;;;;;N;;;;;
1D204;GREEK VOCAL NOTATION SYMBOL-5;So;0;ON;;;;;N;;;;;
1D205;GREEK VOCAL NOTATION SYMBOL-6;So;0;ON;;;;;N;;;;;
1D206;GREEK VOCAL NOTATION SYMBOL-7;So;0;ON;;;;;N;;;;;
1D207;GREEK VOCAL NOTATION SYMBOL-8;So;0;ON;;;;;N;;;;;
1D208;GREEK VOCAL NOTATION SYMBOL-9;So;0;ON;;;;;N;;;;;
1D209;GREEK VOCAL NOTATION SYMBOL-10;So;0;ON;;;;;N;;;;;
1D20A;GREEK VOCAL NOTATION SYMBOL-11;So;0;ON;;;;;N;;;;;
1D20B;GREEK VOCAL NOTATION SYMBOL-12;So;0;ON;;;;;N;;;;;
1D20C;GREEK VOCAL NOTATION SYMBOL-13;So;0;ON;;;;;N;;;;;
1D20D;GREEK VOCAL NOTATION SYMBOL-14;So;0;ON;;;;;N;;;;;
1D20E;GREEK VOCAL NOTATION SYMBOL-15;So;0;ON;;;;;N;;;;;
1D20F;GREEK VOCAL NOTATION SYMBOL-16;So;0;ON;;;;;N;;;;;
1D210;GREEK VOCAL NOTATION SYMBOL-17;So;0;ON;;;;;N;;;;;
1D211;GREEK VOCAL NOTATION SYMBOL-18;So;0;ON;;;;;N;;;;;
1D212;GREEK VOCAL NOTATION SYMBOL-19;So;0;ON;;;;;N;;;;;
1D213;GREEK VOCAL NOTATION SYMBOL-20;So;0;ON;;;;;N;;;;;
1D214;GREEK VOCAL NOTATION SYMBOL-21;So;0;ON;;;;;N;;;;;
1D215;GREEK VOCAL NOTATION SYMBOL-22;So;0;ON;;;;;N;;;;;
1D216;GREEK VOCAL NOTATION SYMBOL-23;So;0;ON;;;;;N;;;;;
1D217;GREEK VOCAL NOTATION SYMBOL-24;So;0;ON;;;;;N;;;;;
1D218;GREEK VOCAL NOTATION SYMBOL-50;So;0;ON;;;;;N;;;;;
1D219;GREEK VOCAL NOTATION SYMBOL-51;So;0;ON;;;;;N;;;;;
1D21A;GREEK VOCAL NOTATION SYMBOL-52;So;0;ON;;;;;N;;;;;
1D21B;GREEK VOCAL NOTATION SYMBOL-53;So;0;ON;;;;;N;;;;;
1D21C;GREEK VOCAL NOTATION SYMBOL-54;So;0;ON;;;;;N;;;;;
1D21D;GREEK INSTRUMENTAL NOTATION SYMBOL-1;So;0;ON;;;;;N;;;;;
1D21E;GREEK INSTRUMENTAL NOTATION SYMBOL-2;So;0;ON;;;;;N;;;;;
1D21F;GREEK INSTRUMENTAL NOTATION SYMBOL-4;So;0;ON;;;;;N;;;;;
1D220;GREEK INSTRUMENTAL NOTATION SYMBOL-5;So;0;ON;;;;;N;;;;;
1D221;GREEK INSTRUMENTAL NOTATION SYMBOL-7;So;0;ON;;;;;N;;;;;
1D222;GREEK INSTRUMENTAL NOTATION SYMBOL-8;So;0;ON;;;;;N;;;;;
1D223;GREEK INSTRUMENTAL NOTATION SYMBOL-11;So;0;ON;;;;;N;;;;;
1D224;GREEK INSTRUMENTAL NOTATION SYMBOL-12;So;0;ON;;;;;N;;;;;
1D225;GREEK INSTRUMENTAL NOTATION SYMBOL-13;So;0;ON;;;;;N;;;;;
1D226;GREEK INSTRUMENTAL NOTATION SYMBOL-14;So;0;ON;;;;;N;;;;;
1D227;GREEK INSTRUMENTAL NOTATION SYMBOL-17;So;0;ON;;;;;N;;;;;
1D228;GREEK INSTRUMENTAL NOTATION SYMBOL-18;So;0;ON;;;;;N;;;;;
1D229;GREEK INSTRUMENTAL NOTATION SYMBOL-19;So;0;ON;;;;;N;;;;;
1D22A;GREEK INSTRUMENTAL NOTATION SYMBOL-23;So;0;ON;;;;;N;;;;;
1D22B;GREEK INSTRUMENTAL NOTATION SYMBOL-24;So;0;ON;;;;;N;;;;;
1D22C;GREEK INSTRUMENTAL NOTATION SYMBOL-25;So;0;ON;;;;;N;;;;;
1D22D;GREEK INSTRUMENTAL NOTATION SYMBOL-26;So;0;ON;;;;;N;;;;;
1D22E;GREEK INSTRUMENTAL NOTATION SYMBOL-27;So;0;ON;;;;;N;;;;;
1D22F;GREEK INSTRUMENTAL NOTATION SYMBOL-29;So;0;ON;;;;;N;;;;;
1D230;GREEK INSTRUMENTAL NOTATION SYMBOL-30;So;0;ON;;;;;N;;;;;
1D231;GREEK INSTRUMENTAL NOTATION SYMBOL-32;So;0;ON;;;;;N;;;;;
1D232;GREEK INSTRUMENTAL NOTATION SYMBOL-36;So;0;ON;;;;;N;;;;;
1D233;GREEK INSTRUMENTAL NOTATION SYMBOL-37;So;0;ON;;;;;N;;;;;
1D234;GREEK INSTRUMENTAL NOTATION SYMBOL-38;So;0;ON;;;;;N;;;;;
1D235;GREEK INSTRUMENTAL NOTATION SYMBOL-39;So;0;ON;;;;;N;;;;;
1D236;GREEK INSTRUMENTAL NOTATION SYMBOL-40;So;0;ON;;;;;N;;;;;
1D237;GREEK INSTRUMENTAL NOTATION SYMBOL-42;So;0;ON;;;;;N;;;;;
1D238;GREEK INSTRUMENTAL NOTATION SYMBOL-43;So;0;ON;;;;;N;;;;;
1D239;GREEK INSTRUMENTAL NOTATION SYMBOL-45;So;0;ON;;;;;N;;;;;
1D23A;GREEK INSTRUMENTAL NOTATION SYMBOL-47;So;0;ON;;;;;N;;;;;
1D23B;GREEK INSTRUMENTAL NOTATION SYMBOL-48;So;0;ON;;;;;N;;;;;
1D23C;GREEK INSTRUMENTAL NOTATION SYMBOL-49;So;0;ON;;;;;N;;;;;
1D23D;GREEK INSTRUMENTAL NOTATION SYMBOL-50;So;0;ON;;;;;N;;;;;
1D23E;GREEK INSTRUMENTAL NOTATION SYMBOL-51;So;0;ON;;;;;N;;;;;
1D23F;GREEK INSTRUMENTAL NOTATION SYMBOL-52;So;0;ON;;;;;N;;;;;
1D240;GREEK INSTRUMENTAL NOTATION SYMBOL-53;So;0;ON;;;;;N;;;;;
1D241;GREEK INSTRUMENTAL NOTATION SYMBOL-54;So;0;ON;;;;;N;;;;;
1D242;COMBINING GREEK MUSICAL TRISEME;Mn;230;NSM;;;;;N;;;;;
1D243;COMBINING GREEK MUSICAL TETRASEME;Mn;230;NSM;;;;;N;;;;;
1D244;COMBINING GREEK MUSICAL PENTASEME;Mn;230;NSM;;;;;N;;;;;
1D245;GREEK MUSICAL LEIMMA;So;0;ON;;;;;N;;;;;
1D300;MONOGRAM FOR EARTH;So;0;ON;;;;;N;;ren *;;;
1D301;DIGRAM FOR HEAVENLY EARTH;So;0;ON;;;;;N;;tian ren *;;;
1D302;DIGRAM FOR HUMAN EARTH;So;0;ON;;;;;N;;di ren *;;;
1D303;DIGRAM FOR EARTHLY HEAVEN;So;0;ON;;;;;N;;ren tian *;;;
1D304;DIGRAM FOR EARTHLY HUMAN;So;0;ON;;;;;N;;ren di *;;;
1D305;DIGRAM FOR EARTH;So;0;ON;;;;;N;;ren ren *;;;
1D306;TETRAGRAM FOR CENTRE;So;0;ON;;;;;N;;;;;
1D307;TETRAGRAM FOR FULL CIRCLE;So;0;ON;;;;;N;;;;;
1D308;TETRAGRAM FOR MIRED;So;0;ON;;;;;N;;;;;
1D309;TETRAGRAM FOR BARRIER;So;0;ON;;;;;N;;;;;
1D30A;TETRAGRAM FOR KEEPING SMALL;So;0;ON;;;;;N;;;;;
1D30B;TETRAGRAM FOR CONTRARIETY;So;0;ON;;;;;N;;;;;
1D30C;TETRAGRAM FOR ASCENT;So;0;ON;;;;;N;;;;;
1D30D;TETRAGRAM FOR OPPOSITION;So;0;ON;;;;;N;;;;;
1D30E;TETRAGRAM FOR BRANCHING OUT;So;0;ON;;;;;N;;;;;
1D30F;TETRAGRAM FOR DEFECTIVENESS OR DISTORTION;So;0;ON;;;;;N;;;;;
1D310;TETRAGRAM FOR DIVERGENCE;So;0;ON;;;;;N;;;;;
1D311;TETRAGRAM FOR YOUTHFULNESS;So;0;ON;;;;;N;;;;;
1D312;TETRAGRAM FOR INCREASE;So;0;ON;;;;;N;;;;;
1D313;TETRAGRAM FOR PENETRATION;So;0;ON;;;;;N;;;;;
1D314;TETRAGRAM FOR REACH;So;0;ON;;;;;N;;;;;
1D315;TETRAGRAM FOR CONTACT;So;0;ON;;;;;N;;;;;
1D316;TETRAGRAM FOR HOLDING BACK;So;0;ON;;;;;N;;;;;
1D317;TETRAGRAM FOR WAITING;So;0;ON;;;;;N;;;;;
1D318;TETRAGRAM FOR FOLLOWING;So;0;ON;;;;;N;;;;;
1D319;TETRAGRAM FOR ADVANCE;So;0;ON;;;;;N;;;;;
1D31A;TETRAGRAM FOR RELEASE;So;0;ON;;;;;N;;;;;
1D31B;TETRAGRAM FOR RESISTANCE;So;0;ON;;;;;N;;;;;
1D31C;TETRAGRAM FOR EASE;So;0;ON;;;;;N;;;;;
1D31D;TETRAGRAM FOR JOY;So;0;ON;;;;;N;;;;;
1D31E;TETRAGRAM FOR CONTENTION;So;0;ON;;;;;N;;;;;
1D31F;TETRAGRAM FOR ENDEAVOUR;So;0;ON;;;;;N;;;;;
1D320;TETRAGRAM FOR DUTIES;So;0;ON;;;;;N;;;;;
1D321;TETRAGRAM FOR CHANGE;So;0;ON;;;;;N;;;;;
1D322;TETRAGRAM FOR DECISIVENESS;So;0;ON;;;;;N;;;;;
1D323;TETRAGRAM FOR BOLD RESOLUTION;So;0;ON;;;;;N;;;;;
1D324;TETRAGRAM FOR PACKING;So;0;ON;;;;;N;;;;;
1D325;TETRAGRAM FOR LEGION;So;0;ON;;;;;N;;;;;
1D326;TETRAGRAM FOR CLOSENESS;So;0;ON;;;;;N;;;;;
1D327;TETRAGRAM FOR KINSHIP;So;0;ON;;;;;N;;;;;
1D328;TETRAGRAM FOR GATHERING;So;0;ON;;;;;N;;;;;
1D329;TETRAGRAM FOR STRENGTH;So;0;ON;;;;;N;;;;;
1D32A;TETRAGRAM FOR PURITY;So;0;ON;;;;;N;;;;;
1D32B;TETRAGRAM FOR FULLNESS;So;0;ON;;;;;N;;;;;
1D32C;TETRAGRAM FOR RESIDENCE;So;0;ON;;;;;N;;;;;
1D32D;TETRAGRAM FOR LAW OR MODEL;So;0;ON;;;;;N;;;;;
1D32E;TETRAGRAM FOR RESPONSE;So;0;ON;;;;;N;;;;;
1D32F;TETRAGRAM FOR GOING TO MEET;So;0;ON;;;;;N;;;;;
1D330;TETRAGRAM FOR ENCOUNTERS;So;0;ON;;;;;N;;;;;
1D331;TETRAGRAM FOR STOVE;So;0;ON;;;;;N;;;;;
1D332;TETRAGRAM FOR GREATNESS;So;0;ON;;;;;N;;;;;
1D333;TETRAGRAM FOR ENLARGEMENT;So;0;ON;;;;;N;;;;;
1D334;TETRAGRAM FOR PATTERN;So;0;ON;;;;;N;;;;;
1D335;TETRAGRAM FOR RITUAL;So;0;ON;;;;;N;;;;;
1D336;TETRAGRAM FOR FLIGHT;So;0;ON;;;;;N;;;;;
1D337;TETRAGRAM FOR VASTNESS OR WASTING;So;0;ON;;;;;N;;;;;
1D338;TETRAGRAM FOR CONSTANCY;So;0;ON;;;;;N;;;;;
1D339;TETRAGRAM FOR MEASURE;So;0;ON;;;;;N;;;;;
1D33A;TETRAGRAM FOR ETERNITY;So;0;ON;;;;;N;;;;;
1D33B;TETRAGRAM FOR UNITY;So;0;ON;;;;;N;;;;;
1D33C;TETRAGRAM FOR DIMINISHMENT;So;0;ON;;;;;N;;;;;
1D33D;TETRAGRAM FOR CLOSED MOUTH;So;0;ON;;;;;N;;;;;
1D33E;TETRAGRAM FOR GUARDEDNESS;So;0;ON;;;;;N;;;;;
1D33F;TETRAGRAM FOR GATHERING IN;So;0;ON;;;;;N;;;;;
1D340;TETRAGRAM FOR MASSING;So;0;ON;;;;;N;;;;;
1D341;TETRAGRAM FOR ACCUMULATION;So;0;ON;;;;;N;;;;;
1D342;TETRAGRAM FOR EMBELLISHMENT;So;0;ON;;;;;N;;;;;
1D343;TETRAGRAM FOR DOUBT;So;0;ON;;;;;N;;;;;
1D344;TETRAGRAM FOR WATCH;So;0;ON;;;;;N;;;;;
1D345;TETRAGRAM FOR SINKING;So;0;ON;;;;;N;;;;;
1D346;TETRAGRAM FOR INNER;So;0;ON;;;;;N;;;;;
1D347;TETRAGRAM FOR DEPARTURE;So;0;ON;;;;;N;;;;;
1D348;TETRAGRAM FOR DARKENING;So;0;ON;;;;;N;;;;;
1D349;TETRAGRAM FOR DIMMING;So;0;ON;;;;;N;;;;;
1D34A;TETRAGRAM FOR EXHAUSTION;So;0;ON;;;;;N;;;;;
1D34B;TETRAGRAM FOR SEVERANCE;So;0;ON;;;;;N;;;;;
1D34C;TETRAGRAM FOR STOPPAGE;So;0;ON;;;;;N;;;;;
1D34D;TETRAGRAM FOR HARDNESS;So;0;ON;;;;;N;;;;;
1D34E;TETRAGRAM FOR COMPLETION;So;0;ON;;;;;N;;;;;
1D34F;TETRAGRAM FOR CLOSURE;So;0;ON;;;;;N;;;;;
1D350;TETRAGRAM FOR FAILURE;So;0;ON;;;;;N;;;;;
1D351;TETRAGRAM FOR AGGRAVATION;So;0;ON;;;;;N;;;;;
1D352;TETRAGRAM FOR COMPLIANCE;So;0;ON;;;;;N;;;;;
1D353;TETRAGRAM FOR ON THE VERGE;So;0;ON;;;;;N;;;;;
1D354;TETRAGRAM FOR DIFFICULTIES;So;0;ON;;;;;N;;;;;
1D355;TETRAGRAM FOR LABOURING;So;0;ON;;;;;N;;;;;
1D356;TETRAGRAM FOR FOSTERING;So;0;ON;;;;;N;;;;;
1D360;COUNTING ROD UNIT DIGIT ONE;No;0;L;;;;1;N;;;;;
1D361;COUNTING ROD UNIT DIGIT TWO;No;0;L;;;;2;N;;;;;
1D362;COUNTING ROD UNIT DIGIT THREE;No;0;L;;;;3;N;;;;;
1D363;COUNTING ROD UNIT DIGIT FOUR;No;0;L;;;;4;N;;;;;
1D364;COUNTING ROD UNIT DIGIT FIVE;No;0;L;;;;5;N;;;;;
1D365;COUNTING ROD UNIT DIGIT SIX;No;0;L;;;;6;N;;;;;
1D366;COUNTING ROD UNIT DIGIT SEVEN;No;0;L;;;;7;N;;;;;
1D367;COUNTING ROD UNIT DIGIT EIGHT;No;0;L;;;;8;N;;;;;
1D368;COUNTING ROD UNIT DIGIT NINE;No;0;L;;;;9;N;;;;;
1D369;COUNTING ROD TENS DIGIT ONE;No;0;L;;;;10;N;;;;;
1D36A;COUNTING ROD TENS DIGIT TWO;No;0;L;;;;20;N;;;;;
1D36B;COUNTING ROD TENS DIGIT THREE;No;0;L;;;;30;N;;;;;
1D36C;COUNTING ROD TENS DIGIT FOUR;No;0;L;;;;40;N;;;;;
1D36D;COUNTING ROD TENS DIGIT FIVE;No;0;L;;;;50;N;;;;;
1D36E;COUNTING ROD TENS DIGIT SIX;No;0;L;;;;60;N;;;;;
1D36F;COUNTING ROD TENS DIGIT SEVEN;No;0;L;;;;70;N;;;;;
1D370;COUNTING ROD TENS DIGIT EIGHT;No;0;L;;;;80;N;;;;;
1D371;COUNTING ROD TENS DIGIT NINE;No;0;L;;;;90;N;;;;;
1D400;MATHEMATICAL BOLD CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D401;MATHEMATICAL BOLD CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D402;MATHEMATICAL BOLD CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D403;MATHEMATICAL BOLD CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D404;MATHEMATICAL BOLD CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D405;MATHEMATICAL BOLD CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D406;MATHEMATICAL BOLD CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D407;MATHEMATICAL BOLD CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;
1D408;MATHEMATICAL BOLD CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;
1D409;MATHEMATICAL BOLD CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D40A;MATHEMATICAL BOLD CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D40B;MATHEMATICAL BOLD CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D40C;MATHEMATICAL BOLD CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D40D;MATHEMATICAL BOLD CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D40E;MATHEMATICAL BOLD CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D40F;MATHEMATICAL BOLD CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D410;MATHEMATICAL BOLD CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D411;MATHEMATICAL BOLD CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;
1D412;MATHEMATICAL BOLD CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D413;MATHEMATICAL BOLD CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D414;MATHEMATICAL BOLD CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D415;MATHEMATICAL BOLD CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D416;MATHEMATICAL BOLD CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D417;MATHEMATICAL BOLD CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D418;MATHEMATICAL BOLD CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D419;MATHEMATICAL BOLD CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D41A;MATHEMATICAL BOLD SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D41B;MATHEMATICAL BOLD SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D41C;MATHEMATICAL BOLD SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D41D;MATHEMATICAL BOLD SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D41E;MATHEMATICAL BOLD SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D41F;MATHEMATICAL BOLD SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D420;MATHEMATICAL BOLD SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D421;MATHEMATICAL BOLD SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D422;MATHEMATICAL BOLD SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D423;MATHEMATICAL BOLD SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D424;MATHEMATICAL BOLD SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D425;MATHEMATICAL BOLD SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D426;MATHEMATICAL BOLD SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D427;MATHEMATICAL BOLD SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D428;MATHEMATICAL BOLD SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D429;MATHEMATICAL BOLD SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D42A;MATHEMATICAL BOLD SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D42B;MATHEMATICAL BOLD SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D42C;MATHEMATICAL BOLD SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D42D;MATHEMATICAL BOLD SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D42E;MATHEMATICAL BOLD SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D42F;MATHEMATICAL BOLD SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D430;MATHEMATICAL BOLD SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D431;MATHEMATICAL BOLD SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D432;MATHEMATICAL BOLD SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D433;MATHEMATICAL BOLD SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D434;MATHEMATICAL ITALIC CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D435;MATHEMATICAL ITALIC CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D436;MATHEMATICAL ITALIC CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D437;MATHEMATICAL ITALIC CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D438;MATHEMATICAL ITALIC CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D439;MATHEMATICAL ITALIC CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D43A;MATHEMATICAL ITALIC CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D43B;MATHEMATICAL ITALIC CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;
1D43C;MATHEMATICAL ITALIC CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;
1D43D;MATHEMATICAL ITALIC CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D43E;MATHEMATICAL ITALIC CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D43F;MATHEMATICAL ITALIC CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D440;MATHEMATICAL ITALIC CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D441;MATHEMATICAL ITALIC CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D442;MATHEMATICAL ITALIC CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D443;MATHEMATICAL ITALIC CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D444;MATHEMATICAL ITALIC CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D445;MATHEMATICAL ITALIC CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;
1D446;MATHEMATICAL ITALIC CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D447;MATHEMATICAL ITALIC CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D448;MATHEMATICAL ITALIC CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D449;MATHEMATICAL ITALIC CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D44A;MATHEMATICAL ITALIC CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D44B;MATHEMATICAL ITALIC CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D44C;MATHEMATICAL ITALIC CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D44D;MATHEMATICAL ITALIC CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D44E;MATHEMATICAL ITALIC SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D44F;MATHEMATICAL ITALIC SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D450;MATHEMATICAL ITALIC SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D451;MATHEMATICAL ITALIC SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D452;MATHEMATICAL ITALIC SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D453;MATHEMATICAL ITALIC SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D454;MATHEMATICAL ITALIC SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D456;MATHEMATICAL ITALIC SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D457;MATHEMATICAL ITALIC SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D458;MATHEMATICAL ITALIC SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D459;MATHEMATICAL ITALIC SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D45A;MATHEMATICAL ITALIC SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D45B;MATHEMATICAL ITALIC SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D45C;MATHEMATICAL ITALIC SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D45D;MATHEMATICAL ITALIC SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D45E;MATHEMATICAL ITALIC SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D45F;MATHEMATICAL ITALIC SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D460;MATHEMATICAL ITALIC SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D461;MATHEMATICAL ITALIC SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D462;MATHEMATICAL ITALIC SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D463;MATHEMATICAL ITALIC SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D464;MATHEMATICAL ITALIC SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D465;MATHEMATICAL ITALIC SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D466;MATHEMATICAL ITALIC SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D467;MATHEMATICAL ITALIC SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D468;MATHEMATICAL BOLD ITALIC CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D469;MATHEMATICAL BOLD ITALIC CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D46A;MATHEMATICAL BOLD ITALIC CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D46B;MATHEMATICAL BOLD ITALIC CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D46C;MATHEMATICAL BOLD ITALIC CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D46D;MATHEMATICAL BOLD ITALIC CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D46E;MATHEMATICAL BOLD ITALIC CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D46F;MATHEMATICAL BOLD ITALIC CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;
1D470;MATHEMATICAL BOLD ITALIC CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;
1D471;MATHEMATICAL BOLD ITALIC CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D472;MATHEMATICAL BOLD ITALIC CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D473;MATHEMATICAL BOLD ITALIC CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D474;MATHEMATICAL BOLD ITALIC CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D475;MATHEMATICAL BOLD ITALIC CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D476;MATHEMATICAL BOLD ITALIC CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D477;MATHEMATICAL BOLD ITALIC CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D478;MATHEMATICAL BOLD ITALIC CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D479;MATHEMATICAL BOLD ITALIC CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;
1D47A;MATHEMATICAL BOLD ITALIC CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D47B;MATHEMATICAL BOLD ITALIC CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D47C;MATHEMATICAL BOLD ITALIC CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D47D;MATHEMATICAL BOLD ITALIC CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D47E;MATHEMATICAL BOLD ITALIC CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D47F;MATHEMATICAL BOLD ITALIC CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D480;MATHEMATICAL BOLD ITALIC CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D481;MATHEMATICAL BOLD ITALIC CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D482;MATHEMATICAL BOLD ITALIC SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D483;MATHEMATICAL BOLD ITALIC SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D484;MATHEMATICAL BOLD ITALIC SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D485;MATHEMATICAL BOLD ITALIC SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D486;MATHEMATICAL BOLD ITALIC SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D487;MATHEMATICAL BOLD ITALIC SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D488;MATHEMATICAL BOLD ITALIC SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D489;MATHEMATICAL BOLD ITALIC SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D48A;MATHEMATICAL BOLD ITALIC SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D48B;MATHEMATICAL BOLD ITALIC SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D48C;MATHEMATICAL BOLD ITALIC SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D48D;MATHEMATICAL BOLD ITALIC SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D48E;MATHEMATICAL BOLD ITALIC SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D48F;MATHEMATICAL BOLD ITALIC SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D490;MATHEMATICAL BOLD ITALIC SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D491;MATHEMATICAL BOLD ITALIC SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D492;MATHEMATICAL BOLD ITALIC SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D493;MATHEMATICAL BOLD ITALIC SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D494;MATHEMATICAL BOLD ITALIC SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D495;MATHEMATICAL BOLD ITALIC SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D496;MATHEMATICAL BOLD ITALIC SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D497;MATHEMATICAL BOLD ITALIC SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D498;MATHEMATICAL BOLD ITALIC SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D499;MATHEMATICAL BOLD ITALIC SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D49A;MATHEMATICAL BOLD ITALIC SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D49B;MATHEMATICAL BOLD ITALIC SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D49C;MATHEMATICAL SCRIPT CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D49E;MATHEMATICAL SCRIPT CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D49F;MATHEMATICAL SCRIPT CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D4A2;MATHEMATICAL SCRIPT CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D4A5;MATHEMATICAL SCRIPT CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D4A6;MATHEMATICAL SCRIPT CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D4A9;MATHEMATICAL SCRIPT CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D4AA;MATHEMATICAL SCRIPT CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D4AB;MATHEMATICAL SCRIPT CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D4AC;MATHEMATICAL SCRIPT CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D4AE;MATHEMATICAL SCRIPT CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D4AF;MATHEMATICAL SCRIPT CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D4B0;MATHEMATICAL SCRIPT CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D4B1;MATHEMATICAL SCRIPT CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D4B2;MATHEMATICAL SCRIPT CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D4B3;MATHEMATICAL SCRIPT CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D4B4;MATHEMATICAL SCRIPT CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D4B5;MATHEMATICAL SCRIPT CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D4B6;MATHEMATICAL SCRIPT SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D4B7;MATHEMATICAL SCRIPT SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D4B8;MATHEMATICAL SCRIPT SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D4B9;MATHEMATICAL SCRIPT SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D4BB;MATHEMATICAL SCRIPT SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D4BD;MATHEMATICAL SCRIPT SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D4BE;MATHEMATICAL SCRIPT SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D4BF;MATHEMATICAL SCRIPT SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D4C0;MATHEMATICAL SCRIPT SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D4C1;MATHEMATICAL SCRIPT SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D4C2;MATHEMATICAL SCRIPT SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D4C3;MATHEMATICAL SCRIPT SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D4C5;MATHEMATICAL SCRIPT SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D4C6;MATHEMATICAL SCRIPT SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D4C7;MATHEMATICAL SCRIPT SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D4C8;MATHEMATICAL SCRIPT SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D4C9;MATHEMATICAL SCRIPT SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D4CA;MATHEMATICAL SCRIPT SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D4CB;MATHEMATICAL SCRIPT SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D4CC;MATHEMATICAL SCRIPT SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D4CD;MATHEMATICAL SCRIPT SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D4CE;MATHEMATICAL SCRIPT SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D4CF;MATHEMATICAL SCRIPT SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D4D0;MATHEMATICAL BOLD SCRIPT CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D4D1;MATHEMATICAL BOLD SCRIPT CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D4D2;MATHEMATICAL BOLD SCRIPT CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D4D3;MATHEMATICAL BOLD SCRIPT CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D4D4;MATHEMATICAL BOLD SCRIPT CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D4D5;MATHEMATICAL BOLD SCRIPT CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D4D6;MATHEMATICAL BOLD SCRIPT CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D4D7;MATHEMATICAL BOLD SCRIPT CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;
1D4D8;MATHEMATICAL BOLD SCRIPT CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;
1D4D9;MATHEMATICAL BOLD SCRIPT CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D4DA;MATHEMATICAL BOLD SCRIPT CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D4DB;MATHEMATICAL BOLD SCRIPT CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D4DC;MATHEMATICAL BOLD SCRIPT CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D4DD;MATHEMATICAL BOLD SCRIPT CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D4DE;MATHEMATICAL BOLD SCRIPT CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D4DF;MATHEMATICAL BOLD SCRIPT CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D4E0;MATHEMATICAL BOLD SCRIPT CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D4E1;MATHEMATICAL BOLD SCRIPT CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;
1D4E2;MATHEMATICAL BOLD SCRIPT CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D4E3;MATHEMATICAL BOLD SCRIPT CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D4E4;MATHEMATICAL BOLD SCRIPT CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D4E5;MATHEMATICAL BOLD SCRIPT CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D4E6;MATHEMATICAL BOLD SCRIPT CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D4E7;MATHEMATICAL BOLD SCRIPT CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D4E8;MATHEMATICAL BOLD SCRIPT CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D4E9;MATHEMATICAL BOLD SCRIPT CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D4EA;MATHEMATICAL BOLD SCRIPT SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D4EB;MATHEMATICAL BOLD SCRIPT SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D4EC;MATHEMATICAL BOLD SCRIPT SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D4ED;MATHEMATICAL BOLD SCRIPT SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D4EE;MATHEMATICAL BOLD SCRIPT SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D4EF;MATHEMATICAL BOLD SCRIPT SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D4F0;MATHEMATICAL BOLD SCRIPT SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D4F1;MATHEMATICAL BOLD SCRIPT SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D4F2;MATHEMATICAL BOLD SCRIPT SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D4F3;MATHEMATICAL BOLD SCRIPT SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D4F4;MATHEMATICAL BOLD SCRIPT SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D4F5;MATHEMATICAL BOLD SCRIPT SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D4F6;MATHEMATICAL BOLD SCRIPT SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D4F7;MATHEMATICAL BOLD SCRIPT SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D4F8;MATHEMATICAL BOLD SCRIPT SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D4F9;MATHEMATICAL BOLD SCRIPT SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D4FA;MATHEMATICAL BOLD SCRIPT SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D4FB;MATHEMATICAL BOLD SCRIPT SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D4FC;MATHEMATICAL BOLD SCRIPT SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D4FD;MATHEMATICAL BOLD SCRIPT SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D4FE;MATHEMATICAL BOLD SCRIPT SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D4FF;MATHEMATICAL BOLD SCRIPT SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D500;MATHEMATICAL BOLD SCRIPT SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D501;MATHEMATICAL BOLD SCRIPT SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D502;MATHEMATICAL BOLD SCRIPT SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D503;MATHEMATICAL BOLD SCRIPT SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D504;MATHEMATICAL FRAKTUR CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D505;MATHEMATICAL FRAKTUR CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D507;MATHEMATICAL FRAKTUR CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D508;MATHEMATICAL FRAKTUR CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D509;MATHEMATICAL FRAKTUR CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D50A;MATHEMATICAL FRAKTUR CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D50D;MATHEMATICAL FRAKTUR CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D50E;MATHEMATICAL FRAKTUR CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D50F;MATHEMATICAL FRAKTUR CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D510;MATHEMATICAL FRAKTUR CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D511;MATHEMATICAL FRAKTUR CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D512;MATHEMATICAL FRAKTUR CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D513;MATHEMATICAL FRAKTUR CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D514;MATHEMATICAL FRAKTUR CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D516;MATHEMATICAL FRAKTUR CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D517;MATHEMATICAL FRAKTUR CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D518;MATHEMATICAL FRAKTUR CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D519;MATHEMATICAL FRAKTUR CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D51A;MATHEMATICAL FRAKTUR CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D51B;MATHEMATICAL FRAKTUR CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D51C;MATHEMATICAL FRAKTUR CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D51E;MATHEMATICAL FRAKTUR SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D51F;MATHEMATICAL FRAKTUR SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D520;MATHEMATICAL FRAKTUR SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D521;MATHEMATICAL FRAKTUR SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D522;MATHEMATICAL FRAKTUR SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D523;MATHEMATICAL FRAKTUR SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D524;MATHEMATICAL FRAKTUR SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D525;MATHEMATICAL FRAKTUR SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D526;MATHEMATICAL FRAKTUR SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D527;MATHEMATICAL FRAKTUR SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D528;MATHEMATICAL FRAKTUR SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D529;MATHEMATICAL FRAKTUR SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D52A;MATHEMATICAL FRAKTUR SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D52B;MATHEMATICAL FRAKTUR SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D52C;MATHEMATICAL FRAKTUR SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D52D;MATHEMATICAL FRAKTUR SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D52E;MATHEMATICAL FRAKTUR SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D52F;MATHEMATICAL FRAKTUR SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D530;MATHEMATICAL FRAKTUR SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D531;MATHEMATICAL FRAKTUR SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D532;MATHEMATICAL FRAKTUR SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D533;MATHEMATICAL FRAKTUR SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D534;MATHEMATICAL FRAKTUR SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D535;MATHEMATICAL FRAKTUR SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D536;MATHEMATICAL FRAKTUR SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D537;MATHEMATICAL FRAKTUR SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D538;MATHEMATICAL DOUBLE-STRUCK CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D539;MATHEMATICAL DOUBLE-STRUCK CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D53B;MATHEMATICAL DOUBLE-STRUCK CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D53C;MATHEMATICAL DOUBLE-STRUCK CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D53D;MATHEMATICAL DOUBLE-STRUCK CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D53E;MATHEMATICAL DOUBLE-STRUCK CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D540;MATHEMATICAL DOUBLE-STRUCK CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;
1D541;MATHEMATICAL DOUBLE-STRUCK CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D542;MATHEMATICAL DOUBLE-STRUCK CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D543;MATHEMATICAL DOUBLE-STRUCK CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D544;MATHEMATICAL DOUBLE-STRUCK CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D546;MATHEMATICAL DOUBLE-STRUCK CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D54A;MATHEMATICAL DOUBLE-STRUCK CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D54B;MATHEMATICAL DOUBLE-STRUCK CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D54C;MATHEMATICAL DOUBLE-STRUCK CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D54D;MATHEMATICAL DOUBLE-STRUCK CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D54E;MATHEMATICAL DOUBLE-STRUCK CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D54F;MATHEMATICAL DOUBLE-STRUCK CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D550;MATHEMATICAL DOUBLE-STRUCK CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D552;MATHEMATICAL DOUBLE-STRUCK SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D553;MATHEMATICAL DOUBLE-STRUCK SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D554;MATHEMATICAL DOUBLE-STRUCK SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D555;MATHEMATICAL DOUBLE-STRUCK SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D556;MATHEMATICAL DOUBLE-STRUCK SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D557;MATHEMATICAL DOUBLE-STRUCK SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D558;MATHEMATICAL DOUBLE-STRUCK SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D559;MATHEMATICAL DOUBLE-STRUCK SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D55A;MATHEMATICAL DOUBLE-STRUCK SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D55B;MATHEMATICAL DOUBLE-STRUCK SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D55C;MATHEMATICAL DOUBLE-STRUCK SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D55D;MATHEMATICAL DOUBLE-STRUCK SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D55E;MATHEMATICAL DOUBLE-STRUCK SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D55F;MATHEMATICAL DOUBLE-STRUCK SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D560;MATHEMATICAL DOUBLE-STRUCK SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D561;MATHEMATICAL DOUBLE-STRUCK SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D562;MATHEMATICAL DOUBLE-STRUCK SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D563;MATHEMATICAL DOUBLE-STRUCK SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D564;MATHEMATICAL DOUBLE-STRUCK SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D565;MATHEMATICAL DOUBLE-STRUCK SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D566;MATHEMATICAL DOUBLE-STRUCK SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D567;MATHEMATICAL DOUBLE-STRUCK SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D568;MATHEMATICAL DOUBLE-STRUCK SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D569;MATHEMATICAL DOUBLE-STRUCK SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D56A;MATHEMATICAL DOUBLE-STRUCK SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D56B;MATHEMATICAL DOUBLE-STRUCK SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D56C;MATHEMATICAL BOLD FRAKTUR CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D56D;MATHEMATICAL BOLD FRAKTUR CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D56E;MATHEMATICAL BOLD FRAKTUR CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D56F;MATHEMATICAL BOLD FRAKTUR CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D570;MATHEMATICAL BOLD FRAKTUR CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D571;MATHEMATICAL BOLD FRAKTUR CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D572;MATHEMATICAL BOLD FRAKTUR CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D573;MATHEMATICAL BOLD FRAKTUR CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;
1D574;MATHEMATICAL BOLD FRAKTUR CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;
1D575;MATHEMATICAL BOLD FRAKTUR CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D576;MATHEMATICAL BOLD FRAKTUR CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D577;MATHEMATICAL BOLD FRAKTUR CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D578;MATHEMATICAL BOLD FRAKTUR CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D579;MATHEMATICAL BOLD FRAKTUR CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D57A;MATHEMATICAL BOLD FRAKTUR CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D57B;MATHEMATICAL BOLD FRAKTUR CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D57C;MATHEMATICAL BOLD FRAKTUR CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D57D;MATHEMATICAL BOLD FRAKTUR CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;
1D57E;MATHEMATICAL BOLD FRAKTUR CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D57F;MATHEMATICAL BOLD FRAKTUR CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D580;MATHEMATICAL BOLD FRAKTUR CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D581;MATHEMATICAL BOLD FRAKTUR CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D582;MATHEMATICAL BOLD FRAKTUR CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D583;MATHEMATICAL BOLD FRAKTUR CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D584;MATHEMATICAL BOLD FRAKTUR CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D585;MATHEMATICAL BOLD FRAKTUR CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D586;MATHEMATICAL BOLD FRAKTUR SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D587;MATHEMATICAL BOLD FRAKTUR SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D588;MATHEMATICAL BOLD FRAKTUR SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D589;MATHEMATICAL BOLD FRAKTUR SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D58A;MATHEMATICAL BOLD FRAKTUR SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D58B;MATHEMATICAL BOLD FRAKTUR SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D58C;MATHEMATICAL BOLD FRAKTUR SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D58D;MATHEMATICAL BOLD FRAKTUR SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D58E;MATHEMATICAL BOLD FRAKTUR SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D58F;MATHEMATICAL BOLD FRAKTUR SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D590;MATHEMATICAL BOLD FRAKTUR SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D591;MATHEMATICAL BOLD FRAKTUR SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D592;MATHEMATICAL BOLD FRAKTUR SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D593;MATHEMATICAL BOLD FRAKTUR SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D594;MATHEMATICAL BOLD FRAKTUR SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D595;MATHEMATICAL BOLD FRAKTUR SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D596;MATHEMATICAL BOLD FRAKTUR SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D597;MATHEMATICAL BOLD FRAKTUR SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D598;MATHEMATICAL BOLD FRAKTUR SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D599;MATHEMATICAL BOLD FRAKTUR SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D59A;MATHEMATICAL BOLD FRAKTUR SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D59B;MATHEMATICAL BOLD FRAKTUR SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D59C;MATHEMATICAL BOLD FRAKTUR SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D59D;MATHEMATICAL BOLD FRAKTUR SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D59E;MATHEMATICAL BOLD FRAKTUR SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D59F;MATHEMATICAL BOLD FRAKTUR SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D5A0;MATHEMATICAL SANS-SERIF CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D5A1;MATHEMATICAL SANS-SERIF CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D5A2;MATHEMATICAL SANS-SERIF CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D5A3;MATHEMATICAL SANS-SERIF CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D5A4;MATHEMATICAL SANS-SERIF CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D5A5;MATHEMATICAL SANS-SERIF CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D5A6;MATHEMATICAL SANS-SERIF CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D5A7;MATHEMATICAL SANS-SERIF CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;
1D5A8;MATHEMATICAL SANS-SERIF CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;
1D5A9;MATHEMATICAL SANS-SERIF CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D5AA;MATHEMATICAL SANS-SERIF CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D5AB;MATHEMATICAL SANS-SERIF CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D5AC;MATHEMATICAL SANS-SERIF CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D5AD;MATHEMATICAL SANS-SERIF CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D5AE;MATHEMATICAL SANS-SERIF CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D5AF;MATHEMATICAL SANS-SERIF CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D5B0;MATHEMATICAL SANS-SERIF CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D5B1;MATHEMATICAL SANS-SERIF CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;
1D5B2;MATHEMATICAL SANS-SERIF CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D5B3;MATHEMATICAL SANS-SERIF CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D5B4;MATHEMATICAL SANS-SERIF CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D5B5;MATHEMATICAL SANS-SERIF CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D5B6;MATHEMATICAL SANS-SERIF CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D5B7;MATHEMATICAL SANS-SERIF CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D5B8;MATHEMATICAL SANS-SERIF CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D5B9;MATHEMATICAL SANS-SERIF CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D5BA;MATHEMATICAL SANS-SERIF SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D5BB;MATHEMATICAL SANS-SERIF SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D5BC;MATHEMATICAL SANS-SERIF SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D5BD;MATHEMATICAL SANS-SERIF SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D5BE;MATHEMATICAL SANS-SERIF SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D5BF;MATHEMATICAL SANS-SERIF SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D5C0;MATHEMATICAL SANS-SERIF SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D5C1;MATHEMATICAL SANS-SERIF SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D5C2;MATHEMATICAL SANS-SERIF SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D5C3;MATHEMATICAL SANS-SERIF SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D5C4;MATHEMATICAL SANS-SERIF SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D5C5;MATHEMATICAL SANS-SERIF SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D5C6;MATHEMATICAL SANS-SERIF SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D5C7;MATHEMATICAL SANS-SERIF SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D5C8;MATHEMATICAL SANS-SERIF SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D5C9;MATHEMATICAL SANS-SERIF SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D5CA;MATHEMATICAL SANS-SERIF SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D5CB;MATHEMATICAL SANS-SERIF SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D5CC;MATHEMATICAL SANS-SERIF SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D5CD;MATHEMATICAL SANS-SERIF SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D5CE;MATHEMATICAL SANS-SERIF SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D5CF;MATHEMATICAL SANS-SERIF SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D5D0;MATHEMATICAL SANS-SERIF SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D5D1;MATHEMATICAL SANS-SERIF SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D5D2;MATHEMATICAL SANS-SERIF SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D5D3;MATHEMATICAL SANS-SERIF SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D5D4;MATHEMATICAL SANS-SERIF BOLD CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D5D5;MATHEMATICAL SANS-SERIF BOLD CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D5D6;MATHEMATICAL SANS-SERIF BOLD CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D5D7;MATHEMATICAL SANS-SERIF BOLD CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D5D8;MATHEMATICAL SANS-SERIF BOLD CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D5D9;MATHEMATICAL SANS-SERIF BOLD CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D5DA;MATHEMATICAL SANS-SERIF BOLD CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D5DB;MATHEMATICAL SANS-SERIF BOLD CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;
1D5DC;MATHEMATICAL SANS-SERIF BOLD CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;
1D5DD;MATHEMATICAL SANS-SERIF BOLD CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D5DE;MATHEMATICAL SANS-SERIF BOLD CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D5DF;MATHEMATICAL SANS-SERIF BOLD CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D5E0;MATHEMATICAL SANS-SERIF BOLD CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D5E1;MATHEMATICAL SANS-SERIF BOLD CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D5E2;MATHEMATICAL SANS-SERIF BOLD CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D5E3;MATHEMATICAL SANS-SERIF BOLD CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D5E4;MATHEMATICAL SANS-SERIF BOLD CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D5E5;MATHEMATICAL SANS-SERIF BOLD CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;
1D5E6;MATHEMATICAL SANS-SERIF BOLD CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D5E7;MATHEMATICAL SANS-SERIF BOLD CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D5E8;MATHEMATICAL SANS-SERIF BOLD CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D5E9;MATHEMATICAL SANS-SERIF BOLD CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D5EA;MATHEMATICAL SANS-SERIF BOLD CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D5EB;MATHEMATICAL SANS-SERIF BOLD CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D5EC;MATHEMATICAL SANS-SERIF BOLD CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D5ED;MATHEMATICAL SANS-SERIF BOLD CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D5EE;MATHEMATICAL SANS-SERIF BOLD SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D5EF;MATHEMATICAL SANS-SERIF BOLD SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D5F0;MATHEMATICAL SANS-SERIF BOLD SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D5F1;MATHEMATICAL SANS-SERIF BOLD SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D5F2;MATHEMATICAL SANS-SERIF BOLD SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D5F3;MATHEMATICAL SANS-SERIF BOLD SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D5F4;MATHEMATICAL SANS-SERIF BOLD SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D5F5;MATHEMATICAL SANS-SERIF BOLD SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D5F6;MATHEMATICAL SANS-SERIF BOLD SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D5F7;MATHEMATICAL SANS-SERIF BOLD SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D5F8;MATHEMATICAL SANS-SERIF BOLD SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D5F9;MATHEMATICAL SANS-SERIF BOLD SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D5FA;MATHEMATICAL SANS-SERIF BOLD SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D5FB;MATHEMATICAL SANS-SERIF BOLD SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D5FC;MATHEMATICAL SANS-SERIF BOLD SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D5FD;MATHEMATICAL SANS-SERIF BOLD SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D5FE;MATHEMATICAL SANS-SERIF BOLD SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D5FF;MATHEMATICAL SANS-SERIF BOLD SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D600;MATHEMATICAL SANS-SERIF BOLD SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D601;MATHEMATICAL SANS-SERIF BOLD SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D602;MATHEMATICAL SANS-SERIF BOLD SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D603;MATHEMATICAL SANS-SERIF BOLD SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D604;MATHEMATICAL SANS-SERIF BOLD SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D605;MATHEMATICAL SANS-SERIF BOLD SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D606;MATHEMATICAL SANS-SERIF BOLD SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D607;MATHEMATICAL SANS-SERIF BOLD SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D608;MATHEMATICAL SANS-SERIF ITALIC CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D609;MATHEMATICAL SANS-SERIF ITALIC CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D60A;MATHEMATICAL SANS-SERIF ITALIC CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D60B;MATHEMATICAL SANS-SERIF ITALIC CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D60C;MATHEMATICAL SANS-SERIF ITALIC CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D60D;MATHEMATICAL SANS-SERIF ITALIC CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D60E;MATHEMATICAL SANS-SERIF ITALIC CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D60F;MATHEMATICAL SANS-SERIF ITALIC CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;
1D610;MATHEMATICAL SANS-SERIF ITALIC CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;
1D611;MATHEMATICAL SANS-SERIF ITALIC CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D612;MATHEMATICAL SANS-SERIF ITALIC CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D613;MATHEMATICAL SANS-SERIF ITALIC CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D614;MATHEMATICAL SANS-SERIF ITALIC CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D615;MATHEMATICAL SANS-SERIF ITALIC CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D616;MATHEMATICAL SANS-SERIF ITALIC CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D617;MATHEMATICAL SANS-SERIF ITALIC CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D618;MATHEMATICAL SANS-SERIF ITALIC CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D619;MATHEMATICAL SANS-SERIF ITALIC CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;
1D61A;MATHEMATICAL SANS-SERIF ITALIC CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D61B;MATHEMATICAL SANS-SERIF ITALIC CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D61C;MATHEMATICAL SANS-SERIF ITALIC CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D61D;MATHEMATICAL SANS-SERIF ITALIC CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D61E;MATHEMATICAL SANS-SERIF ITALIC CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D61F;MATHEMATICAL SANS-SERIF ITALIC CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D620;MATHEMATICAL SANS-SERIF ITALIC CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D621;MATHEMATICAL SANS-SERIF ITALIC CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D622;MATHEMATICAL SANS-SERIF ITALIC SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D623;MATHEMATICAL SANS-SERIF ITALIC SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D624;MATHEMATICAL SANS-SERIF ITALIC SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D625;MATHEMATICAL SANS-SERIF ITALIC SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D626;MATHEMATICAL SANS-SERIF ITALIC SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D627;MATHEMATICAL SANS-SERIF ITALIC SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D628;MATHEMATICAL SANS-SERIF ITALIC SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D629;MATHEMATICAL SANS-SERIF ITALIC SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D62A;MATHEMATICAL SANS-SERIF ITALIC SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D62B;MATHEMATICAL SANS-SERIF ITALIC SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D62C;MATHEMATICAL SANS-SERIF ITALIC SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D62D;MATHEMATICAL SANS-SERIF ITALIC SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D62E;MATHEMATICAL SANS-SERIF ITALIC SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D62F;MATHEMATICAL SANS-SERIF ITALIC SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D630;MATHEMATICAL SANS-SERIF ITALIC SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D631;MATHEMATICAL SANS-SERIF ITALIC SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D632;MATHEMATICAL SANS-SERIF ITALIC SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D633;MATHEMATICAL SANS-SERIF ITALIC SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D634;MATHEMATICAL SANS-SERIF ITALIC SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D635;MATHEMATICAL SANS-SERIF ITALIC SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D636;MATHEMATICAL SANS-SERIF ITALIC SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D637;MATHEMATICAL SANS-SERIF ITALIC SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D638;MATHEMATICAL SANS-SERIF ITALIC SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D639;MATHEMATICAL SANS-SERIF ITALIC SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D63A;MATHEMATICAL SANS-SERIF ITALIC SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D63B;MATHEMATICAL SANS-SERIF ITALIC SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D63C;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D63D;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D63E;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D63F;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D640;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D641;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D642;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D643;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;
1D644;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;
1D645;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D646;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D647;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D648;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D649;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D64A;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D64B;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D64C;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D64D;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;
1D64E;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D64F;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D650;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D651;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D652;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D653;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D654;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D655;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D656;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D657;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D658;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D659;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D65A;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D65B;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D65C;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D65D;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D65E;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D65F;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D660;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D661;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D662;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D663;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D664;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D665;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D666;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D667;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D668;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D669;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D66A;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D66B;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D66C;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D66D;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D66E;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D66F;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D670;MATHEMATICAL MONOSPACE CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D671;MATHEMATICAL MONOSPACE CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D672;MATHEMATICAL MONOSPACE CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D673;MATHEMATICAL MONOSPACE CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D674;MATHEMATICAL MONOSPACE CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D675;MATHEMATICAL MONOSPACE CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D676;MATHEMATICAL MONOSPACE CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D677;MATHEMATICAL MONOSPACE CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;
1D678;MATHEMATICAL MONOSPACE CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;
1D679;MATHEMATICAL MONOSPACE CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D67A;MATHEMATICAL MONOSPACE CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D67B;MATHEMATICAL MONOSPACE CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D67C;MATHEMATICAL MONOSPACE CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D67D;MATHEMATICAL MONOSPACE CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D67E;MATHEMATICAL MONOSPACE CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D67F;MATHEMATICAL MONOSPACE CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D680;MATHEMATICAL MONOSPACE CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D681;MATHEMATICAL MONOSPACE CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;
1D682;MATHEMATICAL MONOSPACE CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D683;MATHEMATICAL MONOSPACE CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D684;MATHEMATICAL MONOSPACE CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D685;MATHEMATICAL MONOSPACE CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D686;MATHEMATICAL MONOSPACE CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D687;MATHEMATICAL MONOSPACE CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D688;MATHEMATICAL MONOSPACE CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D689;MATHEMATICAL MONOSPACE CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D68A;MATHEMATICAL MONOSPACE SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D68B;MATHEMATICAL MONOSPACE SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D68C;MATHEMATICAL MONOSPACE SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D68D;MATHEMATICAL MONOSPACE SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D68E;MATHEMATICAL MONOSPACE SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D68F;MATHEMATICAL MONOSPACE SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D690;MATHEMATICAL MONOSPACE SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D691;MATHEMATICAL MONOSPACE SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D692;MATHEMATICAL MONOSPACE SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D693;MATHEMATICAL MONOSPACE SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D694;MATHEMATICAL MONOSPACE SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D695;MATHEMATICAL MONOSPACE SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D696;MATHEMATICAL MONOSPACE SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D697;MATHEMATICAL MONOSPACE SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D698;MATHEMATICAL MONOSPACE SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D699;MATHEMATICAL MONOSPACE SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D69A;MATHEMATICAL MONOSPACE SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D69B;MATHEMATICAL MONOSPACE SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D69C;MATHEMATICAL MONOSPACE SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D69D;MATHEMATICAL MONOSPACE SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D69E;MATHEMATICAL MONOSPACE SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D69F;MATHEMATICAL MONOSPACE SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D6A0;MATHEMATICAL MONOSPACE SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D6A1;MATHEMATICAL MONOSPACE SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D6A2;MATHEMATICAL MONOSPACE SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D6A3;MATHEMATICAL MONOSPACE SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D6A4;MATHEMATICAL ITALIC SMALL DOTLESS I;Ll;0;L;<font> 0131;;;;N;;;;;
1D6A5;MATHEMATICAL ITALIC SMALL DOTLESS J;Ll;0;L;<font> 0237;;;;N;;;;;
1D6A8;MATHEMATICAL BOLD CAPITAL ALPHA;Lu;0;L;<font> 0391;;;;N;;;;;
1D6A9;MATHEMATICAL BOLD CAPITAL BETA;Lu;0;L;<font> 0392;;;;N;;;;;
1D6AA;MATHEMATICAL BOLD CAPITAL GAMMA;Lu;0;L;<font> 0393;;;;N;;;;;
1D6AB;MATHEMATICAL BOLD CAPITAL DELTA;Lu;0;L;<font> 0394;;;;N;;;;;
1D6AC;MATHEMATICAL BOLD CAPITAL EPSILON;Lu;0;L;<font> 0395;;;;N;;;;;
1D6AD;MATHEMATICAL BOLD CAPITAL ZETA;Lu;0;L;<font> 0396;;;;N;;;;;
1D6AE;MATHEMATICAL BOLD CAPITAL ETA;Lu;0;L;<font> 0397;;;;N;;;;;
1D6AF;MATHEMATICAL BOLD CAPITAL THETA;Lu;0;L;<font> 0398;;;;N;;;;;
1D6B0;MATHEMATICAL BOLD CAPITAL IOTA;Lu;0;L;<font> 0399;;;;N;;;;;
1D6B1;MATHEMATICAL BOLD CAPITAL KAPPA;Lu;0;L;<font> 039A;;;;N;;;;;
1D6B2;MATHEMATICAL BOLD CAPITAL LAMDA;Lu;0;L;<font> 039B;;;;N;;;;;
1D6B3;MATHEMATICAL BOLD CAPITAL MU;Lu;0;L;<font> 039C;;;;N;;;;;
1D6B4;MATHEMATICAL BOLD CAPITAL NU;Lu;0;L;<font> 039D;;;;N;;;;;
1D6B5;MATHEMATICAL BOLD CAPITAL XI;Lu;0;L;<font> 039E;;;;N;;;;;
1D6B6;MATHEMATICAL BOLD CAPITAL OMICRON;Lu;0;L;<font> 039F;;;;N;;;;;
1D6B7;MATHEMATICAL BOLD CAPITAL PI;Lu;0;L;<font> 03A0;;;;N;;;;;
1D6B8;MATHEMATICAL BOLD CAPITAL RHO;Lu;0;L;<font> 03A1;;;;N;;;;;
1D6B9;MATHEMATICAL BOLD CAPITAL THETA SYMBOL;Lu;0;L;<font> 03F4;;;;N;;;;;
1D6BA;MATHEMATICAL BOLD CAPITAL SIGMA;Lu;0;L;<font> 03A3;;;;N;;;;;
1D6BB;MATHEMATICAL BOLD CAPITAL TAU;Lu;0;L;<font> 03A4;;;;N;;;;;
1D6BC;MATHEMATICAL BOLD CAPITAL UPSILON;Lu;0;L;<font> 03A5;;;;N;;;;;
1D6BD;MATHEMATICAL BOLD CAPITAL PHI;Lu;0;L;<font> 03A6;;;;N;;;;;
1D6BE;MATHEMATICAL BOLD CAPITAL CHI;Lu;0;L;<font> 03A7;;;;N;;;;;
1D6BF;MATHEMATICAL BOLD CAPITAL PSI;Lu;0;L;<font> 03A8;;;;N;;;;;
1D6C0;MATHEMATICAL BOLD CAPITAL OMEGA;Lu;0;L;<font> 03A9;;;;N;;;;;
1D6C1;MATHEMATICAL BOLD NABLA;Sm;0;L;<font> 2207;;;;N;;;;;
1D6C2;MATHEMATICAL BOLD SMALL ALPHA;Ll;0;L;<font> 03B1;;;;N;;;;;
1D6C3;MATHEMATICAL BOLD SMALL BETA;Ll;0;L;<font> 03B2;;;;N;;;;;
1D6C4;MATHEMATICAL BOLD SMALL GAMMA;Ll;0;L;<font> 03B3;;;;N;;;;;
1D6C5;MATHEMATICAL BOLD SMALL DELTA;Ll;0;L;<font> 03B4;;;;N;;;;;
1D6C6;MATHEMATICAL BOLD SMALL EPSILON;Ll;0;L;<font> 03B5;;;;N;;;;;
1D6C7;MATHEMATICAL BOLD SMALL ZETA;Ll;0;L;<font> 03B6;;;;N;;;;;
1D6C8;MATHEMATICAL BOLD SMALL ETA;Ll;0;L;<font> 03B7;;;;N;;;;;
1D6C9;MATHEMATICAL BOLD SMALL THETA;Ll;0;L;<font> 03B8;;;;N;;;;;
1D6CA;MATHEMATICAL BOLD SMALL IOTA;Ll;0;L;<font> 03B9;;;;N;;;;;
1D6CB;MATHEMATICAL BOLD SMALL KAPPA;Ll;0;L;<font> 03BA;;;;N;;;;;
1D6CC;MATHEMATICAL BOLD SMALL LAMDA;Ll;0;L;<font> 03BB;;;;N;;;;;
1D6CD;MATHEMATICAL BOLD SMALL MU;Ll;0;L;<font> 03BC;;;;N;;;;;
1D6CE;MATHEMATICAL BOLD SMALL NU;Ll;0;L;<font> 03BD;;;;N;;;;;
1D6CF;MATHEMATICAL BOLD SMALL XI;Ll;0;L;<font> 03BE;;;;N;;;;;
1D6D0;MATHEMATICAL BOLD SMALL OMICRON;Ll;0;L;<font> 03BF;;;;N;;;;;
1D6D1;MATHEMATICAL BOLD SMALL PI;Ll;0;L;<font> 03C0;;;;N;;;;;
1D6D2;MATHEMATICAL BOLD SMALL RHO;Ll;0;L;<font> 03C1;;;;N;;;;;
1D6D3;MATHEMATICAL BOLD SMALL FINAL SIGMA;Ll;0;L;<font> 03C2;;;;N;;;;;
1D6D4;MATHEMATICAL BOLD SMALL SIGMA;Ll;0;L;<font> 03C3;;;;N;;;;;
1D6D5;MATHEMATICAL BOLD SMALL TAU;Ll;0;L;<font> 03C4;;;;N;;;;;
1D6D6;MATHEMATICAL BOLD SMALL UPSILON;Ll;0;L;<font> 03C5;;;;N;;;;;
1D6D7;MATHEMATICAL BOLD SMALL PHI;Ll;0;L;<font> 03C6;;;;N;;;;;
1D6D8;MATHEMATICAL BOLD SMALL CHI;Ll;0;L;<font> 03C7;;;;N;;;;;
1D6D9;MATHEMATICAL BOLD SMALL PSI;Ll;0;L;<font> 03C8;;;;N;;;;;
1D6DA;MATHEMATICAL BOLD SMALL OMEGA;Ll;0;L;<font> 03C9;;;;N;;;;;
1D6DB;MATHEMATICAL BOLD PARTIAL DIFFERENTIAL;Sm;0;L;<font> 2202;;;;Y;;;;;
1D6DC;MATHEMATICAL BOLD EPSILON SYMBOL;Ll;0;L;<font> 03F5;;;;N;;;;;
1D6DD;MATHEMATICAL BOLD THETA SYMBOL;Ll;0;L;<font> 03D1;;;;N;;;;;
1D6DE;MATHEMATICAL BOLD KAPPA SYMBOL;Ll;0;L;<font> 03F0;;;;N;;;;;
1D6DF;MATHEMATICAL BOLD PHI SYMBOL;Ll;0;L;<font> 03D5;;;;N;;;;;
1D6E0;MATHEMATICAL BOLD RHO SYMBOL;Ll;0;L;<font> 03F1;;;;N;;;;;
1D6E1;MATHEMATICAL BOLD PI SYMBOL;Ll;0;L;<font> 03D6;;;;N;;;;;
1D6E2;MATHEMATICAL ITALIC CAPITAL ALPHA;Lu;0;L;<font> 0391;;;;N;;;;;
1D6E3;MATHEMATICAL ITALIC CAPITAL BETA;Lu;0;L;<font> 0392;;;;N;;;;;
1D6E4;MATHEMATICAL ITALIC CAPITAL GAMMA;Lu;0;L;<font> 0393;;;;N;;;;;
1D6E5;MATHEMATICAL ITALIC CAPITAL DELTA;Lu;0;L;<font> 0394;;;;N;;;;;
1D6E6;MATHEMATICAL ITALIC CAPITAL EPSILON;Lu;0;L;<font> 0395;;;;N;;;;;
1D6E7;MATHEMATICAL ITALIC CAPITAL ZETA;Lu;0;L;<font> 0396;;;;N;;;;;
1D6E8;MATHEMATICAL ITALIC CAPITAL ETA;Lu;0;L;<font> 0397;;;;N;;;;;
1D6E9;MATHEMATICAL ITALIC CAPITAL THETA;Lu;0;L;<font> 0398;;;;N;;;;;
1D6EA;MATHEMATICAL ITALIC CAPITAL IOTA;Lu;0;L;<font> 0399;;;;N;;;;;
1D6EB;MATHEMATICAL ITALIC CAPITAL KAPPA;Lu;0;L;<font> 039A;;;;N;;;;;
1D6EC;MATHEMATICAL ITALIC CAPITAL LAMDA;Lu;0;L;<font> 039B;;;;N;;;;;
1D6ED;MATHEMATICAL ITALIC CAPITAL MU;Lu;0;L;<font> 039C;;;;N;;;;;
1D6EE;MATHEMATICAL ITALIC CAPITAL NU;Lu;0;L;<font> 039D;;;;N;;;;;
1D6EF;MATHEMATICAL ITALIC CAPITAL XI;Lu;0;L;<font> 039E;;;;N;;;;;
1D6F0;MATHEMATICAL ITALIC CAPITAL OMICRON;Lu;0;L;<font> 039F;;;;N;;;;;
1D6F1;MATHEMATICAL ITALIC CAPITAL PI;Lu;0;L;<font> 03A0;;;;N;;;;;
1D6F2;MATHEMATICAL ITALIC CAPITAL RHO;Lu;0;L;<font> 03A1;;;;N;;;;;
1D6F3;MATHEMATICAL ITALIC CAPITAL THETA SYMBOL;Lu;0;L;<font> 03F4;;;;N;;;;;
1D6F4;MATHEMATICAL ITALIC CAPITAL SIGMA;Lu;0;L;<font> 03A3;;;;N;;;;;
1D6F5;MATHEMATICAL ITALIC CAPITAL TAU;Lu;0;L;<font> 03A4;;;;N;;;;;
1D6F6;MATHEMATICAL ITALIC CAPITAL UPSILON;Lu;0;L;<font> 03A5;;;;N;;;;;
1D6F7;MATHEMATICAL ITALIC CAPITAL PHI;Lu;0;L;<font> 03A6;;;;N;;;;;
1D6F8;MATHEMATICAL ITALIC CAPITAL CHI;Lu;0;L;<font> 03A7;;;;N;;;;;
1D6F9;MATHEMATICAL ITALIC CAPITAL PSI;Lu;0;L;<font> 03A8;;;;N;;;;;
1D6FA;MATHEMATICAL ITALIC CAPITAL OMEGA;Lu;0;L;<font> 03A9;;;;N;;;;;
1D6FB;MATHEMATICAL ITALIC NABLA;Sm;0;L;<font> 2207;;;;N;;;;;
1D6FC;MATHEMATICAL ITALIC SMALL ALPHA;Ll;0;L;<font> 03B1;;;;N;;;;;
1D6FD;MATHEMATICAL ITALIC SMALL BETA;Ll;0;L;<font> 03B2;;;;N;;;;;
1D6FE;MATHEMATICAL ITALIC SMALL GAMMA;Ll;0;L;<font> 03B3;;;;N;;;;;
1D6FF;MATHEMATICAL ITALIC SMALL DELTA;Ll;0;L;<font> 03B4;;;;N;;;;;
1D700;MATHEMATICAL ITALIC SMALL EPSILON;Ll;0;L;<font> 03B5;;;;N;;;;;
1D701;MATHEMATICAL ITALIC SMALL ZETA;Ll;0;L;<font> 03B6;;;;N;;;;;
1D702;MATHEMATICAL ITALIC SMALL ETA;Ll;0;L;<font> 03B7;;;;N;;;;;
1D703;MATHEMATICAL ITALIC SMALL THETA;Ll;0;L;<font> 03B8;;;;N;;;;;
1D704;MATHEMATICAL ITALIC SMALL IOTA;Ll;0;L;<font> 03B9;;;;N;;;;;
1D705;MATHEMATICAL ITALIC SMALL KAPPA;Ll;0;L;<font> 03BA;;;;N;;;;;
1D706;MATHEMATICAL ITALIC SMALL LAMDA;Ll;0;L;<font> 03BB;;;;N;;;;;
1D707;MATHEMATICAL ITALIC SMALL MU;Ll;0;L;<font> 03BC;;;;N;;;;;
1D708;MATHEMATICAL ITALIC SMALL NU;Ll;0;L;<font> 03BD;;;;N;;;;;
1D709;MATHEMATICAL ITALIC SMALL XI;Ll;0;L;<font> 03BE;;;;N;;;;;
1D70A;MATHEMATICAL ITALIC SMALL OMICRON;Ll;0;L;<font> 03BF;;;;N;;;;;
1D70B;MATHEMATICAL ITALIC SMALL PI;Ll;0;L;<font> 03C0;;;;N;;;;;
1D70C;MATHEMATICAL ITALIC SMALL RHO;Ll;0;L;<font> 03C1;;;;N;;;;;
1D70D;MATHEMATICAL ITALIC SMALL FINAL SIGMA;Ll;0;L;<font> 03C2;;;;N;;;;;
1D70E;MATHEMATICAL ITALIC SMALL SIGMA;Ll;0;L;<font> 03C3;;;;N;;;;;
1D70F;MATHEMATICAL ITALIC SMALL TAU;Ll;0;L;<font> 03C4;;;;N;;;;;
1D710;MATHEMATICAL ITALIC SMALL UPSILON;Ll;0;L;<font> 03C5;;;;N;;;;;
1D711;MATHEMATICAL ITALIC SMALL PHI;Ll;0;L;<font> 03C6;;;;N;;;;;
1D712;MATHEMATICAL ITALIC SMALL CHI;Ll;0;L;<font> 03C7;;;;N;;;;;
1D713;MATHEMATICAL ITALIC SMALL PSI;Ll;0;L;<font> 03C8;;;;N;;;;;
1D714;MATHEMATICAL ITALIC SMALL OMEGA;Ll;0;L;<font> 03C9;;;;N;;;;;
1D715;MATHEMATICAL ITALIC PARTIAL DIFFERENTIAL;Sm;0;L;<font> 2202;;;;Y;;;;;
1D716;MATHEMATICAL ITALIC EPSILON SYMBOL;Ll;0;L;<font> 03F5;;;;N;;;;;
1D717;MATHEMATICAL ITALIC THETA SYMBOL;Ll;0;L;<font> 03D1;;;;N;;;;;
1D718;MATHEMATICAL ITALIC KAPPA SYMBOL;Ll;0;L;<font> 03F0;;;;N;;;;;
1D719;MATHEMATICAL ITALIC PHI SYMBOL;Ll;0;L;<font> 03D5;;;;N;;;;;
1D71A;MATHEMATICAL ITALIC RHO SYMBOL;Ll;0;L;<font> 03F1;;;;N;;;;;
1D71B;MATHEMATICAL ITALIC PI SYMBOL;Ll;0;L;<font> 03D6;;;;N;;;;;
1D71C;MATHEMATICAL BOLD ITALIC CAPITAL ALPHA;Lu;0;L;<font> 0391;;;;N;;;;;
1D71D;MATHEMATICAL BOLD ITALIC CAPITAL BETA;Lu;0;L;<font> 0392;;;;N;;;;;
1D71E;MATHEMATICAL BOLD ITALIC CAPITAL GAMMA;Lu;0;L;<font> 0393;;;;N;;;;;
1D71F;MATHEMATICAL BOLD ITALIC CAPITAL DELTA;Lu;0;L;<font> 0394;;;;N;;;;;
1D720;MATHEMATICAL BOLD ITALIC CAPITAL EPSILON;Lu;0;L;<font> 0395;;;;N;;;;;
1D721;MATHEMATICAL BOLD ITALIC CAPITAL ZETA;Lu;0;L;<font> 0396;;;;N;;;;;
1D722;MATHEMATICAL BOLD ITALIC CAPITAL ETA;Lu;0;L;<font> 0397;;;;N;;;;;
1D723;MATHEMATICAL BOLD ITALIC CAPITAL THETA;Lu;0;L;<font> 0398;;;;N;;;;;
1D724;MATHEMATICAL BOLD ITALIC CAPITAL IOTA;Lu;0;L;<font> 0399;;;;N;;;;;
1D725;MATHEMATICAL BOLD ITALIC CAPITAL KAPPA;Lu;0;L;<font> 039A;;;;N;;;;;
1D726;MATHEMATICAL BOLD ITALIC CAPITAL LAMDA;Lu;0;L;<font> 039B;;;;N;;;;;
1D727;MATHEMATICAL BOLD ITALIC CAPITAL MU;Lu;0;L;<font> 039C;;;;N;;;;;
1D728;MATHEMATICAL BOLD ITALIC CAPITAL NU;Lu;0;L;<font> 039D;;;;N;;;;;
1D729;MATHEMATICAL BOLD ITALIC CAPITAL XI;Lu;0;L;<font> 039E;;;;N;;;;;
1D72A;MATHEMATICAL BOLD ITALIC CAPITAL OMICRON;Lu;0;L;<font> 039F;;;;N;;;;;
1D72B;MATHEMATICAL BOLD ITALIC CAPITAL PI;Lu;0;L;<font> 03A0;;;;N;;;;;
1D72C;MATHEMATICAL BOLD ITALIC CAPITAL RHO;Lu;0;L;<font> 03A1;;;;N;;;;;
1D72D;MATHEMATICAL BOLD ITALIC CAPITAL THETA SYMBOL;Lu;0;L;<font> 03F4;;;;N;;;;;
1D72E;MATHEMATICAL BOLD ITALIC CAPITAL SIGMA;Lu;0;L;<font> 03A3;;;;N;;;;;
1D72F;MATHEMATICAL BOLD ITALIC CAPITAL TAU;Lu;0;L;<font> 03A4;;;;N;;;;;
1D730;MATHEMATICAL BOLD ITALIC CAPITAL UPSILON;Lu;0;L;<font> 03A5;;;;N;;;;;
1D731;MATHEMATICAL BOLD ITALIC CAPITAL PHI;Lu;0;L;<font> 03A6;;;;N;;;;;
1D732;MATHEMATICAL BOLD ITALIC CAPITAL CHI;Lu;0;L;<font> 03A7;;;;N;;;;;
1D733;MATHEMATICAL BOLD ITALIC CAPITAL PSI;Lu;0;L;<font> 03A8;;;;N;;;;;
1D734;MATHEMATICAL BOLD ITALIC CAPITAL OMEGA;Lu;0;L;<font> 03A9;;;;N;;;;;
1D735;MATHEMATICAL BOLD ITALIC NABLA;Sm;0;L;<font> 2207;;;;N;;;;;
1D736;MATHEMATICAL BOLD ITALIC SMALL ALPHA;Ll;0;L;<font> 03B1;;;;N;;;;;
1D737;MATHEMATICAL BOLD ITALIC SMALL BETA;Ll;0;L;<font> 03B2;;;;N;;;;;
1D738;MATHEMATICAL BOLD ITALIC SMALL GAMMA;Ll;0;L;<font> 03B3;;;;N;;;;;
1D739;MATHEMATICAL BOLD ITALIC SMALL DELTA;Ll;0;L;<font> 03B4;;;;N;;;;;
1D73A;MATHEMATICAL BOLD ITALIC SMALL EPSILON;Ll;0;L;<font> 03B5;;;;N;;;;;
1D73B;MATHEMATICAL BOLD ITALIC SMALL ZETA;Ll;0;L;<font> 03B6;;;;N;;;;;
1D73C;MATHEMATICAL BOLD ITALIC SMALL ETA;Ll;0;L;<font> 03B7;;;;N;;;;;
1D73D;MATHEMATICAL BOLD ITALIC SMALL THETA;Ll;0;L;<font> 03B8;;;;N;;;;;
1D73E;MATHEMATICAL BOLD ITALIC SMALL IOTA;Ll;0;L;<font> 03B9;;;;N;;;;;
1D73F;MATHEMATICAL BOLD ITALIC SMALL KAPPA;Ll;0;L;<font> 03BA;;;;N;;;;;
1D740;MATHEMATICAL BOLD ITALIC SMALL LAMDA;Ll;0;L;<font> 03BB;;;;N;;;;;
1D741;MATHEMATICAL BOLD ITALIC SMALL MU;Ll;0;L;<font> 03BC;;;;N;;;;;
1D742;MATHEMATICAL BOLD ITALIC SMALL NU;Ll;0;L;<font> 03BD;;;;N;;;;;
1D743;MATHEMATICAL BOLD ITALIC SMALL XI;Ll;0;L;<font> 03BE;;;;N;;;;;
1D744;MATHEMATICAL BOLD ITALIC SMALL OMICRON;Ll;0;L;<font> 03BF;;;;N;;;;;
1D745;MATHEMATICAL BOLD ITALIC SMALL PI;Ll;0;L;<font> 03C0;;;;N;;;;;
1D746;MATHEMATICAL BOLD ITALIC SMALL RHO;Ll;0;L;<font> 03C1;;;;N;;;;;
1D747;MATHEMATICAL BOLD ITALIC SMALL FINAL SIGMA;Ll;0;L;<font> 03C2;;;;N;;;;;
1D748;MATHEMATICAL BOLD ITALIC SMALL SIGMA;Ll;0;L;<font> 03C3;;;;N;;;;;
1D749;MATHEMATICAL BOLD ITALIC SMALL TAU;Ll;0;L;<font> 03C4;;;;N;;;;;
1D74A;MATHEMATICAL BOLD ITALIC SMALL UPSILON;Ll;0;L;<font> 03C5;;;;N;;;;;
1D74B;MATHEMATICAL BOLD ITALIC SMALL PHI;Ll;0;L;<font> 03C6;;;;N;;;;;
1D74C;MATHEMATICAL BOLD ITALIC SMALL CHI;Ll;0;L;<font> 03C7;;;;N;;;;;
1D74D;MATHEMATICAL BOLD ITALIC SMALL PSI;Ll;0;L;<font> 03C8;;;;N;;;;;
1D74E;MATHEMATICAL BOLD ITALIC SMALL OMEGA;Ll;0;L;<font> 03C9;;;;N;;;;;
1D74F;MATHEMATICAL BOLD ITALIC PARTIAL DIFFERENTIAL;Sm;0;L;<font> 2202;;;;Y;;;;;
1D750;MATHEMATICAL BOLD ITALIC EPSILON SYMBOL;Ll;0;L;<font> 03F5;;;;N;;;;;
1D751;MATHEMATICAL BOLD ITALIC THETA SYMBOL;Ll;0;L;<font> 03D1;;;;N;;;;;
1D752;MATHEMATICAL BOLD ITALIC KAPPA SYMBOL;Ll;0;L;<font> 03F0;;;;N;;;;;
1D753;MATHEMATICAL BOLD ITALIC PHI SYMBOL;Ll;0;L;<font> 03D5;;;;N;;;;;
1D754;MATHEMATICAL BOLD ITALIC RHO SYMBOL;Ll;0;L;<font> 03F1;;;;N;;;;;
1D755;MATHEMATICAL BOLD ITALIC PI SYMBOL;Ll;0;L;<font> 03D6;;;;N;;;;;
1D756;MATHEMATICAL SANS-SERIF BOLD CAPITAL ALPHA;Lu;0;L;<font> 0391;;;;N;;;;;
1D757;MATHEMATICAL SANS-SERIF BOLD CAPITAL BETA;Lu;0;L;<font> 0392;;;;N;;;;;
1D758;MATHEMATICAL SANS-SERIF BOLD CAPITAL GAMMA;Lu;0;L;<font> 0393;;;;N;;;;;
1D759;MATHEMATICAL SANS-SERIF BOLD CAPITAL DELTA;Lu;0;L;<font> 0394;;;;N;;;;;
1D75A;MATHEMATICAL SANS-SERIF BOLD CAPITAL EPSILON;Lu;0;L;<font> 0395;;;;N;;;;;
1D75B;MATHEMATICAL SANS-SERIF BOLD CAPITAL ZETA;Lu;0;L;<font> 0396;;;;N;;;;;
1D75C;MATHEMATICAL SANS-SERIF BOLD CAPITAL ETA;Lu;0;L;<font> 0397;;;;N;;;;;
1D75D;MATHEMATICAL SANS-SERIF BOLD CAPITAL THETA;Lu;0;L;<font> 0398;;;;N;;;;;
1D75E;MATHEMATICAL SANS-SERIF BOLD CAPITAL IOTA;Lu;0;L;<font> 0399;;;;N;;;;;
1D75F;MATHEMATICAL SANS-SERIF BOLD CAPITAL KAPPA;Lu;0;L;<font> 039A;;;;N;;;;;
1D760;MATHEMATICAL SANS-SERIF BOLD CAPITAL LAMDA;Lu;0;L;<font> 039B;;;;N;;;;;
1D761;MATHEMATICAL SANS-SERIF BOLD CAPITAL MU;Lu;0;L;<font> 039C;;;;N;;;;;
1D762;MATHEMATICAL SANS-SERIF BOLD CAPITAL NU;Lu;0;L;<font> 039D;;;;N;;;;;
1D763;MATHEMATICAL SANS-SERIF BOLD CAPITAL XI;Lu;0;L;<font> 039E;;;;N;;;;;
1D764;MATHEMATICAL SANS-SERIF BOLD CAPITAL OMICRON;Lu;0;L;<font> 039F;;;;N;;;;;
1D765;MATHEMATICAL SANS-SERIF BOLD CAPITAL PI;Lu;0;L;<font> 03A0;;;;N;;;;;
1D766;MATHEMATICAL SANS-SERIF BOLD CAPITAL RHO;Lu;0;L;<font> 03A1;;;;N;;;;;
1D767;MATHEMATICAL SANS-SERIF BOLD CAPITAL THETA SYMBOL;Lu;0;L;<font> 03F4;;;;N;;;;;
1D768;MATHEMATICAL SANS-SERIF BOLD CAPITAL SIGMA;Lu;0;L;<font> 03A3;;;;N;;;;;
1D769;MATHEMATICAL SANS-SERIF BOLD CAPITAL TAU;Lu;0;L;<font> 03A4;;;;N;;;;;
1D76A;MATHEMATICAL SANS-SERIF BOLD CAPITAL UPSILON;Lu;0;L;<font> 03A5;;;;N;;;;;
1D76B;MATHEMATICAL SANS-SERIF BOLD CAPITAL PHI;Lu;0;L;<font> 03A6;;;;N;;;;;
1D76C;MATHEMATICAL SANS-SERIF BOLD CAPITAL CHI;Lu;0;L;<font> 03A7;;;;N;;;;;
1D76D;MATHEMATICAL SANS-SERIF BOLD CAPITAL PSI;Lu;0;L;<font> 03A8;;;;N;;;;;
1D76E;MATHEMATICAL SANS-SERIF BOLD CAPITAL OMEGA;Lu;0;L;<font> 03A9;;;;N;;;;;
1D76F;MATHEMATICAL SANS-SERIF BOLD NABLA;Sm;0;L;<font> 2207;;;;N;;;;;
1D770;MATHEMATICAL SANS-SERIF BOLD SMALL ALPHA;Ll;0;L;<font> 03B1;;;;N;;;;;
1D771;MATHEMATICAL SANS-SERIF BOLD SMALL BETA;Ll;0;L;<font> 03B2;;;;N;;;;;
1D772;MATHEMATICAL SANS-SERIF BOLD SMALL GAMMA;Ll;0;L;<font> 03B3;;;;N;;;;;
1D773;MATHEMATICAL SANS-SERIF BOLD SMALL DELTA;Ll;0;L;<font> 03B4;;;;N;;;;;
1D774;MATHEMATICAL SANS-SERIF BOLD SMALL EPSILON;Ll;0;L;<font> 03B5;;;;N;;;;;
1D775;MATHEMATICAL SANS-SERIF BOLD SMALL ZETA;Ll;0;L;<font> 03B6;;;;N;;;;;
1D776;MATHEMATICAL SANS-SERIF BOLD SMALL ETA;Ll;0;L;<font> 03B7;;;;N;;;;;
1D777;MATHEMATICAL SANS-SERIF BOLD SMALL THETA;Ll;0;L;<font> 03B8;;;;N;;;;;
1D778;MATHEMATICAL SANS-SERIF BOLD SMALL IOTA;Ll;0;L;<font> 03B9;;;;N;;;;;
1D779;MATHEMATICAL SANS-SERIF BOLD SMALL KAPPA;Ll;0;L;<font> 03BA;;;;N;;;;;
1D77A;MATHEMATICAL SANS-SERIF BOLD SMALL LAMDA;Ll;0;L;<font> 03BB;;;;N;;;;;
1D77B;MATHEMATICAL SANS-SERIF BOLD SMALL MU;Ll;0;L;<font> 03BC;;;;N;;;;;
1D77C;MATHEMATICAL SANS-SERIF BOLD SMALL NU;Ll;0;L;<font> 03BD;;;;N;;;;;
1D77D;MATHEMATICAL SANS-SERIF BOLD SMALL XI;Ll;0;L;<font> 03BE;;;;N;;;;;
1D77E;MATHEMATICAL SANS-SERIF BOLD SMALL OMICRON;Ll;0;L;<font> 03BF;;;;N;;;;;
1D77F;MATHEMATICAL SANS-SERIF BOLD SMALL PI;Ll;0;L;<font> 03C0;;;;N;;;;;
1D780;MATHEMATICAL SANS-SERIF BOLD SMALL RHO;Ll;0;L;<font> 03C1;;;;N;;;;;
1D781;MATHEMATICAL SANS-SERIF BOLD SMALL FINAL SIGMA;Ll;0;L;<font> 03C2;;;;N;;;;;
1D782;MATHEMATICAL SANS-SERIF BOLD SMALL SIGMA;Ll;0;L;<font> 03C3;;;;N;;;;;
1D783;MATHEMATICAL SANS-SERIF BOLD SMALL TAU;Ll;0;L;<font> 03C4;;;;N;;;;;
1D784;MATHEMATICAL SANS-SERIF BOLD SMALL UPSILON;Ll;0;L;<font> 03C5;;;;N;;;;;
1D785;MATHEMATICAL SANS-SERIF BOLD SMALL PHI;Ll;0;L;<font> 03C6;;;;N;;;;;
1D786;MATHEMATICAL SANS-SERIF BOLD SMALL CHI;Ll;0;L;<font> 03C7;;;;N;;;;;
1D787;MATHEMATICAL SANS-SERIF BOLD SMALL PSI;Ll;0;L;<font> 03C8;;;;N;;;;;
1D788;MATHEMATICAL SANS-SERIF BOLD SMALL OMEGA;Ll;0;L;<font> 03C9;;;;N;;;;;
1D789;MATHEMATICAL SANS-SERIF BOLD PARTIAL DIFFERENTIAL;Sm;0;L;<font> 2202;;;;Y;;;;;
1D78A;MATHEMATICAL SANS-SERIF BOLD EPSILON SYMBOL;Ll;0;L;<font> 03F5;;;;N;;;;;
1D78B;MATHEMATICAL SANS-SERIF BOLD THETA SYMBOL;Ll;0;L;<font> 03D1;;;;N;;;;;
1D78C;MATHEMATICAL SANS-SERIF BOLD KAPPA SYMBOL;Ll;0;L;<font> 03F0;;;;N;;;;;
1D78D;MATHEMATICAL SANS-SERIF BOLD PHI SYMBOL;Ll;0;L;<font> 03D5;;;;N;;;;;
1D78E;MATHEMATICAL SANS-SERIF BOLD RHO SYMBOL;Ll;0;L;<font> 03F1;;;;N;;;;;
1D78F;MATHEMATICAL SANS-SERIF BOLD PI SYMBOL;Ll;0;L;<font> 03D6;;;;N;;;;;
1D790;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL ALPHA;Lu;0;L;<font> 0391;;;;N;;;;;
1D791;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL BETA;Lu;0;L;<font> 0392;;;;N;;;;;
1D792;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL GAMMA;Lu;0;L;<font> 0393;;;;N;;;;;
1D793;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL DELTA;Lu;0;L;<font> 0394;;;;N;;;;;
1D794;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL EPSILON;Lu;0;L;<font> 0395;;;;N;;;;;
1D795;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL ZETA;Lu;0;L;<font> 0396;;;;N;;;;;
1D796;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL ETA;Lu;0;L;<font> 0397;;;;N;;;;;
1D797;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL THETA;Lu;0;L;<font> 0398;;;;N;;;;;
1D798;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL IOTA;Lu;0;L;<font> 0399;;;;N;;;;;
1D799;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL KAPPA;Lu;0;L;<font> 039A;;;;N;;;;;
1D79A;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL LAMDA;Lu;0;L;<font> 039B;;;;N;;;;;
1D79B;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL MU;Lu;0;L;<font> 039C;;;;N;;;;;
1D79C;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL NU;Lu;0;L;<font> 039D;;;;N;;;;;
1D79D;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL XI;Lu;0;L;<font> 039E;;;;N;;;;;
1D79E;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMICRON;Lu;0;L;<font> 039F;;;;N;;;;;
1D79F;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PI;Lu;0;L;<font> 03A0;;;;N;;;;;
1D7A0;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL RHO;Lu;0;L;<font> 03A1;;;;N;;;;;
1D7A1;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL THETA SYMBOL;Lu;0;L;<font> 03F4;;;;N;;;;;
1D7A2;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL SIGMA;Lu;0;L;<font> 03A3;;;;N;;;;;
1D7A3;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL TAU;Lu;0;L;<font> 03A4;;;;N;;;;;
1D7A4;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL UPSILON;Lu;0;L;<font> 03A5;;;;N;;;;;
1D7A5;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PHI;Lu;0;L;<font> 03A6;;;;N;;;;;
1D7A6;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL CHI;Lu;0;L;<font> 03A7;;;;N;;;;;
1D7A7;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PSI;Lu;0;L;<font> 03A8;;;;N;;;;;
1D7A8;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMEGA;Lu;0;L;<font> 03A9;;;;N;;;;;
1D7A9;MATHEMATICAL SANS-SERIF BOLD ITALIC NABLA;Sm;0;L;<font> 2207;;;;N;;;;;
1D7AA;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL ALPHA;Ll;0;L;<font> 03B1;;;;N;;;;;
1D7AB;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL BETA;Ll;0;L;<font> 03B2;;;;N;;;;;
1D7AC;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL GAMMA;Ll;0;L;<font> 03B3;;;;N;;;;;
1D7AD;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL DELTA;Ll;0;L;<font> 03B4;;;;N;;;;;
1D7AE;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL EPSILON;Ll;0;L;<font> 03B5;;;;N;;;;;
1D7AF;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL ZETA;Ll;0;L;<font> 03B6;;;;N;;;;;
1D7B0;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL ETA;Ll;0;L;<font> 03B7;;;;N;;;;;
1D7B1;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL THETA;Ll;0;L;<font> 03B8;;;;N;;;;;
1D7B2;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL IOTA;Ll;0;L;<font> 03B9;;;;N;;;;;
1D7B3;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL KAPPA;Ll;0;L;<font> 03BA;;;;N;;;;;
1D7B4;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL LAMDA;Ll;0;L;<font> 03BB;;;;N;;;;;
1D7B5;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL MU;Ll;0;L;<font> 03BC;;;;N;;;;;
1D7B6;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL NU;Ll;0;L;<font> 03BD;;;;N;;;;;
1D7B7;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL XI;Ll;0;L;<font> 03BE;;;;N;;;;;
1D7B8;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMICRON;Ll;0;L;<font> 03BF;;;;N;;;;;
1D7B9;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PI;Ll;0;L;<font> 03C0;;;;N;;;;;
1D7BA;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL RHO;Ll;0;L;<font> 03C1;;;;N;;;;;
1D7BB;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL FINAL SIGMA;Ll;0;L;<font> 03C2;;;;N;;;;;
1D7BC;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL SIGMA;Ll;0;L;<font> 03C3;;;;N;;;;;
1D7BD;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL TAU;Ll;0;L;<font> 03C4;;;;N;;;;;
1D7BE;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL UPSILON;Ll;0;L;<font> 03C5;;;;N;;;;;
1D7BF;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PHI;Ll;0;L;<font> 03C6;;;;N;;;;;
1D7C0;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL CHI;Ll;0;L;<font> 03C7;;;;N;;;;;
1D7C1;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PSI;Ll;0;L;<font> 03C8;;;;N;;;;;
1D7C2;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMEGA;Ll;0;L;<font> 03C9;;;;N;;;;;
1D7C3;MATHEMATICAL SANS-SERIF BOLD ITALIC PARTIAL DIFFERENTIAL;Sm;0;L;<font> 2202;;;;Y;;;;;
1D7C4;MATHEMATICAL SANS-SERIF BOLD ITALIC EPSILON SYMBOL;Ll;0;L;<font> 03F5;;;;N;;;;;
1D7C5;MATHEMATICAL SANS-SERIF BOLD ITALIC THETA SYMBOL;Ll;0;L;<font> 03D1;;;;N;;;;;
1D7C6;MATHEMATICAL SANS-SERIF BOLD ITALIC KAPPA SYMBOL;Ll;0;L;<font> 03F0;;;;N;;;;;
1D7C7;MATHEMATICAL SANS-SERIF BOLD ITALIC PHI SYMBOL;Ll;0;L;<font> 03D5;;;;N;;;;;
1D7C8;MATHEMATICAL SANS-SERIF BOLD ITALIC RHO SYMBOL;Ll;0;L;<font> 03F1;;;;N;;;;;
1D7C9;MATHEMATICAL SANS-SERIF BOLD ITALIC PI SYMBOL;Ll;0;L;<font> 03D6;;;;N;;;;;
1D7CA;MATHEMATICAL BOLD CAPITAL DIGAMMA;Lu;0;L;<font> 03DC;;;;N;;;;;
1D7CB;MATHEMATICAL BOLD SMALL DIGAMMA;Ll;0;L;<font> 03DD;;;;N;;;;;
1D7CE;MATHEMATICAL BOLD DIGIT ZERO;Nd;0;EN;<font> 0030;0;0;0;N;;;;;
1D7CF;MATHEMATICAL BOLD DIGIT ONE;Nd;0;EN;<font> 0031;1;1;1;N;;;;;
1D7D0;MATHEMATICAL BOLD DIGIT TWO;Nd;0;EN;<font> 0032;2;2;2;N;;;;;
1D7D1;MATHEMATICAL BOLD DIGIT THREE;Nd;0;EN;<font> 0033;3;3;3;N;;;;;
1D7D2;MATHEMATICAL BOLD DIGIT FOUR;Nd;0;EN;<font> 0034;4;4;4;N;;;;;
1D7D3;MATHEMATICAL BOLD DIGIT FIVE;Nd;0;EN;<font> 0035;5;5;5;N;;;;;
1D7D4;MATHEMATICAL BOLD DIGIT SIX;Nd;0;EN;<font> 0036;6;6;6;N;;;;;
1D7D5;MATHEMATICAL BOLD DIGIT SEVEN;Nd;0;EN;<font> 0037;7;7;7;N;;;;;
1D7D6;MATHEMATICAL BOLD DIGIT EIGHT;Nd;0;EN;<font> 0038;8;8;8;N;;;;;
1D7D7;MATHEMATICAL BOLD DIGIT NINE;Nd;0;EN;<font> 0039;9;9;9;N;;;;;
1D7D8;MATHEMATICAL DOUBLE-STRUCK DIGIT ZERO;Nd;0;EN;<font> 0030;0;0;0;N;;;;;
1D7D9;MATHEMATICAL DOUBLE-STRUCK DIGIT ONE;Nd;0;EN;<font> 0031;1;1;1;N;;;;;
1D7DA;MATHEMATICAL DOUBLE-STRUCK DIGIT TWO;Nd;0;EN;<font> 0032;2;2;2;N;;;;;
1D7DB;MATHEMATICAL DOUBLE-STRUCK DIGIT THREE;Nd;0;EN;<font> 0033;3;3;3;N;;;;;
1D7DC;MATHEMATICAL DOUBLE-STRUCK DIGIT FOUR;Nd;0;EN;<font> 0034;4;4;4;N;;;;;
1D7DD;MATHEMATICAL DOUBLE-STRUCK DIGIT FIVE;Nd;0;EN;<font> 0035;5;5;5;N;;;;;
1D7DE;MATHEMATICAL DOUBLE-STRUCK DIGIT SIX;Nd;0;EN;<font> 0036;6;6;6;N;;;;;
1D7DF;MATHEMATICAL DOUBLE-STRUCK DIGIT SEVEN;Nd;0;EN;<font> 0037;7;7;7;N;;;;;
1D7E0;MATHEMATICAL DOUBLE-STRUCK DIGIT EIGHT;Nd;0;EN;<font> 0038;8;8;8;N;;;;;
1D7E1;MATHEMATICAL DOUBLE-STRUCK DIGIT NINE;Nd;0;EN;<font> 0039;9;9;9;N;;;;;
1D7E2;MATHEMATICAL SANS-SERIF DIGIT ZERO;Nd;0;EN;<font> 0030;0;0;0;N;;;;;
1D7E3;MATHEMATICAL SANS-SERIF DIGIT ONE;Nd;0;EN;<font> 0031;1;1;1;N;;;;;
1D7E4;MATHEMATICAL SANS-SERIF DIGIT TWO;Nd;0;EN;<font> 0032;2;2;2;N;;;;;
1D7E5;MATHEMATICAL SANS-SERIF DIGIT THREE;Nd;0;EN;<font> 0033;3;3;3;N;;;;;
1D7E6;MATHEMATICAL SANS-SERIF DIGIT FOUR;Nd;0;EN;<font> 0034;4;4;4;N;;;;;
1D7E7;MATHEMATICAL SANS-SERIF DIGIT FIVE;Nd;0;EN;<font> 0035;5;5;5;N;;;;;
1D7E8;MATHEMATICAL SANS-SERIF DIGIT SIX;Nd;0;EN;<font> 0036;6;6;6;N;;;;;
1D7E9;MATHEMATICAL SANS-SERIF DIGIT SEVEN;Nd;0;EN;<font> 0037;7;7;7;N;;;;;
1D7EA;MATHEMATICAL SANS-SERIF DIGIT EIGHT;Nd;0;EN;<font> 0038;8;8;8;N;;;;;
1D7EB;MATHEMATICAL SANS-SERIF DIGIT NINE;Nd;0;EN;<font> 0039;9;9;9;N;;;;;
1D7EC;MATHEMATICAL SANS-SERIF BOLD DIGIT ZERO;Nd;0;EN;<font> 0030;0;0;0;N;;;;;
1D7ED;MATHEMATICAL SANS-SERIF BOLD DIGIT ONE;Nd;0;EN;<font> 0031;1;1;1;N;;;;;
1D7EE;MATHEMATICAL SANS-SERIF BOLD DIGIT TWO;Nd;0;EN;<font> 0032;2;2;2;N;;;;;
1D7EF;MATHEMATICAL SANS-SERIF BOLD DIGIT THREE;Nd;0;EN;<font> 0033;3;3;3;N;;;;;
1D7F0;MATHEMATICAL SANS-SERIF BOLD DIGIT FOUR;Nd;0;EN;<font> 0034;4;4;4;N;;;;;
1D7F1;MATHEMATICAL SANS-SERIF BOLD DIGIT FIVE;Nd;0;EN;<font> 0035;5;5;5;N;;;;;
1D7F2;MATHEMATICAL SANS-SERIF BOLD DIGIT SIX;Nd;0;EN;<font> 0036;6;6;6;N;;;;;
1D7F3;MATHEMATICAL SANS-SERIF BOLD DIGIT SEVEN;Nd;0;EN;<font> 0037;7;7;7;N;;;;;
1D7F4;MATHEMATICAL SANS-SERIF BOLD DIGIT EIGHT;Nd;0;EN;<font> 0038;8;8;8;N;;;;;
1D7F5;MATHEMATICAL SANS-SERIF BOLD DIGIT NINE;Nd;0;EN;<font> 0039;9;9;9;N;;;;;
1D7F6;MATHEMATICAL MONOSPACE DIGIT ZERO;Nd;0;EN;<font> 0030;0;0;0;N;;;;;
1D7F7;MATHEMATICAL MONOSPACE DIGIT ONE;Nd;0;EN;<font> 0031;1;1;1;N;;;;;
1D7F8;MATHEMATICAL MONOSPACE DIGIT TWO;Nd;0;EN;<font> 0032;2;2;2;N;;;;;
1D7F9;MATHEMATICAL MONOSPACE DIGIT THREE;Nd;0;EN;<font> 0033;3;3;3;N;;;;;
1D7FA;MATHEMATICAL MONOSPACE DIGIT FOUR;Nd;0;EN;<font> 0034;4;4;4;N;;;;;
1D7FB;MATHEMATICAL MONOSPACE DIGIT FIVE;Nd;0;EN;<font> 0035;5;5;5;N;;;;;
1D7FC;MATHEMATICAL MONOSPACE DIGIT SIX;Nd;0;EN;<font> 0036;6;6;6;N;;;;;
1D7FD;MATHEMATICAL MONOSPACE DIGIT SEVEN;Nd;0;EN;<font> 0037;7;7;7;N;;;;;
1D7FE;MATHEMATICAL MONOSPACE DIGIT EIGHT;Nd;0;EN;<font> 0038;8;8;8;N;;;;;
1D7FF;MATHEMATICAL MONOSPACE DIGIT NINE;Nd;0;EN;<font> 0039;9;9;9;N;;;;;
20000;<CJK Ideograph Extension B, First>;Lo;0;L;;;;;N;;;;;
2A6D6;<CJK Ideograph Extension B, Last>;Lo;0;L;;;;;N;;;;;
2F800;CJK COMPATIBILITY IDEOGRAPH-2F800;Lo;0;L;4E3D;;;;N;;;;;
2F801;CJK COMPATIBILITY IDEOGRAPH-2F801;Lo;0;L;4E38;;;;N;;;;;
2F802;CJK COMPATIBILITY IDEOGRAPH-2F802;Lo;0;L;4E41;;;;N;;;;;
2F803;CJK COMPATIBILITY IDEOGRAPH-2F803;Lo;0;L;20122;;;;N;;;;;
2F804;CJK COMPATIBILITY IDEOGRAPH-2F804;Lo;0;L;4F60;;;;N;;;;;
2F805;CJK COMPATIBILITY IDEOGRAPH-2F805;Lo;0;L;4FAE;;;;N;;;;;
2F806;CJK COMPATIBILITY IDEOGRAPH-2F806;Lo;0;L;4FBB;;;;N;;;;;
2F807;CJK COMPATIBILITY IDEOGRAPH-2F807;Lo;0;L;5002;;;;N;;;;;
2F808;CJK COMPATIBILITY IDEOGRAPH-2F808;Lo;0;L;507A;;;;N;;;;;
2F809;CJK COMPATIBILITY IDEOGRAPH-2F809;Lo;0;L;5099;;;;N;;;;;
2F80A;CJK COMPATIBILITY IDEOGRAPH-2F80A;Lo;0;L;50E7;;;;N;;;;;
2F80B;CJK COMPATIBILITY IDEOGRAPH-2F80B;Lo;0;L;50CF;;;;N;;;;;
2F80C;CJK COMPATIBILITY IDEOGRAPH-2F80C;Lo;0;L;349E;;;;N;;;;;
2F80D;CJK COMPATIBILITY IDEOGRAPH-2F80D;Lo;0;L;2063A;;;;N;;;;;
2F80E;CJK COMPATIBILITY IDEOGRAPH-2F80E;Lo;0;L;514D;;;;N;;;;;
2F80F;CJK COMPATIBILITY IDEOGRAPH-2F80F;Lo;0;L;5154;;;;N;;;;;
2F810;CJK COMPATIBILITY IDEOGRAPH-2F810;Lo;0;L;5164;;;;N;;;;;
2F811;CJK COMPATIBILITY IDEOGRAPH-2F811;Lo;0;L;5177;;;;N;;;;;
2F812;CJK COMPATIBILITY IDEOGRAPH-2F812;Lo;0;L;2051C;;;;N;;;;;
2F813;CJK COMPATIBILITY IDEOGRAPH-2F813;Lo;0;L;34B9;;;;N;;;;;
2F814;CJK COMPATIBILITY IDEOGRAPH-2F814;Lo;0;L;5167;;;;N;;;;;
2F815;CJK COMPATIBILITY IDEOGRAPH-2F815;Lo;0;L;518D;;;;N;;;;;
2F816;CJK COMPATIBILITY IDEOGRAPH-2F816;Lo;0;L;2054B;;;;N;;;;;
2F817;CJK COMPATIBILITY IDEOGRAPH-2F817;Lo;0;L;5197;;;;N;;;;;
2F818;CJK COMPATIBILITY IDEOGRAPH-2F818;Lo;0;L;51A4;;;;N;;;;;
2F819;CJK COMPATIBILITY IDEOGRAPH-2F819;Lo;0;L;4ECC;;;;N;;;;;
2F81A;CJK COMPATIBILITY IDEOGRAPH-2F81A;Lo;0;L;51AC;;;;N;;;;;
2F81B;CJK COMPATIBILITY IDEOGRAPH-2F81B;Lo;0;L;51B5;;;;N;;;;;
2F81C;CJK COMPATIBILITY IDEOGRAPH-2F81C;Lo;0;L;291DF;;;;N;;;;;
2F81D;CJK COMPATIBILITY IDEOGRAPH-2F81D;Lo;0;L;51F5;;;;N;;;;;
2F81E;CJK COMPATIBILITY IDEOGRAPH-2F81E;Lo;0;L;5203;;;;N;;;;;
2F81F;CJK COMPATIBILITY IDEOGRAPH-2F81F;Lo;0;L;34DF;;;;N;;;;;
2F820;CJK COMPATIBILITY IDEOGRAPH-2F820;Lo;0;L;523B;;;;N;;;;;
2F821;CJK COMPATIBILITY IDEOGRAPH-2F821;Lo;0;L;5246;;;;N;;;;;
2F822;CJK COMPATIBILITY IDEOGRAPH-2F822;Lo;0;L;5272;;;;N;;;;;
2F823;CJK COMPATIBILITY IDEOGRAPH-2F823;Lo;0;L;5277;;;;N;;;;;
2F824;CJK COMPATIBILITY IDEOGRAPH-2F824;Lo;0;L;3515;;;;N;;;;;
2F825;CJK COMPATIBILITY IDEOGRAPH-2F825;Lo;0;L;52C7;;;;N;;;;;
2F826;CJK COMPATIBILITY IDEOGRAPH-2F826;Lo;0;L;52C9;;;;N;;;;;
2F827;CJK COMPATIBILITY IDEOGRAPH-2F827;Lo;0;L;52E4;;;;N;;;;;
2F828;CJK COMPATIBILITY IDEOGRAPH-2F828;Lo;0;L;52FA;;;;N;;;;;
2F829;CJK COMPATIBILITY IDEOGRAPH-2F829;Lo;0;L;5305;;;;N;;;;;
2F82A;CJK COMPATIBILITY IDEOGRAPH-2F82A;Lo;0;L;5306;;;;N;;;;;
2F82B;CJK COMPATIBILITY IDEOGRAPH-2F82B;Lo;0;L;5317;;;;N;;;;;
2F82C;CJK COMPATIBILITY IDEOGRAPH-2F82C;Lo;0;L;5349;;;;N;;;;;
2F82D;CJK COMPATIBILITY IDEOGRAPH-2F82D;Lo;0;L;5351;;;;N;;;;;
2F82E;CJK COMPATIBILITY IDEOGRAPH-2F82E;Lo;0;L;535A;;;;N;;;;;
2F82F;CJK COMPATIBILITY IDEOGRAPH-2F82F;Lo;0;L;5373;;;;N;;;;;
2F830;CJK COMPATIBILITY IDEOGRAPH-2F830;Lo;0;L;537D;;;;N;;;;;
2F831;CJK COMPATIBILITY IDEOGRAPH-2F831;Lo;0;L;537F;;;;N;;;;;
2F832;CJK COMPATIBILITY IDEOGRAPH-2F832;Lo;0;L;537F;;;;N;;;;;
2F833;CJK COMPATIBILITY IDEOGRAPH-2F833;Lo;0;L;537F;;;;N;;;;;
2F834;CJK COMPATIBILITY IDEOGRAPH-2F834;Lo;0;L;20A2C;;;;N;;;;;
2F835;CJK COMPATIBILITY IDEOGRAPH-2F835;Lo;0;L;7070;;;;N;;;;;
2F836;CJK COMPATIBILITY IDEOGRAPH-2F836;Lo;0;L;53CA;;;;N;;;;;
2F837;CJK COMPATIBILITY IDEOGRAPH-2F837;Lo;0;L;53DF;;;;N;;;;;
2F838;CJK COMPATIBILITY IDEOGRAPH-2F838;Lo;0;L;20B63;;;;N;;;;;
2F839;CJK COMPATIBILITY IDEOGRAPH-2F839;Lo;0;L;53EB;;;;N;;;;;
2F83A;CJK COMPATIBILITY IDEOGRAPH-2F83A;Lo;0;L;53F1;;;;N;;;;;
2F83B;CJK COMPATIBILITY IDEOGRAPH-2F83B;Lo;0;L;5406;;;;N;;;;;
2F83C;CJK COMPATIBILITY IDEOGRAPH-2F83C;Lo;0;L;549E;;;;N;;;;;
2F83D;CJK COMPATIBILITY IDEOGRAPH-2F83D;Lo;0;L;5438;;;;N;;;;;
2F83E;CJK COMPATIBILITY IDEOGRAPH-2F83E;Lo;0;L;5448;;;;N;;;;;
2F83F;CJK COMPATIBILITY IDEOGRAPH-2F83F;Lo;0;L;5468;;;;N;;;;;
2F840;CJK COMPATIBILITY IDEOGRAPH-2F840;Lo;0;L;54A2;;;;N;;;;;
2F841;CJK COMPATIBILITY IDEOGRAPH-2F841;Lo;0;L;54F6;;;;N;;;;;
2F842;CJK COMPATIBILITY IDEOGRAPH-2F842;Lo;0;L;5510;;;;N;;;;;
2F843;CJK COMPATIBILITY IDEOGRAPH-2F843;Lo;0;L;5553;;;;N;;;;;
2F844;CJK COMPATIBILITY IDEOGRAPH-2F844;Lo;0;L;5563;;;;N;;;;;
2F845;CJK COMPATIBILITY IDEOGRAPH-2F845;Lo;0;L;5584;;;;N;;;;;
2F846;CJK COMPATIBILITY IDEOGRAPH-2F846;Lo;0;L;5584;;;;N;;;;;
2F847;CJK COMPATIBILITY IDEOGRAPH-2F847;Lo;0;L;5599;;;;N;;;;;
2F848;CJK COMPATIBILITY IDEOGRAPH-2F848;Lo;0;L;55AB;;;;N;;;;;
2F849;CJK COMPATIBILITY IDEOGRAPH-2F849;Lo;0;L;55B3;;;;N;;;;;
2F84A;CJK COMPATIBILITY IDEOGRAPH-2F84A;Lo;0;L;55C2;;;;N;;;;;
2F84B;CJK COMPATIBILITY IDEOGRAPH-2F84B;Lo;0;L;5716;;;;N;;;;;
2F84C;CJK COMPATIBILITY IDEOGRAPH-2F84C;Lo;0;L;5606;;;;N;;;;;
2F84D;CJK COMPATIBILITY IDEOGRAPH-2F84D;Lo;0;L;5717;;;;N;;;;;
2F84E;CJK COMPATIBILITY IDEOGRAPH-2F84E;Lo;0;L;5651;;;;N;;;;;
2F84F;CJK COMPATIBILITY IDEOGRAPH-2F84F;Lo;0;L;5674;;;;N;;;;;
2F850;CJK COMPATIBILITY IDEOGRAPH-2F850;Lo;0;L;5207;;;;N;;;;;
2F851;CJK COMPATIBILITY IDEOGRAPH-2F851;Lo;0;L;58EE;;;;N;;;;;
2F852;CJK COMPATIBILITY IDEOGRAPH-2F852;Lo;0;L;57CE;;;;N;;;;;
2F853;CJK COMPATIBILITY IDEOGRAPH-2F853;Lo;0;L;57F4;;;;N;;;;;
2F854;CJK COMPATIBILITY IDEOGRAPH-2F854;Lo;0;L;580D;;;;N;;;;;
2F855;CJK COMPATIBILITY IDEOGRAPH-2F855;Lo;0;L;578B;;;;N;;;;;
2F856;CJK COMPATIBILITY IDEOGRAPH-2F856;Lo;0;L;5832;;;;N;;;;;
2F857;CJK COMPATIBILITY IDEOGRAPH-2F857;Lo;0;L;5831;;;;N;;;;;
2F858;CJK COMPATIBILITY IDEOGRAPH-2F858;Lo;0;L;58AC;;;;N;;;;;
2F859;CJK COMPATIBILITY IDEOGRAPH-2F859;Lo;0;L;214E4;;;;N;;;;;
2F85A;CJK COMPATIBILITY IDEOGRAPH-2F85A;Lo;0;L;58F2;;;;N;;;;;
2F85B;CJK COMPATIBILITY IDEOGRAPH-2F85B;Lo;0;L;58F7;;;;N;;;;;
2F85C;CJK COMPATIBILITY IDEOGRAPH-2F85C;Lo;0;L;5906;;;;N;;;;;
2F85D;CJK COMPATIBILITY IDEOGRAPH-2F85D;Lo;0;L;591A;;;;N;;;;;
2F85E;CJK COMPATIBILITY IDEOGRAPH-2F85E;Lo;0;L;5922;;;;N;;;;;
2F85F;CJK COMPATIBILITY IDEOGRAPH-2F85F;Lo;0;L;5962;;;;N;;;;;
2F860;CJK COMPATIBILITY IDEOGRAPH-2F860;Lo;0;L;216A8;;;;N;;;;;
2F861;CJK COMPATIBILITY IDEOGRAPH-2F861;Lo;0;L;216EA;;;;N;;;;;
2F862;CJK COMPATIBILITY IDEOGRAPH-2F862;Lo;0;L;59EC;;;;N;;;;;
2F863;CJK COMPATIBILITY IDEOGRAPH-2F863;Lo;0;L;5A1B;;;;N;;;;;
2F864;CJK COMPATIBILITY IDEOGRAPH-2F864;Lo;0;L;5A27;;;;N;;;;;
2F865;CJK COMPATIBILITY IDEOGRAPH-2F865;Lo;0;L;59D8;;;;N;;;;;
2F866;CJK COMPATIBILITY IDEOGRAPH-2F866;Lo;0;L;5A66;;;;N;;;;;
2F867;CJK COMPATIBILITY IDEOGRAPH-2F867;Lo;0;L;36EE;;;;N;;;;;
2F868;CJK COMPATIBILITY IDEOGRAPH-2F868;Lo;0;L;36FC;;;;N;;;;;
2F869;CJK COMPATIBILITY IDEOGRAPH-2F869;Lo;0;L;5B08;;;;N;;;;;
2F86A;CJK COMPATIBILITY IDEOGRAPH-2F86A;Lo;0;L;5B3E;;;;N;;;;;
2F86B;CJK COMPATIBILITY IDEOGRAPH-2F86B;Lo;0;L;5B3E;;;;N;;;;;
2F86C;CJK COMPATIBILITY IDEOGRAPH-2F86C;Lo;0;L;219C8;;;;N;;;;;
2F86D;CJK COMPATIBILITY IDEOGRAPH-2F86D;Lo;0;L;5BC3;;;;N;;;;;
2F86E;CJK COMPATIBILITY IDEOGRAPH-2F86E;Lo;0;L;5BD8;;;;N;;;;;
2F86F;CJK COMPATIBILITY IDEOGRAPH-2F86F;Lo;0;L;5BE7;;;;N;;;;;
2F870;CJK COMPATIBILITY IDEOGRAPH-2F870;Lo;0;L;5BF3;;;;N;;;;;
2F871;CJK COMPATIBILITY IDEOGRAPH-2F871;Lo;0;L;21B18;;;;N;;;;;
2F872;CJK COMPATIBILITY IDEOGRAPH-2F872;Lo;0;L;5BFF;;;;N;;;;;
2F873;CJK COMPATIBILITY IDEOGRAPH-2F873;Lo;0;L;5C06;;;;N;;;;;
2F874;CJK COMPATIBILITY IDEOGRAPH-2F874;Lo;0;L;5F53;;;;N;;;;;
2F875;CJK COMPATIBILITY IDEOGRAPH-2F875;Lo;0;L;5C22;;;;N;;;;;
2F876;CJK COMPATIBILITY IDEOGRAPH-2F876;Lo;0;L;3781;;;;N;;;;;
2F877;CJK COMPATIBILITY IDEOGRAPH-2F877;Lo;0;L;5C60;;;;N;;;;;
2F878;CJK COMPATIBILITY IDEOGRAPH-2F878;Lo;0;L;5C6E;;;;N;;;;;
2F879;CJK COMPATIBILITY IDEOGRAPH-2F879;Lo;0;L;5CC0;;;;N;;;;;
2F87A;CJK COMPATIBILITY IDEOGRAPH-2F87A;Lo;0;L;5C8D;;;;N;;;;;
2F87B;CJK COMPATIBILITY IDEOGRAPH-2F87B;Lo;0;L;21DE4;;;;N;;;;;
2F87C;CJK COMPATIBILITY IDEOGRAPH-2F87C;Lo;0;L;5D43;;;;N;;;;;
2F87D;CJK COMPATIBILITY IDEOGRAPH-2F87D;Lo;0;L;21DE6;;;;N;;;;;
2F87E;CJK COMPATIBILITY IDEOGRAPH-2F87E;Lo;0;L;5D6E;;;;N;;;;;
2F87F;CJK COMPATIBILITY IDEOGRAPH-2F87F;Lo;0;L;5D6B;;;;N;;;;;
2F880;CJK COMPATIBILITY IDEOGRAPH-2F880;Lo;0;L;5D7C;;;;N;;;;;
2F881;CJK COMPATIBILITY IDEOGRAPH-2F881;Lo;0;L;5DE1;;;;N;;;;;
2F882;CJK COMPATIBILITY IDEOGRAPH-2F882;Lo;0;L;5DE2;;;;N;;;;;
2F883;CJK COMPATIBILITY IDEOGRAPH-2F883;Lo;0;L;382F;;;;N;;;;;
2F884;CJK COMPATIBILITY IDEOGRAPH-2F884;Lo;0;L;5DFD;;;;N;;;;;
2F885;CJK COMPATIBILITY IDEOGRAPH-2F885;Lo;0;L;5E28;;;;N;;;;;
2F886;CJK COMPATIBILITY IDEOGRAPH-2F886;Lo;0;L;5E3D;;;;N;;;;;
2F887;CJK COMPATIBILITY IDEOGRAPH-2F887;Lo;0;L;5E69;;;;N;;;;;
2F888;CJK COMPATIBILITY IDEOGRAPH-2F888;Lo;0;L;3862;;;;N;;;;;
2F889;CJK COMPATIBILITY IDEOGRAPH-2F889;Lo;0;L;22183;;;;N;;;;;
2F88A;CJK COMPATIBILITY IDEOGRAPH-2F88A;Lo;0;L;387C;;;;N;;;;;
2F88B;CJK COMPATIBILITY IDEOGRAPH-2F88B;Lo;0;L;5EB0;;;;N;;;;;
2F88C;CJK COMPATIBILITY IDEOGRAPH-2F88C;Lo;0;L;5EB3;;;;N;;;;;
2F88D;CJK COMPATIBILITY IDEOGRAPH-2F88D;Lo;0;L;5EB6;;;;N;;;;;
2F88E;CJK COMPATIBILITY IDEOGRAPH-2F88E;Lo;0;L;5ECA;;;;N;;;;;
2F88F;CJK COMPATIBILITY IDEOGRAPH-2F88F;Lo;0;L;2A392;;;;N;;;;;
2F890;CJK COMPATIBILITY IDEOGRAPH-2F890;Lo;0;L;5EFE;;;;N;;;;;
2F891;CJK COMPATIBILITY IDEOGRAPH-2F891;Lo;0;L;22331;;;;N;;;;;
2F892;CJK COMPATIBILITY IDEOGRAPH-2F892;Lo;0;L;22331;;;;N;;;;;
2F893;CJK COMPATIBILITY IDEOGRAPH-2F893;Lo;0;L;8201;;;;N;;;;;
2F894;CJK COMPATIBILITY IDEOGRAPH-2F894;Lo;0;L;5F22;;;;N;;;;;
2F895;CJK COMPATIBILITY IDEOGRAPH-2F895;Lo;0;L;5F22;;;;N;;;;;
2F896;CJK COMPATIBILITY IDEOGRAPH-2F896;Lo;0;L;38C7;;;;N;;;;;
2F897;CJK COMPATIBILITY IDEOGRAPH-2F897;Lo;0;L;232B8;;;;N;;;;;
2F898;CJK COMPATIBILITY IDEOGRAPH-2F898;Lo;0;L;261DA;;;;N;;;;;
2F899;CJK COMPATIBILITY IDEOGRAPH-2F899;Lo;0;L;5F62;;;;N;;;;;
2F89A;CJK COMPATIBILITY IDEOGRAPH-2F89A;Lo;0;L;5F6B;;;;N;;;;;
2F89B;CJK COMPATIBILITY IDEOGRAPH-2F89B;Lo;0;L;38E3;;;;N;;;;;
2F89C;CJK COMPATIBILITY IDEOGRAPH-2F89C;Lo;0;L;5F9A;;;;N;;;;;
2F89D;CJK COMPATIBILITY IDEOGRAPH-2F89D;Lo;0;L;5FCD;;;;N;;;;;
2F89E;CJK COMPATIBILITY IDEOGRAPH-2F89E;Lo;0;L;5FD7;;;;N;;;;;
2F89F;CJK COMPATIBILITY IDEOGRAPH-2F89F;Lo;0;L;5FF9;;;;N;;;;;
2F8A0;CJK COMPATIBILITY IDEOGRAPH-2F8A0;Lo;0;L;6081;;;;N;;;;;
2F8A1;CJK COMPATIBILITY IDEOGRAPH-2F8A1;Lo;0;L;393A;;;;N;;;;;
2F8A2;CJK COMPATIBILITY IDEOGRAPH-2F8A2;Lo;0;L;391C;;;;N;;;;;
2F8A3;CJK COMPATIBILITY IDEOGRAPH-2F8A3;Lo;0;L;6094;;;;N;;;;;
2F8A4;CJK COMPATIBILITY IDEOGRAPH-2F8A4;Lo;0;L;226D4;;;;N;;;;;
2F8A5;CJK COMPATIBILITY IDEOGRAPH-2F8A5;Lo;0;L;60C7;;;;N;;;;;
2F8A6;CJK COMPATIBILITY IDEOGRAPH-2F8A6;Lo;0;L;6148;;;;N;;;;;
2F8A7;CJK COMPATIBILITY IDEOGRAPH-2F8A7;Lo;0;L;614C;;;;N;;;;;
2F8A8;CJK COMPATIBILITY IDEOGRAPH-2F8A8;Lo;0;L;614E;;;;N;;;;;
2F8A9;CJK COMPATIBILITY IDEOGRAPH-2F8A9;Lo;0;L;614C;;;;N;;;;;
2F8AA;CJK COMPATIBILITY IDEOGRAPH-2F8AA;Lo;0;L;617A;;;;N;;;;;
2F8AB;CJK COMPATIBILITY IDEOGRAPH-2F8AB;Lo;0;L;618E;;;;N;;;;;
2F8AC;CJK COMPATIBILITY IDEOGRAPH-2F8AC;Lo;0;L;61B2;;;;N;;;;;
2F8AD;CJK COMPATIBILITY IDEOGRAPH-2F8AD;Lo;0;L;61A4;;;;N;;;;;
2F8AE;CJK COMPATIBILITY IDEOGRAPH-2F8AE;Lo;0;L;61AF;;;;N;;;;;
2F8AF;CJK COMPATIBILITY IDEOGRAPH-2F8AF;Lo;0;L;61DE;;;;N;;;;;
2F8B0;CJK COMPATIBILITY IDEOGRAPH-2F8B0;Lo;0;L;61F2;;;;N;;;;;
2F8B1;CJK COMPATIBILITY IDEOGRAPH-2F8B1;Lo;0;L;61F6;;;;N;;;;;
2F8B2;CJK COMPATIBILITY IDEOGRAPH-2F8B2;Lo;0;L;6210;;;;N;;;;;
2F8B3;CJK COMPATIBILITY IDEOGRAPH-2F8B3;Lo;0;L;621B;;;;N;;;;;
2F8B4;CJK COMPATIBILITY IDEOGRAPH-2F8B4;Lo;0;L;625D;;;;N;;;;;
2F8B5;CJK COMPATIBILITY IDEOGRAPH-2F8B5;Lo;0;L;62B1;;;;N;;;;;
2F8B6;CJK COMPATIBILITY IDEOGRAPH-2F8B6;Lo;0;L;62D4;;;;N;;;;;
2F8B7;CJK COMPATIBILITY IDEOGRAPH-2F8B7;Lo;0;L;6350;;;;N;;;;;
2F8B8;CJK COMPATIBILITY IDEOGRAPH-2F8B8;Lo;0;L;22B0C;;;;N;;;;;
2F8B9;CJK COMPATIBILITY IDEOGRAPH-2F8B9;Lo;0;L;633D;;;;N;;;;;
2F8BA;CJK COMPATIBILITY IDEOGRAPH-2F8BA;Lo;0;L;62FC;;;;N;;;;;
2F8BB;CJK COMPATIBILITY IDEOGRAPH-2F8BB;Lo;0;L;6368;;;;N;;;;;
2F8BC;CJK COMPATIBILITY IDEOGRAPH-2F8BC;Lo;0;L;6383;;;;N;;;;;
2F8BD;CJK COMPATIBILITY IDEOGRAPH-2F8BD;Lo;0;L;63E4;;;;N;;;;;
2F8BE;CJK COMPATIBILITY IDEOGRAPH-2F8BE;Lo;0;L;22BF1;;;;N;;;;;
2F8BF;CJK COMPATIBILITY IDEOGRAPH-2F8BF;Lo;0;L;6422;;;;N;;;;;
2F8C0;CJK COMPATIBILITY IDEOGRAPH-2F8C0;Lo;0;L;63C5;;;;N;;;;;
2F8C1;CJK COMPATIBILITY IDEOGRAPH-2F8C1;Lo;0;L;63A9;;;;N;;;;;
2F8C2;CJK COMPATIBILITY IDEOGRAPH-2F8C2;Lo;0;L;3A2E;;;;N;;;;;
2F8C3;CJK COMPATIBILITY IDEOGRAPH-2F8C3;Lo;0;L;6469;;;;N;;;;;
2F8C4;CJK COMPATIBILITY IDEOGRAPH-2F8C4;Lo;0;L;647E;;;;N;;;;;
2F8C5;CJK COMPATIBILITY IDEOGRAPH-2F8C5;Lo;0;L;649D;;;;N;;;;;
2F8C6;CJK COMPATIBILITY IDEOGRAPH-2F8C6;Lo;0;L;6477;;;;N;;;;;
2F8C7;CJK COMPATIBILITY IDEOGRAPH-2F8C7;Lo;0;L;3A6C;;;;N;;;;;
2F8C8;CJK COMPATIBILITY IDEOGRAPH-2F8C8;Lo;0;L;654F;;;;N;;;;;
2F8C9;CJK COMPATIBILITY IDEOGRAPH-2F8C9;Lo;0;L;656C;;;;N;;;;;
2F8CA;CJK COMPATIBILITY IDEOGRAPH-2F8CA;Lo;0;L;2300A;;;;N;;;;;
2F8CB;CJK COMPATIBILITY IDEOGRAPH-2F8CB;Lo;0;L;65E3;;;;N;;;;;
2F8CC;CJK COMPATIBILITY IDEOGRAPH-2F8CC;Lo;0;L;66F8;;;;N;;;;;
2F8CD;CJK COMPATIBILITY IDEOGRAPH-2F8CD;Lo;0;L;6649;;;;N;;;;;
2F8CE;CJK COMPATIBILITY IDEOGRAPH-2F8CE;Lo;0;L;3B19;;;;N;;;;;
2F8CF;CJK COMPATIBILITY IDEOGRAPH-2F8CF;Lo;0;L;6691;;;;N;;;;;
2F8D0;CJK COMPATIBILITY IDEOGRAPH-2F8D0;Lo;0;L;3B08;;;;N;;;;;
2F8D1;CJK COMPATIBILITY IDEOGRAPH-2F8D1;Lo;0;L;3AE4;;;;N;;;;;
2F8D2;CJK COMPATIBILITY IDEOGRAPH-2F8D2;Lo;0;L;5192;;;;N;;;;;
2F8D3;CJK COMPATIBILITY IDEOGRAPH-2F8D3;Lo;0;L;5195;;;;N;;;;;
2F8D4;CJK COMPATIBILITY IDEOGRAPH-2F8D4;Lo;0;L;6700;;;;N;;;;;
2F8D5;CJK COMPATIBILITY IDEOGRAPH-2F8D5;Lo;0;L;669C;;;;N;;;;;
2F8D6;CJK COMPATIBILITY IDEOGRAPH-2F8D6;Lo;0;L;80AD;;;;N;;;;;
2F8D7;CJK COMPATIBILITY IDEOGRAPH-2F8D7;Lo;0;L;43D9;;;;N;;;;;
2F8D8;CJK COMPATIBILITY IDEOGRAPH-2F8D8;Lo;0;L;6717;;;;N;;;;;
2F8D9;CJK COMPATIBILITY IDEOGRAPH-2F8D9;Lo;0;L;671B;;;;N;;;;;
2F8DA;CJK COMPATIBILITY IDEOGRAPH-2F8DA;Lo;0;L;6721;;;;N;;;;;
2F8DB;CJK COMPATIBILITY IDEOGRAPH-2F8DB;Lo;0;L;675E;;;;N;;;;;
2F8DC;CJK COMPATIBILITY IDEOGRAPH-2F8DC;Lo;0;L;6753;;;;N;;;;;
2F8DD;CJK COMPATIBILITY IDEOGRAPH-2F8DD;Lo;0;L;233C3;;;;N;;;;;
2F8DE;CJK COMPATIBILITY IDEOGRAPH-2F8DE;Lo;0;L;3B49;;;;N;;;;;
2F8DF;CJK COMPATIBILITY IDEOGRAPH-2F8DF;Lo;0;L;67FA;;;;N;;;;;
2F8E0;CJK COMPATIBILITY IDEOGRAPH-2F8E0;Lo;0;L;6785;;;;N;;;;;
2F8E1;CJK COMPATIBILITY IDEOGRAPH-2F8E1;Lo;0;L;6852;;;;N;;;;;
2F8E2;CJK COMPATIBILITY IDEOGRAPH-2F8E2;Lo;0;L;6885;;;;N;;;;;
2F8E3;CJK COMPATIBILITY IDEOGRAPH-2F8E3;Lo;0;L;2346D;;;;N;;;;;
2F8E4;CJK COMPATIBILITY IDEOGRAPH-2F8E4;Lo;0;L;688E;;;;N;;;;;
2F8E5;CJK COMPATIBILITY IDEOGRAPH-2F8E5;Lo;0;L;681F;;;;N;;;;;
2F8E6;CJK COMPATIBILITY IDEOGRAPH-2F8E6;Lo;0;L;6914;;;;N;;;;;
2F8E7;CJK COMPATIBILITY IDEOGRAPH-2F8E7;Lo;0;L;3B9D;;;;N;;;;;
2F8E8;CJK COMPATIBILITY IDEOGRAPH-2F8E8;Lo;0;L;6942;;;;N;;;;;
2F8E9;CJK COMPATIBILITY IDEOGRAPH-2F8E9;Lo;0;L;69A3;;;;N;;;;;
2F8EA;CJK COMPATIBILITY IDEOGRAPH-2F8EA;Lo;0;L;69EA;;;;N;;;;;
2F8EB;CJK COMPATIBILITY IDEOGRAPH-2F8EB;Lo;0;L;6AA8;;;;N;;;;;
2F8EC;CJK COMPATIBILITY IDEOGRAPH-2F8EC;Lo;0;L;236A3;;;;N;;;;;
2F8ED;CJK COMPATIBILITY IDEOGRAPH-2F8ED;Lo;0;L;6ADB;;;;N;;;;;
2F8EE;CJK COMPATIBILITY IDEOGRAPH-2F8EE;Lo;0;L;3C18;;;;N;;;;;
2F8EF;CJK COMPATIBILITY IDEOGRAPH-2F8EF;Lo;0;L;6B21;;;;N;;;;;
2F8F0;CJK COMPATIBILITY IDEOGRAPH-2F8F0;Lo;0;L;238A7;;;;N;;;;;
2F8F1;CJK COMPATIBILITY IDEOGRAPH-2F8F1;Lo;0;L;6B54;;;;N;;;;;
2F8F2;CJK COMPATIBILITY IDEOGRAPH-2F8F2;Lo;0;L;3C4E;;;;N;;;;;
2F8F3;CJK COMPATIBILITY IDEOGRAPH-2F8F3;Lo;0;L;6B72;;;;N;;;;;
2F8F4;CJK COMPATIBILITY IDEOGRAPH-2F8F4;Lo;0;L;6B9F;;;;N;;;;;
2F8F5;CJK COMPATIBILITY IDEOGRAPH-2F8F5;Lo;0;L;6BBA;;;;N;;;;;
2F8F6;CJK COMPATIBILITY IDEOGRAPH-2F8F6;Lo;0;L;6BBB;;;;N;;;;;
2F8F7;CJK COMPATIBILITY IDEOGRAPH-2F8F7;Lo;0;L;23A8D;;;;N;;;;;
2F8F8;CJK COMPATIBILITY IDEOGRAPH-2F8F8;Lo;0;L;21D0B;;;;N;;;;;
2F8F9;CJK COMPATIBILITY IDEOGRAPH-2F8F9;Lo;0;L;23AFA;;;;N;;;;;
2F8FA;CJK COMPATIBILITY IDEOGRAPH-2F8FA;Lo;0;L;6C4E;;;;N;;;;;
2F8FB;CJK COMPATIBILITY IDEOGRAPH-2F8FB;Lo;0;L;23CBC;;;;N;;;;;
2F8FC;CJK COMPATIBILITY IDEOGRAPH-2F8FC;Lo;0;L;6CBF;;;;N;;;;;
2F8FD;CJK COMPATIBILITY IDEOGRAPH-2F8FD;Lo;0;L;6CCD;;;;N;;;;;
2F8FE;CJK COMPATIBILITY IDEOGRAPH-2F8FE;Lo;0;L;6C67;;;;N;;;;;
2F8FF;CJK COMPATIBILITY IDEOGRAPH-2F8FF;Lo;0;L;6D16;;;;N;;;;;
2F900;CJK COMPATIBILITY IDEOGRAPH-2F900;Lo;0;L;6D3E;;;;N;;;;;
2F901;CJK COMPATIBILITY IDEOGRAPH-2F901;Lo;0;L;6D77;;;;N;;;;;
2F902;CJK COMPATIBILITY IDEOGRAPH-2F902;Lo;0;L;6D41;;;;N;;;;;
2F903;CJK COMPATIBILITY IDEOGRAPH-2F903;Lo;0;L;6D69;;;;N;;;;;
2F904;CJK COMPATIBILITY IDEOGRAPH-2F904;Lo;0;L;6D78;;;;N;;;;;
2F905;CJK COMPATIBILITY IDEOGRAPH-2F905;Lo;0;L;6D85;;;;N;;;;;
2F906;CJK COMPATIBILITY IDEOGRAPH-2F906;Lo;0;L;23D1E;;;;N;;;;;
2F907;CJK COMPATIBILITY IDEOGRAPH-2F907;Lo;0;L;6D34;;;;N;;;;;
2F908;CJK COMPATIBILITY IDEOGRAPH-2F908;Lo;0;L;6E2F;;;;N;;;;;
2F909;CJK COMPATIBILITY IDEOGRAPH-2F909;Lo;0;L;6E6E;;;;N;;;;;
2F90A;CJK COMPATIBILITY IDEOGRAPH-2F90A;Lo;0;L;3D33;;;;N;;;;;
2F90B;CJK COMPATIBILITY IDEOGRAPH-2F90B;Lo;0;L;6ECB;;;;N;;;;;
2F90C;CJK COMPATIBILITY IDEOGRAPH-2F90C;Lo;0;L;6EC7;;;;N;;;;;
2F90D;CJK COMPATIBILITY IDEOGRAPH-2F90D;Lo;0;L;23ED1;;;;N;;;;;
2F90E;CJK COMPATIBILITY IDEOGRAPH-2F90E;Lo;0;L;6DF9;;;;N;;;;;
2F90F;CJK COMPATIBILITY IDEOGRAPH-2F90F;Lo;0;L;6F6E;;;;N;;;;;
2F910;CJK COMPATIBILITY IDEOGRAPH-2F910;Lo;0;L;23F5E;;;;N;;;;;
2F911;CJK COMPATIBILITY IDEOGRAPH-2F911;Lo;0;L;23F8E;;;;N;;;;;
2F912;CJK COMPATIBILITY IDEOGRAPH-2F912;Lo;0;L;6FC6;;;;N;;;;;
2F913;CJK COMPATIBILITY IDEOGRAPH-2F913;Lo;0;L;7039;;;;N;;;;;
2F914;CJK COMPATIBILITY IDEOGRAPH-2F914;Lo;0;L;701E;;;;N;;;;;
2F915;CJK COMPATIBILITY IDEOGRAPH-2F915;Lo;0;L;701B;;;;N;;;;;
2F916;CJK COMPATIBILITY IDEOGRAPH-2F916;Lo;0;L;3D96;;;;N;;;;;
2F917;CJK COMPATIBILITY IDEOGRAPH-2F917;Lo;0;L;704A;;;;N;;;;;
2F918;CJK COMPATIBILITY IDEOGRAPH-2F918;Lo;0;L;707D;;;;N;;;;;
2F919;CJK COMPATIBILITY IDEOGRAPH-2F919;Lo;0;L;7077;;;;N;;;;;
2F91A;CJK COMPATIBILITY IDEOGRAPH-2F91A;Lo;0;L;70AD;;;;N;;;;;
2F91B;CJK COMPATIBILITY IDEOGRAPH-2F91B;Lo;0;L;20525;;;;N;;;;;
2F91C;CJK COMPATIBILITY IDEOGRAPH-2F91C;Lo;0;L;7145;;;;N;;;;;
2F91D;CJK COMPATIBILITY IDEOGRAPH-2F91D;Lo;0;L;24263;;;;N;;;;;
2F91E;CJK COMPATIBILITY IDEOGRAPH-2F91E;Lo;0;L;719C;;;;N;;;;;
2F91F;CJK COMPATIBILITY IDEOGRAPH-2F91F;Lo;0;L;243AB;;;;N;;;;;
2F920;CJK COMPATIBILITY IDEOGRAPH-2F920;Lo;0;L;7228;;;;N;;;;;
2F921;CJK COMPATIBILITY IDEOGRAPH-2F921;Lo;0;L;7235;;;;N;;;;;
2F922;CJK COMPATIBILITY IDEOGRAPH-2F922;Lo;0;L;7250;;;;N;;;;;
2F923;CJK COMPATIBILITY IDEOGRAPH-2F923;Lo;0;L;24608;;;;N;;;;;
2F924;CJK COMPATIBILITY IDEOGRAPH-2F924;Lo;0;L;7280;;;;N;;;;;
2F925;CJK COMPATIBILITY IDEOGRAPH-2F925;Lo;0;L;7295;;;;N;;;;;
2F926;CJK COMPATIBILITY IDEOGRAPH-2F926;Lo;0;L;24735;;;;N;;;;;
2F927;CJK COMPATIBILITY IDEOGRAPH-2F927;Lo;0;L;24814;;;;N;;;;;
2F928;CJK COMPATIBILITY IDEOGRAPH-2F928;Lo;0;L;737A;;;;N;;;;;
2F929;CJK COMPATIBILITY IDEOGRAPH-2F929;Lo;0;L;738B;;;;N;;;;;
2F92A;CJK COMPATIBILITY IDEOGRAPH-2F92A;Lo;0;L;3EAC;;;;N;;;;;
2F92B;CJK COMPATIBILITY IDEOGRAPH-2F92B;Lo;0;L;73A5;;;;N;;;;;
2F92C;CJK COMPATIBILITY IDEOGRAPH-2F92C;Lo;0;L;3EB8;;;;N;;;;;
2F92D;CJK COMPATIBILITY IDEOGRAPH-2F92D;Lo;0;L;3EB8;;;;N;;;;;
2F92E;CJK COMPATIBILITY IDEOGRAPH-2F92E;Lo;0;L;7447;;;;N;;;;;
2F92F;CJK COMPATIBILITY IDEOGRAPH-2F92F;Lo;0;L;745C;;;;N;;;;;
2F930;CJK COMPATIBILITY IDEOGRAPH-2F930;Lo;0;L;7471;;;;N;;;;;
2F931;CJK COMPATIBILITY IDEOGRAPH-2F931;Lo;0;L;7485;;;;N;;;;;
2F932;CJK COMPATIBILITY IDEOGRAPH-2F932;Lo;0;L;74CA;;;;N;;;;;
2F933;CJK COMPATIBILITY IDEOGRAPH-2F933;Lo;0;L;3F1B;;;;N;;;;;
2F934;CJK COMPATIBILITY IDEOGRAPH-2F934;Lo;0;L;7524;;;;N;;;;;
2F935;CJK COMPATIBILITY IDEOGRAPH-2F935;Lo;0;L;24C36;;;;N;;;;;
2F936;CJK COMPATIBILITY IDEOGRAPH-2F936;Lo;0;L;753E;;;;N;;;;;
2F937;CJK COMPATIBILITY IDEOGRAPH-2F937;Lo;0;L;24C92;;;;N;;;;;
2F938;CJK COMPATIBILITY IDEOGRAPH-2F938;Lo;0;L;7570;;;;N;;;;;
2F939;CJK COMPATIBILITY IDEOGRAPH-2F939;Lo;0;L;2219F;;;;N;;;;;
2F93A;CJK COMPATIBILITY IDEOGRAPH-2F93A;Lo;0;L;7610;;;;N;;;;;
2F93B;CJK COMPATIBILITY IDEOGRAPH-2F93B;Lo;0;L;24FA1;;;;N;;;;;
2F93C;CJK COMPATIBILITY IDEOGRAPH-2F93C;Lo;0;L;24FB8;;;;N;;;;;
2F93D;CJK COMPATIBILITY IDEOGRAPH-2F93D;Lo;0;L;25044;;;;N;;;;;
2F93E;CJK COMPATIBILITY IDEOGRAPH-2F93E;Lo;0;L;3FFC;;;;N;;;;;
2F93F;CJK COMPATIBILITY IDEOGRAPH-2F93F;Lo;0;L;4008;;;;N;;;;;
2F940;CJK COMPATIBILITY IDEOGRAPH-2F940;Lo;0;L;76F4;;;;N;;;;;
2F941;CJK COMPATIBILITY IDEOGRAPH-2F941;Lo;0;L;250F3;;;;N;;;;;
2F942;CJK COMPATIBILITY IDEOGRAPH-2F942;Lo;0;L;250F2;;;;N;;;;;
2F943;CJK COMPATIBILITY IDEOGRAPH-2F943;Lo;0;L;25119;;;;N;;;;;
2F944;CJK COMPATIBILITY IDEOGRAPH-2F944;Lo;0;L;25133;;;;N;;;;;
2F945;CJK COMPATIBILITY IDEOGRAPH-2F945;Lo;0;L;771E;;;;N;;;;;
2F946;CJK COMPATIBILITY IDEOGRAPH-2F946;Lo;0;L;771F;;;;N;;;;;
2F947;CJK COMPATIBILITY IDEOGRAPH-2F947;Lo;0;L;771F;;;;N;;;;;
2F948;CJK COMPATIBILITY IDEOGRAPH-2F948;Lo;0;L;774A;;;;N;;;;;
2F949;CJK COMPATIBILITY IDEOGRAPH-2F949;Lo;0;L;4039;;;;N;;;;;
2F94A;CJK COMPATIBILITY IDEOGRAPH-2F94A;Lo;0;L;778B;;;;N;;;;;
2F94B;CJK COMPATIBILITY IDEOGRAPH-2F94B;Lo;0;L;4046;;;;N;;;;;
2F94C;CJK COMPATIBILITY IDEOGRAPH-2F94C;Lo;0;L;4096;;;;N;;;;;
2F94D;CJK COMPATIBILITY IDEOGRAPH-2F94D;Lo;0;L;2541D;;;;N;;;;;
2F94E;CJK COMPATIBILITY IDEOGRAPH-2F94E;Lo;0;L;784E;;;;N;;;;;
2F94F;CJK COMPATIBILITY IDEOGRAPH-2F94F;Lo;0;L;788C;;;;N;;;;;
2F950;CJK COMPATIBILITY IDEOGRAPH-2F950;Lo;0;L;78CC;;;;N;;;;;
2F951;CJK COMPATIBILITY IDEOGRAPH-2F951;Lo;0;L;40E3;;;;N;;;;;
2F952;CJK COMPATIBILITY IDEOGRAPH-2F952;Lo;0;L;25626;;;;N;;;;;
2F953;CJK COMPATIBILITY IDEOGRAPH-2F953;Lo;0;L;7956;;;;N;;;;;
2F954;CJK COMPATIBILITY IDEOGRAPH-2F954;Lo;0;L;2569A;;;;N;;;;;
2F955;CJK COMPATIBILITY IDEOGRAPH-2F955;Lo;0;L;256C5;;;;N;;;;;
2F956;CJK COMPATIBILITY IDEOGRAPH-2F956;Lo;0;L;798F;;;;N;;;;;
2F957;CJK COMPATIBILITY IDEOGRAPH-2F957;Lo;0;L;79EB;;;;N;;;;;
2F958;CJK COMPATIBILITY IDEOGRAPH-2F958;Lo;0;L;412F;;;;N;;;;;
2F959;CJK COMPATIBILITY IDEOGRAPH-2F959;Lo;0;L;7A40;;;;N;;;;;
2F95A;CJK COMPATIBILITY IDEOGRAPH-2F95A;Lo;0;L;7A4A;;;;N;;;;;
2F95B;CJK COMPATIBILITY IDEOGRAPH-2F95B;Lo;0;L;7A4F;;;;N;;;;;
2F95C;CJK COMPATIBILITY IDEOGRAPH-2F95C;Lo;0;L;2597C;;;;N;;;;;
2F95D;CJK COMPATIBILITY IDEOGRAPH-2F95D;Lo;0;L;25AA7;;;;N;;;;;
2F95E;CJK COMPATIBILITY IDEOGRAPH-2F95E;Lo;0;L;25AA7;;;;N;;;;;
2F95F;CJK COMPATIBILITY IDEOGRAPH-2F95F;Lo;0;L;7AEE;;;;N;;;;;
2F960;CJK COMPATIBILITY IDEOGRAPH-2F960;Lo;0;L;4202;;;;N;;;;;
2F961;CJK COMPATIBILITY IDEOGRAPH-2F961;Lo;0;L;25BAB;;;;N;;;;;
2F962;CJK COMPATIBILITY IDEOGRAPH-2F962;Lo;0;L;7BC6;;;;N;;;;;
2F963;CJK COMPATIBILITY IDEOGRAPH-2F963;Lo;0;L;7BC9;;;;N;;;;;
2F964;CJK COMPATIBILITY IDEOGRAPH-2F964;Lo;0;L;4227;;;;N;;;;;
2F965;CJK COMPATIBILITY IDEOGRAPH-2F965;Lo;0;L;25C80;;;;N;;;;;
2F966;CJK COMPATIBILITY IDEOGRAPH-2F966;Lo;0;L;7CD2;;;;N;;;;;
2F967;CJK COMPATIBILITY IDEOGRAPH-2F967;Lo;0;L;42A0;;;;N;;;;;
2F968;CJK COMPATIBILITY IDEOGRAPH-2F968;Lo;0;L;7CE8;;;;N;;;;;
2F969;CJK COMPATIBILITY IDEOGRAPH-2F969;Lo;0;L;7CE3;;;;N;;;;;
2F96A;CJK COMPATIBILITY IDEOGRAPH-2F96A;Lo;0;L;7D00;;;;N;;;;;
2F96B;CJK COMPATIBILITY IDEOGRAPH-2F96B;Lo;0;L;25F86;;;;N;;;;;
2F96C;CJK COMPATIBILITY IDEOGRAPH-2F96C;Lo;0;L;7D63;;;;N;;;;;
2F96D;CJK COMPATIBILITY IDEOGRAPH-2F96D;Lo;0;L;4301;;;;N;;;;;
2F96E;CJK COMPATIBILITY IDEOGRAPH-2F96E;Lo;0;L;7DC7;;;;N;;;;;
2F96F;CJK COMPATIBILITY IDEOGRAPH-2F96F;Lo;0;L;7E02;;;;N;;;;;
2F970;CJK COMPATIBILITY IDEOGRAPH-2F970;Lo;0;L;7E45;;;;N;;;;;
2F971;CJK COMPATIBILITY IDEOGRAPH-2F971;Lo;0;L;4334;;;;N;;;;;
2F972;CJK COMPATIBILITY IDEOGRAPH-2F972;Lo;0;L;26228;;;;N;;;;;
2F973;CJK COMPATIBILITY IDEOGRAPH-2F973;Lo;0;L;26247;;;;N;;;;;
2F974;CJK COMPATIBILITY IDEOGRAPH-2F974;Lo;0;L;4359;;;;N;;;;;
2F975;CJK COMPATIBILITY IDEOGRAPH-2F975;Lo;0;L;262D9;;;;N;;;;;
2F976;CJK COMPATIBILITY IDEOGRAPH-2F976;Lo;0;L;7F7A;;;;N;;;;;
2F977;CJK COMPATIBILITY IDEOGRAPH-2F977;Lo;0;L;2633E;;;;N;;;;;
2F978;CJK COMPATIBILITY IDEOGRAPH-2F978;Lo;0;L;7F95;;;;N;;;;;
2F979;CJK COMPATIBILITY IDEOGRAPH-2F979;Lo;0;L;7FFA;;;;N;;;;;
2F97A;CJK COMPATIBILITY IDEOGRAPH-2F97A;Lo;0;L;8005;;;;N;;;;;
2F97B;CJK COMPATIBILITY IDEOGRAPH-2F97B;Lo;0;L;264DA;;;;N;;;;;
2F97C;CJK COMPATIBILITY IDEOGRAPH-2F97C;Lo;0;L;26523;;;;N;;;;;
2F97D;CJK COMPATIBILITY IDEOGRAPH-2F97D;Lo;0;L;8060;;;;N;;;;;
2F97E;CJK COMPATIBILITY IDEOGRAPH-2F97E;Lo;0;L;265A8;;;;N;;;;;
2F97F;CJK COMPATIBILITY IDEOGRAPH-2F97F;Lo;0;L;8070;;;;N;;;;;
2F980;CJK COMPATIBILITY IDEOGRAPH-2F980;Lo;0;L;2335F;;;;N;;;;;
2F981;CJK COMPATIBILITY IDEOGRAPH-2F981;Lo;0;L;43D5;;;;N;;;;;
2F982;CJK COMPATIBILITY IDEOGRAPH-2F982;Lo;0;L;80B2;;;;N;;;;;
2F983;CJK COMPATIBILITY IDEOGRAPH-2F983;Lo;0;L;8103;;;;N;;;;;
2F984;CJK COMPATIBILITY IDEOGRAPH-2F984;Lo;0;L;440B;;;;N;;;;;
2F985;CJK COMPATIBILITY IDEOGRAPH-2F985;Lo;0;L;813E;;;;N;;;;;
2F986;CJK COMPATIBILITY IDEOGRAPH-2F986;Lo;0;L;5AB5;;;;N;;;;;
2F987;CJK COMPATIBILITY IDEOGRAPH-2F987;Lo;0;L;267A7;;;;N;;;;;
2F988;CJK COMPATIBILITY IDEOGRAPH-2F988;Lo;0;L;267B5;;;;N;;;;;
2F989;CJK COMPATIBILITY IDEOGRAPH-2F989;Lo;0;L;23393;;;;N;;;;;
2F98A;CJK COMPATIBILITY IDEOGRAPH-2F98A;Lo;0;L;2339C;;;;N;;;;;
2F98B;CJK COMPATIBILITY IDEOGRAPH-2F98B;Lo;0;L;8201;;;;N;;;;;
2F98C;CJK COMPATIBILITY IDEOGRAPH-2F98C;Lo;0;L;8204;;;;N;;;;;
2F98D;CJK COMPATIBILITY IDEOGRAPH-2F98D;Lo;0;L;8F9E;;;;N;;;;;
2F98E;CJK COMPATIBILITY IDEOGRAPH-2F98E;Lo;0;L;446B;;;;N;;;;;
2F98F;CJK COMPATIBILITY IDEOGRAPH-2F98F;Lo;0;L;8291;;;;N;;;;;
2F990;CJK COMPATIBILITY IDEOGRAPH-2F990;Lo;0;L;828B;;;;N;;;;;
2F991;CJK COMPATIBILITY IDEOGRAPH-2F991;Lo;0;L;829D;;;;N;;;;;
2F992;CJK COMPATIBILITY IDEOGRAPH-2F992;Lo;0;L;52B3;;;;N;;;;;
2F993;CJK COMPATIBILITY IDEOGRAPH-2F993;Lo;0;L;82B1;;;;N;;;;;
2F994;CJK COMPATIBILITY IDEOGRAPH-2F994;Lo;0;L;82B3;;;;N;;;;;
2F995;CJK COMPATIBILITY IDEOGRAPH-2F995;Lo;0;L;82BD;;;;N;;;;;
2F996;CJK COMPATIBILITY IDEOGRAPH-2F996;Lo;0;L;82E6;;;;N;;;;;
2F997;CJK COMPATIBILITY IDEOGRAPH-2F997;Lo;0;L;26B3C;;;;N;;;;;
2F998;CJK COMPATIBILITY IDEOGRAPH-2F998;Lo;0;L;82E5;;;;N;;;;;
2F999;CJK COMPATIBILITY IDEOGRAPH-2F999;Lo;0;L;831D;;;;N;;;;;
2F99A;CJK COMPATIBILITY IDEOGRAPH-2F99A;Lo;0;L;8363;;;;N;;;;;
2F99B;CJK COMPATIBILITY IDEOGRAPH-2F99B;Lo;0;L;83AD;;;;N;;;;;
2F99C;CJK COMPATIBILITY IDEOGRAPH-2F99C;Lo;0;L;8323;;;;N;;;;;
2F99D;CJK COMPATIBILITY IDEOGRAPH-2F99D;Lo;0;L;83BD;;;;N;;;;;
2F99E;CJK COMPATIBILITY IDEOGRAPH-2F99E;Lo;0;L;83E7;;;;N;;;;;
2F99F;CJK COMPATIBILITY IDEOGRAPH-2F99F;Lo;0;L;8457;;;;N;;;;;
2F9A0;CJK COMPATIBILITY IDEOGRAPH-2F9A0;Lo;0;L;8353;;;;N;;;;;
2F9A1;CJK COMPATIBILITY IDEOGRAPH-2F9A1;Lo;0;L;83CA;;;;N;;;;;
2F9A2;CJK COMPATIBILITY IDEOGRAPH-2F9A2;Lo;0;L;83CC;;;;N;;;;;
2F9A3;CJK COMPATIBILITY IDEOGRAPH-2F9A3;Lo;0;L;83DC;;;;N;;;;;
2F9A4;CJK COMPATIBILITY IDEOGRAPH-2F9A4;Lo;0;L;26C36;;;;N;;;;;
2F9A5;CJK COMPATIBILITY IDEOGRAPH-2F9A5;Lo;0;L;26D6B;;;;N;;;;;
2F9A6;CJK COMPATIBILITY IDEOGRAPH-2F9A6;Lo;0;L;26CD5;;;;N;;;;;
2F9A7;CJK COMPATIBILITY IDEOGRAPH-2F9A7;Lo;0;L;452B;;;;N;;;;;
2F9A8;CJK COMPATIBILITY IDEOGRAPH-2F9A8;Lo;0;L;84F1;;;;N;;;;;
2F9A9;CJK COMPATIBILITY IDEOGRAPH-2F9A9;Lo;0;L;84F3;;;;N;;;;;
2F9AA;CJK COMPATIBILITY IDEOGRAPH-2F9AA;Lo;0;L;8516;;;;N;;;;;
2F9AB;CJK COMPATIBILITY IDEOGRAPH-2F9AB;Lo;0;L;273CA;;;;N;;;;;
2F9AC;CJK COMPATIBILITY IDEOGRAPH-2F9AC;Lo;0;L;8564;;;;N;;;;;
2F9AD;CJK COMPATIBILITY IDEOGRAPH-2F9AD;Lo;0;L;26F2C;;;;N;;;;;
2F9AE;CJK COMPATIBILITY IDEOGRAPH-2F9AE;Lo;0;L;455D;;;;N;;;;;
2F9AF;CJK COMPATIBILITY IDEOGRAPH-2F9AF;Lo;0;L;4561;;;;N;;;;;
2F9B0;CJK COMPATIBILITY IDEOGRAPH-2F9B0;Lo;0;L;26FB1;;;;N;;;;;
2F9B1;CJK COMPATIBILITY IDEOGRAPH-2F9B1;Lo;0;L;270D2;;;;N;;;;;
2F9B2;CJK COMPATIBILITY IDEOGRAPH-2F9B2;Lo;0;L;456B;;;;N;;;;;
2F9B3;CJK COMPATIBILITY IDEOGRAPH-2F9B3;Lo;0;L;8650;;;;N;;;;;
2F9B4;CJK COMPATIBILITY IDEOGRAPH-2F9B4;Lo;0;L;865C;;;;N;;;;;
2F9B5;CJK COMPATIBILITY IDEOGRAPH-2F9B5;Lo;0;L;8667;;;;N;;;;;
2F9B6;CJK COMPATIBILITY IDEOGRAPH-2F9B6;Lo;0;L;8669;;;;N;;;;;
2F9B7;CJK COMPATIBILITY IDEOGRAPH-2F9B7;Lo;0;L;86A9;;;;N;;;;;
2F9B8;CJK COMPATIBILITY IDEOGRAPH-2F9B8;Lo;0;L;8688;;;;N;;;;;
2F9B9;CJK COMPATIBILITY IDEOGRAPH-2F9B9;Lo;0;L;870E;;;;N;;;;;
2F9BA;CJK COMPATIBILITY IDEOGRAPH-2F9BA;Lo;0;L;86E2;;;;N;;;;;
2F9BB;CJK COMPATIBILITY IDEOGRAPH-2F9BB;Lo;0;L;8779;;;;N;;;;;
2F9BC;CJK COMPATIBILITY IDEOGRAPH-2F9BC;Lo;0;L;8728;;;;N;;;;;
2F9BD;CJK COMPATIBILITY IDEOGRAPH-2F9BD;Lo;0;L;876B;;;;N;;;;;
2F9BE;CJK COMPATIBILITY IDEOGRAPH-2F9BE;Lo;0;L;8786;;;;N;;;;;
2F9BF;CJK COMPATIBILITY IDEOGRAPH-2F9BF;Lo;0;L;45D7;;;;N;;;;;
2F9C0;CJK COMPATIBILITY IDEOGRAPH-2F9C0;Lo;0;L;87E1;;;;N;;;;;
2F9C1;CJK COMPATIBILITY IDEOGRAPH-2F9C1;Lo;0;L;8801;;;;N;;;;;
2F9C2;CJK COMPATIBILITY IDEOGRAPH-2F9C2;Lo;0;L;45F9;;;;N;;;;;
2F9C3;CJK COMPATIBILITY IDEOGRAPH-2F9C3;Lo;0;L;8860;;;;N;;;;;
2F9C4;CJK COMPATIBILITY IDEOGRAPH-2F9C4;Lo;0;L;8863;;;;N;;;;;
2F9C5;CJK COMPATIBILITY IDEOGRAPH-2F9C5;Lo;0;L;27667;;;;N;;;;;
2F9C6;CJK COMPATIBILITY IDEOGRAPH-2F9C6;Lo;0;L;88D7;;;;N;;;;;
2F9C7;CJK COMPATIBILITY IDEOGRAPH-2F9C7;Lo;0;L;88DE;;;;N;;;;;
2F9C8;CJK COMPATIBILITY IDEOGRAPH-2F9C8;Lo;0;L;4635;;;;N;;;;;
2F9C9;CJK COMPATIBILITY IDEOGRAPH-2F9C9;Lo;0;L;88FA;;;;N;;;;;
2F9CA;CJK COMPATIBILITY IDEOGRAPH-2F9CA;Lo;0;L;34BB;;;;N;;;;;
2F9CB;CJK COMPATIBILITY IDEOGRAPH-2F9CB;Lo;0;L;278AE;;;;N;;;;;
2F9CC;CJK COMPATIBILITY IDEOGRAPH-2F9CC;Lo;0;L;27966;;;;N;;;;;
2F9CD;CJK COMPATIBILITY IDEOGRAPH-2F9CD;Lo;0;L;46BE;;;;N;;;;;
2F9CE;CJK COMPATIBILITY IDEOGRAPH-2F9CE;Lo;0;L;46C7;;;;N;;;;;
2F9CF;CJK COMPATIBILITY IDEOGRAPH-2F9CF;Lo;0;L;8AA0;;;;N;;;;;
2F9D0;CJK COMPATIBILITY IDEOGRAPH-2F9D0;Lo;0;L;8AED;;;;N;;;;;
2F9D1;CJK COMPATIBILITY IDEOGRAPH-2F9D1;Lo;0;L;8B8A;;;;N;;;;;
2F9D2;CJK COMPATIBILITY IDEOGRAPH-2F9D2;Lo;0;L;8C55;;;;N;;;;;
2F9D3;CJK COMPATIBILITY IDEOGRAPH-2F9D3;Lo;0;L;27CA8;;;;N;;;;;
2F9D4;CJK COMPATIBILITY IDEOGRAPH-2F9D4;Lo;0;L;8CAB;;;;N;;;;;
2F9D5;CJK COMPATIBILITY IDEOGRAPH-2F9D5;Lo;0;L;8CC1;;;;N;;;;;
2F9D6;CJK COMPATIBILITY IDEOGRAPH-2F9D6;Lo;0;L;8D1B;;;;N;;;;;
2F9D7;CJK COMPATIBILITY IDEOGRAPH-2F9D7;Lo;0;L;8D77;;;;N;;;;;
2F9D8;CJK COMPATIBILITY IDEOGRAPH-2F9D8;Lo;0;L;27F2F;;;;N;;;;;
2F9D9;CJK COMPATIBILITY IDEOGRAPH-2F9D9;Lo;0;L;20804;;;;N;;;;;
2F9DA;CJK COMPATIBILITY IDEOGRAPH-2F9DA;Lo;0;L;8DCB;;;;N;;;;;
2F9DB;CJK COMPATIBILITY IDEOGRAPH-2F9DB;Lo;0;L;8DBC;;;;N;;;;;
2F9DC;CJK COMPATIBILITY IDEOGRAPH-2F9DC;Lo;0;L;8DF0;;;;N;;;;;
2F9DD;CJK COMPATIBILITY IDEOGRAPH-2F9DD;Lo;0;L;208DE;;;;N;;;;;
2F9DE;CJK COMPATIBILITY IDEOGRAPH-2F9DE;Lo;0;L;8ED4;;;;N;;;;;
2F9DF;CJK COMPATIBILITY IDEOGRAPH-2F9DF;Lo;0;L;8F38;;;;N;;;;;
2F9E0;CJK COMPATIBILITY IDEOGRAPH-2F9E0;Lo;0;L;285D2;;;;N;;;;;
2F9E1;CJK COMPATIBILITY IDEOGRAPH-2F9E1;Lo;0;L;285ED;;;;N;;;;;
2F9E2;CJK COMPATIBILITY IDEOGRAPH-2F9E2;Lo;0;L;9094;;;;N;;;;;
2F9E3;CJK COMPATIBILITY IDEOGRAPH-2F9E3;Lo;0;L;90F1;;;;N;;;;;
2F9E4;CJK COMPATIBILITY IDEOGRAPH-2F9E4;Lo;0;L;9111;;;;N;;;;;
2F9E5;CJK COMPATIBILITY IDEOGRAPH-2F9E5;Lo;0;L;2872E;;;;N;;;;;
2F9E6;CJK COMPATIBILITY IDEOGRAPH-2F9E6;Lo;0;L;911B;;;;N;;;;;
2F9E7;CJK COMPATIBILITY IDEOGRAPH-2F9E7;Lo;0;L;9238;;;;N;;;;;
2F9E8;CJK COMPATIBILITY IDEOGRAPH-2F9E8;Lo;0;L;92D7;;;;N;;;;;
2F9E9;CJK COMPATIBILITY IDEOGRAPH-2F9E9;Lo;0;L;92D8;;;;N;;;;;
2F9EA;CJK COMPATIBILITY IDEOGRAPH-2F9EA;Lo;0;L;927C;;;;N;;;;;
2F9EB;CJK COMPATIBILITY IDEOGRAPH-2F9EB;Lo;0;L;93F9;;;;N;;;;;
2F9EC;CJK COMPATIBILITY IDEOGRAPH-2F9EC;Lo;0;L;9415;;;;N;;;;;
2F9ED;CJK COMPATIBILITY IDEOGRAPH-2F9ED;Lo;0;L;28BFA;;;;N;;;;;
2F9EE;CJK COMPATIBILITY IDEOGRAPH-2F9EE;Lo;0;L;958B;;;;N;;;;;
2F9EF;CJK COMPATIBILITY IDEOGRAPH-2F9EF;Lo;0;L;4995;;;;N;;;;;
2F9F0;CJK COMPATIBILITY IDEOGRAPH-2F9F0;Lo;0;L;95B7;;;;N;;;;;
2F9F1;CJK COMPATIBILITY IDEOGRAPH-2F9F1;Lo;0;L;28D77;;;;N;;;;;
2F9F2;CJK COMPATIBILITY IDEOGRAPH-2F9F2;Lo;0;L;49E6;;;;N;;;;;
2F9F3;CJK COMPATIBILITY IDEOGRAPH-2F9F3;Lo;0;L;96C3;;;;N;;;;;
2F9F4;CJK COMPATIBILITY IDEOGRAPH-2F9F4;Lo;0;L;5DB2;;;;N;;;;;
2F9F5;CJK COMPATIBILITY IDEOGRAPH-2F9F5;Lo;0;L;9723;;;;N;;;;;
2F9F6;CJK COMPATIBILITY IDEOGRAPH-2F9F6;Lo;0;L;29145;;;;N;;;;;
2F9F7;CJK COMPATIBILITY IDEOGRAPH-2F9F7;Lo;0;L;2921A;;;;N;;;;;
2F9F8;CJK COMPATIBILITY IDEOGRAPH-2F9F8;Lo;0;L;4A6E;;;;N;;;;;
2F9F9;CJK COMPATIBILITY IDEOGRAPH-2F9F9;Lo;0;L;4A76;;;;N;;;;;
2F9FA;CJK COMPATIBILITY IDEOGRAPH-2F9FA;Lo;0;L;97E0;;;;N;;;;;
2F9FB;CJK COMPATIBILITY IDEOGRAPH-2F9FB;Lo;0;L;2940A;;;;N;;;;;
2F9FC;CJK COMPATIBILITY IDEOGRAPH-2F9FC;Lo;0;L;4AB2;;;;N;;;;;
2F9FD;CJK COMPATIBILITY IDEOGRAPH-2F9FD;Lo;0;L;29496;;;;N;;;;;
2F9FE;CJK COMPATIBILITY IDEOGRAPH-2F9FE;Lo;0;L;980B;;;;N;;;;;
2F9FF;CJK COMPATIBILITY IDEOGRAPH-2F9FF;Lo;0;L;980B;;;;N;;;;;
2FA00;CJK COMPATIBILITY IDEOGRAPH-2FA00;Lo;0;L;9829;;;;N;;;;;
2FA01;CJK COMPATIBILITY IDEOGRAPH-2FA01;Lo;0;L;295B6;;;;N;;;;;
2FA02;CJK COMPATIBILITY IDEOGRAPH-2FA02;Lo;0;L;98E2;;;;N;;;;;
2FA03;CJK COMPATIBILITY IDEOGRAPH-2FA03;Lo;0;L;4B33;;;;N;;;;;
2FA04;CJK COMPATIBILITY IDEOGRAPH-2FA04;Lo;0;L;9929;;;;N;;;;;
2FA05;CJK COMPATIBILITY IDEOGRAPH-2FA05;Lo;0;L;99A7;;;;N;;;;;
2FA06;CJK COMPATIBILITY IDEOGRAPH-2FA06;Lo;0;L;99C2;;;;N;;;;;
2FA07;CJK COMPATIBILITY IDEOGRAPH-2FA07;Lo;0;L;99FE;;;;N;;;;;
2FA08;CJK COMPATIBILITY IDEOGRAPH-2FA08;Lo;0;L;4BCE;;;;N;;;;;
2FA09;CJK COMPATIBILITY IDEOGRAPH-2FA09;Lo;0;L;29B30;;;;N;;;;;
2FA0A;CJK COMPATIBILITY IDEOGRAPH-2FA0A;Lo;0;L;9B12;;;;N;;;;;
2FA0B;CJK COMPATIBILITY IDEOGRAPH-2FA0B;Lo;0;L;9C40;;;;N;;;;;
2FA0C;CJK COMPATIBILITY IDEOGRAPH-2FA0C;Lo;0;L;9CFD;;;;N;;;;;
2FA0D;CJK COMPATIBILITY IDEOGRAPH-2FA0D;Lo;0;L;4CCE;;;;N;;;;;
2FA0E;CJK COMPATIBILITY IDEOGRAPH-2FA0E;Lo;0;L;4CED;;;;N;;;;;
2FA0F;CJK COMPATIBILITY IDEOGRAPH-2FA0F;Lo;0;L;9D67;;;;N;;;;;
2FA10;CJK COMPATIBILITY IDEOGRAPH-2FA10;Lo;0;L;2A0CE;;;;N;;;;;
2FA11;CJK COMPATIBILITY IDEOGRAPH-2FA11;Lo;0;L;4CF8;;;;N;;;;;
2FA12;CJK COMPATIBILITY IDEOGRAPH-2FA12;Lo;0;L;2A105;;;;N;;;;;
2FA13;CJK COMPATIBILITY IDEOGRAPH-2FA13;Lo;0;L;2A20E;;;;N;;;;;
2FA14;CJK COMPATIBILITY IDEOGRAPH-2FA14;Lo;0;L;2A291;;;;N;;;;;
2FA15;CJK COMPATIBILITY IDEOGRAPH-2FA15;Lo;0;L;9EBB;;;;N;;;;;
2FA16;CJK COMPATIBILITY IDEOGRAPH-2FA16;Lo;0;L;4D56;;;;N;;;;;
2FA17;CJK COMPATIBILITY IDEOGRAPH-2FA17;Lo;0;L;9EF9;;;;N;;;;;
2FA18;CJK COMPATIBILITY IDEOGRAPH-2FA18;Lo;0;L;9EFE;;;;N;;;;;
2FA19;CJK COMPATIBILITY IDEOGRAPH-2FA19;Lo;0;L;9F05;;;;N;;;;;
2FA1A;CJK COMPATIBILITY IDEOGRAPH-2FA1A;Lo;0;L;9F0F;;;;N;;;;;
2FA1B;CJK COMPATIBILITY IDEOGRAPH-2FA1B;Lo;0;L;9F16;;;;N;;;;;
2FA1C;CJK COMPATIBILITY IDEOGRAPH-2FA1C;Lo;0;L;9F3B;;;;N;;;;;
2FA1D;CJK COMPATIBILITY IDEOGRAPH-2FA1D;Lo;0;L;2A600;;;;N;;;;;
E0001;LANGUAGE TAG;Cf;0;BN;;;;;N;;;;;
E0020;TAG SPACE;Cf;0;BN;;;;;N;;;;;
E0021;TAG EXCLAMATION MARK;Cf;0;BN;;;;;N;;;;;
E0022;TAG QUOTATION MARK;Cf;0;BN;;;;;N;;;;;
E0023;TAG NUMBER SIGN;Cf;0;BN;;;;;N;;;;;
E0024;TAG DOLLAR SIGN;Cf;0;BN;;;;;N;;;;;
E0025;TAG PERCENT SIGN;Cf;0;BN;;;;;N;;;;;
E0026;TAG AMPERSAND;Cf;0;BN;;;;;N;;;;;
E0027;TAG APOSTROPHE;Cf;0;BN;;;;;N;;;;;
E0028;TAG LEFT PARENTHESIS;Cf;0;BN;;;;;N;;;;;
E0029;TAG RIGHT PARENTHESIS;Cf;0;BN;;;;;N;;;;;
E002A;TAG ASTERISK;Cf;0;BN;;;;;N;;;;;
E002B;TAG PLUS SIGN;Cf;0;BN;;;;;N;;;;;
E002C;TAG COMMA;Cf;0;BN;;;;;N;;;;;
E002D;TAG HYPHEN-MINUS;Cf;0;BN;;;;;N;;;;;
E002E;TAG FULL STOP;Cf;0;BN;;;;;N;;;;;
E002F;TAG SOLIDUS;Cf;0;BN;;;;;N;;;;;
E0030;TAG DIGIT ZERO;Cf;0;BN;;;;;N;;;;;
E0031;TAG DIGIT ONE;Cf;0;BN;;;;;N;;;;;
E0032;TAG DIGIT TWO;Cf;0;BN;;;;;N;;;;;
E0033;TAG DIGIT THREE;Cf;0;BN;;;;;N;;;;;
E0034;TAG DIGIT FOUR;Cf;0;BN;;;;;N;;;;;
E0035;TAG DIGIT FIVE;Cf;0;BN;;;;;N;;;;;
E0036;TAG DIGIT SIX;Cf;0;BN;;;;;N;;;;;
E0037;TAG DIGIT SEVEN;Cf;0;BN;;;;;N;;;;;
E0038;TAG DIGIT EIGHT;Cf;0;BN;;;;;N;;;;;
E0039;TAG DIGIT NINE;Cf;0;BN;;;;;N;;;;;
E003A;TAG COLON;Cf;0;BN;;;;;N;;;;;
E003B;TAG SEMICOLON;Cf;0;BN;;;;;N;;;;;
E003C;TAG LESS-THAN SIGN;Cf;0;BN;;;;;N;;;;;
E003D;TAG EQUALS SIGN;Cf;0;BN;;;;;N;;;;;
E003E;TAG GREATER-THAN SIGN;Cf;0;BN;;;;;N;;;;;
E003F;TAG QUESTION MARK;Cf;0;BN;;;;;N;;;;;
E0040;TAG COMMERCIAL AT;Cf;0;BN;;;;;N;;;;;
E0041;TAG LATIN CAPITAL LETTER A;Cf;0;BN;;;;;N;;;;;
E0042;TAG LATIN CAPITAL LETTER B;Cf;0;BN;;;;;N;;;;;
E0043;TAG LATIN CAPITAL LETTER C;Cf;0;BN;;;;;N;;;;;
E0044;TAG LATIN CAPITAL LETTER D;Cf;0;BN;;;;;N;;;;;
E0045;TAG LATIN CAPITAL LETTER E;Cf;0;BN;;;;;N;;;;;
E0046;TAG LATIN CAPITAL LETTER F;Cf;0;BN;;;;;N;;;;;
E0047;TAG LATIN CAPITAL LETTER G;Cf;0;BN;;;;;N;;;;;
E0048;TAG LATIN CAPITAL LETTER H;Cf;0;BN;;;;;N;;;;;
E0049;TAG LATIN CAPITAL LETTER I;Cf;0;BN;;;;;N;;;;;
E004A;TAG LATIN CAPITAL LETTER J;Cf;0;BN;;;;;N;;;;;
E004B;TAG LATIN CAPITAL LETTER K;Cf;0;BN;;;;;N;;;;;
E004C;TAG LATIN CAPITAL LETTER L;Cf;0;BN;;;;;N;;;;;
E004D;TAG LATIN CAPITAL LETTER M;Cf;0;BN;;;;;N;;;;;
E004E;TAG LATIN CAPITAL LETTER N;Cf;0;BN;;;;;N;;;;;
E004F;TAG LATIN CAPITAL LETTER O;Cf;0;BN;;;;;N;;;;;
E0050;TAG LATIN CAPITAL LETTER P;Cf;0;BN;;;;;N;;;;;
E0051;TAG LATIN CAPITAL LETTER Q;Cf;0;BN;;;;;N;;;;;
E0052;TAG LATIN CAPITAL LETTER R;Cf;0;BN;;;;;N;;;;;
E0053;TAG LATIN CAPITAL LETTER S;Cf;0;BN;;;;;N;;;;;
E0054;TAG LATIN CAPITAL LETTER T;Cf;0;BN;;;;;N;;;;;
E0055;TAG LATIN CAPITAL LETTER U;Cf;0;BN;;;;;N;;;;;
E0056;TAG LATIN CAPITAL LETTER V;Cf;0;BN;;;;;N;;;;;
E0057;TAG LATIN CAPITAL LETTER W;Cf;0;BN;;;;;N;;;;;
E0058;TAG LATIN CAPITAL LETTER X;Cf;0;BN;;;;;N;;;;;
E0059;TAG LATIN CAPITAL LETTER Y;Cf;0;BN;;;;;N;;;;;
E005A;TAG LATIN CAPITAL LETTER Z;Cf;0;BN;;;;;N;;;;;
E005B;TAG LEFT SQUARE BRACKET;Cf;0;BN;;;;;N;;;;;
E005C;TAG REVERSE SOLIDUS;Cf;0;BN;;;;;N;;;;;
E005D;TAG RIGHT SQUARE BRACKET;Cf;0;BN;;;;;N;;;;;
E005E;TAG CIRCUMFLEX ACCENT;Cf;0;BN;;;;;N;;;;;
E005F;TAG LOW LINE;Cf;0;BN;;;;;N;;;;;
E0060;TAG GRAVE ACCENT;Cf;0;BN;;;;;N;;;;;
E0061;TAG LATIN SMALL LETTER A;Cf;0;BN;;;;;N;;;;;
E0062;TAG LATIN SMALL LETTER B;Cf;0;BN;;;;;N;;;;;
E0063;TAG LATIN SMALL LETTER C;Cf;0;BN;;;;;N;;;;;
E0064;TAG LATIN SMALL LETTER D;Cf;0;BN;;;;;N;;;;;
E0065;TAG LATIN SMALL LETTER E;Cf;0;BN;;;;;N;;;;;
E0066;TAG LATIN SMALL LETTER F;Cf;0;BN;;;;;N;;;;;
E0067;TAG LATIN SMALL LETTER G;Cf;0;BN;;;;;N;;;;;
E0068;TAG LATIN SMALL LETTER H;Cf;0;BN;;;;;N;;;;;
E0069;TAG LATIN SMALL LETTER I;Cf;0;BN;;;;;N;;;;;
E006A;TAG LATIN SMALL LETTER J;Cf;0;BN;;;;;N;;;;;
E006B;TAG LATIN SMALL LETTER K;Cf;0;BN;;;;;N;;;;;
E006C;TAG LATIN SMALL LETTER L;Cf;0;BN;;;;;N;;;;;
E006D;TAG LATIN SMALL LETTER M;Cf;0;BN;;;;;N;;;;;
E006E;TAG LATIN SMALL LETTER N;Cf;0;BN;;;;;N;;;;;
E006F;TAG LATIN SMALL LETTER O;Cf;0;BN;;;;;N;;;;;
E0070;TAG LATIN SMALL LETTER P;Cf;0;BN;;;;;N;;;;;
E0071;TAG LATIN SMALL LETTER Q;Cf;0;BN;;;;;N;;;;;
E0072;TAG LATIN SMALL LETTER R;Cf;0;BN;;;;;N;;;;;
E0073;TAG LATIN SMALL LETTER S;Cf;0;BN;;;;;N;;;;;
E0074;TAG LATIN SMALL LETTER T;Cf;0;BN;;;;;N;;;;;
E0075;TAG LATIN SMALL LETTER U;Cf;0;BN;;;;;N;;;;;
E0076;TAG LATIN SMALL LETTER V;Cf;0;BN;;;;;N;;;;;
E0077;TAG LATIN SMALL LETTER W;Cf;0;BN;;;;;N;;;;;
E0078;TAG LATIN SMALL LETTER X;Cf;0;BN;;;;;N;;;;;
E0079;TAG LATIN SMALL LETTER Y;Cf;0;BN;;;;;N;;;;;
E007A;TAG LATIN SMALL LETTER Z;Cf;0;BN;;;;;N;;;;;
E007B;TAG LEFT CURLY BRACKET;Cf;0;BN;;;;;N;;;;;
E007C;TAG VERTICAL LINE;Cf;0;BN;;;;;N;;;;;
E007D;TAG RIGHT CURLY BRACKET;Cf;0;BN;;;;;N;;;;;
E007E;TAG TILDE;Cf;0;BN;;;;;N;;;;;
E007F;CANCEL TAG;Cf;0;BN;;;;;N;;;;;
E0100;VARIATION SELECTOR-17;Mn;0;NSM;;;;;N;;;;;
E0101;VARIATION SELECTOR-18;Mn;0;NSM;;;;;N;;;;;
E0102;VARIATION SELECTOR-19;Mn;0;NSM;;;;;N;;;;;
E0103;VARIATION SELECTOR-20;Mn;0;NSM;;;;;N;;;;;
E0104;VARIATION SELECTOR-21;Mn;0;NSM;;;;;N;;;;;
E0105;VARIATION SELECTOR-22;Mn;0;NSM;;;;;N;;;;;
E0106;VARIATION SELECTOR-23;Mn;0;NSM;;;;;N;;;;;
E0107;VARIATION SELECTOR-24;Mn;0;NSM;;;;;N;;;;;
E0108;VARIATION SELECTOR-25;Mn;0;NSM;;;;;N;;;;;
E0109;VARIATION SELECTOR-26;Mn;0;NSM;;;;;N;;;;;
E010A;VARIATION SELECTOR-27;Mn;0;NSM;;;;;N;;;;;
E010B;VARIATION SELECTOR-28;Mn;0;NSM;;;;;N;;;;;
E010C;VARIATION SELECTOR-29;Mn;0;NSM;;;;;N;;;;;
E010D;VARIATION SELECTOR-30;Mn;0;NSM;;;;;N;;;;;
E010E;VARIATION SELECTOR-31;Mn;0;NSM;;;;;N;;;;;
E010F;VARIATION SELECTOR-32;Mn;0;NSM;;;;;N;;;;;
E0110;VARIATION SELECTOR-33;Mn;0;NSM;;;;;N;;;;;
E0111;VARIATION SELECTOR-34;Mn;0;NSM;;;;;N;;;;;
E0112;VARIATION SELECTOR-35;Mn;0;NSM;;;;;N;;;;;
E0113;VARIATION SELECTOR-36;Mn;0;NSM;;;;;N;;;;;
E0114;VARIATION SELECTOR-37;Mn;0;NSM;;;;;N;;;;;
E0115;VARIATION SELECTOR-38;Mn;0;NSM;;;;;N;;;;;
E0116;VARIATION SELECTOR-39;Mn;0;NSM;;;;;N;;;;;
E0117;VARIATION SELECTOR-40;Mn;0;NSM;;;;;N;;;;;
E0118;VARIATION SELECTOR-41;Mn;0;NSM;;;;;N;;;;;
E0119;VARIATION SELECTOR-42;Mn;0;NSM;;;;;N;;;;;
E011A;VARIATION SELECTOR-43;Mn;0;NSM;;;;;N;;;;;
E011B;VARIATION SELECTOR-44;Mn;0;NSM;;;;;N;;;;;
E011C;VARIATION SELECTOR-45;Mn;0;NSM;;;;;N;;;;;
E011D;VARIATION SELECTOR-46;Mn;0;NSM;;;;;N;;;;;
E011E;VARIATION SELECTOR-47;Mn;0;NSM;;;;;N;;;;;
E011F;VARIATION SELECTOR-48;Mn;0;NSM;;;;;N;;;;;
E0120;VARIATION SELECTOR-49;Mn;0;NSM;;;;;N;;;;;
E0121;VARIATION SELECTOR-50;Mn;0;NSM;;;;;N;;;;;
E0122;VARIATION SELECTOR-51;Mn;0;NSM;;;;;N;;;;;
E0123;VARIATION SELECTOR-52;Mn;0;NSM;;;;;N;;;;;
E0124;VARIATION SELECTOR-53;Mn;0;NSM;;;;;N;;;;;
E0125;VARIATION SELECTOR-54;Mn;0;NSM;;;;;N;;;;;
E0126;VARIATION SELECTOR-55;Mn;0;NSM;;;;;N;;;;;
E0127;VARIATION SELECTOR-56;Mn;0;NSM;;;;;N;;;;;
E0128;VARIATION SELECTOR-57;Mn;0;NSM;;;;;N;;;;;
E0129;VARIATION SELECTOR-58;Mn;0;NSM;;;;;N;;;;;
E012A;VARIATION SELECTOR-59;Mn;0;NSM;;;;;N;;;;;
E012B;VARIATION SELECTOR-60;Mn;0;NSM;;;;;N;;;;;
E012C;VARIATION SELECTOR-61;Mn;0;NSM;;;;;N;;;;;
E012D;VARIATION SELECTOR-62;Mn;0;NSM;;;;;N;;;;;
E012E;VARIATION SELECTOR-63;Mn;0;NSM;;;;;N;;;;;
E012F;VARIATION SELECTOR-64;Mn;0;NSM;;;;;N;;;;;
E0130;VARIATION SELECTOR-65;Mn;0;NSM;;;;;N;;;;;
E0131;VARIATION SELECTOR-66;Mn;0;NSM;;;;;N;;;;;
E0132;VARIATION SELECTOR-67;Mn;0;NSM;;;;;N;;;;;
E0133;VARIATION SELECTOR-68;Mn;0;NSM;;;;;N;;;;;
E0134;VARIATION SELECTOR-69;Mn;0;NSM;;;;;N;;;;;
E0135;VARIATION SELECTOR-70;Mn;0;NSM;;;;;N;;;;;
E0136;VARIATION SELECTOR-71;Mn;0;NSM;;;;;N;;;;;
E0137;VARIATION SELECTOR-72;Mn;0;NSM;;;;;N;;;;;
E0138;VARIATION SELECTOR-73;Mn;0;NSM;;;;;N;;;;;
E0139;VARIATION SELECTOR-74;Mn;0;NSM;;;;;N;;;;;
E013A;VARIATION SELECTOR-75;Mn;0;NSM;;;;;N;;;;;
E013B;VARIATION SELECTOR-76;Mn;0;NSM;;;;;N;;;;;
E013C;VARIATION SELECTOR-77;Mn;0;NSM;;;;;N;;;;;
E013D;VARIATION SELECTOR-78;Mn;0;NSM;;;;;N;;;;;
E013E;VARIATION SELECTOR-79;Mn;0;NSM;;;;;N;;;;;
E013F;VARIATION SELECTOR-80;Mn;0;NSM;;;;;N;;;;;
E0140;VARIATION SELECTOR-81;Mn;0;NSM;;;;;N;;;;;
E0141;VARIATION SELECTOR-82;Mn;0;NSM;;;;;N;;;;;
E0142;VARIATION SELECTOR-83;Mn;0;NSM;;;;;N;;;;;
E0143;VARIATION SELECTOR-84;Mn;0;NSM;;;;;N;;;;;
E0144;VARIATION SELECTOR-85;Mn;0;NSM;;;;;N;;;;;
E0145;VARIATION SELECTOR-86;Mn;0;NSM;;;;;N;;;;;
E0146;VARIATION SELECTOR-87;Mn;0;NSM;;;;;N;;;;;
E0147;VARIATION SELECTOR-88;Mn;0;NSM;;;;;N;;;;;
E0148;VARIATION SELECTOR-89;Mn;0;NSM;;;;;N;;;;;
E0149;VARIATION SELECTOR-90;Mn;0;NSM;;;;;N;;;;;
E014A;VARIATION SELECTOR-91;Mn;0;NSM;;;;;N;;;;;
E014B;VARIATION SELECTOR-92;Mn;0;NSM;;;;;N;;;;;
E014C;VARIATION SELECTOR-93;Mn;0;NSM;;;;;N;;;;;
E014D;VARIATION SELECTOR-94;Mn;0;NSM;;;;;N;;;;;
E014E;VARIATION SELECTOR-95;Mn;0;NSM;;;;;N;;;;;
E014F;VARIATION SELECTOR-96;Mn;0;NSM;;;;;N;;;;;
E0150;VARIATION SELECTOR-97;Mn;0;NSM;;;;;N;;;;;
E0151;VARIATION SELECTOR-98;Mn;0;NSM;;;;;N;;;;;
E0152;VARIATION SELECTOR-99;Mn;0;NSM;;;;;N;;;;;
E0153;VARIATION SELECTOR-100;Mn;0;NSM;;;;;N;;;;;
E0154;VARIATION SELECTOR-101;Mn;0;NSM;;;;;N;;;;;
E0155;VARIATION SELECTOR-102;Mn;0;NSM;;;;;N;;;;;
E0156;VARIATION SELECTOR-103;Mn;0;NSM;;;;;N;;;;;
E0157;VARIATION SELECTOR-104;Mn;0;NSM;;;;;N;;;;;
E0158;VARIATION SELECTOR-105;Mn;0;NSM;;;;;N;;;;;
E0159;VARIATION SELECTOR-106;Mn;0;NSM;;;;;N;;;;;
E015A;VARIATION SELECTOR-107;Mn;0;NSM;;;;;N;;;;;
E015B;VARIATION SELECTOR-108;Mn;0;NSM;;;;;N;;;;;
E015C;VARIATION SELECTOR-109;Mn;0;NSM;;;;;N;;;;;
E015D;VARIATION SELECTOR-110;Mn;0;NSM;;;;;N;;;;;
E015E;VARIATION SELECTOR-111;Mn;0;NSM;;;;;N;;;;;
E015F;VARIATION SELECTOR-112;Mn;0;NSM;;;;;N;;;;;
E0160;VARIATION SELECTOR-113;Mn;0;NSM;;;;;N;;;;;
E0161;VARIATION SELECTOR-114;Mn;0;NSM;;;;;N;;;;;
E0162;VARIATION SELECTOR-115;Mn;0;NSM;;;;;N;;;;;
E0163;VARIATION SELECTOR-116;Mn;0;NSM;;;;;N;;;;;
E0164;VARIATION SELECTOR-117;Mn;0;NSM;;;;;N;;;;;
E0165;VARIATION SELECTOR-118;Mn;0;NSM;;;;;N;;;;;
E0166;VARIATION SELECTOR-119;Mn;0;NSM;;;;;N;;;;;
E0167;VARIATION SELECTOR-120;Mn;0;NSM;;;;;N;;;;;
E0168;VARIATION SELECTOR-121;Mn;0;NSM;;;;;N;;;;;
E0169;VARIATION SELECTOR-122;Mn;0;NSM;;;;;N;;;;;
E016A;VARIATION SELECTOR-123;Mn;0;NSM;;;;;N;;;;;
E016B;VARIATION SELECTOR-124;Mn;0;NSM;;;;;N;;;;;
E016C;VARIATION SELECTOR-125;Mn;0;NSM;;;;;N;;;;;
E016D;VARIATION SELECTOR-126;Mn;0;NSM;;;;;N;;;;;
E016E;VARIATION SELECTOR-127;Mn;0;NSM;;;;;N;;;;;
E016F;VARIATION SELECTOR-128;Mn;0;NSM;;;;;N;;;;;
E0170;VARIATION SELECTOR-129;Mn;0;NSM;;;;;N;;;;;
E0171;VARIATION SELECTOR-130;Mn;0;NSM;;;;;N;;;;;
E0172;VARIATION SELECTOR-131;Mn;0;NSM;;;;;N;;;;;
E0173;VARIATION SELECTOR-132;Mn;0;NSM;;;;;N;;;;;
E0174;VARIATION SELECTOR-133;Mn;0;NSM;;;;;N;;;;;
E0175;VARIATION SELECTOR-134;Mn;0;NSM;;;;;N;;;;;
E0176;VARIATION SELECTOR-135;Mn;0;NSM;;;;;N;;;;;
E0177;VARIATION SELECTOR-136;Mn;0;NSM;;;;;N;;;;;
E0178;VARIATION SELECTOR-137;Mn;0;NSM;;;;;N;;;;;
E0179;VARIATION SELECTOR-138;Mn;0;NSM;;;;;N;;;;;
E017A;VARIATION SELECTOR-139;Mn;0;NSM;;;;;N;;;;;
E017B;VARIATION SELECTOR-140;Mn;0;NSM;;;;;N;;;;;
E017C;VARIATION SELECTOR-141;Mn;0;NSM;;;;;N;;;;;
E017D;VARIATION SELECTOR-142;Mn;0;NSM;;;;;N;;;;;
E017E;VARIATION SELECTOR-143;Mn;0;NSM;;;;;N;;;;;
E017F;VARIATION SELECTOR-144;Mn;0;NSM;;;;;N;;;;;
E0180;VARIATION SELECTOR-145;Mn;0;NSM;;;;;N;;;;;
E0181;VARIATION SELECTOR-146;Mn;0;NSM;;;;;N;;;;;
E0182;VARIATION SELECTOR-147;Mn;0;NSM;;;;;N;;;;;
E0183;VARIATION SELECTOR-148;Mn;0;NSM;;;;;N;;;;;
E0184;VARIATION SELECTOR-149;Mn;0;NSM;;;;;N;;;;;
E0185;VARIATION SELECTOR-150;Mn;0;NSM;;;;;N;;;;;
E0186;VARIATION SELECTOR-151;Mn;0;NSM;;;;;N;;;;;
E0187;VARIATION SELECTOR-152;Mn;0;NSM;;;;;N;;;;;
E0188;VARIATION SELECTOR-153;Mn;0;NSM;;;;;N;;;;;
E0189;VARIATION SELECTOR-154;Mn;0;NSM;;;;;N;;;;;
E018A;VARIATION SELECTOR-155;Mn;0;NSM;;;;;N;;;;;
E018B;VARIATION SELECTOR-156;Mn;0;NSM;;;;;N;;;;;
E018C;VARIATION SELECTOR-157;Mn;0;NSM;;;;;N;;;;;
E018D;VARIATION SELECTOR-158;Mn;0;NSM;;;;;N;;;;;
E018E;VARIATION SELECTOR-159;Mn;0;NSM;;;;;N;;;;;
E018F;VARIATION SELECTOR-160;Mn;0;NSM;;;;;N;;;;;
E0190;VARIATION SELECTOR-161;Mn;0;NSM;;;;;N;;;;;
E0191;VARIATION SELECTOR-162;Mn;0;NSM;;;;;N;;;;;
E0192;VARIATION SELECTOR-163;Mn;0;NSM;;;;;N;;;;;
E0193;VARIATION SELECTOR-164;Mn;0;NSM;;;;;N;;;;;
E0194;VARIATION SELECTOR-165;Mn;0;NSM;;;;;N;;;;;
E0195;VARIATION SELECTOR-166;Mn;0;NSM;;;;;N;;;;;
E0196;VARIATION SELECTOR-167;Mn;0;NSM;;;;;N;;;;;
E0197;VARIATION SELECTOR-168;Mn;0;NSM;;;;;N;;;;;
E0198;VARIATION SELECTOR-169;Mn;0;NSM;;;;;N;;;;;
E0199;VARIATION SELECTOR-170;Mn;0;NSM;;;;;N;;;;;
E019A;VARIATION SELECTOR-171;Mn;0;NSM;;;;;N;;;;;
E019B;VARIATION SELECTOR-172;Mn;0;NSM;;;;;N;;;;;
E019C;VARIATION SELECTOR-173;Mn;0;NSM;;;;;N;;;;;
E019D;VARIATION SELECTOR-174;Mn;0;NSM;;;;;N;;;;;
E019E;VARIATION SELECTOR-175;Mn;0;NSM;;;;;N;;;;;
E019F;VARIATION SELECTOR-176;Mn;0;NSM;;;;;N;;;;;
E01A0;VARIATION SELECTOR-177;Mn;0;NSM;;;;;N;;;;;
E01A1;VARIATION SELECTOR-178;Mn;0;NSM;;;;;N;;;;;
E01A2;VARIATION SELECTOR-179;Mn;0;NSM;;;;;N;;;;;
E01A3;VARIATION SELECTOR-180;Mn;0;NSM;;;;;N;;;;;
E01A4;VARIATION SELECTOR-181;Mn;0;NSM;;;;;N;;;;;
E01A5;VARIATION SELECTOR-182;Mn;0;NSM;;;;;N;;;;;
E01A6;VARIATION SELECTOR-183;Mn;0;NSM;;;;;N;;;;;
E01A7;VARIATION SELECTOR-184;Mn;0;NSM;;;;;N;;;;;
E01A8;VARIATION SELECTOR-185;Mn;0;NSM;;;;;N;;;;;
E01A9;VARIATION SELECTOR-186;Mn;0;NSM;;;;;N;;;;;
E01AA;VARIATION SELECTOR-187;Mn;0;NSM;;;;;N;;;;;
E01AB;VARIATION SELECTOR-188;Mn;0;NSM;;;;;N;;;;;
E01AC;VARIATION SELECTOR-189;Mn;0;NSM;;;;;N;;;;;
E01AD;VARIATION SELECTOR-190;Mn;0;NSM;;;;;N;;;;;
E01AE;VARIATION SELECTOR-191;Mn;0;NSM;;;;;N;;;;;
E01AF;VARIATION SELECTOR-192;Mn;0;NSM;;;;;N;;;;;
E01B0;VARIATION SELECTOR-193;Mn;0;NSM;;;;;N;;;;;
E01B1;VARIATION SELECTOR-194;Mn;0;NSM;;;;;N;;;;;
E01B2;VARIATION SELECTOR-195;Mn;0;NSM;;;;;N;;;;;
E01B3;VARIATION SELECTOR-196;Mn;0;NSM;;;;;N;;;;;
E01B4;VARIATION SELECTOR-197;Mn;0;NSM;;;;;N;;;;;
E01B5;VARIATION SELECTOR-198;Mn;0;NSM;;;;;N;;;;;
E01B6;VARIATION SELECTOR-199;Mn;0;NSM;;;;;N;;;;;
E01B7;VARIATION SELECTOR-200;Mn;0;NSM;;;;;N;;;;;
E01B8;VARIATION SELECTOR-201;Mn;0;NSM;;;;;N;;;;;
E01B9;VARIATION SELECTOR-202;Mn;0;NSM;;;;;N;;;;;
E01BA;VARIATION SELECTOR-203;Mn;0;NSM;;;;;N;;;;;
E01BB;VARIATION SELECTOR-204;Mn;0;NSM;;;;;N;;;;;
E01BC;VARIATION SELECTOR-205;Mn;0;NSM;;;;;N;;;;;
E01BD;VARIATION SELECTOR-206;Mn;0;NSM;;;;;N;;;;;
E01BE;VARIATION SELECTOR-207;Mn;0;NSM;;;;;N;;;;;
E01BF;VARIATION SELECTOR-208;Mn;0;NSM;;;;;N;;;;;
E01C0;VARIATION SELECTOR-209;Mn;0;NSM;;;;;N;;;;;
E01C1;VARIATION SELECTOR-210;Mn;0;NSM;;;;;N;;;;;
E01C2;VARIATION SELECTOR-211;Mn;0;NSM;;;;;N;;;;;
E01C3;VARIATION SELECTOR-212;Mn;0;NSM;;;;;N;;;;;
E01C4;VARIATION SELECTOR-213;Mn;0;NSM;;;;;N;;;;;
E01C5;VARIATION SELECTOR-214;Mn;0;NSM;;;;;N;;;;;
E01C6;VARIATION SELECTOR-215;Mn;0;NSM;;;;;N;;;;;
E01C7;VARIATION SELECTOR-216;Mn;0;NSM;;;;;N;;;;;
E01C8;VARIATION SELECTOR-217;Mn;0;NSM;;;;;N;;;;;
E01C9;VARIATION SELECTOR-218;Mn;0;NSM;;;;;N;;;;;
E01CA;VARIATION SELECTOR-219;Mn;0;NSM;;;;;N;;;;;
E01CB;VARIATION SELECTOR-220;Mn;0;NSM;;;;;N;;;;;
E01CC;VARIATION SELECTOR-221;Mn;0;NSM;;;;;N;;;;;
E01CD;VARIATION SELECTOR-222;Mn;0;NSM;;;;;N;;;;;
E01CE;VARIATION SELECTOR-223;Mn;0;NSM;;;;;N;;;;;
E01CF;VARIATION SELECTOR-224;Mn;0;NSM;;;;;N;;;;;
E01D0;VARIATION SELECTOR-225;Mn;0;NSM;;;;;N;;;;;
E01D1;VARIATION SELECTOR-226;Mn;0;NSM;;;;;N;;;;;
E01D2;VARIATION SELECTOR-227;Mn;0;NSM;;;;;N;;;;;
E01D3;VARIATION SELECTOR-228;Mn;0;NSM;;;;;N;;;;;
E01D4;VARIATION SELECTOR-229;Mn;0;NSM;;;;;N;;;;;
E01D5;VARIATION SELECTOR-230;Mn;0;NSM;;;;;N;;;;;
E01D6;VARIATION SELECTOR-231;Mn;0;NSM;;;;;N;;;;;
E01D7;VARIATION SELECTOR-232;Mn;0;NSM;;;;;N;;;;;
E01D8;VARIATION SELECTOR-233;Mn;0;NSM;;;;;N;;;;;
E01D9;VARIATION SELECTOR-234;Mn;0;NSM;;;;;N;;;;;
E01DA;VARIATION SELECTOR-235;Mn;0;NSM;;;;;N;;;;;
E01DB;VARIATION SELECTOR-236;Mn;0;NSM;;;;;N;;;;;
E01DC;VARIATION SELECTOR-237;Mn;0;NSM;;;;;N;;;;;
E01DD;VARIATION SELECTOR-238;Mn;0;NSM;;;;;N;;;;;
E01DE;VARIATION SELECTOR-239;Mn;0;NSM;;;;;N;;;;;
E01DF;VARIATION SELECTOR-240;Mn;0;NSM;;;;;N;;;;;
E01E0;VARIATION SELECTOR-241;Mn;0;NSM;;;;;N;;;;;
E01E1;VARIATION SELECTOR-242;Mn;0;NSM;;;;;N;;;;;
E01E2;VARIATION SELECTOR-243;Mn;0;NSM;;;;;N;;;;;
E01E3;VARIATION SELECTOR-244;Mn;0;NSM;;;;;N;;;;;
E01E4;VARIATION SELECTOR-245;Mn;0;NSM;;;;;N;;;;;
E01E5;VARIATION SELECTOR-246;Mn;0;NSM;;;;;N;;;;;
E01E6;VARIATION SELECTOR-247;Mn;0;NSM;;;;;N;;;;;
E01E7;VARIATION SELECTOR-248;Mn;0;NSM;;;;;N;;;;;
E01E8;VARIATION SELECTOR-249;Mn;0;NSM;;;;;N;;;;;
E01E9;VARIATION SELECTOR-250;Mn;0;NSM;;;;;N;;;;;
E01EA;VARIATION SELECTOR-251;Mn;0;NSM;;;;;N;;;;;
E01EB;VARIATION SELECTOR-252;Mn;0;NSM;;;;;N;;;;;
E01EC;VARIATION SELECTOR-253;Mn;0;NSM;;;;;N;;;;;
E01ED;VARIATION SELECTOR-254;Mn;0;NSM;;;;;N;;;;;
E01EE;VARIATION SELECTOR-255;Mn;0;NSM;;;;;N;;;;;
E01EF;VARIATION SELECTOR-256;Mn;0;NSM;;;;;N;;;;;
F0000;<Plane 15 Private Use, First>;Co;0;L;;;;;N;;;;;
FFFFD;<Plane 15 Private Use, Last>;Co;0;L;;;;;N;;;;;
100000;<Plane 16 Private Use, First>;Co;0;L;;;;;N;;;;;
10FFFD;<Plane 16 Private Use, Last>;Co;0;L;;;;;N;;;;;
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\policheck\x86\Policheck.Parser.XML ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Policheck.Parser</name>
    </assembly>
    <members>
        <member name="T:Policheck.Parser.Content">
            <summary>
            Public Struct that will host the data retrieved from any object reading module.
            Frequently changing strings inside hence struct
            </summary>
        </member>
        <member name="F:Policheck.Parser.Content.Data">
            <summary>
            String data to be scanned.
            </summary>
        </member>
        <member name="F:Policheck.Parser.Content._ContextualInfo">
            <summary>
            Underlying variable for Context information property.
            </summary>
        </member>
        <member name="F:Policheck.Parser.Content.FileName">
            <summary>
            Absolute path of the target file being read for scanning.
            </summary>
        </member>
        <member name="F:Policheck.Parser.Content.DisplayFileName">
            <summary>
            File name wihtout path.
            </summary>
        </member>
        <member name="F:Policheck.Parser.Content.IsSourceComment">
            <summary>
            Current data is a code comment abstracted from a target code file.
            </summary>
        </member>
        <member name="M:Policheck.Parser.Content.AddContextInfo(System.String)">
            <summary>
            Appends to context information proprerty.
            </summary>
        </member>
        <member name="M:Policheck.Parser.Content.AddContextInfo(System.String,System.String)">
            <summary>
            Appends to context information proprerty.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Policheck.Parser.Content.ClearContextInfo">
            <summary>
            Clears the context information
            </summary>
        </member>
        <member name="P:Policheck.Parser.Content.ContextualInfo">
            <summary>
            Context information to locate Data (scanned string) in the target file.
            </summary>
        </member>
        <member name="F:Policheck.Parser.ContentParser.ReaderContent">
            <summary>
            Holds the scan content
            </summary>
        </member>
        <member name="M:Policheck.Parser.ContentParser.Read">
            <summary>
            Implemtent to define the file reading logic
            </summary>
            <returns>return true if the reading is successful. Otherwise return False if end of stream or any exception.</returns>
        </member>
        <member name="M:Policheck.Parser.ContentParser.Close">
            <summary>
            Implement to release all the resources for clean up.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Policheck.Parser.ContentParser.ReaderException">
            <summary>
            Set and get the exception while reading.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\policheck\x86\Policheck.Automation.XML ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Policheck.Automation</name>
    </assembly>
    <members>
        <member name="T:Policheck.Automation.ITask">
            <summary>
            Common interface to be implemented by all specific scan tasks (File)
            </summary>    
        </member>
        <member name="M:Policheck.Automation.AutomationLogger.AddLog(System.String,System.Exception)">
            <summary>
            Add log to the application trace.
            </summary>
            <param name="title"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Policheck.Automation.AutomationLogger.Priority">
            <summary>
            Priority
            </summary>
        </member>
        <member name="T:Policheck.Automation.AutomationLogger.EventID">
            <summary>
            Event ID
            </summary>
        </member>
        <member name="T:Policheck.Automation.RemoteController">
            <summary>
            Remote Task Controller that handles execution of POliCheck tasks on a remote host.
            </summary>
        </member>
        <member name="M:Policheck.Automation.RemoteController.StopScan(System.String)">
            <summary>
            Stop the currently executing task.
            </summary>
            <param name="taskName">User specified task name</param>
        </member>
        <member name="M:Policheck.Automation.RemoteController.CancelScan(System.String)">
            <summary>
            Cancel the currently executing task.
            </summary>
            <param name="taskUniqueId"></param>
        </member>
        <member name="M:Policheck.Automation.RemoteController.InvokeScan(Policheck.Automation.ITask)">
            <summary>
            Invoke the scan for the given task object.
            </summary>
            <param name="clientTask"></param>
        </member>
        <member name="M:Policheck.Automation.RemoteController.manager_TaskCompleted(System.Object,MS.BGIT.Policheck.BL.TaskCompletedEventArgs)">
            <summary>
            collects the task completion event from taskController and pass the event to client applicatiuon after 
            writing scan results.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Policheck.Automation.RemoteController.manager_ProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            collects the progress change events from taskController and pass the event to the client. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Policheck.Automation.RemoteController.IsValidTask(Policheck.Automation.ITask)">
            <summary>
            Validate the task object on server side
            </summary>
            <param name="clientTask"></param>
            <returns></returns>
        </member>
        <member name="M:Policheck.Automation.RemoteController.IsTaskExists(System.String,System.String@)">
            <summary>
            Check whether the task is already exists in the _TaskList
            </summary>
            <param name="taskName"></param>
            <param name="taskUniqueId"></param>
            <returns></returns>
        </member>
        <member name="M:Policheck.Automation.RemoteController.IsTaskExists(System.String)">
            <summary>
            Check whether the task is already exists in the _TaskList
            </summary>
            <param name="taskName"></param>
            <returns></returns>
        </member>
        <member name="T:Policheck.Automation.RemoteController.ScanCompletedEventHandler">
            <summary>
            Scan complete delegate
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Policheck.Automation.RemoteController.ProgressChangedEventHandler">
            <summary>
            Progress chnage delegate
            </summary>
        </member>
        <member name="T:Policheck.Automation.TaskProgressEventArgs">
            <summary>
            This class contains the information about the task progress.
            </summary>
        </member>
        <member name="P:Policheck.Automation.TaskProgressEventArgs.TaskName">
            <summary>
            [Read only]task name
            </summary>
        </member>
        <member name="P:Policheck.Automation.TaskProgressEventArgs.ObjectInProgress">
            <summary>
            [Read only]name of Object under scanning
            </summary>
        </member>
        <member name="P:Policheck.Automation.TaskProgressEventArgs.IssueCount">
            <summary>
            [Read only]Total no of issues found
            </summary>
        </member>
        <member name="P:Policheck.Automation.TaskProgressEventArgs.TaskUniqueId">
            <summary>
            [Read only]task unique id 
            </summary>
        </member>
        <member name="T:Policheck.Automation.TaskCompletedEventArgs">
            <summary>
            This class contains the information about the task completion.
            </summary>
        </member>
        <member name="P:Policheck.Automation.TaskCompletedEventArgs.TaskName">
            <summary>
            Task name
            </summary>
        </member>
        <member name="P:Policheck.Automation.TaskCompletedEventArgs.TaskUniqueId">
            <summary>
            Task unique id
            </summary>
        </member>
        <member name="P:Policheck.Automation.TaskCompletedEventArgs.IssueCount">
            <summary>
            Total issues found
            </summary>
        </member>
        <member name="P:Policheck.Automation.TaskCompletedEventArgs.StartTime">
            <summary>
            Task start time
            </summary>
        </member>
        <member name="P:Policheck.Automation.TaskCompletedEventArgs.NoOfObjectsScanned">
            <summary>
            Total no of Objects scanned.
            </summary>
        </member>
        <member name="P:Policheck.Automation.TaskCompletedEventArgs.Duration">
            <summary>
            Total duration of task execution
            </summary>
        </member>
        <member name="P:Policheck.Automation.TaskCompletedEventArgs.Error">
            <summary>
            Exception object to store any exceptions if occurs.
            </summary>
        </member>
        <member name="P:Policheck.Automation.TaskCompletedEventArgs.Status">
            <summary>
            Status of the task
            </summary>
        </member>
        <member name="T:Policheck.Automation.ProgressEventWrapper">
            <summary>
            Progress change event wrapper.
            </summary>
        </member>
        <member name="T:Policheck.Automation.CompleteEventWrapper">
            <summary>
            Task completion event wrapper.
            </summary>
        </member>
        <member name="T:Policheck.Automation.ResultMode">
            <summary>
            Mode in which scan results are to be written.
            </summary>
        </member>
        <member name="F:Policheck.Automation.ResultMode.XML">
            <summary>
            Scan results in xml file.
            </summary>
        </member>
        <member name="F:Policheck.Automation.ResultMode.EXCEL_2003">
            <summary>
            Scan results in Excel 2003 (.xls) file.
            </summary>
        </member>
        <member name="F:Policheck.Automation.ResultMode.EXCEL_2007">
            <summary>
            Scan results in Excel 2007 (.xlsx) file.
            </summary>
        </member>
        <member name="F:Policheck.Automation.ResultMode.SQL_SERVER">
            <summary>
            Scan results in sql server database.
            </summary>
        </member>
        <member name="T:Policheck.Automation.GlobalExclusions">
            <summary>
            Global Exclusion setting works with the SQL term database or XML personal tables only. 
            It enables or disables Exclusion string or Exception context.
            </summary>
        </member>
        <member name="F:Policheck.Automation.GlobalExclusions.EXCLUSIONS">
            <summary>
            Enable term exclusion.
            </summary>
        </member>
        <member name="F:Policheck.Automation.GlobalExclusions.CONTEXT_EXCEPTION">
            <summary>
            Enable context exclusion.
            </summary>
        </member>
        <member name="T:Policheck.Automation.PersonalExclusions">
            <summary>
            Personal Exclusion settings are read from rule.mdb. 
            It enables or disables Exclusion string, Exception file, Exception context, 
            or both Exception file and context type of exclusions.
            </summary>
        </member>
        <member name="F:Policheck.Automation.PersonalExclusions.EXCLUSIONS">
            <summary>
            Enables term exclusion.
            </summary>
        </member>
        <member name="F:Policheck.Automation.PersonalExclusions.FILE_EXCEPTION">
            <summary>
             Enables file exclusion with term.
            </summary>
        </member>
        <member name="F:Policheck.Automation.PersonalExclusions.CONTEXT_EXCEPTION">
            <summary>
            Enables context exclusion with term. 
            </summary>
        </member>
        <member name="F:Policheck.Automation.PersonalExclusions.FILE_CTX_EXCEPTION">
            <summary>
            Enables file and context exclusion with term.
            </summary>
        </member>
        <member name="T:Policheck.Automation.ScanType">
            <summary>
            Identifies the type of scan to be perform.
            </summary>
        </member>
        <member name="F:Policheck.Automation.ScanType.FILE">
            <summary>
            Operation to scan windows file/folder
            </summary>
        </member>
        <member name="T:Policheck.Automation.Severity">
            <summary>
            The term severity for the task.
            </summary>
        </member>
        <member name="F:Policheck.Automation.Severity.SEV1">
            <summary>
            Severity 1
            </summary>
        </member>
        <member name="F:Policheck.Automation.Severity.SEV2">
            <summary>
            Severity 2
            </summary>
        </member>
        <member name="F:Policheck.Automation.Severity.SEV3">
            <summary>
            Severity 3
            </summary>
        </member>
        <member name="F:Policheck.Automation.Severity.SEV4">
            <summary>
            Severity 4
            </summary>
        </member>
        <member name="T:Policheck.Automation.TargetType">
            <summary>
            Target folder/file or batch file name
            </summary>
        </member>
        <member name="F:Policheck.Automation.TargetType.FOLDER">
            <summary>
            Scan target is a folder.
            </summary>
        </member>
        <member name="F:Policheck.Automation.TargetType.FILE">
            <summary>
            Scan target is a file.
            </summary>
        </member>
        <member name="F:Policheck.Automation.TargetType.BATCH">
            <summary>
            Scan target is a vbatch file.
            </summary>
        </member>
        <member name="T:Policheck.Automation.TermTableSource">
            <summary>
            Term Table Sources.
            </summary>
        </member>
        <member name="F:Policheck.Automation.TermTableSource.SQL">
            <summary>
            Refer sql term table from GPS database.
            </summary>
        </member>
        <member name="F:Policheck.Automation.TermTableSource.PERSONAL">
            <summary>
            Refer your personal term table.
            </summary>
        </member>
        <member name="F:Policheck.Automation.TermTableSource.KEYWORD">
            <summary>
            Insert a keyword for scanning.
            </summary>
        </member>
        <member name="T:Policheck.Automation.FileTypeSettingsMode">
            <summary>
            To set the File Type settings to be used by the task. 
            It controls what all file extensions should get scanned out of supported set of file extensions by PoliCheck application.
            </summary>
        </member>
        <member name="F:Policheck.Automation.FileTypeSettingsMode.DEFAULT">
            <summary>
            Use the default File Type Settings file shipped with Policheck
            </summary>
        </member>
        <member name="F:Policheck.Automation.FileTypeSettingsMode.CUSTOM">
            <summary>
            Use the custom File Type Settings file.
            </summary>
        </member>
        <member name="T:Policheck.Automation.TaskStatus">
            <summary>
            To get the status of task once scanning is complete.
            </summary>
        </member>
        <member name="F:Policheck.Automation.TaskStatus.ERROR">
            <summary>
            Error occurrd in the task.
            </summary>
        </member>
        <member name="F:Policheck.Automation.TaskStatus.CANCELLED">
            <summary>
            Task cancalled by the user.
            </summary>
        </member>
        <member name="F:Policheck.Automation.TaskStatus.COMPLETED">
            <summary>
            Task completed successfully.
            </summary>
        </member>
        <member name="T:Policheck.Automation.PolicheckTermTable">
            <summary>
            Struct to store the term table.
            </summary>
        </member>
        <member name="T:Policheck.Automation.Message">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.FTS_EMPTY">
            <summary>
              Looks up a localized string similar to The FileTypeSettingsFile property cannot be set to empty..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.FTS_FILE_INVALID">
            <summary>
              Looks up a localized string similar to Unsupported file format for FileTypeSettings. Please use a valid xml file..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.FTS_FILE_NOT_FOUND">
            <summary>
              Looks up a localized string similar to The  File Type Settings file not found..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.FTS_FILE_SCHEMA_INVALID">
            <summary>
              Looks up a localized string similar to Invalid File Type Settings file, failed in schema validation..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.PTT_FILE_EXT_INVALID">
            <summary>
              Looks up a localized string similar to Invalid file extension. Only .xml, .mdb or .accdb files are allowed..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.PTT_FILE_NOT_FOUND">
            <summary>
              Looks up a localized string similar to Personal Term Table file not found or is not accessible..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.PTT_KEYWORD_EMPTY">
            <summary>
              Looks up a localized string similar to Blank string is not allowed for terms Keywords..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.PTT_LIST_EMPTY">
            <summary>
              Looks up a localized string similar to term tables for the scan is not set..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.PTT_SQL_NOT_FOUND">
            <summary>
              Looks up a localized string similar to The term information for the given LCID is not available..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.PTT_WEB_SERVICE_NOT_AVAILABLE">
            <summary>
              Looks up a localized string similar to The web service to get the sql term table is not available..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.REMOTING_RUNTIME_ERROR">
            <summary>
              Looks up a localized string similar to RemotingException occurred..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.RESULT_WRITE_ERROR">
            <summary>
              Looks up a localized string similar to An error occurred in saving results..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.SOCKET_ERROR">
            <summary>
              Looks up a localized string similar to Unable to establish remote connection.
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.SQL_CONNECTION_STRING_INVALID">
            <summary>
              Looks up a localized string similar to The SQLServer connection string that points to your PoliCheck database for storing scan results is invalid..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.SQL_DATABASE_ERROR">
            <summary>
              Looks up a localized string similar to Please check the connection string, unable to connect to the target database..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_COMPLETED_ERROR">
            <summary>
              Looks up a localized string similar to RemoteController.manager_TaskCompleted(): .
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_INVOKE_SCAN_ERROR">
            <summary>
              Looks up a localized string similar to RemoteController.manager_InvokeScan(): .
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_MANAGER_ERROR">
            <summary>
              Looks up a localized string similar to An error occurred in Task manager.
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_NAME_DUPLICATE">
            <summary>
              Looks up a localized string similar to A task with this name is already running. Please provide a unique name to your task..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_NAME_EMPTY">
            <summary>
              Looks up a localized string similar to Task Name cannot be empty..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_PROGRESS_ERROR">
            <summary>
              Looks up a localized string similar to RemoteController.manager_ProgressChnaged(): .
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_RESULT_MODE_ISNULL">
            <summary>
              Looks up a localized string similar to Please specify SaveResultMode for saving scan results..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_RESULT_TARGET_DIRECTORY_NOT_FOULD">
            <summary>
              Looks up a localized string similar to Result target location is not found or not accessible..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_RESULT_TARGET_EMPTY">
            <summary>
              Looks up a localized string similar to The SaveResultToLocation property cannot be empty..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_RESULT_TARGET_ERROR">
            <summary>
              Looks up a localized string similar to Error occured while validating SaveResultToLocation property. Please see the automation log for more detail..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_RESULT_TARGET_EXCEL_2003">
            <summary>
              Looks up a localized string similar to Result file extension should be .xls..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_RESULT_TARGET_EXCEL_2007">
            <summary>
              Looks up a localized string similar to Result file extension should be .xlsx..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_RESULT_TARGET_INVALID">
            <summary>
              Looks up a localized string similar to The value of SaveResultToLocation property is not a valid file path..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_RESULT_TARGET_VALID_EXTENSION">
            <summary>
              Looks up a localized string similar to SaveResultToLocation property must contains a valid file extension..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_RESULT_TARGET_XML">
            <summary>
              Looks up a localized string similar to Result file extension should be .xml..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_SCAN_TYPE_ISNULL">
            <summary>
              Looks up a localized string similar to Scan Type property is not set..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_TARGET_ABSOLUTE_PATH">
            <summary>
              Looks up a localized string similar to Specify the absolute path for the target..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_TARGET_BATCH_INVALID">
            <summary>
              Looks up a localized string similar to The specified target batch file is not valid..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_TARGET_BATCH_NOT_FOUND">
            <summary>
              Looks up a localized string similar to Error in reading target data: The specified Target batch file not found or is not accessible..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_TARGET_EMPTY">
            <summary>
              Looks up a localized string similar to Target for the scan is not set..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_TARGET_FILE_NOT_FOUND">
            <summary>
              Looks up a localized string similar to Error in reading target data: The specified Target file not found or is not accessible..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_TARGET_FOLDER_NOT_FOUND">
            <summary>
              Looks up a localized string similar to Error in reading target data: The specified Target folder not found or is not accessible..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_TARGET_TYPE_ISNULL">
            <summary>
              Looks up a localized string similar to Target Type property is not set..
            </summary>
        </member>
        <member name="P:Policheck.Automation.Message.TASK_VALIDATE_ERROR">
            <summary>
              Looks up a localized string similar to RemoteController.IsValidTask(): .
            </summary>
        </member>
        <member name="T:Policheck.Automation.FileTask">
            <summary>
            This class represents PoliCheck scan task used for automation.
            </summary>    
        </member>
        <member name="F:Policheck.Automation.FileTask.TermTables">
            <summary>
            Collection of term table sources.
            </summary>
        </member>
        <member name="F:Policheck.Automation.FileTask._RemoteController">
            <summary>
            RemoteController object.
            </summary>
        </member>
        <member name="F:Policheck.Automation.FileTask._CheckCodeComments">
            <summary>
            Underlying variable for Proprerty: CheckCodeComments
            </summary>
        </member>
        <member name="F:Policheck.Automation.FileTask._FileTypeSettingsFile">
            <summary>
            Underlying variable for Proprerty: FileTypeSettingsFile
            </summary>
        </member>
        <member name="F:Policheck.Automation.FileTask._FileTypeSettingsMode">
            <summary>
            Underlying variable for Proprerty: FileTypeSettingsMode
            </summary>
        </member>
        <member name="F:Policheck.Automation.FileTask._GlobalExclusions">
            <summary>
            Underlying variable for Proprerty:GlobalExclusions
            </summary>
        </member>
        <member name="F:Policheck.Automation.FileTask._IncludeSubDir">
            <summary>
            Underlying variable for Proprerty: IncludeSubDir
            </summary>
        </member>
        <member name="F:Policheck.Automation.FileTask._PersonalExclusions">
            <summary>
            Underlying variable for Proprerty: PersonalExclusions
            </summary>        
        </member>
        <member name="F:Policheck.Automation.FileTask._ResultMode">
            <summary>
            Internal variable for property: SaveResultMode
            </summary>
        </member>
        <member name="F:Policheck.Automation.FileTask._ResultTarget">
            <summary>
            Underlying variable for property: SaveResultsToLocation
            </summary>
        </member>
        <member name="F:Policheck.Automation.FileTask._ScanType">
            <summary>
            Underlying variable for property: ScanType
            </summary>
        </member>
        <member name="F:Policheck.Automation.FileTask._Severity">
            <summary>
            Underlying variable for Proprerty: Severity
            </summary>
        </member>
        <member name="F:Policheck.Automation.FileTask._Target">
            <summary>
            Underlying variable for Proprerty: Target
            </summary>
        </member>
        <member name="F:Policheck.Automation.FileTask._TargetType">
            <summary>
            Underlying variable for Proprerty: TargetType
            </summary>
        </member>
        <member name="F:Policheck.Automation.FileTask._TaskName">
            <summary>
            Underlying variable for Proprerty: TaskName
            </summary>
        </member>
        <member name="F:Policheck.Automation.FileTask._TermTableList">
            <summary>
            Underlying variable for Proprerty: TermTableList
            </summary>
        </member>
        <member name="M:Policheck.Automation.FileTask.SetSeverity(Policheck.Automation.Severity[])">
            <summary>
            Set the Severity applicable for the task.
            </summary>
            <param name="severity"></param>
        </member>
        <member name="M:Policheck.Automation.FileTask.SetGlobalExclusions(Policheck.Automation.GlobalExclusions[])">
            <summary>
            Sets the Global Exclusions applicable for the task.
            </summary>
            <param name="globalExclusions"></param>
        </member>
        <member name="M:Policheck.Automation.FileTask.SetPersonalExclusions(Policheck.Automation.PersonalExclusions[])">
            <summary>
            Sets the Personal Exclusions applicable for the task.
            </summary>
            <param name="personalExclusions"></param>
        </member>
        <member name="M:Policheck.Automation.FileTask.Start(System.String,System.String)">
            <summary>
            Starts the execution of task on specified PoliCheck remote host.
            </summary>
            <param name="serverName">Machine acting as Remote Host for PoliCheck.</param>
            <param name="portNumber">Port number on the machine open for listening to remote scan task requests.</param>
        </member>
        <member name="M:Policheck.Automation.FileTask.Stop">
            <summary>
            Terminates a task that is in progress.
            </summary>
            <returns>true if the request to terminate the task was accepted successfully.</returns>
        </member>
        <member name="F:Policheck.Automation.FileTask.ProgressEventCall">
            <summary>
            Progress chnaged event object for the task to bind the client's progress change event. 
            </summary>
        </member>
        <member name="F:Policheck.Automation.FileTask.CompleteEventCall">
            <summary>
            Scan complete event object for the task to bind the client's complete event.
            </summary>
        </member>
        <member name="P:Policheck.Automation.FileTask.CheckCodeComments">
            <summary>
            This option enables PoliCheck to report if the term is in a comment or not. By default it is false.
            </summary>
        </member>
        <member name="P:Policheck.Automation.FileTask.FileTypeSettingsFile">
            <summary>
            Specify the File Type Settings file path if the FileTypeSettingsMode property is set to CUSTOM.
            </summary>
        </member>
        <member name="P:Policheck.Automation.FileTask.FileTypeSettingsMode">
            <summary>
            Specify whether Task will use the default File Type Settings File or the Custom on. 
            By default Task will use the default File Type Settings file.
            </summary>
        </member>
        <member name="P:Policheck.Automation.FileTask.GlobalExclusions">
            <summary>
            Gets the list of Global Exclusion applied for the task.
            This Global Exclusion setting works with the SQL term database or XML personal tables only.
            </summary>
        </member>
        <member name="P:Policheck.Automation.FileTask.IncludeSubDir">
            <summary>
            Set this property to True, to enable scanning of all the sub directories under your target folder
            By default it is true.
            </summary>
        </member>
        <member name="P:Policheck.Automation.FileTask.PersonalExclusions">
            <summary>
            Gets the list of Personal exclusions applied on the task. 
            This Personal Exclusion setting are read from rule.mdb
            </summary>
        </member>
        <member name="P:Policheck.Automation.FileTask.SaveResultsToLocation">
            <summary>
            Target location where Policheck will save the scan results. 
            If the SaveResultMode is SQLSERVER then a valid connection string is required to export the results in sql server.
            </summary>        
        </member>
        <member name="P:Policheck.Automation.FileTask.SaveResultMode">
            <summary>
            Get/Set mode for saving scan results.
            </summary>
        </member>
        <member name="P:Policheck.Automation.FileTask.ScanType">
            <summary>
            Type of scan.
            </summary>
        </member>
        <member name="P:Policheck.Automation.FileTask.Severity">
            <summary>
            Gets different level of term severity applied. By default only Severity 1 is turned on.
            </summary>
        </member>
        <member name="P:Policheck.Automation.FileTask.Target">
            <summary>
            Specify the path of target files/Folder/Batch. 
            </summary>
        </member>
        <member name="P:Policheck.Automation.FileTask.TargetType">
            <summary>
            Specify the target Type. i.e. files/Folder/Batch. 
            </summary>
        </member>
        <member name="P:Policheck.Automation.FileTask.TaskName">
            <summary>
            Specify the name for the task.
            </summary>
        </member>
        <member name="P:Policheck.Automation.FileTask.TermTableList">
            <summary>
            Gets the list of Term tables applied on the task.
            </summary>
        </member>
        <member name="T:Policheck.Automation.FileTask._TermTables">
            <summary>
            Collection class to store all the term sources referred in a PoliCheck Automation Task.
            </summary>
        </member>
        <member name="M:Policheck.Automation.FileTask._TermTables.#ctor(Policheck.Automation.FileTask)">
            <summary>
            Constructor
            </summary>
            <param name="_PolicheckTask"></param>
        </member>
        <member name="M:Policheck.Automation.FileTask._TermTables.AddSQL(System.Int16)">
            <summary>
            Specify the sql term tables to be used by the task.
            The SQL term database is the SQL Server database maintained by the GPS group. Only the GPS group can make changes to it.
            </summary>
            <param name="LCID"></param>            
        </member>
        <member name="M:Policheck.Automation.FileTask._TermTables.AddPersonal(System.String)">
            <summary>
            Specify the personal term tables to be used by the task.
            The personal term table is either XML or MDB file which contains terms that are sensitive within different groups in Microsoft. 
            </summary>
            <param name="filePath"></param>            
        </member>
        <member name="M:Policheck.Automation.FileTask._TermTables.AddKeyword(System.String)">
            <summary>
            Specify the keywords to be used by the task.
            Keywords allow the user to enter terms manually during the setup of the task. 
            These terms will be considered as sensitive terms and will not be saved except in that particular task.
            </summary>
            <param name="value"></param>            
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\policheck\x86\CommentScanner.xml ===
﻿<?xml version="1.0" encoding="utf-8" ?>
<!--MultiLine/BlockComment-->
<Comments>
  <BlockComment id="1" BlockStartComment="/*" BlockEndComment="*/">
    <lang>c</lang>
    <lang>cpp</lang>
    <lang>cxx</lang>
    <lang>h</lang>
    <lang>hxx</lang>
    <lang>hpp</lang>
    <lang>cs</lang>
    <lang>js</lang>
	<lang>rc</lang>
	<lang>java</lang>
	<lang>jav</lang>
  </BlockComment>
  <!--Single Line Comments -->
  <SingleLineComment id="1" SingleLineComment="//">
    <lang>c</lang>
    <lang>cpp</lang>
    <lang>cxx</lang>
    <lang>h</lang>
    <lang>hxx</lang>
    <lang>hpp</lang>
    <lang>cs</lang>
    <lang>js</lang>
	<lang>rc</lang>
	<lang>java</lang>
	<lang>jav</lang>
  </SingleLineComment >
  <SingleLineComment id="2" SingleLineComment="'">
    <lang>vb</lang>
    <lang>vbs</lang>
	<lang>frm</lang>
	<lang>inc</lang>  
    <lang>bas</lang>
    <lang>pl</lang>
  </SingleLineComment>
</Comments>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\policheck\x86\Image Scan\policheckver.xml ===
<?xml version="1.0" encoding="utf-8" ?> 
<PLCKVer><Version>5.0.071230</Version></PLCKVer>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\policheck\x86\IFilters\PDF IFilter\Legal\USEnglish.txt ===
ADOBE
Software License Agreement

NOTICE TO USER:  PLEASE READ THIS AGREEMENT CAREFULLY. BY COPYING, INSTALLING OR USING ALL OR ANY PORTION OF THE SOFTWARE YOU ACCEPT ALL THE TERMS AND CONDITIONS OF THIS AGREEMENT, INCLUDING, IN PARTICULAR THE LIMITATIONS ON: USE CONTAINED IN SECTION 2; TRANSFERABILITY IN SECTION 4; WARRANTY IN SECTION 6; LIABILITY IN SECTION 7; AND SPECIFIC PROVISIONS AND EXCEPTIONS IN SECTION 13. YOU AGREE THAT THIS AGREEMENT IS LIKE ANY WRITTEN NEGOTIATED AGREEMENT SIGNED BY YOU. THIS AGREEMENT IS ENFORCEABLE AGAINST YOU AND ANY LEGAL ENTITY THAT OBTAINED THE SOFTWARE AND ON WHOSE BEHALF IT IS USED:  FOR EXAMPLE, IF APPLICABLE, YOUR EMPLOYER. IF YOU DO NOT AGREE TO THE TERMS OF THIS AGREEMENT, DO NOT USE THE SOFTWARE. VISIT HTTP://WWW.ADOBE.COM FOR TERMS OF AND LIMITATIONS ON RETURNING THE SOFTWARE FOR A REFUND.

You may have another written agreement directly with Adobe (e.g., a volume license agreement) that supplements or supersedes all or portions of this agreement. 

Adobe and its suppliers own all intellectual property in the Software. The Software is licensed, not sold. Adobe permits you to copy, download, install, use, or otherwise benefit from the functionality or intellectual property of the Software only in accordance with the terms of this agreement. Use of some third party materials included in the Software may be subject to other terms and conditions typically found in a separate license agreement or "Read Me" file located near such materials.

THE SOFTWARE MAY INCLUDE PRODUCT ACTIVATION AND OTHER TECHNOLOGY DESIGNED TO PREVENT UNAUTHORIZED COPYING. THE ACTIVATION TECHNOLOGY MAY PREVENT YOUR USE OF THE SOFTWARE IF YOU DO NOT FOLLOW THE ACTIVATION PROCESS DESCRIBED IN THE SOFTWARE AND DOCUMENTATION. VISIT HTTP://WWW.ADOBE.COM FOR INFORMATION ABOUT PRODUCT ACTIVATION.

1.  Definitions.

"Adobe" means Adobe Systems Incorporated, a Delaware corporation, 345 Park Avenue, San Jose, California 95110, if subsection 9 (a) of this agreement applies; otherwise it means Adobe Systems Software Ireland Limited, Unit 3100, Lake Drive, City West Campus, Saggart D24, Republic of Ireland, a company organized under the laws of Ireland and an affiliate and licensee of Adobe Systems Incorporated.

"Computer" means a computer device that accepts information in digital or similar form and manipulates it for a specific result based on a sequence of instructions.

"Internal Network" means a private, proprietary network resource accessible only by employees and individual contractors (i.e., temporary employees) of a specific corporation or similar business entity. Internal Network does not include the Internet or any other network community open to the public, including but not limited to membership or subscription driven groups, associations and similar organizations.

"Permitted Number" means an unlimited number. 

"Software" means (a) all of the information with which this agreement is provided, including but not limited to (i) Adobe or third party software files and other computer information; (ii) sample and stock photographs, images, sounds, clip art and other artistic works ("Stock Files"); (iii)  related explanatory written materials and files ("Documentation"); and (iv) fonts; and (b) any modified versions and copies of, and upgrades, updates and additions to, such information, provided to you by Adobe at any time, to the extent not provided under a separate agreement (collectively, "Updates"). 

2.  Software License. As long as you obtained the Software from Adobe or one of its authorized licensees and as long as you comply with the terms of this agreement, Adobe grants you a non-exclusive license to use the Software in the manner and for the purposes described in the Documentation, as further set forth below. See Section 13 for specific provisions related to certain components.

2.1  General Use. You may install and use one copy of the Software on up to the Permitted Number of your compatible Computers; or

2.2  Server Deployment. You may install the Permitted Number of copies of the Software on the Permitted Number of Computer file server(s) within your Internal Network for the purpose of downloading and installing the Software on up to the Permitted Number of other Computers within the same Internal Network; or

2.3  Server Use. You may install the Permitted Number of copies of the Software on the Permitted Number of  Computer file server(s) for the purpose of using the Software through commands, data or instructions (e.g., scripts) from another Computer.

2.4  Backup Copy.  You may make a reasonable number of backup copies of the Software, provided your backup copies are not installed or used for other than archival purposes.

2.5  Stock Files. Unless stated otherwise in the "Read-Me" files associated with the Stock Files, which may include specific rights and restrictions with respect to such materials, you may display, modify, reproduce and distribute any of the Stock Files. However, you may not distribute the Stock Files on a stand-alone basis (i.e., in circumstances in which the Stock Files constitute the primary value of the product being distributed). Stock Files may not be used in the production of libelous, defamatory, fraudulent, lewd, obscene or pornographic material or any material that infringes upon any third party intellectual property rights or in any otherwise illegal manner. You may not claim any trademark rights in the Stock Files or derivative works thereof.

3.  Intellectual Property Ownership. The Software and any authorized copies that you make are the intellectual property of and are owned by Adobe Systems Incorporated and its suppliers. The structure, organization and code of the Software are the valuable trade secrets and confidential information of Adobe Systems Incorporated and its suppliers. The Software is protected by law, including but not limited to the copyright laws of the United States and other countries, and by international treaty provisions. Except as expressly stated herein, this agreement does not grant you any intellectual property rights in the Software and all rights not expressly granted are reserved by Adobe and its suppliers.

4.  Restrictions.

4.1  Notices. You may not copy the Software except as set forth in Section 2 and 13. Any permitted copy of the Software that you make must contain the same copyright and other proprietary notices that appear on or in the Software.

4.2  No Modifications. Except as permitted in Section 13.7, you may not modify, adapt or translate the Software. You may not reverse engineer, decompile, disassemble or otherwise attempt to discover the source code of the Software except to the extent you may be expressly permitted under applicable law to decompile only in order to achieve interoperability with the Software.

4.3  No Unbundling. The Software may include various applications, utilities and components, may support multiple platforms and languages and may be provided to you on multiple media or in multiple copies. Nonetheless, the Software is designed and provided to you as a single product to be used as a single product on Computers as permitted by Sections 2 and 13. You are not required to use all component parts of the Software, but you may not unbundle the component parts of the Software for use on different Computers. You may not unbundle or repackage the Software for distribution, transfer or resale. See Section 13 for specific exceptions to this Section.

4.4  No Transfer. YOU MAY NOT RENT, LEASE, SELL, SUBLICENSE, ASSIGN OR TRANSFER YOUR RIGHTS IN THE SOFTWARE, OR AUTHORIZE ANY PORTION OF THE SOFTWARE TO BE COPIED ONTO ANOTHER INDIVIDUAL OR LEGAL ENTITY'S COMPUTER EXCEPT AS MAY BE PERMITTED HEREIN. You may, however, transfer all your rights to use the Software to another individual or legal entity provided that: (a) you also transfer (i) this agreement, (ii) the serial number(s), the Software and all other software or hardware bundled, packaged or pre-installed with the Software, including all copies, upgrades, updates and prior versions, and (iii) all copies of font software converted into other formats to such individual or entity;  (b) you retain no upgrades, updates or copies, including backups and copies stored on a computer; and (c) the receiving party accepts the terms and conditions of this agreement and any other terms and conditions under which you purchased a valid license to the Software. NOTWITHSTANDING THE FOREGOING, YOU MAY NOT TRANSFER EDUCATION, PRE-RELEASE, OR NOT FOR RESALE COPIES OF THE SOFTWARE. Prior to a transfer Adobe may require that you and the receiving party confirm in writing your compliance with this agreement, provide Adobe with information about yourselves, and register as end-users of the Software. Allow 4-6 weeks to transfer. Please visit http://www.adobe.com/support/main.html or contact Adobe's Customer Support Department for more information.

5.  Updates. If the Software is an upgrade or update to a previous version of , you must possess a valid license to such previous version in order to use such upgrade or update. All upgrades and updates are provided to you on a license exchange basis. You agree that by using an upgrade or update you voluntarily terminate your right to use any previous version. As an exception, you may continue to use previous versions of Adobe software in the transition to the upgrade or update, provided that the upgrade or update and the previous versions are installed on the same computer. Upgrades and updates may be licensed to you by Adobe with additional or different terms.

6.  NO WARRANTY.  The Software is being delivered to you "AS IS" and Adobe makes no warranty as to its use or performance.  ADOBE AND ITS SUPPLIERS DO NOT AND CANNOT WARRANT THE PERFORMANCE OR RESULTS YOU MAY OBTAIN BY USING THE SOFTWARE.  EXCEPT FOR ANY WARRANTY, CONDITION, REPRESENTATION OR TERM TO THE EXTENT TO WHICH THE SAME CANNOT OR MAY NOT BE EXCLUDED OR LIMITED BY LAW APPLICABLE TO YOU IN YOUR JURISDICTION, ADOBE AND ITS SUPPLIERS MAKE NO WARRANTIES CONDITIONS, REPRESENTATIONS, OR TERMS (EXPRESS OR IMPLIED WHETHER BY STATUTE, COMMON LAW, CUSTOM, USAGE OR OTHERWISE) AS TO ANY MATTER INCLUDING WITHOUT LIMITATION NONINFRINGEMENT OF THIRD PARTY RIGHTS, MERCHANTABILITY, INTEGRATION, SATISFACTORY QUALITY, OR FITNESS FOR ANY PARTICULAR PURPOSE.  The provisions of Section 6 and Section 7 shall survive the termination of this Agreement, howsoever caused, but this shall not imply or create any continued right to Use the Software after termination of this Agreement.

7.  LIMITATION OF LIABILITY. IN NO EVENT WILL ADOBE OR ITS SUPPLIERS BE LIABLE TO YOU FOR ANY DAMAGES, CLAIMS OR COSTS WHATSOEVER OR ANY CONSEQUENTIAL, INDIRECT, INCIDENTAL DAMAGES, OR ANY LOST PROFITS OR LOST SAVINGS, EVEN IF AN ADOBE REPRESENTATIVE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS, DAMAGES, CLAIMS OR COSTS OR FOR ANY CLAIM BY ANY THIRD PARTY.  THE FOREGOING LIMITATIONS AND EXCLUSIONS APPLY TO THE EXTENT PERMITTED BY APPLICABLE LAW IN YOUR JURISDICTION.  ADOBES AGGREGATE LIABILITY AND THAT OF ITS SUPPLIERS  UNDER OR IN CONNECTION WITH THIS AGREEMENT SHALL BE LIMITED TO THE AMOUNT PAID FOR THE SOFTWARE, IF ANY. Nothing contained in this Agreement limits Adobes liability to you in the event of death or personal injury resulting from Adobes negligence or for the tort of deceit (fraud). Adobe is acting on behalf of its suppliers for the purpose of disclaiming, excluding and/or limiting obligations, warranties and liability as provided in this Agreement, but in no other respects and for no other purpose. For further information, please see the jurisdiction specific information at the end of this Agreement, if any, or contact Adobes Customer Support Department.

8.  Export Rules. You agree that the Software will not be shipped, transferred or exported into any country or used in any manner prohibited by the United States Export Administration Act or any other export laws, restrictions or regulations (collectively the "Export Laws"). In addition, if the Software is identified as an export controlled item under the Export Laws, you represent and warrant that you are not a citizen of, or located within, an embargoed or otherwise restricted nation (including without limitation Iran, Iraq, Syria, Sudan, Libya, Cuba and North Korea) and that you are not otherwise prohibited under the Export Laws from receiving the Software. All rights to use the Software are granted on condition that such rights are forfeited if you fail to comply with the terms of this agreement.

9.  Governing Law. This agreement will be governed by and construed in accordance with the substantive laws in force in: (a) the State of California, if a license to the Software is purchased when you are in the United States, Canada, or Mexico; or (b) Japan, if a license to the Software is purchased when you are in Japan, China, Korea, or other Southeast Asian country where all official languages are written in either an ideographic script (e.g., hanzi, kanji, or hanja), and/or other script based upon or similar in structure to an ideographic script, such as hangul or kana; or (c) England, if a license to the Software is purchased when you are in any jurisdiction not described above. The respective courts of Santa Clara County, California when California law applies, Tokyo District Court in Japan, when Japanese law applies, and the competent courts of London, England, when the law of England applies, shall each have non-exclusive jurisdiction over all disputes relating to this agreement. This agreement will not be governed by the conflict of law rules of any jurisdiction or the United Nations Convention on Contracts for the International Sale of Goods, the application of which is expressly excluded. 

10.  General Provisions. If any part of this agreement is found void and unenforceable, it will not affect the validity of the balance of this agreement, which will remain valid and enforceable according to its terms. This agreement will not prejudice the statutory rights of any party dealing as a consumer. For example, for consumers in New Zealand who obtain the Software for personal, domestic or household use (not business purposes), this agreement is subject to the Consumer Guarantees Act. This agreement may only be modified by a writing signed by an authorized officer of Adobe. The English version of this agreement will be the version used when interpreting or construing this agreement. This is the entire agreement between Adobe and you relating to the Software and it supersedes any prior representations, discussions, undertakings, communications or advertising relating to the Software.

11.  Notice to U.S. Government End Users.

11.1  Commercial Items. The Software and Documentation are "Commercial Item(s)," as that term is defined at 48 C.F.R. Section 2.101, consisting of "Commercial Computer Software" and "Commercial Computer Software Documentation," as such terms are used in 48 C.F.R. 12.212 or 48 C.F.R. 227.7202, as applicable. Consistent with 48 C.F.R. 12.212 or 48 C.F.R. Sections 227.7202-1 through 227.7202-4, as applicable, the Commercial Computer Software and Commercial Computer Software Documentation are being licensed to U.S. Government end users (a) only as Commercial Items and (b) with only those rights as are granted to all other end users pursuant to the terms and conditions herein. Unpublished-rights reserved under the copyright laws of the United States. Adobe Systems Incorporated, 345 Park Avenue, San Jose, CA 95110-2704, USA. 

11.2  U.S. Government Licensing of Adobe Technology. You agree that when licensing Adobe Software for acquisition by the U.S. Government, or any contractor therefore, you will license consistent with the policies set forth in 48 C.F.R. Section 12.212 (for civilian agencies) and 48 C.F.R. Sections 227-7202-1 and 227-7202-4 (for the Department of Defense). For U.S. Government End Users, Adobe agrees to comply with all applicable equal opportunity laws including, if appropriate, the provisions of Executive Order 11246, as amended, Section 402 of the Vietnam Era Veterans Readjustment Assistance Act of 1974 (38 USC 4212), and Section 503 of the Rehabilitation Act of 1973, as amended, and the regulations at 41 CFR Parts 60-1 through 60-60, 60-250, and 60-741. The affirmative action clause and regulations contained in the preceding sentence will be incorporated by reference in this agreement.

12.  Compliance with Licenses. If you are a business, company or organization, you agree that upon request from Adobe or its authorized representative you will within thirty (30) days fully document and certify that use of any and all Adobe software at the time of the request is in conformity with your valid licenses from Adobe.

13.  Specific Provisions and Exceptions. This section sets forth specific provisions related to certain components of the Software as well as limited exceptions to the above terms and conditions. To the extent that any provision in this section is in conflict with any other term or condition in this agreement, this section will supersede such other term or condition.

13.1  Limited Warranty for Users Residing in Germany or Austria. If you obtained the Software in Germany or Austria, and you usually reside in such country, then Section 6 does not apply; instead, Adobe warrants that the Software provides the functionalities set forth in the Documentation (the "agreed upon functionalities") for the limited warranty period following receipt of the Software when used on the recommended hardware configuration. As used in this Section, "limited warranty period" means one (1) year if you are a business user and two (2) years if you are not a business user. Non-substantial variation from the agreed upon functionalities will not and does not establish any warranty rights. THIS LIMITED WARRANTY DOES NOT APPLY TO SOFTWARE PROVIDED TO YOU FREE OF CHARGE, FOR EXAMPLE, UPDATES, PRE-RELEASE, TRYOUT, STARTER, PRODUCT SAMPLER AND NOT FOR RESALE (NFR) COPIES OF SOFTWARE, OR TO FONT SOFTWARE CONVERTED INTO OTHER FORMATS, WEB SITES, ONLINE SERVICES, CD SERVICES OR SOFTWARE THAT HAS BEEN ALTERED BY YOU, TO THE EXTENT SUCH ALTERATION CAUSED A DEFECT. To make a warranty claim, during the limited warranty period you must return, at our expense, the Software and proof of purchase to the location where you obtained it. If the functionalities of the Software vary substantially from the agreed upon functionalities, Adobe is entitled -- by way of re-performance and at its own discretion -- to repair or replace the Software. If this fails, you are entitled to a reduction of the purchase price (reduction) or to cancel the purchase agreement (rescission). For further warranty information, please contact the Adobe Customer Support Department.

13.2  Limitation of Liability for Users Residing in Germany and Austria. 

13.2.1  If you obtained the Software in Germany or Austria, and you usually reside in such country, then Section 7 does not apply. Instead, subject to the provisions in Section 13.2.2, Adobe and its affiliates' statutory liability for damages will be limited as follows:  (i) Adobe and its affiliates will be liable only up to the amount of damages as typically foreseeable at the time of entering into the purchase agreement in respect of damages caused by a slightly negligent breach of a material contractual obligation and (ii) Adobe and its affiliates will not be liable for damages caused by a slightly negligent breach of a non-material contractual obligation.

13.2.2  The aforesaid limitation of liability will not apply to any mandatory statutory liability, in particular, to liability under the German Product Liability Act, liability for assuming a specific guarantee or liability for culpably caused personal injuries.

13.2.3  You are required to take all reasonable measures to avoid and reduce damages, in particular to make back-up copies of the Software and your computer data subject to the provisions of this agreement.

13.3  Pre-release Software Additional Terms. If the Software is pre-commercial release or beta software ("Pre-release Software"), then this Section applies. The Pre-release Software is a pre-release version, does not represent final product from Adobe, and may contain bugs, errors and other problems that could cause system or other failures and data loss. Adobe may never commercially release the Pre-release Software. If you received the Pre-release Software pursuant to a separate written agreement, such as the Adobe Systems Incorporated Serial Agreement for Unreleased Products, your use of the Software is also governed by such agreement. You will return or destroy all copies of Pre-release Software upon request by Adobe or upon Adobe's commercial release of such Software. YOUR USE OF PRE-RELEASE SOFTWARE IS AT YOUR OWN RISK. 

13.4  Tryout, Product Sampler, NFR, Additional Terms. If the Software is  tryout, starter, product sampler, or NFR software ("Tryout Software"), then the following Section applies. The Tryout Software may contain limited functionality and is to be used for demonstration and evaluation purposes only and not for your commercial purposes. YOUR USE OF TRYOUT SOFTWARE IS AT YOUR OWN RISK.

13.5 Time Out Software. If the Software is a timeout version then it will cease operations after a designated period of time or number of launches following installation. The license hereunder will terminate after such period or number of launches unless extended by Adobe upon your acquisition of a full retail license. ACCESS TO ANY FILES OR OUTPUT CREATED WITH SUCH SOFTWARE OR ANY PRODUCT ASSOCIATED WITH SUCH SOFTWARE IS ENTIRELY AT YOUR OWN RISK.

13.6  Educational Software Product. If the Software accompanying this agreement is Educational Software Product (Software manufactured and distributed for use by only Educational End Users), you are not entitled to use the Software unless you qualify in your jurisdiction as an Educational End User. Please visit http://www.adobe.com/education/purchasing to learn if you qualify. To find an Adobe Authorized Academic Reseller in your area, please visit http://www.adobe.com/store and look for the link for Buying Adobe Products Worldwide.

13.7. Font Software. If the Software includes font software -- 

13.7.1 You may use the font software with the Software on Computers as described in Section 2 and output the font software to any output device(s) connected to such Computer(s). 

13.7.2 If the Permitted Number of Computers is five or fewer, you may download the font software to the memory (hard disk or RAM) of one output device connected to at least one of such Computers for the purpose of having the font software remain resident in such output device, and of one more such output device for every multiple of five represented by the Permitted Number of Computers. 

13.7.3 You may take a copy of the font(s) you have used for a particular file to a commercial printer or other service bureau, and such service bureau may use the font(s) to process your file, provided such service bureau has a valid license to use that particular font software. 

13.7.4 You may convert and install the font software into another format for use in other environments, subject to the following conditions: A computer on which the converted font software is used or installed will be considered as one of your Permitted Number of Computers. Use of the font software you have converted will be pursuant to all the terms and conditions of this agreement. Such converted font software may be used only for your own customary internal business or personal use and may not be distributed or transferred for any purpose, except in accordance with Section 4.4 of this agreement.

13.7.5 You may embed copies of the font software into your electronic documents for the purpose of printing and viewing the document. If the font software you are embedding is identified as "licensed for editable embedding" on Adobes website at http://www.adobe.com/type/browser/legal/embeddingeula.html, you may also embed copies of that font software for the additional purpose of editing your electronic documents. No other embedding rights are implied or permitted under this license.

13.8  Online Services.

13.8.1 The Software may rely upon or facilitate your access to websites maintained by Adobe or its affiliates or third parties offering goods, information, software and services ("Online Services"). Your access to and use of any website is governed by the terms, conditions, disclaimers and notices found on such site, for example, the Terms of Use located at http://www.adobe.com/misc/copyright.html. Adobe may at any time, for any reason, modify or discontinue the availability of any website and Online Services.

13.8.2  Adobe does not control, endorse or accept responsibility for websites or Online Services offered by third parties. Any dealings between you and any third party in connection with a website or Online Services, including delivery of and payment for goods and services and any other terms, conditions, warranties or representations associated with such dealings, are solely between you and such third party.

13.8.3 EXCEPT AS EXPRESSLY AGREED BY ADOBE OR ITS AFFILIATES OR A THIRD PARTY IN A SEPARATE AGREEMENT, YOUR USE OF WEBSITES AND ONLINE SERVICES IS AT YOUR OWN RISK UNDER THE WARRANTY AND LIABILITY LIMITATIONS OF SECTIONS 6 AND7.

13.9 After Effects Professional Render Engine. If the Software includes the full version of Adobe After Effects Professional, then you may install an unlimited number of Render Engines on Computers within your Internal Network that includes at least one Computer on which the full version of the Adobe After Effects Professional software is installed. The term "Render Engine" means an installable portion of the Software that allows After Effects projects to be rendered but cannot be used to create or modify projects and does not include the complete After Effects user interface.

13.10  GoLive Co-Author. If the Software includes Adobe Creative Suite or Adobe GoLive software and includes the GoLive Co-Author software component, then as an alternative to installing and using a single copy of GoLive Co-Author software with the other Software components as permitted in Section 2.1, you may either (a) install and use the GoLive Co-Author software on a Permitted Number of your Computers on which the other Software components are not installed or (b) distribute one copy of GoLive Co-Author software to a Permitted Number of individuals or legal entities for installation and use by each such individual or entity on one Computer; provided that each such individual or entity accepts the terms and conditions of this agreement and any other terms and conditions under which you purchased a valid license to the Software. Such individual or entity may not further distribute GoLive Co-Author software. If the Software is GoLive Co-Author software that you obtained on a standalone basis (i.e., not as a part of Adobe  Creative Suite or GoLive software), then this Section does not apply.

13.11   Version Cue Software. If the Software includes Adobe Creative Suite software and the Version Cue software components, then as an alternative to installing and using a single copy of the Version Cue workspace component with the other components of the Software as permitted in Section 2.1, you may install the Version Cue workspace component on one Computer file server within your Internal Network that includes at least one computer on which Adobe Creative Suite software is installed. You may use Version Cue workspace software only for the purpose of operating a workspace accessible only by Computers on such Internal Network. No other network use is permitted, including, but not limited to enabling Internet or web hosted workgroups or services.

13.12  Certified Documents. If the Software allows you to author and validate Certified Documents, then this Section applies.

13.12.1  Certified Documents and CD Services. A "Certified Document" or "CD" is a PDF file that has been digitally signed using (a) the Software CD feature set; (b) a certificate; and (c) a "private" encryption key that corresponds to the "public" key in the certificate. Authoring of a CD requires that you obtain a certificate from an authorized CD Service Provider. "CD Service Provider" is an independent third party service vendor listed at http://www.adobe.com/security/partners_cds.html. Validation of a CD requires CD Services from the CD Service Provider that issued the certificate. "CD Services" are services provided by CD Service Providers, including but not limited to (a) certificates issued by such CD Service Provider for use with the Softwares CD feature set; (b) services related to issuance of certificates; and (c) other services related to certificates, including but not limited to verification services.

13.12.2  CD Service Providers. Although the Software provides CD authoring and validation features, Adobe does not supply the necessary CD Services required to use these features. Purchasing, availability and responsibility for the CD Services are between you and the CD Service Provider. Before you rely upon any CD, any digital signature applied thereto, and/or any related CD Services, you must first review and agree to the applicable Issuer Statement and this agreement. "Issuer Statement" means the terms and conditions under which each CD Service Provider offers CD Services (see the links on http://www.adobe.com/security/partners_cds.html), including for example any subscriber agreements, relying party agreements, certificate policies and practice statements, and Section 13.12 of this agreement. By validating a CD using CD Services, you acknowledge and agree that (a) the certificate used to digitally sign a CD may be revoked at the time of verification, making the digital signature on the CD appear valid when in fact it is not; (b) the security or integrity of a CD may be compromised due to an act or omission by the signer of the CD, the applicable CD Service Provider, or any other third party; and (c) you must read, understand, and be bound by the applicable Issuer Statement.

13.12.3  Warranty Disclaimer and Limitation of Liability. CD Service Providers offer CD Services solely in accordance with the applicable Issuer Statement. EXCEPT AS MAY BE PROVIDED IN AN ISSUER STATEMENT, YOUR USE OF CD SERVICES IS AT YOUR OWN RISK.

13.12.4  Indemnity. You agree to hold Adobe and any applicable CD Service Provider (except as expressly provided in its Issuer Statement) harmless from any and all liabilities, losses, actions, damages, or claims (including all reasonable expenses, costs, and attorneys fees) arising out of or relating to any use of, or reliance on, any CD Service, including, without limitation (a) reliance on an expired or revoked certificate; (b) improper verification of a certificate; (c) use of a certificate other than as permitted by any applicable Issuer Statement, this agreement or applicable law; (d) failure to exercise reasonable judgment under the circumstances in relying on the CD Services; or (e) failure to perform any of the obligations as required in an applicable Issuer Statement.

13.12.5  Third Party Beneficiaries. You agree that any CD Service Provider you utilize will be a third party beneficiary with respect to this Section of this agreement and that such CD Service Provider will have the right to enforce such provisions in its own name as if the CD Service Provider were Adobe.

13.13  Acrobat Professional Feature.  If the Software includes Acrobat Professional, the Software includes enabling technology that allows you to enable PDF documents with certain features through the use of a digital credential located within the Software (Key).  You agree not to access, attempt to access, control, disable, remove, use or distribute the Key for any purpose.

If you have any questions regarding this agreement or if you wish to request any information from Adobe please use the address and contact information included with this product to contact the Adobe office serving your jurisdiction.

Adobe, After Effects, Co-Author, GoLive and Version Cue are either the registered trademarks or trademarks of Adobe Systems Incorporated in the United States and/or other countries.

iFilter US 092404
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\policheck\x86\LocCultures.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<LocCultures>
  <LocCulture RFC3066Name="ar" LCID="1" EnglishName="Arabic" ISO639_1="ar" ISO639_2="ara" WindowsTLA="ARA" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar">
		<LocCulture RFC3066Name="ar-SA" LCID="1025" EnglishName="Arabic (Saudi Arabia)" ISO639_1="ar" ISO639_2="ara" WindowsTLA="ARA" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar-SA"/>
		<LocCulture RFC3066Name="ar-IQ" LCID="2049" EnglishName="Arabic (Iraq)" ISO639_1="ar" ISO639_2="ara" WindowsTLA="ARI" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar-IQ"/>
		<LocCulture RFC3066Name="ar-EG" LCID="3073" EnglishName="Arabic (Egypt)" ISO639_1="ar" ISO639_2="ara" WindowsTLA="ARE" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar-EG"/>
		<LocCulture RFC3066Name="ar-LY" LCID="4097" EnglishName="Arabic (Libya)" ISO639_1="ar" ISO639_2="ara" WindowsTLA="ARL" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar-LY"/>
		<LocCulture RFC3066Name="ar-DZ" LCID="5121" EnglishName="Arabic (Algeria)" ISO639_1="ar" ISO639_2="ara" WindowsTLA="ARG" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar-DZ"/>
		<LocCulture RFC3066Name="ar-MA" LCID="6145" EnglishName="Arabic (Morocco)" ISO639_1="ar" ISO639_2="ara" WindowsTLA="ARM" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar-MA"/>
		<LocCulture RFC3066Name="ar-TN" LCID="7169" EnglishName="Arabic (Tunisia)" ISO639_1="ar" ISO639_2="ara" WindowsTLA="ART" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar-TN"/>
		<LocCulture RFC3066Name="ar-OM" LCID="8193" EnglishName="Arabic (Oman)" ISO639_1="ar" ISO639_2="ara" WindowsTLA="ARO" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar-OM"/>
		<LocCulture RFC3066Name="ar-YE" LCID="9217" EnglishName="Arabic (Yemen)" ISO639_1="ar" ISO639_2="ara" WindowsTLA="ARY" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar-YE"/>
		<LocCulture RFC3066Name="ar-SY" LCID="10241" EnglishName="Arabic (Syria)" ISO639_1="ar" ISO639_2="ara" WindowsTLA="ARS" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar-SY"/>
		<LocCulture RFC3066Name="ar-JO" LCID="11265" EnglishName="Arabic (Jordan)" ISO639_1="ar" ISO639_2="ara" WindowsTLA="ARJ" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar-JO"/>
		<LocCulture RFC3066Name="ar-LB" LCID="12289" EnglishName="Arabic (Lebanon)" ISO639_1="ar" ISO639_2="ara" WindowsTLA="ARB" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar-LB"/>
		<LocCulture RFC3066Name="ar-KW" LCID="13313" EnglishName="Arabic (Kuwait)" ISO639_1="ar" ISO639_2="ara" WindowsTLA="ARK" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar-KW"/>
		<LocCulture RFC3066Name="ar-AE" LCID="14337" EnglishName="Arabic (U.A.E.)" ISO639_1="ar" ISO639_2="ara" WindowsTLA="ARU" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar-AE"/>
		<LocCulture RFC3066Name="ar-BH" LCID="15361" EnglishName="Arabic (Bahrain)" ISO639_1="ar" ISO639_2="ara" WindowsTLA="ARH" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar-BH"/>
		<LocCulture RFC3066Name="ar-QA" LCID="16385" EnglishName="Arabic (Qatar)" ISO639_1="ar" ISO639_2="ara" WindowsTLA="ARQ" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar-QA"/>
                <LocCulture RFC3066Name="qps-plocm" LCID="2559" EnglishName="Pseudo (Mirror)" ISO639_1="ar" ISO639_2="ara" WindowsTLA="ARA" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar-SA" />
	</LocCulture>
	<LocCulture RFC3066Name="bg" LCID="2" EnglishName="Bulgarian" ISO639_1="bg" ISO639_2="bul" WindowsTLA="BGR" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="bg">
		<LocCulture RFC3066Name="bg-BG" LCID="1026" EnglishName="Bulgarian (Bulgaria)" ISO639_1="bg" ISO639_2="bul" WindowsTLA="BGR" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="bg-BG"/>
	</LocCulture>
	<LocCulture RFC3066Name="ca" LCID="3" EnglishName="Catalan" ISO639_1="ca" ISO639_2="cat" WindowsTLA="CAT" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="ca">
		<LocCulture RFC3066Name="ca-ES" LCID="1027" EnglishName="Catalan (Catalan)" ISO639_1="ca" ISO639_2="cat" WindowsTLA="CAT" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="ca-ES"/>
	</LocCulture>
	<LocCulture RFC3066Name="zh-CHS" LCID="4" EnglishName="Chinese (Simplified)" ISO639_1="zh" ISO639_2="zho" WindowsTLA="CHS" ANSICodePage="936" OEMCodePage="936" MacCodePage="10008" RightToLeft="0" BuiltInCultureInfo="zh-CHS">
		<LocCulture RFC3066Name="zh-CN" LCID="2052" EnglishName="Chinese (PRC)" ISO639_1="zh" ISO639_2="zho" WindowsTLA="CHS" ANSICodePage="936" OEMCodePage="936" MacCodePage="10008" RightToLeft="0" BuiltInCultureInfo="zh-CN"/>
		<LocCulture RFC3066Name="zh-SG" LCID="4100" EnglishName="Chinese (Singapore)" ISO639_1="zh" ISO639_2="zho" WindowsTLA="ZHI" ANSICodePage="936" OEMCodePage="936" MacCodePage="10008" RightToLeft="0" BuiltInCultureInfo="zh-SG"/>
	</LocCulture>
	<LocCulture RFC3066Name="cs" LCID="5" EnglishName="Czech" ISO639_1="cs" ISO639_2="ces" WindowsTLA="CSY" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="cs">
		<LocCulture RFC3066Name="cs-CZ" LCID="1029" EnglishName="Czech (Czech Republic)" ISO639_1="cs" ISO639_2="ces" WindowsTLA="CSY" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="cs-CZ"/>
	</LocCulture>
	<LocCulture RFC3066Name="da" LCID="6" EnglishName="Danish" ISO639_1="da" ISO639_2="dan" WindowsTLA="DAN" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="da">
		<LocCulture RFC3066Name="da-DK" LCID="1030" EnglishName="Danish (Denmark)" ISO639_1="da" ISO639_2="dan" WindowsTLA="DAN" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="da-DK"/>
	</LocCulture>
	<LocCulture RFC3066Name="de" LCID="7" EnglishName="German" ISO639_1="de" ISO639_2="deu" WindowsTLA="DEU" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="de">
		<LocCulture RFC3066Name="de-DE" LCID="1031" EnglishName="German (Germany)" ISO639_1="de" ISO639_2="deu" WindowsTLA="DEU" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="de-DE"/>
		<LocCulture RFC3066Name="de-CH" LCID="2055" EnglishName="German (Switzerland)" ISO639_1="de" ISO639_2="deu" WindowsTLA="DES" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="de-CH"/>
		<LocCulture RFC3066Name="de-AT" LCID="3079" EnglishName="German (Austria)" ISO639_1="de" ISO639_2="deu" WindowsTLA="DEA" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="de-AT"/>
		<LocCulture RFC3066Name="de-LU" LCID="4103" EnglishName="German (Luxembourg)" ISO639_1="de" ISO639_2="deu" WindowsTLA="DEL" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="de-LU"/>
		<LocCulture RFC3066Name="de-LI" LCID="5127" EnglishName="German (Liechtenstein)" ISO639_1="de" ISO639_2="deu" WindowsTLA="DEC" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="de-LI"/>
	</LocCulture>
	<LocCulture RFC3066Name="el" LCID="8" EnglishName="Greek" ISO639_1="el" ISO639_2="ell" WindowsTLA="ELL" ANSICodePage="1253" OEMCodePage="737" MacCodePage="10006" RightToLeft="0" BuiltInCultureInfo="el">
		<LocCulture RFC3066Name="el-GR" LCID="1032" EnglishName="Greek (Greece)" ISO639_1="el" ISO639_2="ell" WindowsTLA="ELL" ANSICodePage="1253" OEMCodePage="737" MacCodePage="10006" RightToLeft="0" BuiltInCultureInfo="el-GR"/>
		<LocCulture RFC3066Name="el-GR-2" LCID="8200" EnglishName="Greek 2 (Greece)" ISO639_1="el" ISO639_2="ell" WindowsTLA="ELL" ANSICodePage="1253" OEMCodePage="869" MacCodePage="10006" RightToLeft="0" BuiltInCultureInfo="el-GR"/>
    	</LocCulture>
	<LocCulture RFC3066Name="en" LCID="9" EnglishName="English" ISO639_1="en" ISO639_2="eng" WindowsTLA="ENU" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="en">
		<LocCulture RFC3066Name="en-US" LCID="1033" EnglishName="English (United States)" ISO639_1="en" ISO639_2="eng" WindowsTLA="ENU" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="en-US"/>
		<LocCulture RFC3066Name="en-GB" LCID="2057" EnglishName="English (United Kingdom)" ISO639_1="en" ISO639_2="eng" WindowsTLA="ENG" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="en-GB"/>
		<LocCulture RFC3066Name="en-AU" LCID="3081" EnglishName="English (Australia)" ISO639_1="en" ISO639_2="eng" WindowsTLA="ENA" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="en-AU"/>
		<LocCulture RFC3066Name="en-CA" LCID="4105" EnglishName="English (Canada)" ISO639_1="en" ISO639_2="eng" WindowsTLA="ENC" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="en-CA"/>
		<LocCulture RFC3066Name="en-NZ" LCID="5129" EnglishName="English (New Zealand)" ISO639_1="en" ISO639_2="eng" WindowsTLA="ENZ" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="en-NZ"/>
		<LocCulture RFC3066Name="en-IE" LCID="6153" EnglishName="English (Ireland)" ISO639_1="en" ISO639_2="eng" WindowsTLA="ENI" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="en-IE"/>
		<LocCulture RFC3066Name="en-ZA" LCID="7177" EnglishName="English (South Africa)" ISO639_1="en" ISO639_2="eng" WindowsTLA="ENS" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="en-ZA"/>
		<LocCulture RFC3066Name="en-JM" LCID="8201" EnglishName="English (Jamaica)" ISO639_1="en" ISO639_2="eng" WindowsTLA="ENJ" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="en-JM"/>
		<LocCulture RFC3066Name="en-029" LCID="9225" EnglishName="English (Caribbean)" ISO639_1="en" ISO639_2="eng" WindowsTLA="ENB" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
		<LocCulture RFC3066Name="en-BZ" LCID="10249" EnglishName="English (Belize)" ISO639_1="en" ISO639_2="eng" WindowsTLA="ENL" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="en-BZ"/>
		<LocCulture RFC3066Name="en-TT" LCID="11273" EnglishName="English (Trinidad and Tobago)" ISO639_1="en" ISO639_2="eng" WindowsTLA="ENT" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="en-TT"/>
		<LocCulture RFC3066Name="en-ZW" LCID="12297" EnglishName="English (Zimbabwe)" ISO639_1="en" ISO639_2="eng" WindowsTLA="ENW" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="en-ZW"/>
		<LocCulture RFC3066Name="en-PH" LCID="13321" EnglishName="English (Republic of the Philippines)" ISO639_1="en" ISO639_2="eng" WindowsTLA="ENP" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="en-PH"/>
		<LocCulture RFC3066Name="en-IN" LCID="16393" EnglishName="English (India)" ISO639_1="en" ISO639_2="eng" WindowsTLA="ENN" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="en-GB"/> 
		<LocCulture RFC3066Name="en-MY" LCID="17417" EnglishName="English (Malaysia)" ISO639_1="en" ISO639_2="eng" WindowsTLA="ENM" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="en-GB"/>
		<LocCulture RFC3066Name="en-SG" LCID="18441" EnglishName="English (Singapore)" ISO639_1="en" ISO639_2="eng" WindowsTLA="ENE" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="en-GB"/> 
                <LocCulture RFC3066Name="qps-ploc" LCID="1281" EnglishName="Pseudo Language (Pseudo Country)" ISO639_1="en" ISO639_2="eng" WindowsTLA="ENU" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="en-US" />
	</LocCulture>
	<LocCulture RFC3066Name="es" LCID="10" EnglishName="Spanish" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESP" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es">
        	<LocCulture RFC3066Name="es-es_tradnl" LCID="1034" EnglishName="Spanish, Traditional Sort (Spain)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESP" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	        <LocCulture RFC3066Name="es-MX" LCID="2058" EnglishName="Spanish (Mexico)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESM" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-MX"/>
		<LocCulture RFC3066Name="es-ES" LCID="3082" EnglishName="Spanish, International Sort (Spain)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESN" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-ES"/>
		<LocCulture RFC3066Name="es-GT" LCID="4106" EnglishName="Spanish (Guatemala)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESG" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-GT"/>
		<LocCulture RFC3066Name="es-CR" LCID="5130" EnglishName="Spanish (Costa Rica)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESC" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-CR"/>
		<LocCulture RFC3066Name="es-PA" LCID="6154" EnglishName="Spanish (Panama)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESA" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-PA"/>
		<LocCulture RFC3066Name="es-DO" LCID="7178" EnglishName="Spanish (Dominican Republic)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESD" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-DO"/>
		<LocCulture RFC3066Name="es-VE" LCID="8202" EnglishName="Spanish (Venezuela)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESV" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-VE"/>
		<LocCulture RFC3066Name="es-CO" LCID="9226" EnglishName="Spanish (Colombia)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESO" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-CO"/>
		<LocCulture RFC3066Name="es-PE" LCID="10250" EnglishName="Spanish (Peru)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESR" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-PE"/>
		<LocCulture RFC3066Name="es-AR" LCID="11274" EnglishName="Spanish (Argentina)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESS" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-AR"/>
		<LocCulture RFC3066Name="es-EC" LCID="12298" EnglishName="Spanish (Ecuador)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESF" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-EC"/>
		<LocCulture RFC3066Name="es-CL" LCID="13322" EnglishName="Spanish (Chile)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESL" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-CL"/>
		<LocCulture RFC3066Name="es-UY" LCID="14346" EnglishName="Spanish (Uruguay)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESY" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-UY"/>
		<LocCulture RFC3066Name="es-PY" LCID="15370" EnglishName="Spanish (Paraguay)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESZ" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-PY"/>
		<LocCulture RFC3066Name="es-BO" LCID="16394" EnglishName="Spanish (Bolivia)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESB" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-BO"/>
		<LocCulture RFC3066Name="es-SV" LCID="17418" EnglishName="Spanish (El Salvador)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESE" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-SV"/>
		<LocCulture RFC3066Name="es-HN" LCID="18442" EnglishName="Spanish (Honduras)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESH" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-HN"/>
		<LocCulture RFC3066Name="es-NI" LCID="19466" EnglishName="Spanish (Nicaragua)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESI" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-NI"/>
		<LocCulture RFC3066Name="es-PR" LCID="20490" EnglishName="Spanish (Puerto Rico)" ISO639_1="es" ISO639_2="spa" WindowsTLA="ESU" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es-PR"/>
		<LocCulture RFC3066Name="es-US" LCID="21514" EnglishName="Spanish (United States)" ISO639_1="es" ISO639_2="spa" WindowsTLA="EST" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="es"/>
	</LocCulture>
	<LocCulture RFC3066Name="fi" LCID="11" EnglishName="Finnish" ISO639_1="fi" ISO639_2="fin" WindowsTLA="FIN" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="fi">
		<LocCulture RFC3066Name="fi-FI" LCID="1035" EnglishName="Finnish (Finland)" ISO639_1="fi" ISO639_2="fin" WindowsTLA="FIN" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="fi-FI"/>
	</LocCulture>
	<LocCulture RFC3066Name="fr" LCID="12" EnglishName="French" ISO639_1="fr" ISO639_2="fra" WindowsTLA="FRA" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="fr">
		<LocCulture RFC3066Name="fr-FR" LCID="1036" EnglishName="French (France)" ISO639_1="fr" ISO639_2="fra" WindowsTLA="FRA" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="fr-FR"/>
		<LocCulture RFC3066Name="fr-BE" LCID="2060" EnglishName="French (Belgium)" ISO639_1="fr" ISO639_2="fra" WindowsTLA="FRB" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="fr-BE"/>
		<LocCulture RFC3066Name="fr-CA" LCID="3084" EnglishName="French (Canada)" ISO639_1="fr" ISO639_2="fra" WindowsTLA="FRC" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="fr-CA"/>
		<LocCulture RFC3066Name="fr-CH" LCID="4108" EnglishName="French (Switzerland)" ISO639_1="fr" ISO639_2="fra" WindowsTLA="FRS" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="fr-CH"/>
		<LocCulture RFC3066Name="fr-LU" LCID="5132" EnglishName="French (Luxembourg)" ISO639_1="fr" ISO639_2="fra" WindowsTLA="FRL" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="fr-LU"/>
		<LocCulture RFC3066Name="fr-MC" LCID="6156" EnglishName="French (Monaco)" ISO639_1="fr" ISO639_2="fra" WindowsTLA="FRM" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="fr-MC"/>
	</LocCulture>
	<LocCulture RFC3066Name="he" LCID="13" EnglishName="Hebrew" ISO639_1="he" ISO639_2="heb" WindowsTLA="HEB" ANSICodePage="1255" OEMCodePage="862" MacCodePage="10005" RightToLeft="1" BuiltInCultureInfo="he">
		<LocCulture RFC3066Name="he-IL" LCID="1037" EnglishName="Hebrew (Israel)" ISO639_1="he" ISO639_2="heb" WindowsTLA="HEB" ANSICodePage="1255" OEMCodePage="862" MacCodePage="10005" RightToLeft="1" BuiltInCultureInfo="he-IL"/>
	</LocCulture>
	<LocCulture RFC3066Name="hu" LCID="14" EnglishName="Hungarian" ISO639_1="hu" ISO639_2="hun" WindowsTLA="HUN" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="hu">
		<LocCulture RFC3066Name="hu-HU" LCID="1038" EnglishName="Hungarian (Hungary)" ISO639_1="hu" ISO639_2="hun" WindowsTLA="HUN" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="hu-HU"/>
	</LocCulture>
	<LocCulture RFC3066Name="is" LCID="15" EnglishName="Icelandic" ISO639_1="is" ISO639_2="isl" WindowsTLA="ISL" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10079" RightToLeft="0" BuiltInCultureInfo="is">
		<LocCulture RFC3066Name="is-IS" LCID="1039" EnglishName="Icelandic (Iceland)" ISO639_1="is" ISO639_2="isl" WindowsTLA="ISL" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10079" RightToLeft="0" BuiltInCultureInfo="is-IS"/>
	</LocCulture>
	<LocCulture RFC3066Name="it" LCID="16" EnglishName="Italian" ISO639_1="it" ISO639_2="ita" WindowsTLA="ITA" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="it">
		<LocCulture RFC3066Name="it-IT" LCID="1040" EnglishName="Italian (Italy)" ISO639_1="it" ISO639_2="ita" WindowsTLA="ITA" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="it-IT"/>
		<LocCulture RFC3066Name="it-CH" LCID="2064" EnglishName="Italian (Switzerland)" ISO639_1="it" ISO639_2="ita" WindowsTLA="ITS" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="it-CH"/>
	</LocCulture>
	<LocCulture RFC3066Name="ja" LCID="17" EnglishName="Japanese" ISO639_1="ja" ISO639_2="jpn" WindowsTLA="JPN" ANSICodePage="932" OEMCodePage="932" MacCodePage="10001" RightToLeft="0" BuiltInCultureInfo="ja">
		<LocCulture RFC3066Name="ja-JP" LCID="1041" EnglishName="Japanese (Japan)" ISO639_1="ja" ISO639_2="jpn" WindowsTLA="JPN" ANSICodePage="932" OEMCodePage="932" MacCodePage="10001" RightToLeft="0" BuiltInCultureInfo="ja-JP"/>
                <LocCulture RFC3066Name="qps-ploca" LCID="1534" EnglishName="Pseudo (Asia)" ISO639_1="qps" ISO639_2="jpn" WindowsTLA="JPN" ANSICodePage="932" OEMCodePage="932" MacCodePage="10001" RightToLeft="0" BuiltInCultureInfo="ja-JP" />
	</LocCulture>
	<LocCulture RFC3066Name="ko" LCID="18" EnglishName="Korean" ISO639_1="ko" ISO639_2="kor" WindowsTLA="KOR" ANSICodePage="949" OEMCodePage="949" MacCodePage="10003" RightToLeft="0" BuiltInCultureInfo="ko">
		<LocCulture RFC3066Name="ko-KR" LCID="1042" EnglishName="Korean (Korea)" ISO639_1="ko" ISO639_2="kor" WindowsTLA="KOR" ANSICodePage="949" OEMCodePage="949" MacCodePage="10003" RightToLeft="0" BuiltInCultureInfo="ko-KR"/>
	</LocCulture>
	<LocCulture RFC3066Name="nl" LCID="19" EnglishName="Dutch" ISO639_1="nl" ISO639_2="nld" WindowsTLA="NLD" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="nl">
		<LocCulture RFC3066Name="nl-NL" LCID="1043" EnglishName="Dutch (Netherlands)" ISO639_1="nl" ISO639_2="nld" WindowsTLA="NLD" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="nl-NL"/>
		<LocCulture RFC3066Name="nl-BE" LCID="2067" EnglishName="Dutch (Belgium)" ISO639_1="nl" ISO639_2="nld" WindowsTLA="NLB" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="nl-BE"/>
	</LocCulture>
	<LocCulture RFC3066Name="no" LCID="20" EnglishName="Norwegian" ISO639_1="no" ISO639_2="nor" WindowsTLA="NOR" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="no">
		<LocCulture RFC3066Name="nb-NO" LCID="1044" EnglishName="Norwegian, Bokmål (Norway)" ISO639_1="nb" ISO639_2="nob" WindowsTLA="NOR" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="nb-NO"/>
		<LocCulture RFC3066Name="nn-NO" LCID="2068" EnglishName="Norwegian, Nynorsk (Norway)" ISO639_1="nn" ISO639_2="nno" WindowsTLA="NON" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="nn-NO"/>
	</LocCulture>
	<LocCulture RFC3066Name="pl" LCID="21" EnglishName="Polish" ISO639_1="pl" ISO639_2="pol" WindowsTLA="PLK" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="pl">
		<LocCulture RFC3066Name="pl-PL" LCID="1045" EnglishName="Polish (Poland)" ISO639_1="pl" ISO639_2="pol" WindowsTLA="PLK" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="pl-PL"/>
	</LocCulture>
	<LocCulture RFC3066Name="pt" LCID="22" EnglishName="Portuguese" ISO639_1="pt" ISO639_2="por" WindowsTLA="PTB" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="pt">
		<LocCulture RFC3066Name="pt-BR" LCID="1046" EnglishName="Portuguese (Brazil)" ISO639_1="pt" ISO639_2="por" WindowsTLA="PTB" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="pt-BR"/>
		<LocCulture RFC3066Name="pt-PT" LCID="2070" EnglishName="Portuguese (Portugal)" ISO639_1="pt" ISO639_2="por" WindowsTLA="PTG" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="pt-PT"/>
	</LocCulture>
	<LocCulture RFC3066Name="rm" LCID="23" EnglishName="Romansh" ISO639_1="rm" ISO639_2="roh" WindowsTLA="RMC" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="rm-CH" LCID="1047" EnglishName="Romansh (Switzerland)" ISO639_1="rm" ISO639_2="roh" WindowsTLA="RMC" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	</LocCulture>
	<LocCulture RFC3066Name="ro" LCID="24" EnglishName="Romanian" ISO639_1="ro" ISO639_2="ron" WindowsTLA="ROM" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="ro">
		<LocCulture RFC3066Name="ro-RO" LCID="1048" EnglishName="Romanian (Romania)" ISO639_1="ro" ISO639_2="ron" WindowsTLA="ROM" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="ro-RO"/>
	</LocCulture>
	<LocCulture RFC3066Name="ru" LCID="25" EnglishName="Russian" ISO639_1="ru" ISO639_2="rus" WindowsTLA="RUS" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="ru">
		<LocCulture RFC3066Name="ru-RU" LCID="1049" EnglishName="Russian (Russia)" ISO639_1="ru" ISO639_2="rus" WindowsTLA="RUS" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="ru-RU"/>
	</LocCulture>
	<LocCulture RFC3066Name="hr" LCID="26" EnglishName="Croatian" ISO639_1="hr" ISO639_2="hrv" WindowsTLA="HRV" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10082" RightToLeft="0" BuiltInCultureInfo="hr">
		<LocCulture RFC3066Name="hr-HR" LCID="1050" EnglishName="Croatian (Croatia)" ISO639_1="hr" ISO639_2="hrv" WindowsTLA="HRV" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10082" RightToLeft="0" BuiltInCultureInfo="hr-HR"/>
		<LocCulture RFC3066Name="hr-BA" LCID="4122" EnglishName="Croatian (Latin, Bosnia and Herzegovina)" ISO639_1="hr" ISO639_2="hrb" WindowsTLA="HRB" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10082" RightToLeft="0" BuiltInCultureInfo="hr-HR"/>
	</LocCulture>
	<LocCulture RFC3066Name="sk" LCID="27" EnglishName="Slovak" ISO639_1="sk" ISO639_2="slk" WindowsTLA="SKY" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="sk">
		<LocCulture RFC3066Name="sk-SK" LCID="1051" EnglishName="Slovak (Slovakia)" ISO639_1="sk" ISO639_2="slk" WindowsTLA="SKY" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="sk-SK"/>
	</LocCulture>
	<LocCulture RFC3066Name="sq" LCID="28" EnglishName="Albanian" ISO639_1="sq" ISO639_2="sqi" WindowsTLA="SQI" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="sq">
		<LocCulture RFC3066Name="sq-AL" LCID="1052" EnglishName="Albanian (Albania)" ISO639_1="sq" ISO639_2="sqi" WindowsTLA="SQI" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="sq-AL"/>
	</LocCulture>
	<LocCulture RFC3066Name="sv" LCID="29" EnglishName="Swedish" ISO639_1="sv" ISO639_2="swe" WindowsTLA="SVE" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="sv">
		<LocCulture RFC3066Name="sv-SE" LCID="1053" EnglishName="Swedish (Sweden)" ISO639_1="sv" ISO639_2="swe" WindowsTLA="SVE" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="sv-SE"/>
		<LocCulture RFC3066Name="sv-FI" LCID="2077" EnglishName="Swedish (Finland)" ISO639_1="sv" ISO639_2="swe" WindowsTLA="SVF" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="sv-FI"/>
	</LocCulture>
	<LocCulture RFC3066Name="th" LCID="30" EnglishName="Thai" ISO639_1="th" ISO639_2="tha" WindowsTLA="THA" ANSICodePage="874" OEMCodePage="874" MacCodePage="10021" RightToLeft="0" BuiltInCultureInfo="th">
		<LocCulture RFC3066Name="th-TH" LCID="1054" EnglishName="Thai (Thailand)" ISO639_1="th" ISO639_2="tha" WindowsTLA="THA" ANSICodePage="874" OEMCodePage="874" MacCodePage="10021" RightToLeft="0" BuiltInCultureInfo="th-TH"/>
	</LocCulture>
	<LocCulture RFC3066Name="tr" LCID="31" EnglishName="Turkish" ISO639_1="tr" ISO639_2="tur" WindowsTLA="TRK" ANSICodePage="1254" OEMCodePage="857" MacCodePage="10081" RightToLeft="0" BuiltInCultureInfo="tr">
		<LocCulture RFC3066Name="tr-TR" LCID="1055" EnglishName="Turkish (Turkey)" ISO639_1="tr" ISO639_2="tur" WindowsTLA="TRK" ANSICodePage="1254" OEMCodePage="857" MacCodePage="10081" RightToLeft="0" BuiltInCultureInfo="tr-TR"/>
	</LocCulture>
	<LocCulture RFC3066Name="ur" LCID="32" EnglishName="Urdu" ISO639_1="ur" ISO639_2="urd" WindowsTLA="URD" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ur">
		<LocCulture RFC3066Name="ur-PK" LCID="1056" EnglishName="Urdu (Pakistan)" ISO639_1="ur" ISO639_2="urd" WindowsTLA="URD" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ur-PK"/>
	</LocCulture>
	<LocCulture RFC3066Name="id" LCID="33" EnglishName="Indonesian" ISO639_1="id" ISO639_2="ind" WindowsTLA="IND" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="id">
		<LocCulture RFC3066Name="id-ID" LCID="1057" EnglishName="Indonesian (Indonesia)" ISO639_1="id" ISO639_2="ind" WindowsTLA="IND" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="id-ID"/>
	</LocCulture>
	<LocCulture RFC3066Name="uk" LCID="34" EnglishName="Ukrainian" ISO639_1="uk" ISO639_2="ukr" WindowsTLA="UKR" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10017" RightToLeft="0" BuiltInCultureInfo="uk">
		<LocCulture RFC3066Name="uk-UA" LCID="1058" EnglishName="Ukrainian (Ukraine)" ISO639_1="uk" ISO639_2="ukr" WindowsTLA="UKR" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10017" RightToLeft="0" BuiltInCultureInfo="uk-UA"/>
	</LocCulture>
	<LocCulture RFC3066Name="be" LCID="35" EnglishName="Belarusian" ISO639_1="be" ISO639_2="bel" WindowsTLA="BEL" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="be">
		<LocCulture RFC3066Name="be-BY" LCID="1059" EnglishName="Belarusian (Belarus)" ISO639_1="be" ISO639_2="bel" WindowsTLA="BEL" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="be-BY"/>
	</LocCulture>
	<LocCulture RFC3066Name="sl" LCID="36" EnglishName="Slovenian" ISO639_1="sl" ISO639_2="slv" WindowsTLA="SLV" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="sl">
		<LocCulture RFC3066Name="sl-SI" LCID="1060" EnglishName="Slovenian (Slovenia)" ISO639_1="sl" ISO639_2="slv" WindowsTLA="SLV" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="sl-SI"/>
	</LocCulture>
	<LocCulture RFC3066Name="et" LCID="37" EnglishName="Estonian" ISO639_1="et" ISO639_2="est" WindowsTLA="ETI" ANSICodePage="1257" OEMCodePage="775" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="et">
		<LocCulture RFC3066Name="et-EE" LCID="1061" EnglishName="Estonian (Estonia)" ISO639_1="et" ISO639_2="est" WindowsTLA="ETI" ANSICodePage="1257" OEMCodePage="775" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="et-EE"/>
	</LocCulture>
	<LocCulture RFC3066Name="lv" LCID="38" EnglishName="Latvian" ISO639_1="lv" ISO639_2="lav" WindowsTLA="LVI" ANSICodePage="1257" OEMCodePage="775" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="lv">
		<LocCulture RFC3066Name="lv-LV" LCID="1062" EnglishName="Latvian (Latvia)" ISO639_1="lv" ISO639_2="lav" WindowsTLA="LVI" ANSICodePage="1257" OEMCodePage="775" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="lv-LV"/>
	</LocCulture>
	<LocCulture RFC3066Name="lt" LCID="39" EnglishName="Lithuanian" ISO639_1="lt" ISO639_2="lit" WindowsTLA="LTH" ANSICodePage="1257" OEMCodePage="775" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="lt">
		<LocCulture RFC3066Name="lt-LT" LCID="1063" EnglishName="Lithuanian (Lithuania)" ISO639_1="lt" ISO639_2="lit" WindowsTLA="LTH" ANSICodePage="1257" OEMCodePage="775" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="lt-LT"/>
		<LocCulture RFC3066Name="lt-LT-C" LCID="2087" EnglishName="Lithuanian, Classic (Lithuania)" ISO639_1="lt" ISO639_2="lit" WindowsTLA="LTC" ANSICodePage="1257" OEMCodePage="775" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="lt-LT"/>
	</LocCulture>
	<LocCulture RFC3066Name="tg" LCID="40" EnglishName="Tajik" ISO639_1="tg" ISO639_2="tgk" WindowsTLA="TAJ" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="tg-Cyrl-TJ" LCID="1064" EnglishName="Tajik (Cyrillic, Tajikistan)" ISO639_1="tg" ISO639_2="tgk" WindowsTLA="TAJ" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	</LocCulture>
	<LocCulture RFC3066Name="fa" LCID="41" EnglishName="Persian" ISO639_1="fa" ISO639_2="fas" WindowsTLA="FAR" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="fa">
		<LocCulture RFC3066Name="fa-IR" LCID="1065" EnglishName="Persian (Iran)" ISO639_1="fa" ISO639_2="fas" WindowsTLA="FAR" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="fa-IR"/>
	</LocCulture>
	<LocCulture RFC3066Name="vi" LCID="42" EnglishName="Vietnamese" ISO639_1="vi" ISO639_2="vie" WindowsTLA="VIT" ANSICodePage="1258" OEMCodePage="1258" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="vi">
		<LocCulture RFC3066Name="vi-VN" LCID="1066" EnglishName="Vietnamese (Vietnam)" ISO639_1="vi" ISO639_2="vie" WindowsTLA="VIT" ANSICodePage="1258" OEMCodePage="1258" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="vi-VN"/>
	</LocCulture>
	<LocCulture RFC3066Name="hy" LCID="43" EnglishName="Armenian" ISO639_1="hy" ISO639_2="hye" WindowsTLA="HYE" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="hy">
		<LocCulture RFC3066Name="hy-AM" LCID="1067" EnglishName="Armenian (Armenia)" ISO639_1="hy" ISO639_2="hye" WindowsTLA="HYE" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="hy-AM"/>
	</LocCulture>
	<LocCulture RFC3066Name="az" LCID="44" EnglishName="Azeri" ISO639_1="az" ISO639_2="aze" WindowsTLA="AZE" ANSICodePage="1254" OEMCodePage="857" MacCodePage="10081" RightToLeft="0" BuiltInCultureInfo="az">
		<LocCulture RFC3066Name="az-Latn-AZ" LCID="1068" EnglishName="Azeri (Latin, Azerbaijan)" ISO639_1="az" ISO639_2="aze" WindowsTLA="AZE" ANSICodePage="1254" OEMCodePage="857" MacCodePage="10081" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
		<LocCulture RFC3066Name="az-Cyrl-AZ" LCID="2092" EnglishName="Azeri (Cyrillic, Azerbaijan)" ISO639_1="az" ISO639_2="aze" WindowsTLA="AZC" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	</LocCulture>
	<LocCulture RFC3066Name="eu" LCID="45" EnglishName="Basque" ISO639_1="eu" ISO639_2="eus" WindowsTLA="EUQ" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="eu">
		<LocCulture RFC3066Name="eu-ES" LCID="1069" EnglishName="Basque (Basque)" ISO639_1="eu" ISO639_2="eus" WindowsTLA="EUQ" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="eu-ES"/>
	</LocCulture>
	<LocCulture RFC3066Name="wen" LCID="46" EnglishName="Sorbian" ISO639_1="hs" ISO639_2="hsb" WindowsTLA="HSB" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="wen-DE" LCID="1070" EnglishName="Upper Sorbian (Germany)" ISO639_1="wen" ISO639_2="wen" WindowsTLA="HSB" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
	    <LocCulture RFC3066Name="dsb-DE" LCID="2094" EnglishName="Lower Sorbian (Germany)" ISO639_1="dsb" ISO639_2="dsb" WindowsTLA="DSB" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
	</LocCulture>
	<LocCulture RFC3066Name="mk" LCID="47" EnglishName="Macedonian" ISO639_1="mk" ISO639_2="mkd" WindowsTLA="MKI" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="mk">
		<LocCulture RFC3066Name="mk-MK" LCID="1071" EnglishName="Macedonian (Former Yugoslav Republic of Macedonia)" ISO639_1="mk" ISO639_2="mkd" WindowsTLA="MKI" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="mk-MK"/>
	</LocCulture>
	<LocCulture RFC3066Name="st" LCID="48" EnglishName="Sutu" ISO639_1="st" ISO639_2="sot" WindowsTLA="SOT" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="st-ZA" LCID="1072" EnglishName="Sutu (South Africa)" ISO639_1="st" ISO639_2="sot" WindowsTLA="SOT" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	</LocCulture>
	<LocCulture RFC3066Name="tn" LCID="50" EnglishName="Setswana" ISO639_1="tn" ISO639_2="tsn" WindowsTLA="TSN" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="tn-ZA" LCID="1074" EnglishName="Setswana (South Africa)" ISO639_1="tn" ISO639_2="tsn" WindowsTLA="TSN" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	</LocCulture>
	<LocCulture RFC3066Name="xh" LCID="52" EnglishName="isiXhosa" ISO639_1="xh" ISO639_2="xho" WindowsTLA="XHO" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="xh-ZA" LCID="1076" EnglishName="isiXhosa (South Africa)" ISO639_1="xh" ISO639_2="xho" WindowsTLA="XHO" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	</LocCulture>    
	<LocCulture RFC3066Name="zu" LCID="53" EnglishName="isiZulu" ISO639_1="zu" ISO639_2="zul" WindowsTLA="ZUL" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="zu-ZA" LCID="1077" EnglishName="isiZulu (South Africa)" ISO639_1="zu" ISO639_2="zul" WindowsTLA="ZUL" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	</LocCulture>    
	<LocCulture RFC3066Name="af" LCID="54" EnglishName="Afrikaans" ISO639_1="af" ISO639_2="afr" WindowsTLA="AFK" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="af">
		<LocCulture RFC3066Name="af-ZA" LCID="1078" EnglishName="Afrikaans (South Africa)" ISO639_1="af" ISO639_2="afr" WindowsTLA="AFK" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="af-ZA"/>
	</LocCulture>
	<LocCulture RFC3066Name="ka" LCID="55" EnglishName="Georgian" ISO639_1="ka" ISO639_2="kat" WindowsTLA="KAT" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="ka">
		<LocCulture RFC3066Name="ka-GE" LCID="1079" EnglishName="Georgian (Georgia)" ISO639_1="ka" ISO639_2="kat" WindowsTLA="KAT" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="ka-GE"/>
	</LocCulture>
	<LocCulture RFC3066Name="fo" LCID="56" EnglishName="Faroese" ISO639_1="fo" ISO639_2="fao" WindowsTLA="FOS" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10079" RightToLeft="0" BuiltInCultureInfo="fo">
		<LocCulture RFC3066Name="fo-FO" LCID="1080" EnglishName="Faroese (Faroe Islands)" ISO639_1="fo" ISO639_2="fao" WindowsTLA="FOS" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10079" RightToLeft="0" BuiltInCultureInfo="fo-FO"/>
	</LocCulture>
	<LocCulture RFC3066Name="hi" LCID="57" EnglishName="Hindi" ISO639_1="hi" ISO639_2="hin" WindowsTLA="HIN" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="hi">
		<LocCulture RFC3066Name="hi-IN" LCID="1081" EnglishName="Hindi (India)" ISO639_1="hi" ISO639_2="hin" WindowsTLA="HIN" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="hi-IN"/>
	</LocCulture>
	<LocCulture RFC3066Name="mt" LCID="58" EnglishName="Maltese" ISO639_1="mt" ISO639_2="mlt" WindowsTLA="MLT" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="mt-MT" LCID="1082" EnglishName="Maltese (Malta)" ISO639_1="mt" ISO639_2="mlt" WindowsTLA="MLT" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	</LocCulture>
		<LocCulture RFC3066Name="se" LCID="59" EnglishName="Sami" ISO639_1="smi" ISO639_2="SME" WindowsTLA="SME" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="se-NO" LCID="1083" EnglishName="Sami, Northern (Norway)" ISO639_1="se" ISO639_2="sme" WindowsTLA="SME" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	        <LocCulture RFC3066Name="se-SE" LCID="2107" EnglishName="Sami, Northern (Sweden)" ISO639_1="se" ISO639_2="smf" WindowsTLA="SMF" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	        <LocCulture RFC3066Name="se-FI" LCID="3131" EnglishName="Sami, Northern (Finland)" ISO639_1="se" ISO639_2="smg" WindowsTLA="SMG" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	        <LocCulture RFC3066Name="smj-NO" LCID="4155" EnglishName="Sami, Lule (Norway)" ISO639_1="smj" ISO639_2="smj" WindowsTLA="SMJ" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	        <LocCulture RFC3066Name="smj-SE" LCID="5179" EnglishName="Sami, Lule (Sweden)" ISO639_1="smj" ISO639_2="smk" WindowsTLA="SMK" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	        <LocCulture RFC3066Name="sma-NO" LCID="6203" EnglishName="Sami, Southern (Norway)" ISO639_1="sma" ISO639_2="sma" WindowsTLA="SMA" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	        <LocCulture RFC3066Name="sma-SE" LCID="7227" EnglishName="Sami, Southern (Sweden)" ISO639_1="sma" ISO639_2="SMB" WindowsTLA="SMB" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	        <LocCulture RFC3066Name="sms-FI" LCID="8251" EnglishName="Sami, Skolt (Finland)" ISO639_1="sms" ISO639_2="sms" WindowsTLA="SMS" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	        <LocCulture RFC3066Name="smn-FI" LCID="9275" EnglishName="Sami, Inari (Finland)" ISO639_1="smn" ISO639_2="smn" WindowsTLA="SMN" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	</LocCulture>
	<LocCulture RFC3066Name="ga" LCID="60" EnglishName="Irish" ISO639_1="ga" ISO639_2="gle" WindowsTLA="IRE" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="ga-GB" LCID="1084" EnglishName="Gaelic (Scotland)" ISO639_1="ga" ISO639_2="gle" WindowsTLA="GAE" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	        <LocCulture RFC3066Name="ga-IE" LCID="2108" EnglishName="Irish (Ireland)" ISO639_1="ga" ISO639_2="gle" WindowsTLA="IRE" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	</LocCulture>
	<LocCulture RFC3066Name="ms" LCID="62" EnglishName="Malay" ISO639_1="ms" ISO639_2="msa" WindowsTLA="MSL" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="ms">
		<LocCulture RFC3066Name="ms-MY" LCID="1086" EnglishName="Malay (Malaysia)" ISO639_1="ms" ISO639_2="msa" WindowsTLA="MSL" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="ms-MY"/>
		<LocCulture RFC3066Name="ms-BN" LCID="2110" EnglishName="Malay (Brunei Darussalam)" ISO639_1="ms" ISO639_2="msa" WindowsTLA="MSB" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="ms-BN"/>
	</LocCulture>
	<LocCulture RFC3066Name="kk" LCID="63" EnglishName="Kazakh" ISO639_1="kk" ISO639_2="kaz" WindowsTLA="KKZ" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="kk">
		<LocCulture RFC3066Name="kk-KZ" LCID="1087" EnglishName="Kazakh (Kazakhstan)" ISO639_1="kk" ISO639_2="kaz" WindowsTLA="KKZ" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="kk-KZ"/>
	</LocCulture>
	<LocCulture RFC3066Name="ky" LCID="64" EnglishName="Kyrgyz" ISO639_1="ky" ISO639_2="kir" WindowsTLA="KYR" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="ky">
		<LocCulture RFC3066Name="ky-KG" LCID="1088" EnglishName="Kyrgyz (Kyrgyzstan)" ISO639_1="ky" ISO639_2="kir" WindowsTLA="KYR" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="ky-KG"/>
	</LocCulture>
	<LocCulture RFC3066Name="sw" LCID="65" EnglishName="Kiswahili" ISO639_1="sw" ISO639_2="swa" WindowsTLA="SWK" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="sw">
		<LocCulture RFC3066Name="sw-KE" LCID="1089" EnglishName="Kiswahili (Kenya)" ISO639_1="sw" ISO639_2="swa" WindowsTLA="SWK" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="sw-KE"/>
	</LocCulture>
	<LocCulture RFC3066Name="tk" LCID="66" EnglishName="Turkmen" ISO639_1="tk" ISO639_2="tuk" WindowsTLA="TUK" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="tk-TM" LCID="1090" EnglishName="Turkmen (Turkmenistan)" ISO639_1="tk" ISO639_2="tuk" WindowsTLA="TUK" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	</LocCulture>
	<LocCulture RFC3066Name="uz" LCID="67" EnglishName="Uzbek" ISO639_1="uz" ISO639_2="uzb" WindowsTLA="UZB" ANSICodePage="1254" OEMCodePage="857" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="uz">
		<LocCulture RFC3066Name="uz-Latn-UZ" LCID="1091" EnglishName="Uzbek (Latin, Uzbekistan)" ISO639_1="uz" ISO639_2="uzb" WindowsTLA="UZB" ANSICodePage="1254" OEMCodePage="857" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
		<LocCulture RFC3066Name="uz-Cyrl-UZ" LCID="2115" EnglishName="Uzbek (Cyrillic, Uzbekistan)" ISO639_1="uz" ISO639_2="uzb" WindowsTLA="UZB" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	</LocCulture>
  	<LocCulture RFC3066Name="tt" LCID="68" EnglishName="Tatar" ISO639_1="tt" ISO639_2="tat" WindowsTLA="TTT" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="tt">
		<LocCulture RFC3066Name="tt-RU" LCID="1092" EnglishName="Tatar (Russia)" ISO639_1="tt" ISO639_2="tat" WindowsTLA="TTT" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="tt-RU"/>
	</LocCulture>
	<LocCulture RFC3066Name="bn" LCID="69" EnglishName="Bengali" ISO639_1="bn" ISO639_2="bng" WindowsTLA="BNG" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="bn-IN" LCID="1093" EnglishName="Bengali (India)" ISO639_1="bn" ISO639_2="bng" WindowsTLA="BNG" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	        <LocCulture RFC3066Name="bn-BD" LCID="2117" EnglishName="Bengali (Bangladesh)" ISO639_1="bn" ISO639_2="bng" WindowsTLA="BNB" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    	</LocCulture>
    	<LocCulture RFC3066Name="pa" LCID="70" EnglishName="Punjabi" ISO639_1="pa" ISO639_2="pan" WindowsTLA="PAN" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="pa">
		<LocCulture RFC3066Name="pa-IN" LCID="1094" EnglishName="Punjabi (India)" ISO639_1="pa" ISO639_2="pan" WindowsTLA="PAN" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="pa-IN"/>
	</LocCulture>
	<LocCulture RFC3066Name="gu" LCID="71" EnglishName="Gujarati" ISO639_1="gu" ISO639_2="guj" WindowsTLA="GUJ" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="gu">
		<LocCulture RFC3066Name="gu-IN" LCID="1095" EnglishName="Gujarati (India)" ISO639_1="gu" ISO639_2="guj" WindowsTLA="GUJ" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="gu-IN"/>
	</LocCulture>
    	<LocCulture RFC3066Name="or" LCID="72" EnglishName="Oriya" ISO639_1="or" ISO639_2="ori" WindowsTLA="ORI" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="or-IN" LCID="1096" EnglishName="Oriya (India)" ISO639_1="or" ISO639_2="ori" WindowsTLA="ORI" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	</LocCulture>
	<LocCulture RFC3066Name="ta" LCID="73" EnglishName="Tamil" ISO639_1="ta" ISO639_2="tam" WindowsTLA="TAM" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="ta">
		<LocCulture RFC3066Name="ta-IN" LCID="1097" EnglishName="Tamil (India)" ISO639_1="ta" ISO639_2="tam" WindowsTLA="TAM" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="ta-IN"/>
	</LocCulture>
	<LocCulture RFC3066Name="te" LCID="74" EnglishName="Telugu" ISO639_1="te" ISO639_2="tel" WindowsTLA="TEL" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="te">
		<LocCulture RFC3066Name="te-IN" LCID="1098" EnglishName="Telugu (India)" ISO639_1="te" ISO639_2="tel" WindowsTLA="TEL" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="te-IN"/>
	</LocCulture>
	<LocCulture RFC3066Name="kn" LCID="75" EnglishName="Kannada" ISO639_1="kn" ISO639_2="kan" WindowsTLA="KDI" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="kn">
		<LocCulture RFC3066Name="kn-IN" LCID="1099" EnglishName="Kannada (India)" ISO639_1="kn" ISO639_2="kan" WindowsTLA="KDI" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="kn-IN"/>
	</LocCulture>
    	<LocCulture RFC3066Name="ml" LCID="76" EnglishName="Malayalam" ISO639_1="ml" ISO639_2="mym" WindowsTLA="MYM" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="ml-IN" LCID="1100" EnglishName="Malayalam (India)" ISO639_1="ml" ISO639_2="mym" WindowsTLA="MYM" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    	</LocCulture>
    	<LocCulture RFC3066Name="as" LCID="77" EnglishName="Assamese" ISO639_1="as" ISO639_2="asm" WindowsTLA="ASM" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="as-IN" LCID="1101" EnglishName="Assamese (India)" ISO639_1="as" ISO639_2="asm" WindowsTLA="ASM" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    	</LocCulture>
    	<LocCulture RFC3066Name="mr" LCID="78" EnglishName="Marathi" ISO639_1="mr" ISO639_2="mar" WindowsTLA="MAR" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="mr">
		<LocCulture RFC3066Name="mr-IN" LCID="1102" EnglishName="Marathi (India)" ISO639_1="mr" ISO639_2="mar" WindowsTLA="MAR" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="mr-IN"/>
	</LocCulture>
	<LocCulture RFC3066Name="sa" LCID="79" EnglishName="Sanskrit" ISO639_1="sa" ISO639_2="san" WindowsTLA="SAN" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="sa">
		<LocCulture RFC3066Name="sa-IN" LCID="1103" EnglishName="Sanskrit (India)" ISO639_1="sa" ISO639_2="san" WindowsTLA="SAN" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="sa-IN"/>
	</LocCulture>
	<LocCulture RFC3066Name="mn" LCID="80" EnglishName="Mongolian" ISO639_1="mn" ISO639_2="mon" WindowsTLA="MNG" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="mn">
		<LocCulture RFC3066Name="mn-MN" LCID="1104" EnglishName="Mongolian (Cyrillic, Mongolia)" ISO639_1="mn" ISO639_2="mon" WindowsTLA="MNN" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="mn-MN"/>
		<LocCulture RFC3066Name="mn-Mong-CN" LCID="2128" EnglishName="Mongolian (Traditional Mongolian, PRC)" ISO639_1="mn" ISO639_2="mon" WindowsTLA="MNG" ANSICodePage="1251" OEMCodePage="1" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="mn-MN"/>
	</LocCulture>
    	<LocCulture RFC3066Name="bo" LCID="81" EnglishName="Tibetan" ISO639_1="bo" ISO639_2="bod" WindowsTLA="BOB" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="bo-CN" LCID="1105" EnglishName="Tibetan (PRC)" ISO639_1="bo" ISO639_2="bod" WindowsTLA="BOB" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
     	</LocCulture>
    	<LocCulture RFC3066Name="cy" LCID="82" EnglishName="Welsh" ISO639_1="cy" ISO639_2="cym" WindowsTLA="CYM" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="cy-GB" LCID="1106" EnglishName="Welsh (United Kingdom)" ISO639_1="cy" ISO639_2="cym" WindowsTLA="CYM" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    	</LocCulture>
    	<LocCulture RFC3066Name="km" LCID="83" EnglishName="Khmer" ISO639_1="km" ISO639_2="khm" WindowsTLA="KHM" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="km-KH" LCID="1107" EnglishName="Khmer (Cambodia)" ISO639_1="km" ISO639_2="khm" WindowsTLA="KHM" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
    	</LocCulture>
    	<LocCulture RFC3066Name="lo" LCID="84" EnglishName="Lao" ISO639_1="lo" ISO639_2="lao" WindowsTLA="LAO" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="lo-LA" LCID="1108" EnglishName="Lao (Lao P.D.R.)" ISO639_1="lo" ISO639_2="lao" WindowsTLA="LAO" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
    	</LocCulture>
    	<LocCulture RFC3066Name="gl" LCID="86" EnglishName="Galician" ISO639_1="gl" ISO639_2="glg" WindowsTLA="GLC" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="gl">
		<LocCulture RFC3066Name="gl-ES" LCID="1110" EnglishName="Galician (Galician)" ISO639_1="gl" ISO639_2="glg" WindowsTLA="GLC" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="gl-ES"/>
	</LocCulture>
	<LocCulture RFC3066Name="kok" LCID="87" EnglishName="Konkani" ISO639_1="kok" ISO639_2="kok" WindowsTLA="KNK" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="kok">
		<LocCulture RFC3066Name="kok-IN" LCID="1111" EnglishName="Konkani (India)" ISO639_1="kok" ISO639_2="kok" WindowsTLA="KNK" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="kok-IN"/>
	</LocCulture>
    	<LocCulture RFC3066Name="sd" LCID="89" EnglishName="Sindhi" ISO639_1="sd" ISO639_2="snd" WindowsTLA="SND" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar">
        	<LocCulture RFC3066Name="sd-IN" LCID="1113" EnglishName="Sindhi (India)" ISO639_1="sd" ISO639_2="snd" WindowsTLA="SND" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar"/>
        	<LocCulture RFC3066Name="sd-PK" LCID="2137" EnglishName="Sindhi (Pakistan)" ISO639_1="sd" ISO639_2="snd" WindowsTLA="SND" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar"/>
    	</LocCulture>
    	<LocCulture RFC3066Name="syr" LCID="90" EnglishName="Syriac" ISO639_1="syr" ISO639_2="syr" WindowsTLA="SYR" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="1" BuiltInCultureInfo="syr">
		<LocCulture RFC3066Name="syr-SY" LCID="1114" EnglishName="Syriac (Syria)" ISO639_1="syr" ISO639_2="syr" WindowsTLA="SYR" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="1" BuiltInCultureInfo="syr-SY"/>
    	</LocCulture>
    	<LocCulture RFC3066Name="si" LCID="91" EnglishName="Sinhala" ISO639_1="si" ISO639_2="sin" WindowsTLA="SIN" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="si-LK" LCID="1115" EnglishName="Sinhala (Sri Lanka)" ISO639_1="si" ISO639_2="sin" WindowsTLA="SIN" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    	</LocCulture>
    	<LocCulture RFC3066Name="iu" LCID="93" EnglishName="Inuktitut" ISO639_1="iu" ISO639_2="iku" WindowsTLA="IUK" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="iu-Cans-CA" LCID="1117" EnglishName="Inuktitut (Syllabics, Canada)" ISO639_1="iu" ISO639_2="iku" WindowsTLA="IUS" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
        	<LocCulture RFC3066Name="iu-Latn-CA" LCID="2141" EnglishName="Inuktitut (Latin, Canada)" ISO639_1="iu" ISO639_2="iku" WindowsTLA="IUK" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    	</LocCulture>
    	<LocCulture RFC3066Name="am" LCID="94" EnglishName="Amharic" ISO639_1="am" ISO639_2="amh" WindowsTLA="AMH" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="am-ET" LCID="1118" EnglishName="Amharic (Ethiopia)" ISO639_1="am" ISO639_2="amh" WindowsTLA="AMH" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
    	</LocCulture>
    	<LocCulture RFC3066Name="tzm" LCID="95" EnglishName="Tamazight" ISO639_1="tzm" ISO639_2="tzm" WindowsTLA="TZM" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="tzm-Latn-DZ" LCID="2143" EnglishName="Tamazight (Latin, Algeria)" ISO639_1="tzm" ISO639_2="tzm" WindowsTLA="TZM" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    	</LocCulture>
    	<LocCulture RFC3066Name="ne" LCID="97" EnglishName="Nepali" ISO639_1="ne" ISO639_2="nep" WindowsTLA="NEP" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="ne-NP" LCID="1121" EnglishName="Nepali (Nepal)" ISO639_1="ne" ISO639_2="nep" WindowsTLA="NEP" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    	</LocCulture>
    	<LocCulture RFC3066Name="fy" LCID="98" EnglishName="Frisian" ISO639_1="fy" ISO639_2="fry" WindowsTLA="FYN" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="fy-NL" LCID="1122" EnglishName="Frisian (Netherlands)" ISO639_1="fy" ISO639_2="fry" WindowsTLA="FYN" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    	</LocCulture>
    	<LocCulture RFC3066Name="ps" LCID="99" EnglishName="Pashto" ISO639_1="ps" ISO639_2="pus" WindowsTLA="PAS" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar">
        	<LocCulture RFC3066Name="ps-AF" LCID="1123" EnglishName="Pashto (Afghanistan)" ISO639_1="ps" ISO639_2="pus" WindowsTLA="PAS" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar"/>
    	</LocCulture>
    	<LocCulture RFC3066Name="fil" LCID="100" EnglishName="Filipino" ISO639_1="fil" ISO639_2="fil" WindowsTLA="FPO" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant">
        	<LocCulture RFC3066Name="fil-PH" LCID="1124" EnglishName="Filipino (Philippines)" ISO639_1="fil" ISO639_2="fil" WindowsTLA="FPO" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    	</LocCulture>
    <LocCulture RFC3066Name="dv" LCID="101" EnglishName="Divehi" ISO639_1="dv" ISO639_2="div" WindowsTLA="DIV" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="1" BuiltInCultureInfo="ar">
		<LocCulture RFC3066Name="dv-MV" LCID="1125" EnglishName="Divehi (Maldives)" ISO639_1="dv" ISO639_2="div" WindowsTLA="DIV" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="1" BuiltInCultureInfo="ar"/>
    </LocCulture>
    <LocCulture RFC3066Name="ha" LCID="104" EnglishName="Hausa" ISO639_1="ha" ISO639_2="hau" WindowsTLA="HAU" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="ha-Latn-NG" LCID="1128" EnglishName="Hausa (Latin, Nigeria)" ISO639_1="ha" ISO639_2="hau" WindowsTLA="HAU" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
    </LocCulture>
    <LocCulture RFC3066Name="yo" LCID="106" EnglishName="Yoruba" ISO639_1="yo" ISO639_2="yor" WindowsTLA="YOR" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="yo-NG" LCID="1130" EnglishName="Yoruba (Nigeria)" ISO639_1="yo" ISO639_2="yor" WindowsTLA="YOR" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
    </LocCulture>
    <LocCulture RFC3066Name="quz" LCID="107" EnglishName="Quechua" ISO639_1="quz" ISO639_2="qub" WindowsTLA="QUB" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant">
        <LocCulture RFC3066Name="quz-BO" LCID="1131" EnglishName="Quechua (Bolivia)" ISO639_1="quz" ISO639_2="qub" WindowsTLA="QUB" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
        <LocCulture RFC3066Name="quz-EC" LCID="2155" EnglishName="Quechua (Ecuador)" ISO639_1="quz" ISO639_2="que" WindowsTLA="QUE" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
        <LocCulture RFC3066Name="quz-PE" LCID="3179" EnglishName="Quechua (Peru)" ISO639_1="quz" ISO639_2="qup" WindowsTLA="QUP" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    </LocCulture>
    <LocCulture RFC3066Name="nso" LCID="108" EnglishName="Sesotho sa Leboa" ISO639_1="nso" ISO639_2="nso" WindowsTLA="NSO" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant">
        <LocCulture RFC3066Name="nso-ZA" LCID="1132" EnglishName="Sesotho sa Leboa (South Africa)" ISO639_1="nso" ISO639_2="nso" WindowsTLA="NSO" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    </LocCulture>
    <LocCulture RFC3066Name="ba" LCID="109" EnglishName="Bashkir" ISO639_1="ba" ISO639_2="bak" WindowsTLA="BAS" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="ba-RU" LCID="1133" EnglishName="Bashkir (Russia)" ISO639_1="ba" ISO639_2="bak" WindowsTLA="BAS" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
    </LocCulture>
    <LocCulture RFC3066Name="lb" LCID="110" EnglishName="Luxembourgish" ISO639_1="lb" ISO639_2="ltz" WindowsTLA="LBX" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant">
        <LocCulture RFC3066Name="lb-LU" LCID="1134" EnglishName="Luxembourgish (Luxembourg)" ISO639_1="lb" ISO639_2="ltz" WindowsTLA="LBX" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    </LocCulture>
    <LocCulture RFC3066Name="kl" LCID="111" EnglishName="Greenlandic" ISO639_1="kl" ISO639_2="kal" WindowsTLA="KAL" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="kl-GL" LCID="1135" EnglishName="Greenlandic (Greenland)" ISO639_1="kl" ISO639_2="kal" WindowsTLA="KAL" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
    </LocCulture>
    <LocCulture RFC3066Name="ig" LCID="112" EnglishName="Igbo" ISO639_1="ig" ISO639_2="ibo" WindowsTLA="IBO" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="ig-NG" LCID="1136" EnglishName="Igbo (Nigeria)" ISO639_1="ig" ISO639_2="ibo" WindowsTLA="IBO" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
    </LocCulture>
    <LocCulture RFC3066Name="so" LCID="119" EnglishName="Somali" ISO639_1="so" ISO639_2="som" WindowsTLA="SOM" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant">
        <LocCulture RFC3066Name="so-SO" LCID="1143" EnglishName="Somali (Somalia)" ISO639_1="so" ISO639_2="som" WindowsTLA="SOM" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    </LocCulture>
    <LocCulture RFC3066Name="ii" LCID="120" EnglishName="Yi" ISO639_1="ii" ISO639_2="iii" WindowsTLA="III" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant">
        <LocCulture RFC3066Name="ii-CN" LCID="1144" EnglishName="Yi (PRC)" ISO639_1="ii" ISO639_2="iii" WindowsTLA="III" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    </LocCulture>
    <LocCulture RFC3066Name="arn" LCID="122" EnglishName="Mapudungun" ISO639_1="arn" ISO639_2="arn" WindowsTLA="MPD" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant">
        <LocCulture RFC3066Name="arn-CL" LCID="1146" EnglishName="Mapudungun (Chile)" ISO639_1="arn" ISO639_2="arn" WindowsTLA="MPD" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    </LocCulture>
    <LocCulture RFC3066Name="moh" LCID="124" EnglishName="Mohawk" ISO639_1="moh" ISO639_2="moh" WindowsTLA="MWK" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="moh-CA" LCID="1148" EnglishName="Mohawk (Mohawk)" ISO639_1="moh" ISO639_2="moh" WindowsTLA="MWK" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
    </LocCulture>
    <LocCulture RFC3066Name="br" LCID="126" EnglishName="Breton" ISO639_1="br" ISO639_2="bre" WindowsTLA="BRE" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="br-FR" LCID="1150" EnglishName="Breton (France)" ISO639_1="br" ISO639_2="bre" WindowsTLA="BRE" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
    </LocCulture>
    <LocCulture RFC3066Name="ug" LCID="128" EnglishName="Uighur" ISO639_1="ug" ISO639_2="uig" WindowsTLA="UIG" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar">
        <LocCulture RFC3066Name="ug-CN" LCID="1152" EnglishName="Uighur (PRC)" ISO639_1="ug" ISO639_2="uig" WindowsTLA="UIG" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar"/>
    </LocCulture>
    <LocCulture RFC3066Name="mi" LCID="129" EnglishName="Maori" ISO639_1="mi" ISO639_2="mri" WindowsTLA="MRI" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant">
        <LocCulture RFC3066Name="mi-NZ" LCID="1153" EnglishName="Maori (New Zealand)" ISO639_1="mi" ISO639_2="mri" WindowsTLA="MRI" ANSICodePage="0" OEMCodePage="1" MacCodePage="2" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    </LocCulture>
    <LocCulture RFC3066Name="oc" LCID="130" EnglishName="Occitan" ISO639_1="oc" ISO639_2="oci" WindowsTLA="OCI" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="oc-FR" LCID="1154" EnglishName="Occitan (France)" ISO639_1="oc" ISO639_2="oci" WindowsTLA="OCI" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
    </LocCulture>
    <LocCulture RFC3066Name="co" LCID="131" EnglishName="Corsican" ISO639_1="co" ISO639_2="cos" WindowsTLA="COS" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="co-FR" LCID="1155" EnglishName="Corsican (France)" ISO639_1="co" ISO639_2="cos" WindowsTLA="COS" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
    </LocCulture>
    <LocCulture RFC3066Name="gsw" LCID="132" EnglishName="Alsatian" ISO639_1="gsw" ISO639_2="gsw" WindowsTLA="GSW" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="gsw-FR" LCID="1156" EnglishName="Alsatian (France)" ISO639_1="gsw" ISO639_2="gsw" WindowsTLA="GSW" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
    </LocCulture>
    <LocCulture RFC3066Name="sah" LCID="133" EnglishName="Yakut" ISO639_1="sah" ISO639_2="sah" WindowsTLA="SAH" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="sah-RU" LCID="1157" EnglishName="Yakut (Russia)" ISO639_1="sah" ISO639_2="sah" WindowsTLA="SAH" ANSICodePage="1251" OEMCodePage="866" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
    </LocCulture>
    <LocCulture RFC3066Name="qut" LCID="134" EnglishName="K'iche" ISO639_1="qut" ISO639_2="qut" WindowsTLA="QUT" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="qut-GT" LCID="1158" EnglishName="K'iche (Guatemala)" ISO639_1="qut" ISO639_2="qut" WindowsTLA="QUT" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
    </LocCulture>
    <LocCulture RFC3066Name="rw" LCID="135" EnglishName="Kinyarwanda" ISO639_1="rw" ISO639_2="kin" WindowsTLA="KIN" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="rw-RW" LCID="1159" EnglishName="Kinyarwanda (Rwanda)" ISO639_1="rw" ISO639_2="kin" WindowsTLA="KIN" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
    </LocCulture>
    <LocCulture RFC3066Name="wo" LCID="136" EnglishName="Wolof" ISO639_1="wo" ISO639_2="wol" WindowsTLA="WOL" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"> 
	    <LocCulture RFC3066Name="wo-SN" LCID="1160" EnglishName="Wolof (Senegal)" ISO639_1="wo" ISO639_2="wol" WindowsTLA="WOL" ANSICodePage="1252" OEMCodePage="850" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
    </LocCulture>
    <LocCulture RFC3066Name="prs" LCID="140" EnglishName="Dari" ISO639_1="prs" ISO639_2="prs" WindowsTLA="PRS" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar"> 
	    <LocCulture RFC3066Name="prs-AF" LCID="1164" EnglishName="Dari (Afghanistan)" ISO639_1="prs" ISO639_2="prs" WindowsTLA="PRS" ANSICodePage="1256" OEMCodePage="720" MacCodePage="10004" RightToLeft="1" BuiltInCultureInfo="ar"/> 
    </LocCulture>
    <LocCulture RFC3066Name="bs" LCID="30746" EnglishName="Bosnian" ISO639_1="bs" ISO639_2="bsb" WindowsTLA="BSB" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10082" RightToLeft="0" BuiltInCultureInfo="Invariant">
        <LocCulture RFC3066Name="bs-Latn-BA" LCID="5146" EnglishName="Bosnian (Latin, Bosnia and Herzegovina)" ISO639_1="bs" ISO639_2="bsb" WindowsTLA="BSB" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10082" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
        <LocCulture RFC3066Name="bs-Cyrl-BA" LCID="8218" EnglishName="Bosnian (Cyrillic, Bosnia and Herzegovina)" ISO639_1="bs" ISO639_2="bsc" WindowsTLA="BSC" ANSICodePage="1251" OEMCodePage="855" MacCodePage="10082" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    </LocCulture>
    <LocCulture RFC3066Name="zh-CHT" LCID="31748" EnglishName="Chinese (Traditional)" ISO639_1="zh" ISO639_2="zho" WindowsTLA="CHT" ANSICodePage="950" OEMCodePage="950" MacCodePage="10002" RightToLeft="0" BuiltInCultureInfo="zh-CHT">
		<LocCulture RFC3066Name="zh-TW" LCID="1028" EnglishName="Chinese (Taiwan)" ISO639_1="zh" ISO639_2="zho" WindowsTLA="CHT" ANSICodePage="950" OEMCodePage="950" MacCodePage="10002" RightToLeft="0" BuiltInCultureInfo="zh-TW"/>
		<LocCulture RFC3066Name="zh-HK" LCID="3076" EnglishName="Chinese (Hong Kong S.A.R.)" ISO639_1="zh" ISO639_2="zho" WindowsTLA="ZHH" ANSICodePage="950" OEMCodePage="950" MacCodePage="10002" RightToLeft="0" BuiltInCultureInfo="zh-HK"/>
		<LocCulture RFC3066Name="zh-MO" LCID="5124" EnglishName="Chinese (Macao S.A.R.)" ISO639_1="zh" ISO639_2="zho" WindowsTLA="ZHM" ANSICodePage="950" OEMCodePage="950" MacCodePage="10002" RightToLeft="0" BuiltInCultureInfo="zh-MO"/>
	</LocCulture>
    <LocCulture RFC3066Name="sr" LCID="31770" EnglishName="Serbian" ISO639_1="sr" ISO639_2="srp" WindowsTLA="SRB" ANSICodePage="1250" OEMCodePage="855" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="sr">
	<LocCulture RFC3066Name="sr-Latn-CS" LCID="2074" EnglishName="Serbian (Latin, Serbia and Montenegro)" ISO639_1="sr" ISO639_2="srp" WindowsTLA="SRL" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10029" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	<LocCulture RFC3066Name="sr-Cyrl-CS" LCID="3098" EnglishName="Serbian (Cyrillic, Serbia and Montenegro)" ISO639_1="sr" ISO639_2="srp" WindowsTLA="SRB" ANSICodePage="1251" OEMCodePage="855" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	<LocCulture RFC3066Name="sr-Latn-BA" LCID="6170" EnglishName="Serbian (Latin, Bosnia and Herzegovina)" ISO639_1="sr" ISO639_2="SRS" WindowsTLA="SRS" ANSICodePage="1250" OEMCodePage="852" MacCodePage="10082" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	<LocCulture RFC3066Name="sr-Cyrl-BA" LCID="7194" EnglishName="Serbian (Cyrillic, Bosnia and Herzegovina)" ISO639_1="sr" ISO639_2="SRN" WindowsTLA="SRN" ANSICodePage="1251" OEMCodePage="855" MacCodePage="10007" RightToLeft="0" BuiltInCultureInfo="Invariant"/> 
    </LocCulture>
    <LocCulture RFC3066Name="neu" LCID="0" EnglishName="Neutral" ISO639_1="neu" ISO639_2="neu" WindowsTLA="NEU" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant">
	<LocCulture RFC3066Name="ned" LCID="1024" EnglishName="Neutral (Default)" ISO639_1="ned" ISO639_2="ned" WindowsTLA="NED" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
	<LocCulture RFC3066Name="nes" LCID="2048" EnglishName="Neutral (Sys. Default)" ISO639_1="nes" ISO639_2="nes" WindowsTLA="NES" ANSICodePage="1252" OEMCodePage="437" MacCodePage="10000" RightToLeft="0" BuiltInCultureInfo="Invariant"/>
    </LocCulture>
</LocCultures>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\1.5\x86\bin\modules\Version.txt ===
2400
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\policheck\x86\Templates\FTSetsTemplate.xml ===
<?xml version="1.0" encoding="utf-8" ?>
<xmldata>
	<PckFileTypes TotalTypes="34" TotalExts="143" UnsupportedFilesOnly="False">
		<Type ID="0" Check="1">
			<Name>Pure Text Files</Name>
			<Extensions>
				<Ext Check="1">.txt</Ext>
				<Ext Check="1">.des</Ext>
				<Ext Check="1">.pwd</Ext>
				<Ext Check="1">.asm</Ext>
				<Ext Check="1">.cmd</Ext>
				<Ext Check="1">.ini</Ext>
				<Ext Check="1">.poc</Ext>
				<Ext Check="1">.pwt</Ext>
				<Ext Check="1">.hpj</Ext>
				<Ext Check="1">.sql</Ext>
				<Ext Check="1">.inf</Ext>
				<Ext Check="1">.log</Ext>
				<Ext Check="1">.def</Ext>
				<Ext Check="1">.url</Ext>
				<Ext Check="1">.bat</Ext>
				<Ext Check="1">.aspx</Ext>
				<Ext Check="1">.idl</Ext>
				<Ext Check="1">.sys</Ext>
        <Ext Check="1">.resources</Ext>
			</Extensions>
		</Type>
		<Type ID="1" Check="1">
			<Name>CodeFiles</Name>
			<Extensions>
				<Ext Check="1">.frm</Ext>
				<Ext Check="1">.inc</Ext>
				<Ext Check="1">.cpp</Ext>
				<Ext Check="1">.cls</Ext>
				<Ext Check="1">.c</Ext>
				<Ext Check="1">.hpp</Ext>
				<Ext Check="1">.vbs</Ext>
				<Ext Check="1">.java</Ext>
				<Ext Check="1">.cs</Ext>
				<Ext Check="1">.cxx</Ext>
				<Ext Check="1">.h</Ext>
				<Ext Check="1">.jav</Ext>
				<Ext Check="1">.bas</Ext>
				<Ext Check="1">.hxx</Ext>
				<Ext Check="1">.js</Ext>
				<Ext Check="1">.pl</Ext>
				<Ext Check="1">.rc</Ext>
				<Ext Check="1">.vb</Ext>
			</Extensions>
		</Type>
		<Type ID="2" Check="1">
			<Name>XML Files</Name>
			<Extensions>
				<Ext Check="1">.xml</Ext>
				<Ext Check="1">.hxa</Ext>
				<Ext Check="1">.hxk</Ext>
				<Ext Check="1">.hxl</Ext>
				<Ext Check="1">.xsl</Ext>
				<Ext Check="1">.hxc</Ext>
				<Ext Check="1">.hxt</Ext>
				<Ext Check="1">.hxm</Ext>
				<Ext Check="1">.resx</Ext>
				<Ext Check="1">.hxe</Ext>
				<Ext Check="1">.hxf</Ext>
				<Ext Check="1">.hxv</Ext>
				<Ext Check="1">.acctb</Ext>
				<Ext Check="1">.accfl</Ext>
			</Extensions>
		</Type>
		<Type ID="3" Check="1">
			<Name>Microsoft Word Documents</Name>
			<Extensions>
				<Ext Check="1">.doc</Ext>
				<Ext Check="1">.dot</Ext>
				<Ext Check="1">.wiz</Ext>
			</Extensions>
		</Type>
		<Type ID="4" Check="1">
			<Name>Microsoft Access Database Compatible</Name>
			<Extensions>
				<Ext Check="1">.mdb</Ext>
				<Ext Check="1">.mda</Ext>
				<Ext Check="1">.mde</Ext>
				<Ext Check="1">.mpd</Ext>
				<Ext Check="1">.mdt</Ext>
			</Extensions>
		</Type>
		<Type ID="5" Check="1">
			<Name>Microsoft PowerPoint Presentation</Name>
			<Extensions>
				<Ext Check="1">.ppt</Ext>
				<Ext Check="1">.pot</Ext>
				<Ext Check="1">.pps</Ext>
			</Extensions>
		</Type>
		<Type ID="6" Check="1">
			<Name>Microsoft Publisher Files</Name>
			<Extensions>
				<Ext Check="1">.pub</Ext>
			</Extensions>
		</Type>
		<Type ID="7" Check="1">
			<Name>Microsoft Excel Workbooks</Name>
			<Extensions>
				<Ext Check="1">.xls</Ext>
				<Ext Check="1">.xlt</Ext>
			</Extensions>
		</Type>
		<Type ID="8" Check="1">
			<Name>Pure Binary Files</Name>
			<Extensions>
				<Ext Check="1">.com</Ext>
				<Ext Check="1">.bin</Ext>
				<Ext Check="1">.tlb</Ext>
				<Ext Check="1">.drv</Ext>
				<Ext Check="1">.fon</Ext>
			</Extensions>
		</Type>
		<Type ID="9" Check="1">
			<Name>LocStudio resource databases</Name>
			<Extensions>
				<Ext Check="1">.edb</Ext>
        <Ext Check="1">.lcl</Ext>
			</Extensions>
		</Type>
		<Type ID="10" Check="1">
			<Name>Microsoft Project Files</Name>
			<Extensions>
				<Ext Check="1">.mpp</Ext>
				<Ext Check="1">.mpt</Ext>
			</Extensions>
		</Type>
		<Type ID="11" Check="1">
			<Name>Microsoft Visio Files</Name>
			<Extensions>
				<Ext Check="1">.vsd</Ext>
				<Ext Check="1">.vdx</Ext>
				<Ext Check="1">.vss</Ext>
				<Ext Check="1">.vst</Ext>
			</Extensions>
		</Type>
		<Type ID="12" Check="1">
			<Name>Windows Installer databases</Name>
			<Extensions>
				<Ext Check="1">.msi</Ext>
				<Ext Check="1">.msm</Ext>
			</Extensions>
		</Type>
		<Type ID="13" Check="1">
			<Name>Zip Files</Name>
			<Extensions>
				<Ext Check="1">.zip</Ext>
				<Ext Check="1">.accdt</Ext>
			</Extensions>
		</Type>
		<Type ID="14" Check="1">
			<Name>Cabinet / MS Compression Files</Name>
			<Extensions>
				<Ext Check="1">.cab</Ext>
			</Extensions>
		</Type>
		<Type ID="15" Check="1">
			<Name>Table driven IME lexicons</Name>
			<Extensions>
				<Ext Check="1">.mb</Ext>
			</Extensions>
		</Type>
		<Type ID="16" Check="1">
			<Name>IME ( IMD ) Files</Name>
			<Extensions>
				<Ext Check="1">.imd</Ext>
			</Extensions>
		</Type>
		<Type ID="17" Check="1">
			<Name>TrueType Font Files</Name>
			<Extensions>
				<Ext Check="1">.ttf</Ext>
			</Extensions>
		</Type>
		<Type ID="18" Check="1">
			<Name>Microsoft Outlook Mail Files</Name>
			<Extensions>
				<Ext Check="1">.msg</Ext>
				<Ext Check="1">.oft</Ext>
			</Extensions>
		</Type>
		<Type ID="19" Check="1">
			<Name>HTML Help 2.0 Files / InfoTech5.x Storage System Files</Name>
			<Extensions>
				<Ext Check="1">.its</Ext>
				<Ext Check="1">.hxh</Ext>
				<Ext Check="1">.hxr</Ext>
				<Ext Check="1">.hxw</Ext>
				<Ext Check="1">.hxi</Ext>
				<Ext Check="1">.hxs</Ext>
				<Ext Check="1">.hxq</Ext>
			</Extensions>
		</Type>
		<Type ID="20" Check="1">
			<Name>Adobe Acrobat PDF Files</Name>
			<Extensions>
				<Ext Check="1">.pdf</Ext>
			</Extensions>
		</Type>
		<Type ID="21" Check="1">
			<Name>HTML Files / Web Page</Name>
			<Extensions>
				<Ext Check="1">.htm</Ext>
				<Ext Check="1">.dtd</Ext>
				<Ext Check="1">.hhk</Ext>
				<Ext Check="1">.htw</Ext>
				<Ext Check="1">.asp</Ext>
				<Ext Check="1">.htc</Ext>
				<Ext Check="1">.htx</Ext>
				<Ext Check="1">.html</Ext>
				<Ext Check="1">.hhc</Ext>
				<Ext Check="1">.css</Ext>
				<Ext Check="1">.stm</Ext>
			</Extensions>
		</Type>
		<Type ID="22" Check="1">
			<Name>Rich Text Files</Name>
			<Extensions>
				<Ext Check="1">.rtf</Ext>
			</Extensions>
		</Type>
		<Type ID="23" Check="1">
			<Name>Windows 3.x Write Files</Name>
			<Extensions>
				<Ext Check="1">.wri</Ext>
			</Extensions>
		</Type>
		<Type ID="24" Check="1">
			<Name>MHTML Files</Name>
			<Extensions>
				<Ext Check="1">.eml</Ext>
				<Ext Check="1">.nws</Ext>
				<Ext Check="1">.mht</Ext>
			</Extensions>
		</Type>
		<Type ID="25" Check="1">
			<Name>Word 2007 Files</Name>
			<Extensions>
				<Ext Check="1">.docx</Ext>
				<Ext Check="1">.docm</Ext>
				<Ext Check="1">.dotx</Ext>
				<Ext Check="1">.dotm</Ext>
			</Extensions>
		</Type>
		<Type ID="26" Check="1">
			<Name>Excel 2007 Files</Name>
			<Extensions>
				<Ext Check="1">.xlsx</Ext>
				<Ext Check="1">.xlsm</Ext>
				<Ext Check="1">.xltx</Ext>
				<Ext Check="1">.xltm</Ext>
				<Ext Check="1">.xlsb</Ext>
				<Ext Check="1">.xlam</Ext>
			</Extensions>
		</Type>
		<Type ID="27" Check="1">
			<Name>Power Point 2007 Files</Name>
			<Extensions>
				<Ext Check="1">.pptx</Ext>
				<Ext Check="1">.pptm</Ext>
				<Ext Check="1">.potx</Ext>
				<Ext Check="1">.potm</Ext>
				<Ext Check="1">.ppsx</Ext>
				<Ext Check="1">.ppsm</Ext>
				<Ext Check="1">.ppam</Ext>
			</Extensions>
		</Type>
		<Type ID="28" Check="1">
			<Name>Access 2007 Files</Name>
			<Extensions>
				<Ext Check="1">.accdb</Ext>
				<Ext Check="1">.accde</Ext>
				<Ext Check="1">.accdr</Ext>
			</Extensions>
		</Type>
		<Type ID="29" Check="1">
			<Name>Win32/64-based executable (image) Files</Name>
			<Extensions>
				<Ext Check="1">.exe</Ext>
				<Ext Check="1">.dll</Ext>
				<Ext Check="1">.ocx</Ext>
				<Ext Check="1">.scr</Ext>
				<Ext Check="1">.acm</Ext>
				<Ext Check="1">.rll</Ext>
				<Ext Check="1">.cpl</Ext>
				<Ext Check="1">.mui</Ext>
				<Ext Check="1">.ax</Ext>
				<Ext Check="1">.ime</Ext>
			</Extensions>
		</Type>
		<Type ID="30" Check="1">
			<Name>HTML Help 1.0 Files</Name>
			<Extensions>
				<Ext Check="1">.chm</Ext>
			</Extensions>
		</Type>
		<Type ID="31" Check="1">
			<Name>LocStudio lsg</Name>
			<Extensions>
				<Ext Check="1">.lsg</Ext>
			</Extensions>
		</Type>
		<Type ID="32" Check="1">
			<Name>Microsoft Office OneNote Files</Name>
			<Extensions>
				<Ext Check="1">.one</Ext>
				<Ext Check="1">.onepkg</Ext>
			</Extensions>
		</Type>
		<Type ID="33" Check="1">
			<Name>Custom Parsers</Name>
      <Extensions />
		</Type>
	</PckFileTypes>
</xmldata>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\1.5\x86\doc\license.txt ===
Microsoft Corporation Limited End User License and Non-Disclosure Agreement

PREfast Version 1.5

This Microsoft Corporation limited end user license and non-diclosure agreement ("EULA") is a legal agreement between you, as an individual and on behalf of your employer ("Licensee" or "you"), and Microsoft Corporation ("Microsoft" or "we") for the Microsoft software identified above and all associated materials, such as any media and printed, online or electronic documentation (together, the "Tool"). The Tool is protected by copyright and other intellectual property laws and treaties.  The Tool is licens
ed, not sold. 

By downloading, installing, copying, or otherwise using the Tool or any part of it, you agree to be bound by the terms of this EULA. If you do not agree, do not download, install, copy or use the Tool.    

LICENSE GRANT.  After you agree to this EULA and subject to the limitations set out below, you may use the Tool solely on Microsoft owned or leased computers located on Microsoft premises to accomplish the following purposes only:  (a) to develop and test Microsoft products or services; and (b) to develop and test Licensee's products or services, including but not limited to device drivers, to achieve compatibility of Licensee's products with Microsoft released or unreleased software, hardware, or services
 (together, the "Purpose").  In addition, you may take one copy of the confidential output from using the Tool, which includes but is not limited to bug reports (the "Output"), in hard or soft copy form, to use it on Licensee's premises to further accomplish the Purpose.  Microsoft or its suppliers own the Tool and the Output.  All other rights are reserved to Microsoft.  

Nothing in this EULA shall be construed as granting you a license to use the Tool to develop and/or test any third party products or services.

In return, we ask that you agree to the following:

1.  NO MODIFICATION:  That you will not modify the Tool, or reverse engineer or decompile any portion of it that consists of machine readable code, except and only to the extent authorized. 

2.  NO LIVE USE:  That you will not use the Tool in a live operating environment where it may be relied upon to perform like a commercially released product, or with data that has not been sufficiently backed up.

3.  PRESERVE NOTICES:  That for each copy of the Tool, you will leave in place all copyright notices and licensing information. 

4.  DO NOT TRANSFER:  That you will not sell, rent, lease, distribute, sublicense, assign, or otherwise transfer (including by loan or gift) the Tool to any other person or entity.  

5.  GIVE FEEDBACK:  That if you provide any comments, suggestions, and other feedback to Microsoft related to the Tool ("Feedback"), they will be voluntarily given with the knowledge that Feedback is Microsoft's property and may be used as we see fit without obligation or restriction of any kind, even if it is designated by you as confidential.  Microsoft is not obligated to correct any errors or make any improvements to the Tool based on Feedback.  

6.  PROFILING:  That the Tool may include a profiling feature that collects data about the types of successes and failures that the Tool produces when used, and sends data logs electronically and/or into server databases, to Microsoft as Feedback. To the extent the Feedback contains any information that could identify a user, or a user's employer ("Private Information"), Microsoft will keep the Private Information confidential and will not exploit it commercially.   

7.  CONFIDENTIALITY:  That the Tool and the Output are the confidential information of Microsoft and its suppliers.  You shall not disclose the Tool or the Output to any third party, or use the Tool or the Output for any purpose, other than as expressly permitted by this EULA.  You shall take reasonable security precautions to keep the Tool and Output confidential, at least as great as the precautions you take to protect Licensee's confidential information but in any case no less than reasonable care.  Lic
ensee shall notify Microsoft immediately upon discovery of any unauthorized use or disclosure of Microsoft's confidential information, and will cooperate with Microsoft in every reasonable way to help Microsoft regain possession of the confidential information and prevent its further unauthorized use or disclosure. During the life of this EULA and for a period of one (1) year after its termination, Licensee will maintain a list of the names all individuals who used or had access to the Tool, the Output, or
 any part thereof, and provide the list in writing to Microsoft upon request.
 
8.  NO SUPPORT:  That Microsoft is not obligated to provide technical support, updates or other similar information for the Tool ("Support").  However, if Microsoft provides you with any Support, it is done subject to this EULA and will be considered part of the Tool unless otherwise mutually agreed in writing.  

9.  NO BENCHMARKING:  That you will not disclose the results of any benchmark or performance tests, or any comparative analyses, of the Tool or any part thereof to any third party without Microsoft's prior written approval. 

10.  TERMINATION:  That the EULA terminates automatically upon the earlier of the date on which Licensee either (a) ceases to perform product compatibility testing or otherwise ceases to use the Tool for the Purpose; (b) receives written notice of termination from Microsoft, which we may elect to do at any time, with or without cause, and without prejudice to any other rights; (c) sues or threatens to sue anyone (including Microsoft) over patents that Licensee thinks may apply to the Tool; or (d) breaches 
this EULA in any way.  Sections 7, 9, 11, 12, 13, and 15 of this EULA shall survive its termination.  Licensee shall, at Microsoft's request, either return all originals and copies of the Tool and any Microsoft confidential information, or certify in writing the destruction of the same, promptly upon termination of the EULA.

11.  NO WARRANTIES WHATSOEVER:  That the Tool and any Support come "AS IS" with all faults, and with no warranties, conditions or representations, not even the implied warranties of merchantability or fitness for a particular purpose, or any warranty against interference with your enjoyment of the Tool or against infringement.  The entire risk as to satisfactory quality, performance, accuracy, and effort related to the Tool and any Support remains with you, and we have no duty of reasonable care or lack of
 negligence concerning them. 

12.  NO DAMAGES:  That Microsoft shall not be liable for any damages related to the Tool or arising under the EULA, including the damages known as direct, indirect, special, consequential, or incidental, and including any damages for negligence.

13.  REMEDIES:  That the entire liability of Microsoft and any of its suppliers arising under this EULA or Licensee's use of the Tool and any Support, and Licensee's exclusive remedy, shall be limited to Five U.S. Dollars ($5.00).  The foregoing limitations, exclusions and disclaimers shall apply to the maximum extent permitted by applicable law, even if any remedy fails its essential purpose.

14.  EXPORT LAWS:  That the Tool is of U.S.A. origin, and Licensee shall comply with all international and national laws that apply to it, including the U.S. Export Administration Regulations and any end-user, end-use and destination restrictions issued by the U.S.A. or other governments. For more information, see http://www.microsoft.com/exporting/.

15.  GOVERNING LAW; ATTORNEYS' FEES:  That this EULA shall be construed and controlled by the laws of the State of Washington, U.S.A.  Licensee consents to the exclusive jurisdiction and venue in the federal courts sitting in King County, Washington, unless no federal subject matter jurisdiction exists, in which case Licensee consents to exclusive jurisdiction and venue in the Superior Court of King County, Washington.  Licensee waives all defenses of lack of personal jurisdiction and forum nonconveniens. 
 Process may be served on either party in the manner authorized by applicable law or court rule.  If either party employs attorneys to enforce any rights arising out of or relating to this EULA, the prevailing party shall be entitled to recover reasonable attorneys' fees and costs.  

16.  CONTACTS:  That if you have any questions concerning this EULA, you may send email to pprctool@microsoft.com or write: Microsoft Research, One Microsoft Way, Redmond, WA 98052-6399.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\policheck\x86\Config\FTSets.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<xmldata>
  <PckFileTypes TotalTypes="34" TotalExts="143" UnsupportedFilesOnly="False">
    <Type ID="0" Check="1">
      <Name>Pure Text Files</Name>
      <Extensions>
        <Ext Check="1">.txt</Ext>
        <Ext Check="1">.des</Ext>
        <Ext Check="1">.pwd</Ext>
        <Ext Check="1">.asm</Ext>
        <Ext Check="1">.cmd</Ext>
        <Ext Check="1">.ini</Ext>
        <Ext Check="1">.poc</Ext>
        <Ext Check="1">.pwt</Ext>
        <Ext Check="1">.hpj</Ext>
        <Ext Check="1">.sql</Ext>
        <Ext Check="1">.inf</Ext>
        <Ext Check="1">.log</Ext>
        <Ext Check="1">.def</Ext>
        <Ext Check="1">.url</Ext>
        <Ext Check="1">.bat</Ext>
        <Ext Check="1">.aspx</Ext>
        <Ext Check="1">.idl</Ext>
        <Ext Check="1">.sys</Ext>
        <Ext Check="1">.resources</Ext>
      </Extensions>
    </Type>
    <Type ID="1" Check="1">
      <Name>CodeFiles</Name>
      <Extensions>
        <Ext Check="1">.frm</Ext>
        <Ext Check="1">.inc</Ext>
        <Ext Check="1">.cpp</Ext>
        <Ext Check="1">.cls</Ext>
        <Ext Check="1">.c</Ext>
        <Ext Check="1">.hpp</Ext>
        <Ext Check="1">.vbs</Ext>
        <Ext Check="1">.java</Ext>
        <Ext Check="1">.cs</Ext>
        <Ext Check="1">.cxx</Ext>
        <Ext Check="1">.h</Ext>
        <Ext Check="1">.jav</Ext>
        <Ext Check="1">.bas</Ext>
        <Ext Check="1">.hxx</Ext>
        <Ext Check="1">.js</Ext>
        <Ext Check="1">.pl</Ext>
        <Ext Check="1">.rc</Ext>
        <Ext Check="1">.vb</Ext>
      </Extensions>
    </Type>
    <Type ID="2" Check="1">
      <Name>XML Files</Name>
      <Extensions>
        <Ext Check="1">.xml</Ext>
        <Ext Check="1">.hxa</Ext>
        <Ext Check="1">.hxk</Ext>
        <Ext Check="1">.hxl</Ext>
        <Ext Check="1">.xsl</Ext>
        <Ext Check="1">.hxc</Ext>
        <Ext Check="1">.hxt</Ext>
        <Ext Check="1">.hxm</Ext>
        <Ext Check="1">.resx</Ext>
        <Ext Check="1">.hxe</Ext>
        <Ext Check="1">.hxf</Ext>
        <Ext Check="1">.hxv</Ext>
        <Ext Check="1">.acctb</Ext>
        <Ext Check="1">.accfl</Ext>
      </Extensions>
    </Type>
    <Type ID="3" Check="1">
      <Name>Microsoft Word Documents</Name>
      <Extensions>
        <Ext Check="1">.doc</Ext>
        <Ext Check="1">.dot</Ext>
        <Ext Check="1">.wiz</Ext>
      </Extensions>
    </Type>
    <Type ID="4" Check="1">
      <Name>Microsoft Access Database Compatible</Name>
      <Extensions>
        <Ext Check="1">.mdb</Ext>
        <Ext Check="1">.mda</Ext>
        <Ext Check="1">.mde</Ext>
        <Ext Check="1">.mpd</Ext>
        <Ext Check="1">.mdt</Ext>
      </Extensions>
    </Type>
    <Type ID="5" Check="1">
      <Name>Microsoft PowerPoint Presentation</Name>
      <Extensions>
        <Ext Check="1">.ppt</Ext>
        <Ext Check="1">.pot</Ext>
        <Ext Check="1">.pps</Ext>
      </Extensions>
    </Type>
    <Type ID="6" Check="1">
      <Name>Microsoft Publisher Files</Name>
      <Extensions>
        <Ext Check="1">.pub</Ext>
      </Extensions>
    </Type>
    <Type ID="7" Check="1">
      <Name>Microsoft Excel Workbooks</Name>
      <Extensions>
        <Ext Check="1">.xls</Ext>
        <Ext Check="1">.xlt</Ext>
      </Extensions>
    </Type>
    <Type ID="8" Check="1">
      <Name>Pure Binary Files</Name>
      <Extensions>
        <Ext Check="1">.com</Ext>
        <Ext Check="1">.bin</Ext>
        <Ext Check="1">.tlb</Ext>
        <Ext Check="1">.drv</Ext>
        <Ext Check="1">.fon</Ext>
      </Extensions>
    </Type>
    <Type ID="9" Check="1">
      <Name>LocStudio resource databases</Name>
      <Extensions>
        <Ext Check="1">.edb</Ext>
        <Ext Check="1">.lcl</Ext>
      </Extensions>
    </Type>
    <Type ID="10" Check="1">
      <Name>Microsoft Project Files</Name>
      <Extensions>
        <Ext Check="1">.mpp</Ext>
        <Ext Check="1">.mpt</Ext>
      </Extensions>
    </Type>
    <Type ID="11" Check="1">
      <Name>Microsoft Visio Files</Name>
      <Extensions>
        <Ext Check="1">.vsd</Ext>
        <Ext Check="1">.vdx</Ext>
        <Ext Check="1">.vss</Ext>
        <Ext Check="1">.vst</Ext>
      </Extensions>
    </Type>
    <Type ID="12" Check="1">
      <Name>Windows Installer databases</Name>
      <Extensions>
        <Ext Check="1">.msi</Ext>
        <Ext Check="1">.msm</Ext>
      </Extensions>
    </Type>
    <Type ID="13" Check="1">
      <Name>Zip Files</Name>
      <Extensions>
        <Ext Check="1">.zip</Ext>
        <Ext Check="1">.accdt</Ext>
      </Extensions>
    </Type>
    <Type ID="14" Check="1">
      <Name>Cabinet / MS Compression Files</Name>
      <Extensions>
        <Ext Check="1">.cab</Ext>
      </Extensions>
    </Type>
    <Type ID="15" Check="1">
      <Name>Table driven IME lexicons</Name>
      <Extensions>
        <Ext Check="1">.mb</Ext>
      </Extensions>
    </Type>
    <Type ID="16" Check="1">
      <Name>IME ( IMD ) Files</Name>
      <Extensions>
        <Ext Check="1">.imd</Ext>
      </Extensions>
    </Type>
    <Type ID="17" Check="1">
      <Name>TrueType Font Files</Name>
      <Extensions>
        <Ext Check="1">.ttf</Ext>
      </Extensions>
    </Type>
    <Type ID="18" Check="1">
      <Name>Microsoft Outlook Mail Files</Name>
      <Extensions>
        <Ext Check="1">.msg</Ext>
        <Ext Check="1">.oft</Ext>
      </Extensions>
    </Type>
    <Type ID="19" Check="1">
      <Name>HTML Help 2.0 Files / InfoTech5.x Storage System Files</Name>
      <Extensions>
        <Ext Check="1">.its</Ext>
        <Ext Check="1">.hxh</Ext>
        <Ext Check="1">.hxr</Ext>
        <Ext Check="1">.hxw</Ext>
        <Ext Check="1">.hxi</Ext>
        <Ext Check="1">.hxs</Ext>
        <Ext Check="1">.hxq</Ext>
      </Extensions>
    </Type>
    <Type ID="20" Check="1">
      <Name>Adobe Acrobat PDF Files</Name>
      <Extensions>
        <Ext Check="1">.pdf</Ext>
      </Extensions>
    </Type>
    <Type ID="21" Check="1">
      <Name>HTML Files / Web Page</Name>
      <Extensions>
        <Ext Check="1">.htm</Ext>
        <Ext Check="1">.dtd</Ext>
        <Ext Check="1">.hhk</Ext>
        <Ext Check="1">.htw</Ext>
        <Ext Check="1">.asp</Ext>
        <Ext Check="1">.htc</Ext>
        <Ext Check="1">.htx</Ext>
        <Ext Check="1">.html</Ext>
        <Ext Check="1">.hhc</Ext>
        <Ext Check="1">.css</Ext>
        <Ext Check="1">.stm</Ext>
      </Extensions>
    </Type>
    <Type ID="22" Check="1">
      <Name>Rich Text Files</Name>
      <Extensions>
        <Ext Check="1">.rtf</Ext>
      </Extensions>
    </Type>
    <Type ID="23" Check="1">
      <Name>Windows 3.x Write Files</Name>
      <Extensions>
        <Ext Check="1">.wri</Ext>
      </Extensions>
    </Type>
    <Type ID="24" Check="1">
      <Name>MHTML Files</Name>
      <Extensions>
        <Ext Check="1">.eml</Ext>
        <Ext Check="1">.nws</Ext>
        <Ext Check="1">.mht</Ext>
      </Extensions>
    </Type>
    <Type ID="25" Check="1">
      <Name>Word 2007 Files</Name>
      <Extensions>
        <Ext Check="1">.docx</Ext>
        <Ext Check="1">.docm</Ext>
        <Ext Check="1">.dotx</Ext>
        <Ext Check="1">.dotm</Ext>
      </Extensions>
    </Type>
    <Type ID="26" Check="1">
      <Name>Excel 2007 Files</Name>
      <Extensions>
        <Ext Check="1">.xlsx</Ext>
        <Ext Check="1">.xlsm</Ext>
        <Ext Check="1">.xltx</Ext>
        <Ext Check="1">.xltm</Ext>
        <Ext Check="1">.xlsb</Ext>
        <Ext Check="1">.xlam</Ext>
      </Extensions>
    </Type>
    <Type ID="27" Check="1">
      <Name>Power Point 2007 Files</Name>
      <Extensions>
        <Ext Check="1">.pptx</Ext>
        <Ext Check="1">.pptm</Ext>
        <Ext Check="1">.potx</Ext>
        <Ext Check="1">.potm</Ext>
        <Ext Check="1">.ppsx</Ext>
        <Ext Check="1">.ppsm</Ext>
        <Ext Check="1">.ppam</Ext>
      </Extensions>
    </Type>
    <Type ID="28" Check="1">
      <Name>Access 2007 Files</Name>
      <Extensions>
        <Ext Check="1">.accdb</Ext>
        <Ext Check="1">.accde</Ext>
        <Ext Check="1">.accdr</Ext>
      </Extensions>
    </Type>
    <Type ID="29" Check="1">
      <Name>Win32/64-based executable (image) Files</Name>
      <Extensions>
        <Ext Check="1">.exe</Ext>
        <Ext Check="1">.dll</Ext>
        <Ext Check="1">.ocx</Ext>
        <Ext Check="1">.scr</Ext>
        <Ext Check="1">.acm</Ext>
        <Ext Check="1">.rll</Ext>
        <Ext Check="1">.cpl</Ext>
        <Ext Check="1">.mui</Ext>
        <Ext Check="1">.ax</Ext>
        <Ext Check="1">.ime</Ext>
      </Extensions>
    </Type>
    <Type ID="30" Check="1">
      <Name>HTML Help 1.0 Files</Name>
      <Extensions>
        <Ext Check="1">.chm</Ext>
      </Extensions>
    </Type>
    <Type ID="31" Check="1">
      <Name>LocStudio lsg</Name>
      <Extensions>
        <Ext Check="1">.lsg</Ext>
      </Extensions>
    </Type>
    <Type ID="32" Check="1">
      <Name>Microsoft Office OneNote Files</Name>
      <Extensions>
        <Ext Check="1">.one</Ext>
        <Ext Check="1">.onepkg</Ext>
      </Extensions>
    </Type>
    <Type ID="33" Check="1">
      <Name>Custom Parsers</Name>
      <Extensions />
    </Type>
  </PckFileTypes>
</xmldata>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\1.5\x86\bin\modules\PfxModel.xml ===
<?xml version="1.0" encoding="UTF-8"?>
<Models>
  <Function name="SysAllocString">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SysAllocStringLen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SysAllocStringByteLen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateFileA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateFileW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FindFirstChangeNotificationA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FindFirstChangeNotificationW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FindFirstFileA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FindFirstFileW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FindFirstFileExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FindFirstFileExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenFile">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lwrite">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lread">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lopen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_hread">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_hwrite">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lclose">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lcreat">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_llseek">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>

  <Function name="CreateFileMappingA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateFileMappingW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenFileMappingA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenFileMappingW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>

  <Function name="CreateEventA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateEventW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenEventA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenEventW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateMutexA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateMutexW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenMutexA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenMutexW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateSemaphoreA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateSemaphoreW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenSemaphoreA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenSemaphoreW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateWaitableTimerA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateWaitableTimerW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenWaitableTimerA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenWaitableTimerW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>

  <Function name="isdigit">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isalnum">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isalpha">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isascii">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iscntrl">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iscsym">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isgraph">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isleadbyte">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="islower">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isprint">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="ispunct">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isspace">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isupper">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isctype">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isxdigit">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswdigit">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswalnum">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswalpha">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswascii">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswcntrl">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswgraph">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswlower">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswprint">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswpunct">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswspace">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswupper">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswctype">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswxdigit">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="malloc">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <NeedsRelease value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strcpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcscpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_mbscpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="lstrcpyA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="lstrcpyW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="strcat">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcscat">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_mbscat">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="lstrcatA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="lstrcatW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="strncpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcsncpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_mbsncpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="lstrcpynA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="lstrcpynW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="strncat">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcsncat">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_mbsncat">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="strlen">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcslen">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbslen">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbstrlen">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrlenA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrlenW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strcmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcscmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbscmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrcmpA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrcmpW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strncmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcsncmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbsncmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_stricmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_wcsicmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbsicmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_strnicmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_wcsnicmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbsnicmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_strdup">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <NeedsRelease value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="memcpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CopyMemory">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="memmove">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="memset">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="gets">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_getws">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="fgets">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="fgetws">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="fread">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <IsTrusted value="never"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ReadFile">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <IsTrusted value="never"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ReadFileEx">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <IsTrusted value="never"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="scanf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="fscanf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="sscanf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_read">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="fseek">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lseek">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lseeki64">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="fsetpos">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="BindMoniker">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="BstrFromVector">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CheckParameters">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CheckParms">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CLSIDFromProgID">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateDispTypeInfo">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateErrorInfo">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateStdDispatch">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateTypeLib">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateTypeLib2">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="Direct3DRMCreate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DirectDrawCreate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DirectDrawCreateClipper">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DirectDrawEnumerate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DirectPlayCreate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DirectSoundCreate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DispGetIDsOfNames">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DispGetParam">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DispInvoke">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DllGetClassObject">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DosDateTimeToVariantTime">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="GetActiveObject">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="GetAltMonthNames">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="GetAttribIMsgOnIStg">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="GetErrorInfo">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="GetKeyboardState">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="GetWindowsDirectoryA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetWindowsDirectoryW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="HPProviderInit">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="HrAddColumnsEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="HrDispatchNotifications">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="HrEntryIDFromSz">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="HrIStorageFromStream">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="HrQueryAllRows">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="LHashValOfName">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="LHashValOfNameSys">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="LoadRegTypeLib">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="LoadTypeLibEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="MAPIAdminProfiles">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="MAPIInitialize">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="MAPILogonEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="MSProviderInit">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OleCreateEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OleCreateFromDataEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OleCreateFromFileEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OleCreateFromLinkEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OleCreateLinkFromDataEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenStreamOnFile">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenTnefStream">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenTnefStreamEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="PropVariantCopy">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegisterActiveObject">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegisterTypeLib">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RTFSync">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SafeArrayCopy">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SafeArrayCopyData">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SafeArrayPutElement">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SetAttribIMsgOnIStg">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ShGetDataFromIDList">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SHGetDesktopFolder">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SHGetInstanceExplorer">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SHGetMalloc">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SHGetSpecialFolderLocation">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SHLoadInProc">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="TlsAlloc">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UnRegisterTypeLib">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VarDateFromUdate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VariantChangeType">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VariantChangeTypeEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VariantCopy">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VariantCopyInd">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VarNumFromParseNum">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VarParseNumFromStr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VarUdateFromDate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VectorFromBstr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WrapCompressedRTFStream">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcImpersonateClient">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcRevertToSelfEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcRevertToSelf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcAsyncInitializeHandle">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcAsyncRegisterInfo">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcAsyncGetCallStatus">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcAsyncCompleteCall">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcAsyncAbortCall">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcAsyncCancelCall">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcAsyncSetHandle">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcAsyncAbortCall">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingCopy">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingSetOption">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqOption">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingFromStringBindingA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingFromStringBindingW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqObject">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingReset">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingSetObject">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqDefaultProtectLevel">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingToStringBindingA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingToStringBindingW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcStringBindingComposeA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcStringBindingComposeW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcStringBindingParseA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcStringBindingParseW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcIfInqId">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcNetworkIsProtseqValidA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcNetworkIsProtseqValidW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqComTimeout">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtSetComTimeout">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtSetCancelTimeout">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcNetworkInqProtseqsA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcNetworkInqProtseqsW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcObjectInqType">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcObjectSetInqFn">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcObjectSetType">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerInqBindings">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerInqIf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerListen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerRegisterIf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerRegisterIfEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUnregisterIf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseAllProtseqs">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseAllProtseqsEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseAllProtseqsIf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseAllProtseqsIfEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqEpA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqEpW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqEpExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqEpExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqIfA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqIfW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqIfExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqIfExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqStats">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtIsServerListening">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtStopServerListening">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtWaitServerListen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtSetServerStackSize">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtEnableIdleCleanup">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqIfIds">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqServerPrincNameA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqServerPrincNameW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerInqDefaultPrincNameA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerInqDefaultPrincNameW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcEpResolveBinding">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcNsBindingInqEntryNameA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcNsBindingInqEntryNameW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqAuthClientA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqAuthClientW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqAuthInfoA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqAuthInfoW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingSetAuthInfoA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingSetAuthInfoW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingSetAuthInfoExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingSetAuthInfoExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqAuthInfoExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqAuthInfoExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerRegisterAuthInfoA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerRegisterAuthInfoW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingServerFromClient">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcTestCancel">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerTestCancel">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcCancelThread">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UuidCreate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UuidToStringA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UuidToStringW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UuidFromStringA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UuidFromStringW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UuidCreateNil">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcEpRegisterNoReplaceA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcEpRegisterNoReplaceW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcEpRegisterA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcEpRegisterW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcEpUnregister">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DceErrorInqTextA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DceErrorInqTextW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtEpEltInqBegin">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtEpEltInqDone">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtEpEltInqNextA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtEpEltInqNextW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtEpUnregister">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtSetAuthorizationFn">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqParameter">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtSetParameter">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtBindingInqParameter">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtBindingSetParameter">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcGetBuffer">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcSendReceive">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcFreeBuffer">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcSend">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcReceive">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcFreePipeBuffer">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcReallocPipeBuffer">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcMonitorAssociation">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcStopMonitorAssociation">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcGetAssociationContext">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcNsBindingSetEntryNameW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcNsBindingSetEntryNameA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcBindingInqDynamicEndpointW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcBindingInqDynamicEndpointA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcBindingInqTransportType">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcIfInqTransferSyntaxes">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_UuidCreate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcBindingCopy">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcLaunchDatagramReceiveThread">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcServerRegisterForwardFunction">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcConnectionInqSockBuffSize">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcConnectionSetSockBuffSize">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcServerStartListening">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcServerStopListening">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcGetThreadWindowHandle">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcAsyncSendReceive">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcBindingSetAsync">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcSetWMsgEndpoint">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcSetThreadParams">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcServerUnregisterEndpointA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcServerUnregisterEndpointW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SysStringLen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SysStringByteLen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrncmpW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrncmpA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrcmpiW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrcmpiA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strchr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcschr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbschr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strrchr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcsrchr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbsrchr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strstr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcsstr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbsstr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strspn">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcsspm">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbsspn">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="atof">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="atoi">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="atol">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="atold">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_atoi64">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsCharAlpha">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsCharAlphaNumeric">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsCharLower">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsCharUpper">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsBadCodePtr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsBadReadPtr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsBadStringPtr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsBadWritePtr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="isalpha">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="iswalpha">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_strerror">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strerror">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FillMemory">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ZeroMemory">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="MoveMemory">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_memccpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="MprConfigGetFriendlyName">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RhRegGetStringValueW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RhRegSetStringValueW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="OemToCharBuffA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CharToOemBuffA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="OemToCharBuffW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CharToOemBuffW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CharUpperBuffA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CharUpperBuffW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CharLowerBuffA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CharLowerBuffW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_snprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_vsnprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_snwprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_vsnwprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcstombs">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="mbstowcs">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_strnset">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_mbsnset">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_wcsnset">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="strxfrm">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcsxfrm">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadConsoleA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadConsoleW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadConsoleInputA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="20"/>        <!-- sizeof (INPUT_RECORD) -->
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadConsoleInputW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="20"/>        <!-- sizeof (INPUT_RECORD) -->
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadProcessMemory">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadEventLogA">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadEventLogW">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadPrinter">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="MultiByteToWideChar">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="WideCharToMultiByte">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetCurrentDirectoryW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="0"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetCurrentDirectoryA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="0"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_wgetcwd">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_getcwd">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetSystemDirectoryW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetSystemDirectoryA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetWindowTextW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetWindowTextA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetFullPathNameW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetFullPathNameA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetShortPathNameW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetShortPathNameA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetLongPathNameW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetLongPathNameA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetTempPathW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="0"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetTempPathA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="0"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetTempFileNameA">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <Constant value="260"/>                <!-- bytes = MAX_PATH -->
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetTempFileNameW">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <Constant value="520"/>                <!-- bytes = MAX_PATH * 2 for Unicode -->
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileSectionNamesW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileSectionNamesA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileSectionW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileSectionA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileStringW">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileStringA">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileStructW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileStructA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetProfileStringW">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetProfileStringA">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetModuleFileNameW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetModuleFileNameA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetEnvironmentVariableW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetEnvironmentVariableA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetVolumeInformationW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetVolumeInformationA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ExpandEnvironmentStringsW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ExpandEnvironmentStringsA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="SearchPathW">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="SearchPathA">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetAtomNameW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetAtomNameA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetTokenInformation">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="AdjustTokenPrivileges">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="AdjustTokenBuffer">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetAclInformation">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetFileSecurityW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetFileSecurityA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadDirectoryChangesW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupAccountNameW">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupAccountNameA">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupAccountSidW">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupAccountSidA">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupPrivilegeNameW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupPrivilegeNameA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupPrivilegeDisplayNameW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupPrivilegeDisplayNameA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetDefaultCommConfigW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetDefaultCommConfigA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetComputerNameW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetComputerNameA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetComputerNameExW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID  deref="1" type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetComputerNameExA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID  deref="1" type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetUserNameW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetUserNameA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetUserNameExW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID  deref="1" type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetUserNameExA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID  deref="1" type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegEnumKeyW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegEnumKeyA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="PeekNamedPipe">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="TransactNamedPipe">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CallNamedPipeW">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CallNamedPipeA">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LoadStringW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LoadStringA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="gethostname">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="recv">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="recvfrom">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="NtReadFile">
    <External>
      <ExternalID type="param" index="5"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="6"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ZwReadFile">
    <External>
      <ExternalID type="param" index="5"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="6"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RtlGetFullPathName_U">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="KeBugCheck">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="KeBugCheck2">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="KeBugCheckEx">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_com_raise_error">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RpcRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="OemToCharA">
    <FunctionProperties>
      <PreferredFunction name="OemToCharBuffA">
        <Reason>safer</Reason>
      </PreferredFunction>
    </FunctionProperties>
  </Function>
  <Function name="OemToCharW">
    <FunctionProperties>
      <PreferredFunction name="OemToCharBuffW">
        <Reason>safer</Reason>
      </PreferredFunction>
    </FunctionProperties>
  </Function>
  <Function name="WinExec">
    <FunctionProperties>
      <Deprecated value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="printf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="sprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <FunctionProperties>
      <PreferredFunction name="strcpy">
        <Reason>unformatted</Reason>
      </PreferredFunction>
    </FunctionProperties>
  </Function>
  <Function name="wsprintfA">
    <FunctionProperties>
      <PreferredFunction name="strcpy">
        <Reason>unformatted</Reason>
      </PreferredFunction>
    </FunctionProperties>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wsprintfW">
    <FunctionProperties>
      <PreferredFunction name="wcscpy">
        <Reason>unformatted</Reason>
      </PreferredFunction>
    </FunctionProperties>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="WmipCountedToSzAndTrim">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wscanf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="swscanf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="fwscanf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="swprintf">
    <FunctionProperties>
      <PreferredFunction name="wcscpy">
        <Reason>unformatted</Reason>
      </PreferredFunction>
    </FunctionProperties>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="fprintf">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="fwprintf">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="strftime">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always" style="strftime"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcsftime">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always" style="strftime"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_tcsncpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_mbsnbcpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="vprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="vsprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="vswprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="vwprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wnsprintfA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wnsprintfW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wvsprintf">
    <FunctionProperties>
      <PreferredFunction name="wcscpy">
        <Reason>unformatted</Reason>
      </PreferredFunction>
    </FunctionProperties>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_cprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_cscanf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="MIDL_user_allocate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <NeedsRelease value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="MIDL_user_free">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions/>
      <PostConditions>
        <IsReleased value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SetThreadToken">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateProcessA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsWritableString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="6"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="7"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="8"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CreateProcessW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsWritableString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="6"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="7"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="8"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CreateProcessAsUserA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsWritableString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="7"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="8"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CreateProcessAsUserW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsWritableString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="7"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="8"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CreateProcessWithLogonW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <IsNullOk value="sometimes"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="5"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsWritableString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="7"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="8"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ImpersonateDdeClientWindow">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ImpersonateLoggedOnUser">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ImpersonateNamedPipeClient">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ImpersonateSecurityContext">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ImpersonateSelf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegSetValueA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
        <ShouldBeZeroTerminated value="sometimes"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegSetValueW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
        <ShouldBeZeroTerminated value="sometimes"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegSetValueExA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
        <ShouldBeZeroTerminated value="sometimes"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="5"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegSetValueExW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
        <ShouldBeZeroTerminated value="sometimes"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="5"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="AdjustTokenGroups">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ACPIAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ASSERT">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AV_Exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowArchiveException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowDaoException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowDBException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowFileException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowInternetException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowMemoryException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowNotSupportedException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowOleDispatchException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowOleException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowResourceException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowUserException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxAssertFailedLine__FPCci">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxPostQuitMessage__Fi">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowArchiveException__FiPCc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowFileException__FilPCUs">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowFileException__FilPCc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowMemoryException__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowNotSupportedException__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowOleException__Fl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowResourceException__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowUserException__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AppExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Assert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertErrorReport__FPCcUiT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertFail">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertFailed">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertFailedLine__FPCci">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertHelper">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertSzHelper">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertionFailure__FPci">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Assertion__9IDbOutputFiPcT2UiT2">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AttribAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="BadExitCleanup">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="BadExitCleanup__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Bail__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="BaseExitThreadPoolThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="CMDexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="CSDbgBreakPoint__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="CSPrintAssert__FPCcT1UlT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="CleanExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="CleanupExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="CriticalErrorExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DDE_ExitProgman__FPUsPUiP8_DDECONV">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DDE_ExitProgman__FPcPUiP8_DDECONV">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DELLogAndTerminate__FUsT1UlT3PvPciT7T5">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DbgBreakPoint">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DbgBreakPointWithStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DbgBreak__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DbgSspExitProcess">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DbgSspExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DbgUserBreakPoint">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Dbg_HardAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Debug_Assert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DeleteAndExit__12WIN32_THREADFUi">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DeviceAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DfsBugCheck">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Die">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DiskErrorFatal">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayErrorAndExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayFatal__FPCcUibT2Pc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayMessageAndExit__4FINDFUlT112MESSAGE_TYPEP7WSTRING">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayMessageAndExit__5XCOPYFUlP7WSTRINGT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayMessageAndExit__7REPLACEFUlPC7WSTRINGT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayMessageAndExit__FUlPC7WSTRINGT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayUsageAndExit__FPPcP9SParamDef">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DllFreeLibraryAndExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Dns_Assert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DoAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DoExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DoExitWindows">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DoExitWindowsEx">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DosRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Dr_RaiseFatalError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DraExcept">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ENRE_exit__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ErrorExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ErrorExitW">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ErrorUsageAndExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExRaiseAccessViolation">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExRaiseDatatypeMisalignment">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExRaiseHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExRaiseStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Ex_RaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Ex_RaiseFormerrException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitConfigure">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitCustomAppWiz__15CResTypAWAppWizFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitField">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitField__FP10tagCONTROLi">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitMessageLoop__13CAltExtWizardFUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitMyProcessDesktopAccess__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitPeriSession">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitProcess">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitProgram__7PROGRAMFUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitSession">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitThreadApc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitThread__11CEnumThreadFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitToDos">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitWithError__5XCOPYFUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitWithError__7REPLACEFUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitWithError__FUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Exit__Fi">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExpRaiseHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FAssertProc__FPCUsUlT1T2">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FAssertProc__FPCcUlT1T2">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit0">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit12">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit16">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit20">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit24">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit28">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit32">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit36">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit4">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit40">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit44">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit48">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit52">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit56">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit8">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fail">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fail__13CDataExchangeFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fail__FUi">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fatal">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FatalAppExitA">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FatalAppExitW">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FatalApplicationError__Fie">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FatalError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FatalExceptionFilter">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FatalExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fatal__7PROGRAMCFUlT1Pce">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fatal__7PROGRAMCFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fatal__FPCcUie">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fatality___FPcUlT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FreeLibraryAndExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FrsExitCommandServer">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FrsRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="HWInfoAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="HalpMcaSwitchMcaExceptionStackAndBugCheck">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="HelpAndExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="HidServExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ILS_ExitWait">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="I_RpcNsRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="IacAutoFatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="InternalError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="IoRaiseHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="IoRaiseInformationalHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="IopDriverCorrectnessThrowBugCheck">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="IopRaiseHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="IopRaiseInformationalHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="KdpCauseBugCheck">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="LdsFatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="LsFatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MainFrsExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MemAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MemoryExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MergeFatalError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MyExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NdrpRaisePipeException__FP14_NDR_PIPE_DESCl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NetpAssertFailed">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NetpRaiseAlert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NlAssertFailed">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NlExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NoErrorUsageAndExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NtRaiseHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NtfsRaiseInformationHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NtfsRaiseStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NtfsRaiseStatusFunction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="OFatalAppExitW">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="OSNotifyFatalErrorWorker">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Od2DosExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Od2JumpTo16ExitRoutine">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Od2JumpToExitRoutine">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Od2RaiseStackException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="OleTestAssert__FPcT1Ui">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Os2DosExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Os2SrvExitProcess">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Os2WaitSyncAndExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Ow2Exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PREfixExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Panic">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PanicMessage">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PoShutdownBugCheck">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PostQuitMessage">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PrivateAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PsCleanUpAndExitProcess">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PspExitNormalApc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PspExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PuDbgAssertFailed">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="QueueAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="QuitThread__13CWorkerThreadFP6HWND__">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Quit__11CWebBrowserFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Quit__12CApplicationFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Quit__13CWebEventSinkFPs">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Quit__14IWebBrowserAppFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseDsaExcept">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseExceptionProxy__FUlN21PUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseException__10CAdRotatorSFPUs">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseException__9CToolsCtlSFPUs">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseException__Fl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseNMEvent">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Raise__FUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ReportAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RouterAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RtlAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RtlRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RtlRaiseStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RtlpExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RxAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SHExitWindowsEx">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SampAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ScpLinkFatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ShowAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ShowAssert__FPcUiT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SigFatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SigRstInd_FatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SigRstRq_FatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SmartcardExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="StreamClassDebugAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SysExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SysFatal">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="TRCExitProcess">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ThrowErrno__14CFileExceptionSFiPCc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ThrowError__7CKernelFUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ThrowError__9CTemplateFPUcUi">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ThrowError__F10_com_errorPCUse">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ThrowError__F10_com_errorUie">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ToplRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="TrkRaiseException__Fl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="TrkRaiseLastError__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="TrkRaiseNtStatus__Fl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="TrkRaiseWin32Error__Fl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UIAssertHelper">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UIAssertSzHelper">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UdfNormalizeAndRaiseStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UdfRaiseStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UmeFatalError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UnmergeFatalError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UpsLineAsserted">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UserRtlRaiseStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UtilExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="WK32ExitKernel">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="WK32FatalExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="WNetErrorExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="YY_FATAL__15ModuleInfo_scanFPc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="YY_FATAL__7yy_scanFPc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="YellAndExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_Assert__FiPcT1T2">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_CrtDbgReport">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_Doraise__Q2_3std12out_of_rangeCFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_Doraise__Q2_3std9bad_allocCFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_DsysAssertEx">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_amsg_exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_c_exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_cexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_com_issue_error">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="assert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="assertFailed">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="die">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="doexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="doexit__FiN21">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="error_exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="error_exit__FP18jpeg_common_struct">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="errorexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="errorexit__FPCce">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="fail__3iosCFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="fatal">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="fatal__FPce">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="fatal_alloc_failure">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="gmem_panic">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="host_error">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="kperror_exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="my_error_exit__FP18jpeg_common_struct">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="quit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="rshexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="scMemoryPanic">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="scpFatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="std_error_exit__3rtgFP18jpeg_common_struct">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="tkQuit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="vExecExitComplete__9MExecWorkFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="vold_driver_exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="windexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="wsRedExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="xexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RtError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AbortLayout">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MsoFAssertSzProcVar">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MsoFAssertSzTagProcVar">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MsoDebugBreak">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MsoNotReachedTag">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="setjmp">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_setjmp">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_setjmpex">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="longjmp">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_longjmp">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_longjmpex">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ex_raise">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="utassert_fail">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="GetClassNameW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
    </External>
  </Function>
  <Function name="GetClassNameA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
    </External>
  </Function>
  <Function name="GetTimeFormatA">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
    </External>
  </Function>
  <Function name="GetTimeFormatW">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
    </External>
  </Function>
  <Function name="InterlockedIncrement">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
    </External>
  </Function>
  <Function name="InitializeCriticalSectionAndSpinCount">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegQueryValueA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegQueryValueW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegQueryValueExA">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegQueryValueExW">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCopyA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCopyW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbPrintfA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbPrintfW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbVPrintfA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbVPrintfW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCopyA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCopyW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchPrintfA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchPrintfW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchVPrintfA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchVPrintfW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCopyWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCopyWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringVPrintfWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringVPrintfWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCopyExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCopyExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbPrintfExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbPrintfExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbVPrintfExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbVPrintfExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCopyExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCopyExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchPrintfExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchPrintfExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchVPrintfExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchVPrintfExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatExWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatExWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCopyExWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCopyExWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringVPrintfExWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringVPrintfExWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbLengthA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbLengthW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchLengthA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchLengthW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatNA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatNW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatNA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatNW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatNExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatNExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatNExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatNExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatNWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatNWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatNExWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatNExWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchGetsA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchGetsW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbGetsA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbGetsW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchGetsExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchGetsExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbGetsExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbGetsExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringGetsExWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringGetsExWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringLengthWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringLengthWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
</Models>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\1.5\x86\scripts\DefectUI\DefectVersion.txt ===
2400
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\1.5\x86\scripts\DefectUI\Filters.xml ===
<?xml version='1.0'?>
<DefectFilters defaultPreset="Recommended Filters">
    <preset name="Recommended Filters" recommended="1">
    </preset>

    <preset name="(all defects)">
    </preset>

    <preset name="(no defects)" invert="1">
    </preset>
	<preset name="winpft" invert="1">
		<excludeWarnings>29;53;56;57;59;63;67;201;202;205;207;241;243;248;252;259;260;268;276;277;281;282;287;288;289;290;291;296;298;299;305;306;308;</excludeWarnings>
		<excludeRegExps>pft</excludeRegExps>
	</preset>

	<preset name="wspmin" invert="1">
		<excludeWarnings>29;53;56;57;59;63;67;201;202;205;207;241;243;248;252;259;260;268;276;277;281;282;287;288;289;290;291;296;298;299;305;306;308;</excludeWarnings>
		<excludeRegExps>pft</excludeRegExps>
	</preset>

	<Filter id="pft" enableByDefault="1">
		<description>PREfast Internal Errors</description>
		<field>DEFECTCODE</field>
		<regexp>99[0-9]{3}</regexp>
	</Filter>

	<Filter id="NTPub" enableByDefault="1">
		<description>NT Public files</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*\\public\\.*$</regexp>
	</Filter>

	<Filter id="VC6" enableByDefault="1">
		<description>VC6 includes</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*\\vc98\\include\\.*$</regexp>
	</Filter>

	<Filter id="MFC" enableByDefault="1">
		<description>MFC includes</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*\\mfc\\include\\.*$</regexp>
		<regexp>^.*\\atlmfc\\.*$</regexp>        
		<regexp>^.*\\mfcatl\\.*$</regexp>                                
	</Filter>

	<Filter id="ATL" enableByDefault="1">
		<description>ATL includes</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*\\atl\\.*$</regexp>
		<regexp>^.*\\atl30\\.*$</regexp>        
		<regexp>^.*\\atl70\\.*$</regexp> 
		<regexp>^.*\\atlmfc\\.*$</regexp>        
		<regexp>^.*\\mfcatl\\.*$</regexp>                        
	</Filter>

	<Filter id="LKRH" enableByDefault="1">
		<description>LKRHash.h</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*\\lkrhash\.h$</regexp>
	</Filter>

	<Filter id="MIDL" enableByDefault="1">
		<description>generated MIDL files</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*_[psc]\.c$</regexp>
	</Filter>

	<Filter id="INC" enableByDefault="0">
		<description>all include files</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*\\include\\.*$</regexp>
		<regexp>^.*\\inc\\.*$</regexp>
	</Filter>

</DefectFilters>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.0\x86\bin\modules\Version.txt ===
2999
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.1\x86\bin\modules\Version.txt ===
3469
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.0\x86\doc\license.txt ===
Microsoft Corporation Limited End User License and Non-Disclosure Agreement

PREfast Version 2.0

This Microsoft Corporation limited end user license and non-diclosure agreement ("EULA") is a legal agreement between you, as an individual and on behalf of your employer ("Licensee" or "you"), and Microsoft Corporation ("Microsoft" or "we") for the Microsoft software identified above and all associated materials, such as any media and printed, online or electronic documentation (together, the "Tool"). The Tool is protected by copyright and other intellectual property laws and treaties.  The Tool is licens
ed, not sold. 

By downloading, installing, copying, or otherwise using the Tool or any part of it, you agree to be bound by the terms of this EULA. If you do not agree, do not download, install, copy or use the Tool.    

LICENSE GRANT.  After you agree to this EULA and subject to the limitations set out below, you may use the Tool solely on Microsoft owned or leased computers located on Microsoft premises to accomplish the following purposes only:  (a) to develop and test Microsoft products or services; and (b) to develop and test Licensee's products or services, including but not limited to device drivers, to achieve compatibility of Licensee's products with Microsoft released or unreleased software, hardware, or services
 (together, the "Purpose").  In addition, you may take one copy of the confidential output from using the Tool, which includes but is not limited to bug reports (the "Output"), in hard or soft copy form, to use it on Licensee's premises to further accomplish the Purpose.  Microsoft or its suppliers own the Tool and the Output.  All other rights are reserved to Microsoft.  

Nothing in this EULA shall be construed as granting you a license to use the Tool to develop and/or test any third party products or services.

In return, we ask that you agree to the following:

1.  NO MODIFICATION:  That you will not modify the Tool, or reverse engineer or decompile any portion of it that consists of machine readable code, except and only to the extent authorized. 

2.  NO LIVE USE:  That you will not use the Tool in a live operating environment where it may be relied upon to perform like a commercially released product, or with data that has not been sufficiently backed up.

3.  PRESERVE NOTICES:  That for each copy of the Tool, you will leave in place all copyright notices and licensing information. 

4.  DO NOT TRANSFER:  That you will not sell, rent, lease, distribute, sublicense, assign, or otherwise transfer (including by loan or gift) the Tool to any other person or entity.  

5.  GIVE FEEDBACK:  That if you provide any comments, suggestions, and other feedback to Microsoft related to the Tool ("Feedback"), they will be voluntarily given with the knowledge that Feedback is Microsoft's property and may be used as we see fit without obligation or restriction of any kind, even if it is designated by you as confidential.  Microsoft is not obligated to correct any errors or make any improvements to the Tool based on Feedback.  

6.  PROFILING:  That the Tool may include a profiling feature that collects data about the types of successes and failures that the Tool produces when used, and sends data logs electronically and/or into server databases, to Microsoft as Feedback. To the extent the Feedback contains any information that could identify a user, or a user's employer ("Private Information"), Microsoft will keep the Private Information confidential and will not exploit it commercially.   

7.  CONFIDENTIALITY:  That the Tool and the Output are the confidential information of Microsoft and its suppliers.  You shall not disclose the Tool or the Output to any third party, or use the Tool or the Output for any purpose, other than as expressly permitted by this EULA.  You shall take reasonable security precautions to keep the Tool and Output confidential, at least as great as the precautions you take to protect Licensee's confidential information but in any case no less than reasonable care.  Lic
ensee shall notify Microsoft immediately upon discovery of any unauthorized use or disclosure of Microsoft's confidential information, and will cooperate with Microsoft in every reasonable way to help Microsoft regain possession of the confidential information and prevent its further unauthorized use or disclosure. During the life of this EULA and for a period of one (1) year after its termination, Licensee will maintain a list of the names all individuals who used or had access to the Tool, the Output, or
 any part thereof, and provide the list in writing to Microsoft upon request.
 
8.  NO SUPPORT:  That Microsoft is not obligated to provide technical support, updates or other similar information for the Tool ("Support").  However, if Microsoft provides you with any Support, it is done subject to this EULA and will be considered part of the Tool unless otherwise mutually agreed in writing.  

9.  NO BENCHMARKING:  That you will not disclose the results of any benchmark or performance tests, or any comparative analyses, of the Tool or any part thereof to any third party without Microsoft's prior written approval. 

10.  TERMINATION:  That the EULA terminates automatically upon the earlier of the date on which Licensee either (a) ceases to perform product compatibility testing or otherwise ceases to use the Tool for the Purpose; (b) receives written notice of termination from Microsoft, which we may elect to do at any time, with or without cause, and without prejudice to any other rights; (c) sues or threatens to sue anyone (including Microsoft) over patents that Licensee thinks may apply to the Tool; or (d) breaches 
this EULA in any way.  Sections 7, 9, 11, 12, 13, and 15 of this EULA shall survive its termination.  Licensee shall, at Microsoft's request, either return all originals and copies of the Tool and any Microsoft confidential information, or certify in writing the destruction of the same, promptly upon termination of the EULA.

11.  NO WARRANTIES WHATSOEVER:  That the Tool and any Support come "AS IS" with all faults, and with no warranties, conditions or representations, not even the implied warranties of merchantability or fitness for a particular purpose, or any warranty against interference with your enjoyment of the Tool or against infringement.  The entire risk as to satisfactory quality, performance, accuracy, and effort related to the Tool and any Support remains with you, and we have no duty of reasonable care or lack of
 negligence concerning them. 

12.  NO DAMAGES:  That Microsoft shall not be liable for any damages related to the Tool or arising under the EULA, including the damages known as direct, indirect, special, consequential, or incidental, and including any damages for negligence.

13.  REMEDIES:  That the entire liability of Microsoft and any of its suppliers arising under this EULA or Licensee's use of the Tool and any Support, and Licensee's exclusive remedy, shall be limited to Five U.S. Dollars ($5.00).  The foregoing limitations, exclusions and disclaimers shall apply to the maximum extent permitted by applicable law, even if any remedy fails its essential purpose.

14.  EXPORT LAWS:  That the Tool is of U.S.A. origin, and Licensee shall comply with all international and national laws that apply to it, including the U.S. Export Administration Regulations and any end-user, end-use and destination restrictions issued by the U.S.A. or other governments. For more information, see http://www.microsoft.com/exporting/.

15.  GOVERNING LAW; ATTORNEYS' FEES:  That this EULA shall be construed and controlled by the laws of the State of Washington, U.S.A.  Licensee consents to the exclusive jurisdiction and venue in the federal courts sitting in King County, Washington, unless no federal subject matter jurisdiction exists, in which case Licensee consents to exclusive jurisdiction and venue in the Superior Court of King County, Washington.  Licensee waives all defenses of lack of personal jurisdiction and forum nonconveniens. 
 Process may be served on either party in the manner authorized by applicable law or court rule.  If either party employs attorneys to enforce any rights arising out of or relating to this EULA, the prevailing party shall be entitled to recover reasonable attorneys' fees and costs.  

16.  CONTACTS:  That if you have any questions concerning this EULA, you may send email to pprctool@microsoft.com or write: Microsoft Research, One Microsoft Way, Redmond, WA 98052-6399.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.0\x86\scripts\DefectUI\Filters.xml ===
<?xml version='1.0'?>
<DefectFilters defaultPreset="Recommended Filters">
    <preset name="Recommended Filters" recommended="1">
    </preset>

    <preset name="(all defects)">
    </preset>

    <preset name="(no defects)" invert="1">
    </preset>
	<preset name="winpft" invert="1">
		<excludeWarnings>29;53;56;57;59;63;67;201;202;205;207;241;243;248;252;259;260;268;276;277;281;282;287;288;289;290;291;296;298;299;305;306;308;</excludeWarnings>
		<excludeRegExps>pft</excludeRegExps>
	</preset>

	<preset name="buffer_overrun" invert="1">
		<excludeWarnings>29;57;200;201;202;203;204;205;207;327;385;386;391;394;411;412;</excludeWarnings>
		<excludeRegExps>pft</excludeRegExps>
	</preset>

	<preset name="wspmin" invert="1">
		<excludeWarnings>29;53;56;57;59;63;67;201;202;205;207;241;243;248;252;259;260;268;276;277;281;282;287;288;289;290;291;296;298;299;305;306;308;</excludeWarnings>
		<excludeRegExps>pft</excludeRegExps>
	</preset>

	<Filter id="pft" enableByDefault="1">
		<description>PREfast Internal Errors</description>
		<field>DEFECTCODE</field>
		<regexp>99[0-9]{3}</regexp>
	</Filter>

	<Filter id="NTPub" enableByDefault="1">
		<description>NT Public files</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*\\public\\.*$</regexp>
	</Filter>

	<Filter id="VC6" enableByDefault="1">
		<description>VC6 includes</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*\\vc98\\include\\.*$</regexp>
	</Filter>

	<Filter id="MFC" enableByDefault="1">
		<description>MFC includes</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*\\mfc\\include\\.*$</regexp>
		<regexp>^.*\\atlmfc\\.*$</regexp>        
		<regexp>^.*\\mfcatl\\.*$</regexp>                                
	</Filter>

	<Filter id="ATL" enableByDefault="1">
		<description>ATL includes</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*\\atl\\.*$</regexp>
		<regexp>^.*\\atl30\\.*$</regexp>        
		<regexp>^.*\\atl70\\.*$</regexp> 
		<regexp>^.*\\atlmfc\\.*$</regexp>        
		<regexp>^.*\\mfcatl\\.*$</regexp>                        
	</Filter>

	<Filter id="LKRH" enableByDefault="1">
		<description>LKRHash.h</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*\\lkrhash\.h$</regexp>
	</Filter>

	<Filter id="MIDL" enableByDefault="1">
		<description>generated MIDL files</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*_[psc]\.c$</regexp>
	</Filter>

	<Filter id="INC" enableByDefault="0">
		<description>all include files</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*\\include\\.*$</regexp>
		<regexp>^.*\\inc\\.*$</regexp>
	</Filter>

</DefectFilters>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.0\x86\predecl\xml\predecl_tree.xml ===
<?xml version ="1.0"?>
<Defects xmlns="x-schema:Schema.xdr">
    <Defect WarningId="390"
            Warning="Pointer offset arithmetic involving signed-unsigned conversions could cause crashes with 64-bit pointers."
            DFAScope="CURRENT_TREE"
            DFATravMode="TREE">
        <Event EventName="Error">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_PLUS"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0">
                    <Type>
                        <TypeKind>
                            <Compare Target="TY_POINTER"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </TypeKind>
                    </Type>
                </Tree>
                <Tree ChildNumber="1">
                    <Kind>
                        <Compare Target="AST_MULT"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <OR>
                    <AND>
                        <Tree ChildNumber="1">
                            <Tree ChildNumber="0">
                                <Type>
                                    <TypeIsSigned>
                                        <Compare Target="1"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="BOOL"/>
                                    </TypeIsSigned>
                                </Type>
                            </Tree>
                        </Tree>
                        <NOT>
                            <Tree ChildNumber="1">
                                <Tree ChildNumber="0">
                                    <Tree ChildNumber="-5">
                                        <Kind>
                                            <Compare Target="AST_PLUS"
                                                     TargetKind="CONST"
                                                     Operator="EQ"
                                                     DataType="ENUM"/>
                                        </Kind>
                                    </Tree>
                                </Tree>
                            </Tree>
                        </NOT>
                        <NOT>
                            <Tree ChildNumber="1">
                                <Tree ChildNumber="0">
                                    <Kind>
                                        <Compare Target="AST_SYMBOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                    <Symbol>
                                        <SymbolName>
                                            <Compare Target="i"
                                                     TargetKind="CONST"
                                                     Operator="EQ"
                                                     DataType="STRING"/>
                                        </SymbolName>
                                    </Symbol>
                                </Tree>
                            </Tree>
                        </NOT>
                        <OR>
                            <Tree ChildNumber="1">
                                <Tree ChildNumber="0">
                                    <Kind>
                                        <Compare Target="AST_CONSTANT"
                                                 TargetKind="CONST"
                                                 Operator="NE"
                                                 DataType="ENUM"/>
                                    </Kind>
                                </Tree>
                            </Tree>
                            <Tree ChildNumber="1">
                                <Tree ChildNumber="0">
                                    <Kind>
                                        <Compare Target="AST_CONSTANT"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                    <Value>
                                        <Compare Target="0"
                                                 TargetKind="CONST"
                                                 Operator="LT"
                                                 DataType="INT"/>
                                    </Value>
                                </Tree>
                            </Tree>
                        </OR>
                        <Tree ChildNumber="1">
                            <Tree ChildNumber="1">
                                <Type>
                                    <TypeIsSigned>
                                        <Compare Target="0"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="BOOL"/>
                                    </TypeIsSigned>
                                </Type>
                            </Tree>
                        </Tree>
                    </AND>
                    <AND>
                        <Tree ChildNumber="1">
                            <Tree ChildNumber="1">
                                <Type>
                                    <TypeIsSigned>
                                        <Compare Target="1"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="BOOL"/>
                                    </TypeIsSigned>
                                </Type>
                            </Tree>
                        </Tree>
                        <NOT>
                            <Tree ChildNumber="1">
                                <Tree ChildNumber="1">
                                    <Tree ChildNumber="-5">
                                        <Kind>
                                            <Compare Target="AST_PLUS"
                                                     TargetKind="CONST"
                                                     Operator="EQ"
                                                     DataType="ENUM"/>
                                        </Kind>
                                    </Tree>
                                </Tree>
                            </Tree>
                        </NOT>
                        <NOT>
                            <Tree ChildNumber="1">
                                <Tree ChildNumber="1">
                                    <Kind>
                                        <Compare Target="AST_SYMBOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                    <Symbol>
                                        <SymbolName>
                                            <Compare Target="i"
                                                     TargetKind="CONST"
                                                     Operator="EQ"
                                                     DataType="STRING"/>
                                        </SymbolName>
                                    </Symbol>
                                </Tree>
                            </Tree>
                        </NOT>
                        <OR>
                            <Tree ChildNumber="1">
                                <Tree ChildNumber="1">
                                    <Kind>
                                        <Compare Target="AST_CONSTANT"
                                                 TargetKind="CONST"
                                                 Operator="NE"
                                                 DataType="ENUM"/>
                                    </Kind>
                                </Tree>
                            </Tree>
                            <Tree ChildNumber="1">
                                <Tree ChildNumber="1">
                                    <Kind>
                                        <Compare Target="AST_CONSTANT"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                    <Value>
                                        <Compare Target="0"
                                                 TargetKind="CONST"
                                                 Operator="LT"
                                                 DataType="INT"/>
                                    </Value>
                                </Tree>
                            </Tree>
                        </OR>
                        <Tree ChildNumber="1">
                            <Tree ChildNumber="0">
                                <Type>
                                    <TypeIsSigned>
                                        <Compare Target="0"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="BOOL"/>
                                    </TypeIsSigned>
                                </Type>
                            </Tree>
                        </Tree>
                    </AND>
                </OR>
            </AND>
        </Event>

        <State StateName="InitState"
               StateKind="START">
            <Transition DestState="ErrorState"
                        EventName="Error"/>
        </State>

        <State StateName="ErrorState"
               ErrorType="ERROR_IMMEDIATE"/>
    </Defect>

    <Defect WarningId="391"
            Warning="Potentially reading invalid data in call to 'SysAllocStringLen'. The size of the buffer '%source_string%' is less than the number of bytes copied from it."
            DFAScope="CURRENT_TREE"
            DFATravMode="TREE">
        <Event EventName="Error">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_FUNCTIONCALL"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Symbol>
                        <SymbolName>
                            <Compare Target="SysAllocStringLen"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="STRING"/>
                        </SymbolName>
                    </Symbol>
                </Tree>
                <Tree ChildNumber="1"
                      IgnoreCG="1">
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <Tag ObjectName="source_string"
                             ObjectType="INDIRECT"/>
                    </Tree>
                </Tree>
                <Tree ChildNumber="1"
                      IgnoreCG="1">
                    <Tree ChildNumber="1"
                          IgnoreCG="1">
                        <Tag ObjectName="NewLength"
                             ObjectType="INT"/>
                    </Tree>
                </Tree>
                <RTCondition ObjectName="source_string"
                             ObjectAttribute="ELEM_COUNT"
                             Operator="GE"
                             Target="NewLength"
                             TargetKind="VARIABLE"
                             DataType="INT"/>
            </AND>
        </Event>

        <State StateName="InitState"
               StateKind="START">
            <Transition DestState="ErrorState"
                        EventName="Error"/>
        </State>

        <State StateName="ErrorState"
               ErrorType="ERROR_IMMEDIATE"/>
    </Defect>

    <Defect WarningId="392"
            Warning="Incorrect comparison between bool and VARIANT_BOOL typed expressions."
            DFAScope="CURRENT_TREE"
            DFATravMode="TREE">
        <Event EventName="Error">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_EQUALS"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <OR>
                    <AND>
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <Type>
                                <TypedefName>
                                    <SymbolName>
                                        <Compare Target="VARIANT_BOOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="STRING"/>
                                    </SymbolName>
                                </TypedefName>
                            </Type>
                        </Tree>
                        <Tree ChildNumber="1"
                              IgnoreCG="1">
                            <Type>
                                <TypedefName>
                                    <SymbolName>
                                        <Compare Target="BOOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="STRING"/>
                                    </SymbolName>
                                </TypedefName>
                            </Type>
                        </Tree>
                    </AND>
                    <AND>
                        <Tree ChildNumber="1"
                              IgnoreCG="1">
                            <Type>
                                <TypedefName>
                                    <SymbolName>
                                        <Compare Target="VARIANT_BOOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="STRING"/>
                                    </SymbolName>
                                </TypedefName>
                            </Type>
                        </Tree>
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <Type>
                                <TypedefName>
                                    <SymbolName>
                                        <Compare Target="BOOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="STRING"/>
                                    </SymbolName>
                                </TypedefName>
                            </Type>
                        </Tree>
                    </AND>
                </OR>
            </AND>
        </Event>

        <State StateName="InitState"
               StateKind="START">
            <Transition DestState="Error"
                        EventName="Error"/>
        </State>

        <State StateName="Error"
               ErrorType="ERROR_IMMEDIATE"/>
    </Defect>

    <Defect WarningId="393"
            Warning="Incorrect comparison between a 64-bit variable and the 32-bit constant '0xFFFFFFFF'."
            DFAScope="CURRENT_TREE"
            DFATravMode="TREE">
        <Event EventName="Error">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_EQUALS"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <OR>
                    <AND>
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <Kind>
                                <Compare Target="AST_CONSTANT"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Type>
                                <TypeSize>
                                    <Compare Target="4"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="INT"/>
                                </TypeSize>
                                <TypeIsSigned>
                                    <Compare Target="0"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="BOOL"/>
                                </TypeIsSigned>
                            </Type>
                            <Value>
                                <Compare Target="-1"
                                    TargetKind="CONST"
                                    Operator="EQ"
                                    DataType="INT"/>
                            </Value>
                        </Tree>
                        <Tree ChildNumber="1"
                              IgnoreCG="1">
                            <Kind>
                                <Compare Target="AST_SYMBOL"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Type>
                                <TypeSize>
                                    <Compare Target="8"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="INT"/>
                                </TypeSize>
                            </Type>
                        </Tree>
                    </AND>
                    <AND>
                        <Tree ChildNumber="1"
                              IgnoreCG="1">
                            <Kind>
                                <Compare Target="AST_CONSTANT"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Type>
                                <TypeSize>
                                    <Compare Target="4"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="INT"/>
                                </TypeSize>
                                <TypeIsSigned>
                                    <Compare Target="0"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="BOOL"/>
                                </TypeIsSigned>
                            </Type>
                            <Value>
                                <Compare Target="-1"
                                    TargetKind="CONST"
                                    Operator="EQ"
                                    DataType="INT"/>
                            </Value>
                        </Tree>
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <Kind>
                                <Compare Target="AST_SYMBOL"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Type>
                                <TypeSize>
                                    <Compare Target="8"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="INT"/>
                                </TypeSize>
                            </Type>
                        </Tree>
                    </AND>
                </OR>
            </AND>
        </Event>

        <State StateName="InitState"
               StateKind="START">
            <Transition DestState="Error"
                        EventName="Error"/>
        </State>

        <State StateName="Error"
               ErrorType="ERROR_IMMEDIATE"/>
    </Defect>

    <Defect WarningId="394"
            Warning="Potential buffer overrun while writing to buffer '%buffer_name%'. The buffer pointer is being incremented inside a loop."
            DFAScope="CURRENT_TREE"
            DFATravMode="TREE">
        <Event EventName="WhileLoopStartDeref">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_WHILE"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="1">
                    <Kind>
                        <Compare Target="AST_NULLSTMT"
                                 TargetKind="CONST"
                                 Operator="NE"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <NOT>
                    <Tree ChildNumber="0">
                        <Value>
                            <Compare Target="0"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="INT"/>
                        </Value>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Kind>
                            <Compare Target="AST_SYMBOL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_PAREN"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tree ChildNumber="0">
                                    <Kind>
                                        <Compare Target="AST_SYMBOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                </Tree>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_GT AST_GE AST_LT AST_LE AST_PREDECR AST_POSTDECR"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_EQUALS"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Type>
                                    <TypeSize>
                                        <Compare Target="4"
                                                 TargetKind="CONST"
                                                 Operator="GE"
                                                 DataType="INT"/>
                                    </TypeSize>
                                </Type>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <OR>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_DEREF"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-4">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tag ObjectName="CONDITION_POINTER"
                                     ObjectType="INDIRECT"/>
                            </Tree>
                        </Tree>
                    </Tree>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_INDEX"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="0">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tag ObjectName="CONDITION_POINTER"
                                     ObjectType="INDIRECT"/>
                            </Tree>
                        </Tree>
                    </Tree>
                </OR>
            </AND>
        </Event>

        <Event EventName="ForLoopStartDeref">
            <AND>
                <OR>
                    <AND>
                        <Tree>
                            <Kind>
                                <Compare Target="AST_FOR"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                        <Tree ChildNumber="3">
                            <Kind>
                                <Compare Target="AST_NULLSTMT"
                                         TargetKind="CONST"
                                         Operator="NE"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </AND>
                    <Tree>
                        <Kind>
                            <Compare Target="AST_DO"
                                     TargetKind="CONST_LIST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </OR>
                <NOT>
                    <Tree ChildNumber="1">
                        <Value>
                            <Compare Target="0"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="INT"/>
                        </Value>
                    </Tree>
                </NOT>            
                <NOT>
                    <Tree ChildNumber="1">
                        <Kind>
                            <Compare Target="AST_SYMBOL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_PAREN"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tree ChildNumber="0">
                                    <Kind>
                                        <Compare Target="AST_SYMBOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                </Tree>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_GT AST_GE AST_LT AST_LE AST_PREDECR AST_POSTDECR"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_EQUALS"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Type>
                                    <TypeSize>
                                        <Compare Target="4"
                                                 TargetKind="CONST"
                                                 Operator="GE"
                                                 DataType="INT"/>
                                    </TypeSize>
                                </Type>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <OR>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_DEREF"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-4">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tag ObjectName="CONDITION_POINTER"
                                     ObjectType="INDIRECT"/>
                            </Tree>
                        </Tree>
                    </Tree>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_INDEX"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="0">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tag ObjectName="CONDITION_POINTER"
                                     ObjectType="INDIRECT"/>
                            </Tree>
                        </Tree>
                    </Tree>
                </OR>
            </AND>
        </Event>

        <Event EventName="WhileLoopStart">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_WHILE"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="1">
                    <Kind>
                        <Compare Target="AST_NULLSTMT"
                                 TargetKind="CONST"
                                 Operator="NE"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <NOT>
                    <Tree ChildNumber="0">
                        <Value>
                            <Compare Target="0"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="INT"/>
                        </Value>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Kind>
                            <Compare Target="AST_SYMBOL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_PAREN"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tree ChildNumber="0">
                                    <Kind>
                                        <Compare Target="AST_SYMBOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                </Tree>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_GT AST_GE AST_LT AST_LE AST_PREDECR AST_POSTDECR"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_EQUALS"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Type>
                                    <TypeSize>
                                        <Compare Target="4"
                                                 TargetKind="CONST"
                                                 Operator="GE"
                                                 DataType="INT"/>
                                    </TypeSize>
                                </Type>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
            </AND>
        </Event>

        <Event EventName="ForLoopStart">
            <AND>
                <OR>
                    <AND>
                        <Tree>
                            <Kind>
                                <Compare Target="AST_FOR"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                        <Tree ChildNumber="3">
                            <Kind>
                                <Compare Target="AST_NULLSTMT"
                                         TargetKind="CONST"
                                         Operator="NE"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </AND>
                    <Tree>
                        <Kind>
                            <Compare Target="AST_DO"
                                     TargetKind="CONST_LIST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </OR>
                <NOT>
                    <Tree ChildNumber="1">
                        <Value>
                            <Compare Target="0"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="INT"/>
                        </Value>
                    </Tree>
                </NOT>            
                <NOT>
                    <Tree ChildNumber="1">
                        <Kind>
                            <Compare Target="AST_SYMBOL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_PAREN"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tree ChildNumber="0">
                                    <Kind>
                                        <Compare Target="AST_SYMBOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                </Tree>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_GT AST_GE AST_LT AST_LE AST_PREDECR AST_POSTDECR"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_EQUALS"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Type>
                                    <TypeSize>
                                        <Compare Target="4"
                                                 TargetKind="CONST"
                                                 Operator="GE"
                                                 DataType="INT"/>
                                    </TypeSize>
                                </Type>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
            </AND>
        </Event>

        <Event EventName="WhileLoopStartWithCheck">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_WHILE"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <OR>
                    <Tree ChildNumber="0">
                        <Value>
                            <Compare Target="0"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="INT"/>
                        </Value>
                    </Tree>
                    <Tree ChildNumber="0">
                        <Kind>
                            <Compare Target="AST_SYMBOL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                            </Tree>
                        </Tree>
                    </Tree>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_PAREN"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tree ChildNumber="0">
                                    <Kind>
                                        <Compare Target="AST_SYMBOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                </Tree>
                            </Tree>
                        </Tree>
                    </Tree>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_GT AST_GE AST_LT AST_LE AST_PREDECR AST_POSTDECR"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_EQUALS"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Type>
                                    <TypeSize>
                                        <Compare Target="4"
                                                 TargetKind="CONST"
                                                 Operator="GE"
                                                 DataType="INT"/>
                                    </TypeSize>
                                </Type>
                            </Tree>
                        </Tree>
                    </Tree>
                </OR>
            </AND>
        </Event>

        <Event EventName="ForLoopStartWithCheck">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_DO AST_FOR"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <OR>
                    <Tree ChildNumber="1">
                        <Value>
                            <Compare Target="0"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="INT"/>
                        </Value>
                    </Tree>
                    <Tree ChildNumber="1">
                        <Kind>
                            <Compare Target="AST_SYMBOL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                            </Tree>
                        </Tree>
                    </Tree>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_PAREN"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tree ChildNumber="0">
                                    <Kind>
                                        <Compare Target="AST_SYMBOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                </Tree>
                            </Tree>
                        </Tree>
                    </Tree>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_GT AST_GE AST_LT AST_LE AST_PREDECR AST_POSTDECR"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_EQUALS"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Type>
                                    <TypeSize>
                                        <Compare Target="4"
                                                 TargetKind="CONST"
                                                 Operator="GE"
                                                 DataType="INT"/>
                                    </TypeSize>
                                </Type>
                            </Tree>
                        </Tree>
                    </Tree>
                </OR>
            </AND>
        </Event>

        <Event EventName="Increment">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_POSTINCR AST_PREINCR"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Type>
                        <TypeKind>
                            <Compare Target="TY_POINTER"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </TypeKind>
                    </Type>
                </Tree>
                <NOT>
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <ObjectMatch Target="CONDITION_POINTER"/>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <ObjectMatch Target="READ_POINTER"/>
                    </Tree>
                </NOT>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Tag ObjectName="INCREMENTED_POINTER"
                         ObjectType="INDIRECT"/>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Tag ObjectName="buffer_name"
                         ObjectType="INDIRECT"/>
                </Tree>
            </AND>
        </Event>

        <Event EventName="IncrementPreTagged">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_POSTINCR AST_PREINCR"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Type>
                        <TypeKind>
                            <Compare Target="TY_POINTER"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </TypeKind>
                    </Type>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <ObjectMatch Target="DEREFED_POINTER"/>
                </Tree>
            </AND>
        </Event>

        <Event EventName="IncrementLoopVar">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_POSTINCR AST_PREINCR"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0">
                    <Kind>
                        <Compare Target="AST_SYMBOL"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                    <Type>
                        <TypeKind>
                            <Compare Target="TY_INTEGRAL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </TypeKind>
                    </Type>
                    <Tag ObjectName="LOOP_VAR"
                         ObjectType="INT"/>
                </Tree>
            </AND>
        </Event>

        <Event EventName="IncrementIndexVar">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_POSTINCR AST_PREINCR"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0">
                    <Kind>
                        <Compare Target="AST_SYMBOL"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                    <Type>
                        <TypeKind>
                            <Compare Target="TY_INTEGRAL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </TypeKind>
                    </Type>
                    <ObjectMatch Target="INDEX_VAR"/>
                </Tree>
            </AND>
        </Event>
        
        <Event EventName="Dereference">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_ASSIGN AST_ADDRESS AST_ASSIGNPLUS AST_ASSIGNMINUS"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                    <Tree ChildNumber="0">
                        <Kind>
                            <Compare Target="AST_DEREF"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </Tree>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <Type>
                            <TypeKind>
                                <Compare Target="TY_POINTER"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </TypeKind>
                        </Type>
                        <Kind>
                            <Compare Target="AST_SYMBOL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </Tree>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <ObjectMatch Target="CONDITION_POINTER"/>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <ObjectMatch Target="READ_POINTER"/>
                        </Tree>
                    </Tree>
                </NOT>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <Tag ObjectName="DEREFED_POINTER"
                             ObjectType="INDIRECT"/>
                    </Tree>
                </Tree>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <Tag ObjectName="buffer_name"
                             ObjectType="INDIRECT"/>
                    </Tree>
                </Tree>
            </AND>
        </Event>
        
        <Event EventName="DerefPreTagged">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_ASSIGN AST_ADDRESS AST_ASSIGNPLUS AST_ASSIGNMINUS"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                    <Tree ChildNumber="0">
                        <Kind>
                            <Compare Target="AST_DEREF"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </Tree>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <ObjectMatch Target="INCREMENTED_POINTER"/>
                    </Tree>
                </Tree>
            </AND>
        </Event>

        <Event EventName="Index">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_ASSIGN AST_ADDRESS AST_ASSIGNPLUS AST_ASSIGNMINUS"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                    <Tree ChildNumber="0">
                        <Kind>
                            <Compare Target="AST_INDEX"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                        <Tree ChildNumber="0">
                            <Kind>
                                <Compare Target="AST_SYMBOL"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                </Tree>                
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0">
                            <ObjectMatch Target="CONDITION_POINTER"/>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <ObjectMatch Target="READ_POINTER"/>
                        </Tree>
                    </Tree>
                </NOT>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="1">
                        <Kind>
                            <Compare Target="AST_SYMBOL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                        <Tag ObjectName="INDEX_VAR"
                             ObjectType="INT"/>
                    </Tree>
                </Tree>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="0">
                        <Tag ObjectName="buffer_name"
                             ObjectType="INDIRECT"/>
                    </Tree>
                </Tree>
            </AND>
        </Event>

        <Event EventName="IndexLoopVar">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_ASSIGN AST_ADDRESS AST_ASSIGNPLUS AST_ASSIGNMINUS"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                    <Tree ChildNumber="0">
                        <Kind>
                            <Compare Target="AST_INDEX"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                        <Tree ChildNumber="0">
                            <Kind>
                                <Compare Target="AST_SYMBOL"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                </Tree>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0">
                            <ObjectMatch Target="CONDITION_POINTER"/>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree>
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <ObjectMatch Target="READ_POINTER"/>
                        </Tree>
                    </Tree>
                </NOT>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="1">
                        <Kind>
                            <Compare Target="AST_SYMBOL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                        <Type>
                            <TypeKind>
                                <Compare Target="TY_INTEGRAL"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </TypeKind>
                        </Type>
                        <ObjectMatch Target="LOOP_VAR"/>
                    </Tree>
                </Tree>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="0">
                        <Tag ObjectName="buffer_name"
                             ObjectType="INDIRECT"/>
                    </Tree>
                </Tree>
            </AND>
        </Event>

        <Event EventName="DerefWhileIncrement">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_ASSIGN AST_ADDRESS AST_ASSIGNPLUS AST_ASSIGNMINUS"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                    <Tree ChildNumber="0">
                        <Kind>
                            <Compare Target="AST_DEREF"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </Tree>
                <OR>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <Kind>
                                <Compare Target="AST_PREINCR AST_POSTINCR"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <Kind>
                                <Compare Target="AST_PAREN"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="0"
                                  IgnoreCG="1">
                                <Kind>
                                    <Compare Target="AST_PREINCR AST_POSTINCR"
                                             TargetKind="CONST_LIST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                            </Tree>
                        </Tree>
                    </Tree>
                </OR>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0">
                            <Tree ChildNumber="0">
                                <ObjectMatch Target="CONDITION_POINTER"/>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0">
                            <Tree ChildNumber="0">
                                <Tree ChildNumber="0">
                                    <ObjectMatch Target="CONDITION_POINTER"/>
                                </Tree>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0">
                            <Tree ChildNumber="0">
                                <Tree ChildNumber="0">
                                    <ObjectMatch Target="READ_POINTER"/>
                                </Tree>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0">
                            <Tree ChildNumber="0">
                                <ObjectMatch Target="READ_POINTER"/>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0">
                            <Tag ObjectName="buffer_name"
                                 ObjectType="INDIRECT"/>
                        </Tree>
                    </Tree>
                </Tree>
            </AND>
        </Event>

        <Event EventName="IndexWhileIncrement">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_ASSIGN AST_ADDRESS AST_ASSIGNPLUS AST_ASSIGNMINUS"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                    <Tree ChildNumber="0">
                        <Kind>
                            <Compare Target="AST_INDEX"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </Tree>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_PREINCR AST_POSTINCR"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                </Tree>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0">
                            <ObjectMatch Target="CONDITION_POINTER"/>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0">
                            <ObjectMatch Target="READ_POINTER"/>
                        </Tree>
                    </Tree>
                </NOT>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="0">
                        <Tag ObjectName="buffer_name"
                             ObjectType="INDIRECT"/>
                    </Tree>
                </Tree>
            </AND>
        </Event>

        <State StateName="InitState"
               StateKind="START">
            <Transition DestState="LoopStart"
                        EventName="ForLoopStartDeref"/>
            <Transition DestState="LoopStart"
                        EventName="WhileLoopStartDeref"/>
            <Transition DestState="LoopStart"
                        EventName="ForLoopStart"/>
            <Transition DestState="LoopStart"
                        EventName="WhileLoopStart"/>
        </State>

        <State StateName="LoopStart">
            <Transition DestState="Error"
                        EventName="DerefWhileIncrement"/>
            <Transition DestState="Error"
                        EventName="IndexWhileIncrement"/>

            <Transition DestState="Error"
                        EventName="IncrementPreTagged"/>
            <Transition DestState="Error"
                        EventName="DerefPreTagged"/>

            <Transition DestState="Error"
                        EventName="IndexLoopVar"/>
            <Transition DestState="Error"
                        EventName="IncrementIndexVar"/>

            <Transition DestState="LoopStart"
                        EventName="Increment"/>
            <Transition DestState="LoopStart"
                        EventName="Dereference"/>

            <Transition DestState="LoopStart"
                        EventName="Index"/>
            <Transition DestState="LoopStart"
                        EventName="IncrementLoopVar"/>

            <Transition DestState="LoopStart"
                        EventName="ForLoopStartDeref"/>
            <Transition DestState="LoopStart"
                        EventName="WhileLoopStartDeref"/>

            <Transition DestState="Safe"
                        EventName="ForLoopStartWithCheck"/>
            <Transition DestState="Safe"
                        EventName="WhileLoopStartWithCheck"/>
        </State>

        <State StateName="Safe"/>

        <State StateName="Error"
               ErrorType="ERROR_IMMEDIATE"/>
    </Defect>
</Defects>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.1\x86\doc\license.txt ===
Microsoft Corporation Limited End User License and Non-Disclosure Agreement

PREfast Version 2.1

This Microsoft Corporation limited end user license and non-diclosure agreement ("EULA") is a legal agreement between you, as an individual and on behalf of your employer ("Licensee" or "you"), and Microsoft Corporation ("Microsoft" or "we") for the Microsoft software identified above and all associated materials, such as any media and printed, online or electronic documentation (together, the "Tool"). The Tool is protected by copyright and other intellectual property laws and treaties.  The Tool is licens
ed, not sold. 

By downloading, installing, copying, or otherwise using the Tool or any part of it, you agree to be bound by the terms of this EULA. If you do not agree, do not download, install, copy or use the Tool.    

LICENSE GRANT.  After you agree to this EULA and subject to the limitations set out below, you may use the Tool solely on Microsoft owned or leased computers located on Microsoft premises to accomplish the following purposes only:  (a) to develop and test Microsoft products or services; and (b) to develop and test Licensee's products or services, including but not limited to device drivers, to achieve compatibility of Licensee's products with Microsoft released or unreleased software, hardware, or services
 (together, the "Purpose").  In addition, you may take one copy of the confidential output from using the Tool, which includes but is not limited to bug reports (the "Output"), in hard or soft copy form, to use it on Licensee's premises to further accomplish the Purpose.  Microsoft or its suppliers own the Tool and the Output.  All other rights are reserved to Microsoft.  

Nothing in this EULA shall be construed as granting you a license to use the Tool to develop and/or test any third party products or services.

In return, we ask that you agree to the following:

1.  NO MODIFICATION:  That you will not modify the Tool, or reverse engineer or decompile any portion of it that consists of machine readable code, except and only to the extent authorized. 

2.  NO LIVE USE:  That you will not use the Tool in a live operating environment where it may be relied upon to perform like a commercially released product, or with data that has not been sufficiently backed up.

3.  PRESERVE NOTICES:  That for each copy of the Tool, you will leave in place all copyright notices and licensing information. 

4.  DO NOT TRANSFER:  That you will not sell, rent, lease, distribute, sublicense, assign, or otherwise transfer (including by loan or gift) the Tool to any other person or entity.  

5.  GIVE FEEDBACK:  That if you provide any comments, suggestions, and other feedback to Microsoft related to the Tool ("Feedback"), they will be voluntarily given with the knowledge that Feedback is Microsoft's property and may be used as we see fit without obligation or restriction of any kind, even if it is designated by you as confidential.  Microsoft is not obligated to correct any errors or make any improvements to the Tool based on Feedback.  

6.  PROFILING:  That the Tool may include a profiling feature that collects data about the types of successes and failures that the Tool produces when used, and sends data logs electronically and/or into server databases, to Microsoft as Feedback. To the extent the Feedback contains any information that could identify a user, or a user's employer ("Private Information"), Microsoft will keep the Private Information confidential and will not exploit it commercially.   

7.  CONFIDENTIALITY:  That the Tool and the Output are the confidential information of Microsoft and its suppliers.  You shall not disclose the Tool or the Output to any third party, or use the Tool or the Output for any purpose, other than as expressly permitted by this EULA.  You shall take reasonable security precautions to keep the Tool and Output confidential, at least as great as the precautions you take to protect Licensee's confidential information but in any case no less than reasonable care.  Lic
ensee shall notify Microsoft immediately upon discovery of any unauthorized use or disclosure of Microsoft's confidential information, and will cooperate with Microsoft in every reasonable way to help Microsoft regain possession of the confidential information and prevent its further unauthorized use or disclosure. During the life of this EULA and for a period of one (1) year after its termination, Licensee will maintain a list of the names all individuals who used or had access to the Tool, the Output, or
 any part thereof, and provide the list in writing to Microsoft upon request.
 
8.  NO SUPPORT:  That Microsoft is not obligated to provide technical support, updates or other similar information for the Tool ("Support").  However, if Microsoft provides you with any Support, it is done subject to this EULA and will be considered part of the Tool unless otherwise mutually agreed in writing.  

9.  NO BENCHMARKING:  That you will not disclose the results of any benchmark or performance tests, or any comparative analyses, of the Tool or any part thereof to any third party without Microsoft's prior written approval. 

10.  TERMINATION:  That the EULA terminates automatically upon the earlier of the date on which Licensee either (a) ceases to perform product compatibility testing or otherwise ceases to use the Tool for the Purpose; (b) receives written notice of termination from Microsoft, which we may elect to do at any time, with or without cause, and without prejudice to any other rights; (c) sues or threatens to sue anyone (including Microsoft) over patents that Licensee thinks may apply to the Tool; or (d) breaches 
this EULA in any way.  Sections 7, 9, 11, 12, 13, and 15 of this EULA shall survive its termination.  Licensee shall, at Microsoft's request, either return all originals and copies of the Tool and any Microsoft confidential information, or certify in writing the destruction of the same, promptly upon termination of the EULA.

11.  NO WARRANTIES WHATSOEVER:  That the Tool and any Support come "AS IS" with all faults, and with no warranties, conditions or representations, not even the implied warranties of merchantability or fitness for a particular purpose, or any warranty against interference with your enjoyment of the Tool or against infringement.  The entire risk as to satisfactory quality, performance, accuracy, and effort related to the Tool and any Support remains with you, and we have no duty of reasonable care or lack of
 negligence concerning them. 

12.  NO DAMAGES:  That Microsoft shall not be liable for any damages related to the Tool or arising under the EULA, including the damages known as direct, indirect, special, consequential, or incidental, and including any damages for negligence.

13.  REMEDIES:  That the entire liability of Microsoft and any of its suppliers arising under this EULA or Licensee's use of the Tool and any Support, and Licensee's exclusive remedy, shall be limited to Five U.S. Dollars ($5.00).  The foregoing limitations, exclusions and disclaimers shall apply to the maximum extent permitted by applicable law, even if any remedy fails its essential purpose.

14.  EXPORT LAWS:  That the Tool is of U.S.A. origin, and Licensee shall comply with all international and national laws that apply to it, including the U.S. Export Administration Regulations and any end-user, end-use and destination restrictions issued by the U.S.A. or other governments. For more information, see http://www.microsoft.com/exporting/.

15.  GOVERNING LAW; ATTORNEYS' FEES:  That this EULA shall be construed and controlled by the laws of the State of Washington, U.S.A.  Licensee consents to the exclusive jurisdiction and venue in the federal courts sitting in King County, Washington, unless no federal subject matter jurisdiction exists, in which case Licensee consents to exclusive jurisdiction and venue in the Superior Court of King County, Washington.  Licensee waives all defenses of lack of personal jurisdiction and forum nonconveniens. 
 Process may be served on either party in the manner authorized by applicable law or court rule.  If either party employs attorneys to enforce any rights arising out of or relating to this EULA, the prevailing party shall be entitled to recover reasonable attorneys' fees and costs.  

16.  CONTACTS:  That if you have any questions concerning this EULA, you may send email to pprctool@microsoft.com or write: Microsoft Research, One Microsoft Way, Redmond, WA 98052-6399.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.0\x86\bin\modules\PfxModel.xml ===
<?xml version="1.0" encoding="UTF-8"?>
<Models>
  <Function name="SysAllocString">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SysAllocStringLen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SysAllocStringByteLen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateFileA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateFileW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FindFirstChangeNotificationA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FindFirstChangeNotificationW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FindFirstFileA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FindFirstFileW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FindFirstFileExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FindFirstFileExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenFile">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lwrite">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <IsTrusted value="never"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lread">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <IsTrusted value="never"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lopen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_hread">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <IsTrusted value="never"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_hwrite">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <IsTrusted value="never"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lclose">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lcreat">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_llseek">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>

  <Function name="CreateFileMappingA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateFileMappingW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenFileMappingA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenFileMappingW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>

  <Function name="CreateEventA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateEventW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenEventA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenEventW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateMutexA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateMutexW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenMutexA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenMutexW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateSemaphoreA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateSemaphoreW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenSemaphoreA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenSemaphoreW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateWaitableTimerA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateWaitableTimerW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenWaitableTimerA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenWaitableTimerW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>

  <Function name="isdigit">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isalnum">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isalpha">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isascii">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iscntrl">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iscsym">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isgraph">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isleadbyte">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="islower">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isprint">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="ispunct">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isspace">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isupper">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isctype">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isxdigit">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswdigit">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswalnum">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswalpha">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswascii">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswcntrl">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswgraph">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswlower">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswprint">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswpunct">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswspace">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswupper">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswctype">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswxdigit">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="malloc">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <NeedsRelease value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strcpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcscpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_mbscpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="lstrcpyA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="lstrcpyW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="strcat">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <WritableTo value="always">
          <SizeSpec kind="bytecount" qualifier="pre">
		    <NumberSpec kind="readablebytes">
              <ExternalID type="param" index="1"/>			
		    </NumberSpec>			
          </SizeSpec>
        </WritableTo>				
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcscat">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <WritableTo value="always">
          <SizeSpec kind="bytecount" qualifier="pre">
		    <NumberSpec kind="readablebytes">
              <ExternalID type="param" index="1"/>			
		    </NumberSpec>			
          </SizeSpec>
        </WritableTo>				
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_mbscat">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>		
        <WritableTo value="always">
          <SizeSpec kind="bytecount" qualifier="pre">
		    <NumberSpec kind="readablebytes">
              <ExternalID type="param" index="1"/>			
		    </NumberSpec>			
          </SizeSpec>
        </WritableTo>								
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="lstrcatA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>		
        <WritableTo value="always">
          <SizeSpec kind="bytecount" qualifier="pre">
		    <NumberSpec kind="readablebytes">
              <ExternalID type="param" index="1"/>			
		    </NumberSpec>			
          </SizeSpec>
        </WritableTo>								
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="lstrcatW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>		
        <WritableTo value="always">
          <SizeSpec kind="bytecount" qualifier="pre">
		    <NumberSpec kind="readablebytes">
              <ExternalID type="param" index="1"/>			
		    </NumberSpec>			
          </SizeSpec>
        </WritableTo>								
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="strncpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcsncpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_mbsncpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="lstrcpynA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="lstrcpynW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="strncat">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
		<WritableTo value="always">
          <SizeSpec kind="bytecount" qualifier="pre">
		    <NumberSpec kind="location">
              <ExternalID type="param" index="2"/>			
		    </NumberSpec>			
          </SizeSpec>
        </WritableTo>						
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcsncat">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
		<WritableTo value="always">
          <SizeSpec kind="elementcount" longvalue="2" qualifier="pre">
		    <NumberSpec kind="location">
              <ExternalID type="param" index="2"/>			
		    </NumberSpec>			
          </SizeSpec>
        </WritableTo>						
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_mbsncat">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
		<WritableTo value="always">
          <SizeSpec kind="elementcount" qualifier="pre">
		    <NumberSpec kind="location">
              <ExternalID type="param" index="2"/>			
		    </NumberSpec>			
          </SizeSpec>
        </WritableTo>						
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="strlen">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcslen">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbslen">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbstrlen">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrlenA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrlenW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strcmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcscmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbscmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrcmpA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrcmpW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strncmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcsncmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbsncmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_stricmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_wcsicmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbsicmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_strnicmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_wcsnicmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbsnicmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_strdup">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <NeedsRelease value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="memcpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CopyMemory">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RtlCopyMemory">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="memmove">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RtlMoveMemory">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="memset">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="gets">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_getws">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="fgets">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="fgetws">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="fread">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <IsTrusted value="never"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ReadFile">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <IsTrusted value="never"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ReadFileEx">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <IsTrusted value="never"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="scanf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="fscanf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="sscanf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_read">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="fseek">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lseek">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lseeki64">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="fsetpos">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="BindMoniker">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="BstrFromVector">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CheckParameters">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CheckParms">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CLSIDFromProgID">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateDispTypeInfo">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateErrorInfo">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateStdDispatch">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateTypeLib">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateTypeLib2">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="Direct3DRMCreate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DirectDrawCreate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DirectDrawCreateClipper">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DirectDrawEnumerate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DirectPlayCreate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DirectSoundCreate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DispGetIDsOfNames">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DispGetParam">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DispInvoke">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DllGetClassObject">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DosDateTimeToVariantTime">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="GetActiveObject">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="GetAltMonthNames">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="GetAttribIMsgOnIStg">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="GetErrorInfo">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="GetKeyboardState">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="GetWindowsDirectoryA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetWindowsDirectoryW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="HPProviderInit">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="HrAddColumnsEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="HrDispatchNotifications">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="HrEntryIDFromSz">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="HrIStorageFromStream">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="HrQueryAllRows">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="LHashValOfName">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="LHashValOfNameSys">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="LoadRegTypeLib">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="LoadTypeLibEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="MAPIAdminProfiles">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="MAPIInitialize">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="MAPILogonEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="MSProviderInit">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OleCreateEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OleCreateFromDataEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OleCreateFromFileEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OleCreateFromLinkEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OleCreateLinkFromDataEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenStreamOnFile">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenTnefStream">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenTnefStreamEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="PropVariantCopy">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegisterActiveObject">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegisterTypeLib">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RTFSync">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SafeArrayCopy">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SafeArrayCopyData">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SafeArrayPutElement">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SetAttribIMsgOnIStg">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ShGetDataFromIDList">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SHGetDesktopFolder">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SHGetInstanceExplorer">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SHGetMalloc">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SHGetSpecialFolderLocation">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SHLoadInProc">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="TlsAlloc">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UnRegisterTypeLib">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VarDateFromUdate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VariantChangeType">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VariantChangeTypeEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VariantCopy">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VariantCopyInd">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VarNumFromParseNum">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VarParseNumFromStr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VarUdateFromDate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VectorFromBstr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WrapCompressedRTFStream">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcImpersonateClient">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcRevertToSelfEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcRevertToSelf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcAsyncInitializeHandle">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcAsyncRegisterInfo">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcAsyncGetCallStatus">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcAsyncCompleteCall">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcAsyncAbortCall">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcAsyncCancelCall">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcAsyncSetHandle">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcAsyncAbortCall">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingCopy">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingSetOption">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqOption">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingFromStringBindingA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingFromStringBindingW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqObject">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingReset">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingSetObject">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqDefaultProtectLevel">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingToStringBindingA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingToStringBindingW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcStringBindingComposeA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcStringBindingComposeW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcStringBindingParseA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcStringBindingParseW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcIfInqId">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcNetworkIsProtseqValidA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcNetworkIsProtseqValidW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqComTimeout">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtSetComTimeout">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtSetCancelTimeout">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcNetworkInqProtseqsA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcNetworkInqProtseqsW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcObjectInqType">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcObjectSetInqFn">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcObjectSetType">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerInqBindings">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerInqIf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerListen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerRegisterIf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerRegisterIfEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUnregisterIf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseAllProtseqs">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseAllProtseqsEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseAllProtseqsIf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseAllProtseqsIfEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqEpA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqEpW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqEpExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqEpExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqIfA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqIfW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqIfExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqIfExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqStats">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtIsServerListening">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtStopServerListening">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtWaitServerListen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtSetServerStackSize">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtEnableIdleCleanup">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqIfIds">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqServerPrincNameA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqServerPrincNameW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerInqDefaultPrincNameA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerInqDefaultPrincNameW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcEpResolveBinding">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcNsBindingInqEntryNameA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcNsBindingInqEntryNameW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqAuthClientA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqAuthClientW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqAuthInfoA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqAuthInfoW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingSetAuthInfoA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingSetAuthInfoW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingSetAuthInfoExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingSetAuthInfoExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqAuthInfoExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqAuthInfoExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerRegisterAuthInfoA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerRegisterAuthInfoW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingServerFromClient">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcTestCancel">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerTestCancel">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcCancelThread">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UuidCreate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UuidToStringA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UuidToStringW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UuidFromStringA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UuidFromStringW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UuidCreateNil">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcEpRegisterNoReplaceA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcEpRegisterNoReplaceW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcEpRegisterA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcEpRegisterW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcEpUnregister">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DceErrorInqTextA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DceErrorInqTextW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtEpEltInqBegin">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtEpEltInqDone">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtEpEltInqNextA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtEpEltInqNextW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtEpUnregister">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtSetAuthorizationFn">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqParameter">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtSetParameter">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtBindingInqParameter">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtBindingSetParameter">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcGetBuffer">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcSendReceive">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcFreeBuffer">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcSend">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcReceive">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcFreePipeBuffer">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcReallocPipeBuffer">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcMonitorAssociation">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcStopMonitorAssociation">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcGetAssociationContext">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcNsBindingSetEntryNameW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcNsBindingSetEntryNameA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcBindingInqDynamicEndpointW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcBindingInqDynamicEndpointA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcBindingInqTransportType">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcIfInqTransferSyntaxes">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_UuidCreate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcBindingCopy">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcLaunchDatagramReceiveThread">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcServerRegisterForwardFunction">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcConnectionInqSockBuffSize">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcConnectionSetSockBuffSize">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcServerStartListening">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcServerStopListening">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcGetThreadWindowHandle">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcAsyncSendReceive">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcBindingSetAsync">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcSetWMsgEndpoint">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcSetThreadParams">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcServerUnregisterEndpointA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcServerUnregisterEndpointW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SysStringLen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SysStringByteLen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrncmpW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrncmpA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrcmpiW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrcmpiA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strchr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcschr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbschr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strrchr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcsrchr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbsrchr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strstr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcsstr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbsstr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strspn">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcsspm">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbsspn">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="atof">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="atoi">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="atol">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="atold">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_atoi64">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsCharAlpha">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsCharAlphaNumeric">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsCharLower">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsCharUpper">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsBadCodePtr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsBadReadPtr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsBadStringPtr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsBadWritePtr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_strerror">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strerror">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FillMemory">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ZeroMemory">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="MoveMemory">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_memccpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="MprConfigGetFriendlyName">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RhRegGetStringValueW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RhRegSetStringValueW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="OemToCharBuffA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CharToOemBuffA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="OemToCharBuffW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CharToOemBuffW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CharUpperBuffA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CharUpperBuffW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CharLowerBuffA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CharLowerBuffW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_snprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_vsnprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_snwprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_vsnwprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcstombs">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="mbstowcs">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_strnset">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_mbsnset">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_wcsnset">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="strxfrm">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcsxfrm">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadConsoleA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadConsoleW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadConsoleInputA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="20"/>        <!-- sizeof (INPUT_RECORD) -->
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadConsoleInputW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="20"/>        <!-- sizeof (INPUT_RECORD) -->
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadProcessMemory">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadEventLogA">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadEventLogW">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadPrinter">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="MultiByteToWideChar">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="WideCharToMultiByte">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetCurrentDirectoryW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="0"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetCurrentDirectoryA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="0"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_wgetcwd">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_getcwd">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetSystemDirectoryW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetSystemDirectoryA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetWindowTextW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetWindowTextA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetFullPathNameW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetFullPathNameA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetShortPathNameW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetShortPathNameA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetLongPathNameW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetLongPathNameA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetTempPathW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="0"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetTempPathA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="0"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetTempFileNameA">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <Constant value="260"/>                <!-- bytes = MAX_PATH -->
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetTempFileNameW">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <Constant value="520"/>                <!-- bytes = MAX_PATH * 2 for Unicode -->
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileSectionNamesW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileSectionNamesA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileSectionW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileSectionA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileStringW">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileStringA">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileStructW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileStructA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetProfileStringW">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetProfileStringA">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetModuleFileNameW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetModuleFileNameA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetEnvironmentVariableW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetEnvironmentVariableA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetVolumeInformationW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetVolumeInformationA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ExpandEnvironmentStringsW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ExpandEnvironmentStringsA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="SearchPathW">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="SearchPathA">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetAtomNameW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetAtomNameA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetTokenInformation">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="AdjustTokenPrivileges">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="AdjustTokenBuffer">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetAclInformation">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetFileSecurityW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetFileSecurityA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadDirectoryChangesW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupAccountNameW">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="5" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupAccountNameA">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupAccountSidW">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupAccountSidA">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupPrivilegeNameW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupPrivilegeNameA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupPrivilegeDisplayNameW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupPrivilegeDisplayNameA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetDefaultCommConfigW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetDefaultCommConfigA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetComputerNameW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetComputerNameA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetComputerNameExW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID  deref="1" type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetComputerNameExA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID  deref="1" type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetUserNameW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetUserNameA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetUserNameExW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID  deref="1" type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetUserNameExA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID  deref="1" type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegEnumKeyW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegEnumKeyA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="PeekNamedPipe">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="TransactNamedPipe">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CallNamedPipeW">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CallNamedPipeA">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LoadStringW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LoadStringA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="gethostname">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="recv">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="recvfrom">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="NtReadFile">
    <External>
      <ExternalID type="param" index="5"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="6"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ZwReadFile">
    <External>
      <ExternalID type="param" index="5"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="6"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RtlGetFullPathName_U">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="KeBugCheck">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="KeBugCheck2">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="KeBugCheckEx">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_com_raise_error">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RpcRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="OemToCharA">
    <FunctionProperties>
      <PreferredFunction name="OemToCharBuffA">
        <Reason>safer</Reason>
      </PreferredFunction>
    </FunctionProperties>
  </Function>
  <Function name="OemToCharW">
    <FunctionProperties>
      <PreferredFunction name="OemToCharBuffW">
        <Reason>safer</Reason>
      </PreferredFunction>
    </FunctionProperties>
  </Function>
  <Function name="WinExec">
    <FunctionProperties>
      <Deprecated value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="printf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="sprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <FunctionProperties>
      <PreferredFunction name="strcpy">
        <Reason>unformatted</Reason>
      </PreferredFunction>
    </FunctionProperties>
  </Function>
  <Function name="wsprintfA">
    <FunctionProperties>
      <PreferredFunction name="strcpy">
        <Reason>unformatted</Reason>
      </PreferredFunction>
    </FunctionProperties>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wsprintfW">
    <FunctionProperties>
      <PreferredFunction name="wcscpy">
        <Reason>unformatted</Reason>
      </PreferredFunction>
    </FunctionProperties>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="WmipCountedToSzAndTrim">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wscanf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="swscanf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="fwscanf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="swprintf">
    <FunctionProperties>
      <PreferredFunction name="wcscpy">
        <Reason>unformatted</Reason>
      </PreferredFunction>
    </FunctionProperties>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="fprintf">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="fwprintf">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="strftime">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always" style="strftime"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcsftime">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always" style="strftime"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_tcsncpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_mbsnbcpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="vprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="vsprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="vswprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="vwprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wnsprintfA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wnsprintfW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wvsprintf">
    <FunctionProperties>
      <PreferredFunction name="wcscpy">
        <Reason>unformatted</Reason>
      </PreferredFunction>
    </FunctionProperties>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_cprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_cscanf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="MIDL_user_allocate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <NeedsRelease value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="MIDL_user_free">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions/>
      <PostConditions>
        <IsReleased value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SetThreadToken">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateProcessA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsWritableString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="6"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="7"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="8"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CreateProcessW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsWritableString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="6"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="7"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="8"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CreateProcessAsUserA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsWritableString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="7"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="8"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CreateProcessAsUserW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsWritableString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="7"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="8"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CreateProcessWithLogonW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <IsNullOk value="sometimes"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="5"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsWritableString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="7"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="8"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ImpersonateDdeClientWindow">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ImpersonateLoggedOnUser">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ImpersonateNamedPipeClient">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ImpersonateSecurityContext">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ImpersonateSelf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegSetValueA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
        <ShouldBeZeroTerminated value="sometimes"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegSetValueW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
        <ShouldBeZeroTerminated value="sometimes"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegSetValueExA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
        <ShouldBeZeroTerminated value="sometimes"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="5"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegSetValueExW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
        <ShouldBeZeroTerminated value="sometimes"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="5"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="AdjustTokenGroups">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ACPIAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ASSERT">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AV_Exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowArchiveException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowDaoException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowDBException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowFileException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowInternetException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowMemoryException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowNotSupportedException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowOleDispatchException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowOleException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowResourceException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowUserException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxAssertFailedLine__FPCci">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxPostQuitMessage__Fi">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowArchiveException__FiPCc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowFileException__FilPCUs">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowFileException__FilPCc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowMemoryException__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowNotSupportedException__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowOleException__Fl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowResourceException__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowUserException__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AppExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Assert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertErrorReport__FPCcUiT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertFail">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertFailed">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertFailedLine__FPCci">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertHelper">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertSzHelper">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertionFailure__FPci">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Assertion__9IDbOutputFiPcT2UiT2">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AttribAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="BadExitCleanup">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="BadExitCleanup__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Bail__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="BaseExitThreadPoolThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="CMDexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="CSDbgBreakPoint__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="CSPrintAssert__FPCcT1UlT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="CleanExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="CleanupExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="CriticalErrorExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DDE_ExitProgman__FPUsPUiP8_DDECONV">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DDE_ExitProgman__FPcPUiP8_DDECONV">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DELLogAndTerminate__FUsT1UlT3PvPciT7T5">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DbgBreakPoint">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DbgBreakPointWithStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DbgBreak__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DbgSspExitProcess">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DbgSspExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DbgUserBreakPoint">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Dbg_HardAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Debug_Assert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DeleteAndExit__12WIN32_THREADFUi">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DeviceAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DfsBugCheck">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Die">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DiskErrorFatal">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayErrorAndExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayFatal__FPCcUibT2Pc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayMessageAndExit__4FINDFUlT112MESSAGE_TYPEP7WSTRING">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayMessageAndExit__5XCOPYFUlP7WSTRINGT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayMessageAndExit__7REPLACEFUlPC7WSTRINGT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayMessageAndExit__FUlPC7WSTRINGT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayUsageAndExit__FPPcP9SParamDef">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DllFreeLibraryAndExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Dns_Assert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DoAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DoExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DoExitWindows">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DoExitWindowsEx">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DosRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Dr_RaiseFatalError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DraExcept">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ENRE_exit__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ErrorExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ErrorExitW">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ErrorUsageAndExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExRaiseAccessViolation">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExRaiseDatatypeMisalignment">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExRaiseHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExRaiseStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Ex_RaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Ex_RaiseFormerrException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitConfigure">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitCustomAppWiz__15CResTypAWAppWizFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitField">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitField__FP10tagCONTROLi">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitMessageLoop__13CAltExtWizardFUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitMyProcessDesktopAccess__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitPeriSession">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitProcess">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitProgram__7PROGRAMFUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitSession">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitThreadApc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitThread__11CEnumThreadFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitToDos">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitWithError__5XCOPYFUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitWithError__7REPLACEFUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitWithError__FUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Exit__Fi">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExpRaiseHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FAssertProc__FPCUsUlT1T2">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FAssertProc__FPCcUlT1T2">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit0">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit12">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit16">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit20">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit24">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit28">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit32">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit36">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit4">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit40">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit44">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit48">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit52">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit56">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit8">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fail">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fail__13CDataExchangeFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fail__FUi">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fatal">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FatalAppExitA">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FatalAppExitW">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FatalApplicationError__Fie">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FatalError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FatalExceptionFilter">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FatalExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fatal__7PROGRAMCFUlT1Pce">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fatal__7PROGRAMCFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fatal__FPCcUie">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fatality___FPcUlT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FreeLibraryAndExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FrsExitCommandServer">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FrsRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="HWInfoAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="HalpMcaSwitchMcaExceptionStackAndBugCheck">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="HelpAndExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="HidServExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ILS_ExitWait">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="I_RpcNsRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="IacAutoFatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="InternalError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="IoRaiseHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="IoRaiseInformationalHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="IopDriverCorrectnessThrowBugCheck">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="IopRaiseHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="IopRaiseInformationalHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="KdpCauseBugCheck">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="LdsFatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="LsFatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MainFrsExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MemAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MemoryExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MergeFatalError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MyExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NdrpRaisePipeException__FP14_NDR_PIPE_DESCl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NetpAssertFailed">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NetpRaiseAlert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NlAssertFailed">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NlExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NoErrorUsageAndExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NtRaiseHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NtfsRaiseInformationHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NtfsRaiseStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NtfsRaiseStatusFunction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="OFatalAppExitW">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="OSNotifyFatalErrorWorker">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Od2DosExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Od2JumpTo16ExitRoutine">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Od2JumpToExitRoutine">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Od2RaiseStackException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="OleTestAssert__FPcT1Ui">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Os2DosExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Os2SrvExitProcess">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Os2WaitSyncAndExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Ow2Exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PREfixExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Panic">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PanicMessage">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PoShutdownBugCheck">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PostQuitMessage">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PrivateAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PsCleanUpAndExitProcess">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PspExitNormalApc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PspExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PuDbgAssertFailed">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="QueueAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="QuitThread__13CWorkerThreadFP6HWND__">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Quit__11CWebBrowserFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Quit__12CApplicationFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Quit__13CWebEventSinkFPs">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Quit__14IWebBrowserAppFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseDsaExcept">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseExceptionProxy__FUlN21PUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseException__10CAdRotatorSFPUs">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseException__9CToolsCtlSFPUs">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseException__Fl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseNMEvent">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Raise__FUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ReportAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RouterAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RtlAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RtlRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RtlRaiseStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RtlpExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RxAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SHExitWindowsEx">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SampAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ScpLinkFatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ShowAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ShowAssert__FPcUiT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SigFatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SigRstInd_FatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SigRstRq_FatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SmartcardExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="StreamClassDebugAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SysExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SysFatal">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="TRCExitProcess">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ThrowErrno__14CFileExceptionSFiPCc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ThrowError__7CKernelFUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ThrowError__9CTemplateFPUcUi">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ThrowError__F10_com_errorPCUse">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ThrowError__F10_com_errorUie">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ToplRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="TrkRaiseException__Fl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="TrkRaiseLastError__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="TrkRaiseNtStatus__Fl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="TrkRaiseWin32Error__Fl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UIAssertHelper">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UIAssertSzHelper">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UdfNormalizeAndRaiseStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UdfRaiseStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UmeFatalError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UnmergeFatalError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UpsLineAsserted">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UserRtlRaiseStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UtilExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="WK32ExitKernel">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="WK32FatalExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="WNetErrorExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="YY_FATAL__15ModuleInfo_scanFPc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="YY_FATAL__7yy_scanFPc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="YellAndExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_Assert__FiPcT1T2">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_CrtDbgReport">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_Doraise__Q2_3std12out_of_rangeCFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_Doraise__Q2_3std9bad_allocCFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_DsysAssertEx">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_amsg_exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_c_exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_cexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_com_issue_error">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="assert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="assertFailed">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="die">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="doexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="doexit__FiN21">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="error_exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="error_exit__FP18jpeg_common_struct">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="errorexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="errorexit__FPCce">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="fail__3iosCFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="fatal">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="fatal__FPce">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="fatal_alloc_failure">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="gmem_panic">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="host_error">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="kperror_exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="my_error_exit__FP18jpeg_common_struct">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="quit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="rshexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="scMemoryPanic">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="scpFatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="std_error_exit__3rtgFP18jpeg_common_struct">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="tkQuit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="vExecExitComplete__9MExecWorkFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="vold_driver_exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="windexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="wsRedExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="xexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RtError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AbortLayout">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MsoFAssertSzProcVar">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MsoFAssertSzTagProcVar">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MsoDebugBreak">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MsoNotReachedTag">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="setjmp">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_setjmp">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_setjmpex">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="longjmp">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_longjmp">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_longjmpex">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ex_raise">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="utassert_fail">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="GetClassNameW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
    </External>
  </Function>
  <Function name="GetClassNameA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
    </External>
  </Function>
  <Function name="GetTimeFormatA">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
    </External>
  </Function>
  <Function name="GetTimeFormatW">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
    </External>
  </Function>
  <Function name="InterlockedIncrement">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
    </External>
  </Function>
  <Function name="InitializeCriticalSectionAndSpinCount">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegEnumValueA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="6"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="7" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>	
  </Function>  
  <Function name="RegEnumValueW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="6"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="7" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>	
  </Function>  
  <Function name="RegQueryValueA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegQueryValueW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegQueryValueExA">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegQueryValueExW">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCopyA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCopyW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbPrintfA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbPrintfW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbVPrintfA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbVPrintfW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCopyA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCopyW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchPrintfA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchPrintfW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchVPrintfA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchVPrintfW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCopyWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCopyWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringVPrintfWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringVPrintfWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCopyExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCopyExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbPrintfExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbPrintfExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbVPrintfExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbVPrintfExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCopyExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCopyExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchPrintfExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchPrintfExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchVPrintfExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchVPrintfExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatExWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatExWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCopyExWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCopyExWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringVPrintfExWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringVPrintfExWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbLengthA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbLengthW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchLengthA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchLengthW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatNA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatNW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatNA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatNW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatNExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatNExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatNExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatNExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatNWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatNWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatNExWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatNExWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchGetsA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchGetsW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbGetsA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbGetsW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchGetsExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchGetsExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbGetsExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbGetsExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringGetsExWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringGetsExWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringLengthWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringLengthWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>

  <Function name="CreateNamedPipe">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>

  <Function name="GetStdHandle">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>

  <Function name="RegCreateKeyA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegOpenKeyA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegCreateKeyExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegOpenKeyExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegCreateKeyW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegOpenKeyW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegCreateKeyExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegOpenKeyExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>

  <Function name="accept">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="inet_addr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="inet_ntoa">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="socket">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSAAccept">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSAAsyncGetHostByAddr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSAAsyncGetHostByName">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSAAsyncGetProtoByName">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSAAsyncGetProtoByNumber">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSAAsyncGetServByName">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSAAsyncGetServByPort">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSACreateEvent">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSAJoinLeaf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSASocket">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSAStartup">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>

</Models>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\1.5\x86\scripts\DefectUI\DefectDefs.xml ===
<?xml version="1.0" encoding="UTF-8"?>
<DefectDefs><DefectDefGroup guid="579e033e-fdc0-48ad-bb21-a42ee09ba86b" id="200" name="Bounds">
		<display>Buffer Overrun</display>
		<doc>
			<P>PRE<i>f</i>ast detects some situations in which buffer overruns occur,
			including array bounds violations.</P>
		</doc>
		<ownerURL>http://prefast</ownerURL>
		<ownerContact>pftBug</ownerContact>
		<!-- //////////////////////////////////////////////////////////////// -->
		<!-- 201 -->
		<DefectDef guid="5ad3f02a-cdf5-48b9-bd5b-24800d6b7e1e" id="201" name="INDEX_EXCEEDS_MAX">
			<description>
				<format>Buffer overrun for stack buffer %variable%</format>
				<param name="variable" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>index %number1% exceeds maximum valid index %number2%</format>
				<param name="number1" format="%d" display=""/>
				<param name="number2" format="%d" display=""/>
			</additionalInfo>
			<doc>
				<P>This warning indicates that an integer offset into the specified stack array
				exceeds the maximum bounds of that array. This defect may result in random
				behavior or crashes.</P>
				<P>One common cause of this defect is using an array's size as an index into the
				array. Because C/C++ array indexing is zero-based, the maximum legal index
				into an array is one less than the number of array elements.</P>
				<P>Another common cause for the defect is cut-and-paste errors.</P>
			</doc>
			<example funcBody="void example_func()">
				<defectiveSrc><![CDATA[
					char buff[25];

					buff[sizeof buff] = '\0';    /* error */
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					char buff[25];

					buff[sizeof buff - 1] = '\0';
				]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_201.htm</helpURL>
		</DefectDef>
		<!-- //////////////////////////////////////////////////////////////// -->
		<!-- 202 -->
		<DefectDef guid="34b555e9-1d4f-4d1b-aabf-a6a2317b7772" id="202" name="BUFFER_OVERRUN">
			<description>
				<format>Buffer overrun for stack buffer %variable% in call to %function%</format>
				<param name="variable" format="'%ls'"/>
				<param name="function" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>length %number1% exceeds buffer size %number2%</format>
				<param name="number1" format="%d" display=""/>
				<param name="number2" format="%d" display=""/>
			</additionalInfo>
			<doc>
				<P>This warning indicates that a parameter pointing to a
				stack buffer of known size is being passed into a function
				that copies more bytes into it than that size. This situation
				will cause a buffer overrun.</P>
				<P>This defect is likely to result in an exploitable
				security hole or a program crash.</P>
				<P>A common cause for the defect is cut-and-paste errors.</P>
				<P>If PRE<i>f</i>ast can determine that the mismatch between
				the length and size is due to confusion between character
				and byte count, it will report the more precise warning
				57.</P>
			</doc>
			<example funcBody="void example_func()" sysIncludes="string.h">
				<defectiveSrc><![CDATA[
					char charArray[5];
					int intArray[5];

					memset ((void *)charArray, 0, sizeof intArray);
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					char charArray[5];
					int intArray[5];

					memset ((void *)charArray, 0, sizeof charArray);
				]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_202.htm</helpURL>
		</DefectDef>
		<!-- //////////////////////////////////////////////////////////////// -->
		<!-- 203 -->
		<DefectDef guid="32c88443-acc2-47d5-b432-f4244a594f11" id="203" name="BUFFER_OVERRUN_NONSTACK">
			<description>
				<format>
					Buffer overrun for buffer %variable% in call to %function%
				</format>
				<param name="variable" format="'%ls'"/>
				<param name="function" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
					length %number1% exceeds buffer size %number2%
				</format>
				<param name="number1" format="%d" display=""/>
				<param name="number2" format="%d" display=""/>
			</additionalInfo>
			<doc>
				<P>
					This warning indicates that a parameter pointing to a
					non-stack buffer of known size is being passed into a
					function that copies more bytes into it than that size.
					This situation will cause a buffer overrun.
				</P>
				<P>
					This defect could result in an exploitable security hole
					or a program crash.
				</P>
				<P>
					If PRE<i>f</i>ast can determine that the mismatch between
					the length and size is due to confusion between character
					and byte count, it will report the more precise warning
					57.
				</P>
			</doc>
			<example funcBody="void example_func()" sysIncludes="string.h">
				<defectiveSrc><![CDATA[
					static char charArray[5];
					static int intArray[5];

					memset ((void *)charArray, 0, sizeof intArray);
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					static char charArray[5];
					static int intArray[5];

					memset ((void *)charArray, 0, sizeof charArray);
				]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_203.htm</helpURL>
		</DefectDef>
		<!-- //////////////////////////////////////////////////////////////// -->
		<!-- 57 -->
		<DefectDef guid="247d97ab-6a6c-4d65-8bb9-27e76385c559" id="57" name="CHAR_BYTE_SIZE_MISMATCH">
			<description>
				<format>Buffer overrun due to number of characters/number of bytes mismatch in call to %function%</format>
				<param name="function" format="'%ls'"/>
			</description>
			<recommendedFix>
				<format>Parameter %number% should be '(sizeof %variable%)/(sizeof %variable%[0])'</format>
				<param name="number" format="%d" display=""/>
				<param name="variable" format="%ls"/>
			</recommendedFix>
			<doc>
				<P>This warning indicates that a function that expects the number of characters
				is being passed the number of bytes instead. With wide (Unicode) characters the
				values are different. This defect may result in an exploitable buffer overrun or
				crash.</P>
				<P>PRE<i>f</i>ast reports this warning only for a set of
				functions that are known to take a character count rather
				than a byte count, so this warning is extremely accurate. In
				situations where PRE<i>f</i>ast is using a heuristic to
				determine whether a character count is required it reports a
				warning 209 instead, which is potentially less accurate.</P>
				<P>A common cause of this defect is using
				<code>sizeof</code> on a character array. The
				<code>sizeof</code> operator always computes the number of
				bytes; for ANSI characters this is the same as the number of
				characters, but for Unicode characters it is twice the
				number of characters.</P>
				<P>It is usually safe to compute the number of elements in an array by dividing
				the size of the array by the size of each individual element.</P>
			</doc>
			<example sysIncludes="windows.h" funcBody="void char_byte_size_mismatch(HINSTANCE hInst, UINT uID)">
				<defectiveSrc><![CDATA[
					TCHAR buff[128];

					(void)LoadString(hInst,
									 uID,
									 buff,
									 sizeof buff); /* wrong in Unicode case */
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					TCHAR buff[128];

					(void)LoadString(hInst,
									 uID,
									 buff,
									 (sizeof buff)/(sizeof buff[0]));
				]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_57.htm</helpURL>
		</DefectDef>
		<!-- //////////////////////////////////////////////////////////////// -->
		<!-- 203 -->
		<!--
		<DefectDef guid="e982cf96-9576-4172-8b81-32b168e5926f"
			id="203"
			name="FIELD_BUFFER_OVERRUN">
			<format>Buffer overrun for field '%ls' when calling '%ls': length %d is too large for array size %d</format>
			<display>Buffer overrun for field when calling '<PARAM>function</PARAM>': length is too large for array size</display>
		</DefectDef>

-->
		<!-- //////////////////////////////////////////////////////////////// -->
		<!-- 56 -->
		<DefectDef guid="5fa7c40f-20c6-4d80-bb85-953d37ebd8eb" id="56" name="USE_SAFER_FUNCTION">
			<description>
				<format>Call to %function% does not validate buffer size</format>
				<param name="function" format="'%ls'"/>
			</description>
			<recommendedFix>
				<format>Consider calling %function% instead</format>
				<param name="function" format="'%ls'"/>
			</recommendedFix>
			<doc>
				<P>This warning indicates that a function such as
				<code>sprintf</code>, which does not have a parameter
				indicating the maximum buffer size and is thus prone to
				buffer overrun, has been called when an alternate function
				that does contain the maximum buffer size exists.</P>
				<P>This warning identifies an opportunity for defensive programming; it
				sometimes identifies a defect that can lead to an exploitable buffer
				overrun or crash.</P>
				<P>PRE<i>f</i>ast attempts to suggest a safer function that can be called as an
				alternative.</P>
			</doc>
			<example funcBody="void example_func(char *input)" sysIncludes="windows.h">
				<defectiveSrc><![CDATA[
					char buff[MAX_PATH];

					OemToChar(buff, input);  // if strlen(input) > _MAX_PATH,
											 // leads to buffer overrun
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					char buff[MAX_PATH];

					OemToCharBuff(buff, input, MAX_PATH);
				]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_56.htm</helpURL>
		</DefectDef>
		<!-- //////////////////////////////////////////////////////////////// -->
		<!-- 204 -->
		<DefectDef guid="254eab11-efde-4861-a103-089f7adde3ba" id="204" name="UNVALIDATED_PARAM">
			<description>
				<format>Possible buffer overrun in call to %function%</format>
				<param name="function" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>use of unchecked parameter %variable%</format>
				<param name="variable" format="'%ls'"/>
			</additionalInfo>
			<doc>
				<P>This warning indicates that a function call is being made that could
				potentially lead to an overrun of a stack buffer, depending on the
				possible values of parameters to the function being analyzed.</P>
				<P>This defect may result in an exploitable buffer overrun or crash; in
				fact, some high-profile security exploits have been due to this defect.
				However, since PRE<i>f</i>ast does not consider the set of all possible callers
				to the function being analyzed, it is possible that the code is
				completely safe.</P>
				<P>It is a good idea to double-check the code (and the callers to this
				function) to see whether the function can ever be called with unexpected
				data. If it is not clear that all calls are safe, it may be appropriate
				to validate the input to the function (e.g., by checking the length of
				any input strings); conversely, bear in mind that unnecessary validation
				exacts a performance cost. </P>
				<P>It should be noted that for some coding styles many of these warnings
				will prove to be safe after inspection. Because of the frequency and
				potential consequences of this defect, we biased PRE<i>f</i>ast in favor of
				finding potential issues rather than its normal bias of reducing noise.</P>
			</doc>
			<example sysIncludes="string.h" funcBody="void buffer_overrun_due_to_invalidated_param(char *ptr)">
				<defectiveSrc><![CDATA[
					char buff[10];

					strcpy(buff, ptr);
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					char buff[10];

					if (strlen(ptr) >= sizeof buff) {
						return;
					}

					strcpy (buff, ptr);
				]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_204.htm</helpURL>
		</DefectDef>
		<!-- //////////////////////////////////////////////////////////////// -->
		<!-- 29 -->
		<DefectDef guid="3233b9cd-e5aa-437f-8c64-cbf7ee81d2db" id="29" name="USING_TAINTED_DATA">
			<description>
				<format>Possible buffer overrun in call to %function%</format>
				<param name="function" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>use of unchecked buffer size %variable%</format>
				<param name="variable" format="'%ls'"/>
			</additionalInfo>
			<doc>
				<P>This warning indicates that a function that takes a buffer and a
				size is being passed a tainted size: data that has been read in from
				some external source and has not been checked to see whether it is
				smaller than the buffer size.</P>
				<P>This defect may result in an exploitable buffer overrun, and has
				led to several high-profile exploits and subsequent patches from
				several different software vendors. An attacker may intentionally put
				a much larger than expected value for the size, which will lead to a
				buffer overrun.</P>
				<P>Whenever reading data from an untrusted external source, make sure
				to check it for validity. In this case, it is usually appropriate to
				check the size to make sure it is in the expected range.</P>
			</doc>
			<example funcBody="void example_func(HANDLE hFile)" sysIncludes="windows.h">
				<defectiveSrc><![CDATA[
					char buff[80];
					DWORD cbLen;
					DWORD cbRead;

					if (!ReadFile (hFile, &cbLen, sizeof (cbLen), &cbRead, NULL)) {
						return;
					}

					if (!ReadFile (hFile, buff, cbLen, &cbRead, NULL)) {  // error!
												// Need to check that cbLen <= 80
						return;
					}
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					char buff[80];
					DWORD cbLen;
					DWORD cbRead;

					if (!ReadFile (hFile, &cbLen, sizeof (cbLen), &cbRead, NULL)) {
						return;
					}

					if (cbLen &gt; sizeof (buff)) {
						return;  // possibly after doing some error handling
					}

					if (!ReadFile (hFile, buff, cbLen, &cbRead, NULL)) {
						return;
					}
				]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_29.htm</helpURL>
		</DefectDef>
		<!-- //////////////////////////////////////////////////////////////// -->
		<!-- 205 -->
		<DefectDef guid="ceff88d7-c73c-45b4-a0b0-8dd9251c0f31" id="205" name="STACK_BUFFER_EVIL_FUNCTION">
			<description>
				<format>Stack buffer overrun of %variable% in call to evil function %function%</format>
				<param name="variable" format="'%ls'"/>
				<param name="function" format="'%ls'"/>
			</description>
			<doc>
				<P>This warning indicates that a stack variable is being passed into
				function that gives no way of controlling how many bytes are copied
				into a buffer (e.g., <code>gets</code>).</P>
				<P>This defect is likely to result in an exploitable security hole or
				a program crash.</P>
				<P>Take care when making the changes to ensure that the code behaves
				correctly in the case of very long data - it is surprisingly easy to
				fix the buffer overrun and silence PRE<i>f</i>ast but wind up with code that
				still behaves incorrectly. A useful technique for helping to address
				problem is often to use a function that includes the buffer size
				(e.g., <code>fgets</code> or <code>_fgetws</code>) instead; make sure to handle the case where
				the length of the data exceeds the buffer size. In some cases, more
				significant changes may be required.</P>
			</doc>
			<example funcBody="void Bounds_207()" sysIncludes="stdlib.h;stdio.h">
				<defectiveSrc><![CDATA[
					char buff[_MAX_PATH];

					if (! gets(buff))    // but what if something longer than
					{;}                  // _MAX_PATH is provided as input?
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					char buff[_MAX_PATH];

					if (! fgets(buff, sizeof buff, stdin))
					{;}
				]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_205.htm</helpURL>
		</DefectDef>
		<!-- //////////////////////////////////////////////////////////////// -->
		<!-- 206 -->
		<!-- not in 1.0
		<DefectDef guid="5ff8be30-96ca-4901-ad7d-4d66cec8490d"
			id="206"
			name="PARAM_BUFFER_EVIL_FUNCTION">
			<format>Parameter buffer overrun when calling evil function '%ls': '%ls' '%ls'</format>
			<display>Parameter buffer overrun when calling evil function</display>
		</DefectDef>
-->
		<!-- //////////////////////////////////////////////////////////////// -->
		<!-- 207 -->
		<DefectDef guid="814bf142-97b8-4d2b-bdd4-dd0fcfacea19" id="207" name="GENERIC_OVERRUN_EVIL_FUNCTION">
			<description>
				<format>Buffer overrun in call to evil function %function%</format>
				<param name="function" format="'%ls'"/>
			</description>
			<doc>
				<P>This warning indicates that a buffer is being passed into
				function that gives no way of controlling how many bytes are
				copied into a buffer (e.g., <code>gets</code> or
				<code>_getws</code>).</P>
				<P>This defect is likely to result in a memory corruption or
				program crash, although in some cases may result in an
				exploitable security hole.</P>
				<P>Take care when making the changes to ensure that the code
				behaves correctly in the case of very long data - it is
				surprisingly easy to fix the buffer overrun and silence
				PRE<i>f</i>ast but wind up with code that still behaves
				incorrectly. A useful technique for helping to address
				problem is often to use a function that includes the buffer
				size (e.g., <code>fgets</code> or <code>_fgetws</code>)
				instead; make sure to handle the case where the length of
				the data exceeds the buffer size. In some cases, more
				significant changes may be required.</P>
				<P>If PRE<i>f</i>ast can determine that the buffer being
				passed in is a stack buffer (in which case it is more likely
				to result in an exploitable security hole), the more precise
				warning 205 will be reported instead.</P>
			</doc>
			<example funcBody="void Bounds_207()" sysIncludes="stdlib.h;stdio.h">
				<defectiveSrc><![CDATA[
					static char buff[_MAX_PATH];

					if (! gets(buff))    // but what if something longer than
					{;}                  // _MAX_PATH is provided as input?
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					static char buff[_MAX_PATH];

					if (! fgets(buff, sizeof buff, stdin))
					{;}
				]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_207.htm</helpURL>
		</DefectDef>
		<!-- //////////////////////////////////////////////////////////////// -->
		<!-- 208 -->
		<!-- not in 1.0
		<DefectDef guid="bca84351-cadc-44c9-92db-a88e57ca51cc"
			id="208"
			name="STACK_BUFFER_TO_FUNCTION">
			<format>Stack buffer passed to function '%ls': '%ls' '%ls' '%ls'</format>
			<display>Stack buffer passed to function</display>
		</DefectDef>
-->
		<!-- //////////////////////////////////////////////////////////////// -->
		<!-- 209 -->
		<DefectDef guid="69DF4C70-A4E5-4051-8C2C-F41A623CC62D" id="209" name="SIZEOF_CHAR_BYTE_SIZE_MISMATCH">
			<description>
				<format>Using 'sizeof %variable1%' as parameter %number% in call to %function% where %variable2% is an array of wide characters</format>
				<param name="variable1" format="%ls"/>
				<param name="number" format="%d" display=""/>
				<param name="function" format="'%ls'"/>
				<param name="variable2" format="'%ls'"/>
			</description>
			<question>
				<format>Should this be character count rather than byte count</format>
			</question>
			<doc type="rtf"><![CDATA[{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman{\*\falt Times};}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol{\*\falt Bookshelf Symbol 3};}{\f10\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}
{\f70\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Verdana{\*\falt arial};}{\f73\froman\fcharset0\fprq2{\*\panose 02040502050405020303}Georgia;}
{\f149\fmodern\fcharset0\fprq1{\*\panose 020b0509030504030204}Lucida Sans Typewriter{\*\falt Lucida Console};}{\f150\fnil\fcharset2\fprq2{\*\panose 05010101010101010101}Microsoft Logo 95{\*\falt Symbol};}
{\f152\froman\fcharset238\fprq2 Times New Roman CE{\*\falt Times};}{\f153\froman\fcharset204\fprq2 Times New Roman Cyr{\*\falt Times};}{\f155\froman\fcharset161\fprq2 Times New Roman Greek{\*\falt Times};}
{\f156\froman\fcharset162\fprq2 Times New Roman Tur{\*\falt Times};}{\f157\froman\fcharset177\fprq2 Times New Roman (Hebrew){\*\falt Times};}{\f158\froman\fcharset178\fprq2 Times New Roman (Arabic){\*\falt Times};}
{\f159\froman\fcharset186\fprq2 Times New Roman Baltic{\*\falt Times};}{\f160\froman\fcharset163\fprq2 Times New Roman (Vietnamese){\*\falt Times};}{\f172\fmodern\fcharset238\fprq1 Courier New CE;}{\f173\fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f175\fmodern\fcharset161\fprq1 Courier New Greek;}{\f176\fmodern\fcharset162\fprq1 Courier New Tur;}{\f177\fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f178\fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f179\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f180\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\f852\fswiss\fcharset238\fprq2 Verdana CE{\*\falt arial};}{\f853\fswiss\fcharset204\fprq2 Verdana Cyr{\*\falt arial};}
{\f855\fswiss\fcharset161\fprq2 Verdana Greek{\*\falt arial};}{\f856\fswiss\fcharset162\fprq2 Verdana Tur{\*\falt arial};}{\f859\fswiss\fcharset186\fprq2 Verdana Baltic{\*\falt arial};}{\f860\fswiss\fcharset163\fprq2 Verdana (Vietnamese){\*\falt arial};}
{\f882\froman\fcharset238\fprq2 Georgia CE;}{\f883\froman\fcharset204\fprq2 Georgia Cyr;}{\f885\froman\fcharset161\fprq2 Georgia Greek;}{\f886\froman\fcharset162\fprq2 Georgia Tur;}{\f889\froman\fcharset186\fprq2 Georgia Baltic;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red204\green153\blue255;}{\stylesheet{\ql \li0\ri0\sb60\sa60\sl-260\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\f70\fs20\cf17\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal,APPLY ANOTHER STYLE;}{\s1\ql \li0\ri0\sb180\sa60\sl-360\slmult0\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 
\b\f70\fs32\cf1\lang1033\langfe1033\kerning24\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext16 heading 1,h1,Level 1 Topic Heading;}{\s2\ql \li0\ri0\sb180\sa60\sl-360\slmult0
\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \b\f70\fs32\cf15\lang1033\langfe1033\kerning24\cgrid\langnp1033\langfenp1033 \sbasedon1 \snext16 heading 2,h2,Level 2 Topic Heading;}{
\s3\ql \li0\ri0\sb180\sa60\sl-360\slmult0\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0 \b\f70\fs32\cf16\lang1033\langfe1033\kerning24\cgrid\langnp1033\langfenp1033 \sbasedon1 \snext16 
heading 3,h3,Level 3 Topic Heading;}{\s4\ql \li0\ri0\sb180\sa60\sl-320\slmult0\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin0\itap0 \b\f70\fs28\cf1\lang1033\langfe1033\kerning24\cgrid\langnp1033\langfenp1033 
\sbasedon1 \snext16 heading 4,h4,First Subheading;}{\s5\ql \li0\ri0\sb180\sa60\sl-300\slmult0\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin0\itap0 \b\f70\fs26\cf1\lang1033\langfe1033\kerning24\cgrid\langnp1033\langfenp1033 
\sbasedon1 \snext16 heading 5,h5,Second Subheading;}{\s6\ql \li0\ri0\sb180\sa60\sl-240\slmult0\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel5\adjustright\rin0\lin0\itap0 \b\f70\fs20\cf1\lang1033\langfe1033\kerning24\cgrid\langnp1033\langfenp1033 
\sbasedon1 \snext16 heading 6,h6,Third Subheading;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}{\*\cs15 \additive \cf2 \sbasedon10 MyNotes;}{\s16\ql \li0\ri0\sb60\sa60\sl-260\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext16 Text,t;}{\s17\ql \li0\ri0\sb60\sa180\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext16 Figure,fig;}{\s18\ql \li0\ri0\sa60\sl-300\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\f2\fs20\cf1\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 \snext18 Code,c;}{\s19\ql \li720\ri0\sb60\sa60\sl-260\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 
\b\f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon20 \snext20 Label in List 2,l2;}{\s20\ql \li720\ri0\sb60\sa60\sl-260\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 
\f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext20 Text in List 2,t2;}{\s21\ql \li0\ri0\sb60\sa60\sl-260\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\b\f70\fs20\cf2\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext16 Label,l;}{\s22\ql \li0\ri0\sb60\sa60\sl-260\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\f70\fs20\cf6\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext22 \ssemihidden footnote text,ft,Used by Word for text of Help footnotes;}{\s23\ql \fi-360\li720\ri0\sb60\sa60\sl-260\slmult0\widctlpar\jclisttab\tx720{\*\pn 
\pnlvlbody\ilvl0\ls51\pnrnot0\pndec }\aspalpha\aspnum\faauto\ls51\adjustright\rin0\lin720\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon20 \snext23 Numbered List 2,nl2;}{\s24\ql \li0\ri0\sa120\sl-240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading1500\cbpat8 \f149\fs20\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 \sbasedon16 \snext24 Syntax,s;}{\s25\ql \li0\ri0\sb40\sa80\sl-220\slmult0\widctlpar\brdrt
\brdrs\brdrw10\brsp20 \aspalpha\aspnum\faauto\adjustright\rin0\lin0\rtlgutter\itap0 \f70\fs16\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext16 Table Footnote,tf;}{\*\cs26 \additive \cf6\super \sbasedon10 \ssemihidden 
footnote reference,fr,Used by Word for Help footnote symbols;}{\*\cs27 \additive \f2\fs20 \sbasedon10 Code Embedded,ce;}{\*\cs28 \additive \b\f70\fs20\ulnone \sbasedon10 Label Embedded,le;}{\*\cs29 \additive \uldb\cf11 \sbasedon10 Link Text,lt;}{\*\cs30 
\additive \ul\cf11 \sbasedon10 Link Text Popup,ltp;}{\*\cs31 \additive \v\cf6 \sbasedon10 Link ID,lid;}{\s32\ql \li0\ri0\sb60\sl-120\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\f70\fs12\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext16 Table Spacing After,tsa;}{\s33\ql \li720\ri0\sa60\sl-300\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 
\f2\fs20\cf1\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 \sbasedon18 \snext33 Code in List 2,c2;}{\*\cs34 \additive \v\f2\fs20\cf1\chshdng3750\chcfpat7\chcbpat0 \sbasedon10 Conditional Marker,cm;}{
\s35\ql \li720\ri0\sb60\sa180\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon17 \snext20 Figure in List 2,fig2;}{
\s36\ql \li0\ri0\sb60\sa180\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext36 Figure Embedded,fige;}{\s37\ql \li720\ri0\sb40\sa80\sl-220\slmult0\widctlpar
\brdrt\brdrs\brdrw10\brsp20 \aspalpha\aspnum\faauto\adjustright\rin0\lin720\rtlgutter\itap0 \f70\fs16\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon20 \snext20 Table Footnote in List 2,tf2;}{\s38\ql \li360\ri0\sb60\sa60\sl-260\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \b\f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon39 \snext39 Label in List 1,l1;}{\s39\ql \li360\ri0\sb60\sa60\sl-260\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext39 Text in List 1,t1;}{\s40\ql \li360\ri0\sa60\sl-300\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs20\cf1\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 \sbasedon18 \snext40 Code in List 1,c1;}{
\s41\ql \li360\ri0\sb60\sa180\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon17 \snext39 Figure in List 1,fig1;}{\s42\ql \li360\ri0\sb40\sa80\sl-220\slmult0\widctlpar
\brdrt\brdrs\brdrw10\brsp20 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\rtlgutter\itap0 \f70\fs16\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon39 \snext39 Table Footnote in List 1,tf1;}{\*\cs43 \additive 
\v\f2\fs20\cf1\chshdng2500\chcfpat4\chcbpat0 \sbasedon10 HTML;}{\s44\qr \li0\ri0\sl-220\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs16\cf13\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext44 footer,f;}{
\s45\ql \li360\ri0\sb60\sa60\sl-260\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext45 Alert Text,at;}{\s46\ql \li720\ri0\sb60\sa60\sl-260\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon39 \snext46 Alert Text in List 1,at1;}{\s47\ql \li1080\ri0\sb60\sa60\sl-260\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin1080\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon20 \snext47 Alert Text in List 2,at2;}{\s48\ql \li0\ri1440\sb60\sa60\sl-260\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin1440\lin0\itap0 \i\v\f70\fs20\cf12\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext48 Revision History,rh;}{\s49\ql \fi-360\li360\ri0\sb60\sa60\sl-260\slmult0\widctlpar
\jclisttab\tx360\aspalpha\aspnum\faauto\ls52\adjustright\rin0\lin360\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon39 \snext49 Bulleted List 1,bl1;}{\s50\ql \li360\ri360\sb60\sa60\sl-260\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin360\lin360\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext50 Text Indented,ti;}{\s51\ql \fi-360\li720\ri0\sb60\sa60\sl-260\slmult0\widctlpar\jclisttab\tx720{\*\pn 
\pnlvlbody\ilvl0\ls33\pnrnot0\pndec }\aspalpha\aspnum\faauto\ls33\adjustright\rin0\lin720\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon20 \snext51 Bulleted List 2,bl2;}{\s52\ql \li0\ri0\sb60\sl-260\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext53 Defined Term,dt;}{\s53\ql \li360\ri0\sa60\sl-260\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext52 Definition,d;}{\s54\ql \fi-360\li360\ri0\sb60\sa60\sl-260\slmult0\widctlpar\tx360{\*\pn 
\pnlvlbody\ilvl0\ls46\pnrnot0\pndec }\aspalpha\aspnum\faauto\ls46\adjustright\rin0\lin360\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon39 \snext54 Numbered List 1,nl1;}{\s55\ql \li0\ri0\sb60\sa60\sl-260\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext16 Glue Link Text,glt;}{\s56\ql \li0\ri1440\sb60\sl-260\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin1440\lin0\itap0 \v\f70\fs20\cf14\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext56 Index Tag,it;}{\s57\qr \li0\ri0\sl-220\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs16\cf13\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon44 \snext57 header,h;}{\*\cs58 \additive \b\f2\fs20 \sbasedon10 Code Featured Element,cfe;}{
\s59\ql \li0\ri0\sb60\sa60\sl-220\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs16\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext59 Copyright,copy;}{\s60\ql \fi-180\li180\ri0\sb60\sa60\sl-220\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0 \f70\fs16\cf13\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext60 \sautoupd \ssemihidden index 1,idx1;}{\s61\ql \li0\ri0\sb180\sa60\sl-300\slmult0
\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin0\itap0 \b\f70\fs26\cf13\lang1033\langfe1033\kerning24\cgrid\langnp1033\langfenp1033 \sbasedon1 \snext60 \ssemihidden index heading,ih;}{\s62\qr \li0\ri0\sb180\sa180\sl-400\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\f70\fs36\cf13\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext62 Print Division Title,pdt;}{\*\cs63 \additive \b\f70\fs16\cf13 \sbasedon10 page number,pn;}{
\s64\qr \li0\ri0\sb180\sa60\sl-300\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f150\fs26\cf13\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 \snext16 Print MS Corp,pms;}{\s65\ql \li0\ri0\sl-180\slmult0
\widctlpar\pvpg\phmrg\posy14600\absh-800\dxfrtext180\dfrmtxtx180\dfrmtxty180\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs12\cf13\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon44 \snext65 Slugline,slug;}{
\s66\ql \li0\ri0\sb60\sa60\sl-240\slmult0\keepn\widctlpar\tx360\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\f70\fs20\cf13\lang1033\langfe1033\kerning24\cgrid\langnp1033\langfenp1033 \sbasedon1 \snext66 \sautoupd \ssemihidden toc 1,toc1;}{
\s67\ql \li360\ri0\sb60\sa60\sl-260\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f70\fs20\cf13\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext67 \sautoupd \ssemihidden toc 2,toc2;}{
\s68\ql \li720\ri0\sb60\sa60\sl-260\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f70\fs20\cf13\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon67 \snext68 \sautoupd \ssemihidden toc 3,toc3;}{
\s69\ql \li1080\ri0\sb60\sa60\sl-260\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin1080\itap0 \f70\fs20\cf13\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon67 \snext69 \sautoupd \ssemihidden toc 4,toc4;}{
\s70\ql \fi-180\li540\ri0\sb60\sa60\sl-220\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin540\itap0 \f70\fs16\cf13\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon60 \snext70 \sautoupd \ssemihidden index 2,idx2;}{
\s71\ql \fi-180\li900\ri0\sb60\sa60\sl-220\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin900\itap0 \f70\fs16\cf13\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon60 \snext71 \sautoupd \ssemihidden index 3,idx3;}{
\s72\qc \li0\ri0\sa120\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext16 Image;}{\*\cs73 \additive \f70\fs16\cf5 \sbasedon10 Multilanguage Marker Auto,mma;}{\*
\cs74 \additive \i\f2\fs20 \sbasedon27 CodeItalic;}{\s75\ql \li0\ri0\sb60\sa60\sl-220\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs16\cf5\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext75 
Multilanguage Marker Explicit Begin,mmeb;}{\s76\ql \li0\ri0\sb60\sa60\sl-220\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs16\cf12\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon75 \snext76 
Multilanguage Marker Explicit End,mmee;}{\*\cs77 \additive \b \sbasedon10 Bold,b;}{\*\cs78 \additive \b\i \sbasedon10 Bold Italic,bi;}{\*\cs79 \additive \sbasedon10 \ssemihidden annotation reference,cr,Used by Word to flag author queries;}{
\s80\ql \li0\ri0\sb60\sa60\sl-260\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext80 \ssemihidden 
annotation text,ct,Used by Word for text of author queries;}{\*\cs81 \additive \i \sbasedon10 Italic,i;}{\s82\ql \li0\ri0\sb60\sa60\sl-260\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\b\f70\fs20\cf2\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon21 \snext82 Label Special,ls;}{\s83\qr \li0\ri-120\sb180\sl-260\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin-120\lin0\itap0 
\caps\f70\fs20\expnd24\expndtw120\cf13\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon62 \snext83 Print Division Number,pdn;}{\*\cs84 \additive \strike \sbasedon10 Strikethrough,strike;}{\*\cs85 \additive \sub \sbasedon10 Subscript,sub;}{\*
\cs86 \additive \super \sbasedon10 Superscript,sup;}{\*\cs87 \additive \i\f2\fs20 \sbasedon27 Code Italic;}{\*\cs88 \additive \ulnone\cf0\chshdng0\chcfpat4\chcbpat0\ulc0 \sbasedon10 Popup Text;}{\s89\qr \li0\ri0\sb60\sa60\sl-260\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext89 \sautoupd TextToolBar;}{
\s90\qc \li0\ri0\sb60\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\f70\fs18\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext72 \sautoupd Image Label;}{\s91\qr \li0\ri0\sb60\sa90\sl-260\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\f70\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext91 Title;}{\*\cs92 \additive \ulnone\cf11 \sbasedon29 Link Text HTML;}{
\s93\ql \li0\ri0\sb120\sa120\sl-320\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20 \aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin0\rtlgutter\itap0 \f70\fs24\cf2\lang1033\langfe1033\kerning24\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext16 \sautoupd DivHeadTbl;}{\*\cs94 \additive \f2\fs20\cf0 \sbasedon27 Code Comment;}{\s95\ql \li0\ri0\sa120\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f73\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext95 Body Text;}{\s96\ql \li720\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f70\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext96 Body Text Indent 2;}{
\s97\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs24\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext97 Normal (Web);}{\s98\ql \li720\ri0\sb60\sa60\sl-260\slmult0
\nowidctlpar\faauto\rin0\lin720\itap0 \f2\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext98 Body Text 2;}{\*\cs99 \additive \ul\cf2 \sbasedon10 Hyperlink;}}{\*\listtable{\list\listtemplateid946940\listsimple{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid-132}{\list\listtemplateid559304130\listsimple
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li1440\jclisttab\tx1440\lin1440 }{\listname ;}\listid-131}{\list\listtemplateid2002005884\listsimple
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li1080\jclisttab\tx1080\lin1080 }{\listname ;}\listid-130}{\list\listtemplateid-1601399894\listsimple
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\jclisttab\tx720\lin720 }{\listname ;}\listid-129}{\list\listtemplateid1471952642\listsimple
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li1800\jclisttab\tx1800\lin1800 }{\listname ;}\listid-128}{\list\listtemplateid718409368
\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listname ;}\listid-127}
{\list\listtemplateid-131314600\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li1080\jclisttab\tx1080\lin1080 }{\listname 
;}\listid-126}{\list\listtemplateid-1532565570\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li720\jclisttab\tx720\lin720 }
{\listname ;}\listid-125}{\list\listtemplateid-1828811874\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360\lin360 }
{\listname ;}\listid-120}{\list\listtemplateid446979590\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360
\jclisttab\tx360\lin360 }{\listname ;}\listid-119}{\list\listtemplateid67698703\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360
\jclisttab\tx360\lin360 }{\listname ;}\listid68771112}{\list\listtemplateid67698703\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360
\jclisttab\tx360\lin360 }{\listname ;}\listid98985430}{\list\listtemplateid67698703\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360
\jclisttab\tx360\lin360 }{\listname ;}\listid152069974}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 
\fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid213931746}{\list\listtemplateid1104607418\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}
\fi-360\li720\jclisttab\tx1080\lin720 }{\listname ;}\listid309751557}{\list\listtemplateid67698703\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}
\fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid318533751}{\list\listtemplateid-792669476\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid-98781122
\'01\u9679 ?;}{\levelnumbers;}\f70\fbias0 \s49\fi-360\li360\jclisttab\tx360\lin360 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}
\f2\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li2160
\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid376467742}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid414674143}{\list\listtemplateid391558394\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u9679 ?;}{\levelnumbers;}\f70\fbias0 \s51\fi-360\li720\jclisttab\tx720\lin720 }{\listname ;}\listid475953915}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid521362406}{\list\listtemplateid309995936\listsimple{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid555043825}{\list\listtemplateid67698703\listsimple{\listlevel
\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid624120574}{\list\listtemplateid67698689\listsimple{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid653800487}{\list\listtemplateid67698703\listsimple
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid681705840}{\list\listtemplateid67698689\listsimple
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid769737302}
{\list\listtemplateid1838195882\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li720
\jclisttab\tx720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0
{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid776026673}{\list\listtemplateid1910046534\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers
;}\f3\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li3600
\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid878856564}{\list\listtemplateid-1624840694\listsimple
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1054350067}
{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname 
;}\listid1079012351}{\list\listtemplateid-13829058\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360\lin360 }{\listname 
;}\listid1157041145}{\list\listtemplateid520143332\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360
\jclisttab\tx360\lin360 }{\listname ;}\listid1161654485}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 
\fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1242174498}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers
;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1247305601}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1352609911}{\list\listtemplateid67698703\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0
{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1387410818}{\list\listtemplateid-1000035972\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1434664814}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1435589206}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1440906259}{\list\listtemplateid117579932\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689
\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}
\f2\fbias0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li4320
\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid1481849002}{\list\listtemplateid67698703
\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1484086278}
{\list\listtemplateid-1308309360\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li720
\jclisttab\tx720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0
{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid1525098527}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1602645195}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1610774877}{\list\listtemplateid70557352\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1615479013}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1656881520}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1686596083}{\list\listtemplateid67698703\listsimple{\listlevel\levelnfc0
\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1780173060}{\list\listtemplateid1656119020\listsimple{\listlevel
\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\s23\fi-360\li720\jclisttab\tx720\lin720 }{\listname ;}\listid1809861688}{\list\listtemplateid152961238\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid1288320176\'01\u-3913 ?;}{\levelnumbers;}\f3\fs20\fbias0 \fi-360\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid-1409896392\'01\u-3913 ?;}{\levelnumbers;}\f3\fs20\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid-702628360\'01\u-3913 ?;}{\levelnumbers;}\f3\fs20\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid1519576678\'01\u-3913 ?;}{\levelnumbers;}\f3\fs20\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\leveltemplateid-1838129146\'01\u-3913 ?;}{\levelnumbers;}\f3\fs20\fbias0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\leveltemplateid800748738\'01\u-3913 ?;}{\levelnumbers;}\f3\fs20\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\leveltemplateid-1383152488\'01\u-3913 ?;}{\levelnumbers;}\f3\fs20\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\leveltemplateid-1649794502\'01\u-3913 ?;}{\levelnumbers;}\f3\fs20\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\leveltemplateid1433799576\'01\u-3913 ?;}{\levelnumbers;}\f3\fs20\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid1826503847}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1835412302}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1839688267}{\list\listtemplateid2143072124\listsimple{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li720\jclisttab\tx720\lin720 }{\listname ;}\listid1892156636}{\list\listtemplateid-1994478282\listsimple{\listlevel
\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\s54\fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1908110580}{\list\listtemplateid-387552862\listsimple
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1925800502}{\list\listtemplateid67698689\listsimple
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid2128041332}}{\*\listoverridetable
{\listoverride\listid1054350067\listoverridecount0\ls1}{\listoverride\listid1656881520\listoverridecount0\ls2}{\listoverride\listid1435589206\listoverridecount0\ls3}{\listoverride\listid1610774877\listoverridecount0\ls4}{\listoverride\listid624120574
\listoverridecount0\ls5}{\listoverride\listid653800487\listoverridecount0\ls6}{\listoverride\listid1835412302\listoverridecount0\ls7}{\listoverride\listid414674143\listoverridecount0\ls8}{\listoverride\listid98985430\listoverridecount0\ls9}
{\listoverride\listid152069974\listoverridecount0\ls10}{\listoverride\listid1602645195\listoverridecount0\ls11}{\listoverride\listid1839688267\listoverridecount0\ls12}{\listoverride\listid2128041332\listoverridecount0\ls13}{\listoverride\listid213931746
\listoverridecount0\ls14}{\listoverride\listid1440906259\listoverridecount0\ls15}{\listoverride\listid1242174498\listoverridecount0\ls16}{\listoverride\listid68771112\listoverridecount0\ls17}{\listoverride\listid521362406\listoverridecount0\ls18}
{\listoverride\listid1247305601\listoverridecount0\ls19}{\listoverride\listid1079012351\listoverridecount0\ls20}{\listoverride\listid1686596083\listoverridecount0\ls21}{\listoverride\listid1352609911\listoverridecount0\ls22}{\listoverride\listid681705840
\listoverridecount0\ls23}{\listoverride\listid1387410818\listoverridecount0\ls24}{\listoverride\listid1925800502\listoverridecount0\ls25}{\listoverride\listid1157041145\listoverridecount0\ls26}{\listoverride\listid555043825\listoverridecount0\ls27}
{\listoverride\listid1780173060\listoverridecount0\ls28}{\listoverride\listid1615479013\listoverridecount0\ls29}{\listoverride\listid318533751\listoverridecount0\ls30}{\listoverride\listid1484086278\listoverridecount0\ls31}{\listoverride\listid769737302
\listoverridecount0\ls32}{\listoverride\listid475953915\listoverridecount0\ls33}{\listoverride\listid1925800502\listoverridecount1{\lfolevel\listoverridestartat\levelstartat1}\ls34}{\listoverride\listid-119\listoverridecount0\ls35}
{\listoverride\listid-125\listoverridecount0\ls36}{\listoverride\listid-126\listoverridecount0\ls37}{\listoverride\listid-127\listoverridecount0\ls38}{\listoverride\listid-128\listoverridecount0\ls39}{\listoverride\listid-120\listoverridecount0\ls40}
{\listoverride\listid-129\listoverridecount0\ls41}{\listoverride\listid-130\listoverridecount0\ls42}{\listoverride\listid-131\listoverridecount0\ls43}{\listoverride\listid-132\listoverridecount0\ls44}{\listoverride\listid1161654485\listoverridecount0\ls45
}{\listoverride\listid1908110580\listoverridecount0\ls46}{\listoverride\listid1434664814\listoverridecount0\ls47}{\listoverride\listid309751557\listoverridecount0\ls48}{\listoverride\listid1892156636\listoverridecount0\ls49}{\listoverride\listid309751557
\listoverridecount1{\lfolevel\listoverridestartat\levelstartat1}\ls50}{\listoverride\listid1809861688\listoverridecount0\ls51}{\listoverride\listid376467742\listoverridecount0\ls52}{\listoverride\listid1826503847\listoverridecount0\ls53}
{\listoverride\listid1481849002\listoverridecount0\ls54}{\listoverride\listid776026673\listoverridecount0\ls55}{\listoverride\listid878856564\listoverridecount0\ls56}{\listoverride\listid1525098527\listoverridecount0\ls57}}{\*\rsidtbl \rsid404731
\rsid1770185\rsid2687585\rsid5250792\rsid7751633\rsid8738160\rsid13634107\rsid14950626\rsid16712962}{\*\generator Microsoft Word 10.0.2627;}{\info{\title $#KAINSERTTITLE}{\author Stephanie Williams}{\operator jtasler}{\creatim\yr2001\mo5\dy8\hr17\min52}
{\revtim\yr2001\mo5\dy8\hr17\min52}{\printim\yr2001\mo5\dy3\hr17\min24}{\version2}{\edmins1}{\nofpages1}{\nofwords230}{\nofchars1296}{\*\company Microsoft Corp.}{\nofcharsws1510}{\vern16437}}
\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dghspace180\dgvspace180\dghorigin1701\dgvorigin1984\dghshow0\dgvshow0
\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\htmautsp\nolnhtadjtbl\rsidroot2687585 \fet0{\*\ftnsep \pard\plain \ql \li0\ri0\sb60\sa60\sl-260\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\f70\fs20\cf17\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1770185 \chftnsep 
\par }}{\*\ftnsepc \pard\plain \ql \li0\ri0\sb60\sa60\sl-260\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs20\cf17\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1770185 \chftnsepc 
\par }}{\*\ftncn \pard\plain \ql \li0\ri0\sb60\sa60\sl-260\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs20\cf17\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1770185 
\par }}\sectd \linex0\endnhere\sectlinegrid360\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}
{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \s16\ql \li0\ri0\sb60\sa60\sl-260\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid2687585 
This warning indicates PREfast has identified a parameter to a function call that may incorrectly be a byte count instead of a character count. If this is the case, this defect is likely to result in a memory corruption or program cras
h, although some cases may result in an exploitable security hole.
\par It should be noted that the heuristic PREfast uses can be incorrect for certain coding styles; therefore, this warning may not correspond to an actual defect in the code.
\par A common cause of this defect is using sizeof on a character array. }{\insrsid2390503 s}{\insrsid2687585 izeof always computes the number of bytes. For ANSI characters,
 this is the same as the number of characters; however, for Unicode characters it is twice the number of characters.
\par It is usually safe to compute the number of elements in an array by dividing the size of the array by the size of each individual element.
\par If PREfast knows that the specific function involved definitely takes a character count rather than a byte count, it produces the more precise warning 53 instead.
\par PREfast generates this warning in cases where:
\par {\pntext\pard\plain\s51 \f70\fs20\cf1\insrsid2687585 \loch\af70\dbch\af0\hich\f70 \u9679\'3f\tab}}\pard\plain \s51\ql \fi-360\li720\ri0\sb60\sa60\sl-260\slmult0\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls33\pnrnot0
\pnf70\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb ?}}\aspalpha\aspnum\faauto\ls33\adjustright\rin0\lin720\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid2687585 
a variable is passed as one parameter and sizeof that variable is passed as another parameter
\par {\pntext\pard\plain\s51 \f70\fs20\cf1\insrsid2687585 \loch\af70\dbch\af0\hich\f70 \u9679\'3f\tab}}\pard \s51\ql \fi-360\li720\ri0\sb60\sa60\sl-260\slmult0\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls33\pnrnot0
\pnf70\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb ?}}\aspalpha\aspnum\faauto\ls33\adjustright\rin0\lin720\itap0 {\insrsid2687585 both the variable type and the formal parameter type are some variety of pointer-to-wide char
\par }\pard\plain \s16\ql \li0\ri0\sb60\sa60\sl-260\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs20\cf1\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid2687585 Please note that}{\insrsid2390503  }{\insrsid2687585 
we are working to improve this heuristic. You can report situations where this warning is generated incorrectly to the }{\cs43\v\f2\chshdng2500\chcfpat4\chcbpat0\insrsid2687585 
<a href="mailto:pftbug@microsoft.com" target="new" title="Email the pftbug alias">}{\cs29\uldb\cf11\insrsid2687585 PREfast Bug Reports and Suggestions}{\cs43\v\f2\chshdng2500\chcfpat4\chcbpat0\insrsid2687585 </a>}{\insrsid2687585  alias.
\par }\pard\plain \ql \li0\ri0\sb60\sa60\sl-260\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f70\fs20\cf17\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid2390503 
\par }\pard \ql \li0\ri0\sb60\sa60\sl-260\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\insrsid2687585 
\par }}			]]></doc>
			<example funcBody="void example_func(wchar_t *input)" sysIncludes="windows.h">
				<defectiveSrc><![CDATA[
					extern void my_wcsncpy(wchar_t *, wchar_t *, size_t);
					WCHAR pPtr1[5];

					my_wcsncpy(pPtr1, input, sizeof pPtr1);
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					extern void my_wcsncpy(wchar_t *, wchar_t *, size_t);
					WCHAR pPtr1[5];

					my_wcsncpy(pPtr1, input, (sizeof pPtr1) / (sizeof pPtr1[0]));
				]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_209.htm</helpURL>
		</DefectDef>
		<DefectDef guid="c7e5b217-bf45-4f56-8370-e63d7d2e6a39" id="292" name="LOOP_COUNTS_UP_FROM_MAX">
			<description>
				<format>
					Ill-defined for-loop
				</format>
			</description>
			<additionalInfo>
				<format>
					counts up from "maximum"
				</format>
			</additionalInfo>
			<doc>
				<p>
					This warning indicates that PRE<i>f</i>ast has detected
					a for-loop that may not function as intended.
				</p>
				<p>
					This warning occurs when a loop that counts up from a
					maximum, but has a lower termination condition is
					detected.  This loop will terminate only after integer
					overflow occurs.
				</p>
			</doc>
			<example funcBody="void Bounds_292()">
				<defectiveSrc><![CDATA[
					signed char i;

					for (i = 100; i >= 0; i++) { ; }
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					signed char i;

					for (i = 100; i >= 0; i--) { ; }
				]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_292.htm</helpURL>
		</DefectDef>
		<DefectDef guid="c901eef0-d4d7-4e44-be0e-3e00d2287850" id="293" name="LOOP_INDEX_GOES_NEGATIVE">
			<description>
				<format>
					Ill-defined for-loop
				</format>
			</description>
			<additionalInfo>
				<format>
					counts down from "minimum"
				</format>
			</additionalInfo>
			<consequence>
				<format>
					Loop control variable goes negative
				</format>
			</consequence>
			<doc>
				<p>
					This warning indicates that PRE<i>f</i>ast has detected
					a for-loop that may not function as intended.
				</p>
				<p>
					A signed index variable in conjunction with a negative
					increment will cause the loop to count negative until
					integer overflow occurs which will terminate the loop.
				</p>
			</doc>
			<example funcBody="void Bounds_293()">
				<defectiveSrc><![CDATA[
					signed char i;

					for (i = 0; i < 100; i--) { ; }
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					signed char i;

					for (i = 0; i < 100; i++) { ; }
				]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_293.htm</helpURL>
		</DefectDef>
		<DefectDef guid="69632d82-65c9-420b-8790-550e2e0abc7a" id="294" name="LOOP_BODY_NEVER_EXECUTED">
			<description>
				<format>
					Ill-defined for-loop
				</format>
			</description>
			<additionalInfo>
				<format>
					initial condition does not satisfy test
				</format>
			</additionalInfo>
			<consequence>
				<format>
					Body not executed
				</format>
			</consequence>
			<doc>
				<p>
					This warning indicates that PRE<i>f</i>ast has detected
					a for-loop that may not function as intended.
				</p>
				<p>
					The for-loop:
	<pre>
		for (<i>initializer</i>; <i>continuation</i>; <i>increment</i> ) {
			...
		}
	</pre>
	is equivalent to the following:
	<pre>
		{
			<i>initializer</i>;
			while (<i>continuation</i>) {
				...
				<i>increment</i>;
			}
		}
	</pre>
				</p>
				<p>
					Thus, if <i>initializer</i> does not satisfy
					<i>continuation</i>, the loop body will not be executed.
				</p>
			</doc>
			<example funcBody="void Bounds_294()">
				<defectiveSrc><![CDATA[
					signed char i;

					for (i = 0; i > 100; i++) { ; }
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					signed char i;

					for (i = 0; i < 100; i++) { ; }
				]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_294.htm</helpURL>
		</DefectDef>
		<DefectDef guid="965b6e54-52b8-42ec-a2b9-3e5f56bbb98c" id="295" name="INFINITE_LOOP">
			<description>
				<format>
					Ill-defined for-loop
				</format>
			</description>
			<additionalInfo>
				<format>
					unsigned values are always &gt;= 0
				</format>
			</additionalInfo>
			<consequence>
				<format>
					Loops infinitely
				</format>
			</consequence>
			<doc>
				<p>
					This warning indicates that PRE<i>f</i>ast has detected
					a for-loop that may not function as intended.
				</p>
				<p>
					The for loop tests an unsigned value against zero (0) with
					<code>&gt;=</code>.  The result is always <code>true</code>
					so the loop is infinite.
				</p>
			</doc>
			<example funcBody="void Bounds_295()">
				<defectiveSrc><![CDATA[
					unsigned char i;

					for (i = 100; i >= 0; i--) { ; }
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					unsigned char i;

					for (i = 100; i > 0; i--) { ; }
				]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_295.htm</helpURL>
		</DefectDef>
		<DefectDef guid="b1c6d59e-ff91-4f62-a0ff-433f47cb8059" id="296" name="LOOP_ONLY_EXECUTED_ONCE">
			<description>
				<format>
					Ill-defined for-loop
				</format>
			</description>
			<consequence>
				<format>
					Body only executed once
				</format>
			</consequence>
			<doc>
				<p>
					This warning indicates that PRE<i>f</i>ast has detected
					a for-loop that may not function as intended.
				</p>
				<p>
					When the index is unsigned and a loop counts down from
					from zero, it's body is executed only once.
				</p>
			</doc>
			<example funcBody="void Bounds_296()">
				<defectiveSrc><![CDATA[
					unsigned char			i;

					for (i = 0; i < 100; i--) { ; }
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					unsigned char			i;

					for (i = 0; i < 100; i++) { ; }
				]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_296.htm</helpURL>
		</DefectDef>
		<DefectDef guid="3496220c-7d5d-48ac-8de2-adea987ec41b" id="311" name="USE_OTHER_FUNCTION">
			<description>
				<format>Consider using %function% instead of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests a preferred function calls that
				that may be semantically equivalent to the existing function call.</P>
			</doc>
			<example funcBody="void example_func(char *input)" sysIncludes="windows.h">
				<defectiveSrc><![CDATA[
					char buff[MAX_PATH];

					OemToChar(buff, input);  // if strlen(input) > MAX_PATH,
											 // leads to buffer overrun
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					char buff[MAX_PATH];

					OemToCharBuff(buff, input, MAX_PATH);
				]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_311.htm</helpURL>
		</DefectDef>
		<DefectDef guid="28fb4185-ad95-48f9-907c-528737f3129b" id="350" name="CODE_REVIEW_GROUP_350">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_350.htm</helpURL>
		</DefectDef>
		<DefectDef guid="6840bdd2-0994-4153-8894-4e42ec7e8382" id="351" name="CODE_REVIEW_GROUP_351">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_351.htm</helpURL>
		</DefectDef>
		<DefectDef guid="cf8c2ee8-e426-4e94-ab37-623dd3a34527" id="352" name="CODE_REVIEW_GROUP_352">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_352.htm</helpURL>
		</DefectDef>
		<DefectDef guid="d357e14d-33f0-4f0f-a724-963913d8c95b" id="353" name="CODE_REVIEW_GROUP_353">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_353.htm</helpURL>
		</DefectDef>
		<DefectDef guid="64ccabdd-cde9-414d-a1dd-cbf102f512c8" id="354" name="CODE_REVIEW_GROUP_354">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_354.htm</helpURL>
		</DefectDef>
		<DefectDef guid="7f103937-3dd4-46db-a8d2-4fc681935ace" id="355" name="CODE_REVIEW_GROUP_355">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_355.htm</helpURL>
		</DefectDef>
		<DefectDef guid="e5c77e12-fe29-4091-b6e5-f495c48d8744" id="356" name="CODE_REVIEW_GROUP_356">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_356.htm</helpURL>
		</DefectDef>
		<DefectDef guid="3cfd1f28-3642-4582-bf73-4127ef102470" id="357" name="CODE_REVIEW_GROUP_357">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_357.htm</helpURL>
		</DefectDef>
		<DefectDef guid="2b1bd347-9390-4d5e-bf24-07a49ff78fd8" id="358" name="CODE_REVIEW_GROUP_358">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_358.htm</helpURL>
		</DefectDef>
		<DefectDef guid="2af434c6-7c13-4043-9822-2e33e95ecff4" id="359" name="CODE_REVIEW_GROUP_359">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_359.htm</helpURL>
		</DefectDef>
		<DefectDef guid="75f924d5-e809-4100-af8b-18df6e2fc138" id="360" name="CODE_REVIEW_GROUP_360">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_360.htm</helpURL>
		</DefectDef>
		<DefectDef guid="1d94190f-2bfb-4923-87a6-59b9b64d2afc" id="361" name="CODE_REVIEW_GROUP_361">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_361.htm</helpURL>
		</DefectDef>
		<DefectDef guid="590f2fa8-4ccf-431f-9712-4e638ae0766f" id="362" name="CODE_REVIEW_GROUP_362">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_362.htm</helpURL>
		</DefectDef>
		<DefectDef guid="b37c6614-eabf-4666-a2ce-082473e827a5" id="363" name="CODE_REVIEW_GROUP_363">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_363.htm</helpURL>
		</DefectDef>
		<DefectDef guid="209c8674-feaf-466c-aea1-a7da462b2d5d" id="364" name="CODE_REVIEW_GROUP_364">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_364.htm</helpURL>
		</DefectDef>
		<DefectDef guid="3dde123c-36a8-4f2f-9803-f7dd2c9a3a79" id="365" name="CODE_REVIEW_GROUP_365">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_365.htm</helpURL>
		</DefectDef>
		<DefectDef guid="9ff7a6df-5413-41ea-bb5a-695c3c1ca432" id="366" name="CODE_REVIEW_GROUP_366">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_366.htm</helpURL>
		</DefectDef>
		<DefectDef guid="fd1afd6b-390c-4778-b4af-3331b054f2dc" id="367" name="CODE_REVIEW_GROUP_367">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_367.htm</helpURL>
		</DefectDef>
		<DefectDef guid="239bf0d3-55bb-4d0c-ac1e-fb0521da71e7" id="368" name="CODE_REVIEW_GROUP_368">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_368.htm</helpURL>
		</DefectDef>
		<DefectDef guid="995e4e99-a283-4df0-81ff-dc1fe41a2476" id="369" name="CODE_REVIEW_GROUP_369">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_369.htm</helpURL>
		</DefectDef>
		<DefectDef guid="5803b5ef-0046-442a-846a-f3277f4efaf1" id="370" name="CODE_REVIEW_GROUP_370">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_370.htm</helpURL>
		</DefectDef>
		<DefectDef guid="92f46ae5-3179-4dc2-aa59-5b938ffdd096" id="371" name="CODE_REVIEW_GROUP_371">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_371.htm</helpURL>
		</DefectDef>
		<DefectDef guid="21dd8337-2424-407d-8c60-9d13a3774848" id="372" name="CODE_REVIEW_GROUP_372">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_372.htm</helpURL>
		</DefectDef>
		<DefectDef guid="585ccfe6-1c00-4475-ab8f-17ac4244b898" id="373" name="CODE_REVIEW_GROUP_373">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_373.htm</helpURL>
		</DefectDef>
		<DefectDef guid="bc515cab-e364-4903-9045-31e3cc0f84fb" id="374" name="CODE_REVIEW_GROUP_374">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_374.htm</helpURL>
		</DefectDef>
		<DefectDef guid="48329164-5443-4ab3-acee-5b8fc8566c94" id="375" name="CODE_REVIEW_GROUP_375">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_375.htm</helpURL>
		</DefectDef>
		<DefectDef guid="987d589f-7dfb-4408-96a0-e55e0d9adb1e" id="376" name="CODE_REVIEW_GROUP_376">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_376.htm</helpURL>
		</DefectDef>
		<DefectDef guid="4584cca2-7b80-4fe5-86cd-e8bf8c1ace2c" id="377" name="CODE_REVIEW_GROUP_377">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_377.htm</helpURL>
		</DefectDef>
		<DefectDef guid="ab0c590a-db94-4a2f-8332-c74131d111c2" id="378" name="CODE_REVIEW_GROUP_378">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_378.htm</helpURL>
		</DefectDef>
		<DefectDef guid="9542be9b-305f-4485-a1d8-f95cda3f8267" id="379" name="CODE_REVIEW_GROUP_379">
			<description>
				<format>Consider code reviewing this use of %function%. Reason: %reason%</format>
				<param name="function" format="'%ls'"/>
				<param name="reason" format="%ls"/>
			</description>
			<doc>
				<P>This warning suggests that this use of this function
				should be code reviewed.</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_379.htm</helpURL>
		</DefectDef>
	</DefectDefGroup>
	<DefectDefGroup guid="df27e65d-c120-4d7c-b7a9-946b49790de2" id="210" name="dfa">
		<doc>
			<p>
                PRE<i>f</i>ast detects some PRE<i>f</i>ix-like defects, such
                as use of uninitialized memory, NULL pointer dereferences,
                and resource leaks.
            </p>
		</doc>
		<ownerURL>http://prefast</ownerURL>
		<ownerContact>pftbug</ownerContact>
		<!--  -->
		<DefectDef guid="740d585c-ceb6-489e-9b35-04d493dec617" id="1" name="USING_UNINIT_VAR">
			<description>
				<format>
                    Using uninitialized memory %variable%
                </format>
				<param name="variable" format="'%ls'"/>
			</description>
			<doc>
				<p>
                    The warning indicates that the specified variable has
                    been used without being initialized.
                </p>
				<p>
                    Note that this warning is currently reported on all
                    lines where the uninitialized variable is used.
                </p>
			</doc>
			<example funcBody="void Dfa_1">
				<defectiveSrc><![CDATA[
                    int i;

                    i++;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    int i = 0;

                    i++;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_1.htm</helpURL>
		</DefectDef>
		<!--  -->
		<DefectDef guid="dd8f2ca5-f8d0-4a5e-86db-91c766348104" id="11" name="DEREF_NULL_PTR">
			<description>
				<format>
                    Dereferencing  NULL pointer %pointer%
                </format>
				<param name="pointer" format="'%ls'"/>
			</description>
			<doc>
				<p>
                    This warning indicates that the specified pointer is
                    being dereferenced, but may be a NULL pointer.
                </p>
			</doc>
			<example funcBody="void Dfa_11" sysIncludes="stdlib.h">
				<defectiveSrc><![CDATA[
                    char    *p = (char *)malloc(10);

                    *p = '\0';
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char    *p = (char *)malloc(10);

                    if (p) {
                        *p = '\0';
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_11.htm</helpURL>
		</DefectDef>
		<!--  -->
		<DefectDef guid="a614ced5-b0e7-4aec-b256-79bbc0b19c5f" id="14" name="MEMORY_LEAK">
			<description>
				<format>
                    Leaking memory %pointer%
                </format>
				<param name="pointer" format="'%ls'"/>
			</description>
			<doc>
				<p>
                    This warning indicates that the specified pointer points
                    to allocated memory or some other allocated resource
                    that has not been freed.
                </p>
				<p>
                    This warning is reported for both memory and resource
                    leaks.
                </p>
			</doc>
			<example funcBody="void Dfa_14" sysIncludes="stdlib.h">
				<defectiveSrc><![CDATA[
                    char *p = (char *)malloc(10);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char *p = (char *)malloc(10);

                    free(p);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_14.htm</helpURL>
		</DefectDef>
		<!--  -->
		<DefectDef guid="414f4332-9e21-4f09-b7c0-7ff0d883a17d" id="211" name="MEMORY_LEAK_EXCEPTION">
			<description>
				<format>
                    Leaking memory %pointer% due to an exception
                </format>
				<param name="pointer" format="'%ls'"/>
			</description>
			<question>
				<format>
                    Is a local catch block needed to clean up memory
                </format>
			</question>
			<doc>
				<p>
                    This warning indicates that allocated memory is not
                    being freed when an exception is thrown.  The statement
                    at the end of the path could potentially throw an
                    exception.
                </p>
			</doc>
			<example funcBody="void Dfa_211" sysIncludes="new">
				<defectiveSrc><![CDATA[
                    char *p1 = new char[10];
                    char *p2 = new char[10];

                    delete[] p2;
                    delete[] p1;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char *p1 = new char[10];
                    char *p2;

                    try {
                        p2 = new char[10];
                    } catch (std::bad_alloc *e) {
                        // just handle the throw.
                        ;
                    }

                    delete[] p2;
                    delete[] p1;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_211.htm</helpURL>
		</DefectDef>
		<!--  -->
		<DefectDef guid="025d34f2-fd00-45f4-8304-6817cd7a9219" id="305" name="SIZEOF_COUNTOF_MISMATCH">
			<description>
				<format>
                    Potential mismatch between sizeof and countof quantities
                </format>
			</description>
			<doc>
				<p>
                    This warning indicates that a variable holding a sizeof
					result is being added to or subtracted from a countof
					expression. This will cause unexpected scaling in pointer
					arithmetic.
                </p>
			</doc>
			<example funcBody="void Dfa_305(void *some_array)">
				<defectiveSrc><![CDATA[
                    struct S {int a; int b;} *p = (struct S *)some_array;
					int cb = sizeof(struct S);
					p += cb;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    struct S {int a; int b;} *p = (struct S *)some_array;
					p += 1;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_305.htm</helpURL>
		</DefectDef>
		<!--  -->
		<DefectDef guid="92f4c57d-5784-4c0d-9cd1-56fa48f57953" id="59" name="BAD_CONCATENATION">
			<description>
				<format>Misuse of length parameter in call to %function%</format>
				<param name="function" format="'%ls'"/>
			</description>
			<recommendedFix>
				<format>Pass the number of remaining characters, not the buffer size of %variable%</format>
				<param name="variable" format="'%ls'"/>
			</recommendedFix>
			<doc>
				<P>This warning indicates that PRE<i>f</i>ast has detected a
				call to a string concatenation function that is probably
				passing an incorrect value for the number of characters to
				concatenate. Although it may seem counterintuitive,
				functions such as <code>strncat</code> and
				<code>wcsncat</code> take the maximum number of parameters
				to concatenate - not the size of the buffer.</P>
				<P>This defect may result in an exploitable buffer overrun or crash.</P>
				<P>A common cause of this defect is passing the buffer size, rather than
				the remaining number of characters in the buffer, to the string
				manipulation function.</P>
			</doc>
			<example sysIncludes="string.h" funcBody="void bad_concatenation(char *arg1, char *arg2)">
				<defectiveSrc><![CDATA[
					char arr[10];

					arr[9] = 0;
					strncpy(arr, arg1, 9);
					strncat(arr, arg2, 10); /* wrong: this says to copy 10 chars */
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					char arr[10];

					arr[9] = 0;
					strncpy(arr, arg1, 9);
					strncat(arr, arg2, 9 - strlen(arr));
				]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_59.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="635c304a-3e2c-4119-823f-8ff89195f979" id="53" name="MISSING_ZERO_TERMINATION">
			<description>
				<format>Call to %function% may not zero-terminate string %variable%</format>
				<param name="function" format="'%ls'"/>
				<param name="variable" format="'%ls'"/>
			</description>
			<doc>
				<P>This warning indicates that a function such as strncpy has been called
				in such a way that the resulting string may not be zero-terminated. This
				defect may result in an exploitable buffer overrun or crash.</P>
				<P>Most C standard library and Win32 string handling
				functions require and produce zero-terminated strings. A few
				'counted string' functions (including <code>strncpy</code>,
				<code>_wcsncpy</code>, <code>_mbsncpy</code>,
				<code>strncat</code>, <code>_wcsncat</code>,
				<code>_mbsncat</code>, <code>mbstowcs</code>, and
				<code>wcstombs</code>) do not produce zero-terminated
				strings if they exactly fill their buffer. In this case, a
				subsequent call to a string function that expects to see a
				zero-termination will run off the end of the buffer looking
				for the zero.</P>
				<P>The program should make sure that the string ends with a zero. In
				general, one useful approach is to pass a length to the 'counted string'
				function one smaller than the size of the buffer and then explicitly
				assign zero to the last character in the buffer.</P>
				<P>You should note that there is a known problem that
				sometimes causes PRE<i>f</i>ast to report this warning on
				certain idioms guaranteed to be safe in practice. Because of
				the frequency and potential consequences of this defect, we
				biased PRE<i>f</i>ast in favor of finding potential issues
				rather than its normal bias of reducing noise.</P>
			</doc>
			<example funcBody="int example_func(char *input)" sysIncludes="stdlib.h;string.h">
				<defectiveSrc><![CDATA[
					char buff[_MAX_PATH];

					strncpy(buff, input, _MAX_PATH);  // if strlen(input) > _MAX_PATH,
													 // buff will not be zero-terminated

					return strlen(buff);  // possible crash here
				]]></defectiveSrc>
				<correctedSrc><![CDATA[
					char buff[_MAX_PATH];

					strncpy(buff, input, _MAX_PATH - 1);
					buff[_MAX_PATH - 1] = 0;

					return strlen(buff);  // safe: guaranteed to be zero-terminated
				]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_53.htm</helpURL>
		</DefectDef>
		<!-- not currently reported
        <DefectDef guid="ae218d69-1895-4cb4-8fae-2c979ac04af1"
            id="212"
            name="UPWARD_GOTO">
            <format>upward goto target '%s'</format>
            <display>upward goto target</display>
        </DefectDef>
-->
		<!-- These should belong to Driver or Defect itself, but they're not getting pulled
             from there into defectdefs.xml properly.
         -->
		<DefectDef guid="5e8caaa1-0662-4d54-99fd-6757430f70bf" id="98101" name="FileSuccess">
			<description>
				<format>
                    File Processed Successfully
                </format>
			</description>
			<doc>
				<P>
					This message indicates that PREfast successfully
					processed the indicated file. 
				</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_98101.htm</helpURL>
		</DefectDef>
		<DefectDef guid="4075ea69-b850-4757-b9d5-28baecd35461" id="98102" name="FileFailure">
			<description>
				<format>
                    Error Processing File
                </format>
			</description>
			<doc>
				<P>
					This message indicates that PREfast did not successfully
					process the indicated file.
				</P>
			</doc>
			<helpURL>http://prefast/userguide/warning_98102.htm</helpURL>
		</DefectDef>
	</DefectDefGroup>
	<DefectDefGroup guid="05aca904-daee-4014-a0f8-c24e2570d775" id="213" name="Hresult">
		<doc>
			<p>
				<code>HRESULT</code> is a return status used by COM
                functions to signal success or failure.  There are strict
                guidelines for how <code>HRESULT</code> should be used;
                however, these are frequently overlooked or ignored.
            </p>
			<p>
                PRE<i>f</i>ast detects situations where <code>HRESULT</code>
                has either been used incorrectly, or has been used in a
                manner that may cause undesirable results.
            </p>
		</doc>
		<ownerURL>http://prefast</ownerURL>
		<ownerContact>pftbug</ownerContact>
		<!-- -->
		<DefectDef guid="610c0db8-00e5-477c-991f-a49bab43252d" id="214" name="CAST_HRESULT_TO_BOOL">
			<description>
				<format>
                    Cast between semantically different integer types
                </format>
			</description>
			<additionalInfo>
				<format>
                    HRESULT to Boolean
                </format>
			</additionalInfo>
			<doc>
				<p>
					<b>Note</b>:  for the purpose of this warning, the
                    <code>SCODE</code> type is equivalent to
                    <code>HRESULT</code>.
                </p>
				<p>
                    This warning indicates that an <code>HRESULT</code> is
                    being explicitly cast to a Boolean type.  This is likely
                    to give undesirable results.  For example, the typical
                    success value for <code>HRESULT</code>,
                    <code>S_OK</code>, is <code>false</code> when tested as
                    a Boolean.
                </p>
				<p>
                    In most cases, the <code>SUCCEEDED</code> or
                    <code>FAILED</code> macro should be used to test the
                    value of an <code>HRESULT</code>.
                </p>
				<p>
                    In some cases, the program may be attempting to reuse a
                    Boolean local variable to store <code>HRESULT</code>s as
                    well.  This practice is often error-prone; it is much
                    safer (and likely more efficient) to use a separate
                    <code>HRESULT</code> variable.
                </p>
			</doc>
			<example funcBody="BOOL Hresult_214" sysIncludes="objbase.h">
				<defectiveSrc><![CDATA[
                    HRESULT hr;
                    LPMALLOC pMalloc;

                    hr = CoGetMalloc(1, &pMalloc);

                    if (FAILED(hr)) {
                        return ((BOOL)hr);
                    }

                    /* ... */

                    return hr;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    HRESULT hr;
                    LPMALLOC pMalloc;

                    hr = CoGetMalloc(1, &pMalloc);

                    if (FAILED(hr)) {
                        return FALSE;
                    }

                    /* ... */

                    return TRUE;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_214.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="4434aa13-5995-447e-9a89-469602d5ff01" id="215" name="CAST_BOOL_TO_HRESULT">
			<description>
				<format>
                    Cast between semantically different integer types
                </format>
			</description>
			<additionalInfo>
				<format>
                    Boolean to HRESULT
                </format>
			</additionalInfo>
			<doc>
				<p>
					<b>Note</b>:  for the purpose of this warning, the
                    <code>SCODE</code> type is equivalent to
                    <code>HRESULT</code>.
                </p>
				<p>
                    This warning indicates that a Boolean is being cast to
                    an <code>HRESULT</code>.  This is likely to give
                    undesirable results.  For example, the typical failure
                    value for functions that return a Boolean
                    (<code>false</code>) is a success status when tested as
                    an <code>HRESULT</code>.

                </p>
				<p>
                    This error frequently occurs when a Boolean is used as
                    an argument to the <code>SUCCEEDED</code> or
                    <code>FAILED</code> macros, which explicitly cast their
                    argument to an <code>HRESULT</code>.  In general, the
                    <code>SUCCEEDED</code> and <code>FAILED</code> macros
                    should only be applied to <code>HRESULT</code>s.
                </p>
			</doc>
			<example funcBody="int Hresult_215" sysIncludes="windows.h" globalDecls="extern BOOL SomeFunction(void)">
				<defectiveSrc><![CDATA[
                    if (SUCCEEDED(SomeFunction())) {
                        return 0;
                    } else {
                        return -1;
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if (SomeFunction() == TRUE) {
                        return 0;
                    } else {
                        return -1;
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_215.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="abc1514b-c8a4-49e4-b3f8-b8a162bac668" id="216" name="COMPILER_INSERTED_CAST_BOOL_TO_HRESULT">
			<description>
				<format>
                    Compiler-inserted cast between semantically different integer types
                </format>
			</description>
			<additionalInfo>
				<format>
                    Boolean to HRESULT
                </format>
			</additionalInfo>
			<doc>
				<p>
					<b>Note</b>:  for the purpose of this warning, the
                    <code>SCODE</code> type is equivalent to
                    <code>HRESULT</code>.
                </p>
				<p>
                    This warning indicates that a Boolean is being used as
                    an <code>HRESULT</code> without being explicitly cast.
                    This is likely to give undesirable results.  For
                    instance, the typical failure value for functions that
                    return a Boolean (<code>false</code>) is a success
                    status when tested as an <code>HRESULT</code>.
                </p>
			</doc>
			<example funcBody="HRESULT Hresult_216" sysIncludes="windows.h" globalDecls="extern bool SomeFunction(void)">
				<defectiveSrc><![CDATA[
                    return SomeFunction();
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if (SomeFunction() == true) {
                        return S_OK;
                    } else {
                        return E_FAIL;
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_216.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="f05e16d0-5fb9-4122-9006-e1c9d2a64852" id="217" name="TESTING_HRESULT_WITH_NOT">
			<description>
				<format>
                    Implicit cast between semantically different integer
                    types
                </format>
			</description>
			<additionalInfo>
				<format>
                    testing HRESULT with 'not'
                </format>
			</additionalInfo>
			<recommendedFix>
				<format>
                    Consider using SUCCEEDED or FAILED macro instead
                </format>
			</recommendedFix>
			<doc>
				<p>
					<b>Note</b>:  for the purpose of this warning, the
                    <code>SCODE</code> type is equivalent to
                    <code>HRESULT</code>.
                </p>
				<p>
                    This warning indicates that an <code>HRESULT</code> is
                    being tested with the C not (<code>!</code>) operator.
                    This is almost certain to give undesirable results.  The
                    typical success value for <code>HRESULT</code>
                    (<code>S_OK</code>) is <code>FALSE</code> when tested as
                    a Boolean.
                </p>
				<p>
                    If the actual intent is to see whether the
                    <code>HRESULT</code> indicates success, use the
                    <code>SUCCEEDED</code> macro instead.  If the actual
                    intent is to check specifically for the <code>S_OK</code>
					<code>HRESULT</code> (i.e., ignoring other possible
                    success values), then an explicit comparison to
                    <code>S_OK</code> should be used.
                </p>
			</doc>
			<example funcBody="int Hresult_217" sysIncludes="windows.h" globalDecls="extern HRESULT SomeFunction(void)">
				<defectiveSrc><![CDATA[
                    HRESULT hr;

                    hr = SomeFunction();

                    if (!hr) {
                        return 1;
                    } else {
                        return -1;
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    HRESULT hr;

                    hr = SomeFunction();

                    if (hr == S_OK) {
                        return 1;
                    } else {
                        return -1;
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_217.htm</helpURL>
		</DefectDef>
		<!-- -->
		<!-- Not in 1.0

        <DefectDef guid="7ddba7e6-aae2-421b-932a-70eb8cac4d48"
            id="218"
            name="COMPARING_HRESULT_TO_ZERO">
            <format>Comparing HRESULT to 0 or FALSE; use SUCCEEDED or FAILED macro instead</format>
        </DefectDef>
-->
		<!-- -->
		<DefectDef guid="5b71ee07-255d-4540-a087-1f2094e2f633" id="219" name="COMPARING_HRESULT_TO_ONE">
			<description>
				<format>
                    Implicit cast between semantically different integer
                    types
                </format>
			</description>
			<additionalInfo>
				<format>
                    comparing HRESULT to 1 or TRUE
                </format>
			</additionalInfo>
			<recommendedFix>
				<format>
                    Consider using SUCCEEDED or FAILED macro instead
                </format>
			</recommendedFix>
			<doc>
				<p>
					<b>Note</b>:  for the purpose of this warning, the
                    <code>SCODE</code> type is equivalent to
                    <code>HRESULT</code>.
                </p>
				<p>
                    This warning indicates that an <code>HRESULT</code> is
                    being compared against an explicit,
                    non-<code>HRESULT</code> value of one (1).  This is
                    likely to give undesirable results.  The typical success
                    value for <code>HRESULT</code> (<code>S_OK</code>) is
                    not equal to <code>TRUE</code>.
                </p>
				<p>
                    In most cases, this warning is caused by the code
                    mistakenly treating an <code>HRESULT</code> as a
                    Boolean.  It is best to use the <code>SUCCEEDED</code>
                    or <code>FAILED</code> macros to test the value of an
                    <code>HRESULT</code>.
                </p>
			</doc>
			<example funcBody="HRESULT Hresult_219" sysIncludes="windows.h" globalDecls="extern HRESULT SomeFunction(void)">
				<defectiveSrc><![CDATA[
                    if (SomeFunction() == TRUE) {
                        return S_OK;
                    }

                    return E_FAIL;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if (SUCCEEDED(SomeFunction())) {
                        return S_OK;
                    }

                    return E_FAIL;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_219.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="d76eec24-9580-4bf0-8e8c-e34d777de8a0" id="220" name="COMPARING_HRESULT_TO_MINUS_ONE">
			<description>
				<format>
                    Implicit cast between semantically different integer
                    types
                </format>
			</description>
			<additionalInfo>
				<format>
                    comparing HRESULT to -1
                </format>
			</additionalInfo>
			<recommendedFix>
				<format>
                    Consider using SUCCEEDED or FAILED macro instead
                </format>
			</recommendedFix>
			<doc>
				<p>
					<b>Note</b>:  for the purpose of this warning, the
                    <code>SCODE</code> type is equivalent to
                    <code>HRESULT</code>.
                </p>
				<p>
                    This warning indicates that an <code>HRESULT</code> is
                    being compared against an explicit,
                    non-<code>HRESULT</code> value of -1, which is not a
                    well-formed <code>HRESULT</code>.
                </p>
				<p>
                    It is best to use the <code>SUCCEEDED</code> or
                    <code>FAILED</code> macro to test the value of an
                    <code>HRESULT</code>. 
                </p>
				<p>
                    In most cases, this warning is caused by the code
                    mistakenly expecting that a function that actually
                    returns an <code>HRESULT</code> instead returns an integer
                    (using -1 as a failure value).  If the actual intent to
                    check specifically for the <code>E_FAIL HRESULT</code>
                    (i.e., ignoring other possible failure values), then an
                    explicit comparison to <code>E_FAIL</code> is appropriate.
                    Otherwise, use the <code>SUCCEEDED</code> or
                    <code>FAILED</code> macros.
                </p>
			</doc>
			<example funcBody="HRESULT Hresult_220" sysIncludes="windows.h" globalDecls="extern HRESULT SomeFunction(void)">
				<defectiveSrc><![CDATA[
                    if (SomeFunction() == -1) {
                        return E_FAIL;
                    }

                    return S_OK;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if (FAILED(SomeFunction())) {
                        return E_FAIL;
                    }

                    return S_OK;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_220.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="907b03b7-a3de-47d4-b3b7-95fae397da64" id="221" name="COMPARING_HRESULT_TO_INT">
			<description>
				<format>
                    Implicit cast between semantically different integer
                    types
                </format>
			</description>
			<additionalInfo>
				<format>
                    comparing HRESULT to an integer
                </format>
			</additionalInfo>
			<recommendedFix>
				<format>
                    Consider using SUCCEEDED or FAILED macros instead
                </format>
			</recommendedFix>
			<doc>
				<p>
					<b>Note</b>:  for the purpose of this warning, the
                    <code>SCODE</code> type is equivalent to
                    <code>HRESULT</code>.
                </p>
				<p>
                    This warning indicates that an <code>HRESULT</code> is
                    being compared against an integer.  This may reflect
                    some confusion about <code>HRESULT</code> behavior.
                </p>
				<p>
                    This warning is often caused by the code mistakenly
                    expecting that a function returns an integer when it
                    actually returns an <code>HRESULT</code>.
                </p>
				<p>
                    It is also worth noting that some values that are
                    intended to function as <code>HRESULT</code>s are not
                    actually typed that way.
                </p>
			</doc>
			<example funcBody="HRESULT Hresult_221" sysIncludes="windows.h" globalDecls="extern HRESULT SomeFunction(void)">
				<defectiveSrc><![CDATA[
                    if (SomeFunction() == 4) {
                        return S_FALSE;
                    }

                    return S_OK;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if (SUCCEEDED(SomeFunction())) {
                        return S_FALSE;
                    }

                    return S_OK;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_221.htm</helpURL>
		</DefectDef>
		<!-- -->
		<!-- Not in 1.0
        <DefectDef guid="9e27983c-24ca-4170-935c-fcd0441dc98e"
            id="222"
            name="COMPARING_HRESULT_TO_S_OK">
            <format>Comparing HRESULT to S_OK; use SUCCEEDED or FAILED macros instead</format>
        </DefectDef>
-->
		<!-- -->
		<!-- Not in 1.0
        <DefectDef guid="d8f896ad-4bd7-44b1-ae66-addcebc35671"
            id="223"
            name="COMPARING_HRESULT_TO_E_FAIL">
            <format>Comparing HRESULT to E_FAIL; use SUCCEEDED or FAILED macros instead</format>
        </DefectDef>
-->
		<!-- -->
		<!-- Not in 1.0
        <DefectDef guid="906bad58-7278-41c5-8d8c-77e7ac257325"
            id="224"
            name="ASSIGNING_ZERO_TO_HRESULT">
            <format>Assigning 0 or FALSE to HRESULT; use S_OK instead</format>
        </DefectDef>
-->
		<!-- -->
		<DefectDef guid="dbc662b8-1d37-4afb-8c46-78a6e5b93ac0" id="225" name="ASSIGNING_ONE_TO_HRESULT">
			<description>
				<format>
                    Implicit cast between semantically different integer
                    types
                </format>
			</description>
			<additionalInfo>
				<format>
                    assigning 1 or TRUE to HRESULT
                </format>
			</additionalInfo>
			<recommendedFix>
				<format>
                    Consider using S_FALSE instead
                </format>
			</recommendedFix>
			<doc>
				<p>
					<b>Note</b>:  for the purpose of this warning, the
                    <code>SCODE</code> type is equivalent to
                    <code>HRESULT</code>.
                </p>
				<p>
                    This warning indicates that an <code>HRESULT</code> is
                    being assigned or initialized with a value of an
                    explicit, non-<code>HRESULT</code> 1.  This warning is
                    often caused by accidental confusion of Boolean and
                    <code>HRESULT</code> types.
                </p>
				<p>
                    To indicate success, the symbolic constant
                    <code>S_OK</code> should be used.
                </p>
				<p>
                    To indicate failure, some E_constant should be used.
                </p>
			</doc>
			<example funcBody="HRESULT Hresult_225" sysIncludes="windows.h">
				<defectiveSrc><![CDATA[
                    HRESULT hr = TRUE;

                    return hr;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    HRESULT hr = S_OK;

                    return hr;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_225.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="e3ad0378-2ca6-433a-8efe-90c156ba137c" id="226" name="ASSIGNING_MINUS_ONE_TO_HRESULT">
			<description>
				<format>
                    Implicit cast between semantically different integer
                    types
                </format>
			</description>
			<additionalInfo>
				<format>
                    assigning -1 to HRESULT
                </format>
			</additionalInfo>
			<recommendedFix>
				<format>
                    Consider using E_FAIL instead
                </format>
			</recommendedFix>
			<doc>
				<p>
					<b>Note</b>:  for the purpose of this warning, the
                    <code>SCODE</code> type is equivalent to
                    <code>HRESULT</code>.
                </p>
				<p>
                    This warning indicates that an <code>HRESULT</code> is
                    being assigned or initialized with a value of an
                    explicit, non-<code>HRESULT</code> -1; this is not a
                    well-defined <code>HRESULT</code>.  This warning is
                    often caused by accidental confusion of integers and
                    <code>HRESULT</code>s.
                </p>
				<p>
                    To assign success, the symbolic constant
                    <code>S_OK</code> should be used.
                </p>
				<p>
                    To assign failure, some E_constant should be used.
                </p>
			</doc>
			<example funcBody="HRESULT Hresult_226" sysIncludes="windows.h">
				<defectiveSrc><![CDATA[
                    HRESULT hr = -1;

                    return hr;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    HRESULT hr = E_FAIL;

                    return hr;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_226.htm</helpURL>
		</DefectDef>
		<!-- -->
		<!-- Not in 1.0
        <DefectDef guid="2105b696-0889-479a-aa99-0c67ccc30cb3"
            id="227"
            name="ASSIGNING_INT_TO_HRESULT">
            <format>Assigning int to HRESULT; may be confusion of status types</format>
        </DefectDef>
-->
		<!-- -->
		<!-- Not in 1.0
        <DefectDef guid="c9fc298e-07c0-4260-a08d-dec8da481086"
            id="228"
            name="RETURNING_HRESULT_AS_INT">
            <format>Returning HRESULT as an integer; may be confusion of status types</format>
        </DefectDef>
-->
		<!-- -->
		<!-- Not in 1.0
        <DefectDef guid="202f81b0-58d7-4e13-bc67-e26db73d6534"
            id="229"
            name="RETURNING_INT_AS_HRESULT">
            <format>Returning integer as an HRESULT; may be confusion of status types</format>
        </DefectDef>
-->
		<!-- -->
		<DefectDef guid="66885b89-ddf7-4878-b75d-6df1e8433600" id="230" name="USING_HRESULT_IN_BOOLEAN_CONTEXT">
			<description>
				<format>
                    Implicit cast between semantically different integer
                    types
                </format>
			</description>
			<additionalInfo>
				<format>
                    using HRESULT in a Boolean context
                </format>
			</additionalInfo>
			<doc>
				<p>
					<b>Note</b>:  for the purpose of this warning, the
                    <code>SCODE</code> type is equivalent to
                    <code>HRESULT</code>.
                </p>
				<p>
                    This warning indicates that a bare <code>HRESULT</code>
                    is being used in a context (such as the test of an if
                    statement) where a Boolean result is expected.  This is
                    likely to give undesired results.  For instance, the
                    typical success value for <code>HRESULT</code>
                    (<code>S_OK</code>) is <code>FALSE</code> when tested as
                    a Boolean. 
                </p>
				<p>
                    In most situations, the <code>SUCCEEDED</code> or
                    <code>FAILED</code> macro should be used to test the
                    value of <code>HRESULT</code>.
                </p>
			</doc>
			<example funcBody="bool Hresult_230" sysIncludes="windows.h" globalDecls="extern HRESULT GetResult(void)">
				<defectiveSrc><![CDATA[
                    HRESULT hr;

                    hr = GetResult();

                    if (hr) {
                        return false;
                    } else {
                        return true;
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    HRESULT hr;

                    hr = GetResult();

                    if (FAILED(hr)) {
                        return false;
                    } else {
                        return true;
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_230.htm</helpURL>
		</DefectDef>
	</DefectDefGroup>
	<DefectDefGroup guid="148b5a12-434a-43aa-9c06-f4ab5dc91ef1" id="400" name="i18n">
		<doc>
			<p>
                PRE<i>f</i>ast detect several errors related to the process
                of localization.
            </p>
		</doc>
		<ownerURL>http://prefast</ownerURL>
		<ownerContact>pftbug</ownerContact>
		<!--  -->
		<DefectDef guid="f8f63aa8-e00b-4392-b77e-fe0208b14676" id="400" name="LOCALE_DEPENDENT_CONSTANT_STRING_COMPARISON">
			<description>
				<format>
                    Using %function% to perform a case-insensitive compare
                    to constant string %string%
                </format>
				<param name="function" format="'%ls'"/>
				<param name="string" format="'%ls'"/>
			</description>
			<consequence>
				<format>
                    Yields unexpected results in non-English locales
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates that a case-insensitive
                    comparison to a constant string is being performed in a
                    locale-dependent way, when it appears that a
                    locale-independent comparison was intended.
                </p>
				<p>
                    The typical consequence of this defect is incorrect
                    behavior in non-English speaking locales. For example,
                    in Turkish, ".gif" will not match ".GIF"; in Vietnamese,
                    "LogIn" will not match "LOGIN". If not corrected now,
                    these problems will be discovered (and need to be
                    corrected) during localization testing.
                </p>
				<p>
                    String comparisons are performed in two different
                    situations: 
                    <ul>
						<li>
                            In some situations, the comparison should match
                            the user's language preferences; for example,
                            the user speaks French and wants their list of
                            contact names in the default order for French.
                            In this case, a locale-dependent comparison
                            (such as performed by <code>lstrcmpi</code>, or
                            <code>CompareString</code> with the current
                            locale) is appropriate.
                        <li>
							</li>
                            In other situations, the comparison should
                            return the same result regardless of the user's
                            language; for example, does the extension of a
                            file equal ".gif." In this case, a
                            locale-independent comparison is appropriate.
                        </li>
					</ul>
				</p>
				<p>
                    Performing a locale-dependent comparison when a
                    locale-independent comparison was intended is a major
                    source of localization problems for languages such as
                    Turkish.
                </p>
				<p>
                    String comparisons should generally be performed with
                    the <code>CompareString</code> function. To
                    perform a locale-independent comparison on Windows XP,
                    the first parameter should be the constant
                    <code>LOCALE_INVARIANT</code>. For example, to
                    perform a locale-independent test for whether pString
                    matches foo.gif ignoring upper/lower case differences,
                    use a call such as:
                    <pre>
    CompareString(LOCALE_INVARIANT,
                  NORM_IGNORECASE,
                  pString, 
                  -1,
                  TEXT("foo.gif"),
                  -1) == 2</pre>
				</p>
				<p>
                    If code must support down-level operating systems as
                    well, the preferred way of performing a
                    locale-independent test is:  
                    <pre>
    CompareString(MAKELCID(MAKELANGID(LANG_ENGLISH,
                                      SUBLANG_ENGLISH_US),
                           SORT_DEFAULT),
                  ...</pre>
				</p>
				<p>
                    This warning is produced on calls to functions such as 
                    <ul><code>
							<ol>
                            lstrcmpi 
                        </ol>
							<ol>
                            lstrcmpiA 
                        </ol>
							<ol>
                            lstrcmpiW 
                        </ol>
						</code></ul>
				</p>
				<p>
                    Note that this warning is not produced if the constant
                    string is the empty string (<code>TEXT("")</code>) or
                    consists only of digits or punctuation. Even though the
                    behavior will be correct in these cases, it is probably
                    more efficient to use a case-sensitive comparison
                    function.
                </p>
			</doc>
			<example funcBody="int I18n_400(LPCTSTR extension)" sysIncludes="windows.h">
				<defectiveSrc><![CDATA[
                    return (lstrcmpi(extension,
                                     TEXT("gif")) == 0);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    return (CompareString(LOCALE_INVARIANT,
                                          NORM_IGNORECASE, 
                                          extension,
                                          -1,
                                          TEXT("gif"),
                                          -1) == 2);
                ]]></correctedSrc>
				<!-- BUGBUG:  What's the best way to include the correct "downlevel" example ?

    DWORD lcid = MAKELCID(MAKELANGID(LANG_ENGLISH, 
                                     SUBLANG_ENGLISH_US),
                          SORT_DEFAULT); 

    return (CompareString(lcid, 
                          NORM_IGNORECASE,
                          extension, 
                          -1, 
                          TEXT("gif"),
                          -1) == 2);
-->
			</example>
			<helpURL>http://prefast/userguide/warning_400.htm</helpURL>
		</DefectDef>
		<DefectDef guid="6e2b2ffc-0fae-4709-8de4-a848299026ff" id="401" name="DEFAULT_LOCALE_CONSTANT_STRING_COMPARISON">
			<description>
				<format>
                    Using %function% in a default locale to perform
                    a case-insensitive compare to constant string %string%
                </format>
				<param name="function" format="'%ls'"/>
				<param name="string" format="'%ls'"/>
			</description>
			<consequence>
				<format>
                    Yields unexpected results in non-English locales
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates that a case-insensitive
                    comparison to a constant string is being performed when
                    specifying the default locale; usually, a
                    locale-independent comparison was intended.
                </p>
				<p>
                    The typical consequence of this defect is incorrect
                    behavior in non-English speaking locales. For example,
                    in Turkish, ".gif" will not match ".GIF"; in Vietnamese,
                    "LogIn" will not match "LOGIN". If not corrected now,
                    these problems will be discovered (and need to be
                    corrected) during localization testing.
                </p>
				<p>
                    String comparisons are performed in two different
                    situations: 
                    <ul>
						<li>
                            In some situations, the comparison should match
                            the user's language preferences; for example,
                            the user speaks French and wants their list of
                            contact names in the default order for French.
                            In this case, a locale-dependent comparison
                            (such as performed by <code>lstrcmpi</code>, or
                            <code>CompareString</code> with the current
                            locale) is appropriate.
                        </li>
						<li>
                            In other situations, the comparison should
                            return the same result regardless of the user's
                            language; for example, does the extension of a
                            file equal ".gif." In this case, a
                            locale-independent comparison is appropriate. 
                        </li>
					</ul>

                    Performing a locale-dependent comparison when a
                    locale-independent comparison was intended is a major
                    source of localization problems for languages such as
                    Turkish.
                </p>
				<p>
                    The <code>CompareString</code> function takes a
                    locale as an argument; however, passing in a default
                    locale (e.g., the constant
                    <code>LOCALE_USER_DEFAULT</code>, or the value
                    returned from a function such as
                    <code>GetThreadLocale</code>) will
                    give different behaviors in different locales depending
                    on the user's default. Usually, case-insensitive
                    comparisons against a constant string should be
                    performed in a locale-independent comparison.
                </p>
				<p>
                    To perform a locale-independent comparison using
                    <code>CompareString</code> on Windows XP, the
                    first parameter should be the constant
                    <code>LOCALE_INVARIANT</code>; for example, to
                    perform a locale-independent test for whether pString
                    matches foo.gif ignoring upper/lower case differences,
                    use a call such as:

                    <pre>
    CompareString(LOCALE_INVARIANT,
                  NORM_IGNORECASE,
                  pString, 
                  -1, 
                  TEXT("foo.gif"), 
                  -1) == 2</pre>
				</p>
				<p>
                    If code must support down-level operating systems as
                    well, the preferred way of performing a
                    locale-independent test is:

                    <pre>
    CompareString(MAKELCID(MAKELANGID(LANG_ENGLISH,
                                      SUBLANG_ENGLISH_US),
                           SORT_DEFAULT),
                  ...</pre>
				</p>
				<p>
                    Note that this warning is not produced if the constant
                    string is the empty string (<code>TEXT("")</code>) or
                    consists only of digits or punctuation. Even though the
                    behavior will be correct in these cases, it is probably
                    more efficient to use a case-sensitive comparison
                    function.
                </p>
				<p>
                    PRE<i>f</i>ast considers the locale to be the default
                    locale if it arises from any of the following constructs:

                    <ul>
						<b><u>Constants</u></b>:


                            <ol>
                                LOCALE_NEUTRAL    (this is a
                                legacy issue-gives the current user's locale
                                instead of neutral)
                            </ol>
						<ol>
                                LOCALE_USER_DEFAULT
                            </ol>
						<ol>
                                LOCALE_SYSTEM_DEFAULT
                            </ol>
						<ol>
                                LANG_USER_DEFAULT
                            </ol>
						<ol>
                                LANG_SYSTEM_DEFAULT
                            </ol>
					</ul>
					<ul>
						<b><u>Functions</u></b>:
                        <ol>
                            GetThreadLocale()
                        </ol>
						<ol>
                            GetUserDefaultLCID()
                        </ol>
						<ol>
                            GetUserDefaultLangID()
                        </ol>
						<ol>
                            GetUserDefaultUILanguage()
                        </ol>
						<ol>
                            GetSystemDefaultLCID()
                        </ol>
						<ol>
                            GetSystemDefaultLangID()
                        </ol>
						<ol>
                            GetSystemDefaultUILanguage()
                        </ol>
					</ul>
				</p>
			</doc>
			<example funcBody="int I18n_401(LPCTSTR extension)" sysIncludes="windows.h">
				<defectiveSrc><![CDATA[
                    return (CompareString(LOCALE_USER_DEFAULT,
                                          NORM_IGNORECASE,
                                          extension, 
                                         -1, 
                                         TEXT("gif"),
                                         -1) == 2);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    return (CompareString(LOCALE_INVARIANT,
                                          NORM_IGNORECASE,
                                          extension,
                                          -1, 
                                          TEXT("gif"),
                                          -1) == 2);
                ]]></correctedSrc>
				<!-- BUGBUG:  What's the best way to include the correct "downlevel" example ?

     DWORD lcid = MAKELCID(MAKELANGID(LANG_ENGLISH,
                                      SUBLANG_ENGLISH_US),
                           SORT_DEFAULT); 

     return (CompareString(lcid, 
                           NORM_IGNORECASE,
                           extension, 
                           -1, 
                           TEXT("gif"), 
                           -1) == 2);
-->
			</example>
			<helpURL>http://prefast/userguide/warning_401.htm</helpURL>
		</DefectDef>
		<!--  The following are not currently reported.

        <DefectDef guid="B5609246-9250-491b-8C9F-19EED4C17D78"
            id="402"
            name="LOCALE_DEPENDENT_CASE_SENSITIVE_CONSTANT_STRING_COMPARISON">
            <format>Using 'strcmp' to perform a case-sensitive compare to a constant string will give unexpected results in non-English locales</format>
            <display>Using <param>function</param> to perform a case-insensitive compare to a constant string will give unexpected results in non-English locales</display>
        </DefectDef>

        <DefectDef guid="89BA6245-8ACD-4740-96BC-997726FA06C5"
            id="403"
            name="LOCALE_DEPENDENT_CASE_INSENSITIVE_STRING_COMPARISON">
            <format>Using 'lstrcmpi' to perform a case-insensitive compare may give unexpected results in non-English locales</format>
            <display>Using <param>function</param> to perform a case-insensitive compare may give unexpected results in non-English locales</display>
        </DefectDef>

        <DefectDef guid="3DCB210C-7230-4b1c-B0C0-F2B4AF01798A"
            id="404"
            name="DEFAULT_LOCALE_CASE_INSENSITIVE_STRING_COMPARISON">
            <format>Using 'CompareString' in a default locale to perform a case-sensitive compare to constant string will give unexpected results in non-English locales</format>
            <display>Using 'function' in a default locale to perform a case-sensitive compare to constant string will give unexpected results in non-English locales</display>
        </DefectDef>

        <DefectDef guid="F6C2B53D-D385-43c8-8168-375565890BF0"
            id="405"
            name="NON_DEFAULT_LOCALE_CASE_INSENSITIVE_CONSTANT_STRING_COMPARISON">
            <format>Using 'CompareString' in a non-default locale to perform a case-insensitive compare to constant string may give unexpected results in non-English locales</format>
            <display>Using 'function' in a non-default locale to perform a case-insensitive compare to constant string may give unexpected results in non-English locales</display>
        </DefectDef>

        <DefectDef guid="A868E010-4462-4cba-A9AB-713439661AD3"
            id="406"
            name="INEFFICIENT_CASE_INSENSITIVE_COMPARE">
            <format>Using 'lstrcmpi' to perform a case-insensitive compare to a constant string with no letters is inefficient</format>
            <display>Using <param>function</param> to perform a case-insensitive compare to a constant string with no letters is inefficient</display>
        </DefectDef>
-->
	</DefectDefGroup>
	<DefectDefGroup guid="b86a5928-990f-4bf1-a584-2fd05a03aa02" id="231" name="Precedence" symbol="DEFECT_DESCRIPTION__">
		<doc>
			<p>
                PRE<i>f</i>ast detects a variety of errors in precedence.
                The following errors are reported in this category.
            </p>
		</doc>
		<ownerURL>http://prefast</ownerURL>
		<ownerContact>pftbug</ownerContact>
		<!--  -->
		<DefectDef guid="873b0dce-22ed-4ab8-9ad2-1bfe58e09d00" id="99101" name="InternalError">
			<description>
				<format>
                    Internal Error
                </format>
			</description>
			<additionalInfo>
				<format>
                    Precedence: %description% %code%
                </format>
				<param name="description" format="'%ls'" display=""/>
				<param name="code" format="%d" display=""/>
			</additionalInfo>
			<doc type="html">
				<p>
                    This warning indicates that PRE<i>f</i>ast has
                    encountered unexpected behavior in the precedence module.
                </p>
				<p>
                    Please report any occurrences of this warning to the <a href="mailto:pftbug">PRE<i>f</i>ast Bug Reports and Suggestions
                    alias</a>.  Please include the entire warning message in
                    your mail.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%">
				<!-- BUGBUG:  Any way to generate this now ? -->
				<defectiveSrc/>
			</example>
			<!-- BUGBUG:  We don't live in 8.3 land anymore why is this just ".htm" ? -->
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef guid="88451afe-3d92-4131-a612-b6f755f46c10" id="99102" name="InternalException">
			<description>
				<format>
                    Internal Exception
                </format>
			</description>
			<doc type="html">
				<p>
                    This warning indicates that PRE<i>f</i>ast has
                    encountered unexpected behavior in a plugin.
                </p>
				<p>                    
                    Please report any occurrences of this warning to the <a href="mailto:pftbug">PRE<i>f</i>ast Bug Reports and Suggestions
                    alias</a>.  Please include the entire warning message in
                    your mail.
                </p>
			</doc>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef guid="8b86c916-1829-45f7-8e19-8e3b3c719f35" id="99103" name="InternalCOMException">
			<description>
				<format>
                    Internal COM Exception
                </format>
			</description>
			<doc type="html">
				<p>
                    This warning indicates that PRE<i>f</i>ast has
                    encountered unexpected behavior in a plugin.
                </p>
				<p>                    
                    Please report any occurrences of this warning to the <a href="mailto:pftbug">PRE<i>f</i>ast Bug Reports and Suggestions
                    alias</a>.  Please include the entire warning message in
                    your mail.
                </p>
			</doc>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- PossibleConstLogicalOp -->
		<DefectDef guid="80a29b3b-4c41-4a8b-97b6-723734a81c15" id="235" name="NonZeroLogicalOr">
			<description>
				<format>    
                    (%nzc% || %expr%) is always TRUE
                </format>
				<param name="nzc" format="&lt;non-zero constant&gt;" display="&lt;non-zero constant&gt;"/>
				<param name="expr" format="&lt;expression&gt;" display="&lt;expression&gt;"/>
			</description>
			<question>
				<format>
                    Was the bitwise-or operator intended
                </format>
			</question>
			<doc>
				<p>
                    This warning indicates that a constant value greater than
                    one was detected on the left side of a logical-or
                    operation that occurs in a test context.  The resulting
                    expression always evaluates to <code>TRUE</code>.  Any
                    side effect occurring on the right side of the
                    expression is lost.
                </p>
				<p>
                    A constant value greater than one suggests that
                    <code>|</code> or <code>&amp;</code> might have been
                    intended.  Otherwise consider using a constant that
                    evaluates to 1. 
                </p>
			</doc>
			<example funcBody="void Precedence_%id%">
				<defectiveSrc><![CDATA[
                    int n = 15;

                    if (2 || n) {;}
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    int n = 15;

                    /* Explicitly show that side-effects of n are unimportant */

                    if (2 /* || n */) {;}


                    /* Change the constant to 1. */

                    if (1 || n) {;}


                    /* Change the operator to |. */

                    if (2 | n) {;}
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- PossibleConstLogicalOp -->
		<DefectDef guid="60059332-0c26-485e-bd86-dc1d78a731a5" id="236" name="LogicalOrNonZero">
			<description>
				<format>
                    (%expr% || %nzc%) is always TRUE
                </format>
				<param name="expr" format="&lt;expression&gt;" display="&lt;expression&gt;"/>
				<param name="nzc" format="&lt;non-zero constant&gt;" display="&lt;non-zero constant&gt;"/>
			</description>
			<question>
				<format>
                    Was the bitwise-and operator intended
                </format>
			</question>
			<doc>
				<p>
                    This warning indicates that a constant value greater than
                    one detected on the right side of a logical-or operation
                    that occurs in a test context.  The resulting expression
                    always evaluates to <code>TRUE</code>.
                </p>
				<p>
                    A constant value greater than one suggests that
                    <code>|</code> or <code>&amp;</code> might have been
                    intended.  If not, consider using a constant that
                    evaluates to 1.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(int x)">
				<defectiveSrc><![CDATA[
                    if (x || 3) {;}
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if (x & 3) {;}
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- PossibleConstLogicalOp -->
		<DefectDef guid="79f30e2b-59ac-4ca7-80b2-5d8e59f95d85" id="237" name="ZeroLogicalAndLosingSideEffects">
			<description>
				<format>
                    (%zero% &amp;&amp; %expr%) is always FALSE
                </format>
				<param name="zero" format="&lt;zero&gt;" display="&lt;zero&gt;"/>
				<param name="expr" format="&lt;expression&gt;" display="&lt;expression&gt;"/>
			</description>
			<consequence>
				<format>
                    &lt;<i>expression</i>&gt; is never evaluated and may
                    have side effects
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates that a constant value of zero was
                    detected on the left side of a logical-and operation
                    that occurs in a test context.  The resulting expression
                    always evaluates to <code>FALSE</code> and any side
                    effect occurring on the right side of the expression is
                    lost.
                </p>
				<p>
                    You may wish to examine the right side of the expression
                    carefully to ensure that any side effects needed for
                    proper functionality are not lost.
                </p>
				<p>
                    The <code>(0 &amp;&amp; n)</code> construction is
                    commonly used to disable the result of a test.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(int x)">
				<defectiveSrc><![CDATA[
                    if (0 && x++) {;}
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if (0) {
                        if (x++) {;}
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- PossibleConstLogicalOp -->
		<DefectDef guid="430f28c0-2a69-4406-a530-6d653390e4be" id="239" name="NonZeroLogicalAnd">
			<description>
				<format>
                    (%nzc% &amp;&amp; %expr%) always evaluates to the
                    Boolean result of %expr%
                </format>
				<param name="nzc" format="&lt;non-zero constant&gt;" display="&lt;non-zero constant&gt;"/>
				<param name="expr" format="&lt;expression&gt;" display="&lt;expression&gt;"/>
			</description>
			<question>
				<format>
                    Was the bitwise-and operator intended
                </format>
			</question>
			<doc>
				<p>
                    This warning indicates that a constant value greater
                    than one was detected on the left side of a logical-and
                    operation that occurs in a test context.  This
                    expression reduces to a constant value of
                    <code>!!n</code>, which is either 0 or 1.
                </p>
				<p>
                    This warning is typically caused by an attempt to mask
                    bits in which the operator should be <code>&amp;</code>.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(int x)">
				<defectiveSrc><![CDATA[
                    if (3 && x) {;}
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if (3 & x) {;}
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- PossibleConstLogicalOp -->
		<DefectDef guid="e7de9622-2b27-43bb-90ec-5b36be8f94da" id="240" name="LogicalAndNonZero">
			<description>
				<format>
                    (%expr% &amp;&amp; %nzc%) always evaluates to the
                    Boolean result of %expr%
                </format>
				<param name="expr" format="&lt;expression&gt;" display="&lt;expression&gt;"/>
				<param name="nzc" format="&lt;non-zero constant&gt;" display="&lt;non-zero constant&gt;"/>
			</description>
			<question>
				<format>
                    Was the bitwise-and operator intended
                </format>
			</question>
			<doc>
				<p>
                    This warning indicates that a constant value greater
                    than one was detected on the right side of a logical-and
                    operation that occurs in a test context.  This
                    expression reduces to a constant value of
                    <code>!!n</code>, which is 0 or 1.
                </p>
				<p>
                    This warning is typically caused by an attempt to mask
                    bits in which case the operator should be
                    <code>&amp;</code>.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(int x)">
				<defectiveSrc><![CDATA[
                    if (x && 3) {;}
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if (x & 3) {;}
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkTRYFINALLY -->
		<DefectDef guid="24f3d820-be92-4521-bd13-17108b39a0c6" id="241" name="CollidedReturnFromTryFinally">
			<description>
				<format>
                    Value returned from this finally-block overrides the
                    value returned from its corresponding try-block
                </format>
			</description>
			<additionalInfo>
				<format>
                    see previous return at %location%
                </format>
				<param name="location" format="line %d of %hs"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that a return statement occurs in
                    both the protected and handler blocks of a try-finally.
                </p>
				<p>
                    When a value is returned from not the protected and
                    handler blocks of a try-finally, the last value
                    returned, the one from the finally block, wins.
                </p>
			</doc>
			<example funcBody="int Precedence_%id%" sysIncludes="stdlib.h">
				<defectiveSrc><![CDATA[
                    __try {
                        if (rand()) {
                            return 1;
                        }
                    } __finally {
                        if (rand()) {
                            return 2;
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    int RetVal;

                    __try {
                        if (rand()) {
                            RetVal = 1;
                            __leave;
                        }
                    } __finally {
                        if (rand()) {
                            RetVal = 2;
                        }
                    }

                    return RetVal;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- Walk(BREAK,CONTINUE,RETURN) -->
		<DefectDef guid="91ef53c4-b656-423e-ac9d-c95f88b595d8" id="242" name="LocalUnwindForced">
			<description>
				<format>
                    A jump out of this try block forces local unwind
                </format>
			</description>
			<consequence>
				<format>
                    Incurs severe performance penalty
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates that a jump statement causes
                    control-flow to leave the protected block of a
                    try-finally other than by 'fall-through'.
                </p>
				<p>
                    Leaving the protected block of a try-finally other than
                    by falling through from the last statement requires
                    local unwind to occur.  Local unwind typically (on mips,
                    ppc, alpha, and IA64) requires on the order of 1000
                    machine instructions so is detrimental to performance.
                </p>
				<p>
                    Use <code>_leave</code> to exit the protected block of a
                    try-finally.
                </p>
			</doc>
			<example funcBody="int Precedence_%id%" sysIncludes="stdlib.h">
				<defectiveSrc><![CDATA[
                    __try {
                        if (rand()) {
                            return 1;
                        }
                    } __finally {
                        ;
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    int RetVal;

                    __try {
                        if (rand()) {
                            RetVal = 1;
                            __leave;
                        }
                    } __finally {
                        ;
                    }

                    return RetVal;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkRETURN -->
		<DefectDef guid="71654e93-0395-47cd-8d36-f05ae534ec4e" id="243" name="GlobalUnwindHalted">
			<description>
				<format>
                    Return from a finally-block halts global unwind
                </format>
			</description>
			<consequence>
				<format>
                    The exception will not be propagated
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates that a return statement occurs in
                    the handler of a try-finally statement.
                </p>
				<p>
                    A try-finally is intended to allow guaranteed cleanup,
                    not exception handling.  Returning from the finally
                    block will handle the exception if one occurred in the
                    protected block; the exception will not be propagated
                    upwards.
                </p>
			</doc>
			<example funcBody="int Precedence_%id%" sysIncludes="stdlib.h">
				<defectiveSrc><![CDATA[
                    __try {
                        ;
                    } __finally {
                        if (rand()) {
                            return 2;
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    int RetVal;

                    __try {
                        ;
                    } __finally {
                        if (rand()) {
                            RetVal = 2;
                        }
                    }

                    return RetVal;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- WalkDECLARATION -->
		<DefectDefGroup guid="53875b46-b1ab-47c1-a4e5-aa84773937b9" id="244" name="DeclHidingBase">
			<DefectDef guid="1f472570-944e-45fa-b35f-3825ef5aaabf" id="244" name="LocalDeclHidesGlobal">
				<description>
					<format>
                        Local declaration of %variable% hides global
                        declaration
                    </format>
					<param name="variable" format="'%ls'"/>
				</description>
				<additionalInfo>
					<format>
                        see previous declaration at %location%
                    </format>
					<param name="location" format="line %d of %hs"/>
				</additionalInfo>
				<doc>
					<p>
                        The warning indicates that a local declaration has
                        the same name as a declaration at global scope and
                        hides the global declaration.
                    </p>
					<p>
                        It is necessary to understand how the actual
                        lifetimes of these two definitions overlap in order
                        to determine whether there is a problem with this
                        code; PRE<i>f</i>ast only identifies a scope
                        overlap.  If the actual lifetimes of the variables
                        overlap there could be a problem. Things to look for
                        when investigating this warning are:
                        <ul>
							<li>
                                Is the intent a single variable or multiple
                                variables ?
                            </li>
							<li>
                                Is an allocation saved in one variable and
                                freed by the other ?
                            </li>
							<li>
                                Is the correct result being returned ?
                            </li>
						</ul>
					</p>
				</doc>
				<example funcBody="void Precedence_%id%">
					<!-- BUGBUG:  Can't create an example for this one unless we can get a decl
              at global scope.-->
					<defectiveSrc><![CDATA[
                    ]]></defectiveSrc>
					<correctedSrc><![CDATA[
                    ]]></correctedSrc>
				</example>
				<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
			</DefectDef>
			<!--  -->
			<DefectDef guid="b0f0c480-3d5d-4268-b82a-b8ec56938159" id="245" name="ForInitDeclHidesGlobal">
				<description>
					<format>
                        For-init declaration of %variable% hides global
                        declaration
                    </format>
					<param name="variable" format="'%ls'"/>
				</description>
				<additionalInfo>
					<format>
                        see previous declaration at %location%
                    </format>
					<param name="location" format="line %d of %hs"/>
				</additionalInfo>
				<doc>
					<p>
                        This warning indicates that a declaration in a
                        for-initializer has the same name as a declaration
                        at global scope and hides the global declaration.
                    </p>
					<p>
                        It is necessary to understand how the actual
                        lifetimes of these two definitions overlap in order
                        to determine whether there is a problem with this
                        code; PRE<i>f</i>ast only identifies a scope
                        overlap.  If the actual lifetimes of the variables
                        overlap there could be a problem. Things to look for
                        when investigating this warning are:
                        <ul>
							<li>
                                Is the intent a single variable or multiple
                                variables ?
                            </li>
							<li>
                                Is an allocation saved in one variable and
                                freed by the other ?
                            </li>
							<li>
                                Is the correct result being returned ?
                            </li>
						</ul>
					</p>
				</doc>
				<example funcBody="void Precedence_%id%">
					<!-- BUGBUG:  Can't create an example for this one unless we can get a decl
              at global scope.-->
					<defectiveSrc><![CDATA[
                    ]]></defectiveSrc>
					<correctedSrc><![CDATA[
                    ]]></correctedSrc>
				</example>
				<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
			</DefectDef>
			<!--  -->
			<DefectDef guid="f95f5cda-7e92-47cc-982f-df1a458e0bc4" id="246" name="LocalDeclHidesLocal">
				<description>
					<format>
                        Local declaration of %variable% hides declaration of
                        the same name in an outer scope
                    </format>
					<param name="variable" format="'%ls'"/>
				</description>
				<additionalInfo>
					<format>
                        see previous declaration at %location%
                    </format>
					<param name="location" format="line %d of %hs"/>
				</additionalInfo>
				<doc>
					<p>
                        This warning indicates that a local declaration
                        has the same name as a declaration at global scope.
                        The name at global scope is hidden by the
                        declaration at scope.
                    </p>
					<p>
                        It is necessary to understand how the actual
                        lifetimes of these two definitions overlap in order
                        to determine whether there is a problem with this
                        code; PRE<i>f</i>ast only identifies a scope
                        overlap.  If the actual lifetimes of the variables
                        overlap there could be a problem. Things to look for
                        when investigating this warning are:
                        <ul>
							<li>
                                Is the intent a single variable or multiple
                                variables ?
                            </li>
							<li>
                                Is an allocation saved in one variable and
                                freed by the other ?
                            </li>
							<li>
                                Is the correct result being returned ?
                            </li>
						</ul>
					</p>
				</doc>
				<example funcBody="int Precedence_%id%" sysIncludes="stdlib.h">
					<defectiveSrc><![CDATA[
                        int Decl1 = 42;

                        {
                            int Decl1;

                            Decl1 = rand();
                        }

                        return Decl1;
                    ]]></defectiveSrc>
					<correctedSrc><![CDATA[
                        int Decl1 = 42;

                        {
                            int Decl2;

                            Decl2 = rand();
                        }

                        return Decl1;
                    ]]></correctedSrc>
				</example>
				<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
			</DefectDef>
			<!--  -->
			<DefectDef guid="a1e5903f-cb0e-43c5-b32e-fcd533bf53d1" id="247" name="ForInitDeclHidesLocal">
				<description>
					<format>
                        For-init declaration of %variable% hides a
                        declaration of the same name in an outer scope
                    </format>
					<param name="variable" format="'%ls'"/>
				</description>
				<additionalInfo>
					<format>
                        See previous declaration at %location%
                    </format>
					<param name="location" format="line %d of %hs"/>
				</additionalInfo>
				<doc>
					<p>
                        This warning indicates that a local declaration has
                        the same name as a declaration in an outer scope.
                        The name in the outer scope is hidden.
                    </p>
					<p>
                        It is necessary to understand how the actual
                        lifetimes of these two definitions overlap in order
                        to determine whether there is a problem with this
                        code; PRE<i>f</i>ast only identifies a scope
                        overlap.  If the actual lifetimes of the variables
                        overlap there could be a problem. Things to look for
                        when investigating this warning are:
                        <ul>
							<li>
                                Is the intent a single variable or multiple
                                variables ?
                            </li>
							<li>
                                Is an allocation saved in one variable and
                                freed by the other ?
                            </li>
							<li>
                                Is the correct result being returned ?
                            </li>
						</ul>
					</p>
				</doc>
				<example funcBody="void Precedence_%id%">
					<defectiveSrc><![CDATA[
                        int Decl1;

                        {
                            for (int Decl1 = 0;;) {
                                ;
                            }
                        }
                    ]]></defectiveSrc>
					<correctedSrc><![CDATA[
                        int Decl1;

                        {
                            for (int Decl2 = 0;;) {
                                ;
                            }
                        }
                    ]]></correctedSrc>
				</example>
				<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
			</DefectDef>
		</DefectDefGroup>
		<!--  -->
		<!-- WalkFUNCTIONCALL -->
		<DefectDef guid="4a2e7582-7b15-4e42-a450-4885b485e388" id="248" name="CreatingNULLDACL">
			<description>
				<format>
                    Setting a SECURITY_DESCRIPTOR's DACL to NULL will result
                    in an unprotected object
                </format>
			</description>
			<additionalInfo>
				<format>
                    violates CC/C2 security requirements
                </format>
			</additionalInfo>
			<doc>
				<p>
                    This warning identifies a call which sets a
                    <code>SECURITY_DESCRIPTOR</code>'s <code>DACL</code>
                    field to <code>NULL</code>.  Objects with
                    <code>NULL DACL</code>s can have their security
                    descriptors altered by malicious users so that no one
                    has access to the object.
                </p>
				<p>
                    If everyone needs access to an object, the object
                    should be secured so that only administrators can alter
                    its security.
                </p>
				<p>
                    If only the creator needs access to an object, a
                    <code>DACL</code> should not be set on the object; the
                    system will choose an appropriate default.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%" sysIncludes="nt.h;ntrtl.h;nturtl.h">
				<defectiveSrc><![CDATA[
                    RtlSetDaclSecurityDescriptor(NULL,
                                                 TRUE,
                                                 NULL,
                                                 FALSE);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    ;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkFUNCTIONCALL -->
		<DefectDef guid="ea935d9b-c59d-47e6-aae2-b0ae6c0198cc" id="249" name="KernelUnreleasedVADs">
			<description>
				<format>
                    Calling %function% without the MEM_RELEASE flag frees
                    memory but not the address descriptors (VADs)
                </format>
				<param name="function" format="'%ls'" display="&lt;kernel function&gt;"/>
			</description>
			<consequence>
				<format>
                    Results in address space leaks
                </format>
			</consequence>
			<doc>
				<p>
                    This warning is specific to Windows NT kernel-mode code.
                </p>
				<p>
                    This message warns you that you must use
                    <code>MEM_RELEASE</code>
                    with <code>NtFreeVirtualMemory</code> to unreserve
                    memory that was reserved or committed using
                    <code>NtAllocateVirtualMemory</code>.
                </p>
				<p>
					<code>NtAllocateVirtualMemory</code> can reserve or
                    commit memory.  A commit of memory also reserves it.
                    <code>MEM_DECOMMIT</code> undoes the commit, but not the
                    reserve.  <code>MEM_RELEASE</code> undoes the reserve.
                </p>
				<p>
					<code>NtFreeVirtualMemory</code> behaves similarly to
                    the Win32 function <code>VirtualFree</code>.  MSDN
                    documentation for <code>VirtualFree</code> states the
                    following:

                    <ul>
						<i>"If a page is decommitted but not released, its
                        state changes to reserved..."</i>
					</ul>

                    Thus, to completely release committed memory, it must be
                    decommitted and released.
                </p>
				<p>
                    It is not necessary for the decommit and release to
                    happen as independent steps.  Releasing committed memory
                    will decommit the pages as well.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%" sysIncludes="nt.h;ntos.h">
				<defectiveSrc><![CDATA[
                ZwFreeVirtualMemory(0,
                                    NULL,
                                    0,
                                    MEM_DECOMMIT);

                ZwFreeVirtualMemory(0,
                                    NULL,
                                    0,
                                    MEM_RELEASE);
            ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                ZwFreeVirtualMemory(0,
                                    NULL,
                                    0,
                                    MEM_RELEASE);
            ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkFUNCTIONCALL -->
		<DefectDef guid="81f02611-1b60-4894-a740-b703732d7879" id="250" name="Win32UnreleasedVADs">
			<description>
				<format>
                    Calling %function% without the MEM_RELEASE flag frees
                    memory but not address descriptors (VADs)
                </format>
				<param name="function" format="%ls"/>
			</description>
			<consequence>
				<format>
                    Results in address space leaks
                </format>
			</consequence>
			<doc>
				<p>
                    This message warns you that you must use
                    <code>MEM_RELEASE</code>
                    with <code>VirtualFree</code> to unreserve memory that
                    was reserved or committed using
                    <code>VirtualAllocate</code>.
                </p>
				<p>
					<code>VirtualAlloc</code> can reserve or commit memory.
                    A commit of memory also reserves it.
                    <code>MEM_DECOMMIT</code> undoes the commit, but not the
                    reserve.  <code>MEM_RELEASE</code> undoes the reserve.
                </p>
				<p>
                    MSDN documentation for <code>VirtualFree</code> states
                    the following:

                    <ul>
						<i>"If a page is decommitted but not released, its
                        state changes to reserved..."</i>
					</ul>

                    Thus, to completely release committed memory, it must be
                    released.
                </p>
				<p>
                    It is not necessary for the decommit and release to
                    happen as independent steps.  Releasing committed memory
                    will decommit the pages as well.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%" sysIncludes="windows.h">
				<defectiveSrc><![CDATA[
                    VirtualFree(NULL,
                                0,
                                MEM_DECOMMIT);

                    VirtualFree(NULL,
                                0,
                                MEM_RELEASE);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    VirtualFree(NULL,
                                0,
                                MEM_RELEASE);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkFUNCTIONCALL -->
		<DefectDef guid="b77a14e3-6a2d-4a75-a23e-198c0e85f36a" id="251" name="InitCritSRaisesOnFailure">
			<description>
				<format>
                    InitializeCriticalSection indicates failure by raising
                    an asynchronous exception
                </format>
			</description>
			<additionalInfo>
				<format>
                    not protected by local exception handling
                </format>
			</additionalInfo>
			<recommendedFix>
				<format>
                    Consider using an exception handler
                </format>
			</recommendedFix>
			<doc>
				<p>
                    This warning indicates that a call to
                    <code>InitializeCriticalSection</code> was detected
                    outside of local exception handling.
                </p>
				<p>
                    MSDN documentation of
                    <code>InitializeCriticalSection</code> states the
                    following: 

                    <ul>
						<i>In low memory situations,
                        InitializeCriticalSection can raise a
                        STATUS_NO_MEMORY exception...</i>
					</ul>

                    Most code does not protect against this properly.
                </p>
				<p>
                    This warning is disabled by default, but can be enabled
                    by using the <b>/EnableCritsWarning</b> command-line
                    switch when invoking PRE<i>f</i>ast.
                </p>
				<p>
                    For example, the following command-line will enable
                    this warning:

                    <ul><code>
                        prefast /EnableCritsWarning=1 cl /Zs test.c
                    </code></ul>
				</p>
			</doc>
			<example funcBody="void Precedence_%id%" sysIncludes="windows.h" globalDecls="CRITICAL_SECTION Cs">
				<defectiveSrc><![CDATA[
                    InitializeCriticalSection(&Cs);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    __try {
                        InitializeCriticalSection(&Cs);
                    } __except(1) {
                        return;     // initialization failed
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkFUNCTIONCALL -->
		<DefectDef guid="ad2a648d-ca33-4fda-9673-48d98ced4ded" id="252" name="UntaggedAllocation">
			<description>
				<format>
                    Untagged pool allocation
                </format>
			</description>
			<consequence>
				<format>
                    Interferes with debugging
                </format>
			</consequence>
			<doc>
				<p>
                    This warning is specific to Windows NT kernel-mode code.
                </p>
				<p>
                    This warning indicates that all pool allocations should
                    use tags to assist debugging memory leaks and pool
                    corrupting events.
                </p>
				<p>
                    For example, a call to <code>ExAllocatePool</code>
                    should be changes to a call to
                    <code>ExAllocatePoolWithTag</code>.  Similarly, a call
                    to <code>ExAllocatePoolWithQuota</code> should be
                    changed to a call to
                    <code>ExAllocatePoolWithQuotaTag</code>.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%" sysIncludes="nt.h;ntos.h">
				<defectiveSrc><![CDATA[
                    ExAllocatePool(0,
                                   512);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    ExAllocatePoolWithTag(0,
                                          512,
                                          'kael');
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkFUNCTIONCALL -->
		<DefectDef guid="e3d63412-77e6-47b9-a4d2-2ca99d72b2fa" id="253" name="MMSecureVMNearlyUseless">
			<description>
				<format>
                    MmSecureVirtualMemory locks VADs not pages
                </format>
			</description>
			<additionalInfo>
				<format>
                    dereferences must still be protected by try-except
                </format>
			</additionalInfo>
			<doc>
				<p>
                    This warning is specific to Windows NT kernel-mode code.
                </p>
				<p>
                    This warning reminds us that
                    <code>MmSecureVirtualMemory</code> only locks the VADs
                    in a process' address space, but not the underlying
                    data.  This function is typically used to secure VADs of
                    a user process' memory space.  The data can still be
                    paged out.  If a failure to page in user-mode data
                    occurs, a page fault will be raised; if this page fault
                    is not handled the system will crash.
                </p>
				<p>
					<i>This warning is of limited value as there is no way
                    to 'fix' it.</i>
				</p>
			</doc>
			<example funcBody="void Precedence_%id%" sysIncludes="nt.h;ntos.h">
				<defectiveSrc><![CDATA[
                    MmSecureVirtualMemory(NULL,
                                          0,
                                          0);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    ; // use something else
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- HandleAlloca -->
		<DefectDef guid="23cc5233-3b5a-4455-a09c-269437fd380e" id="255" name="UnprotectedUseOfAlloca">
			<description>
				<format>
					<code>_alloca</code> indicates failure by raising a
                    stack overflow exception
                </format>
			</description>
			<recommendedFix>
				<format>
                    Consider using an exception handler
                </format>
			</recommendedFix>
			<doc>
				<p>
                    This warning indicates that a call to
                    <code>_alloca</code> has been detected outside of local
                    exception handling.  <code>_alloca</code> should always
                    be called from within the protected range of an
                    exception handler because it can raise a stack overflow
                    exception on failure.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%" sysIncludes="malloc.h;windows.h">
				<defectiveSrc><![CDATA[
                    _alloca(10);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    __try {
                        _alloca(10);
                    } __except(GetExceptionCode() == STATUS_STACK_OVERFLOW) {
                        _resetstkoflw();
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- HandleAlloca -->
		<!-- Warning 256 is not currently reported
        <DefectDef guid="6475464c-b568-4d23-8a2e-22c0aada7a49"
            id="256"
            name="SEHProtectedUseOfAlloca">

            <description>
                <format>
                    Stack not repaired after handled exception from
                    <code>_alloca</code>
                </format>
            </description>

            <recommendedFix>
                <format>
                    Consider calling _resetstkoflw
                </format>
            </recommendedFix>

            <doc>
                <p>
                    This warning is currently disabled because it's not
                    clear how to fix.
                </p>
            </doc>

            <example funcBody="void Precedence_%id%" sysIncludes="stdlib.h">
                <defectiveSrc><![CDATA[
                    __try {
                        _alloca(10);
                    } __except(EXCEPTION_EXECUTE_HANDLER) {
                            ;
                    }
                ]]></defectiveSrc>
                <correctedSrc><![CDATA[
                    __try {
                        _alloca(10);
                    } __except(GetExceptionCode() == STATUS_STACK_OVERFLOW) {
                        _resetstkoflw();
                    }
                ]]></correctedSrc>
            </example>

            <helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
        </DefectDef>
-->
		<!--  -->
		<!-- HandleAlloca -->
		<DefectDef guid="ba2a20bc-d4a2-439c-acbb-e24507da2ceb" id="257" name="ProhibitedUseOfAlloca">
			<description>
				<format>
					<code>_alloca</code> used in prohibited location
                </format>
			</description>
			<additionalInfo>
				<format>
                    consult MSDN for restrictions on using
                    <code>_alloca</code> in an exception handler
                </format>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that <code>_alloca</code> is
                    called from a location that does not allow this.
                </p>
				<p>
                    The MSDN documentation for <code>_alloca</code>
                    identifies some locations from which it cannot be called:

                    <ul><i>
                        "There are restrictions to explicitly calling
                        _alloca in a exception handler (EH).  EH routines
                        that run on x86-class processors operate in their
                        own memory "frame":  They perform their tasks in
                        memory space that is not based on the current
                        location of the stack pointer of the enclosing
                        function.  The most common implementations include
                        Windows NT structured exception handling (SEH) and
                        the C++ catch clause expressions.  Therefore,
                        explicitly calling _alloca in any of the following
                        scenarios results in program failure during the
                        return to the calling EH routine:

                        <ul>
								<li>
                                Windows NT SEH exception filter expression:
                                __except ( _alloca() )
                            </li>
								<li>
                                Windows NT SEH final exception handler:
                                __finally { _alloca() }
                            </li>
								<li>
                                C++ EH catch clause expression"
                            </li>
							</ul>
						</i></ul>

                    VC 7 apparently catches the last case as <code>C3204,
                    "you cannot call _alloca from within a catch block".</code>
				</p>
			</doc>
			<example funcBody="void Precedence_%id%" sysIncludes="stdlib.h;malloc.h">
				<defectiveSrc><![CDATA[
                    char *a;

                    __try {
                        ;
                    } __except (a = (char *)_alloca(10)) {
                        ;
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char *a;

                    a = (char *)malloc(10);

                    if (a == NULL) {
                        return;
                    }

                    __try {
                        ;
                    } __except (a) {
                        ;
                    }

                    free(a);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkFUNCTIONCALL -->
		<DefectDef guid="dab47611-f73b-4201-b3d7-14d5aeaa264e" id="258" name="UsingTerminateThread">
			<description>
				<format>
                    Using TerminateThread does not allow proper thread clean
                    up
                </format>
			</description>
			<additionalInfo>
				<format>
                    consult MSDN for more information
                </format>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that a call to
                    <code>TerminateThread</code> has been detected.
                </p>
				<p>
                    MSDN cautions us against the use of
                    <code>TerminateThread</code>:

                    <ul><i>
                        TerminateThread is a dangerous function that should
                        only be used in the most extreme cases.  You should
                        call TerminateThread only if you know exactly what
                        the target thread is doing, and you control all of
                        the code that the target thread could possibly be
                        running at the time of termination.  For example,
                        TerminateThread can result in the following problems:

                        <ul>
								<li>
                                If the target thread owns a critical
                                section, the critical section will not be
                                released.
                            </li>
								<li>
                                If the target thread is executing certain
                                kernel32 calls when it is terminated, the
                                kernel32 state for the thread's process
                                could be inconsistent.
                            </li>
								<li>
                                If the target thread is manipulating the
                                global state of a shared DLL, the state of
                                the shared DLL could be destroyed, affecting
                                other users of the DLL.
                            </li>
							</ul>

                        A thread cannot protect itself against
                        TerminateThread, other than by controlling access to
                        its handles.  The thread handle returned by
                        CreateThread and CreateProcess functions has
                        THREAD_TERMINATE access, so any caller holding one
                        of these handles can terminate your thread.
                    </i></ul>

                    Note that <code>SuspendThread</code> has similar
                    problems, but that PRE<i>f</i>ast does not currently
                    detect use of this API.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(HANDLE Thread)" sysIncludes="windows.h">
				<defectiveSrc><![CDATA[
                    TerminateThread(Thread,
                                    0);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    extern HANDLE ThreadTerminationEvent[];

                    SetEvent(ThreadTerminationEvent[(ULONG)Thread]);

                    /*
                     * Target thread waits on/polls the termination event
                     * and gracefully releases locks and resources before
                     * calling ExitThread().
                     */
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkCASE -->
		<DefectDef guid="aa8792f1-2937-4e3c-9735-c7685b0d8d00" id="259" name="DeadCodeInBitOrLimitedSwitch">
			<description>
				<format>
                    Labeled code is unreachable
                </format>
			</description>
			<additionalInfo>
				<format>
                    (%expr% &amp; %c1%) in a switch-expr limits
                    case values to a maximum of %c2%
                </format>
				<param name="expr" format="&lt;expression&gt;" display="&lt;expression&gt;"/>
				<param name="c1" format="0x%lx" display="&lt;constant&gt;"/>
				<param name="c2" format="0x%lx" display="&lt;constant&gt;"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates dead code caused by a mask
                    operation in a switch-expr.  The related case statements
                    which exceed the constant are not reachable.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%" sysIncludes="stdlib.h">
				<defectiveSrc><![CDATA[
                    switch (rand () & 3) {
                        case 3:

                            /* Reachable */

                            break;

                        case 4:

                            /* Not reachable */

                            break;

                        default:

                            break;
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    switch (rand () & 3) {
                        case 3:

                            /* Reachable */

                            break;

                        default:

                            break;
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkMULT -->
		<DefectDef guid="643aa8f2-f283-4d01-9840-6099769d67a9" id="260" name="UseOfByteArea">
			<description>
				<format>
                    Sizeof * sizeof is almost always wrong
                </format>
			</description>
			<additionalInfo>
				<format>
                    %v1% * %v2%
                </format>
				<param name="v1" format="%d" display="&lt;value&gt;"/>
				<param name="v2" format="%d" display="&lt;value&gt;"/>
			</additionalInfo>
			<question>
				<format>
                    Was a character count or a byte count intended
                </format>
			</question>
			<doc>
				<p>
                    This warning indicates that the results of two
                    <code>sizeof</code> operations have been multiplied
                    together.
                </p>
				<p>
                    The C/C++ <code>sizeof</code> operator returns the
                    number of bytes of storage an object uses.  It is
                    typically incorrect to multiply it by the result of
                    another <code>sizeof</code> operation.  Usually one is
                    interested in the number of bytes  in an object or the
                    number of elements in an array (for example the number
                    of wide-characters in an array).
                </p>
				<p>
                    Here's a quirk to be aware of.  In C, the following holds:
                    <ul>
						<code>
                            sizeof ('\0') == 4
                        </code>
					</ul>
                    because the type of a character literal is
                    <code>int</code>.  In C++, the type of a character
                    literal is <code>char</code>, so:
                    <ul>
						<code>
                            sizeof ('\0') == 1.
                        </code>
					</ul>
                    In both C and C++, the following holds:
                    <ul>
						<code>
                            sizeof ("\0") == 2.
                        </code>
					</ul>
				</p>
			</doc>
			<example funcBody="void Precedence_%id%" globalDecls="typedef unsigned short WCHAR;">
				<defectiveSrc><![CDATA[
                    int a;

                    a = sizeof (L"String") * sizeof (WCHAR);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    int a;

                    /* To get characters in string: */

                    a = sizeof (L"String") / sizeof (WCHAR);


                    /* To get bytes string: */

                    a = sizeof (L"String");
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkFUNCTIONCALL -->
		<DefectDef guid="5EF2B35B-067E-4666-BEAE-FAE6E921B3D7" id="261" name="MustSucceedAllocation">
			<description>
				<format>
                    MustSucceed pool allocations are forbidden
                </format>
			</description>
			<consequence>
				<format>
                    MustSucceed allocation failures cause a system crash
                </format>
			</consequence>
			<doc>
				<p>
                    This warning is specific to Windows NT kernel-mode code.
                </p>
				<p>
                    This warning indicates an attempt to allocate
                    MustSucceed pool.
                </p>
				<p>
                    MustSucceed pool allocations fail by crashing the system
                    so its use in Whistler and beyond has been prohibited.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%" sysIncludes="nt.h;ntos.h">
				<defectiveSrc><![CDATA[
                    char *b;

                    b = (char *)ExAllocatePoolWithTag(NonPagedPoolMustSucceed,
                                                      100,
                                                      ' gaT');
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char *b;

                    b = (char *)ExAllocatePoolWithTag(NonPagedPool,
                                                      100,
                                                      ' gaT');
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkFUNCDECL -->
		<DefectDef guid="5dc70e05-fbea-4726-8f76-2ababa6fd879" id="262" name="ExcessiveStackUsage">
			<description>
				<format>
                    This function uses %constant% bytes of stack
                </format>
				<param name="constant" format="%d"/>
			</description>
			<additionalInfo>
				<format>
                    exceeds /StackHogThreshold=%constant%
                </format>
				<param name="constant" format="%d"/>
			</additionalInfo>
			<recommendedFix>
				<format>
                    Consider moving some data to heap
                </format>
			</recommendedFix>
			<doc>
				<p>
                    This warning indicates that stack usage exceeding a
                    preset threshold has been detected.  The default
                    threshold for this warning is 16k bytes.
                </p>
				<p>
                    Stack, even in user-mode, is limited, and failure to
                    commit a page of stack results in an unhandlable
                    exception.
                </p>
				<p>
                    The detection threshold for this warning is adjustable
                    using the /STACKHOGTHRESHOLD switch when invoking
                    PRE<i>f</i>ast.  For example:

                    <ul><code>
                        prefast /STACKHOGTHRESHOLD=1024 cl /Zs test.c
                    </code></ul>

                    Will cause this warning to be generated when
                    PRE<i>f</i>ast detects functions using more than 1024
                    bytes of stack.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%" sysIncludes="malloc.h;stdlib.h">
				<defectiveSrc><![CDATA[
                    char Buffer[123456];
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char *Buffer;

                    Buffer = (char *)malloc(123456);
                    if (Buffer == NULL) {
                        return;
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- HandleAlloca -->
		<DefectDef guid="023fc5ba-a470-4f43-89eb-3e9a9101e25d" id="263" name="UsingAllocaInLoop">
			<description>
				<format>
                    Using <code>_alloca</code> in a loop
                </format>
			</description>
			<consequence>
				<format>
                    This can quickly overflow stack
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates that a call to
                    <code>_alloca</code> was detected in a loop.
                </p>
				<p>
					<code>_alloca</code> allocates from the stack but is
                    only freed when the calling function exits.
                    <code>_alloca</code> should not be used in loops unless
                    the allocation and iteration counts are well understood
                    and small.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%" sysIncludes="stdlib.h;malloc.h">
				<defectiveSrc><![CDATA[
                    char *b;

                    do {
                        b = (char *)_alloca(9);

                        ;
                        
                    } while (1);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char *b;

                    do {
                        b = (char *)malloc(9);

                        if (b == NULL) {
                            break;
                        }

                        ;

                        free(b);
                    } while (1);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- BitwiseRelationalPrecedenceErrorWorker -->
		<DefectDef guid="f1f45a43-2585-46e6-95f8-b4d73fb21beb" id="281" name="BitwiseRelationPrecedenceError">
			<description>
				<format>
                    Incorrect order of operations
                </format>
			</description>
			<additionalInfo>
				<format>
                    relational operators have higher precedence than bitwise
                    operators
                </format>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates a probable error in operator
                    precedence.
                </p>
				<p>
                    Relational operators ( <code>&lt; &gt; &lt;= &gt;= ==
                    !=</code> ) have higher precedence than bitwise
                    operators (<code> &amp; | ^ </code>).
                </p>
			</doc>
			<example funcBody="void Precedence_%id%">
				<defectiveSrc><![CDATA[
                    int x = 3, y = 7, z = 13;

                    if (x & y != z) { ; }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    int x = 17, y = 23, z = 31;

                    if ((x & y) != z) { ; }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- CheckBooleanContext -->
		<DefectDef guid="fbf235cf-47c3-4293-96cf-0aaae727d6fa" id="282" name="AssignmentReplacesTest">
			<description>
				<format>
                    Incorrect operator
                </format>
			</description>
			<additionalInfo>
				<format>
                    assignment to constant in test context
                </format>
			</additionalInfo>
			<!-- BUGBUG:  I've changed this some to fit the model, I couldn't find a
schema for defectdefs.xml to see how the agreed form would fit.-->
			<question>
				<format>
                    Was <code>==</code> intended
                </format>
			</question>
			<doc>
				<p>
                    This warning indicates that an assignment to a constant
                    was detected in a test context.
                </p>
				<p>
                    Assignment to a constant in a test context is almost
                    always incorrect.  Replace the <code>=</code> with
                    <code>==</code>, or remove the assignment from the
                    test context to resolve this warning.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(int a)">
				<defectiveSrc><![CDATA[
                    while (a = 5) {
                        ;
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    while (a == 5) {
                        ;
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- PossibleConstLogicalOp -->
		<DefectDef guid="A1CBEF7E-0590-483d-B796-FF08495B64BF" id="285" name="LogicalOrOfConstants">
			<description>
				<format>
                    (%nzc% || %nzc%) is always TRUE
                </format>
				<param name="nzc" format="&lt;non-zero constant&gt;" display="&lt;non-zero constant&gt;"/>
			</description>
			<question>
				<format>
                    Was the bitwise-and operator intended
                </format>
			</question>
			<doc>
				<p>
                    This warning indicates that two constant values, both
                    greater than one, were detected as arguments to a
                    logical-or operation that occurs in a test context.
                    This expression is always <code>TRUE</code>.
                </p>
				<p>
                    Constant values greater than one suggest that the
                    arguments to logical-or could be bit fields.  Consider
                    whether a bitwise operator, <code>&amp;</code> or
                    <code>|</code>, might be a more appropriate operators in
                    this case. 
                </p>
			</doc>
			<example funcBody="void Precedence_%id%">
				<defectiveSrc><![CDATA[
                    #define     TESTED_VALUE    0x37
                    #define     MASK            0xaa

                    if (TESTED_VALUE || MASK) {;}
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    #define     TESTED_VALUE    0x37
                    #define     MASK            0xaa

                    if (TESTED_VALUE & MASK) {;}

                    /* or more rarely */

                    if (TESTED_VALUE | MASK) {;}
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- PossibleConstLogicalOp -->
		<DefectDef guid="A018BEFB-93F2-4aec-B0B2-9248FCB6FC5C" id="286" name="NonZeroLogicalOrLosingSideEffects">
			<description>
				<format>
                    (%nzc% || %expr%) is always TRUE
                </format>
				<param name="nzc" format="&lt;non-zero constant&gt;" display="&lt;non-zero constant&gt;"/>
				<param name="expr" format="&lt;expression&gt;" display="&lt;expression&gt;"/>
			</description>
			<consequence>
				<format>
                    &lt;<i>expression</i>&gt; is never evaluated and may
                    have side effects
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates that a non-zero constant was
                    detected on the left side of a logical-or operation that
                    occurs in a test context.  The resulting expression
                    always evaluates to <code>TRUE</code>.  In addition the
                    right side appears to have side effects, and they will
                    be lost. 
                </p>
				<p>
                    This warning indicates that you may wish to examine the
                    right side of the expression carefully to ensure that
                    any side effects needed for proper functionality are not
                    lost.
                </p>
				<p>
					<!-- BUGBUG:  Is this useful ? -->
                    The <code>(!0 || &lt;<i>expression</i>&gt;)</code>
                    construction is commonly used to force execution of a
                    controlled block.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%" globalDecls="extern int foo(void)">
				<defectiveSrc><![CDATA[
                    if (1 || foo()) {;}
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if (1) {
                        foo();

                        ;
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- PossibleLogicalCollusion -->
		<DefectDef guid="6387dca1-a731-4e85-a6e3-a78570cd50f7" id="287" name="RedundantTest">
			<description>
				<format>
                    Redundant code
                </format>
			</description>
			<additionalInfo>
				<format>
                    the left and right sub-expressions are identical
                </format>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that redundant element was
                    detected in an expression.
                </p>
				<p>
                    Impact: It is difficult to judge the severity of
                    this problem without examining the code in-situ.  A
                    duplicate test on its own is benign, but if a second
                    test was omitted, the consequences can be severe.  The
                    code should be inspected to ensure that a test was not
                    omitted.
                </p>
				<p>
                    Accuracy:  This warning is highly accurate.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(int x, int y)">
				<defectiveSrc><![CDATA[
                        if ((x == 1) && (x == 1)) {;}
                        if ((x != 1) || (x != 1)) {;}
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                        /* Remove the redundant sub-expression: */

                        if (x == 1) {;}
                        if (x != 1) {;}

                        /* or test the missing variable: */

                        if ((x == 1) && (y == 1)) {;}
                        if ((x != 1) || (y != 1)) {;}
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- PossibleLogicalCollusion -->
		<DefectDef guid="8a59d37f-8b97-44e0-a329-12ee445fe2f9" id="288" name="MutualInclusionOverAndIsFalse">
			<description>
				<format>
                    Incorrect operator
                </format>
			</description>
			<additionalInfo>
				<format>
                    mutual inclusion over &amp;&amp; is always FALSE
                </format>
			</additionalInfo>
			<question>
				<format>
                    Was || intended
                </format>
			</question>
			<doc>
				<p>
                    This warning indicates that an expression was detected
                    where a variable is being tested against two different
                    constants with the result depending on both conditions
                    being <code>true</code>.  This cannot happen.
                </p>
				<p>
                    This problem is commonly caused by using
                    <code>&amp;&amp;</code>; in place of <code>||</code>, but
                    can also be caused by using <code>==</code> where
                    <code>!=</code> was intended.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(int x)">
				<defectiveSrc><![CDATA[
                    if ((x == 1) && (x == 2)) {;}
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if ((x == 1) || (x == 2)) {;}

                    /* or */

                    if ((x != 1) && (x != 2)) {;}
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- PossibleLogicalCollusion -->
		<DefectDef guid="eba62996-c840-4464-ab46-3c52c65f2a51" id="289" name="MutualExclusionOverOrIsTrue">
			<description>
				<format>
                    Incorrect operator
                </format>
			</description>
			<additionalInfo>
				<format>
                    mutual exclusion over || is always TRUE
                </format>
			</additionalInfo>
			<question>
				<format>
                    Was &amp;&amp; intended
                </format>
			</question>
			<doc>
				<p>
                    This warning indicates that an expression was detected
                    where a variable is being tested against two different
                    constants with the result depending on either
                    conditions being <code>true</code>.  This is always the
                    case.
                </p>
				<p>
                    This problem is commonly caused by using <code>||</code>
                    in place of <code>&amp;&amp;</code>, but can also be
                    caused by using <code>!=</code> where <code>==</code>
                    was intended.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(int x)">
				<defectiveSrc><![CDATA[
                    if ((x != 1) || (x != 2)) {;}
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if ((x != 1) && (x != 2)) {;}

                    /* or */

                    if ((x == 1) || (x == 2)) {;}
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- PossibleArithmeticBoolConflict -->
		<DefectDef guid="b49c02ac-f8bc-45ad-b9a7-c1cf5e287bdd" id="290" name="LogicalNotBitwiseAnd">
			<description>
				<format>
                    Bitwise operation on logical result
                </format>
			</description>
			<additionalInfo>
				<format>
                    ! has higher precedence than &amp;
                </format>
			</additionalInfo>
			<recommendedFix>
				<format>
                    Use &amp;&amp; or (!(x &amp; y)) instead
                </format>
			</recommendedFix>
			<doc>
				<p>
                    The <code>!</code> operator yields a Boolean result, and
                    the <code>&amp;</code> (bitwise-and) operator takes two
                    arithmetic arguments.  The <code>!</code> operator also
                    has higher precedence than <code>&amp;</code>.
                </p>
				<p>
                    Therefore one of the following errors has been detected:
                    <ul>
						<li>
                            The expression is mis-parenthesised:
                            <ul>
                                Since the result of <code>!</code> is
                                Boolean (zero or one), an attempt to test
                                that two variables have bits in common will
                                only end up testing that the lowest bit is
                                present in the right-hand-side:  <code>((!8)
                                &amp; 1) == true</code>.
                            </ul>
						</li>
						<li>
                            The <code>!</code> operator is incorrect, and
                            should be a <code>~</code> instead:
                            <ul>
                                The <code>!</code> operator has a Boolean
                                result, while the <code>~</code> operator
                                has an arithmetic result.  These operators
                                are only interchangeable when operating on a
                                Boolean value (zero or one):  <code>((!0x01)
                                &amp; 0x10) == 0x0</code>, while
                                <code>((~0x01) &amp; 0x10) == 0x10</code>.
                            </ul>
						</li>
						<li>
                            The binary operator <code>&amp;</code> is
                            incorrect, and should instead be
                            <code>&amp;&amp;</code>:
                            <ul>
                                While <code>&amp;</code> can sometimes be
                                interchanged with <code>&amp;&amp;</code>,
                                it is neither equivalent nor efficient as it
                                forces evaluation of the right-hand-side of
                                the expression.  Certain side-effects in
                                this sort of expression can be terminal.
                            </ul>
						</li>
					</ul>
				</p>
				<p>
                    This warning is not reported if the <code>!</code>
                    operator is on the left-hand-side of the <code>&amp;</code>
                    operator as this case is typically the relatively benign
                    case of an incorrect operator.
                </p>
				<p>
                    Impact: It is difficult to judge the severity of
                    this problem without examining the code in-situ.  The
                    code should be inspected to ensure that the intended test
                    is occurring.
                </p>
				<p>
                    Accuracy:  This warning is always indicates
                    possible confusion in the use of an operator or operator
                    precedence. 
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(int x, int y)">
				<defectiveSrc><![CDATA[
                    if (!x & y) {;}
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    /* When testing that x has no bits in common with y. */

                    if (!(x & y)) {;}


                    /* When testing for the complement of x in y. */

                    if ((~x) & y) {;}


                    /* When y is a Boolean or Boolean result. */

                    if ((!x) && y) {;}
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- PossibleArithmeticBoolConflict -->
		<DefectDef guid="dda70ba1-d8f0-4ae0-b4f9-0eaf2df9b636" id="291" name="LogicalNotBitwiseOr">
			<description>
				<format>
                    Bitwise operation on logical result
                </format>
			</description>
			<additionalInfo>
				<format>
                    ! has higher precedence than |
                </format>
			</additionalInfo>
			<recommendedFix>
				<format>
                    Use || or (!(x | y)) instead
                </format>
			</recommendedFix>
			<doc>
				<p>
                    The <code>!</code> operator yields a Boolean result, and
                    the <code>|</code> (bitwise-or) operator takes two
                    arithmetic arguments.  The <code>!</code> operator also
                    has higher precedence than <code>|</code>.
                </p>
				<p>
                    Therefore one of the following errors has been detected:
                    <ul>
						<li>
                            The expression is mis-parenthesised:
                            <ul>
                                Since the result of <code>!</code> is
                                Boolean (zero or one), an attempt to test
                                that two variables have bits set will
                                only end up testing that the lowest bit is
                                present in the right-hand-side:  <code>((!x)
                                | y) != (!(x | y))</code> when <code>x ==
                                0</code> and <code>y == 1</code>.
                            </ul>
						</li>
						<li>
                            The <code>!</code> operator is incorrect, and
                            should be a <code>~</code> instead:
                            <ul>
                                The <code>!</code> operator has a Boolean
                                result, while the <code>~</code> operator
                                has an arithmetic result.  These operators
                                are only interchangeable when operating on a
                                Boolean value (zero or one):  <code>((!x) |
                                y) != ((~x) | y)</code>) when <code>x ==
                                1</code> and <code>y == 0</code>.
                            </ul>
						</li>
						<li>
                            The binary operator <code>|</code> is incorrect,
                            and should instead be <code>||</code>:
                            <ul>
                                While <code>|</code> can sometimes be
                                interchanged with <code>||</code>, it is
                                neither equivalent nor efficient as it
                                forces evaluation of the right-hand-side of
                                the expression.  Certain side-effects in
                                this sort of expression can be terminal:
                                <code>(!p | (*p == '\0'))</code>, when
                                <code>p == NULL</code>, we must dereference
                                it to evaluate the other half of the
                                expression.
                            </ul>
						</li>
					</ul>
				</p>
				<p>
                    This warning is not reported if the <code>!</code>
                    operator is on the left-hand-side of the <code>|</code>
                    operator as this case is typically just the relatively
                    benign case of an incorrect operator.
                </p>
				<p>
                    Impact: It is difficult to judge the severity of
                    this problem without examining the code in-situ.  The
                    code should be inspected to ensure that the intended test
                    is occurring.
                </p>
				<p>
                    Accuracy:  This warning is always indicates
                    possible confusion in the use of an operator or operator
                    precedence. 
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(int x, int y)">
				<defectiveSrc><![CDATA[
                    if (!x | y) {;}
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    /* When checking whether any bits are set in either x or y. */

                    if (!(x | y)) {;}


                    /* When checking whether bits are set in either the complement of x or in y. */

                    if ((~x) | y) {;}


                    /* When y is a Boolean or Boolean result. */

                    if ((!x) || y) {;}
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkLSHIFT -->
		<DefectDef guid="c1b9fc80-3bde-4806-b01d-4e584ac1ee38" id="297" name="ResultOfShiftCastToLargerSize">
			<description>
				<format>
                    Arithmetic overflow
                </format>
			</description>
			<additionalInfo>
				<format>
                    32-bit value is shifted, then cast to 64-bit value
                </format>
			</additionalInfo>
			<recommendedFix>
				<format>
                    Cast to a 64-bit value before the shift
                </format>
			</recommendedFix>
			<consequence>
				<format>
                    Bits may be lost
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates incorrect behavior resulting from
                    integral promotion rules and types larger than those in
                    which arithmetic is typically performed.
                </p>
				<p>
                    In this case, a 32-bit value was shifted left, and the
                    result of that shift was cast to a 64-bit value.  If the
                    shift overflowed the 32-bit value, bits are lost.
                </p>
				<p>
                    If you don't want to loose bits, cast the value to be
                    shifted to a 64-bit quantity before it is shifted.
                </p>
				<p>
                    If you want to loose
                    bits, performing the appropriate cast (to unsigned long
                    or a shorter type), or masking the result of the shift
                    will eliminate this warning and make the intent of the
                    code more clear.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(unsigned int i)">
				<defectiveSrc><![CDATA[
                    unsigned __int64 x;

                    x = i << 34;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    unsigned __int64 x;

                    x = ((unsigned __int64)i) << 34;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkFUNCTIONCALL -->
		<DefectDef guid="f0e67291-ef50-4d2e-b919-1c7d309ba428" id="308" name="ReallocLeak">
			<description>
				<format>
                    Leaking memory
                </format>
			</description>
			<additionalInfo>
				<format>
                    if memory allocation fails, the pointer to allocated
                    memory (%pointer%) will be clobbered by %function%'s
                    return value of NULL
                </format>
				<param name="pointer" format="%ls"/>
				<param name="function" format="%ls"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates a memory leak resulting from the
                    incorrect use of a reallocation function.
                </p>
				<p>
                    Heap reallocation functions do not free the passed
                    buffer if reallocation is unsuccessful, but
                    PRE<i>f</i>ast has detected that the original pointer is
                    overwritten with the result of the reallocation call.
                </p>
				<p>
                    Assign the result of the reallocation function to a
                    temporary, then replace the original pointer after
                    successful reallocation.
                </p>
				<p>
                    This warning may generate noise if there is a live alias
                    to the buffer-to-be-reallocated at the time of the
                    assignment of the result of the reallocation function.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%()" sysIncludes="stdlib.h">
				<defectiveSrc><![CDATA[
                    char *x;

                    x = (char *)malloc(10);

                    if (x) {
                        x = (char *)realloc(x,
                                            512);
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char *x, *tmp;

                    x = (char *)malloc(10);

                    if (x) {
                        tmp = (char *)realloc(x,
                                              512);

                        if (tmp != NULL) {
                            x = tmp;
                        }

                        free(x);
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- -->
		<!-- WalkTRYEXCEPT -->
		<DefectDef guid="230602de-119b-4cb7-b3fc-05bde1459c1d" id="310" name="IllegalExceptExprConst">
			<description>
				<format>
                    Illegal constant in exception filter
                </format>
			</description>
			<question>
				<format>
                    Did you intend to test this constant against
                    <code>GetExceptionCode()</code>
				</format>
			</question>
			<doc>
				<p>
                    This warning indicates that an illegal constant was
                    detected in the filter expression of an structured
                    exception handler.
                </p>
				<p>
                    The constants defined for use in the filter expression
                    of a structured exception handler are:

                    <ul>
						<li>
							<code>EXCEPTION_CONTINUE_EXECUTION</code>
						</li>
						<li>
							<code>EXCEPTION_CONTINUE_SEARCH</code>
						</li>
						<li>
							<code>EXCEPTION_EXECUTE_HANDLER</code>
						</li>
					</ul>

                    These values are defined in the C-runtime header
                    except.h.
                </p>
				<p>

                    Using a constant not in the above list can lead to
                    unexpected behavior.  In the example shown below, use of
                    <code>EXCEPTION_ACCESS_VIOLATION</code> in the filter
                    expression is treated as
                    <code>EXCEPTION_CONTINUE_EXECUTION</code>.  This leads
                    to the following behavior:

                    <ul>
						<li>
                            If the exception is triggered by the call to
                            <code>RaiseException</code>, execution will
                            continue after the exception and actually write
                            at the out-of-range address.
                        </li>
						<li>
                            If an exception is occurs because
                            <code>Handle</code> is an invalid pointer, an
                            infinite loop will result, as execution is
                            continued at the instruction that resulted in
                            the exception (resulting in another exception
                            that is handled the same way, thus an
                            infinite loop).
                        </li>
					</ul>                        

                    In either case, the actual handler statement will never
                    be executed.  The return statement is dead code.
                </p>
			</doc>
			<example funcBody="int Precedence_%id%(HANDLE *Handle, HANDLE NewValue)" sysIncludes="winbase.h">
				<defectiveSrc><![CDATA[
                    #define LIMIT   0x7fff0000

                    __try {

                        if (Handle >= Limit) {
                            RaiseException(EXCEPTION_ACCESS_VIOLATION);
                        }

                        *Handle = NewValue;

                    } __except (EXCEPTION_ACCESS_VIOLATION) {
                        return EXCEPTION_ACCESS_VIOLATION;
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    #define LIMIT   0x7fff0000

                    __try {

                        if (Handle >= Limit) {
                            RaiseException(EXCEPTION_ACCESS_VIOLATION);
                        } 

                        *Handle = NewValue;

                    } __except (GetExceptionCode() == EXCEPTION_ACCESS_VIOLATION) {
                        return EXCEPTION_ACCESS_VIOLATION;
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkTRYEXCEPT -->
		<DefectDef guid="d5d82775-0b47-4fdd-bd99-4a637a9f164f" id="312" name="ExceptionContinueExecution">
			<description>
				<format>
                    Possible infinite loop
                </format>
			</description>
			<additionalInfo>
				<format>
                    use of the constant
                    <code>EXCEPTION_CONTINUE_EXECUTION</code> in the
                    exception-filter expression of a <code>try-except</code>
				</format>
			</additionalInfo>
			<consequence>
				<format>
                    Execution restarts in the protected block
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates that PRE<i>f</i>ast has detected
                    the use of the constant
                    <code>EXCEPTION_CONTINUE_EXECUTION</code> (or another
                    constant that evaluates to -1) in the filter expression
                    of a structured exception handler.
                </p>
				<p>
                    Use of the constant value
                    <code>EXCEPTION_CONTINUE_EXECUTION</code> can lead to an
                    infinite loop.  If an exception was raised by hardware,
                    the instruction that cause the exception will be
                    resarted.  If the address which caused the exception is
                    still bad, another exception will occur, and be handled
                    in the same way.  This results in an infinte loop.
                </p>
				<p>
                    An explicit call to <code>RaiseException</code> will not
                    directly result in an infinite loop, but it will
                    continue execution of the code in the protected block.
                    This can be unexpected, and can lead to an infinite loop
                    if <code>RaiseException</code> was used to avoid
                    dereferencing an invalid pointer.
                </p>
				<p>
                    In addition, when
                    <code>EXCEPTION_CONTINUE_EXECUTION</code> is used, the
                    handler block of the structured exception handler is not
                    executed.
                </p>
				<p>
					<code>EXCEPTION_CONTINUE_EXCEPTION</code> should
                    typically only be returned by a function called in the
                    filter expression, which has a chance to fix either the
                    pointer that caused the exception, or the underlying
                    memory.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%">
				<defectiveSrc><![CDATA[
                    __try {
                        *ptr = '\0';
                    } __except (EXCEPTION_CONTINUE_EXCEPTION) {
                        // This block is never executed

                        ;
                    }
                            
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    __try {
                        *ptr = '\0';
                    } __except (ExceptionFilter(ptr, GetExceptionCode())) {
                        // Block may be executed depending on result of call
                        // to ExceptionFilter.

                        ;
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- DetectBitwiseCollusion -->
		<DefectDef guid="85410e47-35b3-4372-94f1-0170c017212f" id="313" name="BitAndVSZeroValuedFlag">
			<description>
				<format>
                    Incorrect operator
                </format>
			</description>
			<additionalInfo>
				<format>
                    zero-valued flag cannot be tested with bitwise-and
                </format>
			</additionalInfo>
			<recommendedFix>
				<format>
                    Use an equality test to check for zero-valued flags
                </format>
			</recommendedFix>
			<doc>
				<p>
                    This warning indicates that a constant value of zero 
                    was provided as an argument to the bitwise-and
                    (<code>&amp;</code>) operator in a test context.
                </p>
				<p>
                    The resulting expression is constant and evaluates to
                    false.
                </p>
				<p>

                    This is typically caused by using bitwise-and to test
                    for a flag that has the value zero.  In order to test
                    zero-valued flags, a test for equality must be performed
                    (e.g. using <code>==</code> or <code>!=</code>).
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(int Flags)" sysIncludes="stdlib.h">
				<defectiveSrc><![CDATA[
                    #define FLAG    0

                    if (Flags &amp; FLAG) {
                        ;
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    #define FLAG    0

                    if (Flags == FLAG) {
                        ;
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- DetectBitwiseCollusion -->
		<DefectDef guid="4ee408af-e42f-4593-85ae-f3bf95e3d51c" id="314" name="BitOrVSQuestion">
			<description>
				<format>
                    Incorrect order of operations
                </format>
			</description>
			<additionalInfo>
				<format>
                    bitwise-or has higher precedence than the
                    conditional-expression operator
                </format>
			</additionalInfo>
			<recommendedFix>
				<format>
                    Add parenthesies to clarify intent
                </format>
			</recommendedFix>
			<doc>
				<p>
                    This warning indicates that an expression containing a
                    bitwise-or operator (<code>|</code>) against a non-zero
                    constant was detected in the tested expression of a
                    conditonal-expression operation (<code>?:</code>).  The
                    tested expression is constant and always true.
                </p>
				<p>
                    The conditional-expression operator
                    has lower precedence than bitwise operations.  If the
                    expression to be tested should not contain the
                    bitwise-or operator, add parenthesies
                    around the conditional-expression.
                </p>
			</doc>
			<example funcBody="int Precedence_%id%(int i)">
				<defectiveSrc><![CDATA[
                    return 7 | i ? true : false;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    return 7 | (i ? true : false);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- DetectBitwiseCollusion -->
		<DefectDef guid="7b86c520-c01a-4254-9693-0e61a3cc5e83" id="315" name="BitOrVSBitAnd">
			<description>
				<format>
                    Incorrect order of operations
                </format>
			</description>
			<additionalInfo>
				<format>
                    bitwise-and has higher precedence than bitwise-or
                </format>
			</additionalInfo>
			<recommendedFix>
				<format>
                    Add parenthesies to clarify intent
                </format>
			</recommendedFix>
			<doc>
				<p>
                    This warning is flagged when an expression is detected
                    in a test context which contains both bitwise-and
                    (<code>&amp;</code>) and bitwise-or (<code>|</code>)
                    operations but results in a constant because the
                    bitwise-or operation happens last.
                </p>
				<p>
                    Parenthesies should be added to clarify inntet.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(int i)">
				<defectiveSrc><![CDATA[
                    if (i &amp; 2|4)
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if (i &amp; (2|4))
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- DetectBitwiseCollusion -->
		<DefectDef guid="80368ab0-2515-4f5b-9cc1-5b3e8abc93dd" id="316" name="InappropriateUseOfBitOr">
			<description>
				<format>
                    Incorrect operator
                </format>
			</description>
			<additionalInfo>
				<format>
                    tested expression is constant and non-zero
                </format>
			</additionalInfo>
			<recommendedFix>
				<format>
                    Use bitwise-and to determine whether bits are set
                </format>
			</recommendedFix>
			<doc>
				<p>
                    This warning indcates code where bitwise-or
                    (<code>|</code>) was used when bitwise-and
                    (<code>&amp;</code>) should have been used.
                </p>
				<p>
                    Bitwise-or adds bits to the resulting expression, while
                    bitwise-and selects only those bits in common between
                    its two operators.
                </p>
				<p>
                    Tests for flags must be performed with bitwise-and or
                    an test of equality.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(int Flags)">
				<defectiveSrc><![CDATA[
                    if (Flags | 8)
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if (Flags &amp; 8)
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- DetectBitwiseCollusion -->
		<DefectDef guid="26892640-561b-465c-8f5d-450f18ec73dc" id="317" name="NotNotComplement">
			<description>
				<format>
                    Incorrect operator
                </format>
			</description>
			<additionalInfo>
				<format>
                    logical-not (<code>!</code>) is not interchangeable with
                    ones-complement (<code>~</code>)
                </format>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that PRE<i>f</i>ast detected
                    logical-not (<code>!</code>) being applied to a constant
                    likely to be a bit-flag.
                </p>
				<p>
                    The result of logical-not is boolean, it is incorrect to
                    apply the bitwise-and (<code>&amp;</code>) operator to a
                    boolean value.
                </p>
				<p>
                    Use the ones-complement (<code>~</code>) operator to
                    flip flags.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(int a)">
				<defectiveSrc><![CDATA[
                    #define FLAGS   0x4004

                    if (a & !FLAGS) {;}
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    #define FLAGS   0x4004

                    if (a & ~FLAGS) {;}
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkTRYEXCEPT -->
		<DefectDef guid="4b6c65bb-966e-43d6-9c94-6dfd20d316f3" id="318" name="ExceptionContinueSearch">
			<description>
				<format>
                    Degenerate __try/__except
                </format>
			</description>
			<additionalInfo>
				<format>
                    use of the constant
                    <code>EXCEPTION_CONTINUE_SEARCH</code> (or another
                    constant that evaluates to zero) in the exception-filter
                    expression of a structured exception handler
                </format>
			</additionalInfo>
			<consequence>
				<format>
                    The exception is not handled, and any code in the
                    handler block is dead
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates that PRE<i>f</i>ast has detected a
                    degenerate structured exception handler.
                </p>
				<p>
                    If an exception occurs in the protected block of this
                    structured exception handler, the exception will not be
                    handled because the constant
                    <code>EXCECPTION_CONTINUE_SEARCH</code> is used in the
                    exception filter expression.  Also, the handler block is
                    not executed.
                </p>
				<p>
                    This code is equivalent to the protected block without
                    the structured exception handler or handler block.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(int *a)">
				<defectiveSrc><![CDATA[
                    __try {
                        *a = 0;
                    } __except (EXCEPTION_CONTINUE_SEARCH) {
                        return GetExceptionCode();
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    *a = 0;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- CheckBooleanContex -->
		<DefectDef guid="5533e841-6486-46fe-a10a-121ea912f62f" id="319" name="IgnoredByComma">
			<description>
				<format>
                    Dead code
                </format>
			</description>
			<additionalInfo>
				<format>
                    Use of the comma-operator in a tested expression causes
                    the left argument to be ignored when it has no
                    side-effects
                </format>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that PRE<i>f</i>ast has detected
                    an ignored sub-expression in test context due to the use
                    of the comma-operator (<code>,</code>).
                </p>
				<p>
                    The result of the comma-operator is the last expression
                    evaluated and arguments are evaluated left-to-right.
                </p>
				<p>
                    The expression has no influence on the tested
                    expression.  If the left expression to comma-operator
                    has no side-effects, the compiler may omit code
                    generation for the expression.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(int *x)">
				<defectiveSrc><![CDATA[
                    for (int i = 0; x[i] != NULL, x[i] < 42; i++) {;}
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    for (int i = 0; (x[i] != NULL) && (x[i] < 42); i++) {;}
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkFUNCTIONCALL -->
		<DefectDef guid="4e15b9be-76be-4ae0-ab24-47244a589d19" id="331" name="VirtualFreeInvalidParam1">
			<description>
				<format>
                    Invalid parameter
                </format>
			</description>
			<additionalInfo>
				<format>
                    Passing <code>MEM_RELEASE</code> and
                    <code>MEM_DECOMMIT</code> in conjunction to
                    <code>%function%</code> is not allowed
                </format>
				<param name="function" format="%ls"/>
			</additionalInfo>
			<consequence>
				<format>
                    This results in the failure of this call
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates that PRE<i>f</i>ast has found an
                    invalid parameter being passed to
                    <code>VirtualFree</code> or <code>VirtualFreeEx</code>.
                </p>
				<p>
					<code>VirtualFree</code> and <code>VirtualFreeEx</code>
                    both reject the flags <code>(MEM_RELEASE |
                    MEM_DECOMMIT)</code> in combination.
                </p>
				<p>
                    MSDN documentation for <code>VirtualFree</code>
                    describes its <code>dwFreeType</code> parameter as
                    follows: 

                    <ul>
						<i>"[in] Type of free operation. This parameter can
                        be <b><u>one</u></b> of the following values."</i>
                        [ The values being <code>MEM_DECOMMIT</code> and
                        <code>MEM_RELEASE</code>. ]
                    </ul>

                    Thus, the values <code>MEM_DECOMMIT</code> and
                    <code>MEM_RELEASE</code> may not be used together in the
                    same call.
                </p>
				<p>
                    It is not necessary for the decommit and release to
                    happen as independent steps.  Releasing committed memory
                    will decommit the pages as well.
                </p>
				<p>
                    Also, ensure that the return value of this function is
                    not ignored.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%" sysIncludes="windows.h">
				<defectiveSrc><![CDATA[
                    VirtualFree(NULL,
                                0,
                                MEM_DECOMMIT | MEM_RELEASE);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    VirtualFree(NULL,
                                0,
                                MEM_RELEASE);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkFUNCTIONCALL -->
		<DefectDef guid="e84710c2-9383-4264-86d2-43dfd03d2cbd" id="332" name="VirtualFreeInvalidParam2">
			<description>
				<format>
                    Invalid parameter
                </format>
			</description>
			<additionalInfo>
				<format>
                    Passing zero as the <code>dwFreeType</code> parameter to
                    <code>%function%</code> is not allowed
                </format>
				<param name="function" format="%ls"/>
			</additionalInfo>
			<consequence>
				<format>
                    This results in the failure of this call
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates that PREfast has found an invalid
                    parameter being passed to <code>VirtualFree</code> or
                    <code>VirtualFreeEx</code>.
                </p>
				<p>
					<code>VirtualFree</code> and <code>VirtualFreeEx</code>
                    both reject a <code>dwFreeType</code> parameter of zero.
                </p>
				<p>
                    MSDN documentation for <code>VirtualFree</code>
                    describes its <code>dwFreeType</code> parameter as
                    follows:

                    <ul>
						<i>"[in] Type of free operation. This parameter can
                        be <b><u>one of the following</u></b> values."</i>
                        [ The values being <code>MEM_DECOMMIT</code> and
                        <code>MEM_RELEASE</code>. ]
                    </ul>

                    Thus, the values <code>MEM_DECOMMIT</code> and
                    <code>MEM_RELEASE</code> may not be used together in the
                    same call, but neither is zero a valid option.
                </p>
				<p>
                    Also, ensure that the return value of this function is
                    not ignored.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%" sysIncludes="windows.h">
				<defectiveSrc><![CDATA[
                    VirtualFree(NULL,
                                0,
                                0);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    VirtualFree(NULL,
                                0,
                                MEM_RELEASE);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkFUNCTIONCALL -->
		<DefectDef guid="43b09cd5-667c-4b58-a137-3f5881c67d6d" id="333" name="VirtualFreeInvalidParam3">
			<description>
				<format>
                    Invalid parameter
                </format>
			</description>
			<additionalInfo>
				<format>
                    Passing MEM_RELEASE and a non-zero dwSize parameter to
                    <code>%function%</code> is not allowed
                </format>
				<param name="function" format="%ls"/>
			</additionalInfo>
			<consequence>
				<format>
                    This results in the failure of this call
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates that PREfast has found an invalid
                    parameter being passed to <code>VirtualFree</code> or
                    <code>VirtualFreeEx</code>.
                </p>
				<p>
					<code>VirtualFree</code> and
                    <code>VirtualFreeEx</code> both reject a dwFreeType of
                    <code>MEM_RELEASE</code> when a non-zero value of
                    <code>dwSize</code> is also passed.
                </p>
				<p>
                    MSDN documentation for <code>VirtualFree</code>'s dwSize
                    parameter includes the following text:

                    <ul>
						<i>"If the dwFreeType parameter is MEM_RELEASE, this
                        parameter must be zero. The function frees the
                        entire region that was reserved in the initial
                        allocation call to <b>VirtualAlloc</b>."</i>
					</ul>

                    Thus when passing <code>MEM_RELEASE</code>, the
                    <code>dwSize</code> parameter must be zero.
                </p>
				<p>
                    Also, ensure that the return value of this function is
                    not ignored.
                </p>
			</doc>
			<example funcBody="void Precedence_%id%(DWORD RegionSize)" sysIncludes="windows.h">
				<defectiveSrc><![CDATA[
                    VirtualFree(NULL,
                                RegionSize,
                                MEM_RELEASE);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    VirtualFree(NULL,
                                0,
                                MEM_RELEASE);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!--  -->
		<!-- WalkUMINUS -->
		<DefectDef guid="f0db6a75-7021-42ce-acaa-274a0f37ea16" id="334" name="SizeofExpr">
			<description>
				<format>
                    The sizeof operator applied to an expression with an
                    operator may yield unexpected results
                </format>
			</description>
			<doc>
				<p>
                    This warning indicates that PRE<i>f</i>ast has detected
                    a misuse of the <code>sizeof</code> operator.
                </p>
				<p>
                    The <code>sizeof</code> operator, when applied to an
                    expression yields the size of the type of the resulting
                    expression.
                </p>
				<p>
                    For example, in the following code:
                </p>
				<pre>
                    char                    a[10];
                    size_t                  x;

                    x = sizeof (a + 1);
                </pre>
				<p>
					<code>x</code> will be assigned the value 4, not 9
                    because the resulting no longer a pointer to the array
                    a, but simply a pointer.
                </p>
			</doc>
			<example funcBody="int Precedence_%id%">
				<defectiveSrc><![CDATA[
                    char    a[10];

                    return sizeof (a + 4);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char    a[10];

                    return sizeof (a) - 4;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
	</DefectDefGroup>
	<DefectDefGroup guid="c1a12b07-c386-47b1-b613-f1b8919b6ea6" id="264" name="Typo">
		<display>Typo Warnings</display>
		<doc>
			<p>
                The Typo module detects problems in arguments to format
                functions, dangerous cast behavior, and mismatches between
                allocation and free functions.
            </p>
		</doc>
		<ownerURL>http://prefast</ownerURL>
		<ownerContact>PftBug</ownerContact>
		<!-- -->
		<DefectDef guid="e02b87ea-f172-438a-86a7-fc254b20b0f3" id="31" name="RETVAL_IGNORED_FUNC_COULD_FAIL">
			<description>
				<format>
                    Return value ignored
                </format>
			</description>
			<additionalInfo>
				<format>
                    %function% could return unexpected value
                </format>
				<param name="function" format="'%ls'"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that the calling function is not
                    checking the return value of a function call. The function
                    may signal failure via its return value, or the function
                    may simply return a value that the caller isn't expecting.
                    Depending on which function is being called, this defect
                    may lead to seemingly random program misbehavior, including
                    crashes and data corruptions in error conditions or
                    low-resource situations.
                </p>
				<p>
                    In general, it is not safe to assume that a call to
                    functions such as <code>ReadFile</code> (i.e., those that
                    access disk or network resources) or
                    <code>CoCreateInstance</code> (i.e., those that may
                    require memory or other resources to be allocated) will
                    always succeed. The caller should always check the
                    return value and handle error cases appropriately.
                </p>
				<p>
                    If you are intentionally ignoring the return value (for
                    example, in a situation where you are taking advantage
                    of a COM functions guarantee that it will initialize its
                    outputs to <code>NULL</code> if it fails), you can silence
                    PRE<i>f</i>ast by explicitly casting the return value to
                    <code>void</code>.
                </p>
			</doc>
			<example funcBody="void Typo_31(HANDLE *Pipe)" sysIncludes="windows.h">
				<defectiveSrc><![CDATA[
                    ImpersonateNamedPipeClient(Pipe);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if (!ImpersonateNamedPipeClient(Pipe)) {
                        // Dangerous to continue

                        return;
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_31.htm</helpURL>
		</DefectDef>
		<!-- -->
		<!--
        <DefectDef guid="9a0f2f5b-4088-4849-af61-4fc0131b599a"
            id="55"
            name="POTENTIALLY_UNTRUSTED_FORMAT_STRING">
            <format>Potentially untrusted format string '%ls' passed to '%ls'</format>
            <display>Potentially untrusted format string passed to '<PARAM>function</PARAM>'</display>
        </DefectDef>
-->
		<!-- -->
		<DefectDef guid="d42294ba-f3f4-418e-97cc-9e238f882188" id="63" name="MISSING_STRING_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
                    Format string mismatch
                </format>
			</description>
			<additionalInfo>
				<format>
                    missing string argument to %function% corresponding to
                    conversion specifier %number%
                </format>
				<param name="function" format="'%ls'"/>
				<param name="number" format="%d"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that not enough arguments are
                    being provided to match a format string; at least one of
                    the missing arguments is a string. This defect can lead
                    to crashes and buffer overflows (if the called function
                    is of the sprintf family), as well as potentially
                    incorrect output.
                </p>
				<p>
                    This warning is often reported because of subtle errors
                    contained in format strings such as extra embedded
                    spaces or unescaped percent signs. If the warning
                    appears to be incorrect, it is probably worth
                    double-checking your format string.
                </p>
				<p>
                    PRE<i>f</i>ast interprets format strings based on the
                    implementations in the VC7 C run-time library.
                </p>
			</doc>
			<example funcBody="void Typo_63" sysIncludes="stdio.h">
				<defectiveSrc><![CDATA[
                    char buff[5];

                    sprintf(buff, "%s %s", "a");
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char buff[5];

                    sprintf(buff, "%s %s", "a", "b");
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_63.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="a3a9924c-3523-4e6e-862a-6727332bca75" id="64" name="MISSING_INTEGER_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
                    Format string mismatch
                </format>
			</description>
			<additionalInfo>
				<format>
                    missing integer argument to %function% corresponding to conversion specifier %number%
                </format>
				<param name="function" format="'%ls'"/>
				<param name="number" format="%d"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that not enough arguments are
                    being provided to match a format string; all the missing
                    arguments are integers. This defect can lead to
                    incorrect output although it is not likely to lead to a
                    crash.
                </p>
				<p>
                    This warning is often reported because of subtle errors
                    contained in format strings such as extra embedded
                    spaces or unescaped percent signs. If the warning
                    appears to be incorrect, it is probably worth
                    double-checking your format string.
                </p>
				<p>
                    PRE<i>f</i>ast interprets format strings based on the
                    implementations in the VC7 C run-time library.
                </p>
			</doc>
			<example funcBody="void Typo_64(char *string)" sysIncludes="stdio.h;string.h">
				<defectiveSrc><![CDATA[
                    char buff[5];

                    sprintf(buff,
                            "%s %d",
                            string);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char buff[5];

                    sprintf(buff,
                            "%s %d",
                            string,
                            strlen(string));
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_64.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="d3b73fdf-fe49-44c4-a76f-5908f6031a8c" id="66" name="NON_POINTER_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
                    Format string mismatch
                </format>
			</description>
			<additionalInfo>
				<format>
                    non-pointer passed as parameter %number% when pointer is
                    required in call to %function%
                </format>
				<param name="number" format="%d"/>
				<param name="function" format="'%ls'"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that the format string specifies
                    that a pointer is required (e.g., a <code>%p</code> or
                    <code>%n</code> specification for <code>printf</code> or a
                    <code>%d</code> for <code>scanf</code>) but a non-pointer
                    is being passed. This defect is likely to result in a
                    crash or corruption of some form. It is also likely to
                    cause a 64-bit porting problem.
                </p>
				<p>
                    This message is often reported because an integer has
                    been used for a <code>%p</code> format instead of a
                    pointer. Using an integer in this instance is not
                    portable to 64-bit machines.
                </p>
				<p>
                    This warning may also be reported because of subtle
                    errors contained in format strings such as extra
                    embedded spaces or unescaped percent signs. If the
                    warning appears to be incorrect, it is probably worth
                    double-checking your format string.
                </p>
				<p>
                    PRE<i>f</i>ast interprets format strings based on the
                    implementations in the VC7 C run-time library.
                </p>
			</doc>
			<example funcBody="void Typo_66" sysIncludes="stdio.h">
				<defectiveSrc><![CDATA[
                    char buff[5];

                    sprintf(buff,
                            "%s %n %d",
                            "a",
                            1,
                            1);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char buff[5];
                    int  n;

                    sprintf(buff,
                            "%s %n %d",
                            "a",
                            &n,
                            1);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_66.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="561e8c44-658f-423d-ba15-e1ba65af1ad4" id="67" name="NON_STRING_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
                    Format string mismatch
                </format>
			</description>
			<additionalInfo>
				<format>
                    non-string passed as parameter %number% when string is
                    required in call to %function%
                </format>
				<param name="number" format="%d"/>
				<param name="function" format="'%ls'"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that the format string specifies
                    that a string is required (a <code>%s</code>
                    specification for <code>printf</code> or
                    <code>scanf</code>) but a non-string (e.g., an integer
                    or float) is being passed. This defect is likely to
                    result in a crash or corruption of some form.
                </p>
				<p>
                    This warning is often reported because of subtle errors
                    contained in format strings such as extra embedded
                    spaces or unescaped percent signs. If the warning
                    appears to be incorrect, it is probably worth
                    double-checking your format string.
                </p>
				<p>
                    PRE<i>f</i>ast interprets format strings based on the
                    implementations in the VC7 C run-time library.
                </p>
			</doc>
			<example funcBody="void Typo_67" sysIncludes="stdio.h">
				<defectiveSrc><![CDATA[
                    char buff[5];

                    sprintf(buff,
                            "%s %s",
                            "a",
                            1);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char buff[5];

                    sprintf(buff,
                            "%s %d",
                            "a",
                            1);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_67.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="d5fe217f-1864-4ac6-8fbd-9c6495865d96" id="69" name="GRATUITOUS_CALL_TO_FORMAT_FUNCTION">
			<description>
				<format>
                    Inefficient use of %function%
                </format>
				<param name="function" format="'%ls'"/>
			</description>
			<recommendedFix>
				<format>
                    Consider calling %function% instead
                </format>
				<param name="function" format="'%ls'"/>
			</recommendedFix>
			<doc>
				<p>
                    This warning indicates that a call is being made to a
                    format function in a situation where a call to some
                    other, non-format function could have been made instead.
                    Calling the non-format function is likely to be faster
                    and often safer as well.
                </p>
				<p>
                    When possible, PRE<i>f</i>ast recommends a specific
                    preferable function to call; if PRE<i>f</i>ast cannot
                    make a specific recommendation, it will simply recommend
                    calling <i>a_safer_function</i>.
                </p>
			</doc>
			<example funcBody="void Typo_69(char *ptr)" sysIncludes="stdio.h;string.h">
				<defectiveSrc><![CDATA[
                    char buff[5];

                    sprintf(buff,
                            ptr);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char buff[5];

                    strncpy(buff,
                            ptr,
                            5);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_69.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="cd619f59-afa7-493f-bc4e-b7c7f30ed94a" id="268" name="MISPARENTHESIZED_CASTS">
			<description>
				<format>
                    Incorrect order of operations
                </format>
			</description>
			<additionalInfo>
				<format>
                    (%TYPE1%)(%TYPE2%)x + y
                </format>
				<param name="TYPE1" format="&lt;TYPE1&gt;"/>
				<param name="TYPE2" format="&lt;TYPE2&gt;"/>
			</additionalInfo>
			<recommendedFix>
				<format>
                    Probable misparenthesization of (%TYPE1%)((%TYPE2%)x + y)
                </format>
				<param name="TYPE1" format="&lt;TYPE1&gt;"/>
				<param name="TYPE2" format="&lt;TYPE2&gt;"/>
			</recommendedFix>
			<doc>
				<p>
                    This warning indicates that a complex cast expression
                    that may involve a precedence problem when performing
                    pointer arithmetic. Since casts group more closely than
                    binary operators, the result may not be what the
                    programmer intended.
                </p>
				<p>
                    In some cases, this defect may result in incorrect
                    behavior or a program crash.
                </p>
				<p>
                    In an expression such as:

                    <ul>
						<code>
                            (char *)p + offset
                        </code>
					</ul>

                    the offset is interpreted as an offset in characters;
                    however, the expression:

                    <ul>
						<code>
                            (int *)(char *)p + offset
                        </code>
					</ul>

                    is equivalent to:

                    <ul>
						<code>
                            ((int *)(char *)p) + offset
                        </code>
					</ul>

                    and so the offset is interpreted as an offset in
                    integers - in other words, it is equivalent to:

                    <ul>
						<code>
                            (int *)((char *)p + offset * sizeof (int))
                        </code>
					</ul>

                    which is not likely to be what is intended.
                </p>
				<p>
                    Depending on the relative sizes of the two types, this
                    can lead to a buffer overrun.
                </p>
			</doc>
			<example funcBody="void Typo_268(int *p, int offset_in_bytes)">
				<defectiveSrc><![CDATA[
                    int *ptr = (int *)(char *)p + offset_in_bytes;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    int *ptr = (int *)((char *)p + offset_in_bytes);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_268.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="e55357c6-254b-4ddf-ab4a-77adbecdd517" id="269" name="POINTER_DEREF_DISCARDED">
			<description>
				<format>
                    Incorrect order of operations
                </format>
			</description>
			<additionalInfo>
				<format>
                    dereference ignored
                </format>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that the result of a pointer
                    dereference is being ignored, which raises the question
                    of why the pointer is being dereferenced in the first
                    place.
                </p>
				<p>
                    The compiler will correctly optimize away the gratuitous
                    dereference. In some cases, however, this defect may
                    reflect a precedence or logic error.
                </p>
				<p>
                    One common cause for this defect is an expression
                    statement of the form:

                    <ul>
						<code>
                            *p++;
                        </code>
					</ul>
				</p>
				<p>
                    If the intent of this statement is simply to increment
                    the pointer p, the dereference is unnecessary; however,
                    if the intent is to increment the content of the
                    location that p is pointing to, the program will not
                    behave as intended:  unary operators group from right to
                    left, so this construct is interpreted as
                    <code>*(p++)</code> rather than <code>(*p)++</code>.
                </p>
			</doc>
			<example funcBody="void Typo_269(int *p)">
				<defectiveSrc><![CDATA[
                    *p++;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    (*p)++;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_269.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="f6044e4a-5574-4d58-ab84-83c9538698ff" id="270" name="MISSING_FLOAT_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
                    Format string mismatch
                </format>
			</description>
			<additionalInfo>
				<format>
                    missing float argument to %function%
                </format>
				<param name="function" format="'%ls'"/>
			</additionalInfo>
			<recommendedFix>
				<format>
                    Add a float argument corresponding to conversion specifier %number%
                </format>
				<param name="number" format="%d"/>
			</recommendedFix>
			<doc>
				<p>
                    This warning indicates that not enough arguments are
                    being provided to match a format string; at least one of
                    the missing arguments is a floating-point number. This
                    defect can lead to crashes, as well as potentially
                    incorrect output.
                </p>
				<p>
                    This warning is often reported because of subtle errors
                    contained in format strings such as extra embedded
                    spaces or unescaped percent signs. If the warning
                    appears to be incorrect, it is probably worth
                    double-checking your format string.
                </p>
				<p>
                    PRE<i>f</i>ast interprets format strings based on the
                    implementations in the VC7 C run-time library.
                </p>
			</doc>
			<example funcBody="void Typo_270" sysIncludes="stdio.h">
				<defectiveSrc><![CDATA[
                    char buff [25];

                    sprintf(buff,
                            "%s %f",
                            "pi:");
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char buff [25];

                    sprintf(buff,
                            "%s %f",
                            "pi:",
                            3.1415);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_270.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="5318acc3-2609-4a27-a534-0fbe8c9ae586" id="271" name="EXTRA_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
                    Format string mismatch
                </format>
			</description>
			<additionalInfo>
				<format>
                    extra argument passed to %function%
                </format>
				<param name="function" format="'%ls'"/>
			</additionalInfo>
			<consequence>
				<format>
                    Parameter %number% is not used by the format string
                </format>
				<param name="number" format="%d"/>
			</consequence>
			<doc>
				<p>
                    This warning indicates that extra arguments are being
                    provided beyond those specified by the format string. By
                    itself, this defect will not have any visible effect
                    although it may indicate some other problems.
                </p>
				<p>
                    This warning is often reported because of subtle errors
                    contained in format strings such as extra embedded
                    spaces or unescaped percent signs. If the warning
                    appears to be incorrect, it is probably worth
                    double-checking your format string.
                </p>
				<p>
                    PRE<i>f</i>ast interprets format strings based on the
                    implementations in the VC7 C run-time library
                </p>
			</doc>
			<example funcBody="void Typo_271" sysIncludes="stdio.h">
				<defectiveSrc><![CDATA[
                    char buff[5];

                    sprintf(buff,
                            "%d",
                            1,
                            2);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char buff[5];

                    sprintf(buff,
                            "%d, %d",
                            1,
                            2);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_271.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="81c6f23d-d0e9-4423-a3ab-3873a461e4c7" id="272" name="NON_FLOAT_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
                    Format string mismatch
                </format>
			</description>
			<additionalInfo>
				<format>
                    non-float passed as argument %number% when float is
                    required in call to %function%
                </format>
				<param name="number" format="%d"/>
				<param name="function" format="'%ls'"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that the format string specifies
                    that a float is required (e.g., a <code>%f</code> or
                    <code>%g</code> specification for <code>printf</code>)
                    but a non-float such as an integer or string is being
                    passed. This defect is likely to result in incorrect
                    output; however, in certain circumstances it could
                    result in a crash.
                </p>
				<p>
                    This warning is often reported because of subtle errors
                    contained in format strings such as extra embedded
                    spaces or unescaped percent signs. If the warning
                    appears to be incorrect, it is probably worth
                    double-checking your format string.
                </p>
				<p>
                    PRE<i>f</i>ast interprets format strings based on the
                    implementations in the VC7 C run-time library.
                </p>
			</doc>
			<example funcBody="void Typo_272(int i)" sysIncludes="stdio.h">
				<defectiveSrc><![CDATA[
                    char buff[5];

                    sprintf(buff,
                            "%s %f",
                            "a",
                            i);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char buff[5];

                    sprintf(buff,
                            "%s %i",
                            "a",
                            i);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_272.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="d10a22fb-89a1-4e9f-847f-db7bbbae95ed" id="273" name="NON_INTEGER_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
                    Format string mismatch
                </format>
			</description>
			<additionalInfo>
				<format>
                    non-integer passed as parameter %number% when integer is
                    required in call to %function%. If a pointer value
                    is being passed, %%p should be used, not %%x, %%d or
                    any other format string because only %%p is designed to be
                    used with pointer values on 64-bit platforms
                </format>
				<param name="number" format="%d"/>
				<param name="function" format="'%ls'"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that the format string specifies
                    that an integer is required (e.g., a <code>%d</code>,
                    length or precedence specification for
                    <code>printf</code>) but a non-integer such as a float,
                    string, or struct is being passed. This defect is likely
                    to result in incorrect output.
                </p>
				<p>
                    In particular, if a pointer value is being passed,
                    %p should be used, not %x, %d or
                    any other format string because only %p is designed to be
                    used with pointer values on 64-bit platforms
                </p>
				<p>
                    This warning is often reported because of subtle errors
                    contained in format strings such as extra embedded
                    spaces or unescaped percent signs. If the warning
                    appears to be incorrect, it is probably worth
                    double-checking your format string.
                </p>
				<p>
                    PRE<i>f</i>ast interprets format strings based on the
                    implementations in the VC7 C run-time library.
                </p>
			</doc>
			<example funcBody="void Typo_273(float f)" sysIncludes="stdio.h">
				<defectiveSrc><![CDATA[
                    char buff[50];

                    sprintf(buff,
                            "%*.*s",
                            f,
                            1,
                            "cool");
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char buff[50];

                    sprintf(buff,
                            "%*.*s",
                            (int)f,
                            1,
                            "cool");
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_273.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="9ccc928f-ac6c-4b5f-af83-23f2008f69ec" id="274" name="NON_CHAR_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
                    Format string mismatch
                </format>
			</description>
			<additionalInfo>
				<format>
                    non-character passed as parameter %number% when
                    character is required in call to %function%
                </format>
				<param name="number" format="%d"/>
				<param name="function" format="'%ls'"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that the format string specifies
                    that a character is required (e.g., a <code>%c</code> or
                    <code>%C</code> specification) but a non-integer such as
                    a float, string, or struct is being passed. This defect
                    is likely to result in incorrect output.
                </p>
				<p>
                    This warning is often reported because of subtle errors
                    contained in format strings such as extra embedded
                    spaces or unescaped percent signs. If the warning
                    appears to be incorrect, it is probably worth
                    double-checking your format string.
                </p>
				<p>
                    PRE<i>f</i>ast interprets format strings based on the
                    implementations in the VC7 C run-time library.
                </p>
			</doc>
			<example funcBody="void Typo_274(char *str)" sysIncludes="stdio.h">
				<defectiveSrc><![CDATA[
                    char buff[5];

                    sprintf(buff,
                            "%c",
                            str);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char buff[5];

                    sprintf(buff,
                            "%c",
                            str[0]);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_274.htm</helpURL>
		</DefectDef>
		<!-- -->
		<!--
        <DefectDef guid="a0e0df8d-42d7-4383-aeb1-b2a475831189"
            id="275"
            name="WCHAR_TO_CHAR_CAST">
            <format>Casting from wchar_t* to char* type</format>
        </DefectDef>
-->
		<!-- -->
		<DefectDef guid="9faf3d5b-96a9-4f86-a9cf-452c0ed3e20f" id="276" name="CHAR_TO_WCHAR_CAST">
			<description>
				<format>
                   Cast between semantically different string types
               </format>
			</description>
			<additionalInfo>
				<format>
                    char * to wchar_t *
                </format>
			</additionalInfo>
			<consequence>
				<format>
                    This will result in garbled strings and possible crashes
                    on 64-bit builds
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates a potentially incorrect cast from
                    an ANSI string <code>(char_t *)</code> to a Unicode
                    string <code>(wchar_t *)</code>.  Since Unicode strings
                    have a character size of 2 bytes, this cast may yield
                    strings that are not correctly terminated.  Using such
                    strings with the wcs* library of functions can result in
                    buffer overruns and access violations.
                </p>
			</doc>
			<example funcBody="void Typo_276" sysIncludes="windows.h">
				<defectiveSrc><![CDATA[
                    LPWSTR pSrc = (LPWSTR)"a";

                    WCHAR szBuffer[2];

                    wcscpy(szBuffer,
                           pSrc);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    LPWSTR pSrc = L"a";

                    WCHAR szBuffer[100];

                    wcscpy(szBuffer,
                           pSrc);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_276.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="35A0B24C-20EB-417a-AF3D-CABA449A8E56" id="298" name="CONST_STRING_TO_WRITABLE_STRING">
			<description>
				<format>
                    Using a read-only string %pointer% as a writable string argument
                </format>
				<param name="pointer" format="'%ls'"/>
			</description>
			<consequence>
				<format>
                    This will attempt to write into static read-only memory and
                    cause random crashes
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates a potentially dangerous use of a constant
                    string as an argument to a function that may modify the contents
                    of that string. Since the compiler allocates constant strings in
                    a static read-only memory, any attempts to modify it will cause
                    access violations and random crashes.
                </p>
				<p>
                    This can be avoided by copying the constant string into a local
                    array and using the array as the argument to the function.
                </p>
			</doc>
			<example funcBody="void Typo_298" sysIncludes="windows.h" globalDecls="STARTUPINFO Si;PROCESS_INFORMATION Pi;">
				<defectiveSrc><![CDATA[
                    CreateProcessA(NULL,
                                   "MyApp.exe -?",
                                   NULL,
                                   NULL,
                                   FALSE,
                                   0,
                                   NULL,
                                   NULL,
                                   &Si,
                                   &Pi);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char szCmdLine[] = "MyApp.exe -?";

                    CreateProcessA(NULL,
                                   szCmdLine,
                                   NULL,
                                   NULL,
                                   FALSE,
                                   0,
                                   NULL,
                                   NULL,
                                   &Si,
                                   &Pi);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_298.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="c2bc8ed7-74b7-4c82-b659-00e683fab24b" id="299" name="BITFIELD_TO_BOOL_COMPARISON">
			<description>
				<format>
                    Explicitly comparing a bit field to a Boolean will yield
                    unexpected results
                </format>
			</description>
			<doc>
				<p>
                    This warning indicates an incorrect assumption that
                    booleans and bit fields are equivalent. Assigning 1 to
                    bit fields will place 1 in it's single bit. However any
                    comparison of this bit field to 1 includes an implicit
                    cast of the bit field to a signed int. This cast will
                    convert the stored 1 to a -1 and the comparison can
                    yield unexpected results.
                </p>
			</doc>
			<example funcBody="void Typo_299(struct A a)" globalDecls="struct A {int flag:1;} a;">
				<defectiveSrc><![CDATA[
                    if (a.flag == 1 /* == TRUE */) {
                        // will not execute
                        ;
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if (a.flag) {
                        // may execute
                        ;
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_299.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="632c2d60-22b8-4683-a091-fbe374629002" id="277" name="CREATEPROCESS_ESCAPE">
			<description>
				<format>
                    Dangerous call to %function%
                </format>
				<param name="function" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
                    NULL application name with an unquoted path
                </format>
			</additionalInfo>
			<consequence>
				<format>
                    This results in a security vulnerability if the path 
                    contains spaces
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates a potential security problem.
                    Creating processes with explicit strings for the process
                    name requires that you escape the spaces in the name.
                    Without this precaution, the code may create
                    unintentional processes. More information on security
                    best practices can be found on the <a href="http://swiweb/">Secure Windows Initiative</a> web
                    pages.
                </p>
				<p>
                    This warning is sometimes reported in situations where
                    the space occurs between the executable name and the
                    argument. In this case, unless the executable name is
                    fully qualified, there is likely to be a security
                    problem in that an attacker may be able to insert a
                    rogue executable with the same name earlier in the path
                    than expected.
                </p>
			</doc>
			<example funcBody="void Typo_%id%" sysIncludes="windows.h">
				<defectiveSrc><![CDATA[
                    CreateProcessA(NULL,
                                   "c:\\program files\\foo.exe arg1",
                                   NULL,
                                   NULL,
                                   FALSE,
                                   0,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    CreateProcessA(NULL,
                                   "\"c:\\program files\\foo.exe\" arg1",
                                   NULL,
                                   NULL,
                                   FALSE,
                                   0,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_%id%.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="9faf3d5b-96a9-4f86-a9cf-452c0ed3e20f" id="278" name="ARRAY_NEW_DELETE_MISMATCH">
			<description>
				<format>
                    Allocation/free mismatch
                </format>
			</description>
			<additionalInfo>
				<format>
                    %variable% is allocated with array new [], but deleted
                    with scalar delete (see allocation at %location%)
                </format>
				<param name="variable" format="'%ls'"/>
				<param name="location" format="line %d of %ls"/>
			</additionalInfo>
			<consequence>
				<format>
                    Destructors will not be called
                </format>
			</consequence>
			<doc>
				<p>
                    This warning appears only in C++ code and indicates that
                    the calling function has inconsistently allocated memory
                    with the array <code>new[]</code> operator, but freed it
                    with the scalar <code>delete</code> operator. This is
                    undefined behavior according to the C++ standard and the
                    Microsoft VC++ implementation. There are at least three
                    reasons that this is likely to cause problems:

                    <ul>
						<li>
                            The constructors for the individual objects in
                            the array are invoked, but the destructors are
                            not invoked;
                        </li>
						<li>
                            If global (or class-specific) <code>operator
                            new</code> and <code>operator delete</code> are
                            not compatible with <code>operator new[]</code>
                            and <code>operator delete[]</code>, unexpected
                            results are likely to occur;
                        </li>
						<li>
                            It is always very risky to rely on undefined
                            behavior.
                        </li>
					</ul>
				</p>
				<p>
                    The exact ramifications of this defect are difficult to
                    predict. It may result in leaks (for classes with
                    destructors which perform memory de-allocation),
                    inconsistent behavior (for classes with destructors that
                    perform some semantically significant operation), or
                    memory corruptions and crashes (in situations where
                    operators have been overridden). In other cases the
                    mismatch may be unimportant, depending on the
                    implementation of the compiler and its libraries.
                    PRE<i>f</i>ast cannot always distinguish between these
                    situations.
                </p>
				<p>
                    If memory is allocated with array <code>new[]</code>, it
                    should be typically be freed with array
                    <code>delete[]</code>.
                </p>
				<p>
                    In situations where the underlying object in the array
                    is a primitive type such as int, float, enum, or
                    pointer, there are no destructors to be called.  In this
                    case, warning 283 is reported instead.
                </p>
				<p>
                    This message is often reported on character or wide
                    character arrays. In this case, unless operators are
                    being overridden there may not be any significant
                    consequences of the mismatch; rather than an active
                    defect, it may be more appropriate to treat the warning
                    as a maintenance issue.
                </p>
			</doc>
			<example funcBody="void Typo_278(int arraySize)" globalDecls="class C {;};">
				<defectiveSrc><![CDATA[
                    C *pC = new C[arraySize];

                    delete pC;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    C *pC = new C[arraySize];

                    delete[] pC;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_278.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="df8f08b8-f7fc-4da2-b1a9-2ccc8df982c9" id="279" name="NEW_ARRAY_DELETE_MISMATCH">
			<description>
				<format>
                    Allocation/free mismatch
                </format>
			</description>
			<additionalInfo>
				<format>
                    %variable% is allocated with scalar new, but deleted
                    with array delete [] (see allocation at %location%)
                </format>
				<param name="variable" format="'%ls'"/>
				<param name="location" format="line %d of %ls"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning appears only in C++ code and indicates that
                    the calling function has inconsistently allocated memory
                    with the scalar new operator, but freed it with the
                    array <code>delete[]</code> operator. This is undefined
                    behavior according to the C++ standard and the Microsoft
                    VC++ implementation. There are at least three reasons
                    that this is likely to cause problems:

                    <ul>
						<li>
                            The constructors for the individual objects in
                            the array are not invoked (although the
                            destructors are);
                        </li>
						<li>
                            If global (or class-specific) <code>operator
                            new</code> and <code>operator delete</code> are
                            not compatible with <code>operator new[]</code>
                            and <code>operator delete[]</code>, unexpected
                            results are likely to occur;
                        </li>
						<li>
                            If memory is allocated with scalar new, it should
                            typically be freed with scalar delete.
                        </li>
					</ul>
				</p>
				<p>
                    The exact ramifications of this defect are difficult to
                    predict.  It may result in random behavior or crashes
                    (due to usage of uninitialized memory because
                    constructors are not invoked), or memory allocations and
                    crashes (in situations where operators have been
                    overridden). In rare cases the mismatch may be
                    unimportant. PRE<i>f</i>ast does not currently distinguish
                    between these situations.
                </p>
			</doc>
			<example funcBody="void Typo_279(int arraySize)" globalDecls="class C { ; };">
				<defectiveSrc><![CDATA[
                    C *pC = (C *)new char[arraySize * sizeof (C)];

                    delete[] pC;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    C *pC = (C *)new C[arraySize];

                    delete[] pC;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_279.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="a66bee52-5854-4b99-a4da-3886b3708a80" id="280" name="MEMORY_ALLOCATION_MISMATCH">
			<description>
				<format>
                    Allocation/free mismatch
                </format>
			</description>
			<additionalInfo>
				<format>
                    %variable% is allocated with %function1%, but deleted with
                    %function2% (see allocation at %location%)
                </format>
				<param name="variable" format="'%ls'"/>
				<param name="function1" format="'%ls'" display="&lt;function&gt;"/>
				<param name="function2" format="'%ls'" display="&lt;function&gt;"/>
				<param name="location" format="line %d of %ls"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that the calling function has
                    inconsistently allocated memory with a function from one
                    memory allocation family and freed it with a function
                    from another memory allocation family.
                </p>
				<p>
                    For example, this warning would be produced if memory is
                    allocated with <code>malloc</code> but freed with
                    <code>GlobalFree</code> or <code>delete</code>. Note that
                    in the specific cases of mismatches between array
                    <code>new[]</code> and scalar <code>delete</code> (or vice
                    versa) the more precise warnings 278, 279, or 283 are
                    reported instead.
                </p>
				<p>
                    Different API definitions may use different heaps
                    (<code>GlobalAlloc</code> uses system heap, and
                    <code>free</code> uses C heap for example) and the
                    allocation/free routines on NT (at least, probably other
                    operating systems too) do not do validation of
                    pointers/handles for performance reasons.  This defect
                    is likely to result in memory corruptions and crashes.
                </p>
			</doc>
			<example funcBody="void Typo_280(int arraySize)" sysIncludes="stdlib.h">
				<defectiveSrc><![CDATA[
                    int *pInt= (int *)calloc(arraySize,
                                             sizeof (int));

                    delete pInt;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    int *pInt= (int *)calloc(arraySize,
                                             sizeof (int));

                    free(pInt);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_280.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="7d1ddaf7-a365-4103-8f19-f30b2e45db07" id="283" name="PRIMITIVE_ARRAY_NEW_DELETE_MISMATCH">
			<description>
				<format>
                    Allocation/free mismatch
                </format>
			</description>
			<additionalInfo>
				<format>
                    %variable% is allocated with array new [], but deleted
                    with scalar delete (see allocation at %location%)
                </format>
				<param name="variable" format="'%ls'"/>
				<param name="location" format="line %d of %ls"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning appears only in C++ code and indicates that
                    the calling function has inconsistently allocated memory
                    with the array <code>new[]</code> operator, but freed it
                    with the scalar <code>delete</code> operator. This is
                    undefined behavior according to the C++ standard;
                    however, when using default global operators, it behaves
                    correctly with the Microsoft VC++ 6.0 and 7.0
                    implementations. In addition to the inherent risk
                    involved in relying on undefined behavior, if global (or
                    class-specific) <code>operator new</code> and
                    <code>operator delete</code> are not compatible with
                    <code>operator new[]</code> and <code>operator
                    delete[]</code>, unexpected results are likely to occur.
                </p>
				<p>
                    The exact ramifications of this defect are difficult to
                    predict. It may result in leaks, memory corruptions, and
                    crashes (in situations where operators have been
                    overridden). In most cases the mismatch may be
                    unimportant, depending on the implementation of the
                    compiler and its libraries. PRE<i>f</i>ast cannot
                    distinguish between these situations.
                </p>
				<p>
                    If memory is allocated with array <code>new[]</code>,
                    it should typically be freed with array
                    <code>delete[]</code>.
                </p>
				<p>
                    In situations where the underlying object in the array
                    is a class type, there is an additional complication:
                    the destructors for the individual objects are not
                    called. In this case, warning 278 is reported instead.
                </p>
				<p>
                    This message is often reported on character (or wide
                    character) arrays.
                </p>
			</doc>
			<example funcBody="void Typo_283(int arraySize)">
				<defectiveSrc><![CDATA[
                    char *str = new char[arraySize];

                    delete str;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char *str = new char[arraySize];

                    delete[] str;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_283.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="d678177b-8e65-4b73-b44a-e40f8a5d7df9" id="300" name="DISCARDED_TOP_LEVEL_EXPRESSION">
			<description>
				<format>
                    Discarded the results of top level expression %expression%
                </format>
				<param name="expression" format="'%ls'"/>
			</description>
			<doc>
				<p>
                    This warning indicates a potential typo or operator
                    precedence error. The offending statement may be a top
                    level expression with no side-effects. Though
                    syntactically correct, this may not be the programmer's
                    intention.
                </p>
			</doc>
			<example funcBody="void Typo_300(int i, int j)">
				<defectiveSrc><![CDATA[
                    i == j; // The boolean result of '==' is ignored. Was '=' intended?
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    i = j;
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_300.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="13c7464f-b664-4967-a9ea-edefa526efd3" id="301" name="DEPRECATED_FUNCTION_USAGE">
			<description>
				<format>
                    %function% is deprecated
                </format>
				<param name="function" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
                    please refer to MSDN for more details
                </format>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates the use of deprecated functions. Please
                    refer to MSDN for semantically equivalent newer functions.
                </p>
			</doc>
			<helpURL>http://prefast/userguide/warning_301.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="561e8c44-658f-423d-ba15-e1ba65af1ad4" id="284" name="OBJECT_AS_STRING_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
                    Format string mismatch
                </format>
			</description>
			<additionalInfo>
				<format>
                    object passed as parameter %number% when string is
                    required in call to %function%
                </format>
				<param name="number" format="%d"/>
				<param name="function" format="'%ls'"/>
			</additionalInfo>
			<consequence>
				<format>
                    Object will be converted to integer, not string
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates that the format string specifies
                    that a string is required (e.g., a <code>%s</code>
                    specification for <code>printf</code> or
                    <code>scanf</code>) but a C++ object has been passed
                    instead.
                </p>
				<p>
                    This defect is likely to result in a crash or corruption
                    of some form. Even if the code behaves correctly on
                    32-bit architectures, it is likely to cause problems
                    when porting to 64-bit architectures.
                </p>
				<p>
                    This message is often reported due to passing a C++
                    object implementing some string type (e.g.,
                    <code>std::string</code>,
                    <code>CComBSTR</code> or <code>_bstr_t</code>) into a C
                    printf-style call.  Depending on the implementation of
                    the C++ class (i.e., if the proper cast operators are
                    defined), C++ string objects can often be used
                    transparently whenever C strings are required; however,
                    because parameters to printf-style functions are
                    essentially untyped, no conversion to a string occurs.
                </p>
				<p>
                    Depending on the object, it may be appropriate to insert
                    a <code>static_cast</code> operator to the appropriate
                    string type (e.g., <code>char *</code> or <code>TCHAR
                    *</code>) or to call a member function which returns a
                    string (e.g., <code>c_str()</code>, on instances of
                    <code>std::string</code>).
                </p>
			</doc>
			<example funcBody="void Typo_284(char *buff)" sysIncludes="stdio.h;atlbase.h">
				<defectiveSrc><![CDATA[
                    CComBSTR bstrValue;

                    sprintf(buff,
                            "%ws",
                            bstrValue);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    CComBSTR bstrValue;

                    sprintf(buff,
                            "%ws",
                            static_cast<wchar_t *>(bstrValue));
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_284.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="404ac1ad-a979-4980-901c-bff8bc089b2d" id="302" name="CHAR_WCHAR_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
                    Format string mismatch
                </format>
			</description>
			<additionalInfo>
				<format>
                    character string passed as parameter %number% when wide
                    character string is required in call to %function%
                </format>
				<param name="number" format="%d"/>
				<param name="function" format="'%ls'"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that the format string specifies
                    that a wide character string is required but a character
                    string is being passed. This defect is likely to
                    result in a crash or corruption of some form.
                </p>
				<p>
                    PRE<i>f</i>ast interprets format strings based on the
                    implementations in the VC7 C run-time library.
                </p>
			</doc>
			<example funcBody="void Typo_302" sysIncludes="stdio.h">
				<defectiveSrc><![CDATA[
                    char buff[5] = "hi";

                    wprintf(L"%s", buff);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char buff[5];

                    wprintf(L"%hs", buff);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_302.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="494f3f1e-23ce-4268-80f5-710dbfa2e847" id="303" name="WCHAR_CHAR_ARGUMENT_TO_FORMAT_FUNCTION">
			<description>
				<format>
                    Format string mismatch
                </format>
			</description>
			<additionalInfo>
				<format>
                    wide character string passed as parameter %number% when
                    character string is required in call to %function%
                </format>
				<param name="number" format="%d"/>
				<param name="function" format="'%ls'"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that the format string specifies
                    that a character string is required but a wide character
                    string is being passed. This defect is likely to
                    result in a crash or corruption of some form.
                </p>
				<p>
                    PRE<i>f</i>ast interprets format strings based on the
                    implementations in the VC7 C run-time library.
                </p>
			</doc>
			<example funcBody="void Typo_303" sysIncludes="stdio.h;wchar.h">
				<defectiveSrc><![CDATA[
                    wchar_t buff[5] = L"hi";

                    printf("%s", buff);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    wchar_t buff[5];

                    printf("%ls", buff);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_303.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="20912b7b-62ed-4473-a0bb-726a4b1f4068" id="304" name="ADDRESSOF_LOCAL_ARRAY">
			<description>
				<format>
                    Address of local array %variable% is the same as the
                    local array variable
                </format>
				<param name="variable" format="'%ls'"/>
			</description>
			<question>
				<format>
                    The address of operation is a no-op. Was it intended
                </format>
			</question>
			<doc>
				<p>
                    This warning indicates a redundant operation that may not
                    be the programmer's intention.
                </p>
			</doc>
			<example funcBody="void Typo_304" sysIncludes="wchar.h">
				<defectiveSrc><![CDATA[
                    wchar_t a[5];
                    wchar_t *p;
                    // Skip over couple of backslashes, but forgot the index.
                    p = &a;
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    wchar_t a[5];
                    wchar_t *p;
                    // Skip over couple of backslashes.
                    p = &a[2];
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_304.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="48aebde9-00ac-42df-8821-200a87e6cd53" id="306" name="INCORRECT_VARARG_FUNCTIONCALL">
			<description>
				<format>
                    Incorrect call to %function%. Consider using %alt_func%
                    which accepts a va_list as an argument
                </format>
				<param name="function" format="'%ls'"/>
				<param name="alt_func" format="'%ls'" display="an alternate function"/>
			</description>
			<doc>
				<p>
                    This warning indicates an incorrect function call. The
                    printf family includes several functions that take a
                    variable list of arguments. However these functions can
                    not be called with a va_list argument. There is a
                    corresponding vprintf family of functions which can be
                    used for such calls.
                </p>
			</doc>
			<example funcBody="void Typo_306(char *pformat, ...)" sysIncludes="stdarg.h;stdio.h">
				<defectiveSrc><![CDATA[
                    va_list v;

                    va_start(v, pformat);
                    printf(pformat, v);
                    va_end(v);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    va_list v;

                    va_start(v, pformat);
                    vprintf(pformat, v);
                    va_end(v);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_306.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="40ae9be1-5b7d-4ecf-b51a-8ca208c41458" id="307" name="WCHAR_TO_BSTR">
			<description>
				<format>
                   Cast between semantically different string types
               </format>
			</description>
			<additionalInfo>
				<format>
                    wchar * to BSTR
                </format>
			</additionalInfo>
			<doc>
				<p>
                    The memory layout and management of wchar * and BSTR are
                    different.  If the function attempts to find the length
                    of the BSTR, free it or pass it to another function or
                    Win32 API that is expecting a BSTR, this call could
                    cause an access violation.
                </p>
			</doc>
			<example funcBody="void Typo_307" sysIncludes="windows.h" globalDecls="extern void foo(BSTR);">
				<defectiveSrc><![CDATA[
                    LPWSTR pSrc = L"Hi";

                    foo(pSrc);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    LPWSTR pSrc = L"Hi";
                    BSTR bSrc = SysAllocString(pSrc);

                    foo(bSrc);
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_307.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="99468443-19e5-413d-b60b-66744bb6b524" id="309" name="PASSING_FUNCTION_UNEXPECTED_NULL">
			<description>
				<format>
                    Potential NULL argument %number% to %function%
               </format>
				<param name="number" format="%d"/>
				<param name="function" format="'%ls'"/>
			</description>
			<doc>
				<p>
                    Passing to an API an unexpected NULL parameter as an arguement.
                </p>
			</doc>
			<example funcBody="void Typo_309" sysIncludes="string.h">
				<defectiveSrc><![CDATA[
                    strcpy(NULL,"data");
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    char szDest[20];

                    strcpy(szDest,"data");
                ]]></correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_309.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="ce23330b-9b63-4281-91cd-7678d3a8f0f6" id="321" name="FULLPATHNAME_NOT_USED">
			<description>
				<format>
                    Potential use of relative pathname in call to LoadLibrary(A/W/ExA/ExW)
               </format>
			</description>
			<doc>
				<p>
                    Passing a relative pathname to LoadLibrary(A/W/ExA/ExW) may result in picking up the wrong dll inadvertantly, 
					(depending on what the current directory is), thus resulting in a security hole. 
					Programmers developing on the .NET server could ignore this warning by filtering it out.
                </p>
			</doc>
			<example funcBody="void Typo_321">
				<defectiveSrc>
					<![CDATA[
                     LoadLibrary("..\dir2\file.ext");
                ]]>
				</defectiveSrc>
				<correctedSrc>
					<![CDATA[
                     LoadLibrary("C:\dir1\dir2\file.ext");
                ]]>
				</correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_321.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="0e6adf88-bb54-4b1e-acf7-2a72264e67af" id="322" name="EXCEPT_BLOCK_EMPTY">
			<description>
				<format>
                    Empty _except block
               </format>
			</description>
			<doc>
				<p>
                    No code in the _except block. Some exceptions may go unhandled.
                </p>
			</doc>
			<example funcBody="void Typo_322">
				<defectiveSrc>
					<![CDATA[
                    void main()
					 {
						__try
						{
                         someFunction();
						}
						__except(1)
						{
                           
						}
    
					} 
                ]]>
				</defectiveSrc>
				<correctedSrc>
					<![CDATA[
                     void main()
					 {
						__try
						{
                          someFunction();
						}
						__except(1)
						{
                          handleException(); 
						}
    
					} 
                ]]>
				</correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_322.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="3467dfc6-3504-4561-83cc-ff493aabc33e" id="323" name="ARITH_OP_ON_BOOL">
			<description>
				<format>
                    Use of arithmetic operator on bool(s)
               </format>
			</description>
			<doc>
				<p>
                  Use of arithmetic operator on bool(s) may yield unexpected values. A true value 
				  can be anything nonzero.
                </p>
			</doc>
			<example funcBody="void Typo_323">
				<defectiveSrc>
					<![CDATA[
                     ans = (a && b) * (a || b); 
                ]]>
				</defectiveSrc>
				<correctedSrc>
					<![CDATA[
                      
                ]]>
				</correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_323.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="dd420260-000f-4645-bcd5-88340ccdfbf5" id="324" name="STRCPY_INSTEAD_OF_STRCMP">
			<description>
				<format>
                    Potential incorrect use of strcpy
               </format>
			</description>
			<question>
				<format>
                    Did you intend to use strcmp 
                </format>
			</question>
			<example funcBody="void Typo_324">
				<defectiveSrc>
					<![CDATA[
                     (strcpy (name, "dipa") == 0)
                ]]>
				</defectiveSrc>
				<correctedSrc>
					<![CDATA[
                     (strcmp (name, "dipa") == 0)
                ]]>
				</correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_324.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="215301bf-8af9-40c6-9082-8916b30ce87a" id="325" name="NULL_COMPARISON_FOR_BSTR">
			<description>
				<format>
                    Potential comparison of BSTR with NULL. BSTRs can be (semantically) null in two ways, 
					i.e. the encoded length of the BSTR is 0 or the pointer itself in NULL
               </format>
			</description>
			<question>
				<format>
                    Did you intend to call SysStringLen 
                </format>
			</question>
			<doc>
				<p>
                    BSTRs can be (semantically) null in two ways, i.e. the encoded length of the BSTR is 0
					or the pointer itself in NULL.
                </p>
			</doc>
			<example funcBody="void Typo_325">
				<defectiveSrc>
					<![CDATA[
                    BSTR tstr;
                    int flag;

                    if (tstr == NULL)
                    {
                     flag = 0;
                    } 
                ]]>
				</defectiveSrc>
				<correctedSrc>
					<![CDATA[
                    BSTR tstr;
                    int flag;

                    if (SysStringLen(tstr) == 0)
                    {
                     flag = 0;
                    }  
                ]]>
				</correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_325.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="04692fe4-717b-453e-9f98-9b502e24331b" id="326" name="CONST_CONST_COMP">
			<description>
				<format>
                    Potential comparison of a constant with constant
               </format>
			</description>
			<doc>
				<p>
                    Comparing a constant with a constant is redundant code.
                </p>
			</doc>
			<example funcBody="void Typo_326">
				<defectiveSrc>
					<![CDATA[
                   (0 != 1)  
                ]]>
				</defectiveSrc>
				<correctedSrc>
					<![CDATA[
                     
                ]]>
				</correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_326.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="7787d475-a8b1-4f60-a124-265e3df82e02" id="327" name="DEST_BUFFER_INSUFFICIENT">
			<description>
				<format>
                  Potential buffer-overrun. SysAllocStringLen allocates a string and then blindly copies %constant% characters
				  from the string %string%.
				  The code may crash, depending on the data segment layout
               </format>
				<param name="constant" format="'%d'"/>
				<param name="string" format="'%ls'"/>
			</description>
			<doc>
				<format>
                  Potential buffer-overrun. SysAllocStringLen allocates a string and then blindly copies %constant% characters
				  from the string %string%.
				  The code may crash, depending on the data segment layout
               </format>
				<param name="constant" format="'%d'"/>
				<param name="string" format="'%ls'"/>
			</doc>
			<example funcBody="void Typo_327">
				<defectiveSrc>
					<![CDATA[
                     SysAllocStringLen(L"Foo", 5);
                ]]>
				</defectiveSrc>
				<correctedSrc>
					<![CDATA[
                      SysAllocStringLen(L"Foo", 4);
                ]]>
				</correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_327.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="8a62286e-f5db-459b-ab8c-3038d6f1dfbe" id="328" name="POTENTIAL_ARGUMENT_TYPE_MISMATCH">
			<description>
				<format>
                    %type% passed as parameter %number% when %type% is
                    required in call to %function%
                </format>
				<param name="number" format="%d"/>
				<param name="function" format="'%ls'"/>
				<param name="type" format="'%ls'"/>
			</description>
			<doc>
				<p>
                    For the is* routines, passing an argument of type char may yield unpredictable results. 
					An SBCS or MBCS single-byte character of type char with a value greater than 0x7F is negative. 
					If a char is passed, the compiler may convert the value to a signed int or a signed long.
					This value may be sign-extended by the compiler, with unexpected results.
                </p>
			</doc>
			<example funcBody="void Typo_328">
				<defectiveSrc>
					<![CDATA[
                      char* str;   
					  bool b1 = isdigit(*str);
                ]]>
				</defectiveSrc>
				<correctedSrc>
					<![CDATA[
                      char* str;   
					  bool b2 = isdigit((unsigned char)*str);
                ]]>
				</correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_328.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="c810365b-8214-4ada-b0e2-8cb4fd437d1e" id="329" name="POTENTIAL_INCORRECT_RETVAL_CHECK">
			<description>
				<format>
                    Return value for a call to %function% should not be checked against
                    %number%
                </format>
				<param name="function" format="'%ls'"/>
				<param name="number" format="%d"/>
			</description>
			<doc>
				<p>
                  CreateFile returns INVALID_HANDLE_VALUE when the operation fails.   
                </p>
			</doc>
			<example funcBody="void Typo_329">
				<defectiveSrc>
					<![CDATA[
                      if (CreateFile() == NULL)
					  {
					  return;
					  }
                ]]>
				</defectiveSrc>
				<correctedSrc>
					<![CDATA[
                      if (CreateFile() == INVALID_HANDLE_VALUE)
					  {
					  return;
					  }
                ]]>
				</correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_329.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="5A548D52-DC88-4bad-B243-2F5222C168F3" id="380" name="LEGACY_SHUTDOWN_API">
			<description>
				<format>
                    Legacy shutdown API %function% used. Consider using InitiateSystemShutdownEx instead  
                </format>
				<param name="function" format="'%ls'"/>
			</description>
			<doc>
				<p>
                    This warning indicates that a legacy shutdown API has been
					used. The legacy shutdown APIs include InitiateShutdown,
					ExitWindowsEx, and WTSShutdownSystem.
					It is desirable to minimize the number of shutdowns
					or reboots required. However, if a shutdown or reboot is required,
					use InitiateSystemShutdownEx instead.					
                    For more information, please see http://stscool/noreboot/PPRCWarnings/
					or contact sdnpprc@microsoft.com.
                </p>
			</doc>
			<example funcBody="void Typo_380">
				<defectiveSrc>
					<![CDATA[
					  bRet = ExitWindowsEx(EWX_REBOOT,						// shutdown operation
										SHTDN_REASON_MAJOR_OPERATINGSYSTEM);// shutdown reason
                ]]>
				</defectiveSrc>
				<correctedSrc>
					<![CDATA[
                      bRet = InitiateSystemShutdownEx(lpMachineName,						// computer name
													lpMessage,								// message to display
													0,										// length of time to display
													FALSE,									// force closed option
													TRUE,									// reboot option
													SHTDN_REASON_MAJOR_OPERATINGSYSTEM);	// shutdown reason
                ]]>
				</correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_380.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="316FED04-C283-4e27-8413-C8DC7FEF853C" id="381" name="SHUTDOWN_API">
			<description>
				<format>
                    Shutdown API %function% used with dwReason equal to zero (other) and
					with no lpMessage specified, or with an invalid dwReason. A valid reason
					or message needs to be specified					
                </format>
				<param name="function" format="'%ls'"/>
			</description>
			<doc>
				<p>
                    This warning indicates that IniatiateSystemShutdownEx has been
					used with dwReason = 0 and lpMessage = NULL or lpMessage = "\0", 
					or dwReason &gt;= 0xd0000000.
					For more information, please see http://stscool/noreboot/PPRCWarnings/ 
					or contact sdnpprc@microsoft.com.
                </p>
			</doc>
			<example funcBody="void Typo_381">
				<defectiveSrc>
					<![CDATA[
                      bRet = InitiateSystemShutdownEx(NULL,	// computer name
													"",			// message to display (none)
													0,			// length of time to display
													FALSE,		// force closed option
													TRUE,		// reboot option
													0);			// shutdown reason (other)
                ]]>
				</defectiveSrc>
				<correctedSrc>
					<![CDATA[
                      bRet = InitiateSystemShutdownEx(NULL,	// computer name
													"Reboot needed because...",	// message to display
													0,			// length of time to display
													FALSE,		// force closed option
													TRUE,		// reboot option
													0);			// shutdown reason (other)
                ]]>
				</correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_381.htm</helpURL>
		</DefectDef>
		<!-- -->
		<DefectDef guid="95e07dee-af8d-44cf-a302-7fc428669303" id="382" name="SHUTDOWN_RESOURCE_ID">
			<description>
				<format>
                    Shutdown resource ID %variable% used
                </format>
				<param name="variable" format="'%ls'"/>
			</description>
			<doc>
				<p>
                    This warning indicates that a Resource ID has been used for
					a shutdown message. The Resource ID contains the string 'reboot'
					or 'restartwindows'.
					For more information, please see http://stscool/noreboot/PPRCWarnings/ 
					or contact sdnpprc@microsoft.com.
                </p>
			</doc>
			<example funcBody="void Typo_382">
				<defectiveSrc>
					<![CDATA[
					  PCWSTR pszText = SzLoadString(_Module.GetResourceInstance(),
												  IDS_REBOOT_REQUIRED);
                ]]>
				</defectiveSrc>
				<correctedSrc>
					<![CDATA[
                ]]>
				</correctedSrc>
			</example>
			<helpURL>http://prefast/userguide/warning_382.htm</helpURL>
		</DefectDef>
	</DefectDefGroup>
</DefectDefs>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.1\x86\predecl\samples\sample_sprintf.xml ===
<?xml version ="1.0"?>
<Defects xmlns="x-schema:Schema.xdr">
	<Defect WarningId="905"
		Warning="It's generally dangerous to use sprintf/wsprintf especially when copying into stack buffer. Suggest use the 'n' version instead"
		DFAScope="CURRENT_TREE"
		DFATravMode="TREE"
		WarningReportMode="PER_TRANSITION">
		<Event EventName="sprintf">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<OR>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="wsprintf" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="sprintf" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
				</OR>
				<Tree IgnoreCG="1"  
					ChildNumber="1">
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Kind>
							<Compare Target="AST_SYMBOL"  
								TargetKind="CONST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Type>
							<TypeKind>
								<Compare Target="TY_ARRAY"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</TypeKind>
						</Type>
						<Symbol>
							<StorageClass>
								<Compare Target="SC_AUTO"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</StorageClass>
						</Symbol>
					</Tree>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="1">
					<Tree IgnoreCG="1"  
						ChildNumber="-4">
						<Kind>
							<Compare Target="AST_SYMBOL"  
								TargetKind="CONST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Type>
							<TypeKind>
								<Compare Target="TY_POINTER TY_ARRAY"  
									TargetKind="CONST_LIST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</TypeKind>
						</Type>
						<Symbol>
							<SymbolKind>
								<Compare Target="SY_FORMALPARAMETER"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</SymbolKind>
						</Symbol>
					</Tree>
				</Tree>
			</AND>
		</Event>
		<State StateName="InitState"
			StateKind="START">
			<Transition DestState="State1"
				EventName="sprintf"/>
		</State>
		<State StateName="State1"
			ErrorType="ERROR_IMMEDIATE"/>
	</Defect>
</Defects>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.1\x86\predecl\samples\sample_path.xml ===
<?xml version ="1.0"?>
<Defects xmlns="x-schema:Schema.xdr">
    <Defect WarningId="395"
            Warning="Do not call LocalFree on pointer '%Pointer%', returned by GetSecurityDescriptorOwner"
            DFAScope="CURRENT_FUNCTION">
        <Event EventName="PointerAcquired">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_FUNCTIONCALL"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Symbol>
                        <SymbolName>
                            <Compare Target="GetSecurityDescriptorOwner"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="STRING"/>
                        </SymbolName>
                    </Symbol>
                </Tree>
                <Tree ChildNumber="1"
                      IgnoreCG="1">
                    <Tree ChildNumber="1"
                          IgnoreCG="1">
                        <Tag ObjectName="Pointer"
                             ObjectType="INDIRECT"/>
                    </Tree>
                </Tree>
            </AND>
        </Event>

        <Event EventName="LocalFreeAcquiredPointer">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_FUNCTIONCALL"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Symbol>
                        <SymbolName>
                            <Compare Target="LocalFree"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="STRING"/>
                        </SymbolName>
                    </Symbol>
                </Tree>
                <Tree ChildNumber="1"
                      IgnoreCG="1">
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <ObjectMatch Target="Pointer"/>
                    </Tree>
                </Tree>
            </AND>
        </Event>

        <State StateName="InitState"
               StateKind="START">
            <Transition DestState="PointerAcquired"
                        EventName="PointerAcquired"/>
        </State>

        <State StateName="PointerAcquired">
            <Transition DestState="Error"
                        EventName="LocalFreeAcquiredPointer"/>
        </State>

        <State StateName="Error"
               ErrorType="ERROR_IMMEDIATE"/>
    </Defect>

    <Defect WarningId="396"
            Warning="Potential buffer overrun cause by inappropriate sign/unsigned comparison: buffer size '%BufferSize%' could be negative"
            DFAScope="CURRENT_FUNCTION">
        <Event EventName="NonNegativeVerified">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_LT AST_LE AST_GE AST_GT"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <AND>
                    <Tree ChildNumber="1"
                          IgnoreCG="1">
                        <Kind>
                            <Compare Target="AST_CONSTANT"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                    <Tree ChildNumber="1"
                          IgnoreCG="1">
                        <Value>
                            <Compare Target="0"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="INT"/>
                        </Value>
                    </Tree>
                    <Tree ChildNumber="0"
                          IgnoreCG="0">
                        <Type>
                            <TypeIsSigned>
                                <Compare Target="1"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="BOOL"/>
                            </TypeIsSigned>
                        </Type>
                    </Tree>
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <ObjectMatch Target="BufferSize"/>
                    </Tree>
                </AND>
            </AND>
        </Event>

        <Event EventName="ComparedWithNonZero">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_GT AST_GE"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <AND>
                    <Tree ChildNumber="1"
                          IgnoreCG="1">
                        <Kind>
                            <Compare Target="AST_CONSTANT"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                    <Tree ChildNumber="1"
                          IgnoreCG="1">
                        <Value>
                            <Compare Target="0"
                                     TargetKind="CONST"
                                     Operator="NE"
                                     DataType="INT"/>
                        </Value>
                    </Tree>
                    <Tree ChildNumber="0"
                          IgnoreCG="0">
                        <Type>
                            <TypeIsSigned>
                                <Compare Target="1"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="BOOL"/>
                            </TypeIsSigned>
                        </Type>
                    </Tree>
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <Tag ObjectName="BufferSize"
                             ObjectType="INT"/>
                    </Tree>
                </AND>
            </AND>
        </Event>

        <Event EventName="memcpyInvoked">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_FUNCTIONCALL"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Symbol>
                        <SymbolName>
                            <Compare Target="memcpy"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="STRING"/>
                        </SymbolName>
                    </Symbol>
                </Tree>
                <Tree ChildNumber="1"
                      IgnoreCG="1">
                    <Tree ChildNumber="2"
                          IgnoreCG="1">
                        <ObjectMatch Target="BufferSize"/>
                    </Tree>
                </Tree>
            </AND>
        </Event>

        <State StateName="InitialState"
               StateKind="START">
            <Transition DestState="ComparedWithNonZero"
                        EventName="ComparedWithNonZero"/>
        </State>

        <State StateName="ComparedWithNonZero">
            <Transition DestState="ErrorState"
                        EventName="memcpyInvoked"/>
            <Transition DestState="GoodState"
                        EventName="NonNegativeVerified"/>
        </State>

        <State StateName="GoodState"/>

        <State StateName="ErrorState"
               ErrorType="ERROR_IMMEDIATE"/>
    </Defect>

    <Defect WarningId="397"
            Warning="Missing CloseUndoContext call after OpenUndoContext is invoked"
            DFAScope="CURRENT_FUNCTION">
        <Event EventName="Started">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_FUNCTIONCALL"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Symbol>
                        <SymbolName>
                            <Compare Target="OpenUndoContext"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="STRING"/>
                        </SymbolName>
                    </Symbol>
                </Tree>
            </AND>
        </Event>

        <Event EventName="Ended">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_FUNCTIONCALL"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Symbol>
                        <SymbolName>
                            <Compare Target="CloseUndoContext"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="STRING"/>
                        </SymbolName>
                    </Symbol>
                </Tree>
            </AND>
        </Event>

        <State StateName="InitialState"
               StateKind="START">
            <Transition DestState="Started"
                        EventName="Started"/>
        </State>

        <State StateName="Started"
               ErrorType="ERROR_IF_FINAL">
            <Transition DestState="InitialState"
                        EventName="Ended"/>
        </State>
    </Defect>

    <Defect WarningId="398"
            Warning="Should check for return code from PostThreadMessage before Waiting. In an error case this could potentially hang"
            DFAScope="CURRENT_FUNCTION">
        <Event EventName="PostThreadMessageInvoked">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_FUNCTIONCALL"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Symbol>
                        <SymbolName>
                            <Compare Target="PostThreadMessage"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="STRING"/>
                        </SymbolName>
                    </Symbol>
                </Tree>
                <Tree>
                    <Tag ObjectName="PTMResult"
                         ObjectType="INT"/>
                </Tree>
            </AND>
        </Event>

        <Event EventName="Error">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_FUNCTIONCALL"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Symbol>
                        <SymbolName>
                            <Compare Target="WaitForSingleObject"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="STRING"/>
                        </SymbolName>
                    </Symbol>
                </Tree>
                <RTCondition ObjectName="PTMResult"
                             ObjectAttribute="SELF"
                             Operator="EQ"
                             Target="0"
                             TargetKind="CONST"
                             DataType="INT"/>
            </AND>
        </Event>

        <State StateName="InitState"
               StateKind="START">
            <Transition DestState="PostThreadMessageInvoked"
                        EventName="PostThreadMessageInvoked"/>
        </State>

        <State StateName="PostThreadMessageInvoked">
            <Transition DestState="Error"
                        EventName="Error"/>
        </State>       

        <State StateName="Error"
               ErrorType="ERROR_IMMEDIATE"/>
    </Defect>

    <Defect WarningId="399"
            Warning="The lock '%LockName%' is not release before function returns"
            DFAScope="CURRENT_FUNCTION"
            WarningReportMode="PER_PATH">
        <Event EventName="LockAcquired">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_FUNCTIONCALL"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Symbol>
                        <SymbolName>
                            <Compare Target="EnterCriticalSection"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="STRING"/>
                        </SymbolName>
                    </Symbol>
                </Tree>
                <Tree ChildNumber="1"
                      IgnoreCG="1">
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <Tag ObjectName="LockName"
                             ObjectType="INDIRECT"/>
                    </Tree>
                </Tree>
            </AND>
        </Event>

        <Event EventName="LockReleased">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_FUNCTIONCALL"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Symbol>
                        <SymbolName>
                            <Compare Target="LeaveCriticalSection"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="STRING"/>
                        </SymbolName>
                    </Symbol>
                </Tree>
                <Tree ChildNumber="1"
                      IgnoreCG="1">
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <ObjectMatch Target="LockName"/>
                    </Tree>
                </Tree>
            </AND>
        </Event>

        <State StateName="InitialState"
               StateKind="START">
            <Transition DestState="LockAcquired"
                        EventName="LockAcquired"/>
        </State>

        <State StateName="LockAcquired"
               ErrorType="ERROR_IF_FINAL">
            <Transition DestState="LockReleased"
                        EventName="LockReleased"/>
        </State>

        <State StateName="LockReleased">
        </State>

        <State StateName="ErrorState"
               ErrorType="ERROR_IMMEDIATE"/>
    </Defect>
</Defects>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.1\x86\predecl\samples\sample_GetVersionEx.xml ===
<?xml version ="1.0"?>
<Defects xmlns="x-schema:Schema.xdr">
	<Defect WarningId="502"
		Warning="The GetVersionEx API will be deprecated after Longhorn, usage of it is discouraged."
		DFAScope="CURRENT_TREE"
		DFATravMode="TREE"
		WarningReportMode="PER_TRANSITION">
		<Event EventName="GetVersionEx">
			<AND>
				<Tree IgnoreCG="0"  
					ChildNumber="-1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Tree IgnoreCG="0"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="GetVersionExA" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
				</Tree>
			</AND>
		</Event>
		<State StateName="InitState"
			StateKind="START">
			<Transition DestState="State1"
				EventName="GetVersionEx"/>
		</State>
		<State StateName="State1"
			ErrorType="ERROR_IMMEDIATE"/>
	</Defect>
</Defects>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.1\x86\predecl\xml\predecl_alignment.xml ===
<?xml version ="1.0"?>
<Defects xmlns="x-schema:Schema.xdr">
	<Defect WarningId="414"
		Warning="The buffer '%Buffer%' type has a lower alignment than the type it's being casted to. This could cause a problem with new compiler drops or on different architectures. Use __declspec(align(#)) keyword to fix the problem."
		DFAScope="CURRENT_TREE"
		DFATravMode="TREE"
		WarningReportMode="PER_TRANSITION">
		<Event EventName="Pattern1">
			<AND>
				<Tree IgnoreCG="0">
					<Kind>
						<Compare Target="AST_CAST"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Type SubType="TOTYPE">
						<TypeAlignment>
							<TagVariable VariableName="CastToAlignment" 
								DataType="INT"/>
						</TypeAlignment>
					</Type>
				</Tree>
				<Tree IgnoreCG="0"  
					ChildNumber="0">
					<Tree IgnoreCG="0"  
						ChildNumber="-3">
						<Type>
							<TypeKind>
								<Compare Target="TY_ARRAY" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="ENUM"/>
							</TypeKind>							
							<Type SubType="TOTYPE">
								<TypeAlignment>
									<Compare Target="CastToAlignment" 
										TargetKind="VARIABLE" 
										Operator="LT" 
										DataType="INT"/>
								</TypeAlignment>
								<Type>
									<TypeAlignment>
										<Compare Target="0" 
											TargetKind="CONST" 
											Operator="NE" 
											DataType="INT"/>
									</TypeAlignment>
								</Type>
							</Type>
						</Type>
						<Symbol>
							<SymbolKind>
								<Compare Target="SY_DATAMEMBER" 
									TargetKind="CONST" 
									Operator="NE" 
									DataType="ENUM"/>
							</SymbolKind>
							<StorageClass>
								<Compare Target="SC_AUTO" 
								TargetKind="CONST" 
								Operator="EQ" 
								DataType="ENUM"/>
							</StorageClass>
						</Symbol>
						<Tag ObjectName="Buffer" 
							ObjectType="INDIRECT"/>
					</Tree>
				</Tree>
			</AND>
		</Event>
		<State StateName="InitState"
			StateKind="START">
			<Transition DestState="State1"
				EventName="Pattern1"/>
		</State>
		<State StateName="State1"
			ErrorType="ERROR_IMMEDIATE"/>
	</Defect>
</Defects>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.1\x86\predecl\samples\sample_Lock.xml ===
<?xml version ="1.0"?>
<Defects xmlns="x-schema:Schema.xdr">
	<Defect WarningId="508"
		Warning="Acquire Lock with Releasing before function exits"
		DFAScope="CURRENT_FUNCTION"
		DFATravMode="PATH"
		WarningReportMode="PER_PATH">
		<Event EventName="AcquireLock">
			<AND>
				<Tree IgnoreCG="0"  
					ChildNumber="-1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Tree IgnoreCG="0"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="EnterCriticalSection" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="0"  
						ChildNumber="1">
						<Kind>
							<Compare Target="AST_ARGUMENTS"  
								TargetKind="CONST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="0"  
							ChildNumber="0">
							<Tag ObjectName="TagTree1" 
								ObjectType="INDIRECT"/>
						</Tree>
					</Tree>
				</Tree>
			</AND>
		</Event>
		<Event EventName="ReleaseLock">
			<AND>
				<Tree IgnoreCG="0"  
					ChildNumber="-1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Tree IgnoreCG="0"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="LeaveCriticalSection" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="0"  
						ChildNumber="1">
						<Kind>
							<Compare Target="AST_ARGUMENTS"  
								TargetKind="CONST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="0"  
							ChildNumber="0">
							<ObjectMatch Target="TagTree1"/>
						</Tree>
					</Tree>
				</Tree>
			</AND>
		</Event>
		<State StateName="InitState"
			StateKind="START">
			<Transition DestState="State1"
				EventName="AcquireLock"/>
		</State>
		<State StateName="State1"
			ErrorType="ERROR_IF_FINAL">
			<Transition DestState="State2"
				EventName="ReleaseLock"/>
		</State>
		<State StateName="State2"/>
	</Defect>
</Defects>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.1\x86\predecl\xml\predecl_intoverflow1.xml ===
<?xml version ="1.0"?>
<Defects xmlns="x-schema:Schema.xdr">
	<Defect WarningId="420"
		Warning="Potential buffer overrun: The function parameter '%Obj%' is unsigned and could be zero, therefore the minus arithmetic could result in an unexpected large integer and cause buffer overrun."
		DFAScope="CURRENT_FUNCTION"
		DFATravMode="TREE"
		WarningReportMode="PER_TRANSITION">
		<Event EventName="IfComparedWithZero">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_IF AST_WHILE AST_QUESTION"
							TargetKind="CONST_LIST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<OR>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Kind>
							<Compare Target="AST_SYMBOL"  
								TargetKind="CONST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Symbol>
							<SymbolKind>
								<Compare Target="SY_FORMALPARAMETER"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</SymbolKind>
						</Symbol>
						<Type>
							<TypeKind>
								<Compare Target="TY_INTEGRAL" 
									TargetKind="CONST" 
										Operator="EQ" 
									DataType="ENUM"/>
							</TypeKind>
							<TypeSize>
								<Compare Target="2" 
									TargetKind="CONST" 
									Operator="GE" 
									DataType="INT"/>
							</TypeSize>
							<TypeIsSigned>
								<Compare Target="0" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="BOOL"/>
							</TypeIsSigned>
						</Type>
						<Tag ObjectName="Obj" 
							ObjectType="INDIRECT"/>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Tree IgnoreCG="1"  
							ChildNumber="-5">
							<Kind>
								<Compare Target="AST_NOT"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</Kind>
							<Tree IgnoreCG="1"  
								ChildNumber="0">
								<Kind>
									<Compare Target="AST_SYMBOL"  
										TargetKind="CONST"  
										Operator="EQ"  
										DataType="ENUM"/>
								</Kind>
								<Symbol>
									<SymbolKind>
										<Compare Target="SY_FORMALPARAMETER" 
											TargetKind="CONST"  
											Operator="EQ"  
											DataType="ENUM"/>
									</SymbolKind>
								</Symbol>
								<Type>
									<TypeKind>
										<Compare Target="TY_INTEGRAL" 
											TargetKind="CONST" 
											Operator="EQ" 
											DataType="ENUM"/>
									</TypeKind>
									<TypeSize>
										<Compare Target="2" 
											TargetKind="CONST" 
											Operator="GE" 
											DataType="INT"/>
									</TypeSize>
									<TypeIsSigned>
										<Compare Target="0" 
											TargetKind="CONST" 
											Operator="EQ" 
											DataType="BOOL"/>
									</TypeIsSigned>
								</Type>
								<Tag ObjectName="Obj" 
									ObjectType="INDIRECT"/>
							</Tree>
						</Tree>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Kind>
							<Compare Target="AST_AND AST_OR"  
								TargetKind="CONST_LIST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="1"  
							ChildNumber="-2">
							<Kind>
								<Compare Target="AST_SYMBOL"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</Kind>
							<Symbol>
								<SymbolKind>
									<Compare Target="SY_FORMALPARAMETER"  
										TargetKind="CONST"  
										Operator="EQ"  
										DataType="ENUM"/>
								</SymbolKind>
							</Symbol>
							<Type>
								<TypeKind>
									<Compare Target="TY_INTEGRAL" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="ENUM"/>
								</TypeKind>
								<TypeSize>
									<Compare Target="2" 
										TargetKind="CONST" 
										Operator="GE" 
										DataType="INT"/>
								</TypeSize>
								<TypeIsSigned>
									<Compare Target="0" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="BOOL"/>
								</TypeIsSigned>
							</Type>
							<Tag ObjectName="Obj" 
								ObjectType="INDIRECT"/>
						</Tree>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Tree IgnoreCG="1"
							ChildNumber="-5">
							<Kind>
								<Compare Target="AST_GT AST_GE AST_LT AST_LE AST_EQUALS AST_NE"
									TargetKind="CONST_LIST"
								Operator="EQ"  
										DataType="ENUM"/>
							</Kind>
							<Tree IgnoreCG="1"  
								ChildNumber="-2">
								<Value>
									<Compare Target="0" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="INT"/>
								</Value>
							</Tree>
							<Tree IgnoreCG="1"  
								ChildNumber="-2">
								<Kind>
									<Compare Target="AST_SYMBOL"  
										TargetKind="CONST"  
										Operator="EQ"  
										DataType="ENUM"/>
								</Kind>
								<Symbol>
									<SymbolKind>
										<Compare Target="SY_FORMALPARAMETER"  
											TargetKind="CONST"  
											Operator="EQ"  
											DataType="ENUM"/>
									</SymbolKind>
								</Symbol>
								<Type>
									<TypeKind>
										<Compare Target="TY_INTEGRAL" 
											TargetKind="CONST" 
											Operator="EQ" 
											DataType="ENUM"/>
									</TypeKind>
									<TypeSize>
										<Compare Target="2" 
											TargetKind="CONST" 
											Operator="GE" 
											DataType="INT"/>
									</TypeSize>
									<TypeIsSigned>
										<Compare Target="0" 
											TargetKind="CONST" 
											Operator="EQ" 
											DataType="BOOL"/>
									</TypeIsSigned>
								</Type>
								<Tag ObjectName="Obj" 
									ObjectType="INDIRECT"/>
							</Tree>
						</Tree>
					</Tree>
				</OR>
			</AND>
		</Event>

		<Event EventName="IfBounded">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_IF"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="0">
					<Kind>
						<Compare Target="AST_AND AST_OR"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="0">
					<Tree IgnoreCG="1"  
						ChildNumber="-5">
						<Kind>
							<Compare Target="AST_GT AST_GE"  
								TargetKind="CONST_LIST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="1"  
							ChildNumber="-2">
							<Kind>
								<Compare Target="AST_SYMBOL"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</Kind>
							<Symbol>
								<SymbolKind>
									<Compare Target="SY_FORMALPARAMETER"  
										TargetKind="CONST"  
										Operator="EQ"  
										DataType="ENUM"/>
								</SymbolKind>
							</Symbol>
							<Type>
								<TypeKind>
									<Compare Target="TY_INTEGRAL" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="ENUM"/>
								</TypeKind>
								<TypeSize>
									<Compare Target="2" 
										TargetKind="CONST" 
										Operator="GE" 
										DataType="INT"/>
								</TypeSize>
								<TypeIsSigned>
									<Compare Target="0" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="BOOL"/>
								</TypeIsSigned>
							</Type>
							<Tag ObjectName="Obj" 
								ObjectType="INDIRECT"/>
						</Tree>
					</Tree>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="0">
					<Tree IgnoreCG="1"  
						ChildNumber="-5">
						<Kind>
							<Compare Target="AST_LT AST_LE"  
								TargetKind="CONST_LIST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="1"  
							ChildNumber="-2">
							<Kind>
								<Compare Target="AST_SYMBOL"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</Kind>
							<Symbol>
								<SymbolKind>
									<Compare Target="SY_FORMALPARAMETER"  
										TargetKind="CONST"  
										Operator="EQ"  
										DataType="ENUM"/>
								</SymbolKind>
							</Symbol>
							<Type>
								<TypeKind>
									<Compare Target="TY_INTEGRAL" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="ENUM"/>
								</TypeKind>
								<TypeSize>
									<Compare Target="2" 
										TargetKind="CONST" 
										Operator="GE" 
										DataType="INT"/>
								</TypeSize>
								<TypeIsSigned>
									<Compare Target="0" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="BOOL"/>
								</TypeIsSigned>
							</Type>
						</Tree>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="IfComparedWithNonZero">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_IF"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="0">
					<Tree IgnoreCG="1"  
						ChildNumber="-5">
						<Kind>
							<Compare Target="AST_GT AST_GE AST_LT AST_LE"  
								TargetKind="CONST_LIST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="1"  
							ChildNumber="-2">
							<Kind>
								<Compare Target="AST_SYMBOL"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</Kind>
							<Symbol>
								<SymbolKind>
									<Compare Target="SY_FORMALPARAMETER"  
										TargetKind="CONST"  
										Operator="EQ"  
										DataType="ENUM"/>
								</SymbolKind>
							</Symbol>
							<Type>
								<TypeKind>
									<Compare Target="TY_INTEGRAL" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="ENUM"/>
								</TypeKind>
								<TypeSize>
									<Compare Target="2" 
										TargetKind="CONST" 
										Operator="GE" 
										DataType="INT"/>
								</TypeSize>
								<TypeIsSigned>
									<Compare Target="0" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="BOOL"/>
								</TypeIsSigned>
							</Type>
							<Tag ObjectName="Obj" 
								ObjectType="INDIRECT"/>
						</Tree>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="IfAgainComparedWithNonZero">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_IF"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="0">
					<Tree IgnoreCG="1"  
						ChildNumber="-5">
						<Kind>
							<Compare Target="AST_GT AST_GE AST_LT AST_LE"  
								TargetKind="CONST_LIST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="1"  
							ChildNumber="-2">
							<Kind>
								<Compare Target="AST_SYMBOL"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</Kind>
							<ObjectMatch Target="Obj"/>
						</Tree>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="IfVerifiedWithZero">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_IF AST_WHILE AST_QUESTION"
							TargetKind="CONST_LIST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<OR>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Kind>
							<Compare Target="AST_SYMBOL"  
								TargetKind="CONST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<ObjectMatch Target="Obj"/>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Tree IgnoreCG="1"  
							ChildNumber="-5">
							<Kind>
								<Compare Target="AST_NOT"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</Kind>
							<Tree IgnoreCG="1"  
								ChildNumber="0">
								<Kind>
									<Compare Target="AST_SYMBOL"  
										TargetKind="CONST"  
										Operator="EQ"  
										DataType="ENUM"/>
								</Kind>
								<ObjectMatch Target="Obj"/>
							</Tree>
						</Tree>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Kind>
							<Compare Target="AST_AND AST_OR"  
								TargetKind="CONST_LIST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="1"  
							ChildNumber="-2">
							<Kind>
								<Compare Target="AST_SYMBOL"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</Kind>
							<ObjectMatch Target="Obj"/>
						</Tree>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Tree IgnoreCG="1"
							ChildNumber="-5">
							<Kind>
								<Compare Target="AST_GT AST_GE AST_LT AST_LE AST_EQUALS AST_NE"
									TargetKind="CONST_LIST"
								Operator="EQ"  
										DataType="ENUM"/>
							</Kind>
							<Tree IgnoreCG="1"  
								ChildNumber="-2">
								<Value>
									<Compare Target="0" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="INT"/>
								</Value>
							</Tree>
							<Tree IgnoreCG="1"  
								ChildNumber="-2">
								<Kind>
									<Compare Target="AST_SYMBOL"  
										TargetKind="CONST"  
										Operator="EQ"  
										DataType="ENUM"/>
								</Kind>
								<ObjectMatch Target="Obj"/>
							</Tree>
						</Tree>
					</Tree>
				</OR>
			</AND>
		</Event>

		<Event EventName="access">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<OR>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="strncpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="memcpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="CopyMemory" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="memset" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
				</OR>
				<Tree IgnoreCG="1"  
					ChildNumber="1">
					<Tree IgnoreCG="1"  
						ChildNumber="2">
						<Kind>
							<Compare Target="AST_MINUS"  
								TargetKind="CONST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="1"  
							ChildNumber="0">
							<ObjectMatch Target="Obj"/>
						</Tree>
						<Tree IgnoreCG="1"  
							ChildNumber="1">
							<Value>
								<Compare Target="1" 
									TargetKind="CONST" 
									Operator="GE" 
									DataType="INT"/>
							</Value>
						</Tree>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="index">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_INDEX"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="1">
					<Kind>
						<Compare Target="AST_MINUS"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<ObjectMatch Target="Obj"/>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="1">
						<Value>
							<Compare Target="1" 
								TargetKind="CONST" 
								Operator="GE" 
								DataType="INT"/>
						</Value>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<State StateName="InitState"
			StateKind="START">
			<Transition DestState="GoodEnd"
				EventName="IfComparedWithZero"/>
			<Transition DestState="GoodEnd"
				EventName="IfBounded"/>
			<Transition DestState="NotVerified"
				EventName="IfComparedWithNonZero"/>
		</State>
		<State StateName="NotVerified">
			<Transition DestState="GoodEnd"
				EventName="IfVerifiedWithZero"/>
			<Transition DestState="GoodEnd"
				EventName="IfAgainComparedWithNonZero"/>
			<Transition DestState="Error"
				EventName="access"/>
			<Transition DestState="Error"
				EventName="index"/>
		</State>
		<State StateName="GoodEnd">
			<Transition DestState="GoodEnd"
				EventName="access"/>
			<Transition DestState="GoodEnd"
				EventName="index"/>
		</State>
		<State StateName="Error"
			ErrorType="ERROR_IMMEDIATE"/>
	</Defect>
</Defects>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.1\x86\bin\modules\PfxModel.xml ===
<?xml version="1.0" encoding="UTF-8"?>
<Models>
  <Function name="SysAllocString">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SysAllocStringLen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SysAllocStringByteLen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateFileA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateFileW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FindFirstChangeNotificationA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FindFirstChangeNotificationW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FindFirstFileA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FindFirstFileW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FindFirstFileExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FindFirstFileExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenFile">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lwrite">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <IsTrusted value="never"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lread">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <IsTrusted value="never"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lopen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_hread">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <IsTrusted value="never"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_hwrite">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <IsTrusted value="never"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lclose">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lcreat">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_llseek">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>

  <Function name="CreateFileMappingA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateFileMappingW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenFileMappingA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenFileMappingW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>

  <Function name="CreateEventA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateEventW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenEventA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenEventW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateMutexA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateMutexW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenMutexA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenMutexW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateSemaphoreA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateSemaphoreW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenSemaphoreA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenSemaphoreW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateWaitableTimerA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateWaitableTimerW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenWaitableTimerA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenWaitableTimerW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>

  <Function name="isdigit">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isalnum">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isalpha">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isascii">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iscntrl">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iscsym">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isgraph">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isleadbyte">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="islower">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isprint">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="ispunct">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isspace">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isupper">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isctype">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="isxdigit">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned char"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswdigit">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswalnum">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswalpha">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswascii">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswcntrl">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswgraph">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswlower">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswprint">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswpunct">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswspace">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswupper">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswctype">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="iswxdigit">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <TypeName value="always" stringvalue="unsigned short"/>
      </PreConditions>
    </External>
  </Function>

  <Function name="malloc">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <NeedsRelease value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="realloc">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <NeedsRelease value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="free">
    <External>
      <ExternalID type="param" index="0"/>
      <PostConditions>
        <IsSetToNull value="always"/>
      </PostConditions>
    </External>
  </Function>  
  <Function name="strcpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcscpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_mbscpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="lstrcpyA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="lstrcpyW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="strcat">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <WritableTo value="always">
          <SizeSpec kind="bytecount" qualifier="pre">
		    <NumberSpec kind="readablebytes">
              <ExternalID type="param" index="1"/>			
		    </NumberSpec>			
          </SizeSpec>
        </WritableTo>				
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcscat">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <WritableTo value="always">
          <SizeSpec kind="bytecount" qualifier="pre">
		    <NumberSpec kind="readablebytes">
              <ExternalID type="param" index="1"/>			
		    </NumberSpec>			
          </SizeSpec>
        </WritableTo>				
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_mbscat">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>		
        <WritableTo value="always">
          <SizeSpec kind="bytecount" qualifier="pre">
		    <NumberSpec kind="readablebytes">
              <ExternalID type="param" index="1"/>			
		    </NumberSpec>			
          </SizeSpec>
        </WritableTo>								
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="lstrcatA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>		
        <WritableTo value="always">
          <SizeSpec kind="bytecount" qualifier="pre">
		    <NumberSpec kind="readablebytes">
              <ExternalID type="param" index="1"/>			
		    </NumberSpec>			
          </SizeSpec>
        </WritableTo>								
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="lstrcatW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>		
        <WritableTo value="always">
          <SizeSpec kind="bytecount" qualifier="pre">
		    <NumberSpec kind="readablebytes">
              <ExternalID type="param" index="1"/>			
		    </NumberSpec>			
          </SizeSpec>
        </WritableTo>								
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="strncpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcsncpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_mbsncpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="lstrcpynA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="lstrcpynW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="strncat">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
		<WritableTo value="always">
          <SizeSpec kind="bytecount" qualifier="pre">
		    <NumberSpec kind="location">
              <ExternalID type="param" index="2"/>			
		    </NumberSpec>			
          </SizeSpec>
        </WritableTo>						
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcsncat">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
		<WritableTo value="always">
          <SizeSpec kind="elementcount" longvalue="2" qualifier="pre">
		    <NumberSpec kind="location">
              <ExternalID type="param" index="2"/>			
		    </NumberSpec>			
          </SizeSpec>
        </WritableTo>						
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_mbsncat">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
		<WritableTo value="always">
          <SizeSpec kind="elementcount" qualifier="pre">
		    <NumberSpec kind="location">
              <ExternalID type="param" index="2"/>			
		    </NumberSpec>			
          </SizeSpec>
        </WritableTo>						
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ocslen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>
      </PostConditions>
    </External>
  </Function>  
  <Function name="ATL::ocslen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>
      </PostConditions>
    </External>
  </Function>    
  <Function name="strlen">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
		<IntegerRange value="always" stringvalue="0_MemMax"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcslen">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
		<IntegerRange value="always" stringvalue="0_MemMax"/>		
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbslen">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
		<IntegerRange value="always" stringvalue="0_MemMax"/>		
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbstrlen">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
		<IntegerRange value="always" stringvalue="0_MemMax"/>		
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrlenA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
		<IntegerRange value="always" stringvalue="0_MemMax"/>		
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrlenW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
		<IntegerRange value="always" stringvalue="0_MemMax"/>		
      </PostConditions>
    </External>
  </Function>
  <Function name="strcmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcscmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbscmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrcmpA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrcmpW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strncmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcsncmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbsncmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_stricmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_wcsicmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbsicmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_strnicmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_wcsnicmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbsnicmp">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_strdup">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <NeedsRelease value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="memcpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PreConditions>	  
    </External>					
  </Function>
  <Function name="CopyMemory">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PreConditions>	  
    </External>						
  </Function>
  <Function name="RtlCopyMemory">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PreConditions>	  
    </External>						
  </Function>
  <Function name="memmove">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PreConditions>	  
    </External>						
  </Function>
  <Function name="RtlMoveMemory">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PreConditions>	  
    </External>						
  </Function>
  <Function name="memset">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PreConditions>	  
    </External>						
  </Function>
  <Function name="gets">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_getws">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="fgets">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="fgetws">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="fopen">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="fclose">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="fread">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <IsTrusted value="never"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ReadFile">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <IsTrusted value="never"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ReadFileEx">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <IsTrusted value="never"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="scanf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="fscanf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="sscanf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_read">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="fseek">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lseek">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_lseeki64">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="fsetpos">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="BindMoniker">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="BstrFromVector">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CheckParameters">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CheckParms">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CLSIDFromProgID">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateDispTypeInfo">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateErrorInfo">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateStdDispatch">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateTypeLib">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateTypeLib2">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="Direct3DRMCreate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DirectDrawCreate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DirectDrawCreateClipper">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DirectDrawEnumerate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DirectPlayCreate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DirectSoundCreate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DispGetIDsOfNames">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DispGetParam">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DispInvoke">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DllGetClassObject">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DosDateTimeToVariantTime">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="GetActiveObject">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="GetAltMonthNames">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="GetAttribIMsgOnIStg">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="GetErrorInfo">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="GetKeyboardState">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>  
  <Function name="GetWindowsDirectoryA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetWindowsDirectoryW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="HPProviderInit">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="HrAddColumnsEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="HrDispatchNotifications">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="HrEntryIDFromSz">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="HrIStorageFromStream">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="HrQueryAllRows">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="LHashValOfName">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="LHashValOfNameSys">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="LoadRegTypeLib">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="LoadTypeLibEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="MAPIAdminProfiles">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="MAPIInitialize">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="MAPILogonEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="MSProviderInit">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OleCreateEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OleCreateFromDataEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OleCreateFromFileEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OleCreateFromLinkEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OleCreateLinkFromDataEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenStreamOnFile">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenTnefStream">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="OpenTnefStreamEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="PropVariantCopy">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegisterActiveObject">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegisterTypeLib">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RTFSync">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SafeArrayCopy">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SafeArrayCopyData">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SafeArrayPutElement">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SetAttribIMsgOnIStg">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ShGetDataFromIDList">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SHGetDesktopFolder">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SHGetInstanceExplorer">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SHGetMalloc">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SHGetSpecialFolderLocation">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SHLoadInProc">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="TlsAlloc">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UnRegisterTypeLib">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VarDateFromUdate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VariantChangeType">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VariantChangeTypeEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VariantCopy">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VariantCopyInd">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VarNumFromParseNum">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VarParseNumFromStr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VarUdateFromDate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="VectorFromBstr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WrapCompressedRTFStream">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcImpersonateClient">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcRevertToSelfEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcRevertToSelf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcAsyncInitializeHandle">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcAsyncRegisterInfo">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcAsyncGetCallStatus">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcAsyncCompleteCall">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcAsyncAbortCall">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcAsyncCancelCall">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcAsyncSetHandle">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcAsyncAbortCall">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingCopy">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingSetOption">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqOption">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingFromStringBindingA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingFromStringBindingW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqObject">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingReset">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingSetObject">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqDefaultProtectLevel">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingToStringBindingA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingToStringBindingW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcStringBindingComposeA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcStringBindingComposeW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcStringBindingParseA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcStringBindingParseW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcIfInqId">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcNetworkIsProtseqValidA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcNetworkIsProtseqValidW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqComTimeout">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtSetComTimeout">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtSetCancelTimeout">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcNetworkInqProtseqsA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcNetworkInqProtseqsW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcObjectInqType">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcObjectSetInqFn">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcObjectSetType">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerInqBindings">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerInqIf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerListen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerRegisterIf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerRegisterIfEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUnregisterIf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseAllProtseqs">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseAllProtseqsEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseAllProtseqsIf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseAllProtseqsIfEx">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqEpA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqEpW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqEpExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqEpExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqIfA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqIfW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqIfExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerUseProtseqIfExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqStats">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtIsServerListening">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtStopServerListening">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtWaitServerListen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtSetServerStackSize">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtEnableIdleCleanup">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqIfIds">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqServerPrincNameA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqServerPrincNameW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerInqDefaultPrincNameA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerInqDefaultPrincNameW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcEpResolveBinding">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcNsBindingInqEntryNameA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcNsBindingInqEntryNameW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqAuthClientA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqAuthClientW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqAuthInfoA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqAuthInfoW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingSetAuthInfoA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingSetAuthInfoW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingSetAuthInfoExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingSetAuthInfoExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqAuthInfoExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingInqAuthInfoExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerRegisterAuthInfoA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerRegisterAuthInfoW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcBindingServerFromClient">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcTestCancel">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcServerTestCancel">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcCancelThread">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UuidCreate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UuidToStringA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UuidToStringW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UuidFromStringA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UuidFromStringW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="UuidCreateNil">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcEpRegisterNoReplaceA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcEpRegisterNoReplaceW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcEpRegisterA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcEpRegisterW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcEpUnregister">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DceErrorInqTextA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="DceErrorInqTextW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtEpEltInqBegin">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtEpEltInqDone">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtEpEltInqNextA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtEpEltInqNextW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtEpUnregister">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtSetAuthorizationFn">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtInqParameter">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtSetParameter">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtBindingInqParameter">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RpcMgmtBindingSetParameter">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcGetBuffer">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcSendReceive">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcFreeBuffer">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcSend">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcReceive">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcFreePipeBuffer">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcReallocPipeBuffer">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcMonitorAssociation">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcStopMonitorAssociation">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcGetAssociationContext">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcNsBindingSetEntryNameW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcNsBindingSetEntryNameA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcBindingInqDynamicEndpointW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcBindingInqDynamicEndpointA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcBindingInqTransportType">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcIfInqTransferSyntaxes">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_UuidCreate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcBindingCopy">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcLaunchDatagramReceiveThread">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcServerRegisterForwardFunction">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcConnectionInqSockBuffSize">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcConnectionSetSockBuffSize">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcServerStartListening">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcServerStopListening">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcGetThreadWindowHandle">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcAsyncSendReceive">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcBindingSetAsync">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcSetWMsgEndpoint">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcSetThreadParams">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcServerUnregisterEndpointA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="I_RpcServerUnregisterEndpointW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="GlobalSize">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>		
      </PostConditions>
    </External>
  </Function>    
  <Function name="_bstr_t::length">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
		<IntegerRange value="always" stringvalue="0_MemMax"/>		
      </PostConditions>
    </External>
  </Function>  
  <Function name="CComBSTR::Length">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
		<IntegerRange value="always" stringvalue="0_MemMax"/>		
      </PostConditions>
    </External>
  </Function>    
  <Function name="ATL::CComBSTR::Length">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
		<IntegerRange value="always" stringvalue="0_MemMax"/>		
      </PostConditions>
    </External>
  </Function>      
  <Function name="SysStringLen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
		<IntegerRange value="always" stringvalue="0_MemMax"/>		
      </PostConditions>
    </External>
  </Function>
  <Function name="SysStringByteLen">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
		<IntegerRange value="always" stringvalue="0_MemMax"/>		
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrncmpW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrncmpA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrcmpiW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="lstrcmpiA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strchr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcschr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbschr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strrchr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcsrchr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbsrchr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strstr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcsstr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbsstr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strspn">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="wcsspm">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_mbsspn">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="atof">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="atoi">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="atol">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="atold">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_atoi64">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsCharAlpha">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsCharAlphaNumeric">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsCharLower">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsCharUpper">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsBadCodePtr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsBadReadPtr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsBadStringPtr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="IsBadWritePtr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="_strerror">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="strerror">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="FillMemory">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ZeroMemory">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="MoveMemory">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_memccpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="MprConfigGetFriendlyName">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RhRegGetStringValueW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RhRegSetStringValueW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="OemToCharBuffA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CharToOemBuffA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="OemToCharBuffW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CharToOemBuffW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CharUpperBuffA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CharUpperBuffW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CharLowerBuffA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CharLowerBuffW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_snprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>						
  </Function>
  <Function name="_vsnprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>						
  </Function>
  <Function name="_snwprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>						
  </Function>
  <Function name="_vsnwprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>						
  </Function>
  <Function name="wcstombs">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="mbstowcs">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_strnset">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_mbsnset">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_wcsnset">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="strxfrm">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcsxfrm">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadConsoleA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadConsoleW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadConsoleInputA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="20"/>        <!-- sizeof (INPUT_RECORD) -->
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadConsoleInputW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="20"/>        <!-- sizeof (INPUT_RECORD) -->
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadProcessMemory">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadEventLogA">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadEventLogW">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadPrinter">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="MultiByteToWideChar">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>						
  </Function>
  <Function name="WideCharToMultiByte">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>						
  </Function>
  <Function name="GetCurrentDirectoryW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="0"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetCurrentDirectoryA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="0"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_wgetcwd">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_getcwd">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetSystemDirectoryW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetSystemDirectoryA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetWindowTextW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetWindowTextA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetWindowTextLengthA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>
      </PostConditions>
    </External>
  </Function>    
  <Function name="GetWindowTextLengthW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SizeofResource">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>
      </PostConditions>
    </External>
  </Function>      
  <Function name="GetLengthSid">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>
      </PostConditions>
    </External>
  </Function>          
  <Function name="RtlLengthSid">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>
      </PostConditions>
    </External>
  </Function>            
  <Function name="SendMessageA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>
      </PostConditions>
    </External>
  </Function>            
  <Function name="SendMessageW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>
      </PostConditions>
    </External>
  </Function>              
  <Function name="GetFullPathNameW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetFullPathNameA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetShortPathNameW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetShortPathNameA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetLongPathNameW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetLongPathNameA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetTempPathW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="0"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetTempPathA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="0"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetTempFileNameA">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <Constant value="260"/>                <!-- bytes = MAX_PATH -->
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetTempFileNameW">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <Constant value="520"/>                <!-- bytes = MAX_PATH * 2 for Unicode -->
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileSectionNamesW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileSectionNamesA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileSectionW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileSectionA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileStringW">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileStringA">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileStructW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetPrivateProfileStructA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetProfileStringW">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetProfileStringA">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetModuleFileNameW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetModuleFileNameA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetEnvironmentVariableW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetEnvironmentVariableA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetVolumeInformationW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetVolumeInformationA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ExpandEnvironmentStringsW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ExpandEnvironmentStringsA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="SearchPathW">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="SearchPathA">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetAtomNameW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetAtomNameA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetTokenInformation">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="AdjustTokenPrivileges">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="AdjustTokenBuffer">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetAclInformation">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetFileSecurityW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetFileSecurityA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ReadDirectoryChangesW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupAccountNameW">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="5" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupAccountNameA">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupAccountSidW">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="4" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupAccountSidA">
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupPrivilegeNameW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupPrivilegeNameA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupPrivilegeDisplayNameW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LookupPrivilegeDisplayNameA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetDefaultCommConfigW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetDefaultCommConfigA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetComputerNameW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetComputerNameA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetComputerNameExW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID  deref="1" type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetComputerNameExA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID  deref="1" type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetUserNameW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetUserNameA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetUserNameExW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID  deref="1" type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="GetUserNameExA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID  deref="1" type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegEnumKeyW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegEnumKeyA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="PeekNamedPipe">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="TransactNamedPipe">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CallNamedPipeW">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CallNamedPipeA">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="LoadStringW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>
      </PostConditions>
    </External>	
  </Function>
  <Function name="LoadStringA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>
      </PostConditions>
    </External>		
  </Function>
  <Function name="gethostname">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="recv">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="recvfrom">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="NtReadFile">
    <External>
      <ExternalID type="param" index="5"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="6"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ZwReadFile">
    <External>
      <ExternalID type="param" index="5"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="6"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RtlGetFullPathName_U">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="KeBugCheck">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="KeBugCheck2">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="KeBugCheckEx">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_com_raise_error">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RpcRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="OemToCharA">
    <FunctionProperties>
      <PreferredFunction name="OemToCharBuffA">
        <Reason>safer</Reason>
      </PreferredFunction>
    </FunctionProperties>
  </Function>
  <Function name="OemToCharW">
    <FunctionProperties>
      <PreferredFunction name="OemToCharBuffW">
        <Reason>safer</Reason>
      </PreferredFunction>
    </FunctionProperties>
  </Function>
  <Function name="WinExec">
    <FunctionProperties>
      <Deprecated value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="printf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>						
  </Function>
  <Function name="wprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>						
  </Function>
  <Function name="sprintf">
    <FunctionProperties>
      <PreferredFunction name="strcpy">
        <Reason>unformatted</Reason>
      </PreferredFunction>
    </FunctionProperties>  
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>				
  </Function>
  <Function name="wsprintfA">
    <FunctionProperties>
      <PreferredFunction name="strcpy">
        <Reason>unformatted</Reason>
      </PreferredFunction>
    </FunctionProperties>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>					
  </Function>
  <Function name="wsprintfW">
    <FunctionProperties>
      <PreferredFunction name="wcscpy">
        <Reason>unformatted</Reason>
      </PreferredFunction>
    </FunctionProperties>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>					
  </Function>
  <Function name="WmipCountedToSzAndTrim">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wscanf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="swscanf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="fwscanf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="swprintf">
    <FunctionProperties>
      <PreferredFunction name="wcscpy">
        <Reason>unformatted</Reason>
      </PreferredFunction>
    </FunctionProperties>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="fprintf">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="fwprintf">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="strftime">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always" style="strftime"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wcsftime">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always" style="strftime"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_tcsncpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_mbsnbcpy">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="sometimes"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="vprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="vsprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="vswprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="vwprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wnsprintfA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wnsprintfW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wvsprintfA">
    <FunctionProperties>
      <PreferredFunction name="wcscpy">
        <Reason>unformatted</Reason>
      </PreferredFunction>
    </FunctionProperties>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wvsprintfW">
    <FunctionProperties>
      <PreferredFunction name="wcscpy">
        <Reason>unformatted</Reason>
      </PreferredFunction>
    </FunctionProperties>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <Unlimited/>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wvnsprintfA">
    <FunctionProperties>
      <PreferredFunction name="wcscpy">
        <Reason>unformatted</Reason>
      </PreferredFunction>
    </FunctionProperties>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="wvnsprintfW">
    <FunctionProperties>
      <PreferredFunction name="wcscpy">
        <Reason>unformatted</Reason>
      </PreferredFunction>
    </FunctionProperties>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_cprintf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="_cscanf">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsFormatString value="always" style="scanf"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="MIDL_user_allocate">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <IsSetToNull value="sometimes"/>
        <NeedsRelease value="sometimes"/>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="MIDL_user_free">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions/>
      <PostConditions>
        <IsReleased value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="SetThreadToken">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="CreateProcessA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsWritableString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="6"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="7"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="8"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CreateProcessW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsWritableString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="6"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="7"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="8"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CreateProcessAsUserA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsWritableString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="7"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="8"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CreateProcessAsUserW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsWritableString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="7"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="8"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="CreateProcessWithLogonW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <IsNullOk value="sometimes"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="5"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsWritableString value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="7"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="8"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ImpersonateDdeClientWindow">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ImpersonateLoggedOnUser">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ImpersonateNamedPipeClient">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ImpersonateSecurityContext">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="ImpersonateSelf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegSetValueA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
        <ShouldBeZeroTerminated value="sometimes"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegSetValueW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="4"/>
          </ValueOfExternal>
        </IsMinSize>
        <ShouldBeZeroTerminated value="sometimes"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegSetValueExA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
        <ShouldBeZeroTerminated value="sometimes"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="5"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="RegSetValueExW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <ShouldBeZeroTerminated value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
        <ShouldBeZeroTerminated value="sometimes"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="5"/>
      <PreConditions>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="AdjustTokenGroups">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
  </Function>
  <Function name="ACPIAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ASSERT">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AV_Exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowArchiveException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowDaoException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowDBException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowFileException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowInternetException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowMemoryException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowNotSupportedException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowOleDispatchException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowOleException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowResourceException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowUserException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxAssertFailedLine__FPCci">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxPostQuitMessage__Fi">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowArchiveException__FiPCc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowFileException__FilPCUs">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowFileException__FilPCc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowMemoryException__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowNotSupportedException__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowOleException__Fl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowResourceException__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AfxThrowUserException__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AppExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Assert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertErrorReport__FPCcUiT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertFail">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertFailed">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertFailedLine__FPCci">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertHelper">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertSzHelper">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AssertionFailure__FPci">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Assertion__9IDbOutputFiPcT2UiT2">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AttribAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="BadExitCleanup">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="BadExitCleanup__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Bail__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="BaseExitThreadPoolThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="CMDexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="CSDbgBreakPoint__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="CSPrintAssert__FPCcT1UlT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="CleanExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="CleanupExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="CriticalErrorExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DDE_ExitProgman__FPUsPUiP8_DDECONV">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DDE_ExitProgman__FPcPUiP8_DDECONV">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DELLogAndTerminate__FUsT1UlT3PvPciT7T5">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DbgBreakPoint">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DebugBreak">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DbgBreakPointWithStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DbgBreak__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DbgSspExitProcess">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DbgSspExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DbgUserBreakPoint">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Dbg_HardAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Debug_Assert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DeleteAndExit__12WIN32_THREADFUi">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DeviceAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DfsBugCheck">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Die">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DiskErrorFatal">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayErrorAndExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayFatal__FPCcUibT2Pc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayMessageAndExit__4FINDFUlT112MESSAGE_TYPEP7WSTRING">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayMessageAndExit__5XCOPYFUlP7WSTRINGT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayMessageAndExit__7REPLACEFUlPC7WSTRINGT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayMessageAndExit__FUlPC7WSTRINGT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DisplayUsageAndExit__FPPcP9SParamDef">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DllFreeLibraryAndExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Dns_Assert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DoAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DoExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DoExitWindows">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DoExitWindowsEx">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DosRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Dr_RaiseFatalError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="DraExcept">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ENRE_exit__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ErrorExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ErrorExitW">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ErrorUsageAndExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExRaiseAccessViolation">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExRaiseDatatypeMisalignment">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExRaiseHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExRaiseStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Ex_RaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Ex_RaiseFormerrException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitConfigure">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitCustomAppWiz__15CResTypAWAppWizFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitField">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitField__FP10tagCONTROLi">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitMessageLoop__13CAltExtWizardFUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitMyProcessDesktopAccess__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitPeriSession">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitProcess">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitProgram__7PROGRAMFUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitSession">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitThreadApc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitThread__11CEnumThreadFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitToDos">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitWithError__5XCOPYFUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitWithError__7REPLACEFUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExitWithError__FUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Exit__Fi">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ExpRaiseHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FAssertProc__FPCUsUlT1T2">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FAssertProc__FPCcUlT1T2">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit0">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit12">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit16">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit20">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit24">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit28">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit32">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit36">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit4">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit40">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit44">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit48">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit52">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit56">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FT_Exit8">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fail">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fail__13CDataExchangeFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fail__FUi">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fatal">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FatalAppExitA">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FatalAppExitW">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FatalApplicationError__Fie">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FatalError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FatalExceptionFilter">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FatalExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fatal__7PROGRAMCFUlT1Pce">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fatal__7PROGRAMCFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fatal__FPCcUie">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Fatality___FPcUlT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FreeLibraryAndExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FrsExitCommandServer">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="FrsRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="HWInfoAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="HalpMcaSwitchMcaExceptionStackAndBugCheck">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="HelpAndExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="HidServExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ILS_ExitWait">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="I_RpcNsRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="IacAutoFatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="InternalError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="IoRaiseHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="IoRaiseInformationalHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="IopDriverCorrectnessThrowBugCheck">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="IopRaiseHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="IopRaiseInformationalHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="KdpCauseBugCheck">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="LdsFatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="LsFatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MainFrsExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MemAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MemoryExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MergeFatalError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MyExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NdrpRaisePipeException__FP14_NDR_PIPE_DESCl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NetpAssertFailed">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NetpRaiseAlert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NlAssertFailed">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NlExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NoErrorUsageAndExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NtRaiseHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NtfsRaiseInformationHardError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NtfsRaiseStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="NtfsRaiseStatusFunction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="OFatalAppExitW">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="OSNotifyFatalErrorWorker">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Od2DosExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Od2JumpTo16ExitRoutine">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Od2JumpToExitRoutine">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Od2RaiseStackException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="OleTestAssert__FPcT1Ui">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Os2DosExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Os2SrvExitProcess">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Os2WaitSyncAndExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Ow2Exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PREfixExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Panic">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PanicMessage">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PoShutdownBugCheck">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PostQuitMessage">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PrivateAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PsCleanUpAndExitProcess">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PspExitNormalApc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PspExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="PuDbgAssertFailed">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="QueueAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="QuitThread__13CWorkerThreadFP6HWND__">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Quit__11CWebBrowserFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Quit__12CApplicationFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Quit__13CWebEventSinkFPs">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Quit__14IWebBrowserAppFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseDsaExcept">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseExceptionProxy__FUlN21PUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseException__10CAdRotatorSFPUs">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseException__9CToolsCtlSFPUs">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseException__Fl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RaiseNMEvent">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="Raise__FUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ReportAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RouterAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RtlAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RtlRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RtlRaiseStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RtlpExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RxAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SHExitWindowsEx">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SampAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ScpLinkFatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ShowAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ShowAssert__FPcUiT1">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SigFatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SigRstInd_FatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SigRstRq_FatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SmartcardExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="StreamClassDebugAssert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SysExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="SysFatal">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="TRCExitProcess">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ThrowErrno__14CFileExceptionSFiPCc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ThrowError__7CKernelFUl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ThrowError__9CTemplateFPUcUi">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ThrowError__F10_com_errorPCUse">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ThrowError__F10_com_errorUie">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ToplRaiseException">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="TrkRaiseException__Fl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="TrkRaiseLastError__Fv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="TrkRaiseNtStatus__Fl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="TrkRaiseWin32Error__Fl">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UIAssertHelper">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UIAssertSzHelper">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UdfNormalizeAndRaiseStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UdfRaiseStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UmeFatalError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UnmergeFatalError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UpsLineAsserted">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UserRtlRaiseStatus">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="UtilExitThread">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="WK32ExitKernel">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="WK32FatalExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="WNetErrorExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="YY_FATAL__15ModuleInfo_scanFPc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="YY_FATAL__7yy_scanFPc">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="YellAndExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_Assert__FiPcT1T2">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_CrtDbgReport">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_Doraise__Q2_3std12out_of_rangeCFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_Doraise__Q2_3std9bad_allocCFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_DsysAssertEx">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_amsg_exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_c_exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_cexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_com_issue_error">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="assert">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="assertFailed">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="die">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="doexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="doexit__FiN21">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="error_exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="error_exit__FP18jpeg_common_struct">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="errorexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="errorexit__FPCce">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="fail__3iosCFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="fatal">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="fatal__FPce">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="fatal_alloc_failure">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="gmem_panic">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="host_error">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="kperror_exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="my_error_exit__FP18jpeg_common_struct">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="quit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="rshexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="scMemoryPanic">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="scpFatalAction">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="std_error_exit__3rtgFP18jpeg_common_struct">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="tkQuit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="vExecExitComplete__9MExecWorkFv">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="vold_driver_exit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="windexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="wsRedExit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="xexit">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="RtError">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="AbortLayout">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MsoFAssertSzProcVar">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MsoFAssertSzTagProcVar">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MsoDebugBreak">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="MsoNotReachedTag">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="setjmp">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_setjmp">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_setjmpex">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="longjmp">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_longjmp">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="_longjmpex">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="ex_raise">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="utassert_fail">
    <FunctionProperties>
      <Terminates value="1"/>
    </FunctionProperties>
  </Function>
  <Function name="GetClassNameW">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
    </External>
  </Function>
  <Function name="GetClassNameA">
    <External>
      <ExternalID type="param" index="1"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
    </External>
  </Function>
  <Function name="GetTimeFormatA">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>						
  </Function>
  <Function name="GetTimeFormatW">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>						
  </Function>
  <Function name="GetDateFormatA">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>						
  </Function>
  <Function name="GetDateFormatW">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="5"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>						
  </Function>  
  <Function name="InterlockedIncrement">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
      </PreConditions>
    </External>
  </Function>
  <Function name="InitializeCriticalSectionAndSpinCount">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegEnumValueA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="6"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="7" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>	
  </Function>  
  <Function name="RegEnumValueW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="6"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="7" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>	
  </Function>  
  <Function name="VerQueryValueA">
    <External>
      <ExternalID type="param" index="3" deref="1"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>	
  </Function>
  <Function name="VerQueryValueW">
    <External>
      <ExternalID type="param" index="3" deref="1"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>	
  </Function>
  <Function name="RegQueryValueA">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>	  
    </External>
    <External>
      <ExternalID type="param" index="3" deref="1"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>	
  </Function>
  <Function name="RegQueryValueW">
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3" deref="1"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>		
  </Function>
  <Function name="RegQueryValueExA">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="5" deref="1"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>		
  </Function>
  <Function name="RegQueryValueExW">
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsMinSize value="always">
          <ValueOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="5" deref="1"/>
          </ValueOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions>
        <RequiresZeroTermination value="always"/>
      </PostConditions>
    </External>
    <External>
      <ExternalID type="param" index="5" deref="1"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>	  
	  </PostConditions>	  
    </External>			
  </Function>
  <Function name="StringCbCatA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCopyA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCopyW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbPrintfA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbPrintfW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbVPrintfA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbVPrintfW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCopyA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCopyW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchPrintfA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchPrintfW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchVPrintfA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchVPrintfW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCopyWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCopyWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringVPrintfWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringVPrintfWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCopyExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCopyExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbPrintfExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbPrintfExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbVPrintfExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbVPrintfExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCopyExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCopyExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchPrintfExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchPrintfExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchVPrintfExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchVPrintfExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="3"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatExWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatExWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCopyExWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCopyExWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringVPrintfExWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringVPrintfExWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="2"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="4"/>
      <PreConditions>
        <IsFormatString value="always"/>
        <MustBeTrusted value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbLengthA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbLengthW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchLengthA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2" deref="1"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>		
      </PostConditions>	  
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchLengthW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2" deref="1"/>
      <PostConditions>
		<IntegerRange value="always" stringvalue="0_MemMax"/>		
      </PostConditions>	  
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatNA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatNW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatNA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatNW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatNExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchCatNExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatNExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbCatNExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatNWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatNWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatNExWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCatNExWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="param" index="2"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <ShouldBeZeroTerminated value="always"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="3"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchGetsA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchGetsW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbGetsA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbGetsW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchGetsExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCchGetsExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <UsedForConcatenation value="always"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbGetsExA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringCbGetsExW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringGetsExWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringGetsExWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="sometimes"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
        <IsWritableString value="always"/>
        <ShouldBeInitialized value="never"/>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringLengthWorkerA">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="1"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="StringLengthWorkerW">
    <External>
      <ExternalID type="param" index="0"/>
      <PreConditions>
        <IsNullOk value="never"/>
        <IsMinSize value="always">
          <LengthOfExternal>
            <Multiplier value="2"/>
            <ExternalID type="param" index="1"/>
          </LengthOfExternal>
        </IsMinSize>
      </PreConditions>
      <PostConditions/>
    </External>
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <MustBeChecked value="always"/>
      </PostConditions>
    </External>
  </Function>

  <Function name="CreateNamedPipe">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>

  <Function name="GetStdHandle">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>

  <Function name="RegCreateKeyA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegOpenKeyA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegCreateKeyExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegOpenKeyExA">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegCreateKeyW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegOpenKeyW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegCreateKeyExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="RegOpenKeyExW">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>

  <Function name="accept">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="inet_addr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="inet_ntoa">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="socket">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSAAccept">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSAAsyncGetHostByAddr">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSAAsyncGetHostByName">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSAAsyncGetProtoByName">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSAAsyncGetProtoByNumber">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSAAsyncGetServByName">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSAAsyncGetServByPort">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSACreateEvent">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSAJoinLeaf">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSASocket">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="0"/>
      </PostConditions>
    </External>
  </Function>
  <Function name="WSAStartup">
    <External>
      <ExternalID type="retval"/>
      <PostConditions>
        <InvalidCheck value="always" longvalue="-1"/>
      </PostConditions>
    </External>
  </Function>

</Models>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.1\x86\predecl\xml\predecl_intoverflow2.xml ===
<?xml version ="1.0"?>
<Defects xmlns="x-schema:Schema.xdr">
	<Defect WarningId="421"
		Warning="Potential buffer overrun: The signed parameter '%Obj%' is being validated with a single bounds check. This validation may not be sufficient since the value could be negative and cause buffer overruns. Check both bounds of the parameter instead."
		DFAScope="CURRENT_FUNCTION"
		DFATravMode="TREE"
		WarningReportMode="PER_TRANSITION">
		<Event EventName="IfComparedWithZero">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_IF AST_WHILE AST_QUESTION"  
							TargetKind="CONST_LIST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="0">
					<Tree IgnoreCG="1"
						ChildNumber="-5">
						<Kind>
							<Compare Target="AST_GT AST_GE AST_LT AST_LE AST_EQUALS AST_NE"
								TargetKind="CONST_LIST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="1"  
							ChildNumber="-2">
							<Value>
								<Compare Target="0" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="INT"/>
							</Value>
						</Tree>
						<Tree IgnoreCG="1"  
							ChildNumber="-2">
							<Kind>
								<Compare Target="AST_SYMBOL"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</Kind>
							<Symbol>
								<SymbolKind>
									<Compare Target="SY_FORMALPARAMETER"  
										TargetKind="CONST"  
										Operator="EQ"  
										DataType="ENUM"/>
								</SymbolKind>
							</Symbol>
							<Type>
								<TypeKind>
									<Compare Target="TY_INTEGRAL" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="ENUM"/>
								</TypeKind>
								<TypeSize>
									<Compare Target="2" 
										TargetKind="CONST" 
											Operator="GE" 
											DataType="INT"/>
									</TypeSize>
								<TypeIsSigned>
									<Compare Target="1" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="BOOL"/>
								</TypeIsSigned>
							</Type>
							<Tag ObjectName="Obj" 
								ObjectType="INDIRECT"/>
						</Tree>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="IfBounded">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_IF"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="0">
					<Kind>
						<Compare Target="AST_AND AST_OR"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="0">
					<Tree IgnoreCG="1"  
						ChildNumber="-5">
						<Kind>
							<Compare Target="AST_GT AST_GE"  
								TargetKind="CONST_LIST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="1"  
							ChildNumber="-2">
							<Kind>
								<Compare Target="AST_SYMBOL"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</Kind>
							<Symbol>
								<SymbolKind>
									<Compare Target="SY_FORMALPARAMETER"  
										TargetKind="CONST"  
										Operator="EQ"  
										DataType="ENUM"/>
								</SymbolKind>
							</Symbol>
							<Type>
								<TypeKind>
									<Compare Target="TY_INTEGRAL" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="ENUM"/>
								</TypeKind>
								<TypeSize>
									<Compare Target="2" 
										TargetKind="CONST" 
										Operator="GE" 
										DataType="INT"/>
								</TypeSize>
								<TypeIsSigned>
									<Compare Target="1" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="BOOL"/>
								</TypeIsSigned>
							</Type>
							<Tag ObjectName="Obj" 
								ObjectType="INDIRECT"/>
						</Tree>
					</Tree>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="0">
					<Tree IgnoreCG="1"  
						ChildNumber="-5">
						<Kind>
							<Compare Target="AST_LT AST_LE"  
								TargetKind="CONST_LIST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="1"  
							ChildNumber="-2">
							<Kind>
								<Compare Target="AST_SYMBOL"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</Kind>
							<Symbol>
								<SymbolKind>
									<Compare Target="SY_FORMALPARAMETER"  
										TargetKind="CONST"  
										Operator="EQ"  
										DataType="ENUM"/>
								</SymbolKind>
							</Symbol>
							<Type>
								<TypeKind>
									<Compare Target="TY_INTEGRAL" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="ENUM"/>
								</TypeKind>
								<TypeSize>
									<Compare Target="2" 
										TargetKind="CONST" 
										Operator="GE" 
										DataType="INT"/>
								</TypeSize>
								<TypeIsSigned>
									<Compare Target="1" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="BOOL"/>
								</TypeIsSigned>
							</Type>
						</Tree>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="IfComparedWithNonZeroSigned">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_IF"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="0">
					<Tree IgnoreCG="1"  
						ChildNumber="-5">
						<Kind>
							<Compare Target="AST_GT AST_GE AST_LT AST_LE"
								TargetKind="CONST_LIST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="1"  
							ChildNumber="0">
							<Type>
								<TypeIsSigned>
									<Compare Target="1" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="BOOL"/>
								</TypeIsSigned>
							</Type>
						</Tree>
						<Tree IgnoreCG="1"  
							ChildNumber="1">  
							<Type>
								<TypeIsSigned>
									<Compare Target="1" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="BOOL"/>
								</TypeIsSigned>
							</Type>
						</Tree>
						<Tree IgnoreCG="1"  
							ChildNumber="-2">
							<Kind>
								<Compare Target="AST_SYMBOL"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</Kind>
							<Symbol>
								<SymbolKind>
									<Compare Target="SY_FORMALPARAMETER"  
										TargetKind="CONST"  
										Operator="EQ"  
										DataType="ENUM"/>
								</SymbolKind>
							</Symbol>
							<Type>
								<TypeKind>
									<Compare Target="TY_INTEGRAL" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="ENUM"/>
								</TypeKind>
								<TypeSize>
									<Compare Target="2" 
										TargetKind="CONST" 
										Operator="GE" 
										DataType="INT"/>
								</TypeSize>
							</Type>
							<Tag ObjectName="Obj" 
								ObjectType="INDIRECT"/>
						</Tree>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="IfAgainComparedWithNonZeroSigned">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_IF"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="0">
					<Tree IgnoreCG="1"  
						ChildNumber="-5">
						<Kind>
							<Compare Target="AST_GT AST_GE AST_LT AST_LE"  
								TargetKind="CONST_LIST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="1"  
							ChildNumber="-2">
							<Kind>
								<Compare Target="AST_SYMBOL"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</Kind>
							<ObjectMatch Target="Obj"/>
						</Tree>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="IfVerifiedWithZero">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_IF AST_WHILE AST_QUESTION"  
							TargetKind="CONST_LIST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="0">
					<Tree IgnoreCG="1"
						ChildNumber="-5">
						<Kind>
							<Compare Target="AST_GT AST_GE AST_LT AST_LE AST_EQUALS AST_NE"
								TargetKind="CONST_LIST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="1"  
							ChildNumber="-2">
							<Value>
								<Compare Target="0" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="INT"/>
							</Value>
						</Tree>
						<Tree IgnoreCG="1"  
							ChildNumber="-2">
							<Kind>
								<Compare Target="AST_SYMBOL"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</Kind>
							<ObjectMatch Target="Obj"/>
						</Tree>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="memcpy">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<OR>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="strncpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="memcpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="CopyMemory" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="memset" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
				</OR>
				<Tree IgnoreCG="1"  
					ChildNumber="1">
					<Tree IgnoreCG="1"  
						ChildNumber="2">
						<ObjectMatch Target="Obj"/>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="index">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_INDEX"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="1">
					<ObjectMatch Target="Obj"/>
				</Tree>
			</AND>
		</Event>

		<State StateName="InitState"
			StateKind="START">
			<Transition DestState="GoodEnd"
				EventName="IfComparedWithZero"/>
			<Transition DestState="GoodEnd"
				EventName="IfBounded"/>
			<Transition DestState="NotVerified"
				EventName="IfComparedWithNonZeroSigned"/>
		</State>
		<State StateName="NotVerified">
			<Transition DestState="GoodEnd"
				EventName="IfVerifiedWithZero"/>
			<Transition DestState="GoodEnd"
				EventName="IfAgainComparedWithNonZeroSigned"/>
			<Transition DestState="Error"
				EventName="memcpy"/>
			<Transition DestState="Error"
				EventName="index"/>
		</State>
		<State StateName="GoodEnd">
			<Transition DestState="GoodEnd"
				EventName="memcpy"/>
			<Transition DestState="GoodEnd"
				EventName="index"/>
		</State>
		<State StateName="Error"
			ErrorType="ERROR_IMMEDIATE"/>
	</Defect>
</Defects>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.1\x86\predecl\xml\predecl_msrc01025.xml ===
<?xml version ="1.0"?>
<Defects xmlns="x-schema:Schema.xdr">
	<Defect WarningId="417"
		Warning="Potential stack buffer overrun: The string parameter '%SrcBuffer%' is used without validation."
		DFAScope="CURRENT_FUNCTION"
		DFATravMode="TREE"
		WarningReportMode="PER_TRANSITION">
		<Event EventName="wcslenassign">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_ASSIGN"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"
					ChildNumber="1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Tree IgnoreCG="1"  
						ChildNumber="1">
						<Tree IgnoreCG="1"  
							ChildNumber="0">
							<Tree IgnoreCG="1"  
								ChildNumber="-5">
								<Kind>
									<Compare Target="AST_SYMBOL"  
										TargetKind="CONST"  
										Operator="EQ"  
										DataType="ENUM"/>
								</Kind>
								<Symbol>
									<SymbolKind>
										<Compare Target="SY_FORMALPARAMETER" 
											TargetKind="CONST" 
											Operator="EQ" 
											DataType="ENUM"/>
									</SymbolKind>
								</Symbol>
								<Tag ObjectName="SrcBuffer" 
									ObjectType="INDIRECT"/>
							</Tree>
						</Tree>
					</Tree>
				</Tree>
				<OR>
					<Tree IgnoreCG="1"
						ChildNumber="1">
						<Tree IgnoreCG="1"  
							ChildNumber="0">
							<Symbol>
								<SymbolName>
									<Compare Target="strlen" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="STRING"/>
								</SymbolName>
							</Symbol>
						</Tree>
					</Tree>
					<Tree IgnoreCG="1"
						ChildNumber="1">
						<Tree IgnoreCG="1"  
							ChildNumber="0">
							<Symbol>
								<SymbolName>
									<Compare Target="wcslen" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="STRING"/>
								</SymbolName>
							</Symbol>
						</Tree>
					</Tree>
				</OR>
				<Tree IgnoreCG="1"
					ChildNumber="0">
					<Kind>
						<Compare Target="AST_SYMBOL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Symbol>
						<SymbolName>
							<TagVariable VariableName="BufferLen" 
								DataType="STRING"/>
						</SymbolName>
					</Symbol>
				</Tree>
			</AND>
		</Event>

		<Event EventName="strcpy_direct">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<OR>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="strcpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="wcscpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
				</OR>
				<Tree IgnoreCG="1"  
					ChildNumber="1">
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Kind>
							<Compare Target="AST_SYMBOL"  
								TargetKind="CONST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Type>
							<TypeKind>
								<Compare Target="TY_ARRAY"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</TypeKind>
						</Type>
						<Symbol>
							<StorageClass>
								<Compare Target="SC_AUTO"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</StorageClass>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"
						ChildNumber="1">
						<Kind>
							<Compare Target="AST_SYMBOL"  
								TargetKind="CONST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Symbol>
							<SymbolKind>
								<Compare Target="SY_FORMALPARAMETER" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="ENUM"/>
							</SymbolKind>
						</Symbol>
						<Tag ObjectName="SrcBuffer" 
							ObjectType="INDIRECT"/>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="wcslendclr">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_DECLARATION"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"
					ChildNumber="0">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="wcslen" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="1">
						<Tree IgnoreCG="1"  
							ChildNumber="0">
							<Tree IgnoreCG="1"  
								ChildNumber="-5">
								<Kind>
									<Compare Target="AST_SYMBOL"  
										TargetKind="CONST"  
										Operator="EQ"  
										DataType="ENUM"/>
								</Kind>
								<Symbol>
									<SymbolKind>
										<Compare Target="SY_FORMALPARAMETER" 
											TargetKind="CONST" 
											Operator="EQ" 
											DataType="ENUM"/>
										</SymbolKind>
								</Symbol>
								<Tag ObjectName="SrcBuffer" 
									ObjectType="INDIRECT"/>
							</Tree>
						</Tree>
					</Tree>
				</Tree>
				<Tree IgnoreCG="1">
					<Symbol>
						<SymbolName>
							<TagVariable VariableName="BufferLen" 
								DataType="STRING"/>
						</SymbolName>
					</Symbol>
				</Tree>
			</AND>
		</Event>

		<Event EventName="wcslenvalidate">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_GE AST_LE AST_GT AST_LT"  
							TargetKind="CONST_LIST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<OR>
					<Tree IgnoreCG="1"
						ChildNumber="-4">
						<Kind>
							<Compare Target="AST_FUNCTIONCALL"  
								TargetKind="CONST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="1"  
							ChildNumber="0">
							<Symbol>
								<SymbolName>
									<Compare Target="wcslen" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="STRING"/>
								</SymbolName>
							</Symbol>
						</Tree>
						<Tree IgnoreCG="1"  
							ChildNumber="1">
							<Tree IgnoreCG="1"  
								ChildNumber="0">
								<Tree IgnoreCG="1"  
									ChildNumber="-5">
									<Kind>
										<Compare Target="AST_SYMBOL"  
											TargetKind="CONST"  
											Operator="EQ"  
											DataType="ENUM"/>
									</Kind>
									<Symbol>
										<SymbolKind>
											<Compare Target="SY_FORMALPARAMETER" 
												TargetKind="CONST" 
												Operator="EQ" 
												DataType="ENUM"/>
										</SymbolKind>
									</Symbol>
									<Tag ObjectName="SrcBuffer" 
										ObjectType="INDIRECT"/>
								</Tree>
							</Tree>
						</Tree>
					</Tree>
					<Tree IgnoreCG="1"
						ChildNumber="-4">
						<Kind>
							<Compare Target="AST_FUNCTIONCALL"  
								TargetKind="CONST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="1"  
							ChildNumber="0">
							<Symbol>
								<SymbolName>
									<Compare Target="strlen" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="STRING"/>
								</SymbolName>
							</Symbol>
						</Tree>
						<Tree IgnoreCG="1"  
							ChildNumber="1">
							<Tree IgnoreCG="1"  
								ChildNumber="0">
								<Tree IgnoreCG="1"  
									ChildNumber="-5">
									<Kind>
										<Compare Target="AST_SYMBOL"  
											TargetKind="CONST"  
											Operator="EQ"  
											DataType="ENUM"/>
									</Kind>
									<Symbol>
										<SymbolKind>
											<Compare Target="SY_FORMALPARAMETER" 
												TargetKind="CONST" 
												Operator="EQ" 
												DataType="ENUM"/>
										</SymbolKind>
									</Symbol>
									<Tag ObjectName="SrcBuffer" 
										ObjectType="INDIRECT"/>
								</Tree>
							</Tree>
						</Tree>
					</Tree>
				</OR>
			</AND>
		</Event>

		<Event EventName="if">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_IF"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="0">
					<Tree IgnoreCG="1"  
						ChildNumber="-5">
						<Kind>
							<Compare Target="AST_GE AST_LE AST_GT AST_LT"  
								TargetKind="CONST_LIST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="1"  
							ChildNumber="-4">
							<Symbol>
								<SymbolName>
									<Compare Target="BufferLen" 
										TargetKind="VARIABLE" 
										Operator="EQ" 
										DataType="STRING"/>
								</SymbolName>
							</Symbol>
						</Tree>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="CopyMemory">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<OR>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="CopyMemory" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="memcpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="strncpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="wcsncpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="memset" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
				</OR>
				<Tree IgnoreCG="1"  
					ChildNumber="1">
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Kind>
							<Compare Target="AST_SYMBOL"  
								TargetKind="CONST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Type>
							<TypeKind>
								<Compare Target="TY_ARRAY"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</TypeKind>
						</Type>
						<Symbol>
							<StorageClass>
								<Compare Target="SC_AUTO"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</StorageClass>
						</Symbol>
					</Tree>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="1">
					<Tree IgnoreCG="1"  
						ChildNumber="2">
						<Tree IgnoreCG="1"  
							ChildNumber="-5">
								<Kind>
									<Compare Target="AST_SYMBOL"  
										TargetKind="CONST"  
										Operator="EQ"  
										DataType="ENUM"/>
								</Kind>
								<Symbol>
									<SymbolName>
										<Compare Target="BufferLen" 
											TargetKind="VARIABLE" 
											Operator="EQ" 
											DataType="STRING"/>
									</SymbolName>
								</Symbol>
						</Tree>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="strcpy">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<OR>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="strcpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="wcscpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
				</OR>
				<Tree IgnoreCG="1"  
					ChildNumber="1">
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Kind>
							<Compare Target="AST_SYMBOL"  
								TargetKind="CONST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Type>
							<TypeKind>
								<Compare Target="TY_ARRAY"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</TypeKind>
						</Type>
						<Symbol>
							<StorageClass>
								<Compare Target="SC_AUTO"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</StorageClass>
						</Symbol>
					</Tree>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="1">
					<Tree IgnoreCG="1"  
						ChildNumber="1">
						<ObjectMatch Target="SrcBuffer"/>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<State StateName="InitState"
			StateKind="START">
			<Transition DestState="State1"
				EventName="wcslenassign"/>
			<Transition DestState="State1"
				EventName="wcslendclr"/>
			<Transition DestState="Error"
				EventName="strcpy_direct"/>
			<Transition DestState="GoodEnd"
				EventName="wcslenvalidate"/>
		</State>
		<State StateName="State1">
			<Transition DestState="Error"
				EventName="CopyMemory"/>
			<Transition DestState="Error"
				EventName="strcpy"/>
			<Transition DestState="GoodEnd"
				EventName="if"/>
		</State>
		<State StateName="GoodEnd">
			<Transition DestState="GoodEnd"
				EventName="strcpy"/>
			<Transition DestState="GoodEnd"
				EventName="CopyMemory"/>
		</State>
		<State StateName="Error"
			ErrorType="ERROR_IMMEDIATE"/>
	</Defect>
</Defects>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.1\x86\predecl\xml\predecl_msrc03024.xml ===
<?xml version ="1.0"?>
<Defects xmlns="x-schema:Schema.xdr">
	<Defect WarningId="418"
		Warning="Potential stack buffer overrun while writing to '%Buffer%': The size '%Size%' is being used without validation."
		DFAScope="CURRENT_FUNCTION"
		DFATravMode="PATH"
		WarningReportMode="PER_PATH">
		<Event EventName="assign">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_ASSIGN"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="0">
					<Kind>
						<Compare Target="AST_SYMBOL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Type>
						<TypeKind>
							<Compare Target="TY_INTEGRAL" 
								TargetKind="CONST" 
								Operator="EQ" 
								DataType="ENUM"/>
						</TypeKind>
						<TypeSize>
							<Compare Target="4" 
								TargetKind="CONST" 
								Operator="EQ" 
								DataType="INT"/>
						</TypeSize>
					</Type>
					<Tag ObjectName="Size" 
						ObjectType="INDIRECT"/>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
			</AND>
		</Event>

		<Event EventName="if">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_LT AST_LE AST_GT AST_GE"  
							TargetKind="CONST_LIST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Tree IgnoreCG="1"  
						ChildNumber="-4">
						<ObjectMatch Target="Size"/>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="memset">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<OR>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="CopyMemory" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="memcpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="strncpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="wcsncpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="memset" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
				</OR>
				<Tree IgnoreCG="1"  
					ChildNumber="1">
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Kind>
							<Compare Target="AST_SYMBOL"  
								TargetKind="CONST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Symbol>
							<StorageClass>
								<Compare Target="SC_AUTO" 
								TargetKind="CONST" 
								Operator="EQ" 
								DataType="ENUM"/>
							</StorageClass>
						</Symbol>
						<Type>
							<TypeKind>
								<Compare Target="TY_ARRAY"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</TypeKind>
						</Type>
						<Tag ObjectName="Buffer" 
							ObjectType="INDIRECT"/>
					</Tree>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="1">
					<Tree IgnoreCG="1"  
						ChildNumber="2">
						<Tree IgnoreCG="1"  
							ChildNumber="-5">
							<Kind>
								<Compare Target="AST_SYMBOL"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</Kind>
							<ObjectMatch Target="Size"/>
						</Tree>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<State StateName="InitState"
			StateKind="START">
			<Transition DestState="State1"
				EventName="assign"/>
		</State>
		<State StateName="State1">
			<Transition DestState="State2"
				EventName="if"/>
			<Transition DestState="State3"
				EventName="memset"/>
		</State>
		<State StateName="State2">
			<Transition DestState="State2"
				EventName="memset"/>
		</State>
		<State StateName="State3"
			ErrorType="ERROR_IMMEDIATE"/>
	</Defect>
</Defects>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.1\x86\predecl\xml\predecl_msrc03025.xml ===
<?xml version ="1.0"?>
<Defects xmlns="x-schema:Schema.xdr">
	<Defect WarningId="419"
		Warning="Potential buffer overrun: The size parameter '%Size%' is being used without validation."
		DFAScope="CURRENT_FUNCTION"
		DFATravMode="PATH"
		WarningReportMode="PER_PATH">

		<Event EventName="if">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_GT AST_LT AST_LE AST_GE"  
							TargetKind="CONST_LIST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Tree IgnoreCG="1"  
						ChildNumber="-2">
						<Kind>
							<Compare Target="AST_SYMBOL"  
								TargetKind="CONST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Symbol>
							<SymbolKind>
								<Compare Target="SY_FORMALPARAMETER"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</SymbolKind>
						</Symbol>					
						<Type>
							<TypeKind>
								<Compare Target="TY_INTEGRAL" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="ENUM"/>
							</TypeKind>
							<TypeSize>
								<Compare Target="2" 
									TargetKind="CONST" 
									Operator="GE" 
									DataType="INT"/>
							</TypeSize>
						</Type>
						<Tag ObjectName="Size" 
							ObjectType="INDIRECT"/>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="allocate">
			<OR>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="malloc" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="1">
						<Tree IgnoreCG="1"  
							ChildNumber="0">
							<Tree IgnoreCG="1"  
								ChildNumber="-5">
								<Kind>
									<Compare Target="AST_SYMBOL"  
										TargetKind="CONST"  
										Operator="EQ"  
										DataType="ENUM"/>
								</Kind>
								<ObjectMatch Target="Size"/>
							</Tree>
						</Tree>
					</Tree>
				</Tree>
				<Tree IgnoreCG="0">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Tree IgnoreCG="0"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="new" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="0"  
						ChildNumber="1">
						<Tree IgnoreCG="0"  
							ChildNumber="0">
							<Tree IgnoreCG="0"
								ChildNumber="0">
								<Tree IgnoreCG="0"  
									ChildNumber="-5">
									<Kind>
										<Compare Target="AST_SYMBOL"  
											TargetKind="CONST"  
											Operator="EQ"  
											DataType="ENUM"/>
									</Kind>
									<ObjectMatch Target="Size"/>
								</Tree>
							</Tree>
						</Tree>
					</Tree>
				</Tree>
			</OR>
		</Event>

		<Event EventName="memset">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<OR>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="CopyMemory" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="memcpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="strncpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="memset" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="wcsncpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
				</OR>
				<Tree IgnoreCG="1"  
					ChildNumber="1">
					<Tree IgnoreCG="1"  
						ChildNumber="2">
						<Tree IgnoreCG="1"  
							ChildNumber="-5">
							<Kind>
								<Compare Target="AST_SYMBOL"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</Kind>
							<ObjectMatch Target="Size"/>
						</Tree>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="memsetraw">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<OR>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="CopyMemory" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="memcpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="strncpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="memset" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="wcsncpy" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
				</OR>
				<Tree IgnoreCG="1"  
					ChildNumber="1">
					<Tree IgnoreCG="1"  
						ChildNumber="2">
						<Tree IgnoreCG="1"  
							ChildNumber="-5">
							<Kind>
								<Compare Target="AST_SYMBOL"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</Kind>
							<Symbol>
								<SymbolKind>
									<Compare Target="SY_FORMALPARAMETER"  
										TargetKind="CONST"  
										Operator="EQ"  
										DataType="ENUM"/>
								</SymbolKind>
							</Symbol>					
							<Type>
								<TypeKind>
									<Compare Target="TY_INTEGRAL" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="ENUM"/>
								</TypeKind>
								<TypeSize>
									<Compare Target="2" 
										TargetKind="CONST" 
										Operator="GE" 
										DataType="INT"/>
								</TypeSize>
							</Type>
							<Tag ObjectName="Size" 
								ObjectType="INDIRECT"/>
						</Tree>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="allocateraw">
			<OR>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="malloc" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="1">
						<Tree IgnoreCG="1"  
							ChildNumber="0">
							<Tree IgnoreCG="1"  
								ChildNumber="-5">
								<Kind>
									<Compare Target="AST_SYMBOL"  
										TargetKind="CONST"  
										Operator="EQ"  
										DataType="ENUM"/>
								</Kind>
								<Symbol>
									<SymbolKind>
										<Compare Target="SY_FORMALPARAMETER"  
											TargetKind="CONST"  
											Operator="EQ"  
											DataType="ENUM"/>
									</SymbolKind>
								</Symbol>					
								<Type>
									<TypeKind>
										<Compare Target="TY_INTEGRAL" 
											TargetKind="CONST" 
											Operator="EQ" 
											DataType="ENUM"/>
									</TypeKind>
									<TypeSize>
										<Compare Target="2" 
											TargetKind="CONST" 
											Operator="GE" 
											DataType="INT"/>
									</TypeSize>
								</Type>
								<Tag ObjectName="Size" 
									ObjectType="INDIRECT"/>
							</Tree>
						</Tree>
					</Tree>
				</Tree>
				<Tree IgnoreCG="0">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Tree IgnoreCG="0"  
						ChildNumber="0">
						<Symbol>
							<SymbolName>
								<Compare Target="new" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
					<Tree IgnoreCG="0"  
						ChildNumber="1">
						<Tree IgnoreCG="0"  
							ChildNumber="0">
							<Tree IgnoreCG="0"
								ChildNumber="0">
								<Tree IgnoreCG="0"  
									ChildNumber="-5">
									<Kind>
										<Compare Target="AST_SYMBOL"  
											TargetKind="CONST"  
											Operator="EQ"  
											DataType="ENUM"/>
									</Kind>
									<Symbol>
										<SymbolKind>
											<Compare Target="SY_FORMALPARAMETER"  
												TargetKind="CONST"  
												Operator="EQ"  
												DataType="ENUM"/>
										</SymbolKind>
									</Symbol>					
									<Type>
										<TypeKind>
											<Compare Target="TY_INTEGRAL" 
												TargetKind="CONST" 
												Operator="EQ" 
												DataType="ENUM"/>
										</TypeKind>
										<TypeSize>
											<Compare Target="2" 
												TargetKind="CONST" 
												Operator="GE" 
												DataType="INT"/>
										</TypeSize>
									</Type>
									<Tag ObjectName="Size" 
										ObjectType="INDIRECT"/>
								</Tree>
							</Tree>
						</Tree>
					</Tree>
				</Tree>
			</OR>
		</Event>

		<State StateName="InitState"
			StateKind="START">
			<Transition DestState="State1"
				EventName="if"/>
			<Transition DestState="State3"
				EventName="memsetraw"/>
			<Transition DestState="State3"
				EventName="allocateraw"/>
		</State>
		<State StateName="State1">
			<Transition DestState="State2"
				EventName="memset"/>
			<Transition DestState="State2"
				EventName="allocate"/>
		</State>
		<State StateName="State2">
			<Transition DestState="State2"
				EventName="memset"/>
			<Transition DestState="State2"
				EventName="allocate"/>
		</State>
		<State StateName="State3"
			ErrorType="ERROR_IMMEDIATE"/>
	</Defect>
</Defects>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.1\x86\predecl\xml\predecl_SmrtPtrDeref.xml ===
<?xml version ="1.0"?>
<Defects xmlns="x-schema:Schema.xdr">
	<Defect WarningId="416"
		Warning="Dereferencing NULL smart pointer '%TagObj1%'."
		DFAScope="CURRENT_FUNCTION"
		DFATravMode="PATH"
		WarningReportMode="PER_PATH">
		<Event EventName="Zero">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="0">
					<Kind>
						<Compare Target="AST_DOT"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Type>
							<TypeKind>
								<Compare Target="TY_CLASS" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="ENUM"/>
							</TypeKind>
						</Type>
						<Tag ObjectName="TagObj1" 
							ObjectType="INDIRECT"/>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="1">
						<Symbol>
							<SymbolName>
								<Compare Target="=" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
						<Type>
							<TypeKind>
								<Compare Target="TY_MEMBERFUNC" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="ENUM"/>
							</TypeKind>
						</Type>
					</Tree>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="1">
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Value>
							<Compare Target="0" 
								TargetKind="CONST" 
								Operator="EQ" 
								DataType="INT"/>
						</Value>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="Assign">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="0">
					<Kind>
						<Compare Target="AST_DOT"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Type>
							<TypeKind>
								<Compare Target="TY_CLASS" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="ENUM"/>
							</TypeKind>
						</Type>
						<ObjectMatch Target="TagObj1"/>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="1">
						<Symbol>
							<SymbolName>
								<Compare Target="=" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
						<Type>
							<TypeKind>
								<Compare Target="TY_MEMBERFUNC" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="ENUM"/>
							</TypeKind>
						</Type>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="TakeRef">
			<AND>
				<Tree IgnoreCG="0">
					<Kind>
						<Compare Target="AST_TAKEREF AST_ADDRESS"  
							TargetKind="CONST_LIST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<OR>
					<Tree IgnoreCG="0"  
						ChildNumber="0">
						<Type>
							<TypeKind>
								<Compare Target="TY_CLASS" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="ENUM"/>
							</TypeKind>
						</Type>
						<Tree IgnoreCG="0"  
							ChildNumber="1">
							<ObjectMatch Target="TagObj1"/>
						</Tree>
					</Tree>
					<Tree IgnoreCG="0"  
						ChildNumber="0">
						<Type>
							<TypeKind>
								<Compare Target="TY_CLASS" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="ENUM"/>
							</TypeKind>
						</Type>
						<Tree IgnoreCG="0"  
							ChildNumber="1">
							<ObjectMatch Target="TagObj1"/>
						</Tree>
					</Tree>
				</OR>
			</AND>
		</Event>

		<Event EventName="Address">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="0">
					<Kind>
						<Compare Target="AST_DOT"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<ObjectMatch Target="TagObj1"/>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="1">
						<Symbol>
							<SymbolName>
								<Compare Target="&amp;" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="validate">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_NE"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="-2">
					<Value>
						<Compare Target="0" 
							TargetKind="CONST" 
							Operator="EQ" 
							DataType="INT"/>
					</Value>
				</Tree>
				<Tree IgnoreCG="1"
					ChildNumber="-2">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Kind>
							<Compare Target="AST_ARROW"  
								TargetKind="CONST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="1"  
							ChildNumber="0">
							<ObjectMatch Target="TagObj1"/>
						</Tree>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="validate2">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Tree IgnoreCG="1"  
						ChildNumber="1">
						<Tree IgnoreCG="1"  
							ChildNumber="0">
							<Value>
								<Compare Target="0"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="INT"/>
							</Value>
						</Tree>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<Kind>
							<Compare Target="AST_DOT"  
								TargetKind="CONST"  
								Operator="EQ"  
								DataType="ENUM"/>
						</Kind>
						<Tree IgnoreCG="1"  
							ChildNumber="-2">
							<Kind>
								<Compare Target="AST_SYMBOL"  
									TargetKind="CONST"  
									Operator="EQ"  
									DataType="ENUM"/>
							</Kind>
							<Symbol>
								<SymbolName>
									<Compare Target="!=" 
										TargetKind="CONST" 
										Operator="EQ" 
										DataType="STRING"/>
								</SymbolName>
							</Symbol>
						</Tree>
						<Tree IgnoreCG="1"  
							ChildNumber="-2">
							<ObjectMatch Target="TagObj1"/>
						</Tree>
					</Tree>
				</Tree>
			</AND>
		</Event>

		<Event EventName="Arrow">
			<AND>
				<Tree IgnoreCG="1">
					<Kind>
						<Compare Target="AST_FUNCTIONCALL"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
				</Tree>
				<Tree IgnoreCG="1"  
					ChildNumber="0">
					<Kind>
						<Compare Target="AST_DOT"  
							TargetKind="CONST"  
							Operator="EQ"  
							DataType="ENUM"/>
					</Kind>
					<Tree IgnoreCG="1"  
						ChildNumber="0">
						<ObjectMatch Target="TagObj1"/>
					</Tree>
					<Tree IgnoreCG="1"  
						ChildNumber="1">
						<Symbol>
							<SymbolName>
								<Compare Target="->" 
									TargetKind="CONST" 
									Operator="EQ" 
									DataType="STRING"/>
							</SymbolName>
						</Symbol>
					</Tree>
				</Tree>
			</AND>
		</Event>
		<State StateName="InitState"
			StateKind="START">
			<Transition DestState="State1"
				EventName="Zero"/>
		</State>
		<State StateName="State1">
			<Transition DestState="State2"
				EventName="Arrow"/>
			<Transition DestState="State3"
				EventName="Assign"/>
			<Transition DestState="State3"
				EventName="Address"/>
			<Transition DestState="State3"
				EventName="TakeRef"/>
			<Transition DestState="State3"
				EventName="validate"/>
			<Transition DestState="State3"
				EventName="validate2"/>
		</State>
		<State StateName="State2"
			ErrorType="ERROR_IMMEDIATE"/>
		<State StateName="State3">
			<Transition DestState="State1"
				EventName="Zero"/>
		</State>
	</Defect>
</Defects>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\PreSharp\0.9.30.769\x86\readme.doc ===
Microsoft Office Word Document MSWordDoc Word.Document.8Microsoft Corporation PREsharp Installation and Usage Title _PID_HLINKSPREsharp Installation and Usage Dirk Karis Normal.dot Dirk Karis Microsoft Office WordPREsharp Installation and Usage Windows Users Note: PREsharp is already in your build environment at %SDXROOT%\tools\analysis\x86\OACR\presharp, and is run by OACR.  See   HYPERLINK "http://OACR"  http://OACR  for more information.  You probably do not need to install PREsharp. Setup 1. Choose a new directory to be PRESHARP_HOME set PRESHARP_HOME=c:\presharp 2. Copy the PREsharp release (  HYPERLINK "file:///\\\\tkfiltoolbox\\tools\\23239"  \\tkfiltoolbox\tools\23239  ) to PRESHARP_HOME 3. Add PRESHARP_HOME to your path path %PRESHARP_HOME%\bin;%path% .NET Framework Dependencies PREsharp is based on a modified version of the Whidbey C# compiler (csc.exe).  If your build environment includes a Whidbey .NET Framework (Windows does, in %SDXROOT%\tools\x86\managed\urt), PREsharp can use that.  Otherwise, we recommend that you install the Whidbey .NET framework.  PREsharp is derived from Whidbey Beta 2 (2.0.50215), which is available  HYPERLINK "\\\\cpvsbuild\\drops\\whidbey\\beta2\\layouts\\x86ret\\50215.45\\enu\\urt\\std\\ixp" .  Even if you are using a 2.0 .NET Frameworks from your build environment, your machine must .NET Frameworks version 1.1 or 2.0 fully installed (i.e. visible in the Add/Remove Programs control panel), not 1.0 only. PREsharp Beta has improved handling of source code written for older (1.0 and 1.1) .NET Framework versions compared to the Alpha.  While PREsharp itself must run with a 2.0 .NET Framework, it will analyze your code in the context of the version you write against. Confirming Installation Success Setting the right Framework Version If you have .NET Frameworks 2.0 installed, continue to  Running the Examples .  If not, you must set two variables: set COMPLUS_VERSION=v2.0 set COMPLUS_INSTALLROOT=%PRESHARP_HOME%\frameworks. Running the Examples cd %PRESHARP_HOME%\examples pshparse /unsafe /t:library *.cs pshview bitwise.presharp.xml You should see 85 warning messages (look at the  Defect 1 of 85  message in the upper right corner). /unsafe  flag is step 2 is only required by params.cs if you run the examples individually. Running PREsharp in a build.exe environment (without OACR) Choose a directory to hold temporary files containing information on your build (command lines and saved response files for csc.exe) set PRESHARP_COMMAND_FILE_DIR=c:\presharp_commands Run build.exe, replacing the csharp compiler with the presharp interceptor. build [your arguments]  nmake CS_COMPILER_NAME=%PRESHARP_HOME%\bin\pshcsc.exe If desired, set PRESHARP_OUTPUT_DIR to a directory to contain all the warnings and output files.  They will be named only according to the simple filename of the executable that they correspond to.  If this will cause file name collisions, do not set the variable. Run %PRESHARP_COMMAND_FILE_DIR%\presharp.bat.  You probably want to redirect the output to a file, it is very verbose (it tells you as it analyzes each function).  Viewing PREsharp warnings You can use either the included (PREfast-derived) viewer or load the messages to a PREfix UI In the included (PREfast-derived) viwer pshview binary.exe.presharp.xml In the PREfix UI: pfximport -logtype pftxml binary.exe.presharp.xml Further documentation  HYPERLINK "http://presharp"  http://presharp  for further documentation, including a full list of warnings issued by PREsharp and environment variables used to configure PREsharp. rfrSr gd;CZ gd;CZ gd;CZ
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.1\x86\scripts\DefectUI\Filters.xml ===
<?xml version='1.0'?>
<DefectFilters defaultPreset="Recommended Filters">
    <preset name="Recommended Filters" recommended="1">
    </preset>

    <preset name="(all defects)">
    </preset>

    <preset name="(no defects)" invert="1">
    </preset>
	<preset name="winpft" invert="1">
		<excludeWarnings>29;53;56;57;59;63;67;201;202;205;207;241;243;248;252;259;260;268;276;277;281;282;287;288;289;290;291;296;298;299;305;306;308;</excludeWarnings>
		<excludeRegExps>pft</excludeRegExps>
	</preset>

	<preset name="buffer_overrun" invert="1">
		<excludeWarnings>29;57;200;201;202;203;204;205;207;327;385;386;391;394;411;412;</excludeWarnings>
		<excludeRegExps>pft</excludeRegExps>
	</preset>

	<preset name="integer_overflow" invert="1">
		<excludeWarnings>415;420;421;422;423;424;425;426;427;428;429;430;12011;12012;12013;12014;12015;12016;</excludeWarnings>
		<excludeRegExps>pft;NTPub;VC6;MFC;ATL;LKRH;MIDL</excludeRegExps>
	</preset>

	<preset name="wspmin" invert="1">
		<excludeWarnings>29;53;56;57;59;63;67;201;202;205;207;241;243;248;252;259;260;268;276;277;281;282;287;288;289;290;291;296;298;299;305;306;308;</excludeWarnings>
		<excludeRegExps>pft</excludeRegExps>
	</preset>

	<Filter id="pft" enableByDefault="1">
		<description>PREfast Internal Errors</description>
		<field>DEFECTCODE</field>
		<regexp>99[0-9]{3}</regexp>
	</Filter>

	<Filter id="NTPub" enableByDefault="1">
		<description>NT Public files</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*\\public\\.*$</regexp>
		<regexp>^.*\.public\..*$</regexp>				
	</Filter>

	<Filter id="VC6" enableByDefault="1">
		<description>VC6 includes</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*\\vc98\\include\\.*$</regexp>
	</Filter>

	<Filter id="MFC" enableByDefault="1">
		<description>MFC includes</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*\\mfc\\include\\.*$</regexp>
		<regexp>^.*\\atlmfc\\.*$</regexp>        
		<regexp>^.*\\mfcatl\\.*$</regexp>                                
	</Filter>

	<Filter id="ATL" enableByDefault="1">
		<description>ATL includes</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*\\atl\\.*$</regexp>
		<regexp>^.*\\atl30\\.*$</regexp>        
		<regexp>^.*\\atl70\\.*$</regexp> 
		<regexp>^.*\\atlmfc\\.*$</regexp>        
		<regexp>^.*\\mfcatl\\.*$</regexp>                        
	</Filter>

	<Filter id="LKRH" enableByDefault="1">
		<description>LKRHash.h</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*\\lkrhash\.h$</regexp>
	</Filter>

	<Filter id="MIDL" enableByDefault="1">
		<description>generated MIDL files</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*_[psc]\.c$</regexp>
	</Filter>

	<Filter id="INC" enableByDefault="0">
		<description>all include files</description>
		<field>SFA/FILEPATH;SFA/FILENAME</field>
		<regexp>^.*\\include\\.*$</regexp>
		<regexp>^.*\\inc\\.*$</regexp>
	</Filter>

</DefectFilters>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.1\x86\predecl\xml\predecl_tree.xml ===
<?xml version ="1.0"?>
<Defects xmlns="x-schema:Schema.xdr">
    <Defect WarningId="390"
            Warning="Pointer offset arithmetic involving signed-unsigned conversions could cause crashes with 64-bit pointers."
            DFAScope="CURRENT_TREE"
            DFATravMode="TREE">
        <Event EventName="Error">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_PLUS"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0">
                    <Type>
                        <TypeKind>
                            <Compare Target="TY_POINTER"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </TypeKind>
                    </Type>
                </Tree>
                <Tree ChildNumber="1">
                    <Kind>
                        <Compare Target="AST_MULT"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <OR>
                    <AND>
                        <Tree ChildNumber="1">
                            <Tree ChildNumber="0">
                                <Type>
                                    <TypeIsSigned>
                                        <Compare Target="1"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="BOOL"/>
                                    </TypeIsSigned>
                                </Type>
                            </Tree>
                        </Tree>
                        <NOT>
                            <Tree ChildNumber="1">
                                <Tree ChildNumber="0">
                                    <Tree ChildNumber="-5">
                                        <Kind>
                                            <Compare Target="AST_PLUS"
                                                     TargetKind="CONST"
                                                     Operator="EQ"
                                                     DataType="ENUM"/>
                                        </Kind>
                                    </Tree>
                                </Tree>
                            </Tree>
                        </NOT>
                        <NOT>
                            <Tree ChildNumber="1">
                                <Tree ChildNumber="0">
                                    <Kind>
                                        <Compare Target="AST_SYMBOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                    <Symbol>
                                        <SymbolName>
                                            <Compare Target="i"
                                                     TargetKind="CONST"
                                                     Operator="EQ"
                                                     DataType="STRING"/>
                                        </SymbolName>
                                    </Symbol>
                                </Tree>
                            </Tree>
                        </NOT>
                        <OR>
                            <Tree ChildNumber="1">
                                <Tree ChildNumber="0">
                                    <Kind>
                                        <Compare Target="AST_CONSTANT"
                                                 TargetKind="CONST"
                                                 Operator="NE"
                                                 DataType="ENUM"/>
                                    </Kind>
                                </Tree>
                            </Tree>
                            <Tree ChildNumber="1">
                                <Tree ChildNumber="0">
                                    <Kind>
                                        <Compare Target="AST_CONSTANT"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                    <Value>
                                        <Compare Target="0"
                                                 TargetKind="CONST"
                                                 Operator="LT"
                                                 DataType="INT"/>
                                    </Value>
                                </Tree>
                            </Tree>
                        </OR>
                        <Tree ChildNumber="1">
                            <Tree ChildNumber="1">
                                <Type>
                                    <TypeIsSigned>
                                        <Compare Target="0"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="BOOL"/>
                                    </TypeIsSigned>
                                </Type>
                            </Tree>
                        </Tree>
                    </AND>
                    <AND>
                        <Tree ChildNumber="1">
                            <Tree ChildNumber="1">
                                <Type>
                                    <TypeIsSigned>
                                        <Compare Target="1"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="BOOL"/>
                                    </TypeIsSigned>
                                </Type>
                            </Tree>
                        </Tree>
                        <NOT>
                            <Tree ChildNumber="1">
                                <Tree ChildNumber="1">
                                    <Tree ChildNumber="-5">
                                        <Kind>
                                            <Compare Target="AST_PLUS"
                                                     TargetKind="CONST"
                                                     Operator="EQ"
                                                     DataType="ENUM"/>
                                        </Kind>
                                    </Tree>
                                </Tree>
                            </Tree>
                        </NOT>
                        <NOT>
                            <Tree ChildNumber="1">
                                <Tree ChildNumber="1">
                                    <Kind>
                                        <Compare Target="AST_SYMBOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                    <Symbol>
                                        <SymbolName>
                                            <Compare Target="i"
                                                     TargetKind="CONST"
                                                     Operator="EQ"
                                                     DataType="STRING"/>
                                        </SymbolName>
                                    </Symbol>
                                </Tree>
                            </Tree>
                        </NOT>
                        <OR>
                            <Tree ChildNumber="1">
                                <Tree ChildNumber="1">
                                    <Kind>
                                        <Compare Target="AST_CONSTANT"
                                                 TargetKind="CONST"
                                                 Operator="NE"
                                                 DataType="ENUM"/>
                                    </Kind>
                                </Tree>
                            </Tree>
                            <Tree ChildNumber="1">
                                <Tree ChildNumber="1">
                                    <Kind>
                                        <Compare Target="AST_CONSTANT"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                    <Value>
                                        <Compare Target="0"
                                                 TargetKind="CONST"
                                                 Operator="LT"
                                                 DataType="INT"/>
                                    </Value>
                                </Tree>
                            </Tree>
                        </OR>
                        <Tree ChildNumber="1">
                            <Tree ChildNumber="0">
                                <Type>
                                    <TypeIsSigned>
                                        <Compare Target="0"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="BOOL"/>
                                    </TypeIsSigned>
                                </Type>
                            </Tree>
                        </Tree>
                    </AND>
                </OR>
            </AND>
        </Event>

        <State StateName="InitState"
               StateKind="START">
            <Transition DestState="ErrorState"
                        EventName="Error"/>
        </State>

        <State StateName="ErrorState"
               ErrorType="ERROR_IMMEDIATE"/>
    </Defect>

    <Defect WarningId="391"
            Warning="Potentially reading invalid data in call to 'SysAllocStringLen'. The size of the buffer '%source_string%' is less than the number of bytes copied from it."
            DFAScope="CURRENT_TREE"
            DFATravMode="TREE">
        <Event EventName="Error">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_FUNCTIONCALL"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Symbol>
                        <SymbolName>
                            <Compare Target="SysAllocStringLen"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="STRING"/>
                        </SymbolName>
                    </Symbol>
                </Tree>
                <Tree ChildNumber="1"
                      IgnoreCG="1">
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <Tag ObjectName="source_string"
                             ObjectType="INDIRECT"/>
                    </Tree>
                </Tree>
                <Tree ChildNumber="1"
                      IgnoreCG="1">
                    <Tree ChildNumber="1"
                          IgnoreCG="1">
                        <Tag ObjectName="NewLength"
                             ObjectType="INT"/>
                    </Tree>
                </Tree>
                <RTCondition ObjectName="source_string"
                             ObjectAttribute="ELEM_COUNT"
                             Operator="GE"
                             Target="NewLength"
                             TargetKind="VARIABLE"
                             DataType="INT"/>
            </AND>
        </Event>

        <State StateName="InitState"
               StateKind="START">
            <Transition DestState="ErrorState"
                        EventName="Error"/>
        </State>

        <State StateName="ErrorState"
               ErrorType="ERROR_IMMEDIATE"/>
    </Defect>

    <Defect WarningId="392"
            Warning="Incorrect comparison between bool and VARIANT_BOOL typed expressions."
            DFAScope="CURRENT_TREE"
            DFATravMode="TREE">
        <Event EventName="Error">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_EQUALS"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <OR>
                    <AND>
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <Type>
                                <TypedefName>
                                    <SymbolName>
                                        <Compare Target="VARIANT_BOOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="STRING"/>
                                    </SymbolName>
                                </TypedefName>
                            </Type>
                        </Tree>
                        <Tree ChildNumber="1"
                              IgnoreCG="1">
                            <Type>
                                <TypedefName>
                                    <SymbolName>
                                        <Compare Target="BOOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="STRING"/>
                                    </SymbolName>
                                </TypedefName>
                            </Type>
                        </Tree>
                    </AND>
                    <AND>
                        <Tree ChildNumber="1"
                              IgnoreCG="1">
                            <Type>
                                <TypedefName>
                                    <SymbolName>
                                        <Compare Target="VARIANT_BOOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="STRING"/>
                                    </SymbolName>
                                </TypedefName>
                            </Type>
                        </Tree>
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <Type>
                                <TypedefName>
                                    <SymbolName>
                                        <Compare Target="BOOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="STRING"/>
                                    </SymbolName>
                                </TypedefName>
                            </Type>
                        </Tree>
                    </AND>
                </OR>
            </AND>
        </Event>

        <State StateName="InitState"
               StateKind="START">
            <Transition DestState="Error"
                        EventName="Error"/>
        </State>

        <State StateName="Error"
               ErrorType="ERROR_IMMEDIATE"/>
    </Defect>

    <Defect WarningId="393"
            Warning="Incorrect comparison between a 64-bit variable and the 32-bit constant '0xFFFFFFFF'."
            DFAScope="CURRENT_TREE"
            DFATravMode="TREE">
        <Event EventName="Error">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_EQUALS"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <OR>
                    <AND>
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <Kind>
                                <Compare Target="AST_CONSTANT"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Type>
                                <TypeSize>
                                    <Compare Target="4"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="INT"/>
                                </TypeSize>
                                <TypeIsSigned>
                                    <Compare Target="0"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="BOOL"/>
                                </TypeIsSigned>
                            </Type>
                            <Value>
                                <Compare Target="-1"
                                    TargetKind="CONST"
                                    Operator="EQ"
                                    DataType="INT"/>
                            </Value>
                        </Tree>
                        <Tree ChildNumber="1"
                              IgnoreCG="1">
                            <Kind>
                                <Compare Target="AST_SYMBOL"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Type>
                                <TypeSize>
                                    <Compare Target="8"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="INT"/>
                                </TypeSize>
                            </Type>
                        </Tree>
                    </AND>
                    <AND>
                        <Tree ChildNumber="1"
                              IgnoreCG="1">
                            <Kind>
                                <Compare Target="AST_CONSTANT"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Type>
                                <TypeSize>
                                    <Compare Target="4"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="INT"/>
                                </TypeSize>
                                <TypeIsSigned>
                                    <Compare Target="0"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="BOOL"/>
                                </TypeIsSigned>
                            </Type>
                            <Value>
                                <Compare Target="-1"
                                    TargetKind="CONST"
                                    Operator="EQ"
                                    DataType="INT"/>
                            </Value>
                        </Tree>
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <Kind>
                                <Compare Target="AST_SYMBOL"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Type>
                                <TypeSize>
                                    <Compare Target="8"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="INT"/>
                                </TypeSize>
                            </Type>
                        </Tree>
                    </AND>
                </OR>
            </AND>
        </Event>

        <State StateName="InitState"
               StateKind="START">
            <Transition DestState="Error"
                        EventName="Error"/>
        </State>

        <State StateName="Error"
               ErrorType="ERROR_IMMEDIATE"/>
    </Defect>

    <Defect WarningId="394"
            Warning="Potential buffer overrun while writing to buffer '%buffer_name%'. The buffer pointer is being incremented inside a loop."
            DFAScope="CURRENT_TREE"
            DFATravMode="TREE">
        <Event EventName="WhileLoopStartDeref">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_WHILE"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="1">
                    <Kind>
                        <Compare Target="AST_NULLSTMT"
                                 TargetKind="CONST"
                                 Operator="NE"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <NOT>
                    <Tree ChildNumber="0">
                        <Value>
                            <Compare Target="0"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="INT"/>
                        </Value>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Kind>
                            <Compare Target="AST_SYMBOL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_PAREN"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tree ChildNumber="0">
                                    <Kind>
                                        <Compare Target="AST_SYMBOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                </Tree>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_GT AST_GE AST_LT AST_LE AST_PREDECR AST_POSTDECR"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_EQUALS"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Type>
                                    <TypeSize>
                                        <Compare Target="4"
                                                 TargetKind="CONST"
                                                 Operator="GE"
                                                 DataType="INT"/>
                                    </TypeSize>
                                </Type>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <OR>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_DEREF"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-4">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tag ObjectName="CONDITION_POINTER"
                                     ObjectType="INDIRECT"/>
                            </Tree>
                        </Tree>
                    </Tree>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_INDEX"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="0">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tag ObjectName="CONDITION_POINTER"
                                     ObjectType="INDIRECT"/>
                            </Tree>
                        </Tree>
                    </Tree>
                </OR>
            </AND>
        </Event>

        <Event EventName="ForLoopStartDeref">
            <AND>
                <OR>
                    <AND>
                        <Tree>
                            <Kind>
                                <Compare Target="AST_FOR"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                        <Tree ChildNumber="3">
                            <Kind>
                                <Compare Target="AST_NULLSTMT"
                                         TargetKind="CONST"
                                         Operator="NE"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </AND>
                    <Tree>
                        <Kind>
                            <Compare Target="AST_DO"
                                     TargetKind="CONST_LIST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </OR>
                <NOT>
                    <Tree ChildNumber="1">
                        <Value>
                            <Compare Target="0"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="INT"/>
                        </Value>
                    </Tree>
                </NOT>            
                <NOT>
                    <Tree ChildNumber="1">
                        <Kind>
                            <Compare Target="AST_SYMBOL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_PAREN"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tree ChildNumber="0">
                                    <Kind>
                                        <Compare Target="AST_SYMBOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                </Tree>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_GT AST_GE AST_LT AST_LE AST_PREDECR AST_POSTDECR"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_EQUALS"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Type>
                                    <TypeSize>
                                        <Compare Target="4"
                                                 TargetKind="CONST"
                                                 Operator="GE"
                                                 DataType="INT"/>
                                    </TypeSize>
                                </Type>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <OR>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_DEREF"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-4">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tag ObjectName="CONDITION_POINTER"
                                     ObjectType="INDIRECT"/>
                            </Tree>
                        </Tree>
                    </Tree>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_INDEX"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="0">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tag ObjectName="CONDITION_POINTER"
                                     ObjectType="INDIRECT"/>
                            </Tree>
                        </Tree>
                    </Tree>
                </OR>
            </AND>
        </Event>

        <Event EventName="WhileLoopStart">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_WHILE"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="1">
                    <Kind>
                        <Compare Target="AST_NULLSTMT"
                                 TargetKind="CONST"
                                 Operator="NE"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <NOT>
                    <Tree ChildNumber="0">
                        <Value>
                            <Compare Target="0"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="INT"/>
                        </Value>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Kind>
                            <Compare Target="AST_SYMBOL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_PAREN"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tree ChildNumber="0">
                                    <Kind>
                                        <Compare Target="AST_SYMBOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                </Tree>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_GT AST_GE AST_LT AST_LE AST_PREDECR AST_POSTDECR"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_EQUALS"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Type>
                                    <TypeSize>
                                        <Compare Target="4"
                                                 TargetKind="CONST"
                                                 Operator="GE"
                                                 DataType="INT"/>
                                    </TypeSize>
                                </Type>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
            </AND>
        </Event>

        <Event EventName="ForLoopStart">
            <AND>
                <OR>
                    <AND>
                        <Tree>
                            <Kind>
                                <Compare Target="AST_FOR"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                        <Tree ChildNumber="3">
                            <Kind>
                                <Compare Target="AST_NULLSTMT"
                                         TargetKind="CONST"
                                         Operator="NE"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </AND>
                    <Tree>
                        <Kind>
                            <Compare Target="AST_DO"
                                     TargetKind="CONST_LIST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </OR>
                <NOT>
                    <Tree ChildNumber="1">
                        <Value>
                            <Compare Target="0"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="INT"/>
                        </Value>
                    </Tree>
                </NOT>            
                <NOT>
                    <Tree ChildNumber="1">
                        <Kind>
                            <Compare Target="AST_SYMBOL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_PAREN"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tree ChildNumber="0">
                                    <Kind>
                                        <Compare Target="AST_SYMBOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                </Tree>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_GT AST_GE AST_LT AST_LE AST_PREDECR AST_POSTDECR"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_EQUALS"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Type>
                                    <TypeSize>
                                        <Compare Target="4"
                                                 TargetKind="CONST"
                                                 Operator="GE"
                                                 DataType="INT"/>
                                    </TypeSize>
                                </Type>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
            </AND>
        </Event>

        <Event EventName="WhileLoopStartWithCheck">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_WHILE"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <OR>
                    <Tree ChildNumber="0">
                        <Value>
                            <Compare Target="0"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="INT"/>
                        </Value>
                    </Tree>
                    <Tree ChildNumber="0">
                        <Kind>
                            <Compare Target="AST_SYMBOL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                            </Tree>
                        </Tree>
                    </Tree>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_PAREN"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tree ChildNumber="0">
                                    <Kind>
                                        <Compare Target="AST_SYMBOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                </Tree>
                            </Tree>
                        </Tree>
                    </Tree>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_GT AST_GE AST_LT AST_LE AST_PREDECR AST_POSTDECR"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_EQUALS"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Type>
                                    <TypeSize>
                                        <Compare Target="4"
                                                 TargetKind="CONST"
                                                 Operator="GE"
                                                 DataType="INT"/>
                                    </TypeSize>
                                </Type>
                            </Tree>
                        </Tree>
                    </Tree>
                </OR>
            </AND>
        </Event>

        <Event EventName="ForLoopStartWithCheck">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_DO AST_FOR"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <OR>
                    <Tree ChildNumber="1">
                        <Value>
                            <Compare Target="0"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="INT"/>
                        </Value>
                    </Tree>
                    <Tree ChildNumber="1">
                        <Kind>
                            <Compare Target="AST_SYMBOL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_SYMBOL"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                            </Tree>
                        </Tree>
                    </Tree>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_AND"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Kind>
                                    <Compare Target="AST_PAREN"
                                             TargetKind="CONST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                                <Tree ChildNumber="0">
                                    <Kind>
                                        <Compare Target="AST_SYMBOL"
                                                 TargetKind="CONST"
                                                 Operator="EQ"
                                                 DataType="ENUM"/>
                                    </Kind>
                                </Tree>
                            </Tree>
                        </Tree>
                    </Tree>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_GT AST_GE AST_LT AST_LE AST_PREDECR AST_POSTDECR"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_EQUALS"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="-2">
                                <Type>
                                    <TypeSize>
                                        <Compare Target="4"
                                                 TargetKind="CONST"
                                                 Operator="GE"
                                                 DataType="INT"/>
                                    </TypeSize>
                                </Type>
                            </Tree>
                        </Tree>
                    </Tree>
                </OR>
            </AND>
        </Event>

        <Event EventName="Increment">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_POSTINCR AST_PREINCR"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Type>
                        <TypeKind>
                            <Compare Target="TY_POINTER"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </TypeKind>
                    </Type>
                </Tree>
                <NOT>
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <ObjectMatch Target="CONDITION_POINTER"/>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <ObjectMatch Target="READ_POINTER"/>
                    </Tree>
                </NOT>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Tag ObjectName="INCREMENTED_POINTER"
                         ObjectType="INDIRECT"/>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Tag ObjectName="buffer_name"
                         ObjectType="INDIRECT"/>
                </Tree>
            </AND>
        </Event>

        <Event EventName="IncrementPreTagged">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_POSTINCR AST_PREINCR"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <Type>
                        <TypeKind>
                            <Compare Target="TY_POINTER"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </TypeKind>
                    </Type>
                </Tree>
                <Tree ChildNumber="0"
                      IgnoreCG="1">
                    <ObjectMatch Target="DEREFED_POINTER"/>
                </Tree>
            </AND>
        </Event>

        <Event EventName="IncrementLoopVar">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_POSTINCR AST_PREINCR"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0">
                    <Kind>
                        <Compare Target="AST_SYMBOL"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                    <Type>
                        <TypeKind>
                            <Compare Target="TY_INTEGRAL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </TypeKind>
                    </Type>
                    <Tag ObjectName="LOOP_VAR"
                         ObjectType="INT"/>
                </Tree>
            </AND>
        </Event>

        <Event EventName="IncrementIndexVar">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_POSTINCR AST_PREINCR"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                </Tree>
                <Tree ChildNumber="0">
                    <Kind>
                        <Compare Target="AST_SYMBOL"
                                 TargetKind="CONST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                    <Type>
                        <TypeKind>
                            <Compare Target="TY_INTEGRAL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </TypeKind>
                    </Type>
                    <ObjectMatch Target="INDEX_VAR"/>
                </Tree>
            </AND>
        </Event>
        
        <Event EventName="Dereference">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_ASSIGN AST_ADDRESS AST_ASSIGNPLUS AST_ASSIGNMINUS"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                    <Tree ChildNumber="0">
                        <Kind>
                            <Compare Target="AST_DEREF"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </Tree>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <Type>
                            <TypeKind>
                                <Compare Target="TY_POINTER"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </TypeKind>
                        </Type>
                        <Kind>
                            <Compare Target="AST_SYMBOL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </Tree>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <ObjectMatch Target="CONDITION_POINTER"/>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <ObjectMatch Target="READ_POINTER"/>
                        </Tree>
                    </Tree>
                </NOT>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <Tag ObjectName="DEREFED_POINTER"
                             ObjectType="INDIRECT"/>
                    </Tree>
                </Tree>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <Tag ObjectName="buffer_name"
                             ObjectType="INDIRECT"/>
                    </Tree>
                </Tree>
            </AND>
        </Event>
        
        <Event EventName="DerefPreTagged">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_ASSIGN AST_ADDRESS AST_ASSIGNPLUS AST_ASSIGNMINUS"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                    <Tree ChildNumber="0">
                        <Kind>
                            <Compare Target="AST_DEREF"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </Tree>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="0"
                          IgnoreCG="1">
                        <ObjectMatch Target="INCREMENTED_POINTER"/>
                    </Tree>
                </Tree>
            </AND>
        </Event>

        <Event EventName="Index">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_ASSIGN AST_ADDRESS AST_ASSIGNPLUS AST_ASSIGNMINUS"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                    <Tree ChildNumber="0">
                        <Kind>
                            <Compare Target="AST_INDEX"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                        <Tree ChildNumber="0">
                            <Kind>
                                <Compare Target="AST_SYMBOL"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                </Tree>                
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0">
                            <ObjectMatch Target="CONDITION_POINTER"/>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <ObjectMatch Target="READ_POINTER"/>
                        </Tree>
                    </Tree>
                </NOT>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="1">
                        <Kind>
                            <Compare Target="AST_SYMBOL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                        <Tag ObjectName="INDEX_VAR"
                             ObjectType="INT"/>
                    </Tree>
                </Tree>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="0">
                        <Tag ObjectName="buffer_name"
                             ObjectType="INDIRECT"/>
                    </Tree>
                </Tree>
            </AND>
        </Event>

        <Event EventName="IndexLoopVar">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_ASSIGN AST_ADDRESS AST_ASSIGNPLUS AST_ASSIGNMINUS"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                    <Tree ChildNumber="0">
                        <Kind>
                            <Compare Target="AST_INDEX"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                        <Tree ChildNumber="0">
                            <Kind>
                                <Compare Target="AST_SYMBOL"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                </Tree>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0">
                            <ObjectMatch Target="CONDITION_POINTER"/>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree>
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <ObjectMatch Target="READ_POINTER"/>
                        </Tree>
                    </Tree>
                </NOT>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="1">
                        <Kind>
                            <Compare Target="AST_SYMBOL"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                        <Type>
                            <TypeKind>
                                <Compare Target="TY_INTEGRAL"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </TypeKind>
                        </Type>
                        <ObjectMatch Target="LOOP_VAR"/>
                    </Tree>
                </Tree>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="0">
                        <Tag ObjectName="buffer_name"
                             ObjectType="INDIRECT"/>
                    </Tree>
                </Tree>
            </AND>
        </Event>

        <Event EventName="DerefWhileIncrement">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_ASSIGN AST_ADDRESS AST_ASSIGNPLUS AST_ASSIGNMINUS"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                    <Tree ChildNumber="0">
                        <Kind>
                            <Compare Target="AST_DEREF"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </Tree>
                <OR>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <Kind>
                                <Compare Target="AST_PREINCR AST_POSTINCR"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0"
                              IgnoreCG="1">
                            <Kind>
                                <Compare Target="AST_PAREN"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                            <Tree ChildNumber="0"
                                  IgnoreCG="1">
                                <Kind>
                                    <Compare Target="AST_PREINCR AST_POSTINCR"
                                             TargetKind="CONST_LIST"
                                             Operator="EQ"
                                             DataType="ENUM"/>
                                </Kind>
                            </Tree>
                        </Tree>
                    </Tree>
                </OR>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0">
                            <Tree ChildNumber="0">
                                <ObjectMatch Target="CONDITION_POINTER"/>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0">
                            <Tree ChildNumber="0">
                                <Tree ChildNumber="0">
                                    <ObjectMatch Target="CONDITION_POINTER"/>
                                </Tree>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0">
                            <Tree ChildNumber="0">
                                <Tree ChildNumber="0">
                                    <ObjectMatch Target="READ_POINTER"/>
                                </Tree>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0">
                            <Tree ChildNumber="0">
                                <ObjectMatch Target="READ_POINTER"/>
                            </Tree>
                        </Tree>
                    </Tree>
                </NOT>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0">
                            <Tag ObjectName="buffer_name"
                                 ObjectType="INDIRECT"/>
                        </Tree>
                    </Tree>
                </Tree>
            </AND>
        </Event>

        <Event EventName="IndexWhileIncrement">
            <AND>
                <Tree>
                    <Kind>
                        <Compare Target="AST_ASSIGN AST_ADDRESS AST_ASSIGNPLUS AST_ASSIGNMINUS"
                                 TargetKind="CONST_LIST"
                                 Operator="EQ"
                                 DataType="ENUM"/>
                    </Kind>
                    <Tree ChildNumber="0">
                        <Kind>
                            <Compare Target="AST_INDEX"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                    </Tree>
                </Tree>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="1">
                        <Tree ChildNumber="-5">
                            <Kind>
                                <Compare Target="AST_PREINCR AST_POSTINCR"
                                         TargetKind="CONST_LIST"
                                         Operator="EQ"
                                         DataType="ENUM"/>
                            </Kind>
                        </Tree>
                    </Tree>
                </Tree>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0">
                            <ObjectMatch Target="CONDITION_POINTER"/>
                        </Tree>
                    </Tree>
                </NOT>
                <NOT>
                    <Tree ChildNumber="0">
                        <Tree ChildNumber="0">
                            <ObjectMatch Target="READ_POINTER"/>
                        </Tree>
                    </Tree>
                </NOT>
                <Tree ChildNumber="0">
                    <Tree ChildNumber="0">
                        <Tag ObjectName="buffer_name"
                             ObjectType="INDIRECT"/>
                    </Tree>
                </Tree>
            </AND>
        </Event>

        <State StateName="InitState"
               StateKind="START">
            <Transition DestState="LoopStart"
                        EventName="ForLoopStartDeref"/>
            <Transition DestState="LoopStart"
                        EventName="WhileLoopStartDeref"/>
            <Transition DestState="LoopStart"
                        EventName="ForLoopStart"/>
            <Transition DestState="LoopStart"
                        EventName="WhileLoopStart"/>
        </State>

        <State StateName="LoopStart">
            <Transition DestState="Error"
                        EventName="DerefWhileIncrement"/>
            <Transition DestState="Error"
                        EventName="IndexWhileIncrement"/>

            <Transition DestState="Error"
                        EventName="IncrementPreTagged"/>
            <Transition DestState="Error"
                        EventName="DerefPreTagged"/>

            <Transition DestState="Error"
                        EventName="IndexLoopVar"/>
            <Transition DestState="Error"
                        EventName="IncrementIndexVar"/>

            <Transition DestState="LoopStart"
                        EventName="Increment"/>
            <Transition DestState="LoopStart"
                        EventName="Dereference"/>

            <Transition DestState="LoopStart"
                        EventName="Index"/>
            <Transition DestState="LoopStart"
                        EventName="IncrementLoopVar"/>

            <Transition DestState="LoopStart"
                        EventName="ForLoopStartDeref"/>
            <Transition DestState="LoopStart"
                        EventName="WhileLoopStartDeref"/>

            <Transition DestState="Safe"
                        EventName="ForLoopStartWithCheck"/>
            <Transition DestState="Safe"
                        EventName="WhileLoopStartWithCheck"/>
        </State>

        <State StateName="Safe"/>

        <State StateName="Error"
               ErrorType="ERROR_IMMEDIATE"/>
    </Defect>
</Defects>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\prefast\2.1\x86\predecl\xml\predecl_sizeof.xml ===
<?xml version ="1.0"?>
<Defects xmlns="x-schema:Schema.xdr">
    <Defect WarningId="415"
            Warning="Integer overflow problem: the value of '%Value%' is greater than the maximum value of integer type it's being casted to. This causes data truncation."
            DFAScope="CURRENT_TREE"
            DFATravMode="TREE">
        <Event EventName="Error">
            <OR>
                <AND>
                    <Tree IgnoreCG="0">
                        <Kind>
                            <Compare Target="AST_CAST"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                        <Type>
                            <TypeSize>
                                <Compare Target="1"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="INT"/>
                            </TypeSize>
                        </Type>
                    </Tree>
                    <Tree ChildNumber="0"
                          IgnoreCG="0">
                        <Kind>
                            <Compare Target="AST_SIZEOFTYPE AST_SIZEOFEXPR"
                                     TargetKind="CONST_LIST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                        <Value>
                            <Compare Target="255"
                                     TargetKind="CONST"
                                     Operator="GT"
                                     DataType="INT"/>
                        </Value>
			<Tag ObjectName="Value" 
				ObjectType="INDIRECT"/>
                    </Tree>
                </AND>
                <AND>
                    <Tree IgnoreCG="0">
                        <Kind>
                            <Compare Target="AST_CAST"
                                     TargetKind="CONST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                        <Type>
                            <TypeSize>
                                <Compare Target="2"
                                         TargetKind="CONST"
                                         Operator="EQ"
                                         DataType="INT"/>
                            </TypeSize>
                        </Type>
                    </Tree>
                    <Tree ChildNumber="0"
                          IgnoreCG="0">
                        <Kind>
                            <Compare Target="AST_SIZEOFTYPE AST_SIZEOFEXPR"
                                     TargetKind="CONST_LIST"
                                     Operator="EQ"
                                     DataType="ENUM"/>
                        </Kind>
                        <Value>
                            <Compare Target="65535"
                                     TargetKind="CONST"
                                     Operator="GT"
                                     DataType="INT"/>
                        </Value>
			<Tag ObjectName="Value" 
				ObjectType="INDIRECT"/>
                    </Tree>
                </AND>
            </OR>
        </Event>

        <State StateName="InitState"
               StateKind="START">
            <Transition DestState="ErrorState"
                        EventName="Error"/>
        </State>

        <State StateName="ErrorState"
               ErrorType="ERROR_IMMEDIATE"/>
    </Defect>
</Defects>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\PreSharp\0.9.30.769\x86\viewer\bin\modules\version.txt ===
2400
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\PreSharp\0.9.30.769\x86\viewer\scripts\defectUI\DefectVersion.txt ===
2400
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\PreSharp\0.9.30.769\x86\viewer\scripts\defectUI\Filters.xml ===
<?xml version='1.0'?>
<DefectFilters defaultPreset="Recommended Filters">
    <preset name="Recommended Filters" recommended="1">
    </preset>

    <preset name="(all defects)">
    </preset>

    <preset name="(no defects)" invert="1">
    </preset>
</DefectFilters>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\PreSharp\0.9.30.769\x86\viewer\scripts\defectUI\DefectDefs.xml ===
<?xml version="1.0"?>
<DefectDefs><DefectDefGroup guid="f3e62509-8ff2-4342-b74b-cc50db6c1b80" id="56500" name="PREsharpBasics">
		<display>
            Presharp Basics
        </display>
		<doc>
			<p>
                The PREsharp Basics plugin detects a variety of csharp errors.
            </p>
		</doc>
		<ownerURL>
            http://winweb/cse/tools/presharp
        </ownerURL>
		<ownerContact>
            pshbug
        </ownerContact>
		<DefectDef guid="e02b87ea-f172-438a-86a7-fc254b20b0f3" id="56031" name="ReturnValueIgnored">
			<description>
				<format>
                    Return value ignored
                </format>
			</description>
			<additionalInfo>
				<format>
                    %function% could return unexpected value
                </format>
				<param name="function" format="'%ls'"/>
			</additionalInfo>
			<doc>
				<p>
                    This message indicates that the calling function is not
                    checking the return value of a function call.  The
                    function may signal failure via its return value, or the
                    function may simply return a value that the caller is not
                    expecting.
                </p>
				<p>
                    The indicated function is external and returns an
                    <code>int</code> value; typically, this is actually an
                    <code>HRESULTS</code> from DllImport (i.e. native, most
                    likely Win32) functions.  This return value must be
                    checked as the function will not throw an exception on
                    failure. 
                </p>
				<p>
                    Depending on which function is being called, this defect
                    may lead to seemingly random program behavior, including
                    crashes and data corruptions in error conditions or
                    low-resource situations.
                </p>
				<p>
                    The called function is an external static function that
                    returns an <code>int</code> most likely an
                    <code>HRESULT</code> and thus should be checked.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    ImpersonateNamedPipeClient(Pipe);
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    if (!ImpersonateNamedPipeClient(Pipe)) {
                        // Dangerous to continue

                        return;
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="3fa1981a-f781-4b4f-a93b-98c610e7e432" id="56511" name="BitwiseZeroOrExpr">
			<description>
				<format>
                    (&lt;zero&gt; | &lt;expression&gt;) is always
                    &lt;expression&gt; 
                </format>
			</description>
			<doc>
				<p>
                    This warning indicates that a constant value of zero was
                    provided as an argument to the bitwise-or
                    (<code>|</code>)operator.
                </p>
				<p>
                    The result of (0 | value) is always value. This occurs
                    most often when the 0 is a member of a flags enumeration.
                </p>
				<p>
                    Note that Section 4.1.7: Enum Design in the .NET
                    Framework Design Guidelines recommends against including
                    0 in a flags enumeration. 
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    class Defective%id% {
                        private State           _s;

                        [Flags()]
                        public enum State {
                            Disabled = 0x0,
                            Grayed = 0x1,
                            Enabled =  0x2,
                            Popup = 0x4
                        };

                        void
                        Disable(
                        )
                        {
                            _s = _s | State.Disabled;
                        }

                        void
                        setDisabledAndGrayed(
                        )
                        {
                            _s = State.Grayed | State.Disabled;
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    class Acceptable%id% {
                        private State           _s;

                        [Flags()]
                        public enum State {
                            Disabled = 0x0, 
                            Grayed = 0x1,
                            Enabled =  0x2,
                            Popup = 0x4
                        };

                        void
                        Disable(
                        )
                        {
                            _s = _s & (~State.Enabled);
                        }

                        void
                        setDisabledAndGrayed(
                        )
                        {
                            _s = State.Grayed & (~State.Enabled);
                        }
                    }
                ]]></correctedSrc>
				<correctedSrc><![CDATA[
                    class Preferred%id% {
                        bool                    _enabled;
                        private State           _s;

                        [Flags()]
                        public enum State {
                            Grayed = 0x1,
                            Popup = 0x4
                        };

                        void
                        Disable(
                        )
                        {
                            _enabled = false;
                        }

                        void
                        setDisabledAndGrayed(
                        )
                        {
                            _enabled = false;

                            _s = State.Grayed;
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="ab95bd60-1792-4928-86a4-57e13b3cd211" id="56512" name="BitwiseExprOrZero">
			<description>
				<format>
                    (&lt;expression&gt; | &lt;zero&gt;) is always &lt;expression&gt;
                </format>
			</description>
			<doc>
				<p>
                    This warning indicates that a constant value of zero was
                    provided as an argument to the bitwise-or
                    (<code>|</code>)operator.
                </p>
				<p>
                    The result of (value | 0) is always value. This occurs
                    most often when the 0 is a member of a flags enumeration.
                </p>
				<p>
                    Note that Section 4.1.7: Enum Design in the .NET
                    Framework Design Guidelines recommends against including
                    0 in a flags enumeration. 
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    class Defective%id% {
                        private State           _s;

                        [Flags()]
                        public enum State {
                            Disabled = 0x0,
                            Grayed = 0x1,
                            Enabled =  0x2,
                            Popup = 0x4
                        };

                        void
                        Disable(
                        )
                        {
                            _s |= State.Disabled;      //  ??? warning

                            _s = State.Disabled | _s;
                        }

                        void
                        setDisabledAndGrayed(
                        )
                        {
                            _s = State.Grayed | State.Disabled;
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    class Acceptable%id% {
                        private State           _s;

                        [Flags()]
                        public enum State {
                            Disabled = 0x0, 
                            Grayed = 0x1,
                            Enabled =  0x2,
                            Popup = 0x4
                        };

                        void
                        Disable(
                        )
                        {
                            _s = (~State.Enabled) & _s;
                        }

                        void
                        setDisabledAndGrayed(
                        )
                        {
                            _s = State.Grayed & (~State.Enabled);
                        }
                    }
                ]]></correctedSrc>
				<correctedSrc><![CDATA[
                    class Preferred%id% {
                        bool                    _enabled;
                        private State           _s;

                        [Flags()]
                        public enum State {
                            Grayed = 0x1,
                            Popup = 0x4
                        };

                        void
                        Disable(
                        )
                        {
                            _enabled = false;
                        }

                        void
                        setDisabledAndGrayed(
                        )
                        {
                            _enabled = false;

                            _s = State.Grayed;
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="57ededde-30c0-4621-9401-2ff81c4be42a" id="56513" name="BitwiseExprAndZero">
			<description>
				<format>
                    (&lt;zero&gt; &amp; &lt;expression&gt;) is always zero
                </format>
			</description>
			<doc>
				<p>
                    This warning indicates that a constant value of zero
                    was provided as an argument to the bitwise-and
                    (<code>&amp;</code>) operator.
                </p>
				<p>
                    The resulting expression is constant and evaluates to
                    false.
                </p>
				<p>
                    This is typically caused by using bitwise-and to test
                    for a flag that has the value zero.  In order to test
                    zero-valued flags, a test for equality must be performed
                    (e.g. using <code>==</code> or <code>!=</code>).
                </p>
				<p>
                    Note that Section 4.1.7: Enum Design in the <a href="http://devdiv/spectool/documents/milestone-independent/designguidelines/designguidelines.doc">
                    .NET Framework Design Guidelines</a> recommends against
                    including 0 in a flags enumeration. 
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    class Defective%id% {
                        private State           _s;

                        [Flags()]
                        public enum State
                        {
                            Disabled = 0x0,
                            Grayed = 0x1,
                            Enabled =  0x2,
                            Popup = 0x4
                        };
                       
                        bool
                        isDisabled(
                        )
                        {
                            _s &= State.Disabled;   // ??? warning
                                
                            return ((State.Disabled & _s) != 0);
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    class Acceptable%id% {
                        private State           _s;

                        [Flags()]
                        public enum State
                        {
                            Disabled = 0x0,
                            Grayed = 0x1,
                            Enabled =  0x2,
                            Popup = 0x4
                        };
                       
                        bool
                        isDisabled(
                        )
                        {
                            return (_s & State.Enabled) != State.Enabled;
                        }
                    }
                ]]></correctedSrc>
				<correctedSrc><![CDATA[
                    class Preferred%id% {
                        bool                    _enabled;
                        private State           _s;

                        [Flags()]
                        public enum State
                        {
                            Grayed = 0x1,
                            Popup = 0x4
                        };
                       
                        bool
                        isDisabled(
                        )
                        {
                            return !_enabled;
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="f464b642-aaba-4cb6-b467-6ed8fbf24205" id="56514" name="BitwiseZeroAndExpr">
			<description>
				<format>
                    (&lt;expression&gt; &amp; &lt;zero&gt;) is always zero
                </format>
			</description>
			<doc>
				<p>
                    This warning indicates that a constant value of zero
                    was provided as an argument to the bitwise-and
                    (<code>&amp;</code>) operator.
                </p>
				<p>
                    The resulting expression is constant and evaluates to
                    false.
                </p>
				<p>
                    This is typically caused by using bitwise-and to test
                    for a flag that has the value zero.  In order to test
                    zero-valued flags, a test for equality must be performed
                    (e.g. using <code>==</code> or <code>!=</code>).
                </p>
				<p>
                    Note that Section 4.1.7: Enum Design in the .NET
                    Framework Design Guidelines recommends against including
                    0 in a flags enumeration. 
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    class Defective%id% {
                        private State           _s;

                        [Flags()]
                        public enum State
                        {
                            Disabled = 0x00,
                            Grayed = 0x01,
                            Enabled =  0x02,
                            Popup = 0x10
                        };
                       
                        bool
                        isDisabled(
                        )
                        {
                            _s &= State.Disabled;   // ??? warning
                                
                            return ((_s & State.Disabled) != 0);
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    class Acceptable%id% {
                        private State           _s;

                        [Flags()]
                        public enum State
                        {
                            Disabled = 0x00,
                            Grayed = 0x01,
                            Enabled =  0x02,
                            Popup = 0x10
                        };
                       
                        bool
                        isDisabled(
                        )
                        {
                            return (_s & State.Enabled) != State.Enabled;
                        }
                    }
                ]]></correctedSrc>
				<correctedSrc><![CDATA[
                    class Preferred%id% {
                        bool                    _enabled;
                        private State           _s;

                        [Flags()]
                        public enum State
                        {
                            Grayed = 0x01,
                            Popup = 0x10
                        };
                       
                        bool
                        isDisabled(
                        )
                        {
                            return !_enabled;
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="f323ef8c-4643-4a20-8bc1-095451d382f1" id="56515" name="TruncatedAddressUsed">
			<description>
				<format>
                    Converting previously truncated Int32 to IntPtr
                </format>
			</description>
			<doc>
				<p>
                    On a 64-bit platform, an <code>IntPtr</code> is a 64-bit
                    value, while an <code>Int32</code> is always a 32-bit
                    one.  Converting an <code>IntPtr</code> to an
                    <code>Int32</code> and back again loses information and
                    results in a bad memory reference.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    IntPtr 
                    forbidden(
                        IntPtr                  p
                    )
                    {
                        Int32                   i;

                        i = p.ToInt32();

                        return (IntPtr)i;
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="637dc6ad-4833-4014-a2f4-42c043beb3d7" id="56516" name="MonitorWaitInIf">
			<description>
				<format>
                    Suspicious use of Monitor.Wait within an 'if'; 'while'
                    is safer 
                </format>
			</description>
			<doc>
				<p>
                    The defect detection capabilities of this message are
                    currently being enhanced. More information will be
                    posted to this site as it is available. 
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="1d2724a5-2fa8-4c5d-a3c3-d4fae1832a00" id="56517" name="PublicTypeLocked">
			<description>
				<format>Do not 'lock(this)' in public types</format>
			</description>
			<doc>
				<p>
                    This message indicates that the code is vulnerable to a
                    deadlock or denial of service attack.
                </p>
				<p>
					<code>Lock</code> does not require any permissions on an
                    object other than the pointer to the object itself.
                    Because the code is in a public type, the object pointer 
                    will most likely be available to untrusted code.

                </p>
				<p>
                    For more information, see <a href="http://devdiv/spectool/documents/milestone-independent/designguidelines/designguidelines.doc">Section
                    12.2:  Threading</a> in the .NET Framework Design
                    Guidelines.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    using System;

                    public class PublicLock {
                        void 
                        incorrect(
                        )
                        {
                            lock (this) {
                                // This can lead to deadlock or possibly a
                                // denial-of-service attack.
                            }
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    using System;

                    public class PublicLock
                    {
                        PublicLock(
                        )
                        {
                            innerLock = new Object(); // Dummy used for locking to avoid deadlocks
                        }

                        void
                        correct(
                        )
                        {
                            lock (innerLock) {
                                // Safe; only this class can lock
                            }
                        }

                        private object innerLock;
                    } 

                    internal class PrivateLock {
                        void
                        acceptable(
                        )
                        {
                            lock(this) {
                                // PrivateLock is internal, so this is safe.
                            }
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="6688a46c-16cc-4d23-bd2f-1cf25dcc99d5" id="56518" name="LocalIDisposableLeaked">
			<description>
				<format>
                    Local IDisposable object %name% not disposed
                </format>
				<param name="name" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
                    Inheritance path is %inheritance%
                </format>
				<param name="inheritance" format="'%ls'"/>
			</additionalInfo>
			<doc>
				<p>
                    This message indicates that this method creates an
                    <code>IDisposable</code> object locally but does not
                    dispose of it before exiting the function.
                </p>
				<p>
                    The fact that an object implements
                    <code>IDisposable</code> indicates that the object
                    controls some resource (unmanaged memory, a file handle,
                    network connection, something) that should be cleaned up
                    in a timely fashion.
                </p>
				<p>
                    As the code is written, the object will not be cleaned
                    up until garbage collection at an indeterminate point in
                    the future.  This is likely a performance issue.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    void 
                    Pos%id%(
                    )
                    {
                        IDisposable local = new MyDisposableObject();
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    void 
                    Neg%id%(
                    )
                    {
                        IDisposable local = new MyDisposableObject();

                        local.Dispose();
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="21e29b72-d174-467b-91d7-1e5b7203ac00" id="56519" name="ThrowFromDispose">
			<description>
				<format>
                    Do not throw from an implementation of IDisposable.Dispose
                </format>
			</description>
			<doc>
				<p>
                    When an <code>IDisposable</code> object is used inside a
                    using statement, the <code>Dispose</code> method is
                    called on exit from that using. If the using statement
                    is exited due to an exception being thrown, the
                    <code>Dispose</code> method is still called.
                </p>
				<p>
                    However if the <code>Dispose</code> method throws an
                    exception, the original exception (i.e., the original
                    error condition) is effectively discarded, and the
                    exception thrown from the <code>Dispose</code> method is
                    thrown.  This can significantly complicate debugging, as
                    the original exception is gone. 
                </p>
				<p>
                    In the defective example below, the exception that is
                    thrown from <code>t.Method1</code> is masked by the
                    exception thrown from <code>t.Dispose</code>.  This
                    causes the first handler, which catches type
                    <code>MyException</code>, to be executed, even though
                    the original problem was caused by the call to
                    <code>Method1</code>, which (if not for the other
                    exception) would been handled by the second handler, by
                    catching the original
                    <code>ArgumentNullException)</code>.
                </p>
				<p>
                    In order to avoid this behaviour do not throw exceptions
                    from implementations of <code>IDisposable.Dispose</code>.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    class Test : IDisposable {

                        public void 
                        Dispose(
                        )
                        {
                            throw new MyException();
                        }

                        public void 
                        Method1(
                            Object                  obj
                        )
                        {
                            if (obj == null) {
                                throw new ArgumentNullException();
                            }
                        }
                    }

                    class Pos%id% {
                        void 
                        fn(
                        )
                        {
                            try {
                                using (Test t = new Test()) {
                                    t.Method1(null);
                                }
                            } catch (MyException ex) {
                                MessageBox.Show("MyException: " + ex.StackTrace.ToString());
                            } catch (ArgumentNullException ex){
                                MessageBox.Show("ArgumentException: " + ex.StackTrace.ToString()); 
                            }
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="9e74c0a9-523c-457F-b3ad-d5908a9bef1c" id="56520" name="LocalVarAndMemberSameName">
			<description>
				<format>
                    Local variable %name% has the same name as a member
                    variable 
                </format>
				<param name="name" format="'%ls'"/>
			</description>
			<doc>
				<p>
                    When a local variable is declared with the same name as a
                    member variable, that member variable cannot be accessed
                    within the scope. It is likely that the intention was to
                    access the member variable, and not declare a new local
                    variable.
                </p>
				<p>
                    Even when the intention is to declare a new local
                    variable, a better practice to use names that are
                    different from member variable names; it leads to less
                    confusion.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    class   Pos%id% {
                        int             Example;

                        void
                        fn(
                            int                     p
                        )
                        {
                            int                     Example = p;

                            // Did we actually intend to set Pos%id%.Example ?

                            return Example;
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    class   Neg%id% {
                        int             Example;

                        void
                        fn(
                            int                     p
                        )
                        {
                            int                     localExample = p;

                            // Obviously didn't intend to set Neg%id%.Example.

                            return localExample;
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="562a9f6f-103e-4A58-981a-1f11aca798dc" id="56521" name="UseStringBuilderNotConcat">
			<description>
				<format>
                    Use StringBuilder instead of String to concatenate strings
                </format>
			</description>
			<doc>
				<p>
                    This warning indicates that <code>String</code>s are
                    being used to concatenate several strings together into
                    a result string.  When concatenating three or more
                    strings together, the
                    <code>System.Text.StringBuilder</code> class yields
                    better performance. 
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    class Pos%id% {
                        void 
                        ShowResult(
                            string                  resultText, 
                            object                  result
                        )
                        {
                            string                  strTextOutput(resultText);

                            strTextOutput += ":  " + result.ToString();  

                            Console.WriteLine(strTextOutput);
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    using System.Text;

                    class Neg%id% {
                        void 
                        ShowResult(
                            string                  resultText, 
                            object                  result
                        )
                        {
                            StringBuilder           strTextOutput(resultText);

                            strTextOutput.Append(":  ")
                            strTextOutput.Append(result.ToString());

                            Console.WriteLine(strTextOutput.ToString());
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="7be7ae54-97cb-4BC4-9526-92991d831d8b" id="56524" name="IDispMembersMustBeInIDispClass">
			<description>
				<format>
                    Class contains IDisposable member variable '%string%', so 
                    it should implement IDisposable itself
                </format>
				<param name="string" format="%ls"/>
			</description>
			<doc>
				<p>
                    In order to ensure that all <code>IDisposable</code>
                    objects are properly managed, it is recommended that any
                    class that has member variables that implement
                    <code>IDisposable</code> should also implement
                    <code>IDisposable</code> itself. 
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    class DisposableClass : IDisposable {
                        public void
                        Dispose(
                        )
                        {
                            Dispose(true);
                            GC.SuppressFinalize(this);
                        }

                        protected virtual void
                        Dispose(
                            bool                        disposing
                        )
                        {
                            if (disposing) {
                                // clean up managed resources
                            }

                            // clean up unmanaged resources
                        }
                    }

                    class Example {
                        DisposableClass d;

                        // Note: no implementation of Dispose
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    class DisposableClass : IDisposable {
                        public void
                        Dispose(
                        )
                        {
                            Dispose(true);
                            GC.SuppressFinalize(this);
                        }

                        protected virtual void
                        Dispose(
                            bool                        disposing
                        )
                        {
                            if (disposing) {
                                // clean up managed resources
                            }

                            // clean up unmanaged resources
                        }
                    }

                    class Example {
                        DisposableClass d;

                        protected virtual void
                        Dispose(
                            bool                        disposing
                        )
                        {
                            if (disposing) {
                                // clean up managed resources

                                d.Dispose();
                            }

                            // clean up unmanaged resources
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="9f7b3b05-a3f7-4858-9eaa-033baee10d90" id="56525" name="NoMemberRefsInDestructor">
			<description>
				<format>
                    Do not use member variable references in destructor
                </format>
			</description>
			<doc>
				<p>
                    When the destructor is called by the GC, it is very
                    possible that some or all of the objects referenced by
                    class members are already garbage collected, so
                    dereferencing those objects may cause exceptions to be
                    thrown.
                </p>
				<p>
                    To avoid confusion and unexpected behavior, it is
                    generally a good idea for destructors to only perform
                    cleanup on data stored in their object's own fields, and
                    not to perform any actions on referenced objects or
                    static fields.
                </p>
				<p>
                    See the <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/csspec/html/vclrfcsharpspec_3_9.asp">
                    Automatic Memory Management section</a> 
                    in the C# Language Specification for more information.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="4896990a-95a4-4894-a06e-7a181b82af72" id="56527" name="RecursivePropertyGet">
			<description>
				<format>
                    Possible infinite recursion 
                </format>
			</description>
			<additionalInfo>
				<format>
                    Property get method calls itself recurisvely
                </format>
			</additionalInfo>
			<doc>
				<p>
                    Most cases of recursive property get methods are bugs, in
                    that the property is often given a very similar name to a
                    data member of the class, and the recursive call is a
                    misspelled attempt to access the member.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    class Foo {
                        private int longLongNamedProperty;

                        public int LongLongNamedProperty
                        {
                            get { return LongLongNamedProperty; }
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    class Foo {
                        private int longLongNamedProperty;

                        public int LongLongNamedProperty
                        {
                            get { return longLongNamedProperty; }
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="6346101e-b3ac-4ee0-b311-0296bfc09754" id="56528" name="NeedDisposeBool">
			<description>
				<format>
                    This class needs a Dispose(bool) method; parent class
                    %parent% requires it 
                </format>
				<param name="parent" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
                    Inheritance path is %inheritance%
                </format>
				<param name="inheritance" format="'%ls'"/>
			</additionalInfo>
			<doc>
				<p>

                    This warning indicates that the a parent class from which
                    the current class is derived that implements
                    <code>Dispose(bool)</code>, and hence this class
                    must as well.
                </p>
				<p>
                    One of the methods of implementing
                    <code>IDisposable</code> classes involves defining both
                    <code>Dispose()</code> and <code>Dispose(bool)</code>.
                    The second, <code>Dispose(bool)</code>, is declared as a
                    virtual method, and if implemented in the base class,
                    must also be implemented in dervied classes.
                </p>
				<p>
                    Failure to implement the <code>Dipose(bool)</code> method
                    in the derived class will compile without error, but
                    could result in a <code>System.TypeLoadException</code>
                    exception being thrown when the class is loaded at
                    runtime. 
                </p>
				<p>
                    See <a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;315528">KB
                    Article Q315528</a> for more details.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    class DisposableBase : IDisposable {
                        public void Dispose()
                        {
                            Dispose(true);
                            GC.SuppressFinalize(this);
                        }

                        protected virtual void Dispose(bool disposing)
                        {
                            if (disposing) {
                                // clean up managed resources
                            }

                            // clean up unmanaged resources
                        }
                    }

                    class DisposableDerived : DisposableBase {
                        // Note: no implementation of Dispose
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    class DisposableBase : IDisposable {
                        public void Dispose()
                        {
                            Dispose(true);
                            GC.SuppressFinalize(this);
                        }

                        protected virtual void Dispose(bool disposing)
                        {
                            if (disposing) {
                                // clean up managed resources
                            }

                            // clean up unmanaged resources
                        }
                    }

                    class DisposableDerived : DisposableBase {
                        protected override void Dispose(bool disposing)
                        {
                            if (disposing) {
                                // clean up derived's managed resources
                            }

                            // clean up derived's unmanaged resources

                            // dispose of the base object
                            base.Dispose(disposing);
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="438bab9f-6991-49f1-b91c-9d3f873a6d54" id="56529" name="DisposeCallsBase">
			<description>
				<format>
                    This Dispose(bool) method should call
                    base.Dispose(bool); parent class %parent% resources
                    won't be freed 
                </format>
				<param name="parent" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
                    Inheritance path is %inheritance%
                </format>
				<param name="inheritance" format="'%ls'"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that the class has a parent class
                    that implements Dispose(bool), but the derived class's
                    implementation of <code>Dipose(bool)</code> doesn't call
                    <code>base.Dispose(bool)</code>.  The base class's
                    resources may not be freed.
                </p>
				<p>
                    One of the methods of implementing
                    <code>IDisposable</code> classes involves defining both
                    <code>Dispose()</code> and <code>Dispose(bool)</code>.
                    The second, <code>Dispose(bool)</code> is declared as a
                    virtual method, and if implemented in the base class,
                    must also be implemented in dervied classes.  The actual
                    disposing of resources is done in the
                    <code>Dispose(bool)</code> methods, the base class
                    disposing of its resources and the derived class
                    disposing of its resources. It order to make sure all
                    resources are disposed of, derived classes must call the
                    base class implementations. 
                </p>
				<p>
                    See <a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;315528">KB
                    Article Q315528</a> for more details.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    class DisposableBase : IDisposable {

                        public void 
                        Dispose()
                        {
                            Dispose(true);
                            GC.SuppressFinalize(this);
                        }

                        protected virtual void 
                        Dispose(bool disposing)
                        {
                            if (disposing) {
                                // clean up managed resources
                            }

                            // clean up unmanaged resources
                        }
                    }

                    class DisposableDerived : DisposableBase {

                        protected virtual void 
                        Dispose(bool disposing)
                        {
                            if (disposing) {
                                // clean up derived's managed resources
                            }

                            // clean up derived's unmanaged resources
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    class DisposableBase : IDisposable { 

                        public void 
                        Dispose()
                        {
                            Dispose(true);
                            GC.SuppressFinalize(this);
                        }

                        protected virtual void
                        Dispose(bool disposing)
                        {
                            if (disposing) {
                                // clean up managed resources
                            }
                            // clean up unmanaged resources
                        }
                    }

                    class DisposableDerived : DisposableBase {

                        protected override void 
                        Dispose(bool disposing) 
                        {
                            if (disposing){
                                // clean up derived's managed resources
                            }

                            // clean up derived's unmanaged resources

                            // dispose of the base object
                            base.Dispose(disposing);
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
	</DefectDefGroup>
	<DefectDefGroup guid="f3e62509-8ff2-4342-b74b-cc50db6c1b80" id="56500" name="PREsharpExceptions">
		<display>
            PREsharp Exceptions
        </display>
		<doc>
			<p>
                This PREsharp module detects poor use of exceptions.
            </p>
		</doc>
		<ownerURL>
            http://presharp
        </ownerURL>
		<ownerContact>
            pshbug
        </ownerContact>
		<DefectDef guid="5e1e2f04-e22b-4b80-9cbd-c3296f45a89d" id="56500" name="NoRethrowFromGlobalCatch">
			<description>
				<format>
					Avoid swallowing errors by catching non-specific exceptions.
				</format>
			</description>
			<doc>
				<p>
                    This message indicates that a try-catch block has an
                    overly broad catch clause that may mask fatal errors in
                    your program, making them more difficult to debug.
                </p>
				<p>
                    For more information, see Section 8.2.2: Exception Handling <a href="http://devdiv/spectool/documents/milestone-independent/designguidelines/designguidelines.doc">.NET
                    Framework Design Guidelines</a>.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    try {
                        MyMethod();
                    } catch {
                        ;
                    }  
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    // Catch only application-know exception types.

                    try {
                        MyMethod();
                    } catch (MyException e) {
                        // some code;
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="a3dd3fcc-816b-41ad-ae0e-f2f30dc8936b" id="56501" name="StackLostOnRethrow">
			<description>
				<format>
                    Prefer 'throw;' to 'throw e;' when re-throwing an exception to preserve the stack trace
                </format>
			</description>
			<doc>
				<p>
                    This warning indicates that a caught exception was
                    re-thrown by name (e.g.  <code>throw e;</code>) rather
                    than implicitly (i.e. throw;).
                </p>
				<p>
                    PREsharp prefers the latter form because it preserves
                    the stack trace. The former starts a new stack trace at
                    the point of the re-throw, which can significantly
                    impede debugging.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    class Pos%id% {
                        void 
                        Example(
                        )
                        {
                            try {
                                ;
                            } catch (SystemException e) {
                                throw e;
                            }
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    class Neg%id% {
                        void 
                        Example(
                        )
                        {
                            try {
                                ;
                            } catch (SystemException e) {
                                throw;
                            }
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="6d82524c-d0d5-46ef-8507-2896d8e9cf3f" id="56502" name="EmptyCatchBlock">
			<description>
				<format>
                    Catch statements should not have empty bodies
                </format>
			</description>
			<doc>
				<p>
                    This warning indicates that your code may be ignoring an
                    error condition by taking no action in a catch clause.
                </p>
				<p>
                    Not all instances of this warning are actual bugs, but
                    the code should be reviewed for intent.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    using System;
                    using System.IO;    

                    class Pos%id% {
                        private FileStream          file_;

                        public 
                        Pos%id%(
                            string                  path
                        )
                        {
                            try {
                                file_ = File.Open(path, FileMode.Open);
                            } catch (System.IO.FileNotFoundException) {
                                ;
                            }
                        }

                        byte[] 
                        NextBlock(
                        )
                        {
                            int                     nBytes = 100;
                            byte[]                  Buffer = new byte[nBytes];

                            file_.Read(Buffer,
                                       0, 
                                       nBytes); // failure here due to warning above

                            return Buffer;
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    using System;
                    using System.IO;    

                    class Pos%id% {
                        private FileStream          file_;
                        private bool                valid_;

                        public 
                        Pos%id%(
                            string                  path
                        )
                        {
                            try {
                                file_ = File.Open(path, FileMode.Open);
                                valid_ = true;
                            } catch (System.IO.FileNotFoundException) {
                                valid_ = false;
                            }
                        }

                        byte[] 
                        NextBlock(
                        )
                        {
                            int                     nBytes = 100;
                            byte[]                  Buffer = new byte[nBytes];

                            if (!valid_) {
                                file_.Read(Buffer,
                                           0, 
                                           nBytes); // failure here due to warning above
                            }

                            return Buffer;
                        }
                    }

                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
		<DefectDef guid="3b0260a8-2e44-437A-892c-5c1e40e62265" id="56503" name="ThrowFromPropertyGet">
			<description>
				<format>
                    Property get methods should not throw exceptions
                </format>
			</description>
			<doc>
				<p>
                    According to section 4.2.1 of the <a href="http://devdiv/spectool/documents/milestone-independent/designguidelines/designguidelines.doc">.NET
                    Framework Design</a> Guidelines, the recommendation is
                    to avoid throwing exceptions from property getters. 
                </p>
				<p>
                    Property getters should be simple operations and should
                    not have any preconditions. If a getter may throw an
                    exception, it should probably be redesigned to be a
                    method.
                </p>
				<p>
                    There are certain special circumstances in which property
                    getters may throw exceptions. In particular,
                    implementations of the following interface methods may
                    throw under some circumstances (refer to documentation
                    for specifics):

                    <ul>
						<li>
							<code>IEnumerator.Current</code>
						</li>
						<li>
							<code>IEnumerator&lt;T&gt;Current</code>
						</li>
						<li>
							<code>IDictionaryEnumerator.Entry</code>
						</li>
						<li>
							<code>IDictionaryEnumerator.Key</code>
						</li>
						<li>
							<code>IDictionaryEnumerator.Value</code>
						</li>
					</ul>
				</p>
				<p>
                    In addition, indexer getters may also throw exceptions.
                    And finally, if a class implements an interface, and the
                    interface declares a property getter which the class
                    does not implement, the class's implementation should
                    throw NotSupportedException.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[

                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                ]]></correctedSrc>
			</example>
			<helpURL>
                http://winweb/cse/tools/presharp/userguide/message_%id%.htm
            </helpURL>
		</DefectDef>
	</DefectDefGroup>
	<DefectDefGroup guid="7e1045b2-951f-4e25-9dff-5901d5531da1" id="56501" name="Param">
		<display>
            Parameter validation
        </display>
		<doc>
			<P>
                This module detects failure to validate certain parameters
                of public method.
            </P>
		</doc>
		<ownerURL>http://presharp</ownerURL>
		<ownerContact>pshbug</ownerContact>
		<DefectDef guid="20aff4c0-c106-4d4e-88cc-b2322c4907e5" id="56504" name="DelayedValidatePublicParameter">
			<description>
				<format>
                    Parameter %param% to this public method must be
                    validated
                </format>
				<param name="param" format="'%ls'"/>
			</description>
			<doc>
				<p>
                    This warning indicates that PREsharp has detected a
                    parameter passed to a public method of a public class is
                    being saved without having been validated first.
                </p>
				<p>    
                    PREsharp will flag this warning if the parameter has not
                    been checked or passed to a validation method before it
                    the indicated point.  Typically this warning will flag
                    that an unvalidated parameter has been stored.
                </p>
				<p>
                    Note in particular that storing possibly null values into
                    fields of &lt;this&gt;, can be dangerous if multiple
                    threads can access the same object simultaneously.  In
                    this case, it is possible for one thread to verify that
                    the field is non-null, a second thread (perhaps flagged
                    here) sets the field to null, invalidating the state
                    just checked in the first thread, leading to a
                    null-reference exception in that thread.
                </p>
				<p>
                    Consult the <a href="http://msdn.microsoft.com/library/en-us/cpgenref/html/cpconParameterUsageGuidelines.asp">Parameter
                    Usage Guidelines</a> page in MSDN's .NET Framework
                    General Reference section for further guidance.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    public class Pos%id% {
                        object                  StoredObject;

                        public void
                        Example(
                            object                  NewObject
                        )
                        {
                            StoredObject = NewObject;
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    using System;

                    public class Neg%id% {
                        object                  StoredObject;

                        public void
                        Example(
                            object                  NewObject
                        )
                        {
                            if (NewObject != null) {
                                StoredObject = NewObject;
                            } else {
                                throw new ArgumentNullException("Argument 'o' was null.");
                            }
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/presharp/userguide/message_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef guid="9f08f475-152e-45d1-a763-1ecf726f7462" id="56505" name="UnsafePublicMethod">
			<description>
				<format>
                    Exposing unsafe code through a public interface is not
                    CLS compliant
                </format>
			</description>
			<doc>
				<p>
                    This warning indicates that PREsharp has detected an
                    unsafe block in a public method.
                </p>
				<p>
                    Unsafe blocks are by definition not CLS compliant.
                </p>
			</doc>
			<example commandLine="/unsafe">
				<defectiveSrc><![CDATA[
                    public class Pos%id% {
                        public unsafe void
                        Example(
                        )
                        {
                            unsafe {
                                ;
                            }
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    class Neg%id% {
                        public unsafe void
                        Example(
                        )
                        {
                            unsafe {
                                ;
                            }
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/presharp/userguide/message_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef guid="8dc36040-2462-42a3-9442-db7ab0362abb" id="56506" name="ImmediateValidatePublicParameter">
			<description>
				<format>
                    Parameter %param% to this public method must be validated
                </format>
				<param name="param" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
                    A null-dereference can occur here
                </format>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that PREsharp has detected a
                    parameter passed to a public method of a public class is
                    being dereferenced without having been validated first.
                </p>
				<p>    
                    PREsharp will flag this warning if the parameter has not
                    been checked or passed to a validation method before
                    it the indicated point.
                </p>
				<p>
                    The MSDN page describing <a href="http://msdn.microsoft.com/library/en-us/cpgenref/html/cpconParameterUsageGuidelines.asp">Parameter Usage Guidelines</a>
                    may be consulted for further guidance.
                </p>
			</doc>
			<example commandLine="/unsafe">
				<defectiveSrc><![CDATA[
                    using System;

                    public class Pos%id% {
                        public void
                        Example(
                            object                  a
                        )
                        {
                            Console.WriteLine(a.GetType());
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    using System;

                    public class Neg%id% {
                        public void
                        Example(
                            object                  a
                        )
                        {
                            if (a != null) {
                                Console.WriteLine(a.GetType());
                            }
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/presharp/userguide/message_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef guid="6403c840-3ca0-40dd-a159-2c9f7323e396" id="56507" name="UseIsNullOrEmpty">
			<description>
				<format>
                    Prefer 'string.IsNullOrEmpty(%string%)' over checks for
                    null and/or emptiness
                </format>
				<param name="string" format="%ls"/>
			</description>
			<doc>
				<p>
                    This warning indicates that PREsharp has detected a test
                    of a string against <code>null</code> or
                    <code>string.Empty</code>.
                </p>
				<p>    
                    When checking a string for null or empty it is likely
                    that both checks should be performed.  These checks can
                    be performed in a single check by calling
                    <code>string.IsNullOrEmpty()</code>, and passing the
                    string to check.
                </p>
			</doc>
			<example commandLine="/unsafe">
				<defectiveSrc><![CDATA[
                    public class Pos%id% {
                        public void
                        Example(
                            string                  x
                        )
                        {
                            if ((x == null) || (x == string.Empty)) {
                                ;
                            }
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    public class Neg%id% {
                        public void
                        Example(
                            string                  x
                        )
                        {
                            if (string.IsNullOrEmpty(x)) {
                                ;
                            }
                        }
                    }                        
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/presharp/userguide/message_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef guid="0171a093-0c9a-4771-baeb-5e0757372803" id="56508" name="OnlySuppressFinalizeThis">
			<description>
				<format>
                    Should only 'GC.SuppressFinalize(this)'
                </format>
			</description>
			<additionalInfo>
				<format>
                    %object% may leak
                </format>
				<param name="object" format="'%ls'"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that PREsharp has detected a call
                    to <code>GC.SuppressFinalize</code> is being passed an
                    object other than <code>this</code>.
                </p>
				<p>    
                    Calling <code>GC.SuppressFinalize</code> called on an
                    object other than <code>this</code> will probably cause
                    that object to leak.  (There will be no reference to the
                    object when the garbage-collector runs and
                    garbage-collection will be skipped due to this call).
                </p>
				<p>
                    For more information on this issue consult <u>Inside
                    C#, second ed.</u> pg. 673.
                </p>
			</doc>
			<example commandLine="/unsafe">
				<defectiveSrc><![CDATA[
                    using System;

                    public class TestResource : IDisposable
                    {
                        public void
                        Dispose(
                        )
                        {
                            ;
                        }
                    }

                    public class Pos%id%
                    {
                        public void
                        Example(
                        )
                        { 
                            TestResource test = new TestResource();

                            GC.SuppressFinalize(test);
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    using System;

                    public class Neg%id% : IDisposable {
                        public void
                        Dispose(
                        )
                        {
                            ;
                        }

                        public void
                        Example(
                        )
                        {
                            GC.SuppressFinalize(this);
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/presharp/userguide/message_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef guid="cd69c1ec-9cf9-41d6-84f5-4fd2ef76df7a" id="56509" name="EqualsMustNotThrow">
			<description>
				<format>
                    Implementations of Equals() must not throw exceptions
                </format>
			</description>
			<doc>
				<p>
                    This warning indicates that PREsharp has detected an
                    implementation of <code>Equals()</code> which throws.
                </p>
				<p>
                    According to MSDN, <code>Object.Equals()</code> must not
                    throw.
                </p>
				<p>
                    The MSDN page describing <a href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemObjectClassEqualsTopic1.asp">Object.Equals
                    Method (Object)</a> may be consulted for further
                    guidance.
                </p>
			</doc>
			<example commandLine="/unsafe">
				<defectiveSrc><![CDATA[
                    using System;

                    class Pos%id% {
                        public virtual bool
                        Equals(
                            Pos%id%                 obj
                        )
                        {
                            if (obj == null) {
                                throw(new ArgumentNullException());
                            }

                            return true;
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    using System;

                    class Neg%id% {
                        public virtual bool
                        Equals(
                            Neg%id%                 obj
                        )
                        {
                            return false;
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/presharp/userguide/message_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef guid="34eb57d2-6bbf-4615-98fb-f348440326ab" id="56510" name="CatchPublicFloats">
			<description>
				<format>
                    A signaling floating point value (SNaN) passed to a public
                    interface may cause an exception
                </format>
			</description>
			<recommendedFix>
				<format>
                    Wrap access to %symbol% in a try-catch block
                </format>
				<param name="symbol" format="'%ls'"/>
			</recommendedFix>
			<doc>
				<p>
                    This warning indicates that PREsharp has detected a
                    floating point parameter to a public function which is
                    used outside of a try-block.
                </p>
				<p>    
                    Public parameters should expect invalid data.  In the
                    case of floating point values, a signaling-not-a-number
                    (SNaN) value will cause an exception on use of the
                    value.
                </p>
				<p>
                    The uses of floating point parameters to public
                    functions should be wrapped in try-catch blocks to catch
                    these exceptions.
                </p>
			</doc>
			<example commandLine="/unsafe">
				<defectiveSrc><![CDATA[
                    public class Pos%id%
                    {
                        public void
                        Example(
                            float  Param
                        )
                        {
                            if (Param == 0.0) {;}
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    public class Neg%id%
                    {
                        public void
                        Example(
                            float  Param
                        )
                        {
                            try {
                                if (Param == 0.0) {;}
                            } catch {
                                ;
                            }
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/presharp/userguide/message_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef guid="c291fb0b-d3fe-48f5-af4e-55aba8d014ba" id="56522" name="SuppressFinalizeInDispose">
			<description>
				<format>
                    Implementations of Dispose should call
                    System.GC.SuppressFinalize
                </format>
			</description>
			<consequence>
				<format>
                    This object will be garbage-collected twice
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates that PREsharp has detected an 
                    implementation of Dispose() which does not call
                    <code>System.GC.SuppressFinalize</code>.
                </p>
				<p>
                    If a call to <code>System.GC.SuppressFinalize</code> is
                    not made by DIspose, it will be "collected" twice by the
                    garbage-collection process.
                </p>
			</doc>
			<example commandLine="/unsafe">
				<defectiveSrc><![CDATA[
                    public class Pos%id%
                    {
                        public Pos%id%(int n)
                        {
                            this.n = n;
                        }

                        ~Pos%id%()
                        {
                            Dispose();
                        }

                        public void Dispose()
                        {
                            ;
                        }

                        private int n;
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    public class Neg%id%
                    {
                        public Neg%id%(int n)
                        {
                            this.n = n;
                        }

                        ~Neg%id%()
                        {
                            Dispose();
                        }

                        public void Dispose()
                        {
                            System.GC.SuppressFinalize(this);
                        }

                        private int n;
                    };
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/presharp/userguide/message_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef guid="df001351-e890-4bd9-9a2d-5e5cd65cdd43" id="56523" name="GetLastErrorImmediately">
			<description>
				<format>
                    Call 'Marshal.GetLastWin32Error' or
                    'Marshal.GetHRForLastWin32Error' before any other
                    interop call
                </format>
			</description>
			<consequence>
				<format>
                    Value of LastError may be lost otherwise
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates that PREsharp has detected an
                    interop call with <code>SetLastError</code> attribute of
                    <code>true</code> which was not immediately followed by
                    a call to <code>Marshal.GetLastWin32Error</code> or
                    <code>Marshal.GetHRForLastWin32Error</code>.
                </p>
				<p>
					<code>GetLastError</code> obtains its result from a
                    thread local variable that is set on many Win32 calls,
                    thus it is very volatile.  The best practice is to call it
                    directly after the relevant Win32 call.  If you call
                    other functions between the Win32 call and the call to
                    <code>GetLastError</code> there is the possibility that
                    those other functions make system calls that would modify
                    the result of <code>GetLastError</code> result, leading
                    to subtle bugs.
                </p>
				<p>
                    Similarly, CLR itself may make calls that change the
                    value of LastError between your interop call and your
                    call to <code>GetLastError</code>.  Using
                    <code>SetLastError=true</code> in the P/Invoke signature
                    and calling <code>Marshal.GetLastWin32Error</code> (or
                    <code>Marshal.GetHRForLastWin32Error</code>), as
                    shown in the corrected example, rather than calling
                    <code>GetLastError</code> using the P/Invoke mechanism,
                    avoids this problem but still requires our call to
                    occur before any other interop call which may alter the
                    stored value.
                </p>
				<p>
                    For more information on this topic, see <a href="http://blogs.msdn.com/adam_nathan/archive/2003/04/25/56643.aspx">this
                    page</a>.
                </p>
				<p>
                    Also see MSDN documentation for <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemruntimeinteropservicesmarshalclassgethrforlastwin32errortopic.asp"><code>GetHRForLastWin32Error</code></a>
                    and
                    <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemruntimeinteropservicesmarshalclassgetlastwin32errortopic.asp"><code>GetLastWin32Error</code></a>.
                </p>
			</doc>
			<example commandLine="/r:system.dll">
				<defectiveSrc><![CDATA[
                    using System;
                    using System.Runtime.InteropServices;

                    public class Pos%id%
                    {
                        [DllImport("Kernel32")]
                        private extern static Boolean CloseHandle(IntPtr handle);

                        void
                        Example(
                            IntPtr                  Handle
                        )
                        {
                            CloseHandle(Handle);
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    // to build, use: csc /r:system.dll example.cs

                    using System;
                    using System.ComponentModel;
                    using System.Runtime.InteropServices;

                    public class Neg%id%
                    {
                        [DllImport("Kernel32", SetLastError=true)]
                        private extern static Boolean CloseHandle(IntPtr handle);

                        void
                        Example(
                            IntPtr                  Handle
                        )
                        {
                            if (!CloseHandle(Handle)) {
                                throw new Win32Exception(Marshal.GetLastWin32Error());
                            }
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/presharp/userguide/message_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef guid="c803929a-9129-43f1-9eeb-cd2ee467cb74" id="56526" name="ValidatePublicParameterSetter">
			<description>
				<format>
                    Parameter %param% to this public propety set method must
                    be validated
                </format>
				<param name="param" format="'%ls'"/>
			</description>
			<doc>
				<p>
                    This warning indicates that PREsharp has detected a
                    parameter passed to a public property set method of a
                    public class is being saved without having been
                    validated first.
                </p>
				<p>    
                    PREsharp will flag this warning if the parameter has not
                    been checked or passed to a validation method before
                    it the indicated point.
                </p>
				<p>
                    The MSDN page describing <a href="http://msdn.microsoft.com/library/en-us/cpgenref/html/cpconParameterUsageGuidelines.asp">Parameter Usage Guidelines</a>
                    may be consulted for further guidance.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    public class Pos%id% {
                        public string Example
                        {
                            set
                            {
                                Example = value;
                            }
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    using System;

                    public class Neg%id% {
                        public string Example
                        {
                            set
                            {
                                if (value != null) {
                                    Example = value;
                                } else {
                                    throw new ArgumentNullException("Argument 'value' was null.");
                                }
                            }
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/presharp/userguide/message_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef guid="84f9deff-497a-454d-a0c7-4fcf2ce12ca8" id="56530" name="DontPInvokeGetLastError">
			<description>
				<format>
                    Don't P/Invoke 'GetLastError'
                </format>
				<param name="param" format="'%ls'"/>
			</description>
			<additionalInfo>
				<format>
                    LastError may be reset by the framework before your call
                    to 'GetLastError'
                </format>
			</additionalInfo>
			<recommendedFix>
				<format>
                    Call 'Marshal.GetLastWin32Error' instead
                </format>
			</recommendedFix>
			<doc>
				<p>
                    This warning indicates that PREsharp has detected a
                    P/Invoke call to <code>GetLastError</code>.
                </p>
				<p>    
                    Because the framework may make calls between the
                    P/Invoke call for which you are attempting to retrieve
                    LastError and your call to <code>GetLastError</code>,
                    the value set by the function you wanted to know about
                    may be overwritten.
                </p>
				<p>
                    To ensure that you get the correct value of LastError,
                    call <code>Marshal.GetLastWin32Error</code> before your
                    next P/Invoke call.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    // to build, use: csc /r:system.dll example.cs

                    using System;
                    using System.ComponentModel;
                    using System.Runtime.InteropServices;

                    public class Pos%id%
                    {
                        [DllImport("Kernel32", SetLastError=true)]
                        private extern static Boolean CloseHandle(IntPtr handle);

                        [DllImport("Kernel32")]
                        private extern static int GetLastError();

                        void
                        Example(
                            IntPtr                  Handle
                        )
                        {
                            if (!CloseHandle(Handle)) {
                                throw new Win32Exception(GetLastError());
                            }
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc commandLine="/r:system.dll"><![CDATA[
                    // to build, use: csc /r:system.dll example.cs

                    using System;
                    using System.ComponentModel;
                    using System.Runtime.InteropServices;

                    public class Neg%id%
                    {
                        [DllImport("Kernel32", SetLastError=true)]
                        private extern static Boolean CloseHandle(IntPtr handle);

                        void
                        Example(
                            IntPtr                  Handle
                        )
                        {
                            if (!CloseHandle(Handle)) {
                                throw new Win32Exception(Marshal.GetLastWin32Error());
                            }
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/presharp/userguide/message_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef guid="84f9deff-497a-454d-a0c7-4fcf2ce12ca8" id="56531" name="UseIsNotGetType">
			<description>
				<format>
                    Use 'is' to determine object type
                </format>
			</description>
			<additionalInfo>
				<format>
                    '%object%.GetType' does not properly handle derived classes
                </format>
				<param name="object" format="%ls"/>
			</additionalInfo>
			<doc>
				<p>
                    This warning indicates that PREsharp has detected that
                    the result of a call to an object's <code>GetType</code>
                    function is compared to some <code>typeof</code>
                    expression.
                </p>
				<p>
					<code>GetType</code> does not handle drived classes
                    properly.  The <code>is</code> operator is the preferred
                    way to perform such a check.  In addition to properly
                    handling derived classes, it is also faster.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                    class pos%id% {
                        void
                        Example(
                            object                  x
                        )
                        {
                            if (x.GetType() == typeof (string)) {
                                ;
                            }
                        }
                    }
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                    class neg%id% {
                        void
                        Example(
                            object                  x
                        )
                        {
                            if (x is string)  {
                                ;
                            }
                        }
                    }
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/presharp/userguide/message_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef guid="22a98683-2bcc-4fd8-8f0c-eb8263e7bb00" id="56532" name="BadGetEnumeratorImpl">
			<description>
				<format>
                    Incorrect GetEnumerator implementation
                </format>
			</description>
			<consequence>
				<format>
                    This changes object state and preventing multiple
                    independent enumerators
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates that PREsharp has detected an
                    implemenation of IEnumerator.GetEnumerator which simply
                    returns &gt;this&lt;.
                </p>
				<p>
                    Doing so causes enumerating the object to change its
                    state and prevents multiple independent enumerators.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/presharp/userguide/message_%id%.htm</helpURL>
		</DefectDef>
		<DefectDef guid="b2fa3aa5-5535-47ad-a87f-3c11882c11ff" id="56533" name="MissingSerializableConstructor">
			<description>
				<format>
                    Missing constructor
                </format>
			</description>
			<additionalInfo>
				<format>
                    Inheriting from ISerializable requires this class to
                    implement a constructor of the form 'void
                    ctor(SerializationInfo, StreamingContext)'.  Inheritance
                    path is %inheritance%
                </format>
				<param name="inheritance" format="'%ls'"/>
			</additionalInfo>
			<consequence>
				<format>
                    Failing to implement this constructor will result in a
                    SerializationException at run time
                </format>
			</consequence>
			<doc>
				<p>
                    This warning indicates that PREsharp has detected an
                    class which inherits from <code>ISerializable</code>,
                    but does not implement a constructor of the proper form.
                </p>
				<p>
                    MSDN states:
                    <blockquote>
                        The <code>ISerializable</code> interface implies a
                        constructor with the signature
                        <code>Constructor(SerializationInfo info,
                        StreamingContext context)</code>. At deserialization
                        time, the current constructor is called only after
                        the data in the <code>SerializationInfo</code> has
                        been deserialized by the formatter. In general this
                        constructor should be <code>protected</code> if the
                        class is not <code>sealed</code> (NotInheritable in
                        Visual Basic). 
                    </blockquote>
				</p>
				<p>
                    Failure to implement this constructor is not flagged by
                    the compiler and results in a
                    <code>SerializationException</code> at runtime.
                </p>
				<p>
                    For more details consult <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemruntimeserializationiserializableclasstopic.asp">
                    this page</a> in MSDN.
                </p>
			</doc>
			<example>
				<defectiveSrc><![CDATA[
                ]]></defectiveSrc>
				<correctedSrc><![CDATA[
                ]]></correctedSrc>
			</example>
			<helpURL>http://winweb/cse/tools/presharp/userguide/message_%id%..htm</helpURL>
		</DefectDef>
	</DefectDefGroup>
</DefectDefs>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sandcastle\v2.4\x86\Examples\conceptual\aspnet_howto.buildmanifest.proj.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<manifest fileAssetGuid="776527bc-b900-4355-ad24-f6e1ca90ea1c" assetTypeId="BldManifestProj">
  <manifestExecution manifestExecutionGuid="776527bc-b900-4355-ad24-f6e1ca90ea1c" buildLocType="Build" lcid="1033" includeOptions="113" buildSourceRootPath="d:\hanadepot\ddds\main" buildSourceMainPath="d:\hanadepot\ddds\main\1033" dataAsOfDateUtc="12/22/2006 7:18:03 PM" buildLocHandoffBy="REDMOND\a-joelod" buildLocHandoffHost="DOCBUILD9" sourceControlOptions="Default" publishTargetName="" resultsCode="DataGathered">
    <requestedProjects>
      <project projectGuid="dbdc99f5-3704-44ec-83d3-6aabf12c42a5" projectName="aspnet_howto" />
    </requestedProjects>
    <requestedLcids />
    <assetTypes>
      <assetType assetTypeId="MNamespace" />
      <assetType assetTypeId="MType" />
      <assetType assetTypeId="Topic" />
      <assetType assetTypeId="CompanionFile" />
      <assetType assetTypeId="ProjSupportFile" />
      <assetType assetTypeId="ContentMetadata" />
      <assetType assetTypeId="MRefMetadata" />
      <assetType assetTypeId="Toc" />
      <assetType assetTypeId="ProjSettings" />
      <assetType assetTypeId="ProjSettingsLoc" />
      <assetType assetTypeId="BldManifestProj" />
      <assetType assetTypeId="TocTechReview" />
      <assetType assetTypeId="BldManifestArt" />
      <assetType assetTypeId="BldManifestGroup" />
    </assetTypes>
    <buildSourceCategories>
      <buildSourceCategory categoryCode="BM" categoryName="Manifest" />
      <buildSourceCategory categoryCode="PE" categoryName="Project Extracted Files" />
      <buildSourceCategory categoryCode="PS" categoryName="Project Support Files" />
      <buildSourceCategory categoryCode="Con" categoryName="Content" />
    </buildSourceCategories>
    <assetParents>
      <assetParent assetParentGuid="dbdc99f5-3704-44ec-83d3-6aabf12c42a5" assetParentName="aspnet_howto" assetParentLevel="Project" />
    </assetParents>
    <assetDetail>
      <fileAsset fileAssetGuid="2aca5da4-6f94-43a0-9817-5f413d16f540" assetType="Topic" assetParentGuid="dbdc99f5-3704-44ec-83d3-6aabf12c42a5" assetParentName="aspnet_howto" projectGuid="dbdc99f5-3704-44ec-83d3-6aabf12c42a5" projectName="aspnet_howto" revisionNumber="9" fileAssetRepositoryGuid="1ba7861d-4a7e-45ea-9f5a-baa8e5656d26" fileRelativeDirectory="Content\aspnet_howto\Content" fileName="2aca5da4-6f94-43a0-9817-5f413d16f540.xml" assetTitle="How to: Authenticate Using Multiple Membership Providers" topicSchemaId="DevHowTo" topicSchemaName="HowTo" ueTeamName="DevDiv UE" crc32="-280680791" contentModifiedDateUtc="9/7/2006 1:16:02 AM" recycledStatusName="New" localizable="True" supportFileComment="">
        <languageDetail>
          <assetLanguageUnit lcid="1028" rootRelativePath="1028\Content\aspnet_howto\Content\2aca5da4-6f94-43a0-9817-5f413d16f540.xml" />
          <assetLanguageUnit lcid="1031" rootRelativePath="1031\Content\aspnet_howto\Content\2aca5da4-6f94-43a0-9817-5f413d16f540.xml" />
          <assetLanguageUnit lcid="1033" rootRelativePath="1033\Content\aspnet_howto\Content\2aca5da4-6f94-43a0-9817-5f413d16f540.xml" />
          <assetLanguageUnit lcid="1036" rootRelativePath="1036\Content\aspnet_howto\Content\2aca5da4-6f94-43a0-9817-5f413d16f540.xml" />
          <assetLanguageUnit lcid="1040" rootRelativePath="1040\Content\aspnet_howto\Content\2aca5da4-6f94-43a0-9817-5f413d16f540.xml" />
          <assetLanguageUnit lcid="1041" rootRelativePath="1041\Content\aspnet_howto\Content\2aca5da4-6f94-43a0-9817-5f413d16f540.xml" />
          <assetLanguageUnit lcid="1042" rootRelativePath="1042\Content\aspnet_howto\Content\2aca5da4-6f94-43a0-9817-5f413d16f540.xml" />
          <assetLanguageUnit lcid="2052" rootRelativePath="2052\Content\aspnet_howto\Content\2aca5da4-6f94-43a0-9817-5f413d16f540.xml" />
          <assetLanguageUnit lcid="3082" rootRelativePath="3082\Content\aspnet_howto\Content\2aca5da4-6f94-43a0-9817-5f413d16f540.xml" />
        </languageDetail>
      </fileAsset>
      <fileAsset fileAssetGuid="abcbfd68-5773-47ed-afd9-70713917795f" assetType="Topic" assetParentGuid="dbdc99f5-3704-44ec-83d3-6aabf12c42a5" assetParentName="aspnet_howto" projectGuid="dbdc99f5-3704-44ec-83d3-6aabf12c42a5" projectName="aspnet_howto" revisionNumber="8" fileAssetRepositoryGuid="00e5d6c1-be05-4852-b3fb-60353d4be995" fileRelativeDirectory="Content\aspnet_howto\Content" fileName="abcbfd68-5773-47ed-afd9-70713917795f.xml" assetTitle="How to: Customize User Login When Using Login Service" topicSchemaId="DevHowTo" topicSchemaName="HowTo" ueTeamName="DevDiv UE" crc32="999622387" contentModifiedDateUtc="9/12/2006 6:56:28 PM" recycledStatusName="New" localizable="True" supportFileComment="">
        <languageDetail>
          <assetLanguageUnit lcid="1028" rootRelativePath="1028\Content\aspnet_howto\Content\abcbfd68-5773-47ed-afd9-70713917795f.xml" />
          <assetLanguageUnit lcid="1031" rootRelativePath="1031\Content\aspnet_howto\Content\abcbfd68-5773-47ed-afd9-70713917795f.xml" />
          <assetLanguageUnit lcid="1033" rootRelativePath="1033\Content\aspnet_howto\Content\abcbfd68-5773-47ed-afd9-70713917795f.xml" />
          <assetLanguageUnit lcid="1036" rootRelativePath="1036\Content\aspnet_howto\Content\abcbfd68-5773-47ed-afd9-70713917795f.xml" />
          <assetLanguageUnit lcid="1040" rootRelativePath="1040\Content\aspnet_howto\Content\abcbfd68-5773-47ed-afd9-70713917795f.xml" />
          <assetLanguageUnit lcid="1041" rootRelativePath="1041\Content\aspnet_howto\Content\abcbfd68-5773-47ed-afd9-70713917795f.xml" />
          <assetLanguageUnit lcid="1042" rootRelativePath="1042\Content\aspnet_howto\Content\abcbfd68-5773-47ed-afd9-70713917795f.xml" />
          <assetLanguageUnit lcid="2052" rootRelativePath="2052\Content\aspnet_howto\Content\abcbfd68-5773-47ed-afd9-70713917795f.xml" />
          <assetLanguageUnit lcid="3082" rootRelativePath="3082\Content\aspnet_howto\Content\abcbfd68-5773-47ed-afd9-70713917795f.xml" />
        </languageDetail>
      </fileAsset>
      <fileAsset fileAssetGuid="f7913259-762e-4a73-a771-ac9e42903f44" assetType="Topic" assetParentGuid="dbdc99f5-3704-44ec-83d3-6aabf12c42a5" assetParentName="aspnet_howto" projectGuid="dbdc99f5-3704-44ec-83d3-6aabf12c42a5" projectName="aspnet_howto" revisionNumber="7" fileAssetRepositoryGuid="5f390293-031e-4f60-a8a1-25919d23ae63" fileRelativeDirectory="Content\aspnet_howto\Content" fileName="f7913259-762e-4a73-a771-ac9e42903f44.xml" assetTitle="How to: Configure the Login Service with Windows Communication Framework" topicSchemaId="DevHowTo" topicSchemaName="HowTo" ueTeamName="DevDiv UE" crc32="-1150329007" contentModifiedDateUtc="9/12/2006 9:22:03 PM" recycledStatusName="New" localizable="False" supportFileComment="">
        <languageDetail>
          <assetLanguageUnit lcid="1033" rootRelativePath="1033\Content\aspnet_howto\Content\f7913259-762e-4a73-a771-ac9e42903f44.xml" />
        </languageDetail>
      </fileAsset>
      <fileAsset fileAssetGuid="7a0d4156-3e9e-447e-a00f-cbb68b5fe264" assetType="Topic" assetParentGuid="dbdc99f5-3704-44ec-83d3-6aabf12c42a5" assetParentName="aspnet_howto" projectGuid="dbdc99f5-3704-44ec-83d3-6aabf12c42a5" projectName="aspnet_howto" revisionNumber="5" fileAssetRepositoryGuid="ae1d2b35-d9db-472e-84b2-b44d5b043cff" fileRelativeDirectory="Content\aspnet_howto\Content" fileName="7a0d4156-3e9e-447e-a00f-cbb68b5fe264.xml" assetTitle="How to: Customize the ASP.NET Login Service Authentication Cookie" topicSchemaId="DevHowTo" topicSchemaName="HowTo" ueTeamName="DevDiv UE" crc32="899867619" contentModifiedDateUtc="9/19/2006 11:03:05 PM" recycledStatusName="New" localizable="True" supportFileComment="">
        <languageDetail>
          <assetLanguageUnit lcid="1028" rootRelativePath="1028\Content\aspnet_howto\Content\7a0d4156-3e9e-447e-a00f-cbb68b5fe264.xml" />
          <assetLanguageUnit lcid="1031" rootRelativePath="1031\Content\aspnet_howto\Content\7a0d4156-3e9e-447e-a00f-cbb68b5fe264.xml" />
          <assetLanguageUnit lcid="1033" rootRelativePath="1033\Content\aspnet_howto\Content\7a0d4156-3e9e-447e-a00f-cbb68b5fe264.xml" />
          <assetLanguageUnit lcid="1036" rootRelativePath="1036\Content\aspnet_howto\Content\7a0d4156-3e9e-447e-a00f-cbb68b5fe264.xml" />
          <assetLanguageUnit lcid="1040" rootRelativePath="1040\Content\aspnet_howto\Content\7a0d4156-3e9e-447e-a00f-cbb68b5fe264.xml" />
          <assetLanguageUnit lcid="1041" rootRelativePath="1041\Content\aspnet_howto\Content\7a0d4156-3e9e-447e-a00f-cbb68b5fe264.xml" />
          <assetLanguageUnit lcid="1042" rootRelativePath="1042\Content\aspnet_howto\Content\7a0d4156-3e9e-447e-a00f-cbb68b5fe264.xml" />
          <assetLanguageUnit lcid="2052" rootRelativePath="2052\Content\aspnet_howto\Content\7a0d4156-3e9e-447e-a00f-cbb68b5fe264.xml" />
          <assetLanguageUnit lcid="3082" rootRelativePath="3082\Content\aspnet_howto\Content\7a0d4156-3e9e-447e-a00f-cbb68b5fe264.xml" />
        </languageDetail>
      </fileAsset>
      <fileAsset fileAssetGuid="d021aa39-4cbf-4450-a3c1-d5573ca7ce8c" assetType="Topic" assetParentGuid="dbdc99f5-3704-44ec-83d3-6aabf12c42a5" assetParentName="aspnet_howto" projectGuid="dbdc99f5-3704-44ec-83d3-6aabf12c42a5" projectName="aspnet_howto" revisionNumber="6" fileAssetRepositoryGuid="118fa83b-2148-4234-a899-56492ced8efb" fileRelativeDirectory="Content\aspnet_howto\Content" fileName="d021aa39-4cbf-4450-a3c1-d5573ca7ce8c.xml" assetTitle="How to: Configure the ASP.NET Roles Service with Windows Communication Framework" topicSchemaId="DevHowTo" topicSchemaName="HowTo" ueTeamName="DevDiv UE" crc32="2135902136" contentModifiedDateUtc="9/19/2006 11:35:10 PM" recycledStatusName="New" localizable="False" supportFileComment="">
        <languageDetail>
          <assetLanguageUnit lcid="1033" rootRelativePath="1033\Content\aspnet_howto\Content\d021aa39-4cbf-4450-a3c1-d5573ca7ce8c.xml" />
