ystem.ArgumentException">The caller attempts to set an invalid file attribute. </exception>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.FileSystemInfo.CreationTime">
      <summary>Gets or sets the creation time of the current file or directory.</summary>
      <returns>The creation date and time of the current <see cref="T:System.IO.FileSystemInfo" /> object.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.FileSystemInfo.CreationTimeUtc">
      <summary>Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.</summary>
      <returns>The creation date and time in UTC format of the current <see cref="T:System.IO.FileSystemInfo" /> object.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.FileSystemInfo.Delete">
      <summary>Deletes a file or directory.</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.FileSystemInfo.Exists">
      <summary>Gets a value indicating whether the file or directory exists.</summary>
      <returns>true if the file or directory exists; otherwise, false.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.FileSystemInfo.Extension">
      <summary>Gets the string representing the extension part of the file.</summary>
      <returns>A string containing the <see cref="T:System.IO.FileSystemInfo" /> extension.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.FileSystemInfo.FullName">
      <summary>Gets the full path of the directory or file.</summary>
      <returns>A string containing the full path.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="F:System.IO.FileSystemInfo.FullPath">
      <summary>Represents the fully qualified path of the directory or file.</summary>
    </member>
    <member name="M:System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the file name and additional exception information.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.FileSystemInfo.LastAccessTime">
      <summary>Gets or sets the time the current file or directory was last accessed.</summary>
      <returns>The time that the current file or directory was last accessed.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.FileSystemInfo.LastAccessTimeUtc">
      <summary>Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.</summary>
      <returns>The UTC time that the current file or directory was last accessed.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.FileSystemInfo.LastWriteTime">
      <summary>Gets or sets the time when the current file or directory was last written to.</summary>
      <returns>The time the current file was last written.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.FileSystemInfo.LastWriteTimeUtc">
      <summary>Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.</summary>
      <returns>The UTC time when the current file was last written to.</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.FileSystemInfo.Name">
      <summary>For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the Name property gets the name of the directory.</summary>
      <returns>A string that is the name of the parent directory, the name of the last directory in the hierarchy, or the name of a file, including the file name extension.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IO.FileSystemInfo.OriginalPath">
      <summary>The path originally specified by the user, whether relative or absolute.</summary>
    </member>
    <member name="M:System.IO.FileSystemInfo.Refresh">
      <summary>Refreshes the state of the object.</summary>
      <exception cref="T:System.IO.IOException">A device such as a disk drive is not ready. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IO.IOException">
      <summary>The exception that is thrown when an I/O error occurs.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.IOException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with its message string set to the empty string (""), its HRESULT set to COR_E_IO, and its inner exception set to a null reference.</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with the specified serialization and context information.</summary>
      <param name="info">The data for serializing or deserializing the object. </param>
      <param name="context">The source and destination for the object. </param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with its message string set to <paramref name="message" />, its HRESULT set to COR_E_IO, and its inner exception set to null.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with its message string set to <paramref name="message" /> and its HRESULT user-defined.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="hresult">An integer identifying the error that has occurred. </param>
    </member>
    <member name="T:System.IO.MemoryStream">
      <summary>Creates a stream whose backing store is memory.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.MemoryStream" /> class with an expandable capacity initialized to zero.</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[])">
      <summary>Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream" /> class based on the specified byte array.</summary>
      <param name="buffer">The array of unsigned bytes from which to create the current stream. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
      <summary>Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream" /> class based on the specified byte array with the <see cref="P:System.IO.MemoryStream.CanWrite" /> property set as specified.</summary>
      <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
      <param name="writable">The setting of the <see cref="P:System.IO.MemoryStream.CanWrite" /> property, which determines whether the stream supports writing. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream" /> class based on the specified region (index) of a byte array.</summary>
      <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
      <param name="index">The index into <paramref name="buffer" /> at which the stream begins. </param>
      <param name="count">The length of the stream in bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="index" /> and <paramref name="count" /> is greater than the length of <paramref name="buffer" />. </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream" /> class based on the specified region of a byte array, with the <see cref="P:System.IO.MemoryStream.CanWrite" /> property set as specified.</summary>
      <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
      <param name="index">The index in <paramref name="buffer" /> at which the stream begins. </param>
      <param name="count">The length of the stream in bytes. </param>
      <param name="writable">The setting of the <see cref="P:System.IO.MemoryStream.CanWrite" /> property, which determines whether the stream supports writing. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> are negative. </exception>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="index" /> and <paramref name="count" /> is greater than the length of <paramref name="buffer" />. </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.MemoryStream" /> class based on the specified region of a byte array, with the <see cref="P:System.IO.MemoryStream.CanWrite" /> property set as specified, and the ability to call <see cref="M:System.IO.MemoryStream.GetBuffer" /> set as specified.</summary>
      <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
      <param name="index">The index into <paramref name="buffer" /> at which the stream begins. </param>
      <param name="count">The length of the stream in bytes. </param>
      <param name="writable">The setting of the <see cref="P:System.IO.MemoryStream.CanWrite" /> property, which determines whether the stream supports writing. </param>
      <param name="publiclyVisible">true to enable <see cref="M:System.IO.MemoryStream.GetBuffer" />, which returns the unsigned byte array from which the stream was created; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.MemoryStream" /> class with an expandable capacity initialized as specified.</summary>
      <param name="capacity">The initial size of the internal array in bytes. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is negative. </exception>
    </member>
    <member name="P:System.IO.MemoryStream.CanRead">
      <summary>Gets a value indicating whether the current stream supports reading.</summary>
      <returns>true if the stream is open.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.MemoryStream.CanSeek">
      <summary>Gets a value indicating whether the current stream supports seeking.</summary>
      <returns>true if the stream is open.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.MemoryStream.CanWrite">
      <summary>Gets a value indicating whether the current stream supports writing.</summary>
      <returns>true if the stream supports writing; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.MemoryStream.Capacity">
      <summary>Gets or sets the number of bytes allocated for this stream.</summary>
      <returns>The length of the usable portion of the buffer for the stream.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">A capacity is set that is negative or less than the current length of the stream. </exception>
      <exception cref="T:System.ObjectDisposedException">The current stream is closed. </exception>
      <exception cref="T:System.NotSupportedException">set is invoked on a stream whose capacity cannot be modified. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.MemoryStream" /> class and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.MemoryStream.Flush">
      <summary>Overrides <see cref="M:System.IO.Stream.Flush" /> so that no action is performed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.GetBuffer">
      <summary>Returns the array of unsigned bytes from which this stream was created.</summary>
      <returns>The byte array from which this stream was created, or the underlying array if a byte array was not provided to the <see cref="T:System.IO.MemoryStream" /> constructor during construction of the current instance.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The MemoryStream instance was not created with a publicly visible buffer. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.MemoryStream.Length">
      <summary>Gets the length of the stream in bytes.</summary>
      <returns>The length of the stream in bytes.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.ObjectInvariant">
      <summary>Provides support for a <see cref="T:System.Diagnostics.Contracts.Contract" />.</summary>
    </member>
    <member name="P:System.IO.MemoryStream.Position">
      <summary>Gets or sets the current position within the stream.</summary>
      <returns>The current position within the stream.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The position is set to a negative value or a value greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a block of bytes from the current stream and writes the data to <paramref name="buffer" />.</summary>
      <returns>The total number of bytes written into the buffer. This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read.</returns>
      <param name="buffer">When this method returns, contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the characters read from the current stream. </param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin reading. </param>
      <param name="count">The maximum number of bytes to read. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> subtracted from the buffer length is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ObjectDisposedException">The current stream instance is closed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.ReadByte">
      <summary>Reads a byte from the current stream.</summary>
      <returns>The byte cast to a <see cref="T:System.Int32" />, or -1 if the end of the stream has been reached.</returns>
      <exception cref="T:System.ObjectDisposedException">The current stream instance is closed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the position within the current stream to the specified value.</summary>
      <returns>The new position within the stream, calculated by combining the initial reference point and the offset.</returns>
      <param name="offset">The new position within the stream. This is relative to the <paramref name="loc" /> parameter, and can be positive or negative. </param>
      <param name="loc">A value of type <see cref="T:System.IO.SeekOrigin" />, which acts as the seek reference point. </param>
      <exception cref="T:System.IO.IOException">Seeking is attempted before the beginning of the stream. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">There is an invalid <see cref="T:System.IO.SeekOrigin" />. -or-<paramref name="offset" /> caused an arithmetic overflow.</exception>
      <exception cref="T:System.ObjectDisposedException">The current stream instance is closed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.SetLength(System.Int64)">
      <summary>Sets the length of the current stream to the specified value.</summary>
      <param name="value">The value at which to set the length. </param>
      <exception cref="T:System.NotSupportedException">The current stream is not resizable and <paramref name="value" /> is larger than the current capacity.-or- The current stream does not support writing. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is negative or is greater than the maximum length of the <see cref="T:System.IO.MemoryStream" />, where the maximum length is(<see cref="F:System.Int32.MaxValue" /> - origin), and origin is the index into the underlying buffer at which the stream starts. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.ToArray">
      <summary>Writes the stream contents to a byte array, regardless of the <see cref="P:System.IO.MemoryStream.Position" /> property.</summary>
      <returns>A new byte array.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a block of bytes to the current stream using data read from buffer.</summary>
      <param name="buffer">The buffer to write data from. </param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing from. </param>
      <param name="count">The maximum number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing. For additional information see <see cref="P:System.IO.Stream.CanWrite" />.-or- The current position is closer than <paramref name="count" /> bytes to the end of the stream, and the capacity cannot be modified. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> subtracted from the buffer length is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> are negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The current stream instance is closed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.WriteByte(System.Byte)">
      <summary>Writes a byte to the current stream at the current position.</summary>
      <param name="value">The byte to write. </param>
      <exception cref="T:System.NotSupportedException">The stream does not support writing. For additional information see <see cref="P:System.IO.Stream.CanWrite" />.-or- The current position is at the end of the stream, and the capacity cannot be modified. </exception>
      <exception cref="T:System.ObjectDisposedException">The current stream is closed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
      <summary>Writes the entire contents of this memory stream to another stream.</summary>
      <param name="stream">The stream to write this memory stream to. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The current or target stream is closed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.Path">
      <summary>Performs operations on <see cref="T:System.String" /> instances that contain file or directory path information. These operations are performed in a cross-platform manner.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IO.Path.AltDirectorySeparatorChar">
      <summary>Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Path.ChangeExtension(System.String,System.String)">
      <summary>Changes the extension of a path string.</summary>
      <returns>A string containing the modified path information.On Windows-based desktop platforms, if <paramref name="path" /> is null or an empty string (""), the path information is returned unmodified. If <paramref name="extension" /> is null, the returned string contains the specified path with its extension removed. If <paramref name="path" /> has no extension, and <paramref name="extension" /> is not null, the returned path string contains <paramref name="extension" /> appended to the end of <paramref name="path" />.</returns>
      <param name="path">The path information to modify. The path cannot contain any of the characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. </param>
      <param name="extension">The new extension (with or without a leading period). Specify null to remove an existing extension from <paramref name="path" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String)">
      <summary>Combines two strings into a path.</summary>
      <returns>A string that contains the combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <paramref name="path2" /> contains an absolute path, this method returns <paramref name="path2" />.</returns>
      <param name="path1">The first path to combine. </param>
      <param name="path2">The second path to combine. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" /> or <paramref name="path2" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" /> or <paramref name="path2" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String)">
      <summary>Combines three strings into a path.</summary>
      <returns>A string that contains the combined paths.</returns>
      <param name="path1">The first path to combine. </param>
      <param name="path2">The second path to combine. </param>
      <param name="path3">The third path to combine.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" /> is null. </exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)">
      <summary>Combines four strings into a path.</summary>
      <returns>A string that contains the combined paths.</returns>
      <param name="path1">The first path to combine. </param>
      <param name="path2">The second path to combine. </param>
      <param name="path3">The third path to combine.</param>
      <param name="path4">The fourth path to combine.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> is null. </exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String[])">
      <summary>Combines an array of strings into a path.</summary>
      <returns>A string that contains the combined paths.</returns>
      <param name="paths">An array of parts of the path.</param>
      <exception cref="T:System.ArgumentException">One of the strings in the array contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">One of the strings in the array is null. </exception>
    </member>
    <member name="F:System.IO.Path.DirectorySeparatorChar">
      <summary>Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.String)">
      <summary>Returns the directory information for the specified path string.</summary>
      <returns>A <see cref="T:System.String" /> containing directory information for <paramref name="path" />, or null if <paramref name="path" /> denotes a root directory, is the empty string (""), or is null. Returns <see cref="F:System.String.Empty" /> if <paramref name="path" /> does not contain directory information.</returns>
      <param name="path">The path of a file or directory. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> parameter contains invalid characters, is empty, or contains only white spaces. </exception>
      <exception cref="T:System.IO.PathTooLongException">The <paramref name="path" /> parameter is longer than the system-defined maximum length.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.String)">
      <summary>Returns the extension of the specified path string.</summary>
      <returns>A <see cref="T:System.String" /> containing the extension of the specified path (including the "."), null, or <see cref="F:System.String.Empty" />. If <paramref name="path" /> is null, GetExtension returns null. If <paramref name="path" /> does not have extension information, GetExtension returns Empty.</returns>
      <param name="path">The path string from which to get the extension. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.  </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.String)">
      <summary>Returns the file name and extension of the specified path string.</summary>
      <returns>A <see cref="T:System.String" /> consisting of the characters after the last directory character in <paramref name="path" />. If the last character of <paramref name="path" /> is a directory or volume separator character, this method returns <see cref="F:System.String.Empty" />. If <paramref name="path" /> is null, this method returns null.</returns>
      <param name="path">The path string from which to obtain the file name and extension. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.String)">
      <summary>Returns the file name of the specified path string without the extension.</summary>
      <returns>A <see cref="T:System.String" /> containing the string returned by <see cref="M:System.IO.Path.GetFileName(System.String)" />, minus the last period (.) and all characters following it.</returns>
      <param name="path">The path of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String)">
      <summary>Returns the absolute path for the specified path string.</summary>
      <returns>A string containing the fully qualified location of <paramref name="path" />, such as "C:\MyFile.txt".</returns>
      <param name="path">The file or directory for which to obtain absolute path information. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.-or- The system could not retrieve the absolute path. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> contains a colon (":") that is not part of a volume identifier (for example, "c:\"). </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Path.GetInvalidFileNameChars">
      <summary>Gets an array containing the characters that are not allowed in file names.</summary>
      <returns>An array containing the characters that are not allowed in file names.</returns>
    </member>
    <member name="M:System.IO.Path.GetInvalidPathChars">
      <summary>Gets an array containing the characters that are not allowed in path names.</summary>
      <returns>An array containing the characters that are not allowed in path names.</returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.String)">
      <summary>Gets the root directory information of the specified path.</summary>
      <returns>A string containing the root directory of <paramref name="path" />, such as "C:\", or null if <paramref name="path" /> is null, or an empty string if <paramref name="path" /> does not contain root directory information.</returns>
      <param name="path">The path from which to obtain root directory information. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.-or- <see cref="F:System.String.Empty" /> was passed to <paramref name="path" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Path.GetRandomFileName">
      <summary>Returns a random folder name or file name.</summary>
      <returns>A random folder name or file name.</returns>
    </member>
    <member name="M:System.IO.Path.GetTempFileName">
      <summary>Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</summary>
      <returns>A <see cref="T:System.String" /> containing the full path of the temporary file.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as no unique temporary file name is available.- or -This method was unable to create a temporary file.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Path.GetTempPath">
      <summary>Returns the path of the current system's temporary folder.</summary>
      <returns>A <see cref="T:System.String" /> containing the path information of a temporary directory.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.String)">
      <summary>Determines whether a path includes a file name extension.</summary>
      <returns>true if the characters that follow the last directory separator (\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, false.</returns>
      <param name="path">The path to search for an extension. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IO.Path.InvalidPathChars">
      <summary>Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <see cref="T:System.IO.Path" /> class.</summary>
      <returns>A character array of invalid path characters for the current platform.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.String)">
      <summary>Gets a value indicating whether the specified path string contains absolute or relative path information.</summary>
      <returns>true if <paramref name="path" /> contains an absolute path; otherwise, false.</returns>
      <param name="path">The path to test. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IO.Path.PathSeparator">
      <summary>A platform-specific separator character used to separate path strings in environment variables.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IO.Path.VolumeSeparatorChar">
      <summary>Provides a platform-specific volume separator character.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IO.PathTooLongException">
      <summary>The exception that is thrown when a path or file name is longer than the system-defined maximum length.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" /> class with its HRESULT set to COR_E_PATHTOOLONG.</summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" /> class with the specified serialization and context information.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" /> class with its message string set to <paramref name="message" /> and its HRESULT set to COR_E_PATHTOOLONG.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.IO.SearchOption">
      <summary>Specifies whether to search the current directory, or the current directory and all subdirectories. </summary>
    </member>
    <member name="F:System.IO.SearchOption.TopDirectoryOnly">
      <summary>Includes only the current directory in a search.</summary>
    </member>
    <member name="F:System.IO.SearchOption.AllDirectories">
      <summary>Includes the current directory and all the subdirectories in a search operation. This option includes reparse points like mounted drives and symbolic links in the search.</summary>
    </member>
    <member name="T:System.IO.SeekOrigin">
      <summary>Provides the fields that represent reference points in streams for seeking.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IO.SeekOrigin.Begin">
      <summary>Specifies the beginning of a stream.</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.Current">
      <summary>Specifies the current position within a stream.</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.End">
      <summary>Specifies the end of a stream.</summary>
    </member>
    <member name="T:System.IO.Stream">
      <summary>Provides a generic view of a sequence of bytes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Stream.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Stream" /> class. </summary>
    </member>
    <member name="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous read operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous read, which could still be pending.</returns>
      <param name="buffer">The buffer to read the data into. </param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing data read from the stream. </param>
      <param name="count">The maximum number of bytes to read. </param>
      <param name="callback">An optional asynchronous callback, to be called when the read is complete. </param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests. </param>
      <exception cref="T:System.IO.IOException">Attempted an asynchronous read past the end of the stream, or a disk error occurs. </exception>
      <exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
      <exception cref="T:System.NotSupportedException">The current Stream implementation does not support the read operation. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous write operation.</summary>
      <returns>An IAsyncResult that represents the asynchronous write, which could still be pending.</returns>
      <param name="buffer">The buffer to write data from. </param>
      <param name="offset">The byte offset in <paramref name="buffer" /> from which to begin writing. </param>
      <param name="count">The maximum number of bytes to write. </param>
      <param name="callback">An optional asynchronous callback, to be called when the write is complete. </param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests. </param>
      <exception cref="T:System.IO.IOException">Attempted an asynchronous write past the end of the stream, or a disk error occurs. </exception>
      <exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
      <exception cref="T:System.NotSupportedException">The current Stream implementation does not support the write operation. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Stream.CanRead">
      <summary>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</summary>
      <returns>true if the stream supports reading; otherwise, false.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Stream.CanSeek">
      <summary>When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</summary>
      <returns>true if the stream supports seeking; otherwise, false.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.Stream.CanTimeout">
      <summary>Gets a value that determines whether the current stream can time out.</summary>
      <returns>A value that determines whether the current stream can time out.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Stream.CanWrite">
      <summary>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</summary>
      <returns>true if the stream supports writing; otherwise, false.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Stream.Close">
      <summary>Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Stream.CopyTo(System.IO.Stream)">
      <summary>Reads all the bytes from the current stream and writes them to the destination stream.</summary>
      <param name="destination">The stream that will contain the contents of the current stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The current stream does not support reading.-or-<paramref name="destination" /> does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Either the current stream or <paramref name="destination" /> were closed before the <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> method was called.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
      <summary>Reads all the bytes from the current stream and writes them to a destination stream, using a specified buffer size.</summary>
      <param name="destination">The stream that will contain the contents of the current stream.</param>
      <param name="bufferSize">The size of the buffer. This value must be greater than zero. The default size is 4096.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is negative or zero.</exception>
      <exception cref="T:System.NotSupportedException">The current stream does not support reading.-or-<paramref name="destination" /> does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">Either the current stream or <paramref name="destination" /> were closed before the <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> method was called.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Stream.CreateWaitHandle">
      <summary>Allocates a <see cref="T:System.Threading.WaitHandle" /> object.</summary>
      <returns>A reference to the allocated WaitHandle.</returns>
    </member>
    <member name="M:System.IO.Stream.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.Stream" />.</summary>
    </member>
    <member name="M:System.IO.Stream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.Stream.EndRead(System.IAsyncResult)">
      <summary>Waits for the pending asynchronous read to complete.</summary>
      <returns>The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.</returns>
      <param name="asyncResult">The reference to the pending asynchronous request to finish. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream. </exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
      <summary>Ends an asynchronous write operation.</summary>
      <param name="asyncResult">A reference to the outstanding asynchronous I/O request. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream. </exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Stream.Flush">
      <summary>When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Stream.Length">
      <summary>When overridden in a derived class, gets the length in bytes of the stream.</summary>
      <returns>A long value representing the length of the stream in bytes.</returns>
      <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IO.Stream.Null">
      <summary>A Stream with no backing store.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Stream.ObjectInvariant">
      <summary>Provides support for a <see cref="T:System.Diagnostics.Contracts.Contract" />.</summary>
    </member>
    <member name="P:System.IO.Stream.Position">
      <summary>When overridden in a derived class, gets or sets the position within the current stream.</summary>
      <returns>The current position within the stream.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
      <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
      <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source. </param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream. </param>
      <param name="count">The maximum number of bytes to be read from the current stream. </param>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Stream.ReadByte">
      <summary>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</summary>
      <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
      <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Stream.ReadTimeout">
      <summary>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out. </summary>
      <returns>A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IO.Stream.ReadTimeout" /> method always throws an <see cref="T:System.InvalidOperationException" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>When overridden in a derived class, sets the position within the current stream.</summary>
      <returns>The new position within the current stream.</returns>
      <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter. </param>
      <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Stream.SetLength(System.Int64)">
      <summary>When overridden in a derived class, sets the length of the current stream.</summary>
      <param name="value">The desired length of the current stream in bytes. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.Stream.Synchronized(System.IO.Stream)">
      <summary>Creates a thread-safe (synchronized) wrapper around the specified <see cref="T:System.IO.Stream" /> object.</summary>
      <returns>A thread-safe <see cref="T:System.IO.Stream" /> object.</returns>
      <param name="stream">The <see cref="T:System.IO.Stream" /> object to synchronize.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
      <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream. </param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream. </param>
      <param name="count">The number of bytes to be written to the current stream. </param>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.Stream.WriteByte(System.Byte)">
      <summary>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</summary>
      <param name="value">The byte to write to the stream. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.Stream.WriteTimeout">
      <summary>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out. </summary>
      <returns>A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.IO.Stream.WriteTimeout" /> method always throws an <see cref="T:System.InvalidOperationException" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.StreamReader">
      <summary>Implements a <see cref="T:System.IO.TextReader" /> that reads characters from a byte stream in a particular encoding.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified stream.</summary>
      <param name="stream">The stream to be read. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> does not support reading. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null. </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified stream, with the specified byte order mark detection option.</summary>
      <param name="stream">The stream to be read. </param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> does not support reading. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null. </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified stream, with the specified character encoding.</summary>
      <param name="stream">The stream to be read. </param>
      <param name="encoding">The character encoding to use. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> does not support reading. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null. </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified stream, with the specified character encoding and byte order mark detection option.</summary>
      <param name="stream">The stream to be read. </param>
      <param name="encoding">The character encoding to use. </param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> does not support reading. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null. </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified stream, with the specified character encoding, byte order mark detection option, and buffer size.</summary>
      <param name="stream">The stream to be read. </param>
      <param name="encoding">The character encoding to use. </param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file. </param>
      <param name="bufferSize">The minimum buffer size. </param>
      <exception cref="T:System.ArgumentException">The stream does not support reading. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than or equal to zero. </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified file name.</summary>
      <param name="path">The complete file path to be read. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label. </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified file name, with the specified byte order mark detection option.</summary>
      <param name="path">The complete file path to be read. </param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label. </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified file name, with the specified character encoding.</summary>
      <param name="path">The complete file path to be read. </param>
      <param name="encoding">The character encoding to use. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> or <paramref name="encoding" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label. </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified file name, with the specified character encoding and byte order mark detection option.</summary>
      <param name="path">The complete file path to be read. </param>
      <param name="encoding">The character encoding to use. </param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> or <paramref name="encoding" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label. </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified file name, with the specified character encoding, byte order mark detection option, and buffer size.</summary>
      <param name="path">The complete file path to be read. </param>
      <param name="encoding">The character encoding to use. </param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file. </param>
      <param name="bufferSize">The minimum buffer size, in number of 16-bit characters. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> or <paramref name="encoding" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> is less than or equal to zero. </exception>
    </member>
    <member name="P:System.IO.StreamReader.BaseStream">
      <summary>Returns the underlying stream.</summary>
      <returns>The underlying stream.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StreamReader.Close">
      <summary>Closes the <see cref="T:System.IO.StreamReader" /> object and the underlying stream, and releases any system resources associated with the reader.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.StreamReader.CurrentEncoding">
      <summary>Gets the current character encoding that the current <see cref="T:System.IO.StreamReader" /> object is using.</summary>
      <returns>The current character encoding used by the current reader. The value can be different after the first call to any <see cref="Overload:System.IO.StreamReader.Read" /> method of <see cref="T:System.IO.StreamReader" />, since encoding autodetection is not done until the first call to a <see cref="Overload:System.IO.StreamReader.Read" /> method.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StreamReader.DiscardBufferedData">
      <summary>Allows a <see cref="T:System.IO.StreamReader" /> object to discard its current data.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StreamReader.Dispose(System.Boolean)">
      <summary>Closes the underlying stream, releases the unmanaged resources used by the <see cref="T:System.IO.StreamReader" />, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.IO.StreamReader.EndOfStream">
      <summary>Gets a value that indicates whether the current stream position is at the end of the stream.</summary>
      <returns>true if the current stream position is at the end of the stream; otherwise false.</returns>
      <exception cref="T:System.ObjectDisposedException">The underlying stream has been disposed.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IO.StreamReader.Null">
      <summary>A <see cref="T:System.IO.StreamReader" /> object around an empty stream.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamReader.Peek">
      <summary>Returns the next available character but does not consume it.</summary>
      <returns>An integer representing the next character to be read, or -1 if there are no characters to be read or if the stream does not support seeking.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamReader.Read">
      <summary>Reads the next character from the input stream and advances the character position by one character.</summary>
      <returns>The next character from the input stream represented as an <see cref="T:System.Int32" /> object, or -1 if no more characters are available.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a maximum of <paramref name="count" /> characters from the current stream into <paramref name="buffer" />, beginning at <paramref name="index" />.</summary>
      <returns>The number of characters that have been read, or 0 if at the end of the stream and no data was read. The number will be less than or equal to the <paramref name="count" /> parameter, depending on whether the data is available within the stream.</returns>
      <param name="buffer">When this method returns, contains the specified character array with the values between <paramref name="index" /> and (<paramref name="index + count - 1" />) replaced by the characters read from the current source. </param>
      <param name="index">The index of <paramref name="buffer" /> at which to begin writing. </param>
      <param name="count">The maximum number of characters to read. </param>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs, such as the stream is closed. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamReader.ReadLine">
      <summary>Reads a line of characters from the current stream and returns the data as a string.</summary>
      <returns>The next line from the input stream, or null if the end of the input stream is reached.</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEnd">
      <summary>Reads the stream from the current position to the end of the stream.</summary>
      <returns>The rest of the stream as a string, from the current position to the end. If the current position is at the end of the stream, returns the empty string("").</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IO.StreamWriter">
      <summary>Implements a <see cref="T:System.IO.TextWriter" /> for writing characters to a stream in a particular encoding.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified stream, using UTF-8 encoding and the default buffer size.</summary>
      <param name="stream">The stream to write to. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> is not writable. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null. </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified stream, using the specified encoding and the default buffer size.</summary>
      <param name="stream">The stream to write to. </param>
      <param name="encoding">The character encoding to use. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> is not writable. </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified stream, using the specified encoding and buffer size.</summary>
      <param name="stream">The stream to write to. </param>
      <param name="encoding">The character encoding to use. </param>
      <param name="bufferSize">Sets the buffer size. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is negative. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> is not writable. </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file on the specified path, using the default encoding and buffer size.</summary>
      <param name="path">The complete file path to write to. <paramref name="path" /> can be a file name. </param>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""). -or-<paramref name="path" /> contains the name of a system device (com1, com2, and so on).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file on the specified path, using the default encoding and buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.</summary>
      <param name="path">The complete file path to write to. </param>
      <param name="append">Determines whether data is to be appended to the file. If the file exists and <paramref name="append" /> is false, the file is overwritten. If the file exists and <paramref name="append" /> is true, the data is appended to the file. Otherwise, a new file is created. </param>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty. -or-<paramref name="path" /> contains the name of a system device (com1, com2, and so on).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file on the specified path, using the specified encoding and default buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.</summary>
      <param name="path">The complete file path to write to. </param>
      <param name="append">Determines whether data is to be appended to the file. If the file exists and <paramref name="append" /> is false, the file is overwritten. If the file exists and <paramref name="append" /> is true, the data is appended to the file. Otherwise, a new file is created. </param>
      <param name="encoding">The character encoding to use. </param>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty. -or-<paramref name="path" /> contains the name of a system device (com1, com2, and so on).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file on the specified path, using the specified encoding and buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.</summary>
      <param name="path">The complete file path to write to. </param>
      <param name="append">Determines whether data is to be appended to the file. If the file exists and <paramref name="append" /> is false, the file is overwritten. If the file exists and <paramref name="append" /> is true, the data is appended to the file. Otherwise, a new file is created. </param>
      <param name="encoding">The character encoding to use. </param>
      <param name="bufferSize">Sets the buffer size. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""). -or-<paramref name="path" /> contains the name of a system device (com1, com2, and so on).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> or <paramref name="encoding" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is negative. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
    </member>
    <member name="P:System.IO.StreamWriter.AutoFlush">
      <summary>Gets or sets a value indicating whether the <see cref="T:System.IO.StreamWriter" /> will flush its buffer to the underlying stream after every call to <see cref="M:System.IO.StreamWriter.Write(System.Char)" />.</summary>
      <returns>true to force <see cref="T:System.IO.StreamWriter" /> to flush its buffer; otherwise, false.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.StreamWriter.BaseStream">
      <summary>Gets the underlying stream that interfaces with a backing store.</summary>
      <returns>The stream this StreamWriter is writing to.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StreamWriter.Close">
      <summary>Closes the current StreamWriter object and the underlying stream.</summary>
      <exception cref="T:System.Text.EncoderFallbackException">The current encoding does not support displaying half of a Unicode surrogate pair.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.StreamWriter" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
      <exception cref="T:System.Text.EncoderFallbackException">The current encoding does not support displaying half of a Unicode surrogate pair.</exception>
    </member>
    <member name="P:System.IO.StreamWriter.Encoding">
      <summary>Gets the <see cref="T:System.Text.Encoding" /> in which the output is written.</summary>
      <returns>The <see cref="T:System.Text.Encoding" /> specified in the constructor for the current instance, or <see cref="T:System.Text.UTF8Encoding" /> if an encoding was not specified.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StreamWriter.Flush">
      <summary>Clears all buffers for the current writer and causes any buffered data to be written to the underlying stream.</summary>
      <exception cref="T:System.ObjectDisposedException">The current writer is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error has occurred. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">The current encoding does not support displaying half of a Unicode surrogate pair. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IO.StreamWriter.Null">
      <summary>Provides a StreamWriter with no backing store that can be written to, but not read from.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char)">
      <summary>Writes a character to the stream.</summary>
      <param name="value">The character to write to the text stream. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and current writer is closed. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter" /> is at the end the stream. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[])">
      <summary>Writes a character array to the stream.</summary>
      <param name="buffer">A character array containing the data to write. If <paramref name="buffer" /> is null, nothing is written. </param>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and current writer is closed. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter" /> is at the end the stream. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters to the stream.</summary>
      <param name="buffer">A character array containing the data to write. </param>
      <param name="index">The index into <paramref name="buffer" /> at which to begin writing. </param>
      <param name="count">The number of characters to read from <paramref name="buffer" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and current writer is closed. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter" /> is at the end the stream. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String)">
      <summary>Writes a string to the stream.</summary>
      <param name="value">The string to write to the stream. If <paramref name="value" /> is null, nothing is written. </param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and current writer is closed. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> is true or the <see cref="T:System.IO.StreamWriter" /> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter" /> is at the end the stream. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IO.StringReader">
      <summary>Implements a <see cref="T:System.IO.TextReader" /> that reads from a string.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringReader.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StringReader" /> class that reads from the specified string.</summary>
      <param name="s">The string to which the <see cref="T:System.IO.StringReader" /> should be initialized. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
    </member>
    <member name="M:System.IO.StringReader.Close">
      <summary>Closes the <see cref="T:System.IO.StringReader" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringReader.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.StringReader" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.IO.StringReader.Peek">
      <summary>Returns the next available character but does not consume it.</summary>
      <returns>An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.</returns>
      <exception cref="T:System.ObjectDisposedException">The current reader is closed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringReader.Read">
      <summary>Reads the next character from the input string and advances the character position by one character.</summary>
      <returns>The next character from the underlying string, or -1 if no more characters are available.</returns>
      <exception cref="T:System.ObjectDisposedException">The current reader is closed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a block of characters from the input string and advances the character position by <paramref name="count" />.</summary>
      <returns>The total number of characters read into the buffer. This can be less than the number of characters requested if that many characters are not currently available, or zero if the end of the underlying string has been reached.</returns>
      <param name="buffer">When this method returns, contains the specified character array with the values between <paramref name="index" /> and (<paramref name="index" /> + <paramref name="count" /> - 1) replaced by the characters read from the current source. </param>
      <param name="index">The starting index in the buffer. </param>
      <param name="count">The number of characters to read. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ObjectDisposedException">The current reader is closed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringReader.ReadLine">
      <summary>Reads a line from the underlying string.</summary>
      <returns>The next line from the underlying string, or null if the end of the underlying string is reached.</returns>
      <exception cref="T:System.ObjectDisposedException">The current reader is closed. </exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringReader.ReadToEnd">
      <summary>Reads the stream as a string, either in its entirety or from the current position to the end of the stream.</summary>
      <returns>The content from the current position to the end of the underlying string.</returns>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string. </exception>
      <exception cref="T:System.ObjectDisposedException">The current reader is closed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.StringWriter">
      <summary>Implements a <see cref="T:System.IO.TextWriter" /> for writing information to a string. The information is stored in an underlying <see cref="T:System.Text.StringBuilder" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StringWriter" /> class.</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.IFormatProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StringWriter" /> class with the specified format control.</summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that controls formatting. </param>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StringWriter" /> class that writes to the specified <see cref="T:System.Text.StringBuilder" />.</summary>
      <param name="sb">The StringBuilder to write to. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> is null. </exception>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.StringWriter" /> class that writes to the specified <see cref="T:System.Text.StringBuilder" /> and has the specified format provider.</summary>
      <param name="sb">The StringBuilder to write to. </param>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that controls formatting. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> is null. </exception>
    </member>
    <member name="M:System.IO.StringWriter.Close">
      <summary>Closes the current <see cref="T:System.IO.StringWriter" /> and the underlying stream.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StringWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.StringWriter" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.IO.StringWriter.Encoding">
      <summary>Gets the <see cref="T:System.Text.Encoding" /> in which the output is written.</summary>
      <returns>The Encoding in which the output is written.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.StringWriter.GetStringBuilder">
      <summary>Returns the underlying <see cref="T:System.Text.StringBuilder" />.</summary>
      <returns>The underlying StringBuilder.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringWriter.ToString">
      <summary>Returns a string containing the characters written to the current StringWriter so far.</summary>
      <returns>The string containing the characters written to the current StringWriter.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char)">
      <summary>Writes a character to this instance of the StringWriter.</summary>
      <param name="value">The character to write. </param>
      <exception cref="T:System.ObjectDisposedException">The writer is closed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Writes the specified region of a character array to this instance of the StringWriter.</summary>
      <param name="buffer">The character array to read data from. </param>
      <param name="index">The index at which to begin reading from <paramref name="buffer" />. </param>
      <param name="count">The maximum number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ArgumentException">(<paramref name="index" /> + <paramref name="count" />)&gt; <paramref name="buffer" />. Length. </exception>
      <exception cref="T:System.ObjectDisposedException">The writer is closed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.String)">
      <summary>Writes a string to this instance of the StringWriter.</summary>
      <param name="value">The string to write. </param>
      <exception cref="T:System.ObjectDisposedException">The writer is closed. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.TextReader">
      <summary>Represents a reader that can read a sequential series of characters.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.TextReader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.TextReader" /> class.</summary>
    </member>
    <member name="M:System.IO.TextReader.Close">
      <summary>Closes the <see cref="T:System.IO.TextReader" /> and releases any system resources associated with the TextReader.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextReader.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.TextReader" /> object.</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.TextReader" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="F:System.IO.TextReader.Null">
      <summary>Provides a TextReader with no data to read from.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextReader.Peek">
      <summary>Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the input stream.</summary>
      <returns>An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextReader.Read">
      <summary>Reads the next character from the input stream and advances the character position by one character.</summary>
      <returns>The next character from the input stream, or -1 if no more characters are available. The default implementation returns -1.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a maximum of <paramref name="count" /> characters from the current stream and writes the data to <paramref name="buffer" />, beginning at <paramref name="index" />.</summary>
      <returns>The number of characters that have been read. The number will be less than or equal to <paramref name="count" />, depending on whether the data is available within the stream. This method returns zero if called when no more characters are left to read.</returns>
      <param name="buffer">When this method returns, contains the specified character array with the values between <paramref name="index" /> and (<paramref name="index" /> + <paramref name="count" /> - 1) replaced by the characters read from the current source. </param>
      <param name="index">The place in <paramref name="buffer" /> at which to begin writing. </param>
      <param name="count">The maximum number of characters to read. If the end of the stream is reached before <paramref name="count" /> of characters is read into <paramref name="buffer" />, the current method returns. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>Reads a maximum of <paramref name="count" /> characters from the current stream, and writes the data to <paramref name="buffer" />, beginning at <paramref name="index" />.</summary>
      <returns>The position of the underlying stream is advanced by the number of characters that were read into <paramref name="buffer" />.The number of characters that have been read. The number will be less than or equal to <paramref name="count" />, depending on whether all input characters have been read.</returns>
      <param name="buffer">When this method returns, this parameter contains the specified character array with the values between <paramref name="index" /> and (<paramref name="index" /> + <paramref name="count" /> -1) replaced by the characters read from the current source. </param>
      <param name="index">The place in <paramref name="buffer" /> at which to begin reading. </param>
      <param name="count">The maximum number of characters to read. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.TextReader.ReadLine">
      <summary>Reads a line of characters from the current stream and returns the data as a string.</summary>
      <returns>The next line from the input stream, or null if all characters have been read.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line is larger than <see cref="F:System.Int32.MaxValue" /></exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextReader.ReadToEnd">
      <summary>Reads all characters from the current position to the end of the TextReader and returns them as one string.</summary>
      <returns>A string containing all characters from the current position to the end of the TextReader.</returns>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader" /> is closed. </exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line is larger than <see cref="F:System.Int32.MaxValue" /></exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
      <summary>Creates a thread-safe wrapper around the specified TextReader.</summary>
      <returns>A thread-safe <see cref="T:System.IO.TextReader" />.</returns>
      <param name="reader">The TextReader to synchronize. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IO.TextWriter">
      <summary>Represents a writer that can write a sequential series of characters. This class is abstract.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.TextWriter" /> class.</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor(System.IFormatProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.TextWriter" /> class with the specified format provider.</summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that controls formatting. </param>
    </member>
    <member name="M:System.IO.TextWriter.Close">
      <summary>Closes the current writer and releases any system resources associated with the writer.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IO.TextWriter.CoreNewLine">
      <summary>Stores the new line characters used for this TextWriter.</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.TextWriter" /> object.</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.TextWriter" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.IO.TextWriter.Encoding">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Text.Encoding" /> in which the output is written.</summary>
      <returns>The Encoding in which the output is written.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Flush">
      <summary>Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.IO.TextWriter.FormatProvider">
      <summary>Gets an object that controls formatting.</summary>
      <returns>An <see cref="T:System.IFormatProvider" /> object for a specific culture, or the formatting of the current culture if no other culture is specified.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.TextWriter.NewLine">
      <summary>Gets or sets the line terminator string used by the current TextWriter.</summary>
      <returns>The line terminator string for the current TextWriter.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.IO.TextWriter.Null">
      <summary>Provides a TextWriter with no backing store that can be written to, but not read from.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Synchronized(System.IO.TextWriter)">
      <summary>Creates a thread-safe wrapper around the specified TextWriter.</summary>
      <returns>A thread-safe wrapper.</returns>
      <param name="writer">The TextWriter to synchronize. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Boolean)">
      <summary>Writes the text representation of a Boolean value to the text stream.</summary>
      <param name="value">The Boolean to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char)">
      <summary>Writes a character to the text stream.</summary>
      <param name="value">The character to write to the text stream. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[])">
      <summary>Writes a character array to the text stream.</summary>
      <param name="buffer">The character array to write to the text stream. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters to the text stream.</summary>
      <param name="buffer">The character array to write data from. </param>
      <param name="index">Starting index in the buffer. </param>
      <param name="count">The number of characters to write. </param>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Decimal)">
      <summary>Writes the text representation of a decimal value to the text stream.</summary>
      <param name="value">The decimal value to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Double)">
      <summary>Writes the text representation of an 8-byte floating-point value to the text stream.</summary>
      <param name="value">The 8-byte floating-point value to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int32)">
      <summary>Writes the text representation of a 4-byte signed integer to the text stream.</summary>
      <param name="value">The 4-byte signed integer to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int64)">
      <summary>Writes the text representation of an 8-byte signed integer to the text stream.</summary>
      <param name="value">The 8-byte signed integer to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Object)">
      <summary>Writes the text representation of an object to the text stream by calling ToString on that object.</summary>
      <param name="value">The object to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Single)">
      <summary>Writes the text representation of a 4-byte floating-point value to the text stream.</summary>
      <param name="value">The 4-byte floating-point value to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String)">
      <summary>Writes a string to the text stream.</summary>
      <param name="value">The string to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object)">
      <summary>Writes out a formatted string, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">The formatting string. </param>
      <param name="arg0">An object to write into the formatted string. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)">
      <summary>Writes out a formatted string, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">The formatting string. </param>
      <param name="arg0">An object to write into the formatted string. </param>
      <param name="arg1">An object to write into the formatted string. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>Writes out a formatted string, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">The formatting string. </param>
      <param name="arg0">An object to write into the formatted string. </param>
      <param name="arg1">An object to write into the formatted string. </param>
      <param name="arg2">An object to write into the formatted string. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object[])">
      <summary>Writes out a formatted string, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">The formatting string. </param>
      <param name="arg">The object array to write into the formatted string. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="arg" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to <paramref name="arg" />. Length. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt32)">
      <summary>Writes the text representation of a 4-byte unsigned integer to the text stream.</summary>
      <param name="value">The 4-byte unsigned integer to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt64)">
      <summary>Writes the text representation of an 8-byte unsigned integer to the text stream.</summary>
      <param name="value">The 8-byte unsigned integer to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine">
      <summary>Writes a line terminator to the text stream.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Boolean)">
      <summary>Writes the text representation of a Boolean followed by a line terminator to the text stream.</summary>
      <param name="value">The Boolean to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char)">
      <summary>Writes a character followed by a line terminator to the text stream.</summary>
      <param name="value">The character to write to the text stream. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[])">
      <summary>Writes an array of characters followed by a line terminator to the text stream.</summary>
      <param name="buffer">The character array from which data is read. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>Writes a subarray of characters followed by a line terminator to the text stream.</summary>
      <param name="buffer">The character array from which data is read. </param>
      <param name="index">The index into <paramref name="buffer" /> at which to begin reading. </param>
      <param name="count">The maximum number of characters to write. </param>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Decimal)">
      <summary>Writes the text representation of a decimal value followed by a line terminator to the text stream.</summary>
      <param name="value">The decimal value to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Double)">
      <summary>Writes the text representation of a 8-byte floating-point value followed by a line terminator to the text stream.</summary>
      <param name="value">The 8-byte floating-point value to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int32)">
      <summary>Writes the text representation of a 4-byte signed integer followed by a line terminator to the text stream.</summary>
      <param name="value">The 4-byte signed integer to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int64)">
      <summary>Writes the text representation of an 8-byte signed integer followed by a line terminator to the text stream.</summary>
      <param name="value">The 8-byte signed integer to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Object)">
      <summary>Writes the text representation of an object by calling ToString on this object, followed by a line terminator to the text stream.</summary>
      <param name="value">The object to write. If <paramref name="value" /> is null, only the line termination characters are written. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Single)">
      <summary>Writes the text representation of a 4-byte floating-point value followed by a line terminator to the text stream.</summary>
      <param name="value">The 4-byte floating-point value to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String)">
      <summary>Writes a string followed by a line terminator to the text stream.</summary>
      <param name="value">The string to write. If <paramref name="value" /> is null, only the line termination characters are written. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object)">
      <summary>Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">The formatted string. </param>
      <param name="arg0">The object to write into the formatted string. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">The formatting string. </param>
      <param name="arg0">The object to write into the format string. </param>
      <param name="arg1">The object to write into the format string. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">The formatting string. </param>
      <param name="arg0">The object to write into the format string. </param>
      <param name="arg1">The object to write into the format string. </param>
      <param name="arg2">The object to write into the format string. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object[])">
      <summary>Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">The formatting string. </param>
      <param name="arg">The object array to write into format string. </param>
      <exception cref="T:System.ArgumentNullException">A string or object is passed in as null. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to arg.Length. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt32)">
      <summary>Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text stream.</summary>
      <param name="value">The 4-byte unsigned integer to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt64)">
      <summary>Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text stream.</summary>
      <param name="value">The 8-byte unsigned integer to write. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IO.UnmanagedMemoryAccessor">
      <summary>Provides random access to unmanaged blocks of memory from managed code.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryAccessor" /> class. </summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryAccessor" /> class with a specified buffer, offset, and capacity.</summary>
      <param name="buffer">The buffer to contain the accessor.</param>
      <param name="offset">The byte at which to start the accessor.</param>
      <param name="capacity">The size, in bytes, of memory to allocate.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> plus <paramref name="capacity" /> is greater than <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="capacity" /> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> plus <paramref name="capacity" /> would wrap around the high end of the address space.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryAccessor" /> class with a specified buffer, offset, capacity, and access right.</summary>
      <param name="buffer">The buffer to contain the accessor.</param>
      <param name="offset">The byte at which to start the accessor.</param>
      <param name="capacity">The size, in bytes, of memory to allocate.</param>
      <param name="access">The type of access allowed to the memory. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> plus <paramref name="capacity" /> is greater than <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="capacity" /> is less than zero.-or-<paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> plus <paramref name="capacity" /> would wrap around the high end of the address space.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanRead">
      <summary>Determines whether the accessor is readable.</summary>
      <returns>true if the accessor is readable; otherwise, false. </returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanWrite">
      <summary>Determines whether the accessory is writable.</summary>
      <returns>true if the accessor is writable; otherwise, false. </returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.Capacity">
      <summary>Gets the capacity of the accessor.</summary>
      <returns>The capacity of the accessor.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.UnmanagedMemoryAccessor" />. </summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.UnmanagedMemoryAccessor" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Sets the initial values for the accessor.</summary>
      <param name="buffer">The buffer to contain the accessor.</param>
      <param name="offset">The byte at which to start the accessor.</param>
      <param name="capacity">The size, in bytes, of memory to allocate.</param>
      <param name="access">The type of access allowed to the memory. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> plus <paramref name="capacity" /> is greater than <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="capacity" /> is less than zero.-or-<paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> plus <paramref name="capacity" /> would wrap around the high end of the address space.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.IsOpen">
      <summary>Determines whether the accessor is currently open by a process.</summary>
      <returns>true if the accessor is open; otherwise, false. </returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)">
      <summary>Reads a structure of type <paramref name="T" /> from the accessor into a provided reference.</summary>
      <param name="position">The position in the accessor at which to begin reading.</param>
      <param name="structure">The structure to contain the read data.</param>
      <typeparam name="T">The type of structure.</typeparam>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read in a structure of type <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary>Reads structures of type <paramref name="T" /> from the accessor into an array of type <paramref name="T" />.</summary>
      <returns>The number of structures read into <paramref name="array" />. This value can be less than <paramref name="count" /> if there are fewer structures available, or zero if the end of the accessor is reached.</returns>
      <param name="position">The index in <paramref name="array" /> in which to place the first copied structure.</param>
      <param name="array">The array to contain the structures read from the accessor.</param>
      <param name="offset">The number of bytes in the accessor at which to begin reading.</param>
      <param name="count">The number of structures of type <paramref name="T" /> to read from the accessor.</param>
      <typeparam name="T">The type of structure.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not large enough to contain <paramref name="count" /> of structures (starting from <paramref name="position" />). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)">
      <summary>Reads a Boolean value from the accessor.</summary>
      <returns>true or false.</returns>
      <param name="position">The number of bytes into the accessor at which to begin reading. </param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)">
      <summary>Reads a byte value from the accessor.</summary>
      <returns>The value that was read.</returns>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)">
      <summary>Reads a character from the accessor.</summary>
      <returns>The value that was read.</returns>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)">
      <summary>Reads a decimal value from the accessor.</summary>
      <returns>The value that was read.</returns>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.-or-The decimal to read is invalid.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)">
      <summary>Reads a double-precision floating-point value from the accessor.</summary>
      <returns>The value that was read.</returns>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)">
      <summary>Reads a 16-bit integer from the accessor.</summary>
      <returns>The value that was read.</returns>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)">
      <summary>Reads a 32-bit integer from the accessor.</summary>
      <returns>The value that was read.</returns>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)">
      <summary>Reads a 64-bit integer from the accessor.</summary>
      <returns>The value that was read.</returns>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)">
      <summary>Reads an 8-bit signed integer from the accessor.</summary>
      <returns>The value that was read.</returns>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)">
      <summary>Reads a single-precision floating-point value from the accessor.</summary>
      <returns>The value that was read.</returns>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)">
      <summary>Reads an unsigned 16-bit integer from the accessor.</summary>
      <returns>The value that was read.</returns>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)">
      <summary>Reads an unsigned 32-bit integer from the accessor.</summary>
      <returns>The value that was read.</returns>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)">
      <summary>Reads an unsigned 64-bit integer from the accessor.</summary>
      <returns>The value that was read.</returns>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)">
      <summary>Writes a Boolean value into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)">
      <summary>Writes a byte value into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)">
      <summary>Writes a character into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)">
      <summary>Writes a decimal value into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.-or-The decimal is invalid.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)">
      <summary>Writes a Double value into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)">
      <summary>Writes a 16-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)">
      <summary>Writes a 32-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)">
      <summary>Writes a 64-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after position to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)">
      <summary>Writes an 8-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)">
      <summary>Writes a Single into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)">
      <summary>Writes an unsigned 16-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)">
      <summary>Writes an unsigned 32-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)">
      <summary>Writes an unsigned 64-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)">
      <summary>Writes a structure into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="structure">The structure to write.</param>
      <typeparam name="T">The type of structure.</typeparam>
      <exception cref="T:System.ArgumentException">There are not enough bytes in the accessor after <paramref name="position" /> to write a structure of type <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary>Writes structures from an array of type <paramref name="T" /> into the accessor.</summary>
      <param name="position">The index of the first structure in <paramref name="array" /> to write. </param>
      <param name="array">The array to write into the accessor.</param>
      <param name="offset">The byte in the accessor at which to begin writing.</param>
      <param name="count">The number of structures in <paramref name="array" /> to write.</param>
      <typeparam name="T">The type of structure.</typeparam>
      <exception cref="T:System.ArgumentException">There are not enough bytes in the accessor after <paramref name="position" /> to write the number of structures specified by <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.-or-<paramref name="offset" /> or <paramref name="count" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="T:System.IO.UnmanagedMemoryStream">
      <summary>Provides access to unmanaged blocks of memory from managed code.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryStream" /> class.</summary>
      <exception cref="T:System.Security.SecurityException">The user does not have the required permission.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryStream" /> class using the specified location and memory length.</summary>
      <param name="pointer">A pointer to an unmanaged memory location.</param>
      <param name="length">The length of the memory to use.</param>
      <exception cref="T:System.Security.SecurityException">The user does not have the required permission.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="pointer" /> value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="length" /> value is less than zero.- or -The <paramref name="length" /> is large enough to cause an overflow.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryStream" /> class using the specified location, memory length, total amount of memory, and file access values.</summary>
      <param name="pointer">A pointer to an unmanaged memory location.</param>
      <param name="length">The length of the memory to use.</param>
      <param name="capacity">The total amount of memory assigned to the stream.</param>
      <param name="access">One of the <see cref="T:System.IO.FileAccess" /> values.</param>
      <exception cref="T:System.Security.SecurityException">The user does not have the required permission.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="pointer" /> value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="length" /> value is less than zero.- or - The <paramref name="capacity" /> value is less than zero.- or -The <paramref name="length" /> value is greater than the <paramref name="capacity" /> value.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryStream" /> class in a safe buffer with a specified offset and length. </summary>
      <param name="buffer">The buffer to contain the unmanaged memory stream.</param>
      <param name="offset">The byte position in the buffer at which to start the unmanaged memory stream.</param>
      <param name="length">The length of the unmanaged memory stream.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryStream" /> class in a safe buffer with a specified offset, length, and file access. </summary>
      <param name="buffer">The buffer to contain the unmanaged memory stream.</param>
      <param name="offset">The byte position in the buffer at which to start the unmanaged memory stream.</param>
      <param name="length">The length of the unmanaged memory stream.</param>
      <param name="access">The mode of file access to the unmanaged memory stream. </param>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanRead">
      <summary>Gets a value indicating whether a stream supports reading.</summary>
      <returns>false if the object was created by a constructor with an <paramref name="access" /> parameter that did not include reading the stream and if the stream is closed; otherwise, true.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanSeek">
      <summary>Gets a value indicating whether a stream supports seeking.</summary>
      <returns>false if the stream is closed; otherwise, true.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanWrite">
      <summary>Gets a value indicating whether a stream supports writing.</summary>
      <returns>false if the object was created by a constructor with an <paramref name="access" /> parameter value that supports writing or was created by a constructor that had no parameters, or if the stream is closed; otherwise, true.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Capacity">
      <summary>Gets the stream length (size) or the total amount of memory assigned to a stream (capacity).</summary>
      <returns>The size or capacity of the stream.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.UnmanagedMemoryStream" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Flush">
      <summary>Overrides the <see cref="M:System.IO.Stream.Flush" /> method so that no action is performed.</summary>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryStream" /> class by using a pointer to an unmanaged memory location. </summary>
      <param name="pointer">A pointer to an unmanaged memory location.</param>
      <param name="length">The length of the memory to use.</param>
      <param name="capacity">The total amount of memory assigned to the stream.</param>
      <param name="access">One of the <see cref="T:System.IO.FileAccess" /> values. </param>
      <exception cref="T:System.Security.SecurityException">The user does not have the required permission.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="pointer" /> value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="length" /> value is less than zero.- or - The <paramref name="capacity" /> value is less than zero.- or -The <paramref name="length" /> value is large enough to cause an overflow.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryStream" /> class in a safe buffer with a specified offset, length, and file access. </summary>
      <param name="buffer">The buffer to contain the unmanaged memory stream.</param>
      <param name="offset">The byte position in the buffer at which to start the unmanaged memory stream.</param>
      <param name="length">The length of the unmanaged memory stream.</param>
      <param name="access">The mode of file access to the unmanaged memory stream.</param>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Length">
      <summary>Gets the length of the data in a stream.</summary>
      <returns>The length of the data in the stream.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Position">
      <summary>Gets or sets the current position in a stream.</summary>
      <returns>The current position in the stream.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The position is set to a value that is less than zero, or the position is larger than <see cref="F:System.Int32.MaxValue" /> or results in overflow when added to the current pointer.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.PositionPointer">
      <summary>Gets or sets a byte pointer to a stream based on the current position in the stream.</summary>
      <returns>A byte pointer.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The current position is larger than the capacity of the stream.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The position is being set is not a valid position in the current stream.</exception>
      <exception cref="T:System.IO.IOException">The pointer is being set to a lower value than the starting position of the stream.</exception>
      <exception cref="T:System.NotSupportedException">The stream was initialized for use with a <see cref="T:System.Runtime.InteropServices.SafeBuffer" />. The <see cref="P:System.IO.UnmanagedMemoryStream.PositionPointer" /> property is valid only for streams that are initialized with a <see cref="T:System.Byte" /> pointer. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the specified number of bytes into the specified array.</summary>
      <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
      <param name="buffer">When this method returns, contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source. This parameter is passed uninitialized.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream.</param>
      <param name="count">The maximum number of bytes to read from the current stream.</param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying memory does not support reading.- or - The <see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /> property is set to false. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> parameter is set to null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset" /> parameter is less than zero. - or - The <paramref name="count" /> parameter is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The length of the buffer array minus the <paramref name="offset" /> parameter is less than the <paramref name="count" /> parameter.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadByte">
      <summary>Reads a byte from a stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</summary>
      <returns>The unsigned byte cast to an <see cref="T:System.Int32" /> object, or -1 if at the end of the stream.</returns>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying memory does not support reading.- or -The current position is at the end of the stream.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the current position of the current stream to the given value.</summary>
      <returns>The new position in the stream.</returns>
      <param name="offset">The point relative to <paramref name="origin" /> to begin seeking from. </param>
      <param name="loc">Specifies the beginning, the end, or the current position as a reference point for <paramref name="origin" />, using a value of type <see cref="T:System.IO.SeekOrigin" />. </param>
      <exception cref="T:System.IO.IOException">An attempt was made to seek before the beginning of the stream.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset" /> value is larger than the maximum size of the stream.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="loc" /> is invalid.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
      <summary>Sets the length of a stream to a specified value.</summary>
      <param name="value">The length of the stream.</param>
      <exception cref="T:System.IO.IOException">An I/O error has occurred. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying memory does not support writing.- or -An attempt is made to write to the stream and the <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> property is false.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="value" /> exceeds the capacity of the stream.- or -The specified <paramref name="value" /> is negative.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a block of bytes to the current stream using data from a buffer.</summary>
      <param name="buffer">The byte array from which to copy bytes to the current stream.</param>
      <param name="offset">The offset in the buffer at which to begin copying bytes to the current stream.</param>
      <param name="count">The number of bytes to write to the current stream.</param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying memory does not support writing. - or -An attempt is made to write to the stream and the <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> property is false.- or -The <paramref name="count" /> value is greater than the capacity of the stream.- or -The position is at the end of the stream capacity.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">One of the specified parameters is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="offset" /> parameter minus the length of the <paramref name="buffer" /> parameter is less than the <paramref name="count" /> parameter.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> parameter is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
      <summary>Writes a byte to the current position in the file stream.</summary>
      <param name="value">A byte value written to the stream.</param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying memory does not support writing.- or -An attempt is made to write to the stream and the <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> property is false.- or - The current position is at the end of the capacity of the stream.</exception>
      <exception cref="T:System.IO.IOException">The supplied <paramref name="value" /> causes the stream exceed its maximum capacity.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.BinaryReader.System#IDisposable#Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.BinaryReader" />. </summary>
    </member>
    <member name="M:System.IO.BinaryWriter.System#IDisposable#Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:System.IO.IsolatedStorage.INormalizeForIsolatedStorage">
      <summary>Enables comparisons between an isolated store and an application domain and assembly's evidence.</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.INormalizeForIsolatedStorage.Normalize">
      <summary>When overridden in a derived class, returns a normalized copy of the object on which it is called.</summary>
      <returns>A normalized object that represents the instance on which this method was called. This instance can be a string, stream, or any serializable object.</returns>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorage">
      <summary>Represents the abstract base class from which all isolated storage implementations must derive.</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorage" /> class. </summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorage.ApplicationIdentity">
      <summary>Gets an application identity that scopes isolated storage.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the <see cref="F:System.IO.IsolatedStorage.IsolatedStorageScope.Application" /> identity.</returns>
      <exception cref="T:System.Security.SecurityException">The code lacks the required <see cref="T:System.Security.Permissions.SecurityPermission" /> to access this object. These permissions are granted by the runtime based on security policy. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorage" /> object is not isolated by the application <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" />. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorage.AssemblyIdentity">
      <summary>Gets an assembly identity used to scope isolated storage.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the <see cref="T:System.Reflection.Assembly" /> identity.</returns>
      <exception cref="T:System.Security.SecurityException">The code lacks the required <see cref="T:System.Security.Permissions.SecurityPermission" /> to access this object. </exception>
      <exception cref="T:System.InvalidOperationException">The assembly is not defined.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorage.AvailableFreeSpace">
      <summary>When overridden in a derived class, gets the available free space for isolated storage, in bytes.</summary>
      <returns>The available free space for isolated storage, in bytes.</returns>
      <exception cref="T:System.InvalidOperationException">An operation was performed that requires access to <see cref="P:System.IO.IsolatedStorage.IsolatedStorage.AvailableFreeSpace" />, but that property is not defined for this store. Stores that are obtained by using enumerations do not have a well-defined <see cref="P:System.IO.IsolatedStorage.IsolatedStorage.AvailableFreeSpace" /> property, because partial evidence is used to open the store.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorage.CurrentSize">
      <summary>Gets a value representing the current size of isolated storage.</summary>
      <returns>The number of storage units currently used within the isolated storage scope.</returns>
      <exception cref="T:System.InvalidOperationException">The current size of the isolated store is undefined. </exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorage.DomainIdentity">
      <summary>Gets a domain identity that scopes isolated storage.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the <see cref="F:System.IO.IsolatedStorage.IsolatedStorageScope.Domain" /> identity.</returns>
      <exception cref="T:System.Security.SecurityException">The code lacks the required <see cref="T:System.Security.Permissions.SecurityPermission" /> to access this object. These permissions are granted by the runtime based on security policy. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorage" /> object is not isolated by the domain <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" />. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorage.GetPermission(System.Security.PermissionSet)">
      <summary>When implemented by a derived class, returns a permission that represents access to isolated storage from within a permission set.</summary>
      <returns>An <see cref="T:System.Security.Permissions.IsolatedStoragePermission" /> object.</returns>
      <param name="ps">The <see cref="T:System.Security.PermissionSet" /> object that contains the set of permissions granted to code attempting to use isolated storage. </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorage.IncreaseQuotaTo(System.Int64)">
      <summary>When overridden in a derived class, prompts a user to approve a larger quota size, in bytes, for isolated storage.</summary>
      <returns>false in all cases.</returns>
      <param name="newQuotaSize">The requested new quota size, in bytes, for the user to approve.</param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorage.InitStore(System.IO.IsolatedStorage.IsolatedStorageScope,System.Type)">
      <summary>Initializes a new <see cref="T:System.IO.IsolatedStorage.IsolatedStorage" /> object.</summary>
      <param name="scope">A bitwise combination of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" /> values. </param>
      <param name="appEvidenceType">The type of <see cref="T:System.Security.Policy.Evidence" /> that you can choose from the list of <see cref="T:System.Security.Policy.Evidence" /> for the calling application. null lets the <see cref="T:System.IO.IsolatedStorage.IsolatedStorage" /> object choose the evidence. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The assembly specified has insufficient permissions to create isolated stores. </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorage.InitStore(System.IO.IsolatedStorage.IsolatedStorageScope,System.Type,System.Type)">
      <summary>Initializes a new <see cref="T:System.IO.IsolatedStorage.IsolatedStorage" /> object.</summary>
      <param name="scope">A bitwise combination of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" /> values. </param>
      <param name="domainEvidenceType">The type of <see cref="T:System.Security.Policy.Evidence" /> that you can choose from the list of <see cref="T:System.Security.Policy.Evidence" /> present in the domain of the calling application. null lets the <see cref="T:System.IO.IsolatedStorage.IsolatedStorage" /> object choose the evidence. </param>
      <param name="assemblyEvidenceType">The type of <see cref="T:System.Security.Policy.Evidence" /> that you can choose from the list of <see cref="T:System.Security.Policy.Evidence" /> present in the assembly of the calling application. null lets the <see cref="T:System.IO.IsolatedStorage.IsolatedStorage" /> object choose the evidence. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The assembly specified has insufficient permissions to create isolated stores. </exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorage.MaximumSize">
      <summary>Gets a value representing the maximum amount of space available for isolated storage. When overridden in a derived class, this value can take different units of measure.</summary>
      <returns>The maximum amount of isolated storage space in bytes. Derived classes can return different units of value.</returns>
      <exception cref="T:System.InvalidOperationException">The quota has not been defined. </exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorage.Quota">
      <summary>When overridden in a derived class, gets a value that represents the maximum amount of space available for isolated storage.</summary>
      <returns>The limit of isolated storage space, in bytes.</returns>
      <exception cref="T:System.InvalidOperationException">An operation was performed that requires access to <see cref="P:System.IO.IsolatedStorage.IsolatedStorage.Quota" />, but that property is not defined for this store. Stores that are obtained by using enumerations do not have a well-defined <see cref="P:System.IO.IsolatedStorage.IsolatedStorage.Quota" /> property, because partial evidence is used to open the store.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorage.Remove">
      <summary>When overridden in a derived class, removes the individual isolated store and all contained data.</summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorage.Scope">
      <summary>Gets an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" /> enumeration value specifying the scope used to isolate the store.</summary>
      <returns>A bitwise combination of <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" />  values specifying the scope used to isolate the store.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorage.SeparatorExternal">
      <summary>Gets a backslash character that can be used in a directory string. When overridden in a derived class, another character might be returned.</summary>
      <returns>The default implementation returns the '\' (backslash) character.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorage.SeparatorInternal">
      <summary>Gets a period character that can be used in a directory string. When overridden in a derived class, another character might be returned.</summary>
      <returns>The default implementation returns the '.' (period) character.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorage.UsedSize">
      <summary>When overridden in a derived class, gets a value that represents the amount of the space used for isolated storage.</summary>
      <returns>The used amount of isolated storage space, in bytes.</returns>
      <exception cref="T:System.InvalidOperationException">An operation was performed that requires access to <see cref="P:System.IO.IsolatedStorage.IsolatedStorage.UsedSize" />, but that property is not defined for this store. Stores that are obtained by using enumerations do not have a well-defined <see cref="P:System.IO.IsolatedStorage.IsolatedStorage.UsedSize" /> property, because partial evidence is used to open the store.</exception>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageException">
      <summary>The exception that is thrown when an operation in isolated storage fails.</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException" /> class with default properties.</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageFile">
      <summary>Represents an isolated storage area containing files and directories.</summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFile.AvailableFreeSpace">
      <summary>Gets a value that represents the amount of free space available for isolated storage.</summary>
      <returns>The available free space for isolated storage, in bytes.</returns>
      <exception cref="T:System.InvalidOperationException">The isolated store is closed.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.Close">
      <summary>Closes a store previously opened with <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetStore(System.IO.IsolatedStorage.IsolatedStorageScope,System.Type,System.Type)" />, <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForAssembly" />, or <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForDomain" />.</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.CopyFile(System.String,System.String)">
      <summary>Copies an existing file to a new file.  </summary>
      <param name="sourceFileName">The name of the file to copy.</param>
      <param name="destinationFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName " />or<paramref name=" destinationFileName " />is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName " />or<paramref name=" destinationFileName " />is null.</exception>
      <exception cref="T:System.InvalidOperationException">The isolated store has been closed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="sourceFileName " />was not found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="sourceFileName " />was not found.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.-or-Isolated storage is disabled.-or-<paramref name="destinationFileName" /> exists.-or-An I/O error has occurred.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.CopyFile(System.String,System.String,System.Boolean)">
      <summary>Copies an existing file to a new file, and optionally overwrites an existing file.</summary>
      <param name="sourceFileName">The name of the file to copy.</param>
      <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
      <param name="overwrite">true if the destination file can be overwritten; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName " />or<paramref name=" destinationFileName " />is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName " />or<paramref name=" destinationFileName " />is null.</exception>
      <exception cref="T:System.InvalidOperationException">The isolated store has been closed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="sourceFileName " />was not found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="sourceFileName " />was not found.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.-or-Isolated storage is disabled.-or-An I/O error has occurred.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.CreateDirectory(System.String)">
      <summary>Creates a directory in the isolated storage scope.</summary>
      <param name="dir">The relative path of the directory to create within the isolated storage scope. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The current code has insufficient permissions to create isolated storage directory. </exception>
      <exception cref="T:System.ArgumentNullException">The directory path is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.CreateFile(System.String)">
      <summary>Creates a file in the isolated store.</summary>
      <returns>A new isolated storage file.</returns>
      <param name="path">The relative path of the file to create.</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is malformed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory in <paramref name="path" /> does not exist.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFile.CurrentSize">
      <summary>Gets the current size of the isolated storage.</summary>
      <returns>The total number of bytes of storage currently in use within the isolated storage scope.</returns>
      <exception cref="T:System.InvalidOperationException">The property is unavailable. The current store has a roaming scope or is not open. </exception>
      <exception cref="T:System.ObjectDisposedException">The current object size is undefined.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.DeleteDirectory(System.String)">
      <summary>Deletes a directory in the isolated storage scope.</summary>
      <param name="dir">The relative path of the directory to delete within the isolated storage scope. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The directory could not be deleted. </exception>
      <exception cref="T:System.ArgumentNullException">The directory path was null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.DeleteFile(System.String)">
      <summary>Deletes a file in the isolated storage scope.</summary>
      <param name="file">The relative path of the file to delete within the isolated storage scope. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The target file is open or the path is incorrect. </exception>
      <exception cref="T:System.ArgumentNullException">The file path is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.DirectoryExists(System.String)">
      <summary>Determines whether the specified path refers to an existing directory in the isolated store.</summary>
      <returns>true if <paramref name="path" /> refers to an existing directory in the isolated store and is not null; otherwise, false.</returns>
      <param name="path">The path to test.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The isolated store is closed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />. </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.FileExists(System.String)">
      <summary>Determines whether the specified path refers to an existing file in the isolated store.</summary>
      <returns>true if <paramref name="path" /> refers to an existing file in the isolated store and is not null; otherwise, false.</returns>
      <param name="path">The path and file name to test.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The isolated store is closed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetCreationTime(System.String)">
      <summary>Returns the creation date and time of a specified file or directory.</summary>
      <returns>The creation date and time for the specified file or directory. This value is expressed in local time.</returns>
      <param name="path">The path to the file or directory for which to obtain creation date and time information.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path " />is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path " />is null.</exception>
      <exception cref="T:System.InvalidOperationException">The isolated store has been closed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.-or-Isolated storage is disabled.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames">
      <summary>Enumerates the directories at the root of an isolated store.</summary>
      <returns>An array of relative paths of directories at the root of the isolated store. A zero-length array specifies that there are no directories at the root.</returns>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The isolated store is closed.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. </exception>
      <exception cref="T:System.UnauthorizedAccessException">Caller does not have permission to enumerate directories.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">A directory or directories are not found.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames(System.String)">
      <summary>Enumerates the directories in an isolated storage scope that match a given search pattern.</summary>
      <returns>An array of the relative paths of directories in the isolated storage scope that match <paramref name="searchPattern" />. A zero-length array specifies that there are no directories that match.</returns>
      <param name="searchPattern">A search pattern. Both single-character ("?") and multi-character ("*") wildcards are supported. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The isolated store is closed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Caller does not have permission to enumerate directories resolved from <paramref name="searchPattern" />.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory or directories specified by <paramref name="searchPattern" /> are not found.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetEnumerator(System.IO.IsolatedStorage.IsolatedStorageScope)">
      <summary>Gets the enumerator for the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> stores within an isolated storage scope.</summary>
      <returns>Enumerator for the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> stores within the specified isolated storage scope.</returns>
      <param name="scope">Represents the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" /> for which to return isolated stores. User and User|Roaming are the only IsolatedStorageScope combinations supported. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames">
      <summary>Enumerates the file names at the root of an isolated store.</summary>
      <returns>An array of relative paths of files at the root of the isolated store.  A zero-length array specifies that there are no files at the root.</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. </exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">File paths from the isolated store root cannot be determined.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames(System.String)">
      <summary>Gets the file names that match a search pattern.</summary>
      <returns>An array of relative paths of files in the isolated storage scope that match <paramref name="searchPattern" />. A zero-length array specifies that there are no files that match.</returns>
      <param name="searchPattern">A search pattern. Both single-character ("?") and multi-character ("*") wildcards are supported. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The file path specified by <paramref name="searchPattern" /> cannot be found. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetLastAccessTime(System.String)">
      <summary>Returns the date and time a specified file or directory was last accessed.</summary>
      <returns>The date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns>
      <param name="path">The path to the file or directory for which to obtain last access date and time information.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path " />is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path " />is null.</exception>
      <exception cref="T:System.InvalidOperationException">The isolated store has been closed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.-or-Isolated storage is disabled.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetLastWriteTime(System.String)">
      <summary>Returns the date and time a specified file or directory was last written to.</summary>
      <returns>The date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
      <param name="path">The path to the file or directory for which to obtain last write date and time information.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path " />is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path " />is null.</exception>
      <exception cref="T:System.InvalidOperationException">The isolated store has been closed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.-or-Isolated storage is disabled.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetMachineStoreForApplication">
      <summary>Obtains machine-scoped isolated storage corresponding to the calling code's application identity.</summary>
      <returns>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> object corresponding to the isolated storage scope based on the calling code's application identity.</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The application identity of the caller could not be determined.-or-The granted permission set for the application domain could not be determined.-or-An isolated storage location can not be initialized.</exception>
      <exception cref="T:System.Security.SecurityException">Sufficient isolated storage permissions have not been granted. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetMachineStoreForAssembly">
      <summary>Obtains machine-scoped isolated storage corresponding to the calling code's assembly identity.</summary>
      <returns>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> object corresponding to the isolated storage scope based on the calling code's assembly identity.</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">An isolated storage location can not be initialized.</exception>
      <exception cref="T:System.Security.SecurityException">Sufficient isolated storage permissions have not been granted. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetMachineStoreForDomain">
      <summary>Obtains machine-scoped isolated storage corresponding to the application domain identity and the assembly identity.</summary>
      <returns>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> object corresponding to the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" />, based on a combination of the application domain identity and the assembly identity.</returns>
      <exception cref="T:System.Security.SecurityException">Sufficient isolated storage permissions have not been granted. </exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The store failed to open.-or- The assembly specified has insufficient permissions to create isolated stores.-or-An isolated storage location can not be initialized. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetStore(System.IO.IsolatedStorage.IsolatedStorageScope,System.Object)">
      <summary>Obtains isolated storage corresponding to the given application identity.</summary>
      <returns>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> object representing the parameters.</returns>
      <param name="scope">A bitwise combination of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" /> values. </param>
      <param name="applicationIdentity">An <see cref="T:System.Object" /> that contains evidence for the application identity. </param>
      <exception cref="T:System.Security.SecurityException">Sufficient isolated storage permissions have not been granted. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="applicationEvidence" /> identity has not been passed in. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="scope" /> is invalid. </exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">An isolated storage location can not be initialized. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetStore(System.IO.IsolatedStorage.IsolatedStorageScope,System.Object,System.Object)">
      <summary>Obtains the isolated storage corresponding to the given application domain and assembly evidence objects.</summary>
      <returns>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> representing the parameters.</returns>
      <param name="scope">A bitwise combination of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" /> values. </param>
      <param name="domainIdentity">An <see cref="T:System.Object" /> that contains evidence for the application domain identity. </param>
      <param name="assemblyIdentity">An <see cref="T:System.Object" /> that contains evidence for the code assembly identity. </param>
      <exception cref="T:System.Security.SecurityException">Sufficient isolated storage permissions have not been granted. </exception>
      <exception cref="T:System.ArgumentNullException">Neither the <paramref name="domainIdentity" /> nor <paramref name="assemblyIdentity" /> have been passed in. This verifies that the correct constructor is being used.-or- Either <paramref name="domainIdentity" /> or <paramref name="assemblyIdentity" /> are null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="scope" /> is invalid. </exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">An isolated storage location can not be initialized. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetStore(System.IO.IsolatedStorage.IsolatedStorageScope,System.Security.Policy.Evidence,System.Type,System.Security.Policy.Evidence,System.Type)">
      <summary>Obtains isolated storage corresponding to the given application domain and the assembly evidence objects and types.</summary>
      <returns>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> object representing the parameters.</returns>
      <param name="scope">A bitwise combination of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" /> values. </param>
      <param name="domainEvidence">An <see cref="T:System.Security.Policy.Evidence" /> object containing the application domain identity. </param>
      <param name="domainEvidenceType">The identity <see cref="T:System.Type" /> to choose from the application domain evidence. </param>
      <param name="assemblyEvidence">An <see cref="T:System.Security.Policy.Evidence" /> object containing the code assembly identity. </param>
      <param name="assemblyEvidenceType">The identity <see cref="T:System.Type" /> to choose from the application code assembly evidence. </param>
      <exception cref="T:System.Security.SecurityException">Sufficient isolated storage permissions have not been granted. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="domainEvidence" /> or <paramref name="assemblyEvidence" /> identity has not been passed in. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="scope" /> is invalid. </exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">An isolated storage location can not be initialized. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetStore(System.IO.IsolatedStorage.IsolatedStorageScope,System.Type)">
      <summary>Obtains isolated storage corresponding to the isolation scope and the application identity object.</summary>
      <returns>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> object representing the parameters.</returns>
      <param name="scope">A bitwise combination of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" /> values. </param>
      <param name="applicationEvidenceType">An <see cref="T:System.Security.Policy.Evidence" /> object containing the application identity. </param>
      <exception cref="T:System.Security.SecurityException">Sufficient isolated storage permissions have not been granted. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="domainEvidence" /> or <paramref name="assemblyEvidence" /> identity has not been passed in. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="scope" /> is invalid. </exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">An isolated storage location can not be initialized. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetStore(System.IO.IsolatedStorage.IsolatedStorageScope,System.Type,System.Type)">
      <summary>Obtains isolated storage corresponding to the isolated storage scope given the application domain and assembly evidence types.</summary>
      <returns>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> object representing the parameters.</returns>
      <param name="scope">A bitwise combination of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" /> values. </param>
      <param name="domainEvidenceType">The type of the <see cref="T:System.Security.Policy.Evidence" /> that you can chose from the list of <see cref="T:System.Security.Policy.Evidence" /> present in the domain of the calling application. null lets the <see cref="T:System.IO.IsolatedStorage.IsolatedStorage" /> object choose the evidence. </param>
      <param name="assemblyEvidenceType">The type of the <see cref="T:System.Security.Policy.Evidence" /> that you can chose from the list of <see cref="T:System.Security.Policy.Evidence" /> present in the domain of the calling application. null lets the <see cref="T:System.IO.IsolatedStorage.IsolatedStorage" /> object choose the evidence. </param>
      <exception cref="T:System.Security.SecurityException">Sufficient isolated storage permissions have not been granted. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="scope" /> is invalid. </exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The evidence type provided is missing in the assembly Evidence list. -or-An isolated storage location can not be initialized.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForApplication">
      <summary>Obtains user-scoped isolated storage corresponding to the calling code's application identity.</summary>
      <returns>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> object corresponding to the isolated storage scope based on the calling code's assembly identity.</returns>
      <exception cref="T:System.Security.SecurityException">Sufficient isolated storage permissions have not been granted. </exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">An isolated storage location can not be initialized.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForAssembly">
      <summary>Obtains user-scoped isolated storage corresponding to the calling code's assembly identity.</summary>
      <returns>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> object corresponding to the isolated storage scope based on the calling code's assembly identity.</returns>
      <exception cref="T:System.Security.SecurityException">Sufficient isolated storage permissions have not been granted. </exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">An isolated storage location can not be initialized.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForDomain">
      <summary>Obtains user-scoped isolated storage corresponding to the application domain identity and assembly identity.</summary>
      <returns>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> object corresponding to the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" />, based on a combination of the application domain identity and the assembly identity.</returns>
      <exception cref="T:System.Security.SecurityException">Sufficient isolated storage permissions have not been granted. </exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The store failed to open.-or- The assembly specified has insufficient permissions to create isolated stores.-or-An isolated storage location can not be initialized. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForSite">
      <summary>Obtains a user-scoped isolated store for use by applications in a virtual host domain.</summary>
      <returns>The isolated storage file that corresponds to the isolated storage scope based on the calling code's application identity.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo(System.Int64)">
      <summary>Enables an application to explicitly request a larger quota size, in bytes. </summary>
      <returns>true if the new quota is accepted; otherwise, false.</returns>
      <param name="newQuotaSize">The requested size, in bytes.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="newQuotaSize" /> is less than current quota size.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newQuotaSize" /> is less than zero, or less than or equal to the current quota size. </exception>
      <exception cref="T:System.InvalidOperationException">The isolated store has been closed.</exception>
      <exception cref="T:System.NotSupportedException">The current scope is not for an application user.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.-or-Isolated storage is disabled.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFile.IsEnabled">
      <summary>Gets a value that indicates whether isolated storage is enabled.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFile.MaximumSize">
      <summary>Gets a value representing the maximum amount of space available for isolated storage within the limits established by the quota.</summary>
      <returns>The limit of isolated storage space in bytes.</returns>
      <exception cref="T:System.InvalidOperationException">The property is unavailable. <see cref="P:System.IO.IsolatedStorage.IsolatedStorageFile.MaximumSize" /> cannot be determined without evidence from the assembly's creation. The evidence could not be determined when the object was created. </exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">An isolated storage error occurred.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.MoveDirectory(System.String,System.String)">
      <summary>Moves a specified directory and its contents to a new location.</summary>
      <param name="sourceDirectoryName">The name of the directory to move.</param>
      <param name="destinationDirectoryName">The path to the new location for <paramref name="sourceDirectoryName" />. This cannot be the path to an existing directory.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName " />or<paramref name=" destinationFileName " />is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName " />or<paramref name=" destinationFileName " />is null.</exception>
      <exception cref="T:System.InvalidOperationException">The isolated store has been closed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="sourceDirectoryName" /> does not exist.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.-or-Isolated storage is disabled.-or-<paramref name="destinationDirectoryName" /> already exists.-or-<paramref name="sourceDirectoryName" /> and <paramref name="destinationDirectoryName" /> refer to the same directory.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.MoveFile(System.String,System.String)">
      <summary>Moves a specified file to a new location, and optionally lets you specify a new file name.</summary>
      <param name="sourceFileName">The name of the file to move.</param>
      <param name="destinationFileName">The path to the new location for the file. If a file name is included, the moved file will have that name.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName " />or<paramref name=" destinationFileName " />is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName " />or<paramref name=" destinationFileName " />is null.</exception>
      <exception cref="T:System.InvalidOperationException">The isolated store has been closed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="sourceFileName" /> was not found.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.-or-Isolated storage is disabled.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.OpenFile(System.String,System.IO.FileMode)">
      <summary>Opens a file in the specified mode.</summary>
      <returns>A file that is opened in the specified mode, with read/write access, and is unshared.</returns>
      <param name="path">The relative path of the file within the isolated store.</param>
      <param name="mode">One of the enumeration values that specifies how to open the file. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is malformed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory in <paramref name="path" /> does not exist.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No file was found and the <paramref name="mode" /> is set to <see cref="F:System.IO.FileMode.Open" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>Opens a file in the specified mode with the specified read/write access.</summary>
      <returns>A file that is opened in the specified mode and access, and is unshared.</returns>
      <param name="path">The relative path of the file within the isolated store.</param>
      <param name="mode">One of the enumeration values that specifies how to open the file.</param>
      <param name="access">One of the enumeration values that specifies whether the file will be opened with read, write, or read/write access.</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is malformed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory in <paramref name="path" /> does not exist.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No file was found and the <paramref name="mode" /> is set to <see cref="F:System.IO.FileMode.Open" />. </exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Opens a file in the specified mode, with the specified read/write access and sharing permission.</summary>
      <returns>A file that is opened in the specified mode and access, and with the specified sharing options.</returns>
      <param name="path">The relative path of the file within the isolated store.</param>
      <param name="mode">One of the enumeration values that specifies how to open or create the file.</param>
      <param name="access">One of the enumeration values that specifies whether the file will be opened with read, write, or read/write access</param>
      <param name="share">A bitwise combination of enumeration values that specify the type of access other <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />   objects have to this file.</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is malformed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory in <paramref name="path" /> does not exist.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No file was found and the <paramref name="mode" /> is set to <see cref="M:System.IO.FileInfo.Open(System.IO.FileMode)" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFile.Quota">
      <summary>Gets a value that represents the maximum amount of space available for isolated storage.</summary>
      <returns>The limit of isolated storage space, in bytes.</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed. -or-Isolated storage is disabled.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.Remove">
      <summary>Removes the isolated storage scope and all its contents.</summary>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store cannot be deleted. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.Remove(System.IO.IsolatedStorage.IsolatedStorageScope)">
      <summary>Removes the specified isolated storage scope for all identities.</summary>
      <param name="scope">A bitwise combination of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" /> values. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store cannot be removed. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFile.UsedSize">
      <summary>Gets a value that represents the amount of the space used for isolated storage.</summary>
      <returns>The used isolated storage space, in bytes.</returns>
      <exception cref="T:System.InvalidOperationException">The isolated store has been closed.</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The isolated store has been removed.</exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageFileStream">
      <summary>Exposes a file within isolated storage.</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode)">
      <summary>Initializes a new instance of an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object giving access to the file designated by <paramref name="path" /> in the specified <paramref name="mode" />.</summary>
      <param name="path">The relative path of the file within isolated storage. </param>
      <param name="mode">One of the <see cref="T:System.IO.FileMode" /> values. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is badly formed. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory in <paramref name="path" /> does not exist. </exception>
      <exception cref="T:System.IO.FileNotFoundException">No file was found and the <paramref name="mode" /> is set to <see cref="F:System.IO.FileMode.Open" /></exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> class giving access to the file designated by <paramref name="path" />, in the specified <paramref name="mode" />, with the kind of <paramref name="access" /> requested.</summary>
      <param name="path">The relative path of the file within isolated storage. </param>
      <param name="mode">One of the <see cref="T:System.IO.FileMode" /> values. </param>
      <param name="access">A bitwise combination of the <see cref="T:System.IO.FileAccess" /> values. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is badly formed. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">No file was found and the <paramref name="mode" /> is set to <see cref="F:System.IO.FileMode.Open" />. </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> class giving access to the file designated by <paramref name="path" />, in the specified <paramref name="mode" />, with the specified file <paramref name="access" />, using the file sharing mode specified by <paramref name="share" />.</summary>
      <param name="path">The relative path of the file within isolated storage. </param>
      <param name="mode">One of the <see cref="T:System.IO.FileMode" /> values. </param>
      <param name="access">A bitwise combination of the <see cref="T:System.IO.FileAccess" /> values. </param>
      <param name="share">A bitwise combination of the <see cref="T:System.IO.FileShare" /> values. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is badly formed. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">No file was found and the <paramref name="mode" /> is set to <see cref="F:System.IO.FileMode.Open" />. </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> class giving access to the file designated by <paramref name="path" />, in the specified <paramref name="mode" />, with the specified file <paramref name="access" />, using the file sharing mode specified by <paramref name="share" />, with the <paramref name="buffersize" /> specified.</summary>
      <param name="path">The relative path of the file within isolated storage. </param>
      <param name="mode">One of the <see cref="T:System.IO.FileMode" /> values. </param>
      <param name="access">A bitwise combination of the <see cref="T:System.IO.FileAccess" /> values. </param>
      <param name="share">A bitwise combination of the <see cref="T:System.IO.FileShare" /> values. </param>
      <param name="bufferSize">The <see cref="T:System.IO.FileStream" /> buffer size. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is badly formed. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">No file was found and the <paramref name="mode" /> is set to <see cref="F:System.IO.FileMode.Open" />. </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.IsolatedStorage.IsolatedStorageFile)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> class giving access to the file designated by <paramref name="path" />, in the specified <paramref name="mode" />, with the specified file <paramref name="access" />, using the file sharing mode specified by <paramref name="share" />, with the <paramref name="buffersize" /> specified, and in the context of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> specified by <paramref name="isf" />.</summary>
      <param name="path">The relative path of the file within isolated storage. </param>
      <param name="mode">One of the <see cref="T:System.IO.FileMode" /> values. </param>
      <param name="access">A bitwise combination of the <see cref="T:System.IO.FileAccess" /> values. </param>
      <param name="share">A bitwise combination of the <see cref="T:System.IO.FileShare" /> values </param>
      <param name="bufferSize">The <see cref="T:System.IO.FileStream" /> buffer size. </param>
      <param name="isf">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> in which to open the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is badly formed. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">No file was found and the <paramref name="mode" /> is set to <see cref="F:System.IO.FileMode.Open" />. </exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
        <paramref name="isf" /> does not have a quota. </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> class giving access to the file designated by <paramref name="path" />, in the specified <paramref name="mode" />, with the specified file <paramref name="access" />, using the file sharing mode specified by <paramref name="share" />, and in the context of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> specified by <paramref name="isf" />.</summary>
      <param name="path">The relative path of the file within isolated storage. </param>
      <param name="mode">One of the <see cref="T:System.IO.FileMode" /> values. </param>
      <param name="access">A bitwise combination of the <see cref="T:System.IO.FileAccess" /> values. </param>
      <param name="share">A bitwise combination of the <see cref="T:System.IO.FileShare" /> values. </param>
      <param name="isf">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> in which to open the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is badly formed. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">No file was found and the <paramref name="mode" /> is set to <see cref="F:System.IO.FileMode.Open" />. </exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
        <paramref name="isf" /> does not have a quota. </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> class giving access to the file designated by <paramref name="path" /> in the specified <paramref name="mode" />, with the specified file <paramref name="access" />, and in the context of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> specified by <paramref name="isf" />.</summary>
      <param name="path">The relative path of the file within isolated storage. </param>
      <param name="mode">One of the <see cref="T:System.IO.FileMode" /> values. </param>
      <param name="access">A bitwise combination of the <see cref="T:System.IO.FileAccess" /> values. </param>
      <param name="isf">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> in which to open the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is badly formed. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The isolated store is closed.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No file was found and the <paramref name="mode" /> is set to <see cref="F:System.IO.FileMode.Open" />. </exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
        <paramref name="isf" /> does not have a quota. </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> class giving access to the file designated by <paramref name="path" />, in the specified <paramref name="mode" />, and in the context of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> specified by <paramref name="isf" />.</summary>
      <param name="path">The relative path of the file within isolated storage. </param>
      <param name="mode">One of the <see cref="T:System.IO.FileMode" /> values. </param>
      <param name="isf">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> in which to open the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="path" /> is badly formed. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">No file was found and the <paramref name="mode" /> is set to <see cref="F:System.IO.FileMode.Open" />. </exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
        <paramref name="isf" /> does not have a quota. </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous read.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that represents the asynchronous read, which is possibly still pending. This <see cref="T:System.IAsyncResult" /> must be passed to this stream's <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)" /> method to determine how many bytes were read. This can be done either by the same code that called <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> or in a callback passed to <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</returns>
      <param name="buffer">The buffer to read data into. </param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin reading. </param>
      <param name="numBytes">The maximum number of bytes to read. </param>
      <param name="userCallback">The method to call when the asynchronous read operation is completed. This parameter is optional. </param>
      <param name="stateObject">The status of the asynchronous read. </param>
      <exception cref="T:System.IO.IOException">An asynchronous read was attempted past the end of the file. </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous write.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous write, which is possibly still pending. This <see cref="T:System.IAsyncResult" /> must be passed to this stream's <see cref="M:System.IO.Stream.EndWrite(System.IAsyncResult)" /> method to ensure that the write is complete, then frees resources appropriately. This can be done either by the same code that called <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> or in a callback passed to <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</returns>
      <param name="buffer">The buffer to write data to. </param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing. </param>
      <param name="numBytes">The maximum number of bytes to write. </param>
      <param name="userCallback">The method to call when the asynchronous write operation is completed. This parameter is optional. </param>
      <param name="stateObject">The status of the asynchronous write. </param>
      <exception cref="T:System.IO.IOException">An asynchronous write was attempted past the end of the file. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead">
      <summary>Gets a Boolean value indicating whether the file can be read.</summary>
      <returns>true if an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object can be read; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek">
      <summary>Gets a Boolean value indicating whether seek operations are supported.</summary>
      <returns>true if an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object supports seek operations; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite">
      <summary>Gets a Boolean value indicating whether you can write to the file.</summary>
      <returns>true if an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object can be written; otherwise, false.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)">
      <summary>Ends a pending asynchronous read request.</summary>
      <returns>The number of bytes read from the stream, between zero and the number of requested bytes. Streams will only return zero at the end of the stream. Otherwise, they will block until at least one byte is available.</returns>
      <param name="asyncResult">The pending asynchronous request. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="asyncResult" /> is null. </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite(System.IAsyncResult)">
      <summary>Ends an asynchronous write.</summary>
      <param name="asyncResult">The pending asynchronous I/O request to end. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="asyncResult" /> parameter is null. </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush">
      <summary>Clears buffers for this stream and causes any buffered data to be written to the file.</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush(System.Boolean)">
      <summary>Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.</summary>
      <param name="flushToDisk">true to flush all intermediate file buffers; otherwise, false.</param>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Handle">
      <summary>Gets the file handle for the file that the current <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object encapsulates. Accessing this property is not permitted on an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object, and throws an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException" />.</summary>
      <returns>The file handle for the file that the current <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object encapsulates.</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The <see cref="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Handle" /> property always generates this exception.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.IsAsync">
      <summary>Gets a Boolean value indicating whether the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object was opened asynchronously or synchronously.</summary>
      <returns>true if the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object supports asynchronous access; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Length">
      <summary>Gets the length of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object.</summary>
      <returns>The length of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object in bytes.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Position">
      <summary>Gets or sets the current position of the current <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object.</summary>
      <returns>The current position of this <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The position cannot be set to a negative number. </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Copies bytes from the current buffered <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object to an array.</summary>
      <returns>The total number of bytes read into the <paramref name="buffer" />. This can be less than the number of bytes requested if that many bytes are not currently available, or zero if the end of the stream is reached.</returns>
      <param name="buffer">The buffer to read. </param>
      <param name="offset">The offset in the buffer at which to begin writing. </param>
      <param name="count">The maximum number of bytes to read. </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte">
      <summary>Reads a single byte from the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object in isolated storage.</summary>
      <returns>The 8-bit unsigned integer value read from the isolated storage file.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.SafeFileHandle">
      <summary>Gets a <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" /> object that represents the operating system file handle for the file that the current <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object encapsulates.</summary>
      <returns>A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" /> object that represents the operating system file handle for the file that the current <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object encapsulates.</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The <see cref="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.SafeFileHandle" /> property always generates this exception. </exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the current position of this <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object to the specified value.</summary>
      <returns>The new position in the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object.</returns>
      <param name="offset">The new position of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object. </param>
      <param name="origin">One of the <see cref="T:System.IO.SeekOrigin" /> values. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="origin" /> must be one of the <see cref="T:System.IO.SeekOrigin" /> values. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)">
      <summary>Sets the length of this <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object to the specified <paramref name="value" />.</summary>
      <param name="value">The new length of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is a negative number.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a block of bytes to the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object using data read from a byte array.</summary>
      <param name="buffer">The buffer to write. </param>
      <param name="offset">The byte offset in buffer from which to begin. </param>
      <param name="count">The maximum number of bytes to write. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The write attempt exceeds the quota for the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)">
      <summary>Writes a single byte to the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object.</summary>
      <param name="value">The byte value to write to the isolated storage file. </param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The write attempt exceeds the quota for the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageScope">
      <summary>Enumerates the levels of isolated storage scope that are supported by <see cref="T:System.IO.IsolatedStorage.IsolatedStorage" />.</summary>
    </member>
    <member name="F:System.IO.IsolatedStorage.IsolatedStorageScope.None">
      <summary>No isolated storage usage.</summary>
    </member>
    <member name="F:System.IO.IsolatedStorage.IsolatedStorageScope.User">
      <summary>Isolated storage scoped by user identity.</summary>
    </member>
    <member name="F:System.IO.IsolatedStorage.IsolatedStorageScope.Domain">
      <summary>Isolated storage scoped to the application domain identity.</summary>
    </member>
    <member name="F:System.IO.IsolatedStorage.IsolatedStorageScope.Assembly">
      <summary>Isolated storage scoped to the identity of the assembly.</summary>
    </member>
    <member name="F:System.IO.IsolatedStorage.IsolatedStorageScope.Roaming">
      <summary>The isolated store can be placed in a location on the file system that might roam (if roaming user data is enabled on the underlying operating system).</summary>
    </member>
    <member name="F:System.IO.IsolatedStorage.IsolatedStorageScope.Machine">
      <summary>Isolated storage scoped to the machine.</summary>
    </member>
    <member name="F:System.IO.IsolatedStorage.IsolatedStorageScope.Application">
      <summary>Isolated storage scoped to the application.</summary>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageSecurityOptions">
      <summary>Specifies options that affect security in isolated storage.</summary>
    </member>
    <member name="F:System.IO.IsolatedStorage.IsolatedStorageSecurityOptions.IncreaseQuotaForApplication">
      <summary>The quota can be increased for isolated storage.</summary>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageSecurityState">
      <summary>Provides settings for maintaining the quota size for isolated storage. </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSecurityState.EnsureState">
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The state is not available.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSecurityState.Options">
      <summary>Gets the option for managing isolated storage security. </summary>
      <returns>The option to increase the isolated quota storage size.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSecurityState.Quota">
      <summary>Gets or sets the current size of the quota for isolated storage.</summary>
      <returns>The current quota size, in bytes.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSecurityState.UsedSize">
      <summary>Gets the current usage size in isolated storage.</summary>
      <returns>The current usage size, in bytes.</returns>
    </member>
    <member name="T:System.Reflection.AmbiguousMatchException">
      <summary>The exception that is thrown when binding to a member results in more than one member matching the binding criteria. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AmbiguousMatchException" /> class with an empty message string and the root cause exception set to null.</summary>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AmbiguousMatchException" /> class with its message string set to the given message and the root cause exception set to null.</summary>
      <param name="message">A string indicating the reason this exception was thrown. </param>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AmbiguousMatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Reflection.Assembly">
      <summary>Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application.</summary>
    </member>
    <member name="M:System.Reflection.Assembly.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.Assembly" /> class.</summary>
    </member>
    <member name="P:System.Reflection.Assembly.CodeBase">
      <summary>Gets the location of the assembly as specified originally, for example, in an <see cref="T:System.Reflection.AssemblyName" /> object.</summary>
      <returns>The location of the assembly as specified originally.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.CreateInstance(System.String)">
      <summary>Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.</summary>
      <returns>An instance of <see cref="T:System.Object" /> representing the type, with culture, arguments, binder, and activation attributes set to null, and <see cref="T:System.Reflection.BindingFlags" /> set to Public or Instance, or null if <paramref name="typeName" /> is not found.</returns>
      <param name="typeName">The <see cref="P:System.Type.FullName" /> of the type to locate. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> is an empty string ("") or a string beginning with a null character.-or-The current assembly was loaded into the reflection-only context.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.MissingMethodException">No matching constructor was found. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="typeName" /> requires a dependent assembly that could not be found. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="typeName" /> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="typeName" /> requires a dependent assembly that was not preloaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeName" /> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="typeName" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)">
      <summary>Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search.</summary>
      <returns>An instance of <see cref="T:System.Object" /> representing the type, with culture, arguments, binder, and activation attributes set to null, and <see cref="T:System.Reflection.BindingFlags" /> set to Public or Instance, or null if <paramref name="typeName" /> is not found.</returns>
      <param name="typeName">The <see cref="P:System.Type.FullName" /> of the type to locate. </param>
      <param name="ignoreCase">true to ignore the case of the type name; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> is an empty string ("") or a string beginning with a null character. -or-The current assembly was loaded into the reflection-only context.</exception>
      <exception cref="T:System.MissingMethodException">No matching constructor was found. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="typeName" /> requires a dependent assembly that could not be found. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="typeName" /> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="typeName" /> requires a dependent assembly that was not preloaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeName" /> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="typeName" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search and having the specified culture, arguments, and binding and activation attributes.</summary>
      <returns>An instance of Object representing the type and matching the specified criteria, or null if <paramref name="typeName" /> is not found.</returns>
      <param name="typeName">The <see cref="P:System.Type.FullName" /> of the type to locate. </param>
      <param name="ignoreCase">true to ignore the case of the type name; otherwise, false. </param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="args">An array of type Object containing the arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the default constructor is desired, <paramref name="args" /> must be an empty array or null. </param>
      <param name="culture">An instance of CultureInfo used to govern the coercion of types. If this is null, the CultureInfo for the current thread is used. (This is necessary to convert a String that represents 1000 to a Double value, for example, since 1000 is represented differently by different cultures.) </param>
      <param name="activationAttributes">An array of one or more attributes that can participate in activation. Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object. The <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> specifies the URL that is required to activate a remote object. For a detailed description of client-activated objects, see Client Activation. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> is an empty string ("") or a string beginning with a null character. -or-The current assembly was loaded into the reflection-only context.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.MissingMethodException">No matching constructor was found. </exception>
      <exception cref="T:System.NotSupportedException">A non-empty activation attributes array is passed to a type that does not inherit from <see cref="T:System.MarshalByRefObject" />. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="typeName" /> requires a dependent assembly that could not be found. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="typeName" /> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="typeName" /> requires a dependent assembly that was not preloaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeName" /> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="typeName" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)">
      <summary>Creates the name of a type qualified by the display name of its assembly.</summary>
      <returns>A String that is the full name of the type qualified by the display name of the assembly.</returns>
      <param name="assemblyName">The display name of an assembly. </param>
      <param name="typeName">The full name of a type. </param>
    </member>
    <member name="P:System.Reflection.Assembly.EntryPoint">
      <summary>Gets the entry point of this assembly.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object that represents the entry point of this assembly. If no entry point is found (for example, the assembly is a DLL), null is returned.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.Equals(System.Object)">
      <summary>Determines whether this assembly and the specified object are equal.</summary>
      <returns>true if <paramref name="obj" /> is equal to this instance; otherwise, false.</returns>
      <param name="o">The object to compare with this instance. </param>
    </member>
    <member name="P:System.Reflection.Assembly.EscapedCodeBase">
      <summary>Gets the URI, including escape characters, that represents the codebase.</summary>
      <returns>A URI with escape characters.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Reflection.Assembly.Evidence">
      <summary>Gets the evidence for this assembly.</summary>
      <returns>An Evidence object for this assembly.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Reflection.Assembly.FullName">
      <summary>Gets the display name of the assembly.</summary>
      <returns>The display name of the assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetAssembly(System.Type)">
      <summary>Gets the currently loaded assembly in which the specified class is defined.</summary>
      <returns>The assembly in which the specified class is defined.</returns>
      <param name="type">A <see cref="T:System.Type" /> object representing a class in the assembly that will be returned. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetCallingAssembly">
      <summary>Returns the <see cref="T:System.Reflection.Assembly" /> of the method that invoked the currently executing method.</summary>
      <returns>The Assembly object of the method that invoked the currently executing method.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)">
      <summary>Gets all the custom attributes for this assembly.</summary>
      <returns>An array of type Object containing the custom attributes for this assembly.</returns>
      <param name="inherit">This argument is ignored for objects of type <see cref="T:System.Reflection.Assembly" />. </param>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Gets the custom attributes for this assembly as specified by type.</summary>
      <returns>An array of type Object containing the custom attributes for this assembly as specified by <paramref name="attributeType" />.</returns>
      <param name="attributeType">The <see cref="T:System.Type" /> for which the custom attributes are to be returned. </param>
      <param name="inherit">This argument is ignored for objects of type <see cref="T:System.Reflection.Assembly" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a runtime type. </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributesData">
      <summary>Returns information about the attributes that have been applied to the current <see cref="T:System.Reflection.Assembly" />, expressed as <see cref="T:System.Reflection.CustomAttributeData" /> objects.</summary>
      <returns>A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the current assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetEntryAssembly">
      <summary>Gets the process executable in the default application domain. In other application domains, this is the first executable that was executed by <see cref="M:System.AppDomain.ExecuteAssembly(System.String)" />.</summary>
      <returns>The Assembly that is the process executable in the default application domain, or the first executable that was executed by <see cref="M:System.AppDomain.ExecuteAssembly(System.String)" />. Can return null when called from unmanaged code.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.GetExecutingAssembly">
      <summary>Gets the assembly that contains the code that is currently executing.</summary>
      <returns>A <see cref="T:System.Reflection.Assembly" /> representing the assembly that contains the code that is currently executing. </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetExportedTypes">
      <summary>Gets the public types defined in this assembly that are visible outside the assembly.</summary>
      <returns>An array of Type objects that represent the types defined in this assembly that are visible outside the assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetFile(System.String)">
      <summary>Gets a <see cref="T:System.IO.FileStream" /> for the specified file in the file table of the manifest of this assembly.</summary>
      <returns>A <see cref="T:System.IO.FileStream" /> for the specified file, or null if the file is not found.</returns>
      <param name="name">The name of the specified file. Do not include the path to the file.</param>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is an empty string (""). </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> was not found. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> is not a valid assembly. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.GetFiles">
      <summary>Gets the files in the file table of an assembly manifest.</summary>
      <returns>An array of <see cref="T:System.IO.FileStream" /> objects.</returns>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.IO.FileNotFoundException">A file was not found. </exception>
      <exception cref="T:System.BadImageFormatException">A file was not a valid assembly. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.GetFiles(System.Boolean)">
      <summary>Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.</summary>
      <returns>An array of <see cref="T:System.IO.FileStream" /> objects.</returns>
      <param name="getResourceModules">true to include resource modules; otherwise, false. </param>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.IO.FileNotFoundException">A file was not found. </exception>
      <exception cref="T:System.BadImageFormatException">A file was not a valid assembly. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetLoadedModules">
      <summary>Gets all the loaded modules that are part of this assembly.</summary>
      <returns>An array of modules.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetLoadedModules(System.Boolean)">
      <summary>Gets all the loaded modules that are part of this assembly, specifying whether to include resource modules.</summary>
      <returns>An array of modules.</returns>
      <param name="getResourceModules">true to include resource modules; otherwise, false. </param>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)">
      <summary>Returns information about how the given resource has been persisted.</summary>
      <returns>
        <see cref="T:System.Reflection.ManifestResourceInfo" /> populated with information about the resource's topology, or null if the resource is not found.</returns>
      <param name="resourceName">The case-sensitive name of the resource. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceName" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="resourceName" /> parameter is an empty string (""). </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceNames">
      <summary>Returns the names of all the resources in this assembly.</summary>
      <returns>An array of type String containing the names of all the resources.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)">
      <summary>Loads the specified manifest resource from this assembly.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> representing the manifest resource; null if no resources were specified during compilation, or if the resource is not visible to the caller.</returns>
      <param name="name">The case-sensitive name of the manifest resource being requested. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is an empty string (""). </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> was not found. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> is not a valid assembly. </exception>
      <exception cref="T:System.NotImplementedException">Resource length is greater than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)">
      <summary>Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> representing the manifest resource; null if no resources were specified during compilation or if the resource is not visible to the caller.</returns>
      <param name="type">The type whose namespace is used to scope the manifest resource name. </param>
      <param name="name">The case-sensitive name of the manifest resource being requested. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is an empty string (""). </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> was not found. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> is not a valid assembly. </exception>
      <exception cref="T:System.NotImplementedException">Resource length is greater than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModule(System.String)">
      <summary>Gets the specified module in this assembly.</summary>
      <returns>The module being requested, or null if the module is not found.</returns>
      <param name="name">The name of the module being requested. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is an empty string (""). </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> was not found. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> is not a valid assembly. </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModules">
      <summary>Gets all the modules that are part of this assembly.</summary>
      <returns>An array of modules.</returns>
      <exception cref="T:System.IO.FileNotFoundException">The module to be loaded does not specify a file name extension. </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModules(System.Boolean)">
      <summary>Gets all the modules that are part of this assembly, specifying whether to include resource modules.</summary>
      <returns>An array of modules.</returns>
      <param name="getResourceModules">true to include resource modules; otherwise, false. </param>
    </member>
    <member name="M:System.Reflection.Assembly.GetName">
      <summary>Gets an <see cref="T:System.Reflection.AssemblyName" /> for this assembly.</summary>
      <returns>An <see cref="T:System.Reflection.AssemblyName" /> for this assembly.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.GetName(System.Boolean)">
      <summary>Gets an <see cref="T:System.Reflection.AssemblyName" /> for this assembly, setting the codebase as specified by <paramref name="copiedName" />.</summary>
      <returns>An <see cref="T:System.Reflection.AssemblyName" /> for this assembly.</returns>
      <param name="copiedName">true to set the <see cref="P:System.Reflection.Assembly.CodeBase" /> to the location of the assembly after it was shadow copied; false to set <see cref="P:System.Reflection.Assembly.CodeBase" /> to the original location. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets serialization information with all of the data needed to reinstantiate this assembly.</summary>
      <param name="info">The object to be populated with serialization information. </param>
      <param name="context">The destination context of the serialization. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.GetReferencedAssemblies">
      <summary>Gets the <see cref="T:System.Reflection.AssemblyName" /> objects for all the assemblies referenced by this assembly.</summary>
      <returns>An array of type <see cref="T:System.Reflection.AssemblyName" /> containing all the assemblies referenced by this assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary>Gets the satellite assembly for the specified culture.</summary>
      <returns>The specified satellite assembly.</returns>
      <param name="culture">The specified culture. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The assembly cannot be found. </exception>
      <exception cref="T:System.IO.FileLoadException">The satellite assembly with a matching file name was found, but the CultureInfo did not match the one specified. </exception>
      <exception cref="T:System.BadImageFormatException">The satellite assembly is not a valid assembly. </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary>Gets the specified version of the satellite assembly for the specified culture.</summary>
      <returns>The specified satellite assembly.</returns>
      <param name="culture">The specified culture. </param>
      <param name="version">The version of the satellite assembly. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. </exception>
      <exception cref="T:System.IO.FileLoadException">The satellite assembly with a matching file name was found, but the CultureInfo or the version did not match the one specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The assembly cannot be found. </exception>
      <exception cref="T:System.BadImageFormatException">The satellite assembly is not a valid assembly. </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String)">
      <summary>Gets the <see cref="T:System.Type" /> object with the specified name in the assembly instance.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the specified class, or null if the class is not found.</returns>
      <param name="name">The full name of the type. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is invalid. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> requires a dependent assembly that could not be found. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="name" /> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="name" /> requires a dependent assembly that was not preloaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="name" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean)">
      <summary>Gets the <see cref="T:System.Type" /> object with the specified name in the assembly instance and optionally throws an exception if the type is not found.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the specified class.</returns>
      <param name="name">The full name of the type. </param>
      <param name="throwOnError">true to throw an exception if the type is not found; false to return null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is invalid.-or- The length of <paramref name="name" /> exceeds 1024 characters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true, and the type cannot be found.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> requires a dependent assembly that could not be found. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="name" /> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="name" /> requires a dependent assembly that was not preloaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="name" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Gets the <see cref="T:System.Type" /> object with the specified name in the assembly instance, with the options of ignoring the case, and of throwing an exception if the type is not found.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the specified class.</returns>
      <param name="name">The full name of the type. </param>
      <param name="throwOnError">true to throw an exception if the type is not found; false to return null. </param>
      <param name="ignoreCase">true to ignore the case of the type name; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is invalid.-or- The length of <paramref name="name" /> exceeds 1024 characters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true, and the type cannot be found.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> requires a dependent assembly that could not be found. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="name" /> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="name" /> requires a dependent assembly that was not preloaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="name" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetTypes">
      <summary>Gets the types defined in this assembly.</summary>
      <returns>An array of type <see cref="T:System.Type" /> containing objects for all the types defined in this assembly.</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">The assembly contains one or more types that cannot be loaded. The array returned by the <see cref="P:System.Reflection.ReflectionTypeLoadException.Types" /> property of this exception contains a <see cref="T:System.Type" /> object for each type that was loaded and null for each type that could not be loaded, while the <see cref="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions" /> property contains an exception for each type that could not be loaded.</exception>
    </member>
    <member name="P:System.Reflection.Assembly.GlobalAssemblyCache">
      <summary>Gets a value indicating whether the assembly was loaded from the global assembly cache.</summary>
      <returns>true if the assembly was loaded from the global assembly cache; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Assembly.HostContext">
      <summary>Gets the host context with which the assembly was loaded.</summary>
      <returns>An <see cref="T:System.Int64" /> value that indicates the host context with which the assembly was loaded, if any.</returns>
    </member>
    <member name="P:System.Reflection.Assembly.ImageRuntimeVersion">
      <summary>Gets a string representing the version of the common language runtime (CLR) saved in the file containing the manifest.</summary>
      <returns>A string representing the CLR version folder name. This is not a full path.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether or not a specified attribute has been applied to the assembly.</summary>
      <returns>true if the attribute has been applied to the assembly; otherwise, false.</returns>
      <param name="attributeType">The <see cref="T:System.Type" /> of the attribute to be checked for this assembly. </param>
      <param name="inherit">This argument is ignored for objects of this type. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> uses an invalid type.</exception>
    </member>
    <member name="P:System.Reflection.Assembly.IsDynamic">
      <summary>Gets a value that indicates whether the current assembly was generated dynamically in the current process by using reflection emit.</summary>
      <returns>true if the current assembly was generated dynamically in the current process; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Assembly.IsFullyTrusted">
      <summary>Gets a value that indicates whether the current assembly is loaded with full trust.</summary>
      <returns>true if the current assembly is loaded with full trust; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Byte[])">
      <summary>Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the application domain of the caller.</summary>
      <returns>The loaded assembly.</returns>
      <param name="rawAssembly">An array of type byte that is a COFF-based image containing an emitted assembly. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> is null. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[])">
      <summary>Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols for the assembly. The assembly is loaded into the application domain of the caller.</summary>
      <returns>The loaded assembly.</returns>
      <param name="rawAssembly">An array of type byte that is a COFF-based image containing an emitted assembly. </param>
      <param name="rawSymbolStore">An array of type byte containing the raw bytes representing the symbols for the assembly. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> is null. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
      <summary>Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and evidence for the assembly. The assembly is loaded into the application domain of the caller.</summary>
      <returns>The loaded assembly.</returns>
      <param name="rawAssembly">An array of type byte that is a COFF-based image containing an emitted assembly. </param>
      <param name="rawSymbolStore">An array of type byte containing the raw bytes representing the symbols for the assembly. </param>
      <param name="securityEvidence">Evidence for loading the assembly. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> is null. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="securityEvidence" /> is not null.  By default, legacy CAS policy is not enabled in the .NET Framework version 4; when it is not enabled, <paramref name="securityEvidence" /> must be null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.SecurityContextSource)">
      <summary>Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and specifying the source for the security context. The assembly is loaded into the application domain of the caller.</summary>
      <returns>The loaded assembly.</returns>
      <param name="rawAssembly">An array of type byte that is a COFF-based image containing an emitted assembly. </param>
      <param name="rawSymbolStore">An array of type byte containing the raw bytes representing the symbols for the assembly. </param>
      <param name="securityContextSource">The source of the security context. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> is null. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> is not a valid assembly. -or-<paramref name="rawAssembly" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="securityContextSource" /> is not one of the enumeration values.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)">
      <summary>Loads an assembly given its <see cref="T:System.Reflection.AssemblyName" />.</summary>
      <returns>The loaded assembly.</returns>
      <param name="assemblyRef">The <see cref="T:System.Reflection.AssemblyName" /> object that describes the assembly to be loaded. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyRef" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyRef" /> is not found. </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyRef" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyRef" /> was compiled with a later version.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
      <summary>Loads an assembly given its <see cref="T:System.Reflection.AssemblyName" />. The assembly is loaded into the domain of the caller using the supplied evidence.</summary>
      <returns>The loaded assembly.</returns>
      <param name="assemblyRef">The <see cref="T:System.Reflection.AssemblyName" /> object that describes the assembly to be loaded. </param>
      <param name="assemblySecurity">Evidence for loading the assembly. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyRef" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyRef" /> is not found. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyRef" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyRef" /> was compiled with a later version.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.String)">
      <summary>Loads an assembly given the long form of its name.</summary>
      <returns>The loaded assembly.</returns>
      <param name="assemblyString">The long form of the assembly name. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyString" /> is a zero-length string. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyString" /> is not found. </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.String,System.Security.Policy.Evidence)">
      <summary>Loads an assembly given its display name, loading the assembly into the domain of the caller using the supplied evidence.</summary>
      <returns>The loaded assembly.</returns>
      <param name="assemblyString">The display name of the assembly. </param>
      <param name="assemblySecurity">Evidence for loading the assembly. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyString" /> is not found. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.-or-An assembly or module was loaded twice with two different evidences. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFile(System.String)">
      <summary>Loads the contents of an assembly file on the specified path.</summary>
      <returns>The loaded assembly.</returns>
      <param name="path">The path of the file to load. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is null. </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The <paramref name="path" /> parameter is an empty string ("") or does not exist. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="path" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="path" /> was compiled with a later version.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFile(System.String,System.Security.Policy.Evidence)">
      <summary>Loads an assembly given its path, loading the assembly into the domain of the caller using the supplied evidence.</summary>
      <returns>The loaded assembly.</returns>
      <param name="path">The path of the assembly file. </param>
      <param name="securityEvidence">Evidence for loading the assembly. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The <paramref name="path" /> parameter is an empty string ("") or does not exist. </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="path" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="path" /> was compiled with a later version.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="securityEvidence" /> is not null. By default, legacy CAS policy is not enabled in the .NET Framework version 4; when it is not enabled, <paramref name="securityEvidence" /> must be null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFrom(System.String)">
      <summary>Loads an assembly given its file name or path.</summary>
      <returns>The loaded assembly.</returns>
      <param name="assemblyFile">The name or path of the file that contains the manifest of the assembly. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a filename extension. </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</exception>
      <exception cref="T:System.Security.SecurityException">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="assemblyFile" /> parameter is an empty string (""). </exception>
      <exception cref="T:System.IO.PathTooLongException">The assembly name is longer than MAX_PATH characters.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>Loads an assembly given its file name or path, hash value, and hash algorithm.</summary>
      <returns>The loaded assembly.</returns>
      <param name="assemblyFile">The name or path of the file that contains the manifest of the assembly. </param>
      <param name="hashValue">The value of the computed hash code. </param>
      <param name="hashAlgorithm">The hash algorithm used for hashing files and for generating the strong name. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a file name extension. </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly. -or-<paramref name="assemblyFile" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</exception>
      <exception cref="T:System.Security.SecurityException">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="assemblyFile" /> parameter is an empty string (""). </exception>
      <exception cref="T:System.IO.PathTooLongException">The assembly name is longer than MAX_PATH characters.</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence)">
      <summary>Loads an assembly given its file name or path and supplying security evidence.</summary>
      <returns>The loaded assembly.</returns>
      <param name="assemblyFile">The name or path of the file that contains the manifest of the assembly. </param>
      <param name="securityEvidence">Evidence for loading the assembly. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a filename extension. </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.-or-The <paramref name="securityEvidence" /> is not ambiguous and is determined to be invalid.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</exception>
      <exception cref="T:System.Security.SecurityException">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="assemblyFile" /> parameter is an empty string (""). </exception>
      <exception cref="T:System.IO.PathTooLongException">The assembly name is longer than MAX_PATH characters.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>Loads an assembly given its file name or path, security evidence, hash value, and hash algorithm.</summary>
      <returns>The loaded assembly.</returns>
      <param name="assemblyFile">The name or path of the file that contains the manifest of the assembly. </param>
      <param name="securityEvidence">Evidence for loading the assembly. </param>
      <param name="hashValue">The value of the computed hash code. </param>
      <param name="hashAlgorithm">The hash algorithm used for hashing files and for generating the strong name. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a filename extension. </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.-or-The <paramref name="securityEvidence" /> is not ambiguous and is determined to be invalid. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</exception>
      <exception cref="T:System.Security.SecurityException">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="assemblyFile" /> parameter is an empty string (""). </exception>
      <exception cref="T:System.IO.PathTooLongException">The assembly name is longer than MAX_PATH characters.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[])">
      <summary>Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file.</summary>
      <returns>The loaded Module.</returns>
      <param name="moduleName">Name of the module. Must correspond to a file name in this assembly's manifest. </param>
      <param name="rawModule">A byte array that is a COFF-based image containing an emitted module, or a resource. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="moduleName" /> or <paramref name="rawModule" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="moduleName" /> does not match a file entry in this assembly's manifest. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawModule" /> is not a valid module. </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])">
      <summary>Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file. The raw bytes representing the symbols for the module are also loaded.</summary>
      <returns>The loaded module.</returns>
      <param name="moduleName">Name of the module. Must correspond to a file name in this assembly's manifest. </param>
      <param name="rawModule">A byte array that is a COFF-based image containing an emitted module, or a resource. </param>
      <param name="rawSymbolStore">A byte array containing the raw bytes representing the symbols for the module. Must be null if this is a resource file. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="moduleName" /> or <paramref name="rawModule" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="moduleName" /> does not match a file entry in this assembly's manifest. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawModule" /> is not a valid module. </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.LoadWithPartialName(System.String)">
      <summary>Loads an assembly from the application directory or from the global assembly cache using a partial name.</summary>
      <returns>The loaded assembly. If <paramref name="partialName" /> is not found, this method returns null.</returns>
      <param name="partialName">The display name of the assembly. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="partialName" /> parameter is null. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="partialName" /> was compiled with a later version.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.LoadWithPartialName(System.String,System.Security.Policy.Evidence)">
      <summary>Loads an assembly from the application directory or from the global assembly cache using a partial name. The assembly is loaded into the domain of the caller using the supplied evidence.</summary>
      <returns>The loaded assembly. If <paramref name="partialName" /> is not found, this method returns null.</returns>
      <param name="partialName">The display name of the assembly. </param>
      <param name="securityEvidence">
        <see cref="T:System.Security.Policy.Evidence" /> for loading the assembly. </param>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different sets of evidence. </exception>
      <exception cref="T:System.NullReferenceException">The <paramref name="partialName" /> parameter is null. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="partialName" /> was compiled with a later version.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Reflection.Assembly.Location">
      <summary>Gets the path or UNC location of the loaded file that contains the manifest.</summary>
      <returns>The location of the loaded file that contains the manifest. If the loaded file was shadow-copied, the location is that of the file after being shadow-copied. If the assembly is loaded from a byte array, such as when using the <see cref="M:System.Reflection.Assembly.Load(System.Byte[])" /> method overload, the value returned is an empty string ("").</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Reflection.Assembly.ManifestModule">
      <summary>Gets the module that contains the manifest for the current assembly. </summary>
      <returns>A <see cref="T:System.Reflection.Module" /> object representing the module that contains the manifest for the assembly. </returns>
    </member>
    <member name="E:System.Reflection.Assembly.ModuleResolve">
      <summary>Occurs when the common language runtime class loader cannot resolve a reference to an internal module of an assembly through normal means.</summary>
    </member>
    <member name="M:System.Reflection.Assembly.op_Equality(System.Reflection.Assembly,System.Reflection.Assembly)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Assembly" /> objects are equal.</summary>
      <returns>true if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The assembly to compare to <paramref name="right" />. </param>
      <param name="right">The assembly to compare to <paramref name="left" />.</param>
    </member>
    <member name="M:System.Reflection.Assembly.op_Inequality(System.Reflection.Assembly,System.Reflection.Assembly)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Assembly" /> objects are not equal.</summary>
      <returns>true if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The assembly to compare to <paramref name="right" />.</param>
      <param name="right">The assembly to compare to <paramref name="left" />.</param>
    </member>
    <member name="P:System.Reflection.Assembly.PermissionSet">
      <summary>Gets the grant set of the current assembly.</summary>
      <returns>The grant set of the current assembly.</returns>
    </member>
    <member name="P:System.Reflection.Assembly.ReflectionOnly">
      <summary>Gets a <see cref="T:System.Boolean" /> value indicating whether this assembly was loaded into the reflection-only context.</summary>
      <returns>true if the assembly was loaded into the reflection-only context, rather than the execution context; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])">
      <summary>Loads the assembly from a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the reflection-only context of the caller's application domain.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> object that represents the loaded assembly.</returns>
      <param name="rawAssembly">An array of type byte that is a COFF-based image containing an emitted assembly.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> is null. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="rawAssembly" /> cannot be loaded. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.ReflectionOnlyLoad(System.String)">
      <summary>Loads an assembly into the reflection-only context, given its display name.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> object that represents the loaded assembly.</returns>
      <param name="assemblyString">The display name of the assembly, as returned by the <see cref="P:System.Reflection.AssemblyName.FullName" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyString" /> is an empty string (""). </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyString" /> is not found. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="assemblyString" /> is found, but cannot be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)">
      <summary>Loads an assembly into the reflection-only context, given its path.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> object that represents the loaded assembly.</returns>
      <param name="assemblyFile">The path of the file that contains the manifest of the assembly.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a file name extension. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="assemblyFile" /> is found, but could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</exception>
      <exception cref="T:System.Security.SecurityException">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />. </exception>
      <exception cref="T:System.IO.PathTooLongException">The assembly name is longer than MAX_PATH characters. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> is an empty string (""). </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Reflection.Assembly.SecurityRuleSet">
      <summary>Gets a value that indicates which set of security rules the common language runtime (CLR) enforces for this assembly.</summary>
      <returns>The security rule set that the CLR enforces for this assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType">
      <summary>Returns the type of the current instance.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.Assembly" /> type.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.ToString">
      <summary>Returns the full name of the assembly, also known as the display name.</summary>
      <returns>The full name of the assembly, or the class name if the full name of the assembly cannot be determined.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.UnsafeLoadFrom(System.String)">
      <summary>Loads an assembly into the load-from context, bypassing some security checks.</summary>
      <returns>The loaded assembly.</returns>
      <param name="assemblyFile">The name or path of the file that contains the manifest of the assembly.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a filename extension. </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly. -or-<paramref name="assemblyFile" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</exception>
      <exception cref="T:System.Security.SecurityException">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="assemblyFile" /> parameter is an empty string (""). </exception>
      <exception cref="T:System.IO.PathTooLongException">The assembly name is longer than MAX_PATH characters.</exception>
    </member>
    <member name="T:System.Reflection.AssemblyAlgorithmIdAttribute">
      <summary>Specifies an algorithm to hash all files in an assembly. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyAlgorithmIdAttribute.#ctor(System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyAlgorithmIdAttribute" /> class with the specified hash algorithm, using one of the members of <see cref="T:System.Configuration.Assemblies.AssemblyHashAlgorithm" /> to represent the hash algorithm.</summary>
      <param name="algorithmId">A member of AssemblyHashAlgorithm that represents the hash algorithm. </param>
    </member>
    <member name="M:System.Reflection.AssemblyAlgorithmIdAttribute.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyAlgorithmIdAttribute" /> class with the specified hash algorithm, using an unsigned integer to represent the hash algorithm.</summary>
      <param name="algorithmId">An unsigned integer representing the hash algorithm. </param>
    </member>
    <member name="P:System.Reflection.AssemblyAlgorithmIdAttribute.AlgorithmId">
      <summary>Gets the hash algorithm of an assembly manifest's contents.</summary>
      <returns>An unsigned integer representing the assembly hash algorithm.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCompanyAttribute">
      <summary>Defines a company name custom attribute for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> class.</summary>
      <param name="company">The company name information. </param>
    </member>
    <member name="P:System.Reflection.AssemblyCompanyAttribute.Company">
      <summary>Gets company name information.</summary>
      <returns>A string containing the company name.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyConfigurationAttribute">
      <summary>Specifies the build configuration, such as retail or debug, for an assembly.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyConfigurationAttribute" /> class.</summary>
      <param name="configuration">The assembly configuration. </param>
    </member>
    <member name="P:System.Reflection.AssemblyConfigurationAttribute.Configuration">
      <summary>Gets assembly configuration information.</summary>
      <returns>A string containing the assembly configuration information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCopyrightAttribute">
      <summary>Defines a copyright custom attribute for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyCopyrightAttribute" /> class.</summary>
      <param name="copyright">The copyright information. </param>
    </member>
    <member name="P:System.Reflection.AssemblyCopyrightAttribute.Copyright">
      <summary>Gets copyright information.</summary>
      <returns>A string containing the copyright information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCultureAttribute">
      <summary>Specifies which culture the assembly supports.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCultureAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyCultureAttribute" /> class with the culture supported by the assembly being attributed.</summary>
      <param name="culture">The culture supported by the attributed assembly. </param>
    </member>
    <member name="P:System.Reflection.AssemblyCultureAttribute.Culture">
      <summary>Gets the supported culture of the attributed assembly.</summary>
      <returns>A string containing the name of the supported culture.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDefaultAliasAttribute">
      <summary>Defines a friendly default alias for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDefaultAliasAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyDefaultAliasAttribute" /> class.</summary>
      <param name="defaultAlias">The assembly default alias information. </param>
    </member>
    <member name="P:System.Reflection.AssemblyDefaultAliasAttribute.DefaultAlias">
      <summary>Gets default alias information.</summary>
      <returns>A string containing the default alias information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDelaySignAttribute">
      <summary>Specifies that the assembly is not fully signed when created.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDelaySignAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyDelaySignAttribute" /> class.</summary>
      <param name="delaySign">true if the feature this attribute represents is activated; otherwise, false. </param>
    </member>
    <member name="P:System.Reflection.AssemblyDelaySignAttribute.DelaySign">
      <summary>Gets a value indicating the state of the attribute.</summary>
      <returns>true if this assembly has been built as delay-signed; otherwise, false.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDescriptionAttribute">
      <summary>Provides a text description for an assembly.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyDescriptionAttribute" /> class.</summary>
      <param name="description">The assembly description. </param>
    </member>
    <member name="P:System.Reflection.AssemblyDescriptionAttribute.Description">
      <summary>Gets assembly description information.</summary>
      <returns>A string containing the assembly description.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFileVersionAttribute">
      <summary>Instructs a compiler to use a specific version number for the Win32 file version resource. The Win32 file version is not required to be the same as the assembly's version number.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFileVersionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFileVersionAttribute" /> class, specifying the file version.</summary>
      <param name="version">The file version. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> is null. </exception>
    </member>
    <member name="P:System.Reflection.AssemblyFileVersionAttribute.Version">
      <summary>Gets the Win32 file version resource name.</summary>
      <returns>A string containing the file version resource name.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFlagsAttribute">
      <summary>Specifies a bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags for an assembly, describing just-in-time (JIT) compiler options, whether the assembly is retargetable, and whether it has a full or tokenized public key. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> class with the specified combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags, cast as an integer value.</summary>
      <param name="assemblyFlags">A bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags, cast as an integer value, representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.</param>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> class with the specified combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags.</summary>
      <param name="assemblyFlags">A bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.</param>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> class with the specified combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags, cast as an unsigned integer value.</summary>
      <param name="flags">A bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags, cast as an unsigned integer value, representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.</param>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.AssemblyFlags">
      <summary>Gets an integer value representing the combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags specified when this attribute instance was created.</summary>
      <returns>An integer value representing a bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.Flags">
      <summary>Gets an unsigned integer value representing the combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags specified when this attribute instance was created.</summary>
      <returns>An unsigned integer value representing a bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags" /> flags.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyInformationalVersionAttribute">
      <summary>Defines additional version information for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" /> class.</summary>
      <param name="informationalVersion">The assembly version information. </param>
    </member>
    <member name="P:System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion">
      <summary>Gets version information.</summary>
      <returns>A string containing the version information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyFileAttribute">
      <summary>Specifies the name of a file containing the key pair used to generate a strong name.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the AssemblyKeyFileAttribute class with the name of the file containing the key pair to generate a strong name for the assembly being attributed.</summary>
      <param name="keyFile">The name of the file containing the key pair. </param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyFileAttribute.KeyFile">
      <summary>Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly.</summary>
      <returns>A string containing the name of the file that contains the key pair.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyNameAttribute">
      <summary>Specifies the name of a key container within the CSP containing the key pair used to generate a strong name.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyKeyNameAttribute" /> class with the name of the container holding the key pair used to generate a strong name for the assembly being attributed.</summary>
      <param name="keyName">The name of the container containing the key pair. </param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyNameAttribute.KeyName">
      <summary>Gets the name of the container having the key pair that is used to generate a strong name for the attributed assembly.</summary>
      <returns>A string containing the name of the container that has the relevant key pair.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyName">
      <summary>Describes an assembly's unique identity in full.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyName.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyName" /> class.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyName.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyName" /> class with the specified display name.</summary>
      <param name="assemblyName">The display name of the assembly, as returned by the <see cref="P:System.Reflection.AssemblyName.FullName" /> property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" /> is a zero length string.</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.Clone">
      <summary>Makes a copy of this AssemblyName object.</summary>
      <returns>An object that is a copy of this AssemblyName object.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.CodeBase">
      <summary>Gets or sets the location of the assembly as a URL.</summary>
      <returns>A string that is the URL location of the assembly. </returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.CultureInfo">
      <summary>Gets or sets the culture supported by the assembly.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> object representing the culture supported by the assembly.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.EscapedCodeBase">
      <summary>Gets the URI, including escape characters, that represents the codebase.</summary>
      <returns>A URI with escape characters.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Flags">
      <summary>Gets or sets the attributes of the assembly.</summary>
      <returns>An <see cref="T:System.Reflection.AssemblyNameFlags" /> object representing the attributes of the assembly.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.FullName">
      <summary>Gets the full name of the assembly, also known as the display name.</summary>
      <returns>A string that is the full name of the assembly, also known as the display name.</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
      <summary>Gets the AssemblyName for a given file.</summary>
      <returns>An AssemblyName object representing the given file.</returns>
      <param name="assemblyFile">The path for the assembly whose AssemblyName is to be returned. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> is invalid, such as an assembly with an invalid culture. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> is not found. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have path discovery permission. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly. </exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different sets of evidence. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets serialization information with all of the data needed to recreate an instance of this AssemblyName.</summary>
      <param name="info">The object to be populated with serialization information. </param>
      <param name="context">The destination context of the serialization. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetPublicKey">
      <summary>Gets the public key of the assembly.</summary>
      <returns>An array of type byte containing the public key of the assembly.</returns>
      <exception cref="T:System.Security.SecurityException">A public key was provided (for example, by using the <see cref="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])" /> method), but no public key token was provided. </exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetPublicKeyToken">
      <summary>Gets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</summary>
      <returns>An array of type byte containing the public key token.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.HashAlgorithm">
      <summary>Gets or sets the hash algorithm used by the assembly manifest.</summary>
      <returns>The hash algorithm used by the assembly manifest.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.KeyPair">
      <summary>Gets or sets the public and private cryptographic key pair that is used to create a strong name signature for the assembly.</summary>
      <returns>A <see cref="T:System.Reflection.StrongNameKeyPair" /> object containing the public and private cryptographic key pair to be used to create a strong name for the assembly.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Name">
      <summary>Gets or sets the simple name of the assembly. This is usually, but not necessarily, the file name of the manifest file of the assembly, minus its extension.</summary>
      <returns>A String that is the simple name of the assembly.</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.OnDeserialization(System.Object)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and is called back by the deserialization event when deserialization is complete.</summary>
      <param name="sender">The source of the deserialization event. </param>
    </member>
    <member name="P:System.Reflection.AssemblyName.ProcessorArchitecture">
      <summary>Gets or sets a value that identifies the processor and bits-per-word of the platform targeted by an executable.</summary>
      <returns>One of the <see cref="T:System.Reflection.ProcessorArchitecture" /> values that identifies the processor and bits-per-word of the platform targeted by an executable.</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
      <summary>Returns a value indicating whether the loader resolves two assembly names to the same assembly.</summary>
      <returns>true if the loader resolves <paramref name="definition" /> to the same assembly as <paramref name="reference" />; otherwise, false.</returns>
      <param name="reference">The reference assembly name.</param>
      <param name="definition">The assembly name that is compared to the reference assembly.</param>
    </member>
    <member name="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
      <summary>Sets the public key identifying the assembly.</summary>
      <param name="publicKey">A byte array containing the public key of the assembly. </param>
    </member>
    <member name="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
      <summary>Sets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</summary>
      <param name="publicKeyToken">A byte array containing the public key token of the assembly. </param>
    </member>
    <member name="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array that receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.ToString">
      <summary>Returns the full name of the assembly, also known as the display name.</summary>
      <returns>A String that is the full name of the assembly, or the class name if the full name of the assembly cannot be determined.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Version">
      <summary>Gets or sets the major, minor, build, and revision numbers of the assembly.</summary>
      <returns>A <see cref="T:System.Version" /> object representing the major, minor, build, and revision numbers of the assembly.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.VersionCompatibility">
      <summary>Gets or sets the information related to the assembly's compatibility with other assemblies.</summary>
      <returns>An AssemblyVersionCompatibility object representing information about the assembly's compatibility with other assemblies.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameFlags">
      <summary>Provides information about an <see cref="T:System.Reflection.Assembly" /> reference.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.None">
      <summary>Specifies that no flags are in effect.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.PublicKey">
      <summary>Specifies that a public key is formed from the full public key rather than the public key token.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.EnableJITcompileOptimizer">
      <summary>Specifies that just-in-time (JIT) compiler optimization is disabled for the assembly. This is the exact opposite of the meaning that is suggested by the member name.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.EnableJITcompileTracking">
      <summary>Specifies that just-in-time (JIT) compiler tracking is enabled for the assembly.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.Retargetable">
      <summary>Specifies that the assembly can be retargeted at runtime to an assembly from a different publisher.</summary>
    </member>
    <member name="T:System.Reflection.AssemblyNameProxy">
      <summary>Provides a remotable version of the AssemblyName.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyNameProxy" /> class.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)">
      <summary>Gets the AssemblyName for a given file.</summary>
      <returns>An AssemblyName object representing the given file.</returns>
      <param name="assemblyFile">The assembly file for which to get the AssemblyName. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> is empty. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> is not found. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> is not a valid assembly. </exception>
    </member>
    <member name="T:System.Reflection.AssemblyProductAttribute">
      <summary>Defines a product name custom attribute for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyProductAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyProductAttribute" /> class.</summary>
      <param name="product">The product name information. </param>
    </member>
    <member name="P:System.Reflection.AssemblyProductAttribute.Product">
      <summary>Gets product name information.</summary>
      <returns>A string containing the product name.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTitleAttribute">
      <summary>Specifies a description for an assembly.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTitleAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyTitleAttribute" /> class.</summary>
      <param name="title">The assembly title. </param>
    </member>
    <member name="P:System.Reflection.AssemblyTitleAttribute.Title">
      <summary>Gets assembly title information.</summary>
      <returns>The assembly title. </returns>
    </member>
    <member name="T:System.Reflection.AssemblyTrademarkAttribute">
      <summary>Defines a trademark custom attribute for an assembly manifest.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyTrademarkAttribute" /> class.</summary>
      <param name="trademark">The trademark information. </param>
    </member>
    <member name="P:System.Reflection.AssemblyTrademarkAttribute.Trademark">
      <summary>Gets trademark information.</summary>
      <returns>A String containing trademark information.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyVersionAttribute">
      <summary>Specifies the version of the assembly being attributed.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyVersionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the AssemblyVersionAttribute class with the version number of the assembly being attributed.</summary>
      <param name="version">The version number of the attributed assembly. </param>
    </member>
    <member name="P:System.Reflection.AssemblyVersionAttribute.Version">
      <summary>Gets the version number of the attributed assembly.</summary>
      <returns>A string containing the assembly version number.</returns>
    </member>
    <member name="T:System.Reflection.Binder">
      <summary>Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type. </summary>
    </member>
    <member name="M:System.Reflection.Binder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.Binder" /> class.</summary>
    </member>
    <member name="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
      <summary>Selects a field from the given set of fields, based on the specified criteria.</summary>
      <returns>The matching field. </returns>
      <param name="bindingAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values. </param>
      <param name="match">The set of fields that are candidates for matching. For example, when a <see cref="T:System.Reflection.Binder" /> object is used by <see cref="Overload:System.Type.InvokeMember" />, this parameter specifies the set of fields that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <see cref="P:System.Type.DefaultBinder" /> changes the order of this array.</param>
      <param name="value">The field value used to locate a matching field. </param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> that is used to control the coercion of data types, in binder implementations that coerce types. If <paramref name="culture" /> is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.NoteFor example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a String that represents 1000 to a Double value, because 1000 is represented differently by different cultures. The default binder does not do such string coercions.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">For the default binder, <paramref name="bindingAttr" /> includes <see cref="F:System.Reflection.BindingFlags.SetField" />, and <paramref name="match" /> contains multiple fields that are equally good matches for <paramref name="value" />. For example, <paramref name="value" /> contains a MyClass object that implements the IMyClass interface, and <paramref name="match" /> contains a field of type MyClass and a field of type IMyClass. </exception>
      <exception cref="T:System.MissingFieldException">For the default binder, <paramref name="bindingAttr" /> includes <see cref="F:System.Reflection.BindingFlags.SetField" />, and <paramref name="match" /> contains no fields that can accept <paramref name="value" />.</exception>
      <exception cref="T:System.NullReferenceException">For the default binder, <paramref name="bindingAttr" /> includes <see cref="F:System.Reflection.BindingFlags.SetField" />, and <paramref name="match" /> is null or an empty array.-or-<paramref name="bindingAttr" /> includes <see cref="F:System.Reflection.BindingFlags.SetField" />, and <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
      <summary>Selects a method to invoke from the given set of methods, based on the supplied arguments.</summary>
      <returns>The matching method.</returns>
      <param name="bindingAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values. </param>
      <param name="match">The set of methods that are candidates for matching. For example, when a <see cref="T:System.Reflection.Binder" /> object is used by <see cref="Overload:System.Type.InvokeMember" />, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <see cref="P:System.Type.DefaultBinder" /> changes the order of this array.</param>
      <param name="args">The arguments that are passed in. The binder can change the order of the arguments in this array; for example, the default binder changes the order of arguments if the <paramref name="names" /> parameter is used to specify an order other than positional order. If a binder implementation coerces argument types, the types and values of the arguments can be changed as well. </param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified. The default binder implementation does not use this parameter.</param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> that is used to control the coercion of data types, in binder implementations that coerce types. If <paramref name="culture" /> is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. NoteFor example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a String that represents 1000 to a Double value, because 1000 is represented differently by different cultures. The default binder does not do such string coercions.</param>
      <param name="names">The parameter names, if parameter names are to be considered when matching, or null if arguments are to be treated as purely positional. For example, parameter names must be used if arguments are not supplied in positional order. </param>
      <param name="state">After the method returns, <paramref name="state" /> contains a binder-provided object that keeps track of argument reordering. The binder creates this object, and the binder is the sole consumer of this object. If <paramref name="state" /> is not null when BindToMethod returns, you must pass <paramref name="state" /> to the <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /> method if you want to restore <paramref name="args" /> to its original order, for example, so that you can retrieve the values of ref parameters (ByRef parameters in Visual Basic). </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">For the default binder, <paramref name="match" /> contains multiple methods that are equally good matches for <paramref name="args" />. For example, <paramref name="args" /> contains a MyClass object that implements the IMyClass interface, and <paramref name="match" /> contains a method that takes MyClass and a method that takes IMyClass. </exception>
      <exception cref="T:System.MissingMethodException">For the default binder, <paramref name="match" /> contains no methods that can accept the arguments supplied in <paramref name="args" />.</exception>
      <exception cref="T:System.ArgumentException">For the default binder, <paramref name="match" /> is null or an empty array.</exception>
    </member>
    <member name="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
      <summary>Changes the type of the given Object to the given Type.</summary>
      <returns>An object that contains the given value as the new type. </returns>
      <param name="value">The object to change into a new Type. </param>
      <param name="type">The new Type that <paramref name="value" /> will become. </param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> that is used to control the coercion of data types. If <paramref name="culture" /> is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.NoteFor example, this parameter is necessary to convert a String that represents 1000 to a Double value, because 1000 is represented differently by different cultures. </param>
    </member>
    <member name="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
      <summary>Upon returning from <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" />, restores the <paramref name="args" /> argument to what it was when it came from BindToMethod.</summary>
      <param name="args">The actual arguments that are passed in. Both the types and values of the arguments can be changed. </param>
      <param name="state">A binder-provided object that keeps track of argument reordering. </param>
    </member>
    <member name="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Selects a method from the given set of methods, based on the argument type.</summary>
      <returns>The matching method, if found; otherwise, null.</returns>
      <param name="bindingAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values. </param>
      <param name="match">The set of methods that are candidates for matching. For example, when a <see cref="T:System.Reflection.Binder" /> object is used by <see cref="Overload:System.Type.InvokeMember" />, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <see cref="P:System.Type.DefaultBinder" /> changes the order of this array.</param>
      <param name="types">The parameter types used to locate a matching method. </param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">For the default binder, <paramref name="match" /> contains multiple methods that are equally good matches for the parameter types described by <paramref name="types" />. For example, the array in <paramref name="types" /> contains a <see cref="T:System.Type" /> object for MyClass and the array in <paramref name="match" /> contains a method that takes a base class of MyClass and a method that takes an interface that MyClass implements. </exception>
      <exception cref="T:System.ArgumentException">For the default binder, <paramref name="match" /> is null or an empty array.-or-An element of <paramref name="types" /> derives from <see cref="T:System.Type" />, but is not of type RuntimeType.</exception>
    </member>
    <member name="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Selects a property from the given set of properties, based on the specified criteria.</summary>
      <returns>The matching property.</returns>
      <param name="bindingAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values. </param>
      <param name="match">The set of properties that are candidates for matching. For example, when a <see cref="T:System.Reflection.Binder" /> object is used by <see cref="Overload:System.Type.InvokeMember" />, this parameter specifies the set of properties that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by <see cref="P:System.Type.DefaultBinder" /> changes the order of this array.</param>
      <param name="returnType">The return value the matching property must have. </param>
      <param name="indexes">The index types of the property being searched for. Used for index properties such as the indexer for a class. </param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">For the default binder, <paramref name="match" /> contains multiple properties that are equally good matches for <paramref name="returnType" /> and <paramref name="indexes" />. </exception>
      <exception cref="T:System.ArgumentException">For the default binder, <paramref name="match" /> is null or an empty array. </exception>
    </member>
    <member name="T:System.Reflection.BindingFlags">
      <summary>Specifies flags that control binding and the way in which the search for members and types is conducted by reflection.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Default">
      <summary>Specifies no binding flag.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreCase">
      <summary>Specifies that the case of the member name should not be considered when binding.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.DeclaredOnly">
      <summary>Specifies that only members declared at the level of the supplied type's hierarchy should be considered. Inherited members are not considered.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Instance">
      <summary>Specifies that instance members are to be included in the search.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Static">
      <summary>Specifies that static members are to be included in the search.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Public">
      <summary>Specifies that public members are to be included in the search.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.NonPublic">
      <summary>Specifies that non-public members are to be included in the search.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.FlattenHierarchy">
      <summary>Specifies that public and protected static members up the hierarchy should be returned. Private static members in inherited classes are not returned. Static members include fields, methods, events, and properties. Nested types are not returned.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.InvokeMethod">
      <summary>Specifies that a method is to be invoked. This must not be a constructor or a type initializer.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.CreateInstance">
      <summary>Specifies that Reflection should create an instance of the specified type. Calls the constructor that matches the given arguments. The supplied member name is ignored. If the type of lookup is not specified, (Instance | Public) will apply. It is not possible to call a type initializer.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.GetField">
      <summary>Specifies that the value of the specified field should be returned.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SetField">
      <summary>Specifies that the value of the specified field should be set.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.GetProperty">
      <summary>Specifies that the value of the specified property should be returned.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SetProperty">
      <summary>Specifies that the value of the specified property should be set. For COM properties, specifying this binding flag is equivalent to specifying PutDispProperty and PutRefDispProperty.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.PutDispProperty">
      <summary>Specifies that the PROPPUT member on a COM object should be invoked. PROPPUT specifies a property-setting function that uses a value. Use PutDispProperty if a property has both PROPPUT and PROPPUTREF and you need to distinguish which one is called.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.PutRefDispProperty">
      <summary>Specifies that the PROPPUTREF member on a COM object should be invoked. PROPPUTREF specifies a property-setting function that uses a reference instead of a value. Use PutRefDispProperty if a property has both PROPPUT and PROPPUTREF and you need to distinguish which one is called.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.ExactBinding">
      <summary>Specifies that types of the supplied arguments must exactly match the types of the corresponding formal parameters. Reflection throws an exception if the caller supplies a non-null Binder object, since that implies that the caller is supplying BindToXXX implementations that will pick the appropriate method.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SuppressChangeType">
      <summary>Not implemented.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.OptionalParamBinding">
      <summary>Returns the set of members whose parameter count matches the number of supplied arguments. This binding flag is used for methods with parameters that have default values and methods with variable arguments (varargs). This flag should only be used with <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreReturn">
      <summary>Used in COM interop to specify that the return value of the member can be ignored.</summary>
    </member>
    <member name="T:System.Reflection.CallingConventions">
      <summary>Defines the valid calling conventions for a method.</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Standard">
      <summary>Specifies the default calling convention as determined by the common language runtime. Use this calling convention for static methods. For instance or virtual methods use HasThis.</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.VarArgs">
      <summary>Specifies the calling convention for methods with variable arguments.</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Any">
      <summary>Specifies that either the Standard or the VarArgs calling convention may be used.</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.HasThis">
      <summary>Specifies an instance or virtual method (not a static method). At run-time, the called method is passed a pointer to the target object as its first argument (the this pointer). The signature stored in metadata does not include the type of this first argument, because the method is known and its owner class can be discovered from metadata.</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.ExplicitThis">
      <summary>Specifies that the signature is a function-pointer signature, representing a call to an instance or virtual method (not a static method). If ExplicitThis is set, HasThis must also be set. The first argument passed to the called method is still a this pointer, but the type of the first argument is now unknown. Therefore, a token that describes the type (or class) of the this pointer is explicitly stored into its metadata signature.</summary>
    </member>
    <member name="T:System.Reflection.ConstructorInfo">
      <summary>Discovers the attributes of a class constructor and provides access to constructor metadata. </summary>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.ConstructorInfo" /> class.</summary>
    </member>
    <member name="F:System.Reflection.ConstructorInfo.ConstructorName">
      <summary>Represents the name of the class constructor method as it is stored in metadata. This name is always ".ctor". This field is read-only.</summary>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> equals the type and value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance, or null.</param>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])">
      <summary>Invokes the constructor reflected by the instance that has the specified parameters, providing default values for the parameters not commonly used.</summary>
      <returns>An instance of the class associated with the constructor.</returns>
      <param name="parameters">An array of values that matches the number, order and type (under the constraints of the default binder) of the parameters for this constructor. If this constructor takes no parameters, then use either an array with zero elements or null, as in Object[] parameters = new Object[0]. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type. </param>
      <exception cref="T:System.MemberAccessException">The class is abstract.-or- The constructor is a class initializer. </exception>
      <exception cref="T:System.MethodAccessException">The constructor is private or protected, and the caller lacks <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="parameters" /> array does not contain values that match the types accepted by this constructor. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The invoked constructor throws an exception. </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">An incorrect number of parameters was passed. </exception>
      <exception cref="T:System.NotSupportedException">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, and <see cref="T:System.RuntimeArgumentHandle" /> types is not supported.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the necessary code access permission.</exception>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>When implemented in a derived class, invokes the constructor reflected by this ConstructorInfo with the specified arguments, under the constraints of the specified Binder.</summary>
      <returns>An instance of the class associated with the constructor.</returns>
      <param name="invokeAttr">One of the BindingFlags values that specifies the type of binding. </param>
      <param name="binder">A Binder that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If <paramref name="binder" /> is null, then Binder.DefaultBinding is used. </param>
      <param name="parameters">An array of type Object used to match the number, order and type of the parameters for this constructor, under the constraints of <paramref name="binder" />. If this constructor does not require parameters, pass an array with zero elements, as in Object[] parameters = new Object[0]. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type. </param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="parameters" /> array does not contain values that match the types accepted by this constructor, under the constraints of the <paramref name="binder" />. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The invoked constructor throws an exception. </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">An incorrect number of parameters was passed. </exception>
      <exception cref="T:System.NotSupportedException">Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, and <see cref="T:System.RuntimeArgumentHandle" /> types is not supported.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the necessary code access permissions.</exception>
      <exception cref="T:System.MemberAccessException">The class is abstract.-or- The constructor is a class initializer. </exception>
      <exception cref="T:System.MethodAccessException">The constructor is private or protected, and the caller lacks <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />. </exception>
    </member>
    <member name="P:System.Reflection.ConstructorInfo.MemberType">
      <summary>Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a constructor.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a constructor.</returns>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.op_Equality(System.Reflection.ConstructorInfo,System.Reflection.ConstructorInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.ConstructorInfo" /> objects are equal.</summary>
      <returns>true if <paramref name="left" /> is equal to <paramref name="right" />; otherwise false.</returns>
      <param name="left">The first <see cref="T:System.Reflection.ConstructorInfo" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Reflection.ConstructorInfo" /> to compare.</param>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.op_Inequality(System.Reflection.ConstructorInfo,System.Reflection.ConstructorInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.ConstructorInfo" /> objects are not equal.</summary>
      <returns>true if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise false.</returns>
      <param name="left">The first <see cref="T:System.Reflection.ConstructorInfo" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Reflection.ConstructorInfo" /> to compare.</param>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.System#Runtime#InteropServices#_ConstructorInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.System#Runtime#InteropServices#_ConstructorInfo#GetType">
      <summary>Gets a <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.ConstructorInfo" /> type.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.ConstructorInfo" /> type.</returns>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.System#Runtime#InteropServices#_ConstructorInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.System#Runtime#InteropServices#_ConstructorInfo#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.System#Runtime#InteropServices#_ConstructorInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.System#Runtime#InteropServices#_ConstructorInfo#Invoke_2(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> method. </summary>
      <returns>An instance of the type.</returns>
      <param name="obj">The instance that created this method.</param>
      <param name="invokeAttr">One of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies the type of binding.</param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If <paramref name="binder" /> is null, then <see cref="P:System.Type.DefaultBinder" /> is used.</param>
      <param name="parameters">An array of objects used to match the number, order, and type of the parameters for this constructor, under the constraints of <paramref name="binder" />. If this constructor does not require parameters, pass an array with zero elements. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</param>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.System#Runtime#InteropServices#_ConstructorInfo#Invoke_3(System.Object,System.Object[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> method. </summary>
      <returns>An instance of the type.</returns>
      <param name="obj">The instance that created this method.</param>
      <param name="parameters">An array of objects used to match the number, order, and type of the parameters for this constructor, under the constraints of <paramref name="binder" />. If this constructor does not require parameters, pass an array with zero elements. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type.</param>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.System#Runtime#InteropServices#_ConstructorInfo#Invoke_4(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> method. </summary>
      <returns>An instance of the type.</returns>
      <param name="invokeAttr">One of the <see cref="T:System.Reflection.BindingFlags" /> values that specifies the type of binding.</param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If <paramref name="binder" /> is null, then <see cref="P:System.Type.DefaultBinder" /> is used.</param>
      <param name="parameters">An array of objects used to match the number, order, and type of the parameters for this constructor, under the constraints of <paramref name="binder" />. If this constructor does not require parameters, pass an array with zero elements. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</param>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.System#Runtime#InteropServices#_ConstructorInfo#Invoke_5(System.Object[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])" /> method. </summary>
      <returns>An instance of the type.</returns>
      <param name="parameters">An array of objects used to match the number, order, and type of the parameters for this constructor, under the constraints of <paramref name="binder" />. If this constructor does not require parameters, pass an array with zero elements. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type.</param>
    </member>
    <member name="F:System.Reflection.ConstructorInfo.TypeConstructorName">
      <summary>Represents the name of the type constructor method as it is stored in metadata. This name is always ".cctor". This property is read-only.</summary>
    </member>
    <member name="T:System.Reflection.CustomAttributeData">
      <summary>Provides access to custom attribute data for assemblies, modules, types, members and parameters that are loaded into the reflection-only context.</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeData" /> class.</summary>
    </member>
    <member name="P:System.Reflection.CustomAttributeData.Constructor">
      <summary>Returns a <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that would have initialized the custom attribute.</summary>
      <returns>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that would have initialized the custom attribute represented by the current instance of the <see cref="T:System.Reflection.CustomAttributeData" /> class.</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeData.ConstructorArguments">
      <summary>Gets the list of positional arguments specified for the attribute instance represented by the <see cref="T:System.Reflection.CustomAttributeData" /> object.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structures representing the positional arguments specified for the custom attribute instance.</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is equal to the current instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance, or null.</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target assembly.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target assembly.</returns>
      <param name="target">The assembly whose custom attribute data is to be retrieved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target member.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target member.</returns>
      <param name="target">A <see cref="T:System.Reflection.MemberInfo" /> object representing the member whose attribute data is to be retrieved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)">
      <summary>Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target module.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target module.</returns>
      <param name="target">The module whose custom attribute data is to be retrieved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target parameter.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target parameter.</returns>
      <param name="target">A <see cref="T:System.Reflection.ParameterInfo" /> object representing the parameter whose attribute data is to be retrieved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetHashCode"></member>
    <member name="P:System.Reflection.CustomAttributeData.NamedArguments">
      <summary>Gets the list of named arguments specified for the attribute instance represented by the <see cref="T:System.Reflection.CustomAttributeData" /> object.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> structures representing the named arguments specified for the custom attribute instance.</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.ToString">
      <summary>Returns a string representation of the custom attribute.</summary>
      <returns>A string value that represents the custom attribute.</returns>
    </member>
    <member name="T:System.Reflection.CustomAttributeFormatException">
      <summary>The exception that is thrown when the binary format of a custom attribute is invalid.</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeFormatException" /> class with the default properties.</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeFormatException" /> class with the specified serialization and context information.</summary>
      <param name="info">The data for serializing or deserializing the custom attribute. </param>
      <param name="context">The source and destination for the custom attribute. </param>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeFormatException" /> class with the specified message.</summary>
      <param name="message">The message that indicates the reason this exception was thrown. </param>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeFormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Reflection.CustomAttributeNamedArgument">
      <summary>Represents a named argument of a custom attribute in the reflection-only context.</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> class, which represents the specified field or property of the custom attribute, and specifies the value of the field or property.</summary>
      <param name="memberInfo">A field or property of the custom attribute. The new <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> object represents this member and its value.</param>
      <param name="value">The value of the field or property of the custom attribute.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="memberInfo" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="memberInfo" /> is not a field or property of the custom attribute.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Reflection.CustomAttributeTypedArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> class, which represents the specified field or property of the custom attribute, and specifies a <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> object that describes the type and value of the field or property.</summary>
      <param name="memberInfo">A field or property of the custom attribute. The new <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> object represents this member and its value.</param>
      <param name="typedArgument">An object that describes the type and value of the field or property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="memberInfo" /> is null.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> equals the type and value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance, or null.</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeNamedArgument.MemberInfo">
      <summary>Gets the attribute member that would be used to set the named argument.</summary>
      <returns>A <see cref="T:System.Reflection.MemberInfo" /> representing the attribute member that would be used to set the named argument.</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.op_Equality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)">
      <summary>Tests whether two <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> structures are equivalent.</summary>
      <returns>true if the two <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> structures are equal; otherwise, false.</returns>
      <param name="left">The <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> structure to the left of the equality operator.</param>
      <param name="right">The <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> structure to the right of the equality operator.</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.op_Inequality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)">
      <summary>Tests whether two <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> structures are different.</summary>
      <returns>true if the two <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> structures are different; otherwise, false.</returns>
      <param name="left">The <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> structure to the left of the inequality operator.</param>
      <param name="right">The <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> structure to the right of the inequality operator.</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.ToString">
      <summary>Returns a string consisting of the argument name, the equal sign, and a string representation of the argument value.</summary>
      <returns>A string consisting of the argument name, the equal sign, and a string representation of the argument value.</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeNamedArgument.TypedValue">
      <summary>Gets a <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structure that can be used to obtain the type and value of the current named argument.</summary>
      <returns>A <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structure that can be used to obtain the type and value of the current named argument.</returns>
    </member>
    <member name="T:System.Reflection.CustomAttributeTypedArgument">
      <summary>Represents an argument of a custom attribute in the reflection-only context, or an element of an array argument.</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> class with the specified value.</summary>
      <param name="value">The value of the custom attribute argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Type,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> class with the specified type and value.</summary>
      <param name="argumentType">The type of the custom attribute argument.</param>
      <param name="value">The value of the custom attribute argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argumentType" /> is null.</exception>
    </member>
    <member name="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType">
      <summary>Gets the type of the argument or of the array argument element.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the type of the argument or of the array element.</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)">
      <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.</returns>
      <param name="obj">Another object to compare to. </param>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.GetHashCode"></member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)">
      <summary>Tests whether two <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structures are equivalent.</summary>
      <returns>true if the two <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structures are equal; otherwise, false.</returns>
      <param name="left">The <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structure to the left of the equality operator.</param>
      <param name="right">The <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structure to the right of the equality operator.</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)">
      <summary>Tests whether two <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structures are different.</summary>
      <returns>true if the two <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structures are different; otherwise, false.</returns>
      <param name="left">The <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structure to the left of the inequality operator.</param>
      <param name="right">The <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> structure to the right of the inequality operator.</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.ToString">
      <summary>Returns a string consisting of the argument name, the equal sign, and a string representation of the argument value.</summary>
      <returns>A string consisting of the argument name, the equal sign, and a string representation of the argument value.</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeTypedArgument.Value">
      <summary>Gets the value of the argument for a simple argument or for an element of an array argument; gets a collection of values for an array argument.</summary>
      <returns>An object that represents the value of the argument or element, or a generic <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> objects that represent the values of an array-type argument.</returns>
    </member>
    <member name="T:System.Reflection.DefaultMemberAttribute">
      <summary>Defines the member of a type that is the default member used by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. </summary>
    </member>
    <member name="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.DefaultMemberAttribute" /> class.</summary>
      <param name="memberName">A String containing the name of the member to invoke. This may be a constructor, method, property, or field. A suitable invocation attribute must be specified when the member is invoked. The default member of a class can be specified by passing an empty String as the name of the member.The default member of a type is marked with the DefaultMemberAttribute custom attribute or marked in COM in the usual way. </param>
    </member>
    <member name="P:System.Reflection.DefaultMemberAttribute.MemberName">
      <summary>Gets the name from the attribute.</summary>
      <returns>A string representing the member name.</returns>
    </member>
    <member name="T:System.Reflection.EventAttributes">
      <summary>Specifies the attributes of an event.</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.None">
      <summary>Specifies that the event has no attributes.</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.SpecialName">
      <summary>Specifies that the event is special in a way described by the name.</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.ReservedMask">
      <summary>Specifies a reserved flag for common language runtime use only.</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.RTSpecialName">
      <summary>Specifies that the common language runtime should check name encoding.</summary>
    </member>
    <member name="T:System.Reflection.EventInfo">
      <summary>Discovers the attributes of an event and provides access to event metadata.</summary>
    </member>
    <member name="M:System.Reflection.EventInfo.#ctor">
      <summary>Initializes a new instance of the EventInfo class.</summary>
    </member>
    <member name="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>Adds an event handler to an event source.</summary>
      <param name="target">The event source. </param>
      <param name="handler">Encapsulates a method or methods to be invoked when the event is raised by the target. </param>
      <exception cref="T:System.InvalidOperationException">The event does not have a public add accessor.</exception>
      <exception cref="T:System.ArgumentException">The handler that was passed in cannot be used. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access permission to the member. </exception>
      <exception cref="T:System.Reflection.TargetException">The <paramref name="target" /> parameter is null and the event is not static.-or- The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target. </exception>
    </member>
    <member name="P:System.Reflection.EventInfo.Attributes">
      <summary>Gets the attributes for this event.</summary>
      <returns>The read-only attributes for this event.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> equals the type and value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance, or null.</param>
    </member>
    <member name="P:System.Reflection.EventInfo.EventHandlerType">
      <summary>Gets the Type object of the underlying event-handler delegate associated with this event.</summary>
      <returns>A read-only Type object representing the delegate event handler.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetAddMethod">
      <summary>Returns the method used to add an event handler delegate to the event source.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the event source.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
      <summary>When overridden in a derived class, retrieves the MethodInfo object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method of the event, specifying whether to return non-public methods.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the event source.</returns>
      <param name="nonPublic">true if non-public methods can be returned; otherwise, false. </param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> is true, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods. </exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetOtherMethods">
      <summary>Returns the public methods that have been associated with an event in metadata using the .other directive.</summary>
      <returns>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public methods that have been associated with the event in metadata by using the .other directive. If there are no such public methods, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
      <summary>Returns the methods that have been associated with the event in metadata using the .other directive, specifying whether to include non-public methods.</summary>
      <returns>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing methods that have been associated with an event in metadata by using the .other directive. If there are no methods matching the specification, an empty array is returned.</returns>
      <param name="nonPublic">true to include non-public methods; otherwise, false.</param>
      <exception cref="T:System.NotImplementedException">This method is not implemented.</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRaiseMethod">
      <summary>Returns the method that is called when the event is raised.</summary>
      <returns>The method that is called when the event is raised.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
      <summary>When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.</summary>
      <returns>A MethodInfo object that was called when the event was raised.</returns>
      <param name="nonPublic">true if non-public methods can be returned; otherwise, false. </param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> is true, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods. </exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRemoveMethod">
      <summary>Returns the method used to remove an event handler delegate from the event source.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
      <summary>When overridden in a derived class, retrieves the MethodInfo object for removing a method of the event, specifying whether to return non-public methods.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</returns>
      <param name="nonPublic">true if non-public methods can be returned; otherwise, false. </param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> is true, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods. </exception>
    </member>
    <member name="P:System.Reflection.EventInfo.IsMulticast">
      <summary>Gets a value indicating whether the event is multicast.</summary>
      <returns>true if the delegate is an instance of a multicast delegate; otherwise, false.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:System.Reflection.EventInfo.IsSpecialName">
      <summary>Gets a value indicating whether the EventInfo has a name with a special meaning.</summary>
      <returns>true if this event has a special name; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.MemberType">
      <summary>Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.EventInfo" /> objects are equal.</summary>
      <returns>true if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.EventInfo" /> objects are not equal.</summary>
      <returns>true if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>Removes an event handler from an event source.</summary>
      <param name="target">The event source. </param>
      <param name="handler">The delegate to be disassociated from the events raised by target. </param>
      <exception cref="T:System.InvalidOperationException">The event does not have a public remove accessor. </exception>
      <exception cref="T:System.ArgumentException">The handler that was passed in cannot be used. </exception>
      <exception cref="T:System.Reflection.TargetException">The <paramref name="target" /> parameter is null and the event is not static.-or- The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access permission to the member. </exception>
    </member>
    <member name="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType">
      <summary>Returns a T:System.Type object representing the <see cref="T:System.Reflection.EventInfo" /> type.</summary>
      <returns>A T:System.Type object representing the <see cref="T:System.Reflection.EventInfo" /> type.</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="T:System.Reflection.ExceptionHandlingClause">
      <summary>Represents a clause in a structured exception-handling block.</summary>
    </member>
    <member name="M:System.Reflection.ExceptionHandlingClause.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.ExceptionHandlingClause" /> class.</summary>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.CatchType">
      <summary>Gets the type of exception handled by this clause.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents that type of exception handled by this clause, or null if the <see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /> property is <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" /> or <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Finally" />.</returns>
      <exception cref="T:System.InvalidOperationException">Invalid use of property for the object's current state.</exception>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.FilterOffset">
      <summary>Gets the offset within the method body, in bytes, of the user-supplied filter code.</summary>
      <returns>The offset within the method body, in bytes, of the user-supplied filter code. The value of this property has no meaning if the <see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /> property has any value other than <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" />.</returns>
      <exception cref="T:System.InvalidOperationException">Cannot get the offset because the exception handling clause is not a filter.</exception>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.Flags">
      <summary>Gets a value indicating whether this exception-handling clause is a finally clause, a type-filtered clause, or a user-filtered clause.</summary>
      <returns>An <see cref="T:System.Reflection.ExceptionHandlingClauseOptions" /> value that indicates what kind of action this clause performs.</returns>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.HandlerLength">
      <summary>Gets the length, in bytes, of the body of this exception-handling clause.</summary>
      <returns>An integer that represents the length, in bytes, of the MSIL that forms the body of this exception-handling clause.</returns>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.HandlerOffset">
      <summary>Gets the offset within the method body, in bytes, of this exception-handling clause.</summary>
      <returns>An integer that represents the offset within the method body, in bytes, of this exception-handling clause.</returns>
    </member>
    <member name="M:System.Reflection.ExceptionHandlingClause.ToString">
      <summary>A string representation of the exception-handling clause.</summary>
      <returns>A string that lists appropriate property values for the filter clause type.</returns>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.TryLength">
      <summary>The total length, in bytes, of the try block that includes this exception-handling clause.</summary>
      <returns>The total length, in bytes, of the try block that includes this exception-handling clause.</returns>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.TryOffset">
      <summary>The offset within the method, in bytes, of the try block that includes this exception-handling clause.</summary>
      <returns>An integer that represents the offset within the method, in bytes, of the try block that includes this exception-handling clause.</returns>
    </member>
    <member name="T:System.Reflection.ExceptionHandlingClauseOptions">
      <summary>Identifies kinds of exception-handling clauses.</summary>
    </member>
    <member name="F:System.Reflection.ExceptionHandlingClauseOptions.Clause">
      <summary>The clause accepts all exceptions that derive from a specified type.</summary>
    </member>
    <member name="F:System.Reflection.ExceptionHandlingClauseOptions.Filter">
      <summary>The clause contains user-specified instructions that determine whether the exception should be ignored (that is, whether normal execution should resume), be handled by the associated handler, or be passed on to the next clause.</summary>
    </member>
    <member name="F:System.Reflection.ExceptionHandlingClauseOptions.Finally">
      <summary>The clause is executed whenever the try block exits, whether through normal control flow or because of an unhandled exception.</summary>
    </member>
    <member name="F:System.Reflection.ExceptionHandlingClauseOptions.Fault">
      <summary>The clause is executed if an exception occurs, but not on completion of normal control flow.</summary>
    </member>
    <member name="T:System.Reflection.FieldAttributes">
      <summary>Specifies flags that describe the attributes of a field.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FieldAccessMask">
      <summary>Specifies the access level of a given field.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PrivateScope">
      <summary>Specifies that the field cannot be referenced.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Private">
      <summary>Specifies that the field is accessible only by the parent type.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamANDAssem">
      <summary>Specifies that the field is accessible only by subtypes in this assembly.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Assembly">
      <summary>Specifies that the field is accessible throughout the assembly.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Family">
      <summary>Specifies that the field is accessible only by type and subtypes.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamORAssem">
      <summary>Specifies that the field is accessible by subtypes anywhere, as well as throughout this assembly.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Public">
      <summary>Specifies that the field is accessible by any member for whom this scope is visible.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Static">
      <summary>Specifies that the field represents the defined type, or else it is per-instance.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.InitOnly">
      <summary>Specifies that the field is initialized only, and cannot be written after initialization.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Literal">
      <summary>Specifies that the field's value is a compile-time (static or early bound) constant. The field can be set only from a constructor; any other attempt to set it throws <see cref="T:System.FieldAccessException" />.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.NotSerialized">
      <summary>Specifies that the field does not have to be serialized when the type is remoted.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.SpecialName">
      <summary>Specifies a special method, with the name describing how the method is special.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PinvokeImpl">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.ReservedMask">
      <summary>Reserved.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.RTSpecialName">
      <summary>Specifies that the common language runtime (metadata internal APIs) should check the name encoding.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldMarshal">
      <summary>Specifies that the field has marshaling information.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasDefault">
      <summary>Specifies that the field has a default value.</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldRVA">
      <summary>Specifies that the field has a relative virtual address (RVA). The RVA is the location of the method body in the current image, as an address relative to the start of the image file in which it is located.</summary>
    </member>
    <member name="T:System.Reflection.FieldInfo">
      <summary>Discovers the attributes of a field and provides access to field metadata. </summary>
    </member>
    <member name="M:System.Reflection.FieldInfo.#ctor">
      <summary>Initializes a new instance of the FieldInfo class.</summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.Attributes">
      <summary>Gets the attributes associated with this field.</summary>
      <returns>The FieldAttributes for this field.</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> equals the type and value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance, or null.</param>
    </member>
    <member name="P:System.Reflection.FieldInfo.FieldHandle">
      <summary>Gets a RuntimeFieldHandle, which is a handle to the internal metadata representation of a field.</summary>
      <returns>A handle to the internal metadata representation of a field.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.FieldType">
      <summary>Gets the type of this field object.</summary>
      <returns>The type of this field object.</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
      <summary>Gets a <see cref="T:System.Reflection.FieldInfo" /> for the field represented by the specified handle.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object representing the field specified by <paramref name="handle" />.</returns>
      <param name="handle">A <see cref="T:System.RuntimeFieldHandle" /> structure that contains the handle to the internal metadata representation of a field. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> is invalid.</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary>Gets a <see cref="T:System.Reflection.FieldInfo" /> for the field represented by the specified handle, for the specified generic type.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object representing the field specified by <paramref name="handle" />, in the generic type specified by <paramref name="declaringType" />.</returns>
      <param name="handle">A <see cref="T:System.RuntimeFieldHandle" /> structure that contains the handle to the internal metadata representation of a field.</param>
      <param name="declaringType">A <see cref="T:System.RuntimeTypeHandle" /> structure that contains the handle to the generic type that defines the field.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> is invalid.-or-<paramref name="declaringType" /> is not compatible with <paramref name="handle" />. For example, <paramref name="declaringType" /> is the runtime type handle of the generic type definition, and <paramref name="handle" /> comes from a constructed type. See Remarks.</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
      <summary>Gets an array of types that identify the optional custom modifiers of the field.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that identify the optional custom modifiers of the current field, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetRawConstantValue">
      <summary>Returns a literal value associated with the field by a compiler. </summary>
      <returns>An <see cref="T:System.Object" /> that contains the literal value associated with the field. If the literal value is a class type with an element value of zero, the return value is null.</returns>
      <exception cref="T:System.InvalidOperationException">The Constant table in unmanaged metadata does not contain a constant value for the current field.</exception>
      <exception cref="T:System.FormatException">The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures. </exception>
      <exception cref="T:System.NotSupportedException">The constant value for the field is not set. </exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
      <summary>Gets an array of types that identify the required custom modifiers of the property.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that identify the required custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetValue(System.Object)">
      <summary>When overridden in a derived class, returns the value of a field supported by a given object.</summary>
      <returns>An object containing the value of the field reflected by this instance.</returns>
      <param name="obj">The object whose field value will be returned. </param>
      <exception cref="T:System.Reflection.TargetException">The field is non-static and <paramref name="obj" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">A field is marked literal, but the field does not have one of the accepted literal types. </exception>
      <exception cref="T:System.FieldAccessException">The caller does not have permission to access this field. </exception>
      <exception cref="T:System.ArgumentException">The method is neither declared nor inherited by the class of <paramref name="obj" />. </exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
      <summary>Returns the value of a field supported by a given object.</summary>
      <returns>An Object containing a field value.</returns>
      <param name="obj">A <see cref="T:System.TypedReference" /> structure that encapsulates a managed pointer to a location and a runtime representation of the type that might be stored at that location. </param>
      <exception cref="T:System.NotSupportedException">The caller requires the Common Language Specification (CLS) alternative, but called this method instead. </exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsAssembly">
      <summary>Gets a value indicating whether the potential visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.Assembly" />; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</summary>
      <returns>true if the visibility of this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.Assembly" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamily">
      <summary>Gets a value indicating whether the visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.Family" />; that is, the field is visible only within its class and derived classes.</summary>
      <returns>true if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.Family" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
      <summary>Gets a value indicating whether the visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" />; that is, the field can be accessed from derived classes, but only if they are in the same assembly.</summary>
      <returns>true if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
      <summary>Gets a value indicating whether the potential visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.FamORAssem" />; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.</summary>
      <returns>true if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.FamORAssem" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsInitOnly">
      <summary>Gets a value indicating whether the field can only be set in the body of the constructor.</summary>
      <returns>true if the field has the InitOnly attribute set; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsLiteral">
      <summary>Gets a value indicating whether the value is written at compile time and cannot be changed.</summary>
      <returns>true if the field has the Literal attribute set; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsNotSerialized">
      <summary>Gets a value indicating whether this field has the NotSerialized attribute.</summary>
      <returns>true if the field has the NotSerialized attribute set; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPinvokeImpl">
      <summary>Gets a value indicating whether the corresponding PinvokeImpl attribute is set in <see cref="T:System.Reflection.FieldAttributes" />.</summary>
      <returns>true if the PinvokeImpl attribute is set in <see cref="T:System.Reflection.FieldAttributes" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPrivate">
      <summary>Gets a value indicating whether the field is private.</summary>
      <returns>true if the field is private; otherwise; false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPublic">
      <summary>Gets a value indicating whether the field is public.</summary>
      <returns>true if this field is public; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSecurityCritical">
      <summary>Gets a value that indicates whether the current field is security-critical or security-safe-critical at the current trust level. </summary>
      <returns>true if the current field is security-critical or security-safe-critical at the current trust level; false if it is transparent. </returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
      <summary>Gets a value that indicates whether the current field is security-safe-critical at the current trust level. </summary>
      <returns>true if the current field is security-safe-critical at the current trust level; false if it is security-critical or transparent.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSecurityTransparent">
      <summary>Gets a value that indicates whether the current field is transparent at the current trust level.</summary>
      <returns>true if the field is security-transparent at the current trust level; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSpecialName">
      <summary>Gets a value indicating whether the corresponding SpecialName attribute is set in the <see cref="T:System.Reflection.FieldAttributes" /> enumerator.</summary>
      <returns>true if the SpecialName attribute is set in <see cref="T:System.Reflection.FieldAttributes" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsStatic">
      <summary>Gets a value indicating whether the field is static.</summary>
      <returns>true if this field is static; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.MemberType">
      <summary>Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a field.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a field.</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.FieldInfo" /> objects are equal.</summary>
      <returns>true if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.FieldInfo" /> objects are not equal.</summary>
      <returns>true if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
      <summary>Sets the value of the field supported by the given object.</summary>
      <param name="obj">The object whose field value will be set. </param>
      <param name="value">The value to assign to the field. </param>
      <exception cref="T:System.FieldAccessException">The caller does not have permission to access this field. </exception>
      <exception cref="T:System.Reflection.TargetException">The <paramref name="obj" /> parameter is null and the field is an instance field. </exception>
      <exception cref="T:System.ArgumentException">The field does not exist on the object.-or- The <paramref name="value" /> parameter cannot be converted and stored in the field. </exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>When overridden in a derived class, sets the value of the field supported by the given object.</summary>
      <param name="obj">The object whose field value will be set. </param>
      <param name="value">The value to assign to the field. </param>
      <param name="invokeAttr">A field of Binder that specifies the type of binding that is desired (for example, Binder.CreateInstance or Binder.ExactBinding). </param>
      <param name="binder">A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection. If <paramref name="binder" /> is null, then Binder.DefaultBinding is used. </param>
      <param name="culture">The software preferences of a particular culture. </param>
      <exception cref="T:System.FieldAccessException">The caller does not have permission to access this field. </exception>
      <exception cref="T:System.Reflection.TargetException">The <paramref name="obj" /> parameter is null and the field is an instance field. </exception>
      <exception cref="T:System.ArgumentException">The field does not exist on the object.-or- The <paramref name="value" /> parameter cannot be converted and stored in the field. </exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
      <summary>Sets the value of the field supported by the given object.</summary>
      <param name="obj">A <see cref="T:System.TypedReference" /> structure that encapsulates a managed pointer to a location and a runtime representation of the type that can be stored at that location. </param>
      <param name="value">The value to assign to the field. </param>
      <exception cref="T:System.NotSupportedException">The caller requires the Common Language Specification (CLS) alternative, but called this method instead. </exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType">
      <summary>Gets a <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.FieldInfo" /> type.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.FieldInfo" /> type.</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="T:System.Reflection.GenericParameterAttributes">
      <summary>Describes the constraints on a generic type parameter of a generic type or method.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.None">
      <summary>There are no special flags.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.VarianceMask">
      <summary>Selects the combination of all variance flags. This value is the result of using logical OR to combine the following flags: <see cref="F:System.Reflection.GenericParameterAttributes.Contravariant" /> and <see cref="F:System.Reflection.GenericParameterAttributes.Covariant" />.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.Covariant">
      <summary>The generic type parameter is covariant. A covariant type parameter can appear as the result type of a method, the type of a read-only field, a declared base type, or an implemented interface.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.Contravariant">
      <summary>The generic type parameter is contravariant. A contravariant type parameter can appear as a parameter type in method signatures. </summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.SpecialConstraintMask">
      <summary>Selects the combination of all special constraint flags. This value is the result of using logical OR to combine the following flags: <see cref="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint" />, <see cref="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint" />, and <see cref="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint" />.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint">
      <summary>A type can be substituted for the generic type parameter only if it is a reference type.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint">
      <summary>A type can be substituted for the generic type parameter only if it is a value type and is not nullable.</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint">
      <summary>A type can be substituted for the generic type parameter only if it has a parameterless constructor.</summary>
    </member>
    <member name="T:System.Reflection.ICustomAttributeProvider">
      <summary>Provides custom attributes for reflection objects that support them.</summary>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of all of the custom attributes defined on this member, excluding named attributes, or an empty array if there are no custom attributes.</summary>
      <returns>An array of Objects representing custom attributes, or an empty array.</returns>
      <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute. </param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined on this member. </exception>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes defined on this member, identified by type, or an empty array if there are no custom attributes of that type.</summary>
      <returns>An array of Objects representing custom attributes, or an empty array.</returns>
      <param name="attributeType">The type of the custom attributes. </param>
      <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute. </param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined on this member. </exception>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether one or more instance of <paramref name="attributeType" /> is defined on this member.</summary>
      <returns>true if the <paramref name="attributeType" /> is defined on this member; false otherwise.</returns>
      <param name="attributeType">The type of the custom attributes. </param>
      <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute. </param>
    </member>
    <member name="T:System.Reflection.ImageFileMachine">
      <summary>Identifies the platform targeted by an executable.</summary>
    </member>
    <member name="F:System.Reflection.ImageFileMachine.I386">
      <summary>Targets a 32-bit Intel processor.</summary>
    </member>
    <member name="F:System.Reflection.ImageFileMachine.IA64">
      <summary>Targets a 64-bit Intel processor.</summary>
    </member>
    <member name="F:System.Reflection.ImageFileMachine.AMD64">
      <summary>Targets a 64-bit AMD processor.</summary>
    </member>
    <member name="T:System.Reflection.InterfaceMapping">
      <summary>Retrieves the mapping of an interface into the actual methods on a class that implements that interface.</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.InterfaceMethods">
      <summary>Shows the methods that are defined on the interface.</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.InterfaceType">
      <summary>Shows the type that represents the interface.</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.TargetMethods">
      <summary>Shows the methods that implement the interface.</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.TargetType">
      <summary>Represents the type that was used to create the interface mapping.</summary>
    </member>
    <member name="T:System.Reflection.InvalidFilterCriteriaException">
      <summary>The exception that is thrown in <see cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" /> when the filter criteria is not valid for the type of filter you are using.</summary>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.InvalidFilterCriteriaException" /> class with the default properties.</summary>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.InvalidFilterCriteriaException" /> class with the specified serialization and context information.</summary>
      <param name="info">A SerializationInfo object that contains the information required to serialize this instance. </param>
      <param name="context">A StreamingContext object that contains the source and destination of the serialized stream associated with this instance. </param>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.InvalidFilterCriteriaException" /> class with the given HRESULT and message string.</summary>
      <param name="message">The message text for the exception. </param>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.InvalidFilterCriteriaException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Reflection.IReflect">
      <summary>Interoperates with the IDispatch interface.</summary>
    </member>
    <member name="M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the <see cref="T:System.Reflection.FieldInfo" /> object that corresponds to the specified field and binding flag.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object containing the field information for the named object that meets the search constraints specified in <paramref name="bindingAttr" />.</returns>
      <param name="name">The name of the field to find. </param>
      <param name="bindingAttr">The binding attributes used to control the search. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">The object implements multiple fields with the same name. </exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects that correspond to all fields of the current class.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects containing all the field information for this reflection object that meets the search constraints specified in <paramref name="bindingAttr" />.</returns>
      <param name="bindingAttr">The binding attributes used to control the search. </param>
    </member>
    <member name="M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.MemberInfo" /> objects corresponding to all public members or to all members that match a specified name.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects matching the <paramref name="name" /> parameter.</returns>
      <param name="name">The name of the member to find. </param>
      <param name="bindingAttr">The binding attributes used to control the search. </param>
    </member>
    <member name="M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond either to all public members or to all members of the current class.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects containing all the member information for this reflection object.</returns>
      <param name="bindingAttr">The binding attributes used to control the search. </param>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves a <see cref="T:System.Reflection.MethodInfo" /> object that corresponds to a specified method under specified search constraints.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object containing the method information, with the match being based on the method name and search constraints specified in <paramref name="bindingAttr" />.</returns>
      <param name="name">The name of the member to find. </param>
      <param name="bindingAttr">The binding attributes used to control the search. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">The object implements multiple methods with the same name. </exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Retrieves a <see cref="T:System.Reflection.MethodInfo" /> object corresponding to a specified method, using a <see cref="T:System.Type" /> array to choose from among overloaded methods.</summary>
      <returns>The requested method that matches all the specified parameters.</returns>
      <param name="name">The name of the member to find. </param>
      <param name="bindingAttr">The binding attributes used to control the search. </param>
      <param name="binder">An object that implements <see cref="T:System.Reflection.Binder" />, containing properties related to this method. </param>
      <param name="types">An array used to choose among overloaded methods. </param>
      <param name="modifiers">An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">The object implements multiple methods with the same name. </exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.MethodInfo" /> objects with all public methods or all methods of the current class.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects containing all the methods defined for this reflection object that meet the search constraints specified in <paramref name="bindingAttr" />.</returns>
      <param name="bindingAttr">The binding attributes used to control the search. </param>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.PropertyInfo" /> objects corresponding to all public properties or to all properties of the current class.</summary>
      <returns>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects for all the properties defined on the reflection object.</returns>
      <param name="bindingAttr">The binding attribute used to control the search. </param>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves a <see cref="T:System.Reflection.PropertyInfo" /> object corresponding to a specified property under specified search constraints.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object for the located property that meets the search constraints specified in <paramref name="bindingAttr" />, or null if the property was not located.</returns>
      <param name="name">The name of the property to find. </param>
      <param name="bindingAttr">The binding attributes used to control the search. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">The object implements multiple fields with the same name. </exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Retrieves a <see cref="T:System.Reflection.PropertyInfo" /> object that corresponds to a specified property with specified search constraints.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object for the located property, if a property with the specified name was located in this reflection object, or null if the property was not located.</returns>
      <param name="name">The name of the member to find. </param>
      <param name="bindingAttr">The binding attribute used to control the search. </param>
      <param name="binder">An object that implements <see cref="T:System.Reflection.Binder" />, containing properties related to this method. </param>
      <param name="returnType">The type of the property. </param>
      <param name="types">An array used to choose among overloaded methods with the same name. </param>
      <param name="modifiers">An array used to choose the parameter modifiers. </param>
    </member>
    <member name="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes a specified member.</summary>
      <returns>The specified member.</returns>
      <param name="name">The name of the member to find. </param>
      <param name="invokeAttr">One of the <see cref="T:System.Reflection.BindingFlags" /> invocation attributes. The <paramref name="invokeAttr" /> parameter may be a constructor, method, property, or field. A suitable invocation attribute must be specified. Invoke the default member of a class by passing the empty string ("") as the name of the member. </param>
      <param name="binder">One of the <see cref="T:System.Reflection.BindingFlags" /> bit flags. Implements <see cref="T:System.Reflection.Binder" />, containing properties related to this method. </param>
      <param name="target">The object on which to invoke the specified member. This parameter is ignored for static members. </param>
      <param name="args">An array of objects that contains the number, order, and type of the parameters of the member to be invoked. This is an empty array if there are no parameters. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects. This array has the same length as the <paramref name="args" /> parameter, representing the invoked member's argument attributes in the metadata. A parameter can have the following attributes: pdIn, pdOut, pdRetval, pdOptional, and pdHasDefault. These represent [In], [Out], [retval], [optional], and a default parameter, respectively. These attributes are used by various interoperability services. </param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. For example, <paramref name="culture" /> converts a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures. If this parameter is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <param name="namedParameters">A String array of parameters. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> is <see cref="F:System.Reflection.BindingFlags.CreateInstance" /> and another bit flag is also set. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> is not <see cref="F:System.Reflection.BindingFlags.CreateInstance" /> and <paramref name="name" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> is not an invocation attribute from <see cref="T:System.Reflection.BindingFlags" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> specifies both get and set for a property or field. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> specifies both a field set and an Invoke method. <paramref name="args" /> are provided for a field get. </exception>
      <exception cref="T:System.ArgumentException">More than one argument is specified for a field set. </exception>
      <exception cref="T:System.MissingFieldException">The field or property cannot be found. </exception>
      <exception cref="T:System.MissingMethodException">The method cannot be found. </exception>
      <exception cref="T:System.Security.SecurityException">A private member is invoked without the necessary <see cref="T:System.Security.Permissions.ReflectionPermission" />. </exception>
    </member>
    <member name="P:System.Reflection.IReflect.UnderlyingSystemType">
      <summary>Gets the underlying type that represents the <see cref="T:System.Reflection.IReflect" /> object.</summary>
      <returns>The underlying type that represents the <see cref="T:System.Reflection.IReflect" /> object.</returns>
    </member>
    <member name="T:System.Reflection.LocalVariableInfo">
      <summary>Discovers the attributes of a local variable and provides access to local variable metadata.</summary>
    </member>
    <member name="M:System.Reflection.LocalVariableInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.LocalVariableInfo" /> class.</summary>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.IsPinned">
      <summary>Gets a <see cref="T:System.Boolean" /> value that indicates whether the object referred to by the local variable is pinned in memory.</summary>
      <returns>true if the object referred to by the variable is pinned in memory; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.LocalIndex">
      <summary>Gets the index of the local variable within the method body.</summary>
      <returns>An integer value that represents the order of declaration of the local variable within the method body.</returns>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.LocalType">
      <summary>Gets the type of the local variable.</summary>
      <returns>The type of the local variable.</returns>
    </member>
    <member name="M:System.Reflection.LocalVariableInfo.ToString">
      <summary>Returns a user-readable string that describes the local variable.</summary>
      <returns>A string that displays information about the local variable, including the type name, index, and pinned status.</returns>
    </member>
    <member name="T:System.Reflection.ManifestResourceInfo">
      <summary>Provides access to manifest resources, which are XML files that describe application dependencies.  </summary>
    </member>
    <member name="M:System.Reflection.ManifestResourceInfo.#ctor(System.Reflection.Assembly,System.String,System.Reflection.ResourceLocation)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.ManifestResourceInfo" /> class for a resource that is contained by the specified assembly and file, and that has the specified location.</summary>
      <param name="containingAssembly">The assembly that contains the manifest resource.</param>
      <param name="containingFileName">The name of the file that contains the manifest resource, if the file is not the same as the manifest file.</param>
      <param name="resourceLocation">A bitwise combination of enumeration values that provides information about the location of the manifest resource. </param>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.FileName">
      <summary>Gets the name of the file that contains the manifest resource, if it is not the same as the manifest file.  </summary>
      <returns>The manifest resource's file name.</returns>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.ReferencedAssembly">
      <summary>Gets the containing assembly for the manifest resource. </summary>
      <returns>The manifest resource's containing assembly.</returns>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.ResourceLocation">
      <summary>Gets the manifest resource's location. </summary>
      <returns>A bitwise combination of <see cref="T:System.Reflection.ResourceLocation" /> flags that indicates the location of the manifest resource. </returns>
    </member>
    <member name="T:System.Reflection.MemberFilter">
      <summary>Represents a delegate that is used to filter a list of members represented in an array of <see cref="T:System.Reflection.MemberInfo" /> objects.</summary>
      <returns>true to include the member in the filtered list; otherwise false.</returns>
      <param name="m">The <see cref="T:System.Reflection.MemberInfo" /> object to which the filter is applied. </param>
      <param name="filterCriteria">An arbitrary object used to filter the list. </param>
    </member>
    <member name="T:System.Reflection.MemberInfo">
      <summary>Obtains information about the attributes of a member and provides access to member metadata.</summary>
    </member>
    <member name="M:System.Reflection.MemberInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.MemberInfo" /> class.</summary>
    </member>
    <member name="P:System.Reflection.MemberInfo.DeclaringType">
      <summary>Gets the class that declares this member.</summary>
      <returns>The Type object for the class that declares this member.</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> equals the type and value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance, or null.</param>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
      <summary>When overridden in a derived class, returns an array containing all the custom attributes.</summary>
      <returns>An array that contains all the custom attributes, or an array with zero elements if no attributes are defined.</returns>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. </param>
      <exception cref="T:System.InvalidOperationException">This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>When overridden in a derived class, returns an array of custom attributes identified by <see cref="T:System.Type" />.</summary>
      <returns>An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</returns>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. </param>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
      <exception cref="T:System.ArgumentNullException">If <paramref name="attributeType" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.</exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributesData">
      <summary>Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target member.</summary>
      <returns>A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target member.</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
      <summary>When overridden in a derived class, indicates whether one or more instance of <paramref name="attributeType" /> is applied to this member.</summary>
      <returns>true if one or more instance of <paramref name="attributeType" /> is applied to this member; otherwise false.</returns>
      <param name="attributeType">The Type object to which the custom attributes are applied. </param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. </param>
    </member>
    <member name="P:System.Reflection.MemberInfo.MemberType">
      <summary>When overridden in a derived class, gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating the type of the member — method, constructor, event, and so on.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating the type of member.</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.MetadataToken">
      <summary>Gets a value that identifies a metadata element.</summary>
      <returns>A value which, in combination with <see cref="P:System.Reflection.MemberInfo.Module" />, uniquely identifies a metadata element.</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Reflection.MemberInfo" /> represents an array method, such as Address, on an array type whose element type is a dynamic type that has not been completed. To get a metadata token in this case, pass the <see cref="T:System.Reflection.MemberInfo" /> object to the <see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /> method; or use the <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" />  method to get the token directly, instead of using the <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> method to get a <see cref="T:System.Reflection.MethodInfo" /> first.</exception>
    </member>
    <member name="P:System.Reflection.MemberInfo.Module">
      <summary>Gets the module in which the type that declares the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is defined.</summary>
      <returns>The <see cref="T:System.Reflection.Module" /> in which the type that declares the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is defined.</returns>
      <exception cref="T:System.NotImplementedException">This method is not implemented.</exception>
    </member>
    <member name="P:System.Reflection.MemberInfo.Name">
      <summary>Gets the name of the current member.</summary>
      <returns>A <see cref="T:System.String" /> containing the name of this member.</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.MemberInfo" /> objects are equal.</summary>
      <returns>true if <paramref name="left" /> is equal to <paramref name="right" />; otherwise false.</returns>
      <param name="left">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <paramref name="right" />.</param>
      <param name="right">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <paramref name="left" />.</param>
    </member>
    <member name="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.MemberInfo" /> objects are not equal.</summary>
      <returns>true if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise false.</returns>
      <param name="left">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <paramref name="right" />.</param>
      <param name="right">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <paramref name="left" />.</param>
    </member>
    <member name="P:System.Reflection.MemberInfo.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance of MemberInfo.</summary>
      <returns>The Type object through which this MemberInfo object was obtained.</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType">
      <summary>Gets a <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.MemberInfo" /> class.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.MemberInfo" /> class.</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="T:System.Reflection.MemberTypes">
      <summary>Marks each type of member that is defined as a derived class of MemberInfo.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Constructor">
      <summary>Specifies that the member is a constructor, representing a <see cref="T:System.Reflection.ConstructorInfo" /> member. Hexadecimal value of 0x01.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Event">
      <summary>Specifies that the member is an event, representing an <see cref="T:System.Reflection.EventInfo" /> member. Hexadecimal value of 0x02.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Field">
      <summary>Specifies that the member is a field, representing a <see cref="T:System.Reflection.FieldInfo" /> member. Hexadecimal value of 0x04.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Method">
      <summary>Specifies that the member is a method, representing a <see cref="T:System.Reflection.MethodInfo" /> member. Hexadecimal value of 0x08.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Property">
      <summary>Specifies that the member is a property, representing a <see cref="T:System.Reflection.PropertyInfo" /> member. Hexadecimal value of 0x10.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.TypeInfo">
      <summary>Specifies that the member is a type, representing a <see cref="F:System.Reflection.MemberTypes.TypeInfo" /> member. Hexadecimal value of 0x20.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Custom">
      <summary>Specifies that the member is a custom member type. Hexadecimal value of 0x40.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.NestedType">
      <summary>Specifies that the member is a nested type, extending <see cref="T:System.Reflection.MemberInfo" />.</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.All">
      <summary>Specifies all member types.</summary>
    </member>
    <member name="T:System.Reflection.MethodAttributes">
      <summary>Specifies flags for method attributes. These flags are defined in the corhdr.h file.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.MemberAccessMask">
      <summary>Retrieves accessibility information.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PrivateScope">
      <summary>Indicates that the member cannot be referenced.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Private">
      <summary>Indicates that the method is accessible only to the current class.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamANDAssem">
      <summary>Indicates that the method is accessible to members of this type and its derived types that are in this assembly only.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Assembly">
      <summary>Indicates that the method is accessible to any class of this assembly.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Family">
      <summary>Indicates that the method is accessible only to members of this class and its derived classes.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamORAssem">
      <summary>Indicates that the method is accessible to derived classes anywhere, as well as to any class in the assembly.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Public">
      <summary>Indicates that the method is accessible to any object for which this object is in scope.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Static">
      <summary>Indicates that the method is defined on the type; otherwise, it is defined per instance.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Final">
      <summary>Indicates that the method cannot be overridden.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Virtual">
      <summary>Indicates that the method is virtual.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HideBySig">
      <summary>Indicates that the method hides by name and signature; otherwise, by name only.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.CheckAccessOnOverride">
      <summary>Indicates that the method can only be overridden when it is also accessible.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.VtableLayoutMask">
      <summary>Retrieves vtable attributes.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.ReuseSlot">
      <summary>Indicates that the method will reuse an existing slot in the vtable. This is the default behavior.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.NewSlot">
      <summary>Indicates that the method always gets a new slot in the vtable.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Abstract">
      <summary>Indicates that the class does not provide an implementation of this method.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.SpecialName">
      <summary>Indicates that the method is special. The name describes how this method is special.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PinvokeImpl">
      <summary>Indicates that the method implementation is forwarded through PInvoke (Platform Invocation Services).</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.UnmanagedExport">
      <summary>Indicates that the managed method is exported by thunk to unmanaged code.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RTSpecialName">
      <summary>Indicates that the common language runtime checks the name encoding.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.ReservedMask">
      <summary>Indicates a reserved flag for runtime use only.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HasSecurity">
      <summary>Indicates that the method has security associated with it. Reserved flag for runtime use only.</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RequireSecObject">
      <summary>Indicates that the method calls another method containing security code. Reserved flag for runtime use only.</summary>
    </member>
    <member name="T:System.Reflection.MethodBase">
      <summary>Provides information about methods and constructors. </summary>
    </member>
    <member name="M:System.Reflection.MethodBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.MethodBase" /> class.</summary>
    </member>
    <member name="P:System.Reflection.MethodBase.Attributes">
      <summary>Gets the attributes associated with this method.</summary>
      <returns>One of the <see cref="T:System.Reflection.MethodAttributes" /> values.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.CallingConvention">
      <summary>Gets a value indicating the calling conventions for this method.</summary>
      <returns>The <see cref="T:System.Reflection.CallingConventions" /> for this method.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.ContainsGenericParameters">
      <summary>Gets a value indicating whether the generic method contains unassigned generic type parameters.</summary>
      <returns>true if the current <see cref="T:System.Reflection.MethodBase" /> object represents a generic method that contains unassigned generic type parameters; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> equals the type and value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance, or null.</param>
    </member>
    <member name="M:System.Reflection.MethodBase.GetCurrentMethod">
      <summary>Returns a MethodBase object representing the currently executing method.</summary>
      <returns>A MethodBase object representing the currently executing method.</returns>
      <exception cref="T:System.Reflection.TargetException">This member was invoked with a late-binding mechanism.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetGenericArguments">
      <summary>Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.</returns>
      <exception cref="T:System.NotSupportedException">The current object is a <see cref="T:System.Reflection.ConstructorInfo" />. Generic constructors are not supported in the .NET Framework version 2.0. This exception is the default behavior if this method is not overridden in a derived class.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodBody">
      <summary>When overridden in a derived class, gets a <see cref="T:System.Reflection.MethodBody" /> object that provides access to the MSIL stream, local variables, and exceptions for the current method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodBody" /> object that provides access to the MSIL stream, local variables, and exceptions for the current method.</returns>
      <exception cref="T:System.InvalidOperationException">This method is invalid unless overridden in a derived class.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)">
      <summary>Gets method information by using the method's internal metadata representation (handle).</summary>
      <returns>A MethodBase containing information about the method.</returns>
      <param name="handle">The method's handle. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> is invalid.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary>Gets a <see cref="T:System.Reflection.MethodBase" /> object for the constructor or method represented by the specified handle, for the specified generic type.</summary>
      <returns>A <see cref="T:System.Reflection.MethodBase" /> object representing the method or constructor specified by <paramref name="handle" />, in the generic type specified by <paramref name="declaringType" />.</returns>
      <param name="handle">A handle to the internal metadata representation of a constructor or method.</param>
      <param name="declaringType">A handle to the generic type that defines the constructor or method.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> is invalid.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodImplementationFlags">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Reflection.MethodImplAttributes" /> flags.</summary>
      <returns>The MethodImplAttributes flags.</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetParameters">
      <summary>When overridden in a derived class, gets the parameters of the specified method or constructor.</summary>
      <returns>An array of type ParameterInfo containing information that matches the signature of the method (or constructor) reflected by this MethodBase instance.</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])">
      <summary>Invokes the method or constructor represented by the current instance, using the specified parameters.</summary>
      <returns>An object containing the return value of the invoked method, or null in the case of a constructor.</returns>
      <param name="obj">The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be null or an instance of the class that defines the constructor. </param>
      <param name="parameters">An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, <paramref name="parameters" /> should be null.If the method or constructor represented by this instance takes a ref parameter (ByRef in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type. </param>
      <exception cref="T:System.Reflection.TargetException">The <paramref name="obj" /> parameter is null and the method is not static.-or- The method is not declared or inherited by the class of <paramref name="obj" />. -or-A static constructor is invoked, and <paramref name="obj" /> is neither null nor an instance of the class that declared the constructor.</exception>
      <exception cref="T:System.ArgumentException">The elements of the <paramref name="parameters" /> array do not match the signature of the method or constructor reflected by this instance. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The invoked method or constructor throws an exception. -or-The current instance is a <see cref="T:System.Reflection.Emit.DynamicMethod" /> that contains unverifiable code. See the "Verification" section in Remarks for <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The <paramref name="parameters" /> array does not have the correct number of arguments. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to execute the constructor. </exception>
      <exception cref="T:System.InvalidOperationException">The type that declares the method is an open generic type. That is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns true for the declaring type.</exception>
      <exception cref="T:System.NotSupportedException">The current instance is a <see cref="T:System.Reflection.Emit.MethodBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>When overridden in a derived class, invokes the reflected method or constructor with the given parameters.</summary>
      <returns>An Object containing the return value of the invoked method, or null in the case of a constructor, or null if the method's return type is void. Before calling the method or constructor, Invoke checks to see if the user has access permission and verify that the parameters are valid.</returns>
      <param name="obj">The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be null or an instance of the class that defines the constructor.</param>
      <param name="invokeAttr">A bitmask that is a combination of 0 or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. If <paramref name="binder" /> is null, this parameter is assigned the value <see cref="F:System.Reflection.BindingFlags.Default" />; thus, whatever you pass in is ignored. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="parameters">An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, this should be null.If the method or constructor represented by this instance takes a ByRef parameter, there is no special attribute required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type. </param>
      <param name="culture">An instance of CultureInfo used to govern the coercion of types. If this is null, the CultureInfo for the current thread is used. (This is necessary to convert a String that represents 1000 to a Double value, for example, since 1000 is represented differently by different cultures.) </param>
      <exception cref="T:System.Reflection.TargetException">The <paramref name="obj" /> parameter is null and the method is not static.-or- The method is not declared or inherited by the class of <paramref name="obj" />. -or-A static constructor is invoked, and <paramref name="obj" /> is neither null nor an instance of the class that declared the constructor.</exception>
      <exception cref="T:System.ArgumentException">The type of the <paramref name="parameters" /> parameter does not match the signature of the method or constructor reflected by this instance. </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The <paramref name="parameters" /> array does not have the correct number of arguments. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The invoked method or constructor throws an exception. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to execute the constructor. </exception>
      <exception cref="T:System.InvalidOperationException">The type that declares the method is an open generic type. That is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns true for the declaring type.</exception>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAbstract">
      <summary>Gets a value indicating whether the method is abstract.</summary>
      <returns>true if the method is abstract; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAssembly">
      <summary>Gets a value indicating whether the potential visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.Assembly" />; that is, the method or constructor is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</summary>
      <returns>true if the visibility of this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.Assembly" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsConstructor">
      <summary>Gets a value indicating whether the method is a constructor.</summary>
      <returns>true if this method is a constructor represented by a <see cref="T:System.Reflection.ConstructorInfo" /> object (see note in Remarks about <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> objects); otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamily">
      <summary>Gets a value indicating whether the visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.Family" />; that is, the method or constructor is visible only within its class and derived classes.</summary>
      <returns>true if access to this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.Family" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamilyAndAssembly">
      <summary>Gets a value indicating whether the visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" />; that is, the method or constructor can be called by derived classes, but only if they are in the same assembly.</summary>
      <returns>true if access to this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamilyOrAssembly">
      <summary>Gets a value indicating whether the potential visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.FamORAssem" />; that is, the method or constructor can be called by derived classes wherever they are, and by classes in the same assembly.</summary>
      <returns>true if access to this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.FamORAssem" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFinal">
      <summary>Gets a value indicating whether this method is final.</summary>
      <returns>true if this method is final; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsGenericMethod">
      <summary>Gets a value indicating whether the method is generic.</summary>
      <returns>true if the current <see cref="T:System.Reflection.MethodBase" /> represents a generic method; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsGenericMethodDefinition">
      <summary>Gets a value indicating whether the method is a generic method definition.</summary>
      <returns>true if the current <see cref="T:System.Reflection.MethodBase" /> object represents the definition of a generic method; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsHideBySig">
      <summary>Gets a value indicating whether only a member of the same kind with exactly the same signature is hidden in the derived class.</summary>
      <returns>true if the member is hidden by signature; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsPrivate">
      <summary>Gets a value indicating whether this member is private.</summary>
      <returns>true if access to this method is restricted to other members of the class itself; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsPublic">
      <summary>Gets a value indicating whether this is a public method.</summary>
      <returns>true if this method is public; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSecurityCritical">
      <summary>Gets a value that indicates whether the current method or constructor is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations. </summary>
      <returns>true if the current method or constructor is security-critical or security-safe-critical at the current trust level; false if it is transparent. </returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSecuritySafeCritical">
      <summary>Gets a value that indicates whether the current method or constructor is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code. </summary>
      <returns>true if the method or constructor is security-safe-critical at the current trust level; false if it is security-critical or transparent.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSecurityTransparent">
      <summary>Gets a value that indicates whether the current method or constructor is transparent at the current trust level, and therefore cannot perform critical operations.</summary>
      <returns>true if the method or constructor is security-transparent at the current trust level; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSpecialName">
      <summary>Gets a value indicating whether this method has a special name.</summary>
      <returns>true if this method has a special name; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsStatic">
      <summary>Gets a value indicating whether the method is static.</summary>
      <returns>true if this method is static; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsVirtual">
      <summary>Gets a value indicating whether the method is virtual.</summary>
      <returns>true if this method is virtual; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.MethodHandle">
      <summary>Gets a handle to the internal metadata representation of a method.</summary>
      <returns>A <see cref="T:System.RuntimeMethodHandle" /> object.</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)">
      <summary>Indicates whether two <see cref="T:System.Reflection.MethodBase" /> objects are equal.</summary>
      <returns>true if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)">
      <summary>Indicates whether two <see cref="T:System.Reflection.MethodBase" /> objects are not equal.</summary>
      <returns>true if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType">
      <summary>For a description of this member, see <see cref="M:System.Runtime.InteropServices._MethodBase.GetType" />.</summary>
      <returns>For a description of this member, see <see cref="M:System.Runtime.InteropServices._MethodBase.GetType" />.</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract">
      <summary>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsAbstract" />.</summary>
      <returns>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsAbstract" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly">
      <summary>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsAssembly" />.</summary>
      <returns>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsAssembly" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor">
      <summary>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsConstructor" />.</summary>
      <returns>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsConstructor" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily">
      <summary>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamily" />.</summary>
      <returns>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamily" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly">
      <summary>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly" />.</summary>
      <returns>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly">
      <summary>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly" />.</summary>
      <returns>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal">
      <summary>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFinal" />.</summary>
      <returns>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsFinal" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig">
      <summary>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsHideBySig" />.</summary>
      <returns>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsHideBySig" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate">
      <summary>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsPrivate" />.</summary>
      <returns>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsPrivate" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic">
      <summary>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsPublic" />.</summary>
      <returns>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsPublic" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName">
      <summary>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsSpecialName" />.</summary>
      <returns>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsSpecialName" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic">
      <summary>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsStatic" />.</summary>
      <returns>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsStatic" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual">
      <summary>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsVirtual" />.</summary>
      <returns>For a description of this member, see <see cref="P:System.Runtime.InteropServices._MethodBase.IsVirtual" />.</returns>
    </member>
    <member name="T:System.Reflection.MethodBody">
      <summary>Provides access to the metadata and MSIL for the body of a method.</summary>
    </member>
    <member name="M:System.Reflection.MethodBody.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.MethodBody" /> class.</summary>
    </member>
    <member name="P:System.Reflection.MethodBody.ExceptionHandlingClauses">
      <summary>Gets a list that includes all the exception-handling clauses in the method body.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.ExceptionHandlingClause" /> objects representing the exception-handling clauses in the body of the method.</returns>
    </member>
    <member name="M:System.Reflection.MethodBody.GetILAsByteArray">
      <summary>Returns the MSIL for the method body, as an array of bytes.</summary>
      <returns>An array of type <see cref="T:System.Byte" /> that contains the MSIL for the method body. </returns>
    </member>
    <member name="P:System.Reflection.MethodBody.InitLocals">
      <summary>Gets a value indicating whether local variables in the method body are initialized to the default values for their types.</summary>
      <returns>true if the method body contains code to initialize local variables to null for reference types, or to the zero-initialized value for value types; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodBody.LocalSignatureMetadataToken">
      <summary>Gets a metadata token for the signature that describes the local variables for the method in metadata.</summary>
      <returns>An integer that represents the metadata token.</returns>
    </member>
    <member name="P:System.Reflection.MethodBody.LocalVariables">
      <summary>Gets the list of local variables declared in the method body.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.LocalVariableInfo" /> objects that describe the local variables declared in the method body.</returns>
    </member>
    <member name="P:System.Reflection.MethodBody.MaxStackSize">
      <summary>Gets the maximum number of items on the operand stack when the method is executing.</summary>
      <returns>The maximum number of items on the operand stack when the method is executing.</returns>
    </member>
    <member name="T:System.Reflection.MethodImplAttributes">
      <summary>Specifies flags for the attributes of a method implementation.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.CodeTypeMask">
      <summary>Specifies flags about code type.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.IL">
      <summary>Specifies that the method implementation is in Microsoft intermediate language (MSIL).</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Native">
      <summary>Specifies that the method implementation is native.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.OPTIL">
      <summary>Specifies that the method implementation is in Optimized Intermediate Language (OPTIL).</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Runtime">
      <summary>Specifies that the method implementation is provided by the runtime.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.ManagedMask">
      <summary>Specifies whether the method is implemented in managed or unmanaged code.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Unmanaged">
      <summary>Specifies that the method is implemented in unmanaged code.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Managed">
      <summary>Specifies that the method is implemented in managed code. </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.ForwardRef">
      <summary>Specifies that the method is not defined.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.PreserveSig">
      <summary>Specifies that the method signature is exported exactly as declared.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.InternalCall">
      <summary>Specifies an internal call.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Synchronized">
      <summary>Specifies that the method is single-threaded through the body. Static methods (Shared in Visual Basic) lock on the type, whereas instance methods lock on the instance. You can also use the C# lock statement or the Visual Basic Lock function for this purpose. </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.NoInlining">
      <summary>Specifies that the method cannot be inlined.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.NoOptimization">
      <summary>Specifies that the method is not optimized by the just-in-time (JIT) compiler or by native code generation (see Ngen.exe) when debugging possible code generation problems.</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.MaxMethodImplVal">
      <summary>Specifies a range check value.</summary>
    </member>
    <member name="T:System.Reflection.MethodInfo">
      <summary>Discovers the attributes of a method and provides access to method metadata.</summary>
    </member>
    <member name="M:System.Reflection.MethodInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.MethodInfo" /> class.</summary>
    </member>
    <member name="M:System.Reflection.MethodInfo.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> equals the type and value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance, or null.</param>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetBaseDefinition">
      <summary>When overridden in a derived class, returns the MethodInfo object for the method on the direct or indirect base class in which the method represented by this instance was first declared.</summary>
      <returns>A MethodInfo object for the first implementation of this method.</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetGenericArguments">
      <summary>Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
      <summary>Returns a <see cref="T:System.Reflection.MethodInfo" /> object that represents a generic method definition from which the current method can be constructed.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing a generic method definition from which the current method can be constructed.</returns>
      <exception cref="T:System.InvalidOperationException">The current method is not a generic method. That is, <see cref="P:System.Reflection.MethodInfo.IsGenericMethod" /> returns false. </exception>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
      <summary>Substitutes the elements of an array of types for the type parameters of the current generic method definition, and returns a <see cref="T:System.Reflection.MethodInfo" /> object representing the resulting constructed method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object that represents the constructed method formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic method definition.</returns>
      <param name="typeArguments">An array of types to be substituted for the type parameters of the current generic method definition.</param>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Reflection.MethodInfo" /> does not represent a generic method definition. That is, <see cref="P:System.Reflection.MethodInfo.IsGenericMethodDefinition" /> returns false.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> is null.-or- Any element of <paramref name="typeArguments" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters of the current generic method definition.-or- An element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic method definition. </exception>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="P:System.Reflection.MethodInfo.MemberType">
      <summary>Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a method.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a method.</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.MethodInfo" /> objects are equal.</summary>
      <returns>true if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.MethodInfo" /> objects are not equal.</summary>
      <returns>true if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnParameter">
      <summary>Gets a <see cref="T:System.Reflection.ParameterInfo" /> object that contains information about the return type of the method, such as whether the return type has custom modifiers. </summary>
      <returns>A <see cref="T:System.Reflection.ParameterInfo" /> object that contains information about the return type.</returns>
      <exception cref="T:System.NotImplementedException">This method is not implemented.</exception>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnType">
      <summary>Gets the return type of this method.</summary>
      <returns>The return type of this method.</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes">
      <summary>Gets the custom attributes for the return type.</summary>
      <returns>An ICustomAttributeProvider object representing the custom attributes for the return type.</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array that receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType">
      <summary>Provides access to the <see cref="M:System.Object.GetType" /> method from COM.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.MethodInfo" /> type.</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="T:System.Reflection.Missing">
      <summary>Represents a missing <see cref="T:System.Object" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.Missing.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the logical context information needed to recreate the sole instance of the <see cref="T:System.Reflection.Missing" /> object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to be populated with serialization information.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object representing the destination context of the serialization.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
    </member>
    <member name="F:System.Reflection.Missing.Value">
      <summary>Represents the sole instance of the <see cref="T:System.Reflection.Missing" /> class.</summary>
    </member>
    <member name="T:System.Reflection.Module">
      <summary>Performs reflection on a module.</summary>
    </member>
    <member name="M:System.Reflection.Module.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.Module" /> class.</summary>
    </member>
    <member name="P:System.Reflection.Module.Assembly">
      <summary>Gets the appropriate <see cref="T:System.Reflection.Assembly" /> for this instance of <see cref="T:System.Reflection.Module" />.</summary>
      <returns>An Assembly object.</returns>
    </member>
    <member name="M:System.Reflection.Module.Equals(System.Object)">
      <summary>Determines whether this module and the specified object are equal.</summary>
      <returns>true if <paramref name="o" /> is equal to this instance; otherwise, false.</returns>
      <param name="o">The object to compare with this instance. </param>
    </member>
    <member name="F:System.Reflection.Module.FilterTypeName">
      <summary>A TypeFilter object that filters the list of types defined in this module based upon the name. This field is case-sensitive and read-only.</summary>
    </member>
    <member name="F:System.Reflection.Module.FilterTypeNameIgnoreCase">
      <summary>A TypeFilter object that filters the list of types defined in this module based upon the name. This field is case-insensitive and read-only.</summary>
    </member>
    <member name="M:System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)">
      <summary>Returns an array of classes accepted by the given filter and filter criteria.</summary>
      <returns>An array of type Type containing classes that were accepted by the filter.</returns>
      <param name="filter">The delegate used to filter the classes. </param>
      <param name="filterCriteria">An Object used to filter the classes. </param>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">One or more classes in a module could not be loaded. </exception>
    </member>
    <member name="P:System.Reflection.Module.FullyQualifiedName">
      <summary>Gets a string representing the fully qualified name and path to this module.</summary>
      <returns>The fully qualified module name.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributes(System.Boolean)">
      <summary>Returns all custom attributes.</summary>
      <returns>An array of type Object containing all custom attributes.</returns>
      <param name="inherit">This argument is ignored for objects of this type. </param>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Gets custom attributes of the specified type.</summary>
      <returns>An array of type Object containing all custom attributes of the specified type.</returns>
      <param name="attributeType">The type of attribute to get. </param>
      <param name="inherit">This argument is ignored for objects of this type. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the runtime. For example, <paramref name="attributeType" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> object.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributesData">
      <summary>Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects for the current module, which can be used in the reflection-only context.</summary>
      <returns>A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the current module.</returns>
    </member>
    <member name="M:System.Reflection.Module.GetField(System.String)">
      <summary>Returns a field having the specified name.</summary>
      <returns>A FieldInfo object having the specified name, or null if the field does not exist.</returns>
      <param name="name">The field name. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns a field having the specified name and binding attributes.</summary>
      <returns>A FieldInfo object having the specified name and binding attributes, or null if the field does not exist.</returns>
      <param name="name">The field name. </param>
      <param name="bindingAttr">One of the BindingFlags bit flags used to control the search. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Reflection.Module.GetFields">
      <summary>Returns the global fields defined on the module.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing the global fields defined on the module; if there are no global fields, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.Module.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns the global fields defined on the module that match the specified binding flags.</summary>
      <returns>An array of type <see cref="T:System.Reflection.FieldInfo" /> representing the global fields defined on the module that match the specified binding flags; if no global fields match the binding flags, an empty array is returned.</returns>
      <param name="bindingFlags">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values that limit the search.</param>
    </member>
    <member name="M:System.Reflection.Module.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String)">
      <summary>Returns a method having the specified name.</summary>
      <returns>A MethodInfo object having the specified name, or null if the method does not exist.</returns>
      <param name="name">The method name. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Returns a method having the specified name, binding information, calling convention, and parameter types and modifiers.</summary>
      <returns>A MethodInfo object in accordance with the specified criteria, or null if the method does not exist.</returns>
      <param name="name">The method name. </param>
      <param name="bindingAttr">One of the BindingFlags bit flags used to control the search. </param>
      <param name="binder">An object that implements Binder, containing properties related to this method. </param>
      <param name="callConvention">The calling convention for the method. </param>
      <param name="types">The parameter types to search for. </param>
      <param name="modifiers">An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null, <paramref name="types" /> is null, or <paramref name="types" /> (i) is null. </exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String,System.Type[])">
      <summary>Returns a method having the specified name and parameter types.</summary>
      <returns>A MethodInfo object in accordance with the specified criteria, or null if the method does not exist.</returns>
      <param name="name">The method name. </param>
      <param name="types">The parameter types to search for. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null, <paramref name="types" /> is null, or <paramref name="types" /> (i) is null. </exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Returns the method implementation in accordance with the specified criteria.</summary>
      <returns>A MethodInfo object containing implementation information as specified, or null if the method does not exist.</returns>
      <param name="name">The method name. </param>
      <param name="bindingAttr">One of the BindingFlags bit flags used to control the search. </param>
      <param name="binder">An object that implements Binder, containing properties related to this method. </param>
      <param name="callConvention">The calling convention for the method. </param>
      <param name="types">The parameter types to search for. </param>
      <param name="modifiers">An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
        <paramref name="types" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethods">
      <summary>Returns the global methods defined on the module.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the global methods defined on the module; if there are no global methods, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)">
      <summary>Returns the global methods defined on the module that match the specified binding flags.</summary>
      <returns>An array of type <see cref="T:System.Reflection.MethodInfo" /> representing the global methods defined on the module that match the specified binding flags; if no global methods match the binding flags, an empty array is returned.</returns>
      <param name="bindingFlags">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values that limit the search.</param>
    </member>
    <member name="M:System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Provides an <see cref="T:System.Runtime.Serialization.ISerializable" /> implementation for serialized objects.</summary>
      <param name="info">The information and data needed to serialize or deserialize an object. </param>
      <param name="context">The context for the serialization. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)">
      <summary>Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.</summary>
      <param name="peKind">When this method returns, a combination of the <see cref="T:System.Reflection.PortableExecutableKinds" /> values indicating the nature of the code in the module.</param>
      <param name="machine">When this method returns, one of the <see cref="T:System.Reflection.ImageFileMachine" /> values indicating the platform targeted by the module.</param>
    </member>
    <member name="M:System.Reflection.Module.GetSignerCertificate">
      <summary>Returns an X509Certificate object corresponding to the certificate included in the Authenticode signature of the assembly which this module belongs to. If the assembly has not been Authenticode signed, null is returned.</summary>
      <returns>An X509Certificate object, or null if the assembly to which this module belongs has not been Authenticode signed.</returns>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String)">
      <summary>Returns the specified type, performing a case-sensitive search.</summary>
      <returns>A Type object representing the given type, if the type is in this module; otherwise, null.</returns>
      <param name="className">The name of the type to locate. The name must be fully qualified with the namespace. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The class initializers are invoked and an exception is thrown. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> is a zero-length string. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="className" /> requires a dependent assembly that could not be found. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="className" /> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="className" /> requires a dependent assembly that was not preloaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="className" /> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="className" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String,System.Boolean)">
      <summary>Returns the specified type, searching the module with the specified case sensitivity.</summary>
      <returns>A Type object representing the given type, if the type is in this module; otherwise, null.</returns>
      <param name="className">The name of the type to locate. The name must be fully qualified with the namespace. </param>
      <param name="ignoreCase">true for case-insensitive search; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The class initializers are invoked and an exception is thrown. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> is a zero-length string. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="className" /> requires a dependent assembly that could not be found. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="className" /> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="className" /> requires a dependent assembly that was not preloaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="className" /> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="className" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Returns the specified type, specifying whether to make a case-sensitive search of the module and whether to throw an exception if the type cannot be found.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the specified type, if the type is declared in this module; otherwise, null.</returns>
      <param name="className">The name of the type to locate. The name must be fully qualified with the namespace. </param>
      <param name="throwOnError">true to throw an exception if the type cannot be found; false to return null. </param>
      <param name="ignoreCase">true for case-insensitive search; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The class initializers are invoked and an exception is thrown. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> is a zero-length string. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true, and the type cannot be found. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="className" /> requires a dependent assembly that could not be found. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="className" /> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="className" /> requires a dependent assembly that was not preloaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="className" /> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="className" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
    </member>
    <member name="M:System.Reflection.Module.GetTypes">
      <summary>Returns all the types defined within this module.</summary>
      <returns>An array of type Type containing types defined within the module that is reflected by this instance.</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">One or more classes in a module could not be loaded. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.Module.IsDefined(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether the specified attribute type has been applied to this module.</summary>
      <returns>true if one or more instances of <paramref name="attributeType" /> have been applied to this module; otherwise, false.</returns>
      <param name="attributeType">The type of custom attribute to test for. </param>
      <param name="inherit">This argument is ignored for objects of this type. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the runtime. For example, <paramref name="attributeType" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> object.</exception>
    </member>
    <member name="M:System.Reflection.Module.IsResource">
      <summary>Gets a value indicating whether the object is a resource.</summary>
      <returns>true if the object is a resource; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Module.MDStreamVersion">
      <summary>Gets the metadata stream version.</summary>
      <returns>A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.</returns>
    </member>
    <member name="P:System.Reflection.Module.MetadataToken">
      <summary>Gets a token that identifies the module in metadata.</summary>
      <returns>An integer token that identifies the current module in metadata.</returns>
    </member>
    <member name="P:System.Reflection.Module.ModuleHandle">
      <summary>Gets a handle for the module.</summary>
      <returns>A <see cref="T:System.ModuleHandle" /> structure for the current module.</returns>
    </member>
    <member name="P:System.Reflection.Module.ModuleVersionId">
      <summary>Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.</summary>
      <returns>A <see cref="T:System.Guid" /> that can be used to distinguish between two versions of a module.</returns>
    </member>
    <member name="P:System.Reflection.Module.Name">
      <summary>Gets a String representing the name of the module with the path removed.</summary>
      <returns>The module name with no path.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Module.op_Equality(System.Reflection.Module,System.Reflection.Module)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Module" /> objects are equal.</summary>
      <returns>true if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first object to compare. </param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.Reflection.Module.op_Inequality(System.Reflection.Module,System.Reflection.Module)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Module" /> objects are not equal.</summary>
      <returns>true if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.Reflection.Module.ResolveField(System.Int32)">
      <summary>Returns the field identified by the specified metadata token.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object representing the field that is identified by the specified metadata token.</returns>
      <param name="metadataToken">A metadata token that identifies a field in the module.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a field in the scope of the current module.-or-<paramref name="metadataToken" /> identifies a field whose parent TypeSpec has a signature containing element type var (a type parameter of a generic type) or mvar (a type parameter of a generic method).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])">
      <summary>Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object representing the field that is identified by the specified metadata token.</returns>
      <param name="metadataToken">A metadata token that identifies a field in the module.</param>
      <param name="genericTypeArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the type where the token is in scope, or null if that type is not generic. </param>
      <param name="genericMethodArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the method where the token is in scope, or null if that method is not generic.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a field in the scope of the current module.-or-<paramref name="metadataToken" /> identifies a field whose parent TypeSpec has a signature containing element type var (a type parameter of a generic type) or mvar (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <paramref name="genericTypeArguments" /> and <paramref name="genericMethodArguments" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMember(System.Int32)">
      <summary>Returns the type or member identified by the specified metadata token.</summary>
      <returns>A <see cref="T:System.Reflection.MemberInfo" /> object representing the type or member that is identified by the specified metadata token.</returns>
      <param name="metadataToken">A metadata token that identifies a type or member in the module.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a type or member in the scope of the current module.-or-<paramref name="metadataToken" /> is a MethodSpec or TypeSpec whose signature contains element type var (a type parameter of a generic type) or mvar (a type parameter of a generic method).-or-<paramref name="metadataToken" /> identifies a property or event.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])">
      <summary>Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.</summary>
      <returns>A <see cref="T:System.Reflection.MemberInfo" /> object representing the type or member that is identified by the specified metadata token.</returns>
      <param name="metadataToken">A metadata token that identifies a type or member in the module.</param>
      <param name="genericTypeArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the type where the token is in scope, or null if that type is not generic. </param>
      <param name="genericMethodArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the method where the token is in scope, or null if that method is not generic.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a type or member in the scope of the current module.-or-<paramref name="metadataToken" /> is a MethodSpec or TypeSpec whose signature contains element type var (a type parameter of a generic type) or mvar (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <paramref name="genericTypeArguments" /> and <paramref name="genericMethodArguments" />.-or-<paramref name="metadataToken" /> identifies a property or event.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMethod(System.Int32)">
      <summary>Returns the method or constructor identified by the specified metadata token.</summary>
      <returns>A <see cref="T:System.Reflection.MethodBase" /> object representing the method or constructor that is identified by the specified metadata token.</returns>
      <param name="metadataToken">A metadata token that identifies a method or constructor in the module.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a method or constructor in the scope of the current module.-or-<paramref name="metadataToken" /> is a MethodSpec whose signature contains element type var (a type parameter of a generic type) or mvar (a type parameter of a generic method).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])">
      <summary>Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters. </summary>
      <returns>A <see cref="T:System.Reflection.MethodBase" /> object representing the method that is identified by the specified metadata token.</returns>
      <param name="metadataToken">A metadata token that identifies a method or constructor in the module.</param>
      <param name="genericTypeArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the type where the token is in scope, or null if that type is not generic. </param>
      <param name="genericMethodArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the method where the token is in scope, or null if that method is not generic.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a method or constructor in the scope of the current module.-or-<paramref name="metadataToken" /> is a MethodSpec whose signature contains element type var (a type parameter of a generic type) or mvar (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <paramref name="genericTypeArguments" /> and <paramref name="genericMethodArguments" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveSignature(System.Int32)">
      <summary>Returns the signature blob identified by a metadata token.</summary>
      <returns>An array of bytes representing the signature blob.</returns>
      <param name="metadataToken">A metadata token that identifies a signature in the module.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a valid MemberRef, MethodDef, TypeSpec, signature, or FieldDef token in the scope of the current module.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveString(System.Int32)">
      <summary>Returns the string identified by the specified metadata token.</summary>
      <returns>A <see cref="T:System.String" /> containing a string value from the metadata string heap.</returns>
      <param name="metadataToken">A metadata token that identifies a string in the string heap of the module. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a string in the scope of the current module. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveType(System.Int32)">
      <summary>Returns the type identified by the specified metadata token.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the type that is identified by the specified metadata token.</returns>
      <param name="metadataToken">A metadata token that identifies a type in the module.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a type in the scope of the current module.-or-<paramref name="metadataToken" /> is a TypeSpec whose signature contains element type var (a type parameter of a generic type) or mvar (a type parameter of a generic method). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])">
      <summary>Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the type that is identified by the specified metadata token.</returns>
      <param name="metadataToken">A metadata token that identifies a type in the module.</param>
      <param name="genericTypeArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the type where the token is in scope, or null if that type is not generic. </param>
      <param name="genericMethodArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the method where the token is in scope, or null if that method is not generic.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a type in the scope of the current module.-or-<paramref name="metadataToken" /> is a TypeSpec whose signature contains element type var (a type parameter of a generic type) or mvar (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <paramref name="genericTypeArguments" /> and <paramref name="genericMethodArguments" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="P:System.Reflection.Module.ScopeName">
      <summary>Gets a string representing the name of the module.</summary>
      <returns>The module name.</returns>
    </member>
    <member name="M:System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array that receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Module.ToString">
      <summary>Returns the name of the module.</summary>
      <returns>A String representing the name of this module.</returns>
    </member>
    <member name="T:System.Reflection.ModuleResolveEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Reflection.Assembly.ModuleResolve" /> event of an <see cref="T:System.Reflection.Assembly" />.</summary>
      <returns>The module that satisfies the request.</returns>
      <param name="sender">The assembly that was the source of the event. </param>
      <param name="e">The arguments supplied by the object describing the event. </param>
    </member>
    <member name="T:System.Reflection.ObfuscateAssemblyAttribute">
      <summary>Instructs obfuscation tools to use their standard obfuscation rules for the appropriate assembly type.</summary>
    </member>
    <member name="M:System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.ObfuscateAssemblyAttribute" /> class, specifying whether the assembly to be obfuscated is public or private.</summary>
      <param name="assemblyIsPrivate">true if the assembly is used within the scope of one application; otherwise, false.</param>
    </member>
    <member name="P:System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate">
      <summary>Gets a <see cref="T:System.Boolean" /> value indicating whether the assembly was marked private.</summary>
      <returns>true if the assembly was marked private; otherwise, false. </returns>
    </member>
    <member name="P:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation">
      <summary>Gets or sets a <see cref="T:System.Boolean" /> value indicating whether the obfuscation tool should remove the attribute after processing.</summary>
      <returns>true if the obfuscation tool should remove the attribute after processing; otherwise, false. The default value for this property is true.</returns>
    </member>
    <member name="T:System.Reflection.ObfuscationAttribute">
      <summary>Instructs obfuscation tools to take the specified actions for an assembly, type, or member.</summary>
    </member>
    <member name="M:System.Reflection.ObfuscationAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.ObfuscationAttribute" /> class.</summary>
    </member>
    <member name="P:System.Reflection.ObfuscationAttribute.ApplyToMembers">
      <summary>Gets or sets a <see cref="T:System.Boolean" /> value indicating whether the attribute of a type is to apply to the members of the type.</summary>
      <returns>true if the attribute is to apply to the members of the type; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Reflection.ObfuscationAttribute.Exclude">
      <summary>Gets or sets a <see cref="T:System.Boolean" /> value indicating whether the obfuscation tool should exclude the type or member from obfuscation.</summary>
      <returns>true if the type or member to which this attribute is applied should be excluded from obfuscation; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Reflection.ObfuscationAttribute.Feature">
      <summary>Gets or sets a string value that is recognized by the obfuscation tool, and which specifies processing options. </summary>
      <returns>A string value that is recognized by the obfuscation tool, and which specifies processing options. The default is "all".</returns>
    </member>
    <member name="P:System.Reflection.ObfuscationAttribute.StripAfterObfuscation">
      <summary>Gets or sets a <see cref="T:System.Boolean" /> value indicating whether the obfuscation tool should remove this attribute after processing.</summary>
      <returns>true if an obfuscation tool should remove the attribute after processing; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.Reflection.ParameterAttributes">
      <summary>Defines the attributes that can be associated with a parameter. These are defined in CorHdr.h.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.None">
      <summary>Specifies that there is no parameter attribute.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.In">
      <summary>Specifies that the parameter is an input parameter.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Out">
      <summary>Specifies that the parameter is an output parameter.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Lcid">
      <summary>Specifies that the parameter is a locale identifier (lcid).</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Retval">
      <summary>Specifies that the parameter is a return value.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Optional">
      <summary>Specifies that the parameter is optional.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.ReservedMask">
      <summary>Specifies that the parameter is reserved.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasDefault">
      <summary>Specifies that the parameter has a default value.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasFieldMarshal">
      <summary>Specifies that the parameter has field marshaling information.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Reserved3">
      <summary>Reserved.</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Reserved4">
      <summary>Reserved.</summary>
    </member>
    <member name="T:System.Reflection.ParameterInfo">
      <summary>Discovers the attributes of a parameter and provides access to parameter metadata.</summary>
    </member>
    <member name="M:System.Reflection.ParameterInfo.#ctor">
      <summary>Initializes a new instance of the ParameterInfo class.</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Attributes">
      <summary>Gets the attributes for this parameter.</summary>
      <returns>A ParameterAttributes object representing the attributes for this parameter.</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.AttrsImpl">
      <summary>The attributes of the parameter.</summary>
    </member>
    <member name="F:System.Reflection.ParameterInfo.ClassImpl">
      <summary>The Type of the parameter.</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.DefaultValue">
      <summary>Gets a value indicating the default value if the parameter has a default value.</summary>
      <returns>The default value of the parameter, or <see cref="F:System.DBNull.Value" /> if the parameter has no default value.</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.DefaultValueImpl">
      <summary>The default value of the parameter.</summary>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
      <summary>Gets all the custom attributes defined on this parameter.</summary>
      <returns>An array of type Object containing all the custom attributes defined on this parameter.</returns>
      <param name="inherit">This argument is ignored for objects of this type. </param>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Gets the custom attributes of the specified type defined on this parameter.</summary>
      <returns>An array of type Object containing the custom attributes of the specified type.</returns>
      <param name="attributeType">The custom attributes identified by type. </param>
      <param name="inherit">This argument is ignored for objects of this type. </param>
      <exception cref="T:System.ArgumentException">The type must be a type provided by the underlying runtime system.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
      <summary>Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects for the current parameter, which can be used in the reflection-only context.</summary>
      <returns>A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the current parameter.</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
      <summary>Gets the optional custom modifiers of the parameter.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that identify the optional custom modifiers of the current parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
      <summary>Returns the real object that should be deserialized instead of the object that the serialized stream specifies.</summary>
      <returns>The actual object that is put into the graph.</returns>
      <param name="context">The serialized stream from which the current object is deserialized.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The parameter's position in the parameter list of its associated member is not valid for that member's type.</exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
      <summary>Gets the required custom modifiers of the parameter.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that identify the required custom modifiers of the current parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Determines if the custom attribute of the specified type is defined on this member.</summary>
      <returns>true if one or more instance of <paramref name="attributeType" /> is defined on this member; otherwise, false.</returns>
      <param name="attributeType">The Type object to search for. </param>
      <param name="inherit">This argument is ignored for objects of this type. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the common language runtime.</exception>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsIn">
      <summary>Gets a value indicating whether this is an input parameter.</summary>
      <returns>true if the parameter is an input parameter; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsLcid">
      <summary>Gets a value indicating whether this parameter is a locale identifier (lcid).</summary>
      <returns>true if the parameter is a locale identifier; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsOptional">
      <summary>Gets a value indicating whether this parameter is optional.</summary>
      <returns>true if the parameter is optional; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsOut">
      <summary>Gets a value indicating whether this is an output parameter.</summary>
      <returns>true if the parameter is an output parameter; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsRetval">
      <summary>Gets a value indicating whether this is a Retval parameter.</summary>
      <returns>true if the parameter is a Retval; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Member">
      <summary>Gets a value indicating the member in which the parameter is implemented.</summary>
      <returns>A MemberInfo object.</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.MemberImpl">
      <summary>The member in which the field is implemented.</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.MetadataToken">
      <summary>Gets a value that identifies this parameter in metadata.</summary>
      <returns>A value which, in combination with the module, uniquely identifies this parameter in metadata.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Name">
      <summary>Gets the name of the parameter.</summary>
      <returns>A String containing the simple name of this parameter.</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.NameImpl">
      <summary>The name of the parameter.</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.ParameterType">
      <summary>Gets the Type of this parameter.</summary>
      <returns>The Type object that represents the Type of this parameter.</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Position">
      <summary>Gets the zero-based position of the parameter in the formal parameter list.</summary>
      <returns>An integer representing the position this parameter occupies in the parameter list.</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.PositionImpl">
      <summary>The zero-based position of the parameter in the parameter list.</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.RawDefaultValue">
      <summary>Gets a value indicating the default value if the parameter has a default value.</summary>
      <returns>The default value of the parameter, or <see cref="F:System.DBNull.Value" /> if the parameter has no default value.</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.ToString">
      <summary>Gets the parameter type and name represented as a string.</summary>
      <returns>A string containing the type and the name of the parameter.</returns>
    </member>
    <member name="T:System.Reflection.ParameterModifier">
      <summary>Attaches a modifier to parameters so that binding can work with parameter signatures in which the types have been modified.</summary>
    </member>
    <member name="M:System.Reflection.ParameterModifier.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.ParameterModifier" /> structure representing the specified number of parameters.</summary>
      <param name="parameterCount">The number of parameters. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterCount" /> is negative. </exception>
    </member>
    <member name="P:System.Reflection.ParameterModifier.Item(System.Int32)">
      <summary>Gets or sets a value that specifies whether the parameter at the specified index position is to be modified by the current <see cref="T:System.Reflection.ParameterModifier" />.</summary>
      <returns>true if the parameter at this index position is to be modified by this <see cref="T:System.Reflection.ParameterModifier" />; otherwise, false.</returns>
      <param name="index">The index position of the parameter whose modification status is being examined or set. </param>
    </member>
    <member name="T:System.Reflection.Pointer">
      <summary>Provides a wrapper class for pointers.</summary>
    </member>
    <member name="M:System.Reflection.Pointer.Box(System.Void*,System.Type)">
      <summary>Boxes the supplied unmanaged memory pointer and the type associated with that pointer into a managed <see cref="T:System.Reflection.Pointer" /> wrapper object. The value and the type are saved so they can be accessed from the native code during an invocation.</summary>
      <returns>A pointer object.</returns>
      <param name="ptr">The supplied unmanaged memory pointer. </param>
      <param name="type">The type associated with the <paramref name="ptr" /> parameter. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a pointer. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Pointer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the file name, fusion log, and additional exception information.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Reflection.Pointer.Unbox(System.Object)">
      <summary>Returns the stored pointer.</summary>
      <returns>This method returns void.</returns>
      <param name="ptr">The stored pointer. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is not a pointer. </exception>
    </member>
    <member name="T:System.Reflection.PortableExecutableKinds">
      <summary>Identifies the nature of the code in an executable file.</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.NotAPortableExecutableImage">
      <summary>The file is not in portable executable (PE) file format.</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.ILOnly">
      <summary>The executable contains only Microsoft intermediate language (MSIL), and is therefore neutral with respect to 32-bit or 64-bit platforms.</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.Required32Bit">
      <summary>The executable can be run on a 32-bit platform, or in the 32-bit Windows on Windows (WOW) environment on a 64-bit platform.</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.PE32Plus">
      <summary>The executable requires a 64-bit platform.</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.Unmanaged32Bit">
      <summary>The executable contains pure unmanaged code.</summary>
    </member>
    <member name="T:System.Reflection.ProcessorArchitecture">
      <summary>Identifies the processor and bits-per-word of the platform targeted by an executable.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.None">
      <summary>An unknown or unspecified combination of processor and bits-per-word.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.MSIL">
      <summary>Neutral with respect to processor and bits-per-word.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.X86">
      <summary>A 32-bit Intel processor, either native or in the Windows on Windows (WOW) environment on a 64-bit platform.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.IA64">
      <summary>A 64-bit Intel processor only.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.Amd64">
      <summary>A 64-bit AMD processor only.</summary>
    </member>
    <member name="T:System.Reflection.PropertyAttributes">
      <summary>Defines the attributes that can be associated with a property. These attribute values are defined in corhdr.h.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.None">
      <summary>Specifies that no attributes are associated with a property.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.SpecialName">
      <summary>Specifies that the property is special, with the name describing how the property is special.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.ReservedMask">
      <summary>Specifies a flag reserved for runtime use only.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.RTSpecialName">
      <summary>Specifies that the metadata internal APIs check the name encoding.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.HasDefault">
      <summary>Specifies that the property has a default value.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved2">
      <summary>Reserved.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved3">
      <summary>Reserved.</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved4">
      <summary>Reserved.</summary>
    </member>
    <member name="T:System.Reflection.PropertyInfo">
      <summary>Discovers the attributes of a property and provides access to property metadata.</summary>
    </member>
    <member name="M:System.Reflection.PropertyInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.PropertyInfo" /> class.</summary>
    </member>
    <member name="P:System.Reflection.PropertyInfo.Attributes">
      <summary>Gets the attributes for this property.</summary>
      <returns>Attributes of this property.</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.CanRead">
      <summary>Gets a value indicating whether the property can be read.</summary>
      <returns>true if this property can be read; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.CanWrite">
      <summary>Gets a value indicating whether the property can be written to.</summary>
      <returns>true if this property can be written to; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> equals the type and value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance, or null.</param>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetAccessors">
      <summary>Returns an array whose elements reflect the public get, set, and other accessors of the property reflected by the current instance.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects that reflect the public get, set, and other accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
      <summary>Returns an array whose elements reflect the public and, if specified, non-public get, set, and other accessors of the property reflected by the current instance.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects whose elements reflect the get, set, and other accessors of the property reflected by the current instance. If <paramref name="nonPublic" /> is true, this array contains public and non-public get, set, and other accessors. If <paramref name="nonPublic" /> is false, this array contains only public get, set, and other accessors. If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.</returns>
      <param name="nonPublic">Indicates whether non-public methods should be returned in the MethodInfo array. true if non-public methods are to be included; otherwise, false. </param>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetConstantValue">
      <summary>Returns a literal value associated with the property by a compiler. </summary>
      <returns>An <see cref="T:System.Object" /> that contains the literal value associated with the property. If the literal value is a class type with an element value of zero, the return value is null.</returns>
      <exception cref="T:System.InvalidOperationException">The Constant table in unmanaged metadata does not contain a constant value for the current property.</exception>
      <exception cref="T:System.FormatException">The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata. </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetGetMethod">
      <summary>Returns the public get accessor for this property.</summary>
      <returns>A MethodInfo object representing the public get accessor for this property, or null if the get accessor is non-public or does not exist.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
      <summary>When overridden in a derived class, returns the public or non-public get accessor for this property.</summary>
      <returns>A MethodInfo object representing the get accessor for this property, if <paramref name="nonPublic" /> is true. Returns null if <paramref name="nonPublic" /> is false and the get accessor is non-public, or if <paramref name="nonPublic" /> is true but no get accessors exist.</returns>
      <param name="nonPublic">Indicates whether a non-public get accessor should be returned. true if a non-public accessor is to be returned; otherwise, false. </param>
      <exception cref="T:System.Security.SecurityException">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect on this non-public method. </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetIndexParameters">
      <summary>When overridden in a derived class, returns an array of all the index parameters for the property.</summary>
      <returns>An array of type ParameterInfo containing the parameters for the indexes.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
      <summary>Returns an array of types representing the optional custom modifiers of the property.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that identify the optional custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetRawConstantValue">
      <summary>Returns a literal value associated with the property by a compiler. </summary>
      <returns>An <see cref="T:System.Object" /> that contains the literal value associated with the property. If the literal value is a class type with an element value of zero, the return value is null.</returns>
      <exception cref="T:System.InvalidOperationException">The Constant table in unmanaged metadata does not contain a constant value for the current property.</exception>
      <exception cref="T:System.FormatException">The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures. </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
      <summary>Returns an array of types representing the required custom modifiers of the property.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that identify the required custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetSetMethod">
      <summary>Returns the public set accessor for this property.</summary>
      <returns>The MethodInfo object representing the Set method for this property if the set accessor is public, or null if the set accessor is not public.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
      <summary>When overridden in a derived class, returns the set accessor for this property.</summary>
      <returns>Value Condition A <see cref="T:System.Reflection.MethodInfo" /> object representing the Set method for this property. The set accessor is public.-or- <paramref name="nonPublic" /> is true and the set accessor is non-public. null<paramref name="nonPublic" /> is true, but the property is read-only.-or- <paramref name="nonPublic" /> is false and the set accessor is non-public.-or- There is no set accessor. </returns>
      <param name="nonPublic">Indicates whether the accessor should be returned if it is non-public. true if a non-public accessor is to be returned; otherwise, false. </param>
      <exception cref="T:System.Security.SecurityException">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect on this non-public method. </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
      <summary>Returns the value of the property with optional index values for indexed properties.</summary>
      <returns>The property value for the <paramref name="obj" /> parameter.</returns>
      <param name="obj">The object whose property value will be returned. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="index" /> array does not contain the type of arguments needed.-or- The property's get accessor is not found. </exception>
      <exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes. </exception>
      <exception cref="T:System.MethodAccessException">There was an illegal attempt to access a private or protected method inside a class. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>When overridden in a derived class, returns the value of a property having the specified binding, index, and <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <returns>The property value for <paramref name="obj" />.</returns>
      <param name="obj">The object whose property value will be returned. </param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags : InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. A suitable invocation attribute must be specified. If a static member is to be invoked, the Static flag of BindingFlags must be set. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
      <param name="culture">The CultureInfo object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the CultureInfo.Parent method will be called successively in search of a match. If this value is null, the CultureInfo is obtained from the CultureInfo.CurrentUICulture property. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="index" /> array does not contain the type of arguments needed.-or- The property's get accessor is not found. </exception>
      <exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes. </exception>
      <exception cref="T:System.MethodAccessException">There was an illegal attempt to access a private or protected method inside a class. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</exception>
    </member>
    <member name="P:System.Reflection.PropertyInfo.IsSpecialName">
      <summary>Gets a value indicating whether the property is the special name.</summary>
      <returns>true if this property is the special name; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.MemberType">
      <summary>Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a property.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a property.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.PropertyInfo" /> objects are equal.</summary>
      <returns>true if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
      <summary>Indicates whether two <see cref="T:System.Reflection.PropertyInfo" /> objects are not equal.</summary>
      <returns>true if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
    </member>
    <member name="P:System.Reflection.PropertyInfo.PropertyType">
      <summary>Gets the type of this property.</summary>
      <returns>The type of this property.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
      <summary>Sets the value of the property with optional index values for index properties.</summary>
      <param name="obj">The object whose property value will be set. </param>
      <param name="value">The new value for this property. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="index" /> array does not contain the type of arguments needed.-or- The property's set accessor is not found. </exception>
      <exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes. </exception>
      <exception cref="T:System.MethodAccessException">There was an illegal attempt to access a private or protected method inside a class. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>When overridden in a derived class, sets the property value for the given object to the given value.</summary>
      <param name="obj">The object whose property value will be set. </param>
      <param name="value">The new value for this property. </param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. A suitable invocation attribute must be specified. If a static member is to be invoked, the Static flag of BindingFlags must be set. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the CultureInfo.Parent method will be called successively in search of a match. If this value is null, the CultureInfo is obtained from the CultureInfo.CurrentUICulture property. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="index" /> array does not contain the type of arguments needed.-or- The property's set accessor is not found. </exception>
      <exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes. </exception>
      <exception cref="T:System.MethodAccessException">There was an illegal attempt to access a private or protected method inside a class. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType">
      <summary>Gets a <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.PropertyInfo" /> type.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.PropertyInfo" /> type.</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="T:System.Reflection.ReflectionTypeLoadException">
      <summary>The exception that is thrown by the <see cref="M:System.Reflection.Module.GetTypes" /> method if any of the classes in a module cannot be loaded. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[])">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.ReflectionTypeLoadException" /> class with the given classes and their associated exceptions.</summary>
      <param name="classes">An array of type Type containing the classes that were defined in the module and loaded. This array can contain null reference (Nothing in Visual Basic) values. </param>
      <param name="exceptions">An array of type Exception containing the exceptions that were thrown by the class loader. The null reference (Nothing in Visual Basic) values in the <paramref name="classes" /> array line up with the exceptions in this <paramref name="exceptions" /> array. </param>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[],System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.ReflectionTypeLoadException" /> class with the given classes, their associated exceptions, and exception descriptions.</summary>
      <param name="classes">An array of type Type containing the classes that were defined in the module and loaded. This array can contain null reference (Nothing in Visual Basic) values. </param>
      <param name="exceptions">An array of type Exception containing the exceptions that were thrown by the class loader. The null reference (Nothing in Visual Basic) values in the <paramref name="classes" /> array line up with the exceptions in this <paramref name="exceptions" /> array. </param>
      <param name="message">A String describing the reason the exception was thrown. </param>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Provides an <see cref="T:System.Runtime.Serialization.ISerializable" /> implementation for serialized objects.</summary>
      <param name="info">The information and data needed to serialize or deserialize an object. </param>
      <param name="context">The context for the serialization. </param>
      <exception cref="T:System.ArgumentNullException">info is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions">
      <summary>Gets the array of exceptions thrown by the class loader.</summary>
      <returns>An array of type Exception containing the exceptions thrown by the class loader. The null values in the <paramref name="classes" /> array of this instance line up with the exceptions in this array.</returns>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.Types">
      <summary>Gets the array of classes that were defined in the module and loaded.</summary>
      <returns>An array of type Type containing the classes that were defined in the module and loaded. This array can contain some null values.</returns>
    </member>
    <member name="T:System.Reflection.ResourceAttributes">
      <summary>Specifies the attributes for a manifest resource.</summary>
    </member>
    <member name="F:System.Reflection.ResourceAttributes.Public">
      <summary>A mask used to retrieve public manifest resources.</summary>
    </member>
    <member name="F:System.Reflection.ResourceAttributes.Private">
      <summary>A mask used to retrieve private manifest resources.</summary>
    </member>
    <member name="T:System.Reflection.ResourceLocation">
      <summary>Specifies the resource location.</summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.Embedded">
      <summary>Specifies an embedded (that is, non-linked) resource.</summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.ContainedInAnotherAssembly">
      <summary>Specifies that the resource is contained in another assembly.</summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.ContainedInManifestFile">
      <summary>Specifies that the resource is contained in the manifest file.</summary>
    </member>
    <member name="T:System.Reflection.StrongNameKeyPair">
      <summary>Encapsulates access to a public or private key pair used to sign strong name assemblies.</summary>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.StrongNameKeyPair" /> class, building the key pair from a byte array.</summary>
      <param name="keyPairArray">An array of type byte containing the key pair. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyPairArray" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.IO.FileStream)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.StrongNameKeyPair" /> class, building the key pair from a FileStream.</summary>
      <param name="keyPairFile">A FileStream containing the key pair. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyPairFile" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.StrongNameKeyPair" /> class, building the key pair from serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.StrongNameKeyPair" /> class, building the key pair from a String.</summary>
      <param name="keyPairContainer">A string containing the key pair. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyPairContainer" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:System.Reflection.StrongNameKeyPair.PublicKey">
      <summary>Gets the public part of the public key or public key token of the key pair.</summary>
      <returns>An array of type byte containing the public key or public key token of the key pair.</returns>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Runs when the entire object graph has been deserialized.</summary>
      <param name="sender">The object that initiated the callback.</param>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with all the data required to reinstantiate the current <see cref="T:System.Reflection.StrongNameKeyPair" /> object.</summary>
      <param name="info">The object to be populated with serialization information.</param>
      <param name="context">The destination context of the serialization.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="info" /> is null.</exception>
    </member>
    <member name="T:System.Reflection.TargetException">
      <summary>Represents the exception that is thrown when an attempt is made to invoke an invalid target.</summary>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetException" /> class with an empty message and the root cause of the exception.</summary>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetException" /> class with the specified serialization and context information.</summary>
      <param name="info">The data for serializing or deserializing the object. </param>
      <param name="context">The source of and destination for the object. </param>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetException" /> class with the given message and the root cause exception.</summary>
      <param name="message">A String describing the reason why the exception occurred. </param>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Reflection.TargetInvocationException">
      <summary>The exception that is thrown by methods invoked through reflection. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetInvocationException" /> class with a reference to the inner exception that is the cause of this exception.</summary>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetInvocationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Reflection.TargetParameterCountException">
      <summary>The exception that is thrown when the number of parameters for an invocation does not match the number expected. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetParameterCountException" /> class with an empty message string and the root cause of the exception.</summary>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetParameterCountException" /> class with its message string set to the given message and the root cause exception.</summary>
      <param name="message">A String describing the reason this exception was thrown. </param>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TargetParameterCountException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Reflection.TypeAttributes">
      <summary>Specifies type attributes.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.VisibilityMask">
      <summary>Specifies type visibility information.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NotPublic">
      <summary>Specifies that the class is not public.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Public">
      <summary>Specifies that the class is public.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPublic">
      <summary>Specifies that the class is nested with public visibility.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPrivate">
      <summary>Specifies that the class is nested with private visibility.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamily">
      <summary>Specifies that the class is nested with family visibility, and is thus accessible only by methods within its own type and any subtypes.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedAssembly">
      <summary>Specifies that the class is nested with assembly visibility, and is thus accessible only by methods within its assembly.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamANDAssem">
      <summary>Specifies that the class is nested with assembly and family visibility, and is thus accessible only by methods lying in the intersection of its family and assembly.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamORAssem">
      <summary>Specifies that the class is nested with family or assembly visibility, and is thus accessible only by methods lying in the union of its family and assembly.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.LayoutMask">
      <summary>Specifies class layout information.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoLayout">
      <summary>Specifies that class fields are automatically laid out by the common language runtime.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SequentialLayout">
      <summary>Specifies that class fields are laid out sequentially, in the order that the fields were emitted to the metadata.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ExplicitLayout">
      <summary>Specifies that class fields are laid out at the specified offsets.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ClassSemanticsMask">
      <summary>Specifies class semantics information; the current class is contextful (else agile).</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Class">
      <summary>Specifies that the type is a class.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Interface">
      <summary>Specifies that the type is an interface.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Abstract">
      <summary>Specifies that the type is abstract.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Sealed">
      <summary>Specifies that the class is concrete and cannot be extended.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SpecialName">
      <summary>Specifies that the class is special in a way denoted by the name.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Import">
      <summary>Specifies that the class or interface is imported from another module.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Serializable">
      <summary>Specifies that the class can be serialized.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.StringFormatMask">
      <summary>Used to retrieve string information for native interoperability.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AnsiClass">
      <summary>LPTSTR is interpreted as ANSI.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.UnicodeClass">
      <summary>LPTSTR is interpreted as UNICODE.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoClass">
      <summary>LPTSTR is interpreted automatically.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.CustomFormatClass">
      <summary>LPSTR is interpreted by some implementation-specific means, which includes the possibility of throwing a <see cref="T:System.NotSupportedException" />. Not used in the Microsoft implementation of the .NET Framework.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.CustomFormatMask">
      <summary>Used to retrieve non-standard encoding information for native interop. The meaning of the values of these 2 bits is unspecified. Not used in the Microsoft implementation of the .NET Framework.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.BeforeFieldInit">
      <summary>Specifies that calling static methods of the type does not force the system to initialize the type.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ReservedMask">
      <summary>Attributes reserved for runtime use.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.RTSpecialName">
      <summary>Runtime should check name encoding.</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.HasSecurity">
      <summary>Type has security associate with it.</summary>
    </member>
    <member name="T:System.Reflection.TypeDelegator">
      <summary>Wraps a Type object and delegates all methods to that Type.</summary>
    </member>
    <member name="M:System.Reflection.TypeDelegator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> class with default properties.</summary>
    </member>
    <member name="M:System.Reflection.TypeDelegator.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> class specifying the encapsulating instance.</summary>
      <param name="delegatingType">The instance of the class <see cref="T:System.Type" /> that encapsulates the call to the method of an object. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegatingType" /> is null. </exception>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Assembly">
      <summary>Gets the assembly of the implemented type.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> object representing the assembly of the implemented type.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.AssemblyQualifiedName">
      <summary>Gets the assembly's fully qualified name.</summary>
      <returns>A String containing the assembly's fully qualified name.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.BaseType">
      <summary>Gets the base type for the current type.</summary>
      <returns>The base type for a type.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.FullName">
      <summary>Gets the fully qualified name of the implemented type.</summary>
      <returns>A String containing the type's fully qualified name.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetAttributeFlagsImpl">
      <summary>Gets the attributes assigned to the TypeDelegator.</summary>
      <returns>A TypeAttributes object representing the implementation attribute flags.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Gets the constructor that implemented the TypeDelegator.</summary>
      <returns>A ConstructorInfo object for the method that matches the specified criteria, or null if a match cannot be found.</returns>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="callConvention">The calling conventions. </param>
      <param name="types">An array of type Type containing a list of the parameter number, order, and types. Types cannot be null; use an appropriate GetMethod method or an empty array to search for a method without parameters. </param>
      <param name="modifiers">An array of type ParameterModifier having the same length as the <paramref name="types" /> array, whose elements represent the attributes associated with the parameters of the method to get. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing constructors defined for the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <returns>An array of type ConstructorInfo containing the specified constructors defined for this class. If no constructors are defined, an empty array is returned. Depending on the value of a specified parameter, only public constructors or both public and non-public constructors will be returned.</returns>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for this type, specifying whether to search the type's inheritance chain.</summary>
      <returns>An array of objects containing all the custom attributes defined for this type.</returns>
      <param name="inherit">Specifies whether to search this type's inheritance chain to find the attributes. </param>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes identified by type.</summary>
      <returns>An array of objects containing the custom attributes defined in this type that match the <paramref name="attributeType" /> parameter, specifying whether to search the type's inheritance chain, or null if no custom attributes are defined on this type.</returns>
      <param name="attributeType">An array of custom attributes identified by type.</param>
      <param name="inherit">Specifies whether to search this type's inheritance chain to find the attributes. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetElementType">
      <summary>Returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or ByRef.</summary>
      <returns>The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or ByRef, or null if the current <see cref="T:System.Type" /> is not an array, a pointer or a ByRef.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the specified event.</summary>
      <returns>An <see cref="T:System.Reflection.EventInfo" /> object representing the event declared or inherited by this type with the specified name. This method returns null if no such event is found.</returns>
      <param name="name">The name of the event to get. </param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvents">
      <summary>Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events declared or inherited by the current TypeDelegator.</summary>
      <returns>Returns an array of type EventInfo containing all the events declared or inherited by the current type. If there are no events, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)">
      <summary>Returns the events specified in <paramref name="bindingAttr" /> that are declared or inherited by the current TypeDelegator.</summary>
      <returns>An array of type EventInfo containing the events specified in <paramref name="bindingAttr" />. If there are no events, an empty array is returned.</returns>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns a <see cref="T:System.Reflection.FieldInfo" /> object representing the field with the specified name.</summary>
      <returns>A FieldInfo object representing the field declared or inherited by this TypeDelegator with the specified name. Returns null if no such field is found.</returns>
      <param name="name">The name of the field to find. </param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects representing the data fields defined for the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <returns>An array of type FieldInfo containing the fields declared or inherited by the current TypeDelegator. An empty array is returned if there are no matched fields.</returns>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
      <summary>Returns the specified interface implemented by the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <returns>A Type object representing the interface implemented (directly or indirectly) by the current class with the fully qualified name matching the specified name. If no interface that matches name is found, null is returned.</returns>
      <param name="name">The fully qualified name of the interface implemented by the current class. </param>
      <param name="ignoreCase">true if the case is to be ignored; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)">
      <summary>Returns an interface mapping for the specified interface type.</summary>
      <returns>An <see cref="T:System.Reflection.InterfaceMapping" /> object representing the interface mapping for <paramref name="interfaceType" />.</returns>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface to retrieve a mapping of. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterfaces">
      <summary>Returns all the interfaces implemented on the current class and its base classes.</summary>
      <returns>An array of type Type containing all the interfaces implemented on the current class and its base classes. If none are defined, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Returns members (properties, methods, constructors, fields, events, and nested types) specified by the given <paramref name="name" />, <paramref name="type" />, and <paramref name="bindingAttr" />.</summary>
      <returns>An array of type MemberInfo containing all the members of the current class and its base class meeting the specified criteria.</returns>
      <param name="name">The name of the member to get. </param>
      <param name="type">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
      <param name="bindingAttr">The type of members to get. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
      <summary>Returns members specified by <paramref name="bindingAttr" />.</summary>
      <returns>An array of type MemberInfo containing all the members of the current class and its base classes that meet the <paramref name="bindingAttr" /> filter.</returns>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <returns>A MethodInfoInfo object for the implementation method that matches the specified criteria, or null if a match cannot be found.</returns>
      <param name="name">The method name. </param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="callConvention">The calling conventions. </param>
      <param name="types">An array of type Type containing a list of the parameter number, order, and types. Types cannot be null; use an appropriate GetMethod method or an empty array to search for a method without parameters. </param>
      <param name="modifiers">An array of type ParameterModifier having the same length as the <paramref name="types" /> array, whose elements represent the attributes associated with the parameters of the method to get. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.MethodInfo" /> objects representing specified methods of the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <returns>An array of MethodInfo objects representing the methods defined on this TypeDelegator.</returns>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>Returns a nested type specified by <paramref name="name" /> and in <paramref name="bindingAttr" /> that are declared or inherited by the type represented by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <returns>A Type object representing the nested type.</returns>
      <param name="name">The nested type's name. </param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>Returns the nested types specified in <paramref name="bindingAttr" /> that are declared or inherited by the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <returns>An array of type Type containing the nested types.</returns>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing properties of the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</summary>
      <returns>An array of PropertyInfo objects representing properties defined on this TypeDelegator.</returns>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object for the property that matches the specified criteria, or null if a match cannot be found.</returns>
      <param name="name">The property to get. </param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If <paramref name="binder" /> is null, the default binder is used. See <see cref="T:System.Reflection.Binder" />. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="types">A list of parameter types. The list represents the number, order, and types of the parameters. Types cannot be null; use an appropriate GetMethod method or an empty array to search for a method without parameters. </param>
      <param name="modifiers">An array of the same length as types with elements that represent the attributes associated with the parameters of the method to get. </param>
    </member>
    <member name="P:System.Reflection.TypeDelegator.GUID">
      <summary>Gets the GUID (globally unique identifier) of the implemented type.</summary>
      <returns>A GUID.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.HasElementTypeImpl">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer or a ByRef.</summary>
      <returns>true if the <see cref="T:System.Type" /> is an array, a pointer or a ByRef; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</summary>
      <returns>An Object representing the return value of the invoked member.</returns>
      <param name="name">The name of the member to invoke. This may be a constructor, method, property, or field. If an empty string ("") is passed, the default member is invoked. </param>
      <param name="invokeAttr">The invocation attribute. This must be one of the following <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. A suitable invocation attribute must be specified. If a static member is to be invoked, the Static flag must be set. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If <paramref name="binder" /> is null, the default binder is used. See <see cref="T:System.Reflection.Binder" />. </param>
      <param name="target">The object on which to invoke the specified member. </param>
      <param name="args">An array of type Object that contains the number, order, and type of the parameters of the member to be invoked. If <paramref name="args" /> contains an uninitialized Object, it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or a string. </param>
      <param name="modifiers">An array of type ParameterModifer that is the same length as <paramref name="args" />, with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the member's signature. For ByRef, use ParameterModifer.ByRef, and for none, use ParameterModifer.None. The default binder does exact matching on these. Attributes such as In and InOut are not used in binding, and can be viewed using ParameterInfo. </param>
      <param name="culture">An instance of CultureInfo used to govern the coercion of types. This is necessary, for example, to convert a string that represents 1000 to a Double value, since 1000 is represented differently by different cultures. If <paramref name="culture" /> is null, the CultureInfo for the current thread's CultureInfo is used. </param>
      <param name="namedParameters">An array of type String containing parameter names that match up, starting at element zero, with the <paramref name="args" /> array. There must be no holes in the array. If <paramref name="args" />. Length is greater than <paramref name="namedParameters" />. Length, the remaining parameters are filled in order. </param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsArrayImpl">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is an array.</summary>
      <returns>true if the <see cref="T:System.Type" /> is an array; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsByRefImpl">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is passed by reference.</summary>
      <returns>true if the <see cref="T:System.Type" /> is passed by reference; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsCOMObjectImpl">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a COM object; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether a custom attribute identified by <paramref name="attributeType" /> is defined.</summary>
      <returns>true if a custom attribute identified by <paramref name="attributeType" /> is defined; otherwise, false.</returns>
      <param name="attributeType">Specifies whether to search this type's inheritance chain to find the attributes. </param>
      <param name="inherit">An array of custom attributes identified by type. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">The custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsPointerImpl">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a pointer; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsPrimitiveImpl">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.</summary>
      <returns>true if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsValueTypeImpl">
      <summary>Gets a value indicating whether the type is a value type; that is, not a class or an interface.</summary>
      <returns>true if the type is a value type; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.MetadataToken">
      <summary>Gets a value that identifies this entity in metadata.</summary>
      <returns>A value which, in combination with the module, uniquely identifies this entity in metadata.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Module">
      <summary>Gets the module that contains the implemented type.</summary>
      <returns>A <see cref="T:System.Reflection.Module" /> object representing the module of the implemented type.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Name">
      <summary>Gets the name of the implemented type, with the path removed.</summary>
      <returns>A String containing the type's non-qualified name.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Namespace">
      <summary>Gets the namespace of the implemented type.</summary>
      <returns>A String containing the type's namespace.</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.TypeHandle">
      <summary>Gets a handle to the internal metadata representation of an implemented type.</summary>
      <returns>A RuntimeTypeHandle object.</returns>
    </member>
    <member name="F:System.Reflection.TypeDelegator.typeImpl">
      <summary>A value indicating type information.</summary>
    </member>
    <member name="P:System.Reflection.TypeDelegator.UnderlyingSystemType">
      <summary>Gets the underlying <see cref="T:System.Type" /> that represents the implemented type.</summary>
      <returns>The underlying type.</returns>
    </member>
    <member name="T:System.Reflection.TypeFilter">
      <summary>Filters the classes represented in an array of <see cref="T:System.Type" /> objects.</summary>
      <returns>true to include the <see cref="T:System.Type" /> in the filtered list; otherwise false.</returns>
      <param name="m">The Type object to which the filter is applied. </param>
      <param name="filterCriteria">An arbitrary object used to filter the list. </param>
    </member>
    <member name="P:System.Reflection.MethodInfo.ContainsGenericParameters">
      <summary>Gets a value indicating whether a generic method contains unassigned generic type parameters.</summary>
      <returns>true if the current <see cref="T:System.Reflection.MethodInfo" /> contains unassigned generic type parameters; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.IsGenericMethod">
      <summary>Gets a value indicating whether the current method is a generic method.</summary>
      <returns>true if the current method is a generic method; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.IsGenericMethodDefinition">
      <summary>Gets a value indicating whether the current <see cref="T:System.Reflection.MethodInfo" /> represents the definition of a generic method.</summary>
      <returns>true if the <see cref="T:System.Reflection.MethodInfo" /> object represents the definition of a generic method; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.Equals(System.Object)">
      <summary>Determines whether this module and the specified object are equal.</summary>
      <returns>true if <paramref name="obj" /> is equal to this instance; otherwise, false.</returns>
      <param name="obj">The object to compare with this instance. </param>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilder">
      <summary>Defines and represents a dynamic assembly.</summary>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.AddResourceFile(System.String,System.String)">
      <summary>Adds an existing resource file to this assembly.</summary>
      <param name="name">The logical name of the resource. </param>
      <param name="fileName">The physical file name (.resources file) to which the logical name is mapped. This should not include a path; the file must be in the same directory as the assembly to which it is added. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> has been previously defined.-or- There is another file in the assembly named <paramref name="fileName" />.-or- The length of <paramref name="name" /> is zero.-or- The length of <paramref name="fileName" /> is zero, or if <paramref name="fileName" /> includes a path. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="fileName" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file <paramref name="fileName" /> is not found. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.AddResourceFile(System.String,System.String,System.Reflection.ResourceAttributes)">
      <summary>Adds an existing resource file to this assembly.</summary>
      <param name="name">The logical name of the resource. </param>
      <param name="fileName">The physical file name (.resources file) to which the logical name is mapped. This should not include a path; the file must be in the same directory as the assembly to which it is added. </param>
      <param name="attribute">The resource attributes. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> has been previously defined.-or- There is another file in the assembly named <paramref name="fileName" />.-or- The length of <paramref name="name" /> is zero or if the length of <paramref name="fileName" /> is zero.-or- <paramref name="fileName" /> includes a path. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="fileName" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">If the file <paramref name="fileName" /> is not found. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.CodeBase">
      <summary>Gets the location of the assembly, as specified originally (such as in an <see cref="T:System.Reflection.AssemblyName" /> object).</summary>
      <returns>The location of the assembly, as specified originally.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)">
      <summary>Defines a named transient dynamic module in this assembly.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.ModuleBuilder" /> representing the defined dynamic module.</returns>
      <param name="name">The name of the dynamic module. Must be less than 260 characters in length. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> begins with white space.-or- The length of <paramref name="name" /> is zero.-or- The length of <paramref name="name" /> is greater than or equal to 260. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ExecutionEngineException">The assembly for default symbol writer cannot be loaded.-or- The type that implements the default symbol writer interface cannot be found. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.Boolean)">
      <summary>Defines a named transient dynamic module in this assembly and specifies whether symbol information should be emitted.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.ModuleBuilder" /> representing the defined dynamic module.</returns>
      <param name="name">The name of the dynamic module. Must be less than 260 characters in length. </param>
      <param name="emitSymbolInfo">true if symbol information is to be emitted; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> begins with white space.-or- The length of <paramref name="name" /> is zero.-or- The length of <paramref name="name" /> is greater than or equal to 260. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.ExecutionEngineException">The assembly for default symbol writer cannot be loaded.-or- The type that implements the default symbol writer interface cannot be found. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.String)">
      <summary>Defines a persistable dynamic module with the given name that will be saved to the specified file. No symbol information is emitted.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.ModuleBuilder" /> object representing the defined dynamic module.</returns>
      <param name="name">The name of the dynamic module. Must be less than 260 characters in length. </param>
      <param name="fileName">The name of the file to which the dynamic module should be saved. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="fileName" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> or <paramref name="fileName" /> is zero.-or- The length of <paramref name="name" /> is greater than or equal to 260.-or- <paramref name="fileName" /> contains a path specification (a directory component, for example).-or- There is a conflict with the name of another file that belongs to this assembly. </exception>
      <exception cref="T:System.InvalidOperationException">This assembly has been previously saved. </exception>
      <exception cref="T:System.NotSupportedException">This assembly was called on a dynamic assembly with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Run" /> attribute. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ExecutionEngineException">The assembly for default symbol writer cannot be loaded.-or- The type that implements the default symbol writer interface cannot be found. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.String,System.Boolean)">
      <summary>Defines a persistable dynamic module, specifying the module name, the name of the file to which the module will be saved, and whether symbol information should be emitted using the default symbol writer.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.ModuleBuilder" /> object representing the defined dynamic module.</returns>
      <param name="name">The name of the dynamic module. Must be less than 260 characters in length. </param>
      <param name="fileName">The name of the file to which the dynamic module should be saved. </param>
      <param name="emitSymbolInfo">If true, symbolic information is written using the default symbol writer. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="fileName" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> or <paramref name="fileName" /> is zero.-or- The length of <paramref name="name" /> is greater than or equal to 260.-or- <paramref name="fileName" /> contains a path specification (a directory component, for example).-or- There is a conflict with the name of another file that belongs to this assembly. </exception>
      <exception cref="T:System.InvalidOperationException">This assembly has been previously saved. </exception>
      <exception cref="T:System.NotSupportedException">This assembly was called on a dynamic assembly with the <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Run" /> attribute. </exception>
      <exception cref="T:System.ExecutionEngineException">The assembly for default symbol writer cannot be loaded.-or- The type that implements the default symbol writer interface cannot be found. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineResource(System.String,System.String,System.String)">
      <summary>Defines a standalone managed resource for this assembly with the default public resource attribute.</summary>
      <returns>A <see cref="T:System.Resources.ResourceWriter" /> object for the specified resource.</returns>
      <param name="name">The logical name of the resource. </param>
      <param name="description">A textual description of the resource. </param>
      <param name="fileName">The physical file name (.resources file) to which the logical name is mapped. This should not include a path. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> has been previously defined.-or- There is another file in the assembly named <paramref name="fileName" />.-or- The length of <paramref name="name" /> is zero.-or- The length of <paramref name="fileName" /> is zero.-or- <paramref name="fileName" /> includes a path. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="fileName" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineResource(System.String,System.String,System.String,System.Reflection.ResourceAttributes)">
      <summary>Defines a standalone managed resource for this assembly. Attributes can be specified for the managed resource.</summary>
      <returns>A <see cref="T:System.Resources.ResourceWriter" /> object for the specified resource.</returns>
      <param name="name">The logical name of the resource. </param>
      <param name="description">A textual description of the resource. </param>
      <param name="fileName">The physical file name (.resources file) to which the logical name is mapped. This should not include a path. </param>
      <param name="attribute">The resource attributes. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> has been previously defined or if there is another file in the assembly named <paramref name="fileName" />.-or- The length of <paramref name="name" /> is zero.-or- The length of <paramref name="fileName" /> is zero.-or- <paramref name="fileName" /> includes a path. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="fileName" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource(System.Byte[])">
      <summary>Defines an unmanaged resource for this assembly as an opaque blob of bytes.</summary>
      <param name="resource">The opaque blob of bytes representing the unmanaged resource. </param>
      <exception cref="T:System.ArgumentException">An unmanaged resource was previously defined. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resource" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource(System.String)">
      <summary>Defines an unmanaged resource file for this assembly given the name of the resource file.</summary>
      <param name="resourceFileName">The name of the resource file. </param>
      <exception cref="T:System.ArgumentException">An unmanaged resource was previously defined.-or- The file <paramref name="resourceFileName" /> is not readable.-or- <paramref name="resourceFileName" /> is the empty string (""). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceFileName" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="resourceFileName" /> is not found.-or- <paramref name="resourceFileName" /> is a directory. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource">
      <summary>Defines an unmanaged version information resource using the information specified in the assembly's AssemblyName object and the assembly's custom attributes.</summary>
      <exception cref="T:System.ArgumentException">An unmanaged version information resource was previously defined.-or- The unmanaged version information is too large to persist. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)">
      <summary>Defines an unmanaged version information resource for this assembly with the given specifications.</summary>
      <param name="product">The name of the product with which this assembly is distributed. </param>
      <param name="productVersion">The version of the product with which this assembly is distributed. </param>
      <param name="company">The name of the company that produced this assembly. </param>
      <param name="copyright">Describes all copyright notices, trademarks, and registered trademarks that apply to this assembly. This should include the full text of all notices, legal symbols, copyright dates, trademark numbers, and so on. In English, this string should be in the format "Copyright Microsoft Corp. 1990-2001". </param>
      <param name="trademark">Describes all trademarks and registered trademarks that apply to this assembly. This should include the full text of all notices, legal symbols, trademark numbers, and so on. In English, this string should be in the format "Windows is a trademark of Microsoft Corporation". </param>
      <exception cref="T:System.ArgumentException">An unmanaged version information resource was previously defined.-or- The unmanaged version information is too large to persist. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.EntryPoint">
      <summary>Returns the entry point of this assembly.</summary>
      <returns>The entry point of this assembly.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to the specified object.</summary>
      <returns>true if <paramref name="obj" /> equals the type and value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance, or null.</param>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.Evidence">
      <summary>Gets the evidence for this assembly.</summary>
      <returns>The evidence for this assembly.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.FullName">
      <summary>Gets the display name of the current dynamic assembly. </summary>
      <returns>The display name of the dynamic assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" />.</summary>
      <returns>An array that contains the custom attributes; the array is empty if there are no attributes.</returns>
      <param name="inherit">This argument is ignored for objects of this type.</param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns all the custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" />, and that derive from a specified attribute type.</summary>
      <returns>An array that contains the custom attributes that are derived at any level from <paramref name="attributeType" />; the array is empty if there are no such attributes.</returns>
      <param name="attributeType">The base type from which attributes derive.</param>
      <param name="inherit">This argument is ignored for objects of this type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the runtime. For example, <paramref name="attributeType" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> object.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributesData">
      <summary>Returns <see cref="T:System.Reflection.CustomAttributeData" /> objects that contain information about the attributes that have been applied to the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" />. </summary>
      <returns>A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the current module.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)">
      <summary>Returns the dynamic module with the specified name.</summary>
      <returns>A ModuleBuilder object representing the requested dynamic module.</returns>
      <param name="name">The name of the requested dynamic module. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetExportedTypes">
      <summary>Gets the exported types defined in this assembly.</summary>
      <returns>An array of <see cref="T:System.Type" /> containing the exported types defined in this assembly.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFile(System.String)">
      <summary>Gets a <see cref="T:System.IO.FileStream" /> for the specified file in the file table of the manifest of this assembly.</summary>
      <returns>A <see cref="T:System.IO.FileStream" /> for the specified file, or null, if the file is not found.</returns>
      <param name="name">The name of the specified file. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFiles(System.Boolean)">
      <summary>Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.</summary>
      <returns>An array of <see cref="T:System.IO.FileStream" /> objects.</returns>
      <param name="getResourceModules">true to include resource modules; otherwise, false. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetLoadedModules(System.Boolean)">
      <summary>Returns all the loaded modules that are part of this assembly, and optionally includes resource modules. </summary>
      <returns>The loaded modules that are part of this assembly.</returns>
      <param name="getResourceModules">true to include resource modules; otherwise, false.</param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)">
      <summary>Returns information about how the given resource has been persisted.</summary>
      <returns>
        <see cref="T:System.Reflection.ManifestResourceInfo" /> populated with information about the resource's topology, or null if the resource is not found.</returns>
      <param name="resourceName">The name of the resource. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames">
      <summary>Loads the specified manifest resource from this assembly.</summary>
      <returns>An array of type String containing the names of all the resources.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported on a dynamic assembly. To get the manifest resource names, use <see cref="M:System.Reflection.Assembly.GetManifestResourceNames" />. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)">
      <summary>Loads the specified manifest resource from this assembly.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> representing this manifest resource.</returns>
      <param name="name">The name of the manifest resource being requested. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type,System.String)">
      <summary>Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> representing this manifest resource.</returns>
      <param name="type">The type whose namespace is used to scope the manifest resource name. </param>
      <param name="name">The name of the manifest resource being requested. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModule(System.String)">
      <summary>Gets the specified module in this assembly.</summary>
      <returns>The module being requested, or null if the module is not found.</returns>
      <param name="name">The name of the requested module.</param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModules(System.Boolean)">
      <summary>Gets all the modules that are part of this assembly, and optionally includes resource modules.</summary>
      <returns>The modules that are part of this assembly.</returns>
      <param name="getResourceModules">true to include resource modules; otherwise, false.</param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetName(System.Boolean)">
      <summary>Gets the <see cref="T:System.Reflection.AssemblyName" /> that was specified when the current dynamic assembly was created, and sets the code base as specified.</summary>
      <returns>The name of the dynamic assembly.</returns>
      <param name="copiedName">true to set the code base to the location of the assembly after it is shadow-copied; false to set the code base to the original location.</param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetReferencedAssemblies">
      <summary>Gets an incomplete list of <see cref="T:System.Reflection.AssemblyName" /> objects for the assemblies that are referenced by this <see cref="T:System.Reflection.Emit.AssemblyBuilder" />. </summary>
      <returns>An array of assembly names for the referenced assemblies. This array is not a complete list.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary>Gets the satellite assembly for the specified culture.</summary>
      <returns>The specified satellite assembly.</returns>
      <param name="culture">The specified culture. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The assembly cannot be found. </exception>
      <exception cref="T:System.IO.FileLoadException">The satellite assembly with a matching file name was found, but the CultureInfo did not match the one specified. </exception>
      <exception cref="T:System.BadImageFormatException">The satellite assembly is not a valid assembly. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary>Gets the specified version of the satellite assembly for the specified culture.</summary>
      <returns>The specified satellite assembly.</returns>
      <param name="culture">The specified culture. </param>
      <param name="version">The version of the satellite assembly. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. </exception>
      <exception cref="T:System.IO.FileLoadException">The satellite assembly with a matching file name was found, but the CultureInfo or the version did not match the one specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The assembly cannot be found. </exception>
      <exception cref="T:System.BadImageFormatException">The satellite assembly is not a valid assembly. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Gets the specified type from the types that have been defined and created in the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" />.</summary>
      <returns>The specified type, or null if the type is not found or has not been created yet. </returns>
      <param name="name">The name of the type to search for.</param>
      <param name="throwOnError">true to throw an exception if the type is not found; otherwise, false.</param>
      <param name="ignoreCase">true to ignore the case of the type name when searching; otherwise, false.</param>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache">
      <summary>Gets a value that indicates whether the assembly was loaded from the global assembly cache.</summary>
      <returns>Always false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.HostContext">
      <summary>Gets the host context where the dynamic assembly is being created.</summary>
      <returns>A value that indicates the host context where the dynamic assembly is being created.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion">
      <summary>Gets the version of the common language runtime that will be saved in the file containing the manifest.</summary>
      <returns>A string representing the common language runtime version.</returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether one or more instances of the specified attribute type is applied to this member.</summary>
      <returns>true if one or more instances of <paramref name="attributeType" /> is applied to this dynamic assembly; otherwise, false.</returns>
      <param name="attributeType">The type of attribute to test for.</param>
      <param name="inherit">This argument is ignored for objects of this type.</param>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.IsDynamic">
      <summary>Gets a value that indicates that the current assembly is a dynamic assembly.</summary>
      <returns>Always true.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.Location">
      <summary>Gets the location, in codebase format, of the loaded file that contains the manifest if it is not shadow-copied.</summary>
      <returns>The location of the loaded file that contains the manifest. If the loaded file has been shadow-copied, the Location is that of the file before being shadow-copied.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ManifestModule">
      <summary>Gets the module in the current <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> that contains the assembly manifest.</summary>
      <returns>The manifest module.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.PermissionSet">
      <summary>Gets the grant set of the current dynamic assembly.</summary>
      <returns>The grant set of the current dynamic assembly.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ReflectionOnly">
      <summary>Gets a value indicating whether the dynamic assembly is in the reflection-only context.</summary>
      <returns>true if the dynamic assembly is in the reflection-only context; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.Save(System.String)">
      <summary>Saves this dynamic assembly to disk.</summary>
      <param name="assemblyFileName">The file name of the assembly. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="assemblyFileName" /> is 0.-or- There are two or more modules resource files in the assembly with the same name.-or- The target directory of the assembly is invalid.-or- <paramref name="assemblyFileName" /> is not a simple file name (for example, has a directory or drive component), or more than one unmanaged resource, including a version information resource, was defined in this assembly.-or- The CultureInfo string in <see cref="T:System.Reflection.AssemblyCultureAttribute" /> is not a valid string and <see cref="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)" /> was called prior to calling this method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFileName" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">This assembly has been saved before.-or- This assembly has access Run<see cref="T:System.Reflection.Emit.AssemblyBuilderAccess" /></exception>
      <exception cref="T:System.IO.IOException">An output error occurs during the save. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has not been called for any of the types in the modules of the assembly to be written to disk. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.Save(System.String,System.Reflection.PortableExecutableKinds,System.Reflection.ImageFileMachine)">
      <summary>Saves this dynamic assembly to disk, specifying the nature of code in the assembly's executables and the target platform.</summary>
      <param name="assemblyFileName">The file name of the assembly.</param>
      <param name="portableExecutableKind">A bitwise combination of the <see cref="T:System.Reflection.PortableExecutableKinds" /> values that specifies the nature of the code.</param>
      <param name="imageFileMachine">One of the <see cref="T:System.Reflection.ImageFileMachine" /> values that specifies the target platform.</param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="assemblyFileName" /> is 0.-or- There are two or more modules resource files in the assembly with the same name.-or- The target directory of the assembly is invalid.-or- <paramref name="assemblyFileName" /> is not a simple file name (for example, has a directory or drive component), or more than one unmanaged resource, including a version information resources, was defined in this assembly.-or- The CultureInfo string in <see cref="T:System.Reflection.AssemblyCultureAttribute" /> is not a valid string and <see cref="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)" /> was called prior to calling this method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFileName" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">This assembly has been saved before.-or- This assembly has access Run<see cref="T:System.Reflection.Emit.AssemblyBuilderAccess" /></exception>
      <exception cref="T:System.IO.IOException">An output error occurs during the save. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has not been called for any of the types in the modules of the assembly to be written to disk. </exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.SecurityRuleSet">
      <summary>Gets a value that indicates which set of security rules the common language runtime (CLR) enforces for this assembly.</summary>
      <returns>The security rule set that the CLR enforces for this dynamic assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Set a custom attribute on this assembly using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> or <paramref name="binaryAttribute" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="con" /> is not a RuntimeConstructorInfo.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Set a custom attribute on this assembly using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint(System.Reflection.MethodInfo)">
      <summary>Sets the entry point for this dynamic assembly, assuming that a console application is being built.</summary>
      <param name="entryMethod">A reference to the method that represents the entry point for this dynamic assembly. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entryMethod" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="entryMethod" /> is not contained within this assembly. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint(System.Reflection.MethodInfo,System.Reflection.Emit.PEFileKinds)">
      <summary>Sets the entry point for this assembly and defines the type of the portable executable (PE file) being built.</summary>
      <param name="entryMethod">A reference to the method that represents the entry point for this dynamic assembly. </param>
      <param name="fileKind">The type of the assembly executable being built. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entryMethod" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="entryMethod" /> is not contained within this assembly. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.System#Runtime#InteropServices#_AssemblyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilderAccess">
      <summary>Defines the access modes for a dynamic assembly. </summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.Run">
      <summary>The dynamic assembly can be executed, but not saved.</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.Save">
      <summary>The dynamic assembly can be saved, but not executed.</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave">
      <summary>The dynamic assembly can be executed and saved.</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.ReflectionOnly">
      <summary>The dynamic assembly is loaded into the reflection-only context, and cannot be executed.</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.RunAndCollect">
      <summary>The dynamic assembly can be unloaded and its memory reclaimed, subject to the restrictions described in Collectible Assemblies for Dynamic Type Generation.</summary>
    </member>
    <member name="T:System.Reflection.Emit.ConstructorBuilder">
      <summary>Defines and represents a constructor of a dynamic class.</summary>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
      <summary>Adds declarative security to this constructor.</summary>
      <param name="action">The security action to be taken, such as Demand, Assert, and so on. </param>
      <param name="pset">The set of permissions the action applies to. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="action" /> is invalid (RequestMinimum, RequestOptional, and RequestRefuse are invalid). </exception>
      <exception cref="T:System.InvalidOperationException">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or- The permission set <paramref name="pset" /> contains an action that was added earlier by AddDeclarativeSecurity. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pset" /> is null. </exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Attributes">
      <summary>Retrieves the attributes for this constructor.</summary>
      <returns>Returns the attributes for this constructor.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.CallingConvention">
      <summary>Gets a <see cref="T:System.Reflection.CallingConventions" /> value that depends on whether the declaring type is generic.</summary>
      <returns>
        <see cref="F:System.Reflection.CallingConventions.HasThis" /> if the declaring type is generic; otherwise, <see cref="F:System.Reflection.CallingConventions.Standard" />. </returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
      <summary>Retrieves a reference to the <see cref="T:System.Type" /> object for the type that declares this member.</summary>
      <returns>Returns the <see cref="T:System.Type" /> object for the type that declares this member.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>Defines a parameter of this constructor.</summary>
      <returns>Returns a ParameterBuilder object that represents the new parameter of this constructor.</returns>
      <param name="iSequence">The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter. </param>
      <param name="attributes">The attributes of the parameter. </param>
      <param name="strParamName">The name of the parameter. The name can be the null string. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iSequence" /> is less than 0 (zero), or it is greater than the number of parameters of the constructor. </exception>
      <exception cref="T:System.InvalidOperationException">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for this constructor.</summary>
      <returns>Returns an array of objects representing all the custom attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> instance.</returns>
      <param name="inherit">Controls inheritance of custom attributes from base classes. This parameter is ignored. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns the custom attributes identified by the given type.</summary>
      <returns>Returns an array of type <see cref="T:System.Object" /> representing the attributes of this constructor.</returns>
      <param name="attributeType">The custom attribute type. </param>
      <param name="inherit">Controls inheritance of custom attributes from base classes. This parameter is ignored. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
      <summary>Gets an <see cref="T:System.Reflection.Emit.ILGenerator" /> for this constructor.</summary>
      <returns>Returns an <see cref="T:System.Reflection.Emit.ILGenerator" /> object for this constructor.</returns>
      <exception cref="T:System.InvalidOperationException">The constructor is a default constructor.-or-The constructor has <see cref="T:System.Reflection.MethodAttributes" /> or <see cref="T:System.Reflection.MethodImplAttributes" /> flags indicating that it should not have a method body.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
      <summary>Gets an <see cref="T:System.Reflection.Emit.ILGenerator" /> object, with the specified MSIL stream size, that can be used to build a method body for this constructor.</summary>
      <returns>An <see cref="T:System.Reflection.Emit.ILGenerator" /> for this constructor.</returns>
      <param name="streamSize">The size of the MSIL stream, in bytes.</param>
      <exception cref="T:System.InvalidOperationException">The constructor is a default constructor.-or-The constructor has <see cref="T:System.Reflection.MethodAttributes" /> or <see cref="T:System.Reflection.MethodImplAttributes" /> flags indicating that it should not have a method body. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags">
      <summary>Returns the method implementation flags for this constructor.</summary>
      <returns>The method implementation flags for this constructor.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetModule">
      <summary>Returns a reference to the module that contains this constructor.</summary>
      <returns>The module that contains this constructor.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
      <summary>Returns the parameters of this constructor.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.ParameterInfo" /> objects that represent the parameters of this constructor.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has not been called on this constructor's type, in the .NET Framework versions 1.0 and 1.1. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has not been called on this constructor's type, in the .NET Framework version 2.0. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetToken">
      <summary>Returns the <see cref="T:System.Reflection.Emit.MethodToken" /> that represents the token for this constructor.</summary>
      <returns>Returns the <see cref="T:System.Reflection.Emit.MethodToken" /> of this constructor.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.InitLocals">
      <summary>Gets or sets whether the local variables in this constructor should be zero-initialized.</summary>
      <returns>Read/write. Gets or sets whether the local variables in this constructor should be zero-initialized.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Dynamically invokes the constructor reflected by this instance with the specified arguments, under the constraints of the specified Binder.</summary>
      <returns>An instance of the class associated with the constructor.</returns>
      <param name="obj">The object that needs to be reinitialized. </param>
      <param name="invokeAttr">One of the BindingFlags values that specifies the type of binding that is desired. </param>
      <param name="binder">A Binder that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If <paramref name="binder" /> is null, then Binder.DefaultBinding is used. </param>
      <param name="parameters">An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters, this should be a null reference (Nothing in Visual Basic). </param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. You can retrieve the constructor using <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> on the returned <see cref="T:System.Reflection.ConstructorInfo" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes the constructor dynamically reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.</summary>
      <returns>Returns an <see cref="T:System.Object" /> that is the return value of the invoked constructor.</returns>
      <param name="invokeAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod, NonPublic, and so on. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If binder is null, the default binder is used. See <see cref="T:System.Reflection.Binder" />. </param>
      <param name="parameters">An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters this should be null. </param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. (For example, this is necessary to convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, since 1000 is represented differently by different cultures.) </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. You can retrieve the constructor using <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> on the returned <see cref="T:System.Reflection.ConstructorInfo" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Checks if the specified custom attribute type is defined.</summary>
      <returns>true if the specified custom attribute type is defined; otherwise, false.</returns>
      <param name="attributeType">A custom attribute type. </param>
      <param name="inherit">Controls inheritance of custom attributes from base classes. This parameter is ignored. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. You can retrieve the constructor using <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> on the returned <see cref="T:System.Reflection.ConstructorInfo" />. </exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
      <summary>Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.</summary>
      <returns>Returns the internal handle for the method. Use this handle to access the underlying metadata handle.</returns>
      <exception cref="T:System.NotSupportedException">This property is not supported on this class. </exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Module">
      <summary>Gets the dynamic module in which this constructor is defined.</summary>
      <returns>A <see cref="T:System.Reflection.Module" /> object that represents the dynamic module in which this constructor is defined.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Name">
      <summary>Retrieves the name of this constructor.</summary>
      <returns>Returns the name of this constructor.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
      <summary>Holds a reference to the <see cref="T:System.Type" /> object from which this object was obtained.</summary>
      <returns>Returns the Type object from which this object was obtained.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.ReturnType">
      <summary>Gets null.</summary>
      <returns>Returns null.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Set a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> or <paramref name="binaryAttribute" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Set a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary>Sets the method implementation flags for this constructor.</summary>
      <param name="attributes">The method implementation flags. </param>
      <exception cref="T:System.InvalidOperationException">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
      <summary>Sets this constructor's custom attribute associated with symbolic information.</summary>
      <param name="name">The name of the custom attribute. </param>
      <param name="data">The value of the custom attribute. </param>
      <exception cref="T:System.InvalidOperationException">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or- The module does not have a symbol writer defined. For example, the module is not a debug module. </exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Signature">
      <summary>Retrieves the signature of the field in the form of a string.</summary>
      <returns>Returns the signature of the field.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.ToString">
      <summary>Returns this <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> instance as a <see cref="T:System.String" />.</summary>
      <returns>Returns a <see cref="T:System.String" /> containing the name, attributes, and exceptions of this constructor, followed by the current Microsoft intermediate language (MSIL) stream.</returns>
    </member>
    <member name="T:System.Reflection.Emit.CustomAttributeBuilder">
      <summary>Helps build custom attributes.</summary>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[])">
      <summary>Initializes an instance of the CustomAttributeBuilder class given the constructor for the custom attribute and the arguments to the constructor.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="constructorArgs">The arguments to the constructor of the custom attribute. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="con" /> is static or private.-or- The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.-or- The type of supplied argument does not match the type of the parameter declared in the constructor. -or-A supplied argument is a reference type other than <see cref="T:System.String" /> or <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> or <paramref name="constructorArgs" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary>Initializes an instance of the CustomAttributeBuilder class given the constructor for the custom attribute, the arguments to the constructor, and a set of named field/value pairs.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="constructorArgs">The arguments to the constructor of the custom attribute. </param>
      <param name="namedFields">Named fields of the custom attribute. </param>
      <param name="fieldValues">Values for the named fields of the custom attribute. </param>
      <exception cref="T:System.ArgumentException">The lengths of the <paramref name="namedFields" /> and <paramref name="fieldValues" /> arrays are different.-or- <paramref name="con" /> is static or private.-or- The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.-or- The type of supplied argument does not match the type of the parameter declared in the constructor.-or- The types of the field values do not match the types of the named fields.-or- The field does not belong to the same class or base class as the constructor. -or-A supplied argument or named field is a reference type other than <see cref="T:System.String" /> or <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException">One of the parameters is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])">
      <summary>Initializes an instance of the CustomAttributeBuilder class given the constructor for the custom attribute, the arguments to the constructor, and a set of named property or value pairs.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="constructorArgs">The arguments to the constructor of the custom attribute. </param>
      <param name="namedProperties">Named properties of the custom attribute. </param>
      <param name="propertyValues">Values for the named properties of the custom attribute. </param>
      <exception cref="T:System.ArgumentException">The lengths of the <paramref name="namedProperties" /> and <paramref name="propertyValues" /> arrays are different.-or- <paramref name="con" /> is static or private.-or- The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.-or- The type of supplied argument does not match the type of the parameter declared in the constructor.-or- The types of the property values do not match the types of the named properties.-or- A property has no setter method.-or- The property does not belong to the same class or base class as the constructor. -or-A supplied argument or named property is a reference type other than <see cref="T:System.String" /> or <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException">One of the parameters is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary>Initializes an instance of the CustomAttributeBuilder class given the constructor for the custom attribute, the arguments to the constructor, a set of named property or value pairs, and a set of named field or value pairs.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="constructorArgs">The arguments to the constructor of the custom attribute. </param>
      <param name="namedProperties">Named properties of the custom attribute. </param>
      <param name="propertyValues">Values for the named properties of the custom attribute. </param>
      <param name="namedFields">Named fields of the custom attribute. </param>
      <param name="fieldValues">Values for the named fields of the custom attribute. </param>
      <exception cref="T:System.ArgumentException">The lengths of the <paramref name="namedProperties" /> and <paramref name="propertyValues" /> arrays are different.-or- The lengths of the <paramref name="namedFields" /> and <paramref name="fieldValues" /> arrays are different.-or- <paramref name="con" /> is static or private.-or- The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.-or- The type of supplied argument does not match the type of the parameter declared in the constructor.-or- The types of the property values do not match the types of the named properties.-or- The types of the field values do not match the types of the corresponding field types.-or- A property has no setter.-or- The property or field does not belong to the same class or base class as the constructor. -or-A supplied argument, named property, or named field is a reference type other than <see cref="T:System.String" /> or <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException">One of the parameters is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.System#Runtime#InteropServices#_CustomAttributeBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.System#Runtime#InteropServices#_CustomAttributeBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.System#Runtime#InteropServices#_CustomAttributeBuilder#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.System#Runtime#InteropServices#_CustomAttributeBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="T:System.Reflection.Emit.DynamicILInfo">
      <summary>Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.</summary>
    </member>
    <member name="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
      <summary>Gets the dynamic method whose body is generated by the current instance.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.DynamicMethod" /> object representing the dynamic method for which the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object is generating code.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
      <summary>Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing the signature for the associated dynamic method.</summary>
      <returns>A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.</returns>
      <param name="signature">An array that contains the signature.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
      <summary>Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a dynamic method to be called from the associated method.</summary>
      <returns>A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.</returns>
      <param name="method">The dynamic method to call.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
      <summary>Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a field to be accessed from the associated dynamic method.</summary>
      <returns>A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</returns>
      <param name="field">The field to be accessed. </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary>Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.</summary>
      <returns>A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</returns>
      <param name="field">The field to be accessed.</param>
      <param name="contextType">The generic type the field belongs to.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
      <summary>Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a method to be accessed from the associated dynamic method.</summary>
      <returns>A token that can be used as the operand of an MSIL instruction that accesses methods, such as <see cref="F:System.Reflection.Emit.OpCodes.Call" /> or <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</returns>
      <param name="method">The method to be accessed.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary>Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a method on a generic type.</summary>
      <returns>A token that can be used as the operand of an MSIL instruction that accesses methods, such as <see cref="F:System.Reflection.Emit.OpCodes.Call" /> or <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</returns>
      <param name="method">The method.</param>
      <param name="contextType">The generic type the method belongs to.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
      <summary>Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a type to be used in the associated dynamic method.</summary>
      <returns>A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</returns>
      <param name="type">The type to be used.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
      <summary>Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a string literal to be used in the associated dynamic method.</summary>
      <returns>A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</returns>
      <param name="literal">The string to be used.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
      <summary>Sets the code body of the associated dynamic method.</summary>
      <param name="code">A pointer to a byte array containing the MSIL stream.</param>
      <param name="codeSize">The number of bytes in the MSIL stream.</param>
      <param name="maxStackSize">The maximum number of items on the operand stack when the method is executing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="code" /> is null and <paramref name="codeSize" /> is greater than 0. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codeSize" /> is less than 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
      <summary>Sets the code body of the associated dynamic method.</summary>
      <param name="code">An array that contains the MSIL stream.</param>
      <param name="maxStackSize">The maximum number of items on the operand stack when the method is executing.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
      <summary>Sets the exception metadata for the associated dynamic method.</summary>
      <param name="exceptions">A pointer to a byte array containing the exception metadata.</param>
      <param name="exceptionsSize">The number of bytes of exception metadata.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> is null and <paramref name="exceptionSize" /> is greater than 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exceptionSize" /> is less than 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
      <summary>Sets the exception metadata for the associated dynamic method.</summary>
      <param name="exceptions">An array that contains the exception metadata.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
      <summary>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</summary>
      <param name="localSignature">An array that contains the layout of local variables for the associated <see cref="T:System.Reflection.Emit.DynamicMethod" />.</param>
      <param name="signatureSize">The number of bytes in the signature.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localSignature" /> is null and <paramref name="signatureSize" /> is greater than 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureSize" /> is less than 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
      <summary>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</summary>
      <param name="localSignature">An array that contains the layout of local variables for the associated <see cref="T:System.Reflection.Emit.DynamicMethod" />.</param>
    </member>
    <member name="T:System.Reflection.Emit.DynamicMethod">
      <summary>Defines and represents a dynamic method that can be compiled, executed, and discarded. Discarded methods are available for garbage collection.</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</summary>
      <param name="name">The name of the dynamic method. This can be a zero-length string, but it cannot be null.</param>
      <param name="attributes">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method. The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">The calling convention for the dynamic method. Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or null if the method has no return type. </param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. </param>
      <param name="m">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated. </param>
      <param name="skipVisibility">true to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">An element of <paramref name="parameterTypes" /> is null or <see cref="T:System.Void" />.-or-<paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. -or-<paramref name="m" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.-or-<paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.-or-<paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</summary>
      <param name="name">The name of the dynamic method. This can be a zero-length string, but it cannot be null.</param>
      <param name="attributes">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method. The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">The calling convention for the dynamic method. Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or null if the method has no return type. </param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. </param>
      <param name="owner">A <see cref="T:System.Type" /> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.</param>
      <param name="skipVisibility">true to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">An element of <paramref name="parameterTypes" /> is null or <see cref="T:System.Void" />. -or-<paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. -or-<paramref name="owner" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.-or-<paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.-or-<paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary>Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types. </summary>
      <param name="name">The name of the dynamic method. This can be a zero-length string, but it cannot be null. </param>
      <param name="returnType">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or null if the method has no return type. </param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. </param>
      <exception cref="T:System.ArgumentException">An element of <paramref name="parameterTypes" /> is null or <see cref="T:System.Void" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
      <summary>Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method. </summary>
      <param name="name">The name of the dynamic method. This can be a zero-length string, but it cannot be null. </param>
      <param name="returnType">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or null if the method has no return type. </param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. </param>
      <param name="restrictedSkipVisibility">true to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">An element of <paramref name="parameterTypes" /> is null or <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
      <summary>Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</summary>
      <param name="name">The name of the dynamic method. This can be a zero-length string, but it cannot be null. </param>
      <param name="returnType">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or null if the method has no return type. </param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. </param>
      <param name="m">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated. </param>
      <exception cref="T:System.ArgumentException">An element of <paramref name="parameterTypes" /> is null or <see cref="T:System.Void" />. -or-<paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. -or-<paramref name="m" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</summary>
      <param name="name">The name of the dynamic method. This can be a zero-length string, but it cannot be null. </param>
      <param name="returnType">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or null if the method has no return type. </param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. </param>
      <param name="m">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated. </param>
      <param name="skipVisibility">true to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method. </param>
      <exception cref="T:System.ArgumentException">An element of <paramref name="parameterTypes" /> is null or <see cref="T:System.Void" />. -or-<paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. -or-<paramref name="m" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
      <summary>Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</summary>
      <param name="name">The name of the dynamic method. This can be a zero-length string, but it cannot be null. </param>
      <param name="returnType">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or null if the method has no return type. </param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. </param>
      <param name="owner">A <see cref="T:System.Type" /> with which the dynamic method is logically associated. The dynamic method has access to all members of the type. </param>
      <exception cref="T:System.ArgumentException">An element of <paramref name="parameterTypes" /> is null or <see cref="T:System.Void" />.-or- <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. -or-<paramref name="owner" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> is null, or is a type for which <see cref="P:System.Type.IsByRef" /> returns true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</summary>
      <param name="name">The name of the dynamic method. This can be a zero-length string, but it cannot be null. </param>
      <param name="returnType">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or null if the method has no return type. </param>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. </param>
      <param name="owner">A <see cref="T:System.Type" /> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.</param>
      <param name="skipVisibility">true to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">An element of <paramref name="parameterTypes" /> is null or <see cref="T:System.Void" />.-or- <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. -or-<paramref name="owner" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> is null, or is a type for which <see cref="P:System.Type.IsByRef" /> returns true. </exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
      <summary>Gets the attributes specified when the dynamic method was created.</summary>
      <returns>A bitwise combination of the <see cref="T:System.Reflection.MethodAttributes" /> values representing the attributes for the method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
      <summary>Gets the calling convention specified when the dynamic method was created.</summary>
      <returns>One of the <see cref="T:System.Reflection.CallingConventions" /> values that indicates the calling convention of the method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
      <summary>Completes the dynamic method and creates a delegate that can be used to execute it.</summary>
      <returns>A delegate of the specified type, which can be used to execute the dynamic method.</returns>
      <param name="delegateType">A delegate type whose signature matches that of the dynamic method. </param>
      <exception cref="T:System.InvalidOperationException">The dynamic method has no method body.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
      <summary>Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</summary>
      <returns>A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</returns>
      <param name="delegateType">A delegate type whose signature matches that of the dynamic method, minus the first parameter.</param>
      <param name="target">An object the delegate is bound to. Must be of the same type as the first parameter of the dynamic method. </param>
      <exception cref="T:System.InvalidOperationException">The dynamic method has no method body.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.-or-<paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
      <summary>Gets the type that declares the method, which is always null for dynamic methods.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>Defines a parameter of the dynamic method.</summary>
      <returns>Always returns null. </returns>
      <param name="position">The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter. </param>
      <param name="attributes">A bitwise combination of <see cref="T:System.Reflection.ParameterAttributes" /> values that specifies the attributes of the parameter. </param>
      <param name="parameterName">The name of the parameter. The name can be a zero-length string. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The method has no parameters.-or- <paramref name="position" /> is less than 0.-or- <paramref name="position" /> is greater than the number of the method's parameters. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
      <summary>Returns the base implementation for the method.</summary>
      <returns>The base implementation of the method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for the method.</summary>
      <returns>An array of objects representing all the custom attributes of the method.</returns>
      <param name="inherit">true to search the method's inheritance chain to find the custom attributes; false to check only the current method. </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns the custom attributes of the specified type that have been applied to the method.</summary>
      <returns>An array of objects representing the attributes of the method that are of type <paramref name="attributeType" /> or derive from type <paramref name="attributeType" />.</returns>
      <param name="attributeType">A <see cref="T:System.Type" /> representing the type of custom attribute to return. </param>
      <param name="inherit">true to search the method's inheritance chain to find the custom attributes; false to check only the current method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
      <summary>Returns a <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
      <summary>Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</summary>
      <returns>An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
      <summary>Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</summary>
      <returns>An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method, with the specified MSIL stream size.</returns>
      <param name="streamSize">The size of the MSIL stream, in bytes. </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
      <summary>Returns the implementation flags for the method.</summary>
      <returns>A bitwise combination of <see cref="T:System.Reflection.MethodImplAttributes" /> values representing the implementation flags for the method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
      <summary>Returns the parameters of the dynamic method.</summary>
      <returns>An array of <see cref="T:System.Reflection.ParameterInfo" /> objects that represent the parameters of the dynamic method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
      <summary>Gets or sets a value indicating whether the local variables in the method are zero-initialized. </summary>
      <returns>true if the local variables in the method are zero-initialized; otherwise, false. The default is true.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.</summary>
      <returns>A <see cref="T:System.Object" /> containing the return value of the invoked method.</returns>
      <param name="obj">This parameter is ignored for dynamic methods, because they are static. Specify null. </param>
      <param name="invokeAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection. If <paramref name="binder" /> is null, the default binder is used. For more details, see <see cref="T:System.Reflection.Binder" />. </param>
      <param name="parameters">An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this parameter should be null. </param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. For example, this information is needed to correctly convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, because 1000 is represented differently by different cultures. </param>
      <exception cref="T:System.NotSupportedException">The <see cref="F:System.Reflection.CallingConventions.VarArgs" /> calling convention is not supported.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">The number of elements in <paramref name="parameters" /> does not match the number of parameters in the dynamic method.</exception>
      <exception cref="T:System.ArgumentException">The type of one or more elements of <paramref name="parameters" /> does not match the type of the corresponding parameter of the dynamic method.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <paramref name="skipVisibility" /> set to false, but the dynamic method accesses members that are not public or internal (Friend in Visual Basic).-or-The dynamic method is anonymously hosted and was constructed with <paramref name="skipVisibility" /> set to false, but it accesses members that are not public.-or-The dynamic method contains unverifiable code. See the "Verification" section in Remarks for <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether the specified custom attribute type is defined.</summary>
      <returns>true if the specified custom attribute type is defined; otherwise, false.</returns>
      <param name="attributeType">A <see cref="T:System.Type" /> representing the type of custom attribute to search for. </param>
      <param name="inherit">true to search the method's inheritance chain to find the custom attributes; false to check only the current method. </param>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
      <summary>Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations. </summary>
      <returns>true if the current dynamic method is security-critical or security-safe-critical; false if it is transparent. </returns>
      <exception cref="T:System.InvalidOperationException">The dynamic method doesn't have a method body.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
      <summary>Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code. </summary>
      <returns>true if the dynamic method is security-safe-critical at the current trust level; false if it is security-critical or transparent.</returns>
      <exception cref="T:System.InvalidOperationException">The dynamic method doesn't have a method body.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
      <summary>Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.</summary>
      <returns>true if the dynamic method is security-transparent at the current trust level; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">The dynamic method doesn't have a method body.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
      <summary>Not supported for dynamic methods.</summary>
      <returns>Not supported for dynamic methods.</returns>
      <exception cref="T:System.InvalidOperationException">Not allowed for dynamic methods.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Module">
      <summary>Gets the module with which the dynamic method is logically associated.</summary>
      <returns>The <see cref="T:System.Reflection.Module" /> with which the current dynamic method is associated.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
      <summary>Gets the name of the dynamic method.</summary>
      <returns>The simple name of the method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
      <summary>Gets the class that was used in reflection to obtain the method.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
      <summary>Gets the return parameter of the dynamic method.</summary>
      <returns>Always null. </returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
      <summary>Gets the type of return value for the dynamic method.</summary>
      <returns>A <see cref="T:System.Type" /> representing the type of the return value of the current method; <see cref="T:System.Void" /> if the method has no return type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
      <summary>Gets the custom attributes of the return type for the dynamic method.</summary>
      <returns>An <see cref="T:System.Reflection.ICustomAttributeProvider" /> representing the custom attributes of the return type for the dynamic method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
      <summary>Returns the signature of the method, represented as a string.</summary>
      <returns>A string representing the method signature.</returns>
    </member>
    <member name="T:System.Reflection.Emit.EnumBuilder">
      <summary>Describes and represents an enumeration type.</summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Assembly">
      <summary>Retrieves the dynamic assembly that contains this enum definition.</summary>
      <returns>Read-only. The dynamic assembly that contains this enum definition.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
      <summary>Returns the full path of this enum qualified by the display name of the parent assembly.</summary>
      <returns>Read-only. The full path of this enum qualified by the display name of the parent assembly.</returns>
      <exception cref="T:System.NotSupportedException">If <see cref="M:System.Reflection.Emit.EnumBuilder.CreateType" /> has not been called previously. </exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.BaseType">
      <summary>Returns the parent <see cref="T:System.Type" /> of this type which is always <see cref="T:System.Enum" />.</summary>
      <returns>Read-only. The parent <see cref="T:System.Type" /> of this type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.CreateType">
      <summary>Creates a <see cref="T:System.Type" /> object for this enum.</summary>
      <returns>A <see cref="T:System.Type" /> object for this enum.</returns>
      <exception cref="T:System.InvalidOperationException">This type has been previously created.-or- The enclosing type has not been created. </exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
      <summary>Returns the type that declared this <see cref="T:System.Reflection.Emit.EnumBuilder" />.</summary>
      <returns>Read-only. The type that declared this <see cref="T:System.Reflection.Emit.EnumBuilder" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
      <summary>Defines the named static field in an enumeration type with the specified constant value.</summary>
      <returns>The defined field.</returns>
      <param name="literalName">The name of the static field. </param>
      <param name="literalValue">The constant value of the literal. </param>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.FullName">
      <summary>Returns the full path of this enum.</summary>
      <returns>Read-only. The full path of this enum.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the public and non-public constructors defined for this class, as specified.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.</returns>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for this constructor.</summary>
      <returns>Returns an array of objects representing all the custom attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> instance.</returns>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns the custom attributes identified by the given type.</summary>
      <returns>Returns an array of objects representing the attributes of this constructor that are of <see cref="T:System.Type" /><paramref name="attributeType" />.</returns>
      <param name="attributeType">The Type object to which the custom attributes are applied. </param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetElementType">
      <summary>Calling this method always throws <see cref="T:System.NotSupportedException" />.</summary>
      <returns>This method is not supported. No value is returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType">
      <summary>Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.</summary>
      <returns>The underlying type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the event with the specified name.</summary>
      <returns>Returns an <see cref="T:System.Reflection.EventInfo" /> object representing the event declared or inherited by this type with the specified name. If there are no matches, null is returned.</returns>
      <param name="name">The name of the event to get. </param>
      <param name="bindingAttr">This invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents">
      <summary>Returns the events for the public events declared or inherited by this type.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public events that are declared by this type.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public and non-public events declared or inherited by this type. An empty array is returned if there are no events, as specified.</returns>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the field specified by the given name.</summary>
      <returns>Returns the <see cref="T:System.Reflection.FieldInfo" /> object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches, then null is returned.</returns>
      <param name="name">The name of the field to get. </param>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public fields that are declared by this type.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.</returns>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
      <summary>Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.</summary>
      <returns>Returns a <see cref="T:System.Type" /> object representing the implemented interface. Returns null if no interface matching name is found.</returns>
      <param name="name">The name of the interface. </param>
      <param name="ignoreCase">If true, the search is case-insensitive. If false, the search is case-sensitive. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
      <summary>Returns an interface mapping for the interface requested.</summary>
      <returns>The requested interface mapping.</returns>
      <param name="interfaceType">The type of the interface for which the interface mapping is to be retrieved. </param>
      <exception cref="T:System.ArgumentException">The type does not implement the interface. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
      <summary>Returns an array of all the interfaces implemented on this a class and its base classes.</summary>
      <returns>Returns an array of <see cref="T:System.Type" /> objects representing the implemented interfaces. If none are defined, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Returns all members with the specified name, type, and binding that are declared or inherited by this type.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public and non-public members defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public members are returned.</returns>
      <param name="name">The name of the member. </param>
      <param name="type">The type of member that is to be returned. </param>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>Returns the specified members declared or inherited by this type,.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.</returns>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>Returns all the public and non-public methods declared or inherited by this type, as specified.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.MethodInfo" /> objects representing the public and non-public methods defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public methods are returned.</returns>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the specified nested type that is declared by this type.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the nested type to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to conduct a case-sensitive search for public methods. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public nested types that are declared or inherited by this type.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" /> that match the specified binding constraints.An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of the nested types match the binding constraints.</returns>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>Returns all the public and non-public properties declared or inherited by this type, as specified.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing the public and non-public properties defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public properties are returned.</returns>
      <param name="bindingAttr">This invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.GUID">
      <summary>Returns the GUID of this enum.</summary>
      <returns>Read-only. The GUID of this enum.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the contraints of the specified binder and invocation attributes.</summary>
      <returns>Returns the return value of the invoked member.</returns>
      <param name="name">The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member. </param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If binder is null, the default binder is used. See <see cref="T:System.Reflection.Binder" />. </param>
      <param name="target">The object on which to invoke the specified member. If the member is static, this parameter is ignored. </param>
      <param name="args">An argument list. This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null. </param>
      <param name="modifiers">An array of the same length as <paramref name="args" /> with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for details such as this. </param>
      <param name="culture">An instance of CultureInfo used to govern the coercion of types. If this is null, the CultureInfo for the current thread is used. (Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.) </param>
      <param name="namedParameters">Each parameter in the <paramref name="namedParameters" /> array gets the value in the corresponding element in the <paramref name="args" /> array. If the length of <paramref name="args" /> is greater than the length of <paramref name="namedParameters" />, the remaining argument values are passed in order. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Checks if the specified custom attribute type is defined.</summary>
      <returns>true if one or more instance of <paramref name="attributeType" /> is defined on this member; otherwise, false.</returns>
      <param name="attributeType">The Type object to which the custom attributes are applied. </param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported in types that are not complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType"></member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> is less than 1.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeByRefType"></member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakePointerType"></member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Module">
      <summary>Retrieves the dynamic module that contains this <see cref="T:System.Reflection.Emit.EnumBuilder" /> definition.</summary>
      <returns>Read-only. The dynamic module that contains this <see cref="T:System.Reflection.Emit.EnumBuilder" /> definition.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Name">
      <summary>Returns the name of this enum.</summary>
      <returns>Read-only. The name of this enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Namespace">
      <summary>Returns the namespace of this enum.</summary>
      <returns>Read-only. The namespace of this enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
      <summary>Returns the type that was used to obtain this <see cref="T:System.Reflection.Emit.EnumBuilder" />.</summary>
      <returns>Read-only. The type that was used to obtain this <see cref="T:System.Reflection.Emit.EnumBuilder" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Sets a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> or <paramref name="binaryAttribute" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Sets a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
      <summary>Retrieves the internal handle for this enum.</summary>
      <returns>Read-only. The internal handle for this enum.</returns>
      <exception cref="T:System.NotSupportedException">This property is not currently supported. </exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeToken">
      <summary>Returns the internal metadata type token of this enum.</summary>
      <returns>Read-only. The type token of this enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
      <summary>Returns the underlying field for this enum.</summary>
      <returns>Read-only. The underlying field for this enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
      <summary>Returns the underlying system type for this enum.</summary>
      <returns>Read-only. Returns the underlying system type.</returns>
    </member>
    <member name="T:System.Reflection.Emit.EventBuilder">
      <summary>Defines events for a class.</summary>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Adds one of the "other" methods associated with this event. "Other" methods are methods other than the "on" and "raise" methods associated with an event. This function can be called many times to add as many "other" methods.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the other method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.GetEventToken">
      <summary>Returns the token for this event.</summary>
      <returns>Returns the EventToken for this event.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetAddOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Sets the method used to subscribe to this event.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the method used to subscribe to this event. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Set a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> or <paramref name="binaryAttribute" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Sets a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to describe the custom attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRaiseMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Sets the method used to raise this event.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the method used to raise this event. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Sets the method used to unsubscribe to this event.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the method used to unsubscribe to this event. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.System#Runtime#InteropServices#_EventBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.System#Runtime#InteropServices#_EventBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.System#Runtime#InteropServices#_EventBuilder#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.System#Runtime#InteropServices#_EventBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="T:System.Reflection.Emit.EventToken">
      <summary>Represents the Token returned by the metadata to represent an event.</summary>
    </member>
    <member name="F:System.Reflection.Emit.EventToken.Empty">
      <summary>The default EventToken with <see cref="P:System.Reflection.Emit.EventToken.Token" /> value 0.</summary>
    </member>
    <member name="M:System.Reflection.Emit.EventToken.Equals(System.Object)">
      <summary>Checks if the given object is an instance of EventToken and is equal to this instance.</summary>
      <returns>Returns true if <paramref name="obj" /> is an instance of EventToken and equals the current instance; otherwise, false.</returns>
      <param name="obj">The object to be compared with this instance. </param>
    </member>
    <member name="M:System.Reflection.Emit.EventToken.Equals(System.Reflection.Emit.EventToken)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.EventToken" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.EventToken" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Reflection.Emit.EventToken.GetHashCode">
      <summary>Generates the hash code for this event.</summary>
      <returns>Returns the hash code for this instance.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EventToken.op_Equality(System.Reflection.Emit.EventToken,System.Reflection.Emit.EventToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.EventToken" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.EventToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.EventToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.EventToken.op_Inequality(System.Reflection.Emit.EventToken,System.Reflection.Emit.EventToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.EventToken" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.EventToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.EventToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="P:System.Reflection.Emit.EventToken.Token">
      <summary>Retrieves the metadata token for this event.</summary>
      <returns>Read-only. Retrieves the metadata token for this event.</returns>
    </member>
    <member name="T:System.Reflection.Emit.FieldBuilder">
      <summary>Defines and represents a field. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Attributes">
      <summary>Indicates the attributes of this field. This property is read-only.</summary>
      <returns>The attributes of this field.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.DeclaringType">
      <summary>Indicates a reference to the <see cref="T:System.Type" /> object for the type that declares this field. This property is read-only.</summary>
      <returns>A reference to the <see cref="T:System.Type" /> object for the type that declares this field.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldHandle">
      <summary>Indicates the internal metadata handle for this field. This property is read-only.</summary>
      <returns>The internal metadata handle for this field.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldType">
      <summary>Indicates the <see cref="T:System.Type" /> object that represents the type of this field. This property is read-only.</summary>
      <returns>The <see cref="T:System.Type" /> object that represents the type of this field.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for this field.</summary>
      <returns>An array of type <see cref="T:System.Object" /> representing all the custom attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.FieldBuilder" /> instance.</returns>
      <param name="inherit">Controls inheritance of custom attributes from base classes. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns all the custom attributes defined for this field identified by the given type.</summary>
      <returns>An array of type <see cref="T:System.Object" /> representing all the custom attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.FieldBuilder" /> instance.</returns>
      <param name="attributeType">The custom attribute type. </param>
      <param name="inherit">Controls inheritance of custom attributes from base classes. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetToken">
      <summary>Returns the token representing this field.</summary>
      <returns>Returns the <see cref="T:System.Reflection.Emit.FieldToken" /> object that represents the token for this field.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetValue(System.Object)">
      <summary>Retrieves the value of the field supported by the given object.</summary>
      <returns>An <see cref="T:System.Object" /> containing the value of the field reflected by this instance.</returns>
      <param name="obj">The object on which to access the field. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether an attribute having the specified type is defined on a field.</summary>
      <returns>true if one or more instance of <paramref name="attributeType" /> is defined on this field; otherwise, false.</returns>
      <param name="attributeType">The type of the attribute. </param>
      <param name="inherit">Controls inheritance of custom attributes from base classes. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the field using <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> and call <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> on the returned <see cref="T:System.Reflection.FieldInfo" />. </exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Module">
      <summary>Gets the module in which the type that contains this field is being defined.</summary>
      <returns>A <see cref="T:System.Reflection.Module" /> that represents the dynamic module in which this field is being defined.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Name">
      <summary>Indicates the name of this field. This property is read-only.</summary>
      <returns>A <see cref="T:System.String" /> containing the name of this field.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.ReflectedType">
      <summary>Indicates the reference to the <see cref="T:System.Type" /> object from which this object was obtained. This property is read-only.</summary>
      <returns>A reference to the <see cref="T:System.Type" /> object from which this instance was obtained.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)">
      <summary>Sets the default value of this field.</summary>
      <param name="defaultValue">The new default value for this field. </param>
      <exception cref="T:System.InvalidOperationException">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
      <exception cref="T:System.ArgumentException">The field is not one of the supported types.-or-The type of <paramref name="defaultValue" /> does not match the type of the field.-or-The field is of type <see cref="T:System.Object" /> or other reference type, and <paramref name="defaultValue" /> is not null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Sets a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> or <paramref name="binaryAttribute" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The parent type of this field is complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Sets a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The parent type of this field is complete. </exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)">
      <summary>Describes the native marshaling of the field.</summary>
      <param name="unmanagedMarshal">A descriptor specifying the native marshalling of this field. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="unmanagedMarshal" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)">
      <summary>Specifies the field layout.</summary>
      <param name="iOffset">The offset of the field within the type containing this field. </param>
      <exception cref="T:System.InvalidOperationException">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="iOffset" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>Sets the value of the field supported by the given object.</summary>
      <param name="obj">The object on which to access the field. </param>
      <param name="val">The value to assign to the field. </param>
      <param name="invokeAttr">A member of IBinder that specifies the type of binding that is desired (for example, IBinder.CreateInstance, IBinder.ExactBinding). </param>
      <param name="binder">A set of properties and enabling for binding, coercion of argument types, and invocation of members using reflection. If binder is null, then IBinder.DefaultBinding is used. </param>
      <param name="culture">The software preferences of a particular culture. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.System#Runtime#InteropServices#_FieldBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.System#Runtime#InteropServices#_FieldBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.System#Runtime#InteropServices#_FieldBuilder#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.System#Runtime#InteropServices#_FieldBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="T:System.Reflection.Emit.FieldToken">
      <summary>The FieldToken struct is an object representation of a token that represents a field.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FieldToken.Empty">
      <summary>The default FieldToken with <see cref="P:System.Reflection.Emit.FieldToken.Token" /> value 0.</summary>
    </member>
    <member name="M:System.Reflection.Emit.FieldToken.Equals(System.Object)">
      <summary>Determines if an object is an instance of FieldToken and is equal to this instance.</summary>
      <returns>Returns true if <paramref name="obj" /> is an instance of FieldToken and is equal to this object; otherwise, false.</returns>
      <param name="obj">The object to compare to this FieldToken. </param>
    </member>
    <member name="M:System.Reflection.Emit.FieldToken.Equals(System.Reflection.Emit.FieldToken)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.FieldToken" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.FieldToken" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Reflection.Emit.FieldToken.GetHashCode">
      <summary>Generates the hash code for this field.</summary>
      <returns>Returns the hash code for this instance.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldToken.op_Equality(System.Reflection.Emit.FieldToken,System.Reflection.Emit.FieldToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.FieldToken" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.FieldToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.FieldToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.FieldToken.op_Inequality(System.Reflection.Emit.FieldToken,System.Reflection.Emit.FieldToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.FieldToken" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.FieldToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.FieldToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="P:System.Reflection.Emit.FieldToken.Token">
      <summary>Retrieves the metadata token for this field.</summary>
      <returns>Read-only. Retrieves the metadata token of this field.</returns>
    </member>
    <member name="T:System.Reflection.Emit.FlowControl">
      <summary>Describes how an instruction alters the flow of control.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Branch">
      <summary>Branch instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Break">
      <summary>Break instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Call">
      <summary>Call instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Cond_Branch">
      <summary>Conditional branch instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Meta">
      <summary>Provides information about a subsequent instruction. For example, the Unaligned instruction of Reflection.Emit.Opcodes has FlowControl.Meta and specifies that the subsequent pointer instruction might be unaligned.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Next">
      <summary>Normal flow of control.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Phi">
      <summary>This enumerator value is reserved and should not be used.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Return">
      <summary>Return instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Throw">
      <summary>Exception throw instruction.</summary>
    </member>
    <member name="T:System.Reflection.Emit.GenericTypeParameterBuilder">
      <summary>Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited. </summary>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly">
      <summary>Gets an <see cref="T:System.Reflection.Assembly" /> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
      <summary>Gets null in all cases.</summary>
      <returns>A null reference (Nothing in Visual Basic) in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
      <summary>Gets the base type constraint of the current generic type parameter.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the base type constraint of the generic type parameter, or null if the type parameter has no base type constraint.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
      <summary>Gets true in all cases.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
      <summary>Gets a <see cref="T:System.Reflection.MethodInfo" /> that represents the declaring method, if the current <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> represents a type parameter of a generic method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> that represents the declaring method, if the current <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> represents a type parameter of a generic method; otherwise, null.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
      <summary>Gets the generic type definition or generic method definition to which the generic type parameter belongs.</summary>
      <returns>If the type parameter belongs to a generic type, a <see cref="T:System.Type" /> object representing that generic type; if the type parameter belongs to a generic method, a <see cref="T:System.Type" /> object representing that type that declared that generic method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
      <summary>Tests whether the given object is an instance of EventToken and is equal to the current instance.</summary>
      <returns>Returns true if <paramref name="o" /> is an instance of EventToken and equals the current instance; otherwise, false.</returns>
      <param name="o">The object to be compared with the current instance.</param>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
      <summary>Gets null in all cases.</summary>
      <returns>A null reference (Nothing in Visual Basic) in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition">
      <summary>Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.</summary>
      <returns>The position of the type parameter in the type parameter list of the generic type or method that declared the parameter.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases. </exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> in all cases. </summary>
      <returns>The type referred to by the current array type, pointer type, or ByRef type; or null if the current type is not an array type, is not a pointer type, and is not passed by reference.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="name">Not supported.</param>
      <param name="bindingAttr">Not supported. </param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="name">Not supported.</param>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
      <summary>Not valid for generic type parameters.</summary>
      <returns>Not valid for generic type parameters.</returns>
      <exception cref="T:System.InvalidOperationException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
      <summary>Not valid for generic type parameters.</summary>
      <returns>Not valid for generic type parameters.</returns>
      <exception cref="T:System.InvalidOperationException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode">
      <summary>Returns a 32-bit integer hash code for the current instance.</summary>
      <returns>A 32-bit integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="name">The name of the interface.</param>
      <param name="ignoreCase">true to search without regard for case; false to make a case-sensitive search.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="interfaceType">A <see cref="T:System.Type" /> object that represents the interface type for which the mapping is to be retrieved.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="name">Not supported.</param>
      <param name="type">Not supported.</param>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="name">Not supported.</param>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="bindingAttr">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases. </exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="name">Not supported. </param>
      <param name="invokeAttr">Not supported.</param>
      <param name="binder">Not supported.</param>
      <param name="target">Not supported.</param>
      <param name="args">Not supported.</param>
      <param name="modifiers">Not supported.</param>
      <param name="culture">Not supported.</param>
      <param name="namedParameters">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="c">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="attributeType">Not supported.</param>
      <param name="inherit">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter">
      <summary>Gets true in all cases.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
      <summary>Returns false in all cases.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
      <summary>Gets false in all cases.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <param name="c">Not supported.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
      <summary>Returns the type of a one-dimensional array whose element type is the generic type parameter.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the type of a one-dimensional array whose element type is the generic type parameter.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
      <summary>Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.</returns>
      <param name="rank">The number of dimensions for the array.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> is not a valid number of dimensions. For example, its value is less than 1.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
      <summary>Returns a <see cref="T:System.Type" /> object that represents the current generic type parameter when passed as a reference parameter.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the current generic type parameter when passed as a reference parameter.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
      <summary>Not valid for incomplete generic type parameters.</summary>
      <returns>This method is invalid for incomplete generic type parameters.</returns>
      <param name="typeArguments">An array of type arguments.</param>
      <exception cref="T:System.InvalidOperationException">In all cases.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
      <summary>Returns a <see cref="T:System.Type" /> object that represents a pointer to the current generic type parameter.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents a pointer to the current generic type parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module">
      <summary>Gets the dynamic module that contains the generic type parameter.</summary>
      <returns>A <see cref="T:System.Reflection.Module" /> object that represents the dynamic module that contains the generic type parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name">
      <summary>Gets the name of the generic type parameter.</summary>
      <returns>The name of the generic type parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace">
      <summary>Gets null in all cases.</summary>
      <returns>A null reference (Nothing in Visual Basic) in all cases.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType">
      <summary>Gets the <see cref="T:System.Type" /> object that was used to obtain the <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</summary>
      <returns>The <see cref="T:System.Type" /> object that was used to obtain the <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
      <summary>Sets the base type that a type must inherit in order to be substituted for the type parameter.</summary>
      <param name="baseTypeConstraint">The <see cref="T:System.Type" /> that must be inherited by any type that is to be substituted for the type parameter.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Sets a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute.</param>
      <param name="binaryAttribute">A byte blob representing the attribute.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> is null.-or-<paramref name="binaryAttribute" /> is a null reference.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Set a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class that defines the custom attribute.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
      <summary>Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.</summary>
      <param name="genericParameterAttributes">A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that represent the variance characteristics and special constraints of the generic type parameter.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
      <summary>Sets the interfaces a type must implement in order to be substituted for the type parameter. </summary>
      <param name="interfaceConstraints">An array of <see cref="T:System.Type" /> objects that represent the interfaces a type must implement in order to be substituted for the type parameter.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString">
      <summary>Returns a string representation of the current generic type parameter.</summary>
      <returns>A string that contains the name of the generic type parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
      <summary>Not supported for incomplete generic type parameters.</summary>
      <returns>Not supported for incomplete generic type parameters.</returns>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType">
      <summary>Gets the current generic type parameter.</summary>
      <returns>The current <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> object.</returns>
    </member>
    <member name="T:System.Reflection.Emit.ILGenerator">
      <summary>Generates Microsoft intermediate language (MSIL) instructions.</summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
      <summary>Begins a catch block.</summary>
      <param name="exceptionType">The <see cref="T:System.Type" /> object that represents the exception. </param>
      <exception cref="T:System.ArgumentException">The catch block is within a filtered exception. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptionType" /> is null, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located. </exception>
      <exception cref="T:System.NotSupportedException">The Microsoft intermediate language (MSIL) being generated is not currently in an exception block. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
      <summary>Begins an exception block for a filtered exception.</summary>
      <exception cref="T:System.NotSupportedException">The Microsoft intermediate language (MSIL) being generated is not currently in an exception block. -or-This <see cref="T:System.Reflection.Emit.ILGenerator" /> belongs to a <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
      <summary>Begins an exception block for a non-filtered exception.</summary>
      <returns>The label for the end of the block. This will leave you in the correct place to execute finally blocks or to finish the try.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
      <summary>Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.</summary>
      <exception cref="T:System.NotSupportedException">The MSIL being generated is not currently in an exception block. -or-This <see cref="T:System.Reflection.Emit.ILGenerator" /> belongs to a <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
      <summary>Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.</summary>
      <exception cref="T:System.NotSupportedException">The MSIL being generated is not currently in an exception block. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginScope">
      <summary>Begins a lexical scope.</summary>
      <exception cref="T:System.NotSupportedException">This <see cref="T:System.Reflection.Emit.ILGenerator" /> belongs to a <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
      <summary>Declares a local variable of the specified type.</summary>
      <returns>The declared local variable.</returns>
      <param name="localType">A <see cref="T:System.Type" /> object that represents the type of the local variable. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localType" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The containing type has been created by the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
      <summary>Declares a local variable of the specified type, optionally pinning the object referred to by the variable.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.LocalBuilder" /> object that represents the local variable.</returns>
      <param name="localType">A <see cref="T:System.Type" /> object that represents the type of the local variable.</param>
      <param name="pinned">true to pin the object in memory; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localType" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The containing type has been created by the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.-or-The method body of the enclosing method has been created by the <see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" /> method. </exception>
      <exception cref="T:System.NotSupportedException">The method with which this <see cref="T:System.Reflection.Emit.ILGenerator" /> is associated is not represented by a <see cref="T:System.Reflection.Emit.MethodBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DefineLabel">
      <summary>Declares a new label.</summary>
      <returns>Returns a new label that can be used as a token for branching.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
      <summary>Puts the specified instruction onto the stream of instructions.</summary>
      <param name="opcode">The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
      <summary>Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be put onto the stream. </param>
      <param name="arg">The character argument pushed onto the stream immediately after the instruction. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
      <summary>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be put onto the stream. Defined in the OpCodes enumeration. </param>
      <param name="arg">The numerical argument pushed onto the stream immediately after the instruction. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
      <summary>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="arg">The Int argument pushed onto the stream immediately after the instruction. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
      <summary>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be put onto the stream. </param>
      <param name="arg">The numerical argument pushed onto the stream immediately after the instruction. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
      <summary>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be put onto the stream. </param>
      <param name="arg">The numerical argument pushed onto the stream immediately after the instruction. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
      <summary>Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="con">A ConstructorInfo representing a constructor. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> is null. This exception is new in the .NET Framework version 4.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
      <summary>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="label">The label to which to branch from this location. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
      <summary>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="labels">The array of label objects to which to branch from this location. All of the labels will be used. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> is null. This exception is new in the .NET Framework version 4.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
      <summary>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="local">A local variable. </param>
      <exception cref="T:System.ArgumentException">The parent method of the <paramref name="local" /> parameter does not match the method associated with this <see cref="T:System.Reflection.Emit.ILGenerator" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="local" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="opcode" /> is a single-byte instruction, and <paramref name="local" /> represents a local variable with an index greater than Byte.MaxValue. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
      <summary>Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="signature">A helper for constructing a signature token. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signature" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
      <summary>Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="field">A FieldInfo representing a field. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
      <summary>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="meth">A MethodInfo representing a method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="meth" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="meth" /> is a generic method for which the <see cref="P:System.Reflection.MethodInfo.IsGenericMethodDefinition" /> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
      <summary>Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be put onto the stream. </param>
      <param name="arg">The character argument pushed onto the stream immediately after the instruction. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
      <summary>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</summary>
      <param name="opcode">The MSIL instruction to be put onto the stream. </param>
      <param name="arg">The Single argument pushed onto the stream immediately after the instruction. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
      <summary>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="str">The String to be emitted. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
      <summary>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.</summary>
      <param name="opcode">The MSIL instruction to be put onto the stream. </param>
      <param name="cls">A Type. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cls" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
      <summary>Puts a call or callvirt instruction onto the Microsoft intermediate language (MSIL) stream to call a varargs method.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. Must be <see cref="F:System.Reflection.Emit.OpCodes.Call" />, <see cref="F:System.Reflection.Emit.OpCodes.Callvirt" />, or <see cref="F:System.Reflection.Emit.OpCodes.Newobj" />.</param>
      <param name="methodInfo">The varargs method to be called. </param>
      <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method; otherwise, null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="opcode" /> does not specify a method call.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="methodInfo" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The calling convention for the method is not varargs, but optional parameter types are supplied. This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
      <summary>Puts a <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. Must be <see cref="F:System.Reflection.Emit.OpCodes.Calli" />. </param>
      <param name="callingConvention">The managed calling convention to be used. </param>
      <param name="returnType">The <see cref="T:System.Type" /> of the result. </param>
      <param name="parameterTypes">The types of the required arguments to the instruction. </param>
      <param name="optionalParameterTypes">The types of the optional arguments for varargs calls. </param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="optionalParameterTypes" /> is not null, but <paramref name="callingConvention" /> does not include the <see cref="F:System.Reflection.CallingConventions.VarArgs" /> flag.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
      <summary>Puts a <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call.</summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. Must be <see cref="F:System.Reflection.Emit.OpCodes.Calli" />.</param>
      <param name="unmanagedCallConv">The unmanaged calling convention to be used. </param>
      <param name="returnType">The <see cref="T:System.Type" /> of the result. </param>
      <param name="parameterTypes">The types of the required arguments to the instruction. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
      <summary>Emits the Microsoft intermediate language (MSIL) necessary to call <see cref="Overload:System.Console.WriteLine" /> with the given local variable.</summary>
      <param name="localBuilder">The local variable whose value is to be written to the console. </param>
      <exception cref="T:System.ArgumentException">The type of <paramref name="localBuilder" /> is <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.EnumBuilder" />, which are not supported. -or-There is no overload of <see cref="Overload:System.Console.WriteLine" /> that accepts the type of <paramref name="localBuilder" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localBuilder" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
      <summary>Emits the Microsoft intermediate language (MSIL) necessary to call <see cref="Overload:System.Console.WriteLine" /> with the given field.</summary>
      <param name="fld">The field whose value is to be written to the console. </param>
      <exception cref="T:System.ArgumentException">There is no overload of the <see cref="Overload:System.Console.WriteLine" /> method that accepts the type of the specified field. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fld" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The type of the field is <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.EnumBuilder" />, which are not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
      <summary>Emits the Microsoft intermediate language (MSIL) to call <see cref="Overload:System.Console.WriteLine" /> with a string.</summary>
      <param name="value">The string to be printed. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
      <summary>Ends an exception block.</summary>
      <exception cref="T:System.InvalidOperationException">The end exception block occurs in an unexpected place in the code stream. </exception>
      <exception cref="T:System.NotSupportedException">The Microsoft intermediate language (MSIL) being generated is not currently in an exception block. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndScope">
      <summary>Ends a lexical scope.</summary>
      <exception cref="T:System.NotSupportedException">This <see cref="T:System.Reflection.Emit.ILGenerator" /> belongs to a <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ILGenerator.ILOffset">
      <summary>Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the <see cref="T:System.Reflection.Emit.ILGenerator" />.</summary>
      <returns>The offset in the MSIL stream at which the next instruction will be emitted. </returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
      <summary>Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.</summary>
      <param name="loc">The label for which to set an index. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="loc" /> represents an invalid index into the label array.-or- An index for <paramref name="loc" /> has already been defined. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Marks a sequence point in the Microsoft intermediate language (MSIL) stream.</summary>
      <param name="document">The document for which the sequence point is being defined. </param>
      <param name="startLine">The line where the sequence point begins. </param>
      <param name="startColumn">The column in the line where the sequence point begins. </param>
      <param name="endLine">The line where the sequence point ends. </param>
      <param name="endColumn">The column in the line where the sequence point ends. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startLine" /> or <paramref name="endLine" /> is &lt;= 0. </exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:System.Reflection.Emit.ILGenerator" /> belongs to a <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array that receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
      <summary>Emits an instruction to throw an exception.</summary>
      <param name="excType">The class of the type of exception to throw. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="excType" /> is not the <see cref="T:System.Exception" /> class or a derived class of <see cref="T:System.Exception" />.-or- The type does not have a default constructor. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="excType" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
      <summary>Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.</summary>
      <param name="usingNamespace">The namespace to be used in evaluating locals and watches for the current active lexical scope </param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="usingNamespace" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="usingNamespace" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:System.Reflection.Emit.ILGenerator" /> belongs to a <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="T:System.Reflection.Emit.Label">
      <summary>Represents a label in the instruction stream. Label is used in conjunction with the <see cref="T:System.Reflection.Emit.ILGenerator" /> class.</summary>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Object)">
      <summary>Checks if the given object is an instance of Label and is equal to this instance.</summary>
      <returns>Returns true if <paramref name="obj" /> is an instance of Label and is equal to this object; otherwise, false.</returns>
      <param name="obj">The object to compare with this Label instance. </param>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.Label" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.Label" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Reflection.Emit.Label.GetHashCode">
      <summary>Generates a hash code for this instance.</summary>
      <returns>Returns a hash code for this instance.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.Label" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.Label" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.Label" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.Label" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.Label" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.Label" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="T:System.Reflection.Emit.LocalBuilder">
      <summary>Represents a local variable within a method or constructor.</summary>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.IsPinned">
      <summary>Gets a value indicating whether the object referred to by the local variable is pinned in memory.</summary>
      <returns>true if the object referred to by the local variable is pinned in memory; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalIndex">
      <summary>Gets the zero-based index of the local variable within the method body.</summary>
      <returns>An integer value that represents the order of declaration of the local variable within the method body.</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalType">
      <summary>Gets the type of the local variable.</summary>
      <returns>The <see cref="T:System.Type" /> of the local variable.</returns>
    </member>
    <member name="M:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String)">
      <summary>Sets the name of this local variable.</summary>
      <param name="name">The name of the local variable. </param>
      <exception cref="T:System.InvalidOperationException">The containing type has been created with <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or- There is no symbolic writer defined for the containing module. </exception>
      <exception cref="T:System.NotSupportedException">This local is defined in a dynamic method, rather than in a method of a dynamic type.</exception>
    </member>
    <member name="M:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String,System.Int32,System.Int32)">
      <summary>Sets the name and lexical scope of this local variable.</summary>
      <param name="name">The name of the local variable. </param>
      <param name="startOffset">The beginning offset of the lexical scope of the local variable. </param>
      <param name="endOffset">The ending offset of the lexical scope of the local variable. </param>
      <exception cref="T:System.InvalidOperationException">The containing type has been created with <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or- There is no symbolic writer defined for the containing module. </exception>
      <exception cref="T:System.NotSupportedException">This local is defined in a dynamic method, rather than in a method of a dynamic type.</exception>
    </member>
    <member name="M:System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="T:System.Reflection.Emit.MethodBuilder">
      <summary>Defines and represents a method (or constructor) on a dynamic class.</summary>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
      <summary>Adds declarative security to this method.</summary>
      <param name="action">The security action to be taken (Demand, Assert, and so on). </param>
      <param name="pset">The set of permissions the action applies to. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="action" /> is invalid (RequestMinimum, RequestOptional, and RequestRefuse are invalid). </exception>
      <exception cref="T:System.InvalidOperationException">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-The permission set <paramref name="pset" /> contains an action that was added earlier by <see cref="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)" />.-or-For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pset" /> is null. </exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Attributes">
      <summary>Retrieves the attributes for this method.</summary>
      <returns>Read-only. Retrieves the MethodAttributes for this method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.CallingConvention">
      <summary>Returns the calling convention of the method.</summary>
      <returns>Read-only. The calling convention of the method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
      <summary>Not supported for this type.</summary>
      <returns>Not supported.</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
      <summary>Creates the body of the method using a supplied byte array of Microsoft intermediate language (MSIL) instructions.</summary>
      <param name="il">An array containing valid MSIL instructions. If this parameter is null, the method's body is cleared. </param>
      <param name="count">The number of valid bytes in the MSIL array. This value is ignored if MSIL is null. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="count" /> is not within the range of indexes of the supplied MSIL instruction array and <paramref name="il" /> is not null. </exception>
      <exception cref="T:System.InvalidOperationException">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or- This method was called previously on this MethodBuilder with an <paramref name="il" /> argument that was not null.-or-For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false. </exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
      <summary>Returns the type that declares this method.</summary>
      <returns>Read-only. The type that declares this method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
      <summary>Sets the number of generic type parameters for the current method, specifies their names, and returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that can be used to define their constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects representing the type parameters of the generic method.</returns>
      <param name="names">An array of strings that represent the names of the generic type parameters.</param>
      <exception cref="T:System.InvalidOperationException">Generic type parameters have already been defined for this method.-or-The method has been completed already.-or-The <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /> method has been called for the current method.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="names" /> is null.-or-An element of <paramref name="names" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="names" /> is an empty array.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method. Returns a ParameterBuilder that can be used to apply custom attributes.</summary>
      <returns>Returns a ParameterBuilder object that represents a parameter of this method or the return value of this method.</returns>
      <param name="position">The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method. </param>
      <param name="attributes">The parameter attributes of the parameter. </param>
      <param name="strParamName">The name of the parameter. The name can be the null string. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The method has no parameters.-or- <paramref name="position" /> is less than zero.-or- <paramref name="position" /> is greater than the number of the method's parameters. </exception>
      <exception cref="T:System.InvalidOperationException">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false. </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
      <summary>Determines whether the given object is equal to this instance.</summary>
      <returns>true if <paramref name="obj" /> is an instance of MethodBuilder and is equal to this object; otherwise, false.</returns>
      <param name="obj">The object to compare with this MethodBuilder instance. </param>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition">
      <summary>Return the base implementation for a method.</summary>
      <returns>The base implementation of this method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for this method.</summary>
      <returns>Returns an array of objects representing all the custom attributes of this method.</returns>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the custom attributes. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Reflection.MethodInfo" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns the custom attributes identified by the given type.</summary>
      <returns>Returns an array of objects representing the attributes of this method that are of type <paramref name="attributeType" />.</returns>
      <param name="attributeType">The custom attribute type. </param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the custom attributes. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Reflection.MethodInfo" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
      <summary>Returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that represent the type parameters of the method, if it is generic.</summary>
      <returns>An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects representing the type parameters, if the method is generic, or null if the method is not generic. </returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
      <summary>Returns this method.</summary>
      <returns>The current instance of <see cref="T:System.Reflection.Emit.MethodBuilder" />. </returns>
      <exception cref="T:System.InvalidOperationException">The current method is not generic. That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property returns false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetHashCode">
      <summary>Gets the hash code for this method.</summary>
      <returns>The hash code for this method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
      <summary>Returns an ILGenerator for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.</summary>
      <returns>Returns an ILGenerator object for this method.</returns>
      <exception cref="T:System.InvalidOperationException">The method should not have a body because of its <see cref="T:System.Reflection.MethodAttributes" /> or <see cref="T:System.Reflection.MethodImplAttributes" /> flags, for example because it has the <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> flag. -or-The method is a generic method, but not a generic method definition. That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false. </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
      <summary>Returns an ILGenerator for this method with the specified Microsoft intermediate language (MSIL) stream size.</summary>
      <returns>Returns an ILGenerator object for this method.</returns>
      <param name="size">The size of the MSIL stream, in bytes. </param>
      <exception cref="T:System.InvalidOperationException">The method should not have a body because of its <see cref="T:System.Reflection.MethodAttributes" /> or <see cref="T:System.Reflection.MethodImplAttributes" /> flags, for example because it has the <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> flag. -or-The method is a generic method, but not a generic method definition. That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false.   </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags">
      <summary>Returns the implementation flags for the method.</summary>
      <returns>Returns the implementation flags for the method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetModule">
      <summary>Returns a reference to the module that contains this method.</summary>
      <returns>Returns a reference to the module that contains this method.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetParameters">
      <summary>Returns the parameters of this method.</summary>
      <returns>An array of ParameterInfo objects that represent the parameters of the method.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call GetParameters on the returned <see cref="T:System.Reflection.MethodInfo" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetToken">
      <summary>Returns the MethodToken that represents the token for this method.</summary>
      <returns>Returns the MethodToken of this method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.InitLocals">
      <summary>Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized. The default value of this property is true.</summary>
      <returns>true if the local variables in this method should be zero initialized; otherwise false.</returns>
      <exception cref="T:System.InvalidOperationException">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false. (Get or set.)</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.</summary>
      <returns>Returns an object containing the return value of the invoked method.</returns>
      <param name="obj">The object on which to invoke the specified method. If the method is static, this parameter is ignored. </param>
      <param name="invokeAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, NonPublic, and so on. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is null, the default binder is used. For more details, see <see cref="T:System.Reflection.Binder" />. </param>
      <param name="parameters">An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this should be null. </param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. (Note that this is necessary to, for example, convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, since 1000 is represented differently by different cultures.) </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> on the returned <see cref="T:System.Reflection.MethodInfo" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Checks if the specified custom attribute type is defined.</summary>
      <returns>true if the specified custom attribute type is defined; otherwise, false.</returns>
      <param name="attributeType">The custom attribute type. </param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the custom attributes. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> on the returned <see cref="T:System.Reflection.MethodInfo" />. </exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
      <summary>Gets a value indicating whether the method is a generic method.</summary>
      <returns>true if the method is generic; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
      <summary>Gets a value indicating whether the current <see cref="T:System.Reflection.Emit.MethodBuilder" /> object represents the definition of a generic method.</summary>
      <returns>true if the current <see cref="T:System.Reflection.Emit.MethodBuilder" /> object represents the definition of a generic method; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> in all cases. </summary>
      <returns>Throws a <see cref="T:System.NotSupportedException" /> in all cases. </returns>
      <exception cref="T:System.NotSupportedException">In all cases. This property is not supported in dynamic assemblies. See Remarks.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> in all cases. </summary>
      <returns>Throws a <see cref="T:System.NotSupportedException" /> in all cases. </returns>
      <exception cref="T:System.NotSupportedException">In all cases. This property is not supported in dynamic assemblies. See Remarks.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> in all cases. </summary>
      <returns>Throws a <see cref="T:System.NotSupportedException" /> in all cases. </returns>
      <exception cref="T:System.NotSupportedException">In all cases. This property is not supported in dynamic assemblies. See Remarks.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
      <summary>Returns a generic method constructed from the current generic method definition using the specified generic type arguments.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> representing the generic method constructed from the current generic method definition using the specified generic type arguments.</returns>
      <param name="typeArguments">An array of <see cref="T:System.Type" /> objects that represent the type arguments for the generic method.</param>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
      <summary>Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.</summary>
      <returns>Read-only. The internal handle for the method. Use this handle to access the underlying metadata handle.</returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported. Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="P:System.Reflection.MethodBase.MethodHandle" /> on the returned <see cref="T:System.Reflection.MethodInfo" />. </exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Module">
      <summary>Gets the module in which the current method is being defined.</summary>
      <returns>The <see cref="T:System.Reflection.Module" /> in which the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is being defined.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Name">
      <summary>Retrieves the name of this method.</summary>
      <returns>Read-only. Retrieves a string containing the simple name of this method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReflectedType">
      <summary>Retrieves the class that was used in reflection to obtain this object.</summary>
      <returns>Read-only. The type used to obtain this method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnParameter">
      <summary>Gets a <see cref="T:System.Reflection.ParameterInfo" /> object that contains information about the return type of the method, such as whether the return type has custom modifiers. </summary>
      <returns>A <see cref="T:System.Reflection.ParameterInfo" /> object that contains information about the return type.</returns>
      <exception cref="T:System.InvalidOperationException">The declaring type has not been created.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnType">
      <summary>Gets the return type of the method represented by this <see cref="T:System.Reflection.Emit.MethodBuilder" />.</summary>
      <returns>The return type of the method.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
      <summary>Returns the custom attributes of the method's return type.</summary>
      <returns>Read-only. The custom attributes of the method's return type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Sets a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> or <paramref name="binaryAttribute" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Sets a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to describe the custom attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary>Sets the implementation flags for this method.</summary>
      <param name="attributes">The implementation flags to set. </param>
      <exception cref="T:System.InvalidOperationException">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false. </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)">
      <summary>Sets marshaling information for the return type of this method.</summary>
      <param name="unmanagedMarshal">Marshaling information for the return type of this method. </param>
      <exception cref="T:System.InvalidOperationException">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false. </exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
      <summary>Sets the number and types of parameters for a method. </summary>
      <param name="parameterTypes">An array of <see cref="T:System.Type" /> objects representing the parameter types.</param>
      <exception cref="T:System.InvalidOperationException">The current method is generic, but is not a generic method definition. That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
      <summary>Sets the return type of the method.</summary>
      <param name="returnType">A <see cref="T:System.Type" /> object that represents the return type of the method.</param>
      <exception cref="T:System.InvalidOperationException">The current method is generic, but is not a generic method definition. That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.</summary>
      <param name="returnType">The return type of the method.</param>
      <param name="returnTypeRequiredCustomModifiers">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method. If the return type has no required custom modifiers, specify null.</param>
      <param name="returnTypeOptionalCustomModifiers">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method. If the return type has no optional custom modifiers, specify null.</param>
      <param name="parameterTypes">The types of the parameters of the method.</param>
      <param name="parameterTypeRequiredCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="parameterTypeOptionalCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.</param>
      <exception cref="T:System.InvalidOperationException">The current method is generic, but is not a generic method definition. That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
      <summary>Set a symbolic custom attribute using a blob.</summary>
      <param name="name">The name of the symbolic custom attribute. </param>
      <param name="data">The byte blob that represents the value of the symbolic custom attribute. </param>
      <exception cref="T:System.InvalidOperationException">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or- The module that contains this method is not a debug module. -or-For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is true, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is false.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Signature">
      <summary>Retrieves the signature of the method.</summary>
      <returns>Read-only. A String containing the signature of the method reflected by this MethodBase instance.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array that receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.ToString">
      <summary>Returns this MethodBuilder instance as a string.</summary>
      <returns>Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.</returns>
    </member>
    <member name="T:System.Reflection.Emit.MethodRental">
      <summary>Provides a fast way to swap method body implementation given a method of a class.</summary>
    </member>
    <member name="F:System.Reflection.Emit.MethodRental.JitImmediate">
      <summary>Specifies that the method should be just-in-time (JIT) compiled immediately.</summary>
    </member>
    <member name="F:System.Reflection.Emit.MethodRental.JitOnDemand">
      <summary>Specifies that the method should be just-in-time (JIT) compiled when needed.</summary>
    </member>
    <member name="M:System.Reflection.Emit.MethodRental.SwapMethodBody(System.Type,System.Int32,System.IntPtr,System.Int32,System.Int32)">
      <summary>Swaps the body of a method.</summary>
      <param name="cls">The class containing the method. </param>
      <param name="methodtoken">The token for the method. </param>
      <param name="rgIL">A pointer to the method. This should include the method header. </param>
      <param name="methodSize">The size of the new method body in bytes. </param>
      <param name="flags">Flags that control the swapping. See the definitions of the constants. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cls" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The type <paramref name="cls" /> is not complete. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="methodSize" /> is less than one or greater than 4128767 (3effff hex).</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="T:System.Reflection.Emit.MethodToken">
      <summary>The MethodToken struct is an object representation of a token that represents a method.</summary>
    </member>
    <member name="F:System.Reflection.Emit.MethodToken.Empty">
      <summary>The default MethodToken with <see cref="P:System.Reflection.Emit.MethodToken.Token" /> value 0.</summary>
    </member>
    <member name="M:System.Reflection.Emit.MethodToken.Equals(System.Object)">
      <summary>Tests whether the given object is equal to this MethodToken object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of MethodToken and is equal to this object; otherwise, false.</returns>
      <param name="obj">The object to compare to this object. </param>
    </member>
    <member name="M:System.Reflection.Emit.MethodToken.Equals(System.Reflection.Emit.MethodToken)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.MethodToken" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.MethodToken" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Reflection.Emit.MethodToken.GetHashCode">
      <summary>Returns the generated hash code for this method.</summary>
      <returns>Returns the hash code for this instance.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodToken.op_Equality(System.Reflection.Emit.MethodToken,System.Reflection.Emit.MethodToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.MethodToken" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.MethodToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.MethodToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.MethodToken.op_Inequality(System.Reflection.Emit.MethodToken,System.Reflection.Emit.MethodToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.MethodToken" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.MethodToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.MethodToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="P:System.Reflection.Emit.MethodToken.Token">
      <summary>Returns the metadata token for this method.</summary>
      <returns>Read-only. Returns the metadata token for this method.</returns>
    </member>
    <member name="T:System.Reflection.Emit.ModuleBuilder">
      <summary>Defines and represents a module in a dynamic assembly.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Assembly">
      <summary>Gets the dynamic assembly that defined this instance of <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</summary>
      <returns>The dynamic assembly that defined the current dynamic module.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions">
      <summary>Completes the global function definitions and global data definitions for this dynamic module.</summary>
      <exception cref="T:System.InvalidOperationException">This method was called previously. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Defines a document for source.</summary>
      <returns>The defined document.</returns>
      <param name="url">The URL for the document. </param>
      <param name="language">The GUID that identifies the document language. This can be <see cref="F:System.Guid.Empty" />. </param>
      <param name="languageVendor">The GUID that identifies the document language vendor. This can be <see cref="F:System.Guid.Empty" />. </param>
      <param name="documentType">The GUID that identifies the document type. This can be <see cref="F:System.Guid.Empty" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> is null. This is a change from earlier versions of the .NET Framework.</exception>
      <exception cref="T:System.InvalidOperationException">This method is called on a dynamic module that is not a debug module. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>Defines an enumeration type that is a value type with a single non-static field called <paramref name="value__" /> of the specified type.</summary>
      <returns>The defined enumeration.</returns>
      <param name="name">The full path of the enumeration type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="visibility">The type attributes for the enumeration. The attributes are any bits defined by <see cref="F:System.Reflection.TypeAttributes.VisibilityMask" />. </param>
      <param name="underlyingType">The underlying type for the enumeration. This must be a built-in integer type. See .NET Framework Class Library Overview.</param>
      <exception cref="T:System.ArgumentException">Attributes other than visibility attributes are provided.-or- An enumeration with the given name exists in the parent assembly of this module.-or- The visibility attributes do not match the scope of the enumeration. For example, <see cref="F:System.Reflection.TypeAttributes.NestedPublic" /> is specified for <paramref name="visibility" />, but the enumeration is not a nested type. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>Defines a global method with the specified name, attributes, calling convention, return type, and parameter types.</summary>
      <returns>The defined global method.</returns>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the method. <paramref name="attributes" /> must include <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">The calling convention for the method. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <exception cref="T:System.ArgumentException">The method is not static. That is, <paramref name="attributes" /> does not include <see cref="F:System.Reflection.MethodAttributes.Static" />.-or-An element in the <see cref="T:System.Type" /> array is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> has been previously called. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Defines a global method with the specified name, attributes, calling convention, return type, custom modifiers for the return type, parameter types, and custom modifiers for the parameter types.</summary>
      <returns>The defined global method.</returns>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded null characters. </param>
      <param name="attributes">The attributes of the method. <paramref name="attributes" /> must include <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">The calling convention for the method. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="requiredReturnTypeCustomModifiers">An array of types representing the required custom modifiers for the return type, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. If the return type has no required custom modifiers, specify null. </param>
      <param name="optionalReturnTypeCustomModifiers">An array of types representing the optional custom modifiers for the return type, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. If the return type has no optional custom modifiers, specify null. </param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <param name="requiredParameterTypeCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter of the global method. If a particular argument has no required custom modifiers, specify null instead of an array of types. If the global method has no arguments, or if none of the arguments have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="optionalParameterTypeCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter. If a particular argument has no optional custom modifiers, specify null instead of an array of types. If the global method has no arguments, or if none of the arguments have optional custom modifiers, specify null instead of an array of arrays.</param>
      <exception cref="T:System.ArgumentException">The method is not static. That is, <paramref name="attributes" /> does not include <see cref="F:System.Reflection.MethodAttributes.Static" />.-or-An element in the <see cref="T:System.Type" /> array is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> method has been previously called. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary>Defines a global method with the specified name, attributes, return type, and parameter types.</summary>
      <returns>The defined global method.</returns>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the method. <paramref name="attributes" /> must include <see cref="F:System.Reflection.MethodAttributes.Static" />. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <exception cref="T:System.ArgumentException">The method is not static. That is, <paramref name="attributes" /> does not include <see cref="F:System.Reflection.MethodAttributes.Static" />.-or- The length of <paramref name="name" /> is zero -or-An element in the <see cref="T:System.Type" /> array is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> has been previously called. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary>Defines an initialized data field in the .sdata section of the portable executable (PE) file.</summary>
      <returns>A field to reference the data.</returns>
      <param name="name">The name used to refer to the data. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="data">The binary large object (BLOB) of data. </param>
      <param name="attributes">The attributes for the field. The default is Static. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero.-or- The size of <paramref name="data" /> is less than or equal to zero or greater than or equal to 0x3f0000. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="data" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> has been previously called. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineManifestResource(System.String,System.IO.Stream,System.Reflection.ResourceAttributes)">
      <summary>Defines a binary large object (BLOB) that represents a manifest resource to be embedded in the dynamic assembly.</summary>
      <param name="name">The case-sensitive name for the resource.</param>
      <param name="stream">A stream that contains the bytes for the resource.</param>
      <param name="attribute">An enumeration value that specifies whether the resource is public or private.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-<paramref name="stream" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is a zero-length string.</exception>
      <exception cref="T:System.InvalidOperationException">The dynamic assembly that contains the current module is transient; that is, no file name was specified when <see cref="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.String)" /> was called.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>Defines a PInvoke method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the PInvoke flags.</summary>
      <returns>The defined PInvoke method.</returns>
      <param name="name">The name of the PInvoke method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="dllName">The name of the DLL in which the PInvoke method is defined. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="callingConvention">The method's calling convention. </param>
      <param name="returnType">The method's return type. </param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <param name="nativeCallConv">The native calling convention. </param>
      <param name="nativeCharSet">The method's native character set. </param>
      <exception cref="T:System.ArgumentException">The method is not static or if the containing type is an interface.-or- The method is abstract.-or- The method was previously defined. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="dllName" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /></exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>Defines a PInvoke method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the PInvoke flags.</summary>
      <returns>The defined PInvoke method.</returns>
      <param name="name">The name of the PInvoke method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="dllName">The name of the DLL in which the PInvoke method is defined. </param>
      <param name="entryName">The name of the entry point in the DLL. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="callingConvention">The method's calling convention. </param>
      <param name="returnType">The method's return type. </param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <param name="nativeCallConv">The native calling convention. </param>
      <param name="nativeCharSet">The method's native character set. </param>
      <exception cref="T:System.ArgumentException">The method is not static or if the containing type is an interface or if the method is abstract of if the method was previously defined. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="dllName" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /></exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineResource(System.String,System.String)">
      <summary>Defines the named managed embedded resource to be stored in this module.</summary>
      <returns>A resource writer for the defined resource.</returns>
      <param name="name">The name of the resource. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="description">The description of the resource. </param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="name" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">This module is transient.-or- The containing assembly is not persistable. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineResource(System.String,System.String,System.Reflection.ResourceAttributes)">
      <summary>Defines the named managed embedded resource with the given attributes that is to be stored in this module.</summary>
      <returns>A resource writer for the defined resource.</returns>
      <param name="name">The name of the resource. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="description">The description of the resource. </param>
      <param name="attribute">The resource attributes. </param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="name" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">This module is transient.-or- The containing assembly is not persistable. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)">
      <summary>Constructs a TypeBuilder for a private type with the specified name in this module. </summary>
      <returns>A private type with the specified name.</returns>
      <param name="name">The full path of the type, including the namespace. <paramref name="name" /> cannot contain embedded nulls. </param>
      <exception cref="T:System.ArgumentException">A type with the given name exists in the parent assembly of this module.-or- Nested type attributes are set on a type that is not nested. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)">
      <summary>Constructs a TypeBuilder given the type name and the type attributes.</summary>
      <returns>A TypeBuilder created with all of the requested attributes.</returns>
      <param name="name">The full path of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the defined type. </param>
      <exception cref="T:System.ArgumentException">A type with the given name exists in the parent assembly of this module.-or- Nested type attributes are set on a type that is not nested. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>Constructs a TypeBuilder given type name, its attributes, and the type that the defined type extends.</summary>
      <returns>A TypeBuilder created with all of the requested attributes.</returns>
      <param name="name">The full path of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attribute to be associated with the type. </param>
      <param name="parent">The type that the defined type extends. </param>
      <exception cref="T:System.ArgumentException">A type with the given name exists in the parent assembly of this module.-or- Nested type attributes are set on a type that is not nested. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary>Constructs a TypeBuilder given the type name, the attributes, the type that the defined type extends, and the total size of the type.</summary>
      <returns>A TypeBuilder object.</returns>
      <param name="name">The full path of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the defined type. </param>
      <param name="parent">The type that the defined type extends. </param>
      <param name="typesize">The total size of the type. </param>
      <exception cref="T:System.ArgumentException">A type with the given name exists in the parent assembly of this module.-or- Nested type attributes are set on a type that is not nested. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary>Constructs a TypeBuilder given the type name, the attributes, the type that the defined type extends, and the packing size of the type.</summary>
      <returns>A TypeBuilder object.</returns>
      <param name="name">The full path of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the defined type. </param>
      <param name="parent">The type that the defined type extends. </param>
      <param name="packsize">The packing size of the type. </param>
      <exception cref="T:System.ArgumentException">A type with the given name exists in the parent assembly of this module.-or- Nested type attributes are set on a type that is not nested. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary>Constructs a TypeBuilder given the type name, attributes, the type that the defined type extends, the packing size of the defined type, and the total size of the defined type.</summary>
      <returns>A TypeBuilder created with all of the requested attributes.</returns>
      <param name="name">The full path of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the defined type. </param>
      <param name="parent">The type that the defined type extends. </param>
      <param name="packingSize">The packing size of the type. </param>
      <param name="typesize">The total size of the type. </param>
      <exception cref="T:System.ArgumentException">A type with the given name exists in the parent assembly of this module.-or- Nested type attributes are set on a type that is not nested. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>Constructs a TypeBuilder given the type name, attributes, the type that the defined type extends, and the interfaces that the defined type implements.</summary>
      <returns>A TypeBuilder created with all of the requested attributes.</returns>
      <param name="name">The full path of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes to be associated with the type. </param>
      <param name="parent">The type that the defined type extends. </param>
      <param name="interfaces">The list of interfaces that the type implements. </param>
      <exception cref="T:System.ArgumentException">A type with the given name exists in the parent assembly of this module.-or- Nested type attributes are set on a type that is not nested. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary>Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.</summary>
      <returns>A field to reference the data.</returns>
      <param name="name">The name used to refer to the data. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="size">The size of the data field. </param>
      <param name="attributes">The attributes for the field. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero.-or- <paramref name="size" /> is less than or equal to zero, or greater than or equal to 0x003f0000. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> has been previously called. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(System.Byte[])">
      <summary>Defines an unmanaged embedded resource given an opaque binary large object (BLOB) of bytes.</summary>
      <param name="resource">An opaque BLOB that represents an unmanaged resource </param>
      <exception cref="T:System.ArgumentException">An unmanaged resource has already been defined in the module's assembly. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resource" /> is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(System.String)">
      <summary>Defines an unmanaged resource given the name of Win32 resource file.</summary>
      <param name="resourceFileName">The name of the unmanaged resource file. </param>
      <exception cref="T:System.ArgumentException">An unmanaged resource has already been defined in the module's assembly.-or- <paramref name="resourceFileName" /> is the empty string (""). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceFileName" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="resourceFileName" /> is not found. -or- <paramref name="resourceFileName" /> is a directory. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to the specified object.</summary>
      <returns>true if <paramref name="obj" /> equals the type and value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance, or null.</param>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.FullyQualifiedName">
      <summary>Gets a String representing the fully qualified name and path to this module.</summary>
      <returns>The fully qualified module name.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>Returns the named method on an array class.</summary>
      <returns>The named method on an array class.</returns>
      <param name="arrayClass">An array class. </param>
      <param name="methodName">The name of a method on the array class. </param>
      <param name="callingConvention">The method's calling convention. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayClass" /> is not an array. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="arrayClass" /> or <paramref name="methodName" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>Returns the token for the named method on an array class.</summary>
      <returns>The token for the named method on an array class.</returns>
      <param name="arrayClass">The object for the array. </param>
      <param name="methodName">A string that contains the name of the method. </param>
      <param name="callingConvention">The calling convention for the method. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="parameterTypes">The types of the parameters of the method. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayClass" /> is not an array.-or- The length of <paramref name="methodName" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="arrayClass" /> or <paramref name="methodName" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetConstructorToken(System.Reflection.ConstructorInfo)">
      <summary>Returns the token used to identify the specified constructor within this module.</summary>
      <returns>The token used to identify the specified constructor within this module.</returns>
      <param name="con">The constructor to get a token for. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</summary>
      <returns>An array that contains the custom attributes; the array is empty if there are no attributes.</returns>
      <param name="inherit">This argument is ignored for objects of this type.</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns all the custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.ModuleBuilder" />, and that derive from a specified attribute type.</summary>
      <returns>An array that contains the custom attributes that are derived, at any level, from <paramref name="attributeType" />; the array is empty if there are no such attributes.</returns>
      <param name="attributeType">The base type from which attributes derive.</param>
      <param name="inherit">This argument is ignored for objects of this type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the runtime. For example, <paramref name="attributeType" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> object.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData">
      <summary>Returns information about the attributes that have been applied to the current <see cref="T:System.Reflection.Emit.ModuleBuilder" />, expressed as <see cref="T:System.Reflection.CustomAttributeData" /> objects.</summary>
      <returns>A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the current module.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns a module-level field, defined in the .sdata region of the portable executable (PE) file, that has the specified name and binding attributes.</summary>
      <returns>A field that has the specified name and binding attributes, or null if the field does not exist.</returns>
      <param name="name">The field name. </param>
      <param name="bindingAttr">A combination of the BindingFlags bit flags used to control the search. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns all fields defined in the .sdata region of the portable executable (PE) file that match the specified binding flags.</summary>
      <returns>An array of fields that match the specified flags; the array is empty if no such fields exist.</returns>
      <param name="bindingFlags">A combination of the BindingFlags bit flags used to control the search.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetFieldToken(System.Reflection.FieldInfo)">
      <summary>Returns the token used to identify the specified field within this module.</summary>
      <returns>The token used to identify the specified field within this module.</returns>
      <param name="field">The field to get a token for. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Returns the module-level method that matches the specified criteria.</summary>
      <returns>A method that is defined at the module level, and matches the specified criteria; or null if such a method does not exist.</returns>
      <param name="name">The method name. </param>
      <param name="bindingAttr">A combination of BindingFlags bit flags used to control the search. </param>
      <param name="binder">An object that implements Binder, containing properties related to this method. </param>
      <param name="callConvention">The calling convention for the method. </param>
      <param name="types">The parameter types of the method. </param>
      <param name="modifiers">An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null, <paramref name="types" /> is null, or an element of <paramref name="types" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>Returns all the methods that have been defined at the module level for the current <see cref="T:System.Reflection.Emit.ModuleBuilder" />, and that match the specified binding flags.</summary>
      <returns>An array that contains all the module-level methods that match <paramref name="bindingFlags" />.</returns>
      <param name="bindingFlags">A combination of BindingFlags bit flags used to control the search.</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)">
      <summary>Returns the token used to identify the specified method within this module.</summary>
      <returns>The token used to identify the specified method within this module.</returns>
      <param name="method">The method to get a token for. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The declaring type for the method is not in this module. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)">
      <summary>Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.</summary>
      <param name="peKind">When this method returns, a combination of the <see cref="T:System.Reflection.PortableExecutableKinds" /> values indicating the nature of the code in the module.</param>
      <param name="machine">When this method returns, one of the <see cref="T:System.Reflection.ImageFileMachine" /> values indicating the platform targeted by the module.</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetSignatureToken(System.Byte[],System.Int32)">
      <summary>Defines a token for the signature that has the specified character array and signature length.</summary>
      <returns>A token for the specified signature.</returns>
      <param name="sigBytes">The signature binary large object (BLOB). </param>
      <param name="sigLength">The length of the signature BLOB. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sigBytes" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetSignatureToken(System.Reflection.Emit.SignatureHelper)">
      <summary>Defines a token for the signature that is defined by the specified <see cref="T:System.Reflection.Emit.SignatureHelper" />.</summary>
      <returns>A token for the defined signature.</returns>
      <param name="sigHelper">The signature. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sigHelper" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetSignerCertificate">
      <summary>Returns an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object corresponding to the certificate included in the Authenticode signature of the assembly which this module belongs to. If the assembly has not been Authenticode signed, null is returned.</summary>
      <returns>A certificate, or null if the assembly to which this module belongs has not been Authenticode signed.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetStringConstant(System.String)">
      <summary>Returns the token of the given string in the module’s constant pool.</summary>
      <returns>The token of the string in the constant pool.</returns>
      <param name="str">The string to add to the module's constant pool. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetSymWriter">
      <summary>Returns the symbol writer associated with this dynamic module.</summary>
      <returns>The symbol writer associated with this dynamic module.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String)">
      <summary>Gets the named type defined in the module.</summary>
      <returns>The requested type, if the type is defined in this module; otherwise, null.</returns>
      <param name="className">The name of the <see cref="T:System.Type" /> to get. </param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="className" /> is zero or is greater than 1023. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The requested <see cref="T:System.Type" /> is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect non-public objects outside the current assembly. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.TypeLoadException">An error is encountered while loading the <see cref="T:System.Type" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean)">
      <summary>Gets the named type defined in the module, optionally ignoring the case of the type name.</summary>
      <returns>The requested type, if the type is defined in this module; otherwise, null.</returns>
      <param name="className">The name of the <see cref="T:System.Type" /> to get. </param>
      <param name="ignoreCase">If true, the search is case-insensitive. If false, the search is case-sensitive. </param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="className" /> is zero or is greater than 1023. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The requested <see cref="T:System.Type" /> is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect non-public objects outside the current assembly. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Gets the named type defined in the module, optionally ignoring the case of the type name. Optionally throws an exception if the type is not found.</summary>
      <returns>The specified type, if the type is declared in this module; otherwise, null.</returns>
      <param name="className">The name of the <see cref="T:System.Type" /> to get. </param>
      <param name="throwOnError">true to throw an exception if the type cannot be found; false to return null. </param>
      <param name="ignoreCase">If true, the search is case-insensitive. If false, the search is case-sensitive. </param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="className" /> is zero or is greater than 1023. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> is null. </exception>
      <exception cref="T:System.Security.SecurityException">The requested <see cref="T:System.Type" /> is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect non-public objects outside the current assembly. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true and the specified type is not found. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypes">
      <summary>Returns all the classes defined within this module.</summary>
      <returns>An array that contains the types defined within the module that is reflected by this instance.</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">One or more classes in a module could not be loaded. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypeToken(System.String)">
      <summary>Returns the token used to identify the type with the specified name.</summary>
      <returns>The token used to identify the type with the specified name within this module.</returns>
      <param name="name">The name of the class, including the namespace. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is the empty string ("").-or-<paramref name="name" /> represents a ByRef type. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. -or-The type specified by <paramref name="name" /> could not be found.</exception>
      <exception cref="T:System.InvalidOperationException">This is a non-transient module that references a transient module. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypeToken(System.Type)">
      <summary>Returns the token used to identify the specified type within this module.</summary>
      <returns>The token used to identify the given type within this module.</returns>
      <param name="type">The type object that represents the class type. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is a ByRef type. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">This is a non-transient module that references a transient module. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether the specified attribute type has been applied to this module.</summary>
      <returns>true if one or more instances of <paramref name="attributeType" /> have been applied to this module; otherwise, false.</returns>
      <param name="attributeType">The type of custom attribute to test for.</param>
      <param name="inherit">This argument is ignored for objects of this type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a <see cref="T:System.Type" /> object supplied by the runtime. For example, <paramref name="attributeType" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> object.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsResource">
      <summary>Gets a value indicating whether the object is a resource.</summary>
      <returns>true if the object is a resource; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsTransient">
      <summary>Returns a value that indicates whether this dynamic module is transient.</summary>
      <returns>true if this dynamic module is transient; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MDStreamVersion">
      <summary>Gets the metadata stream version.</summary>
      <returns>A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MetadataToken">
      <summary>Gets a token that identifies the current dynamic module in metadata.</summary>
      <returns>An integer token that identifies the current module in metadata.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ModuleVersionId">
      <summary>Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.</summary>
      <returns>A <see cref="T:System.Guid" /> that can be used to distinguish between two versions of a module.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Name">
      <summary>A string that indicates that this is an in-memory module.</summary>
      <returns>Text that indicates that this is an in-memory module.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveField(System.Int32,System.Type[],System.Type[])">
      <summary>Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object representing the field that is identified by the specified metadata token.</returns>
      <param name="metadataToken">A metadata token that identifies a field in the module.</param>
      <param name="genericTypeArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the type where the token is in scope, or null if that type is not generic. </param>
      <param name="genericMethodArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the method where the token is in scope, or null if that method is not generic.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a field in the scope of the current module.-or-<paramref name="metadataToken" /> identifies a field whose parent TypeSpec has a signature containing element type var (a type parameter of a generic type) or mvar (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <paramref name="genericTypeArguments" /> and <paramref name="genericMethodArguments" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMember(System.Int32,System.Type[],System.Type[])">
      <summary>Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.</summary>
      <returns>A <see cref="T:System.Reflection.MemberInfo" /> object representing the type or member that is identified by the specified metadata token.</returns>
      <param name="metadataToken">A metadata token that identifies a type or member in the module.</param>
      <param name="genericTypeArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the type where the token is in scope, or null if that type is not generic. </param>
      <param name="genericMethodArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the method where the token is in scope, or null if that method is not generic.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a type or member in the scope of the current module.-or-<paramref name="metadataToken" /> is a MethodSpec or TypeSpec whose signature contains element type var (a type parameter of a generic type) or mvar (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <paramref name="genericTypeArguments" /> and <paramref name="genericMethodArguments" />.-or-<paramref name="metadataToken" /> identifies a property or event.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMethod(System.Int32,System.Type[],System.Type[])">
      <summary>Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters. </summary>
      <returns>A <see cref="T:System.Reflection.MethodBase" /> object representing the method that is identified by the specified metadata token.</returns>
      <param name="metadataToken">A metadata token that identifies a method or constructor in the module.</param>
      <param name="genericTypeArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the type where the token is in scope, or null if that type is not generic. </param>
      <param name="genericMethodArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the method where the token is in scope, or null if that method is not generic.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a method or constructor in the scope of the current module.-or-<paramref name="metadataToken" /> is a MethodSpec whose signature contains element type var (a type parameter of a generic type) or mvar (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <paramref name="genericTypeArguments" /> and <paramref name="genericMethodArguments" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveSignature(System.Int32)">
      <summary>Returns the signature blob identified by a metadata token.</summary>
      <returns>An array of bytes representing the signature blob.</returns>
      <param name="metadataToken">A metadata token that identifies a signature in the module.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a valid MemberRef, MethodDef, TypeSpec, signature, or FieldDef token in the scope of the current module.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveString(System.Int32)">
      <summary>Returns the string identified by the specified metadata token.</summary>
      <returns>A <see cref="T:System.String" /> containing a string value from the metadata string heap.</returns>
      <param name="metadataToken">A metadata token that identifies a string in the string heap of the module.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a string in the scope of the current module. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveType(System.Int32,System.Type[],System.Type[])">
      <summary>Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the type that is identified by the specified metadata token.</returns>
      <param name="metadataToken">A metadata token that identifies a type in the module.</param>
      <param name="genericTypeArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the type where the token is in scope, or null if that type is not generic. </param>
      <param name="genericMethodArguments">An array of <see cref="T:System.Type" /> objects representing the generic type arguments of the method where the token is in scope, or null if that method is not generic.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> is not a token for a type in the scope of the current module.-or-<paramref name="metadataToken" /> is a TypeSpec whose signature contains element type var (a type parameter of a generic type) or mvar (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <paramref name="genericTypeArguments" /> and <paramref name="genericMethodArguments" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> is not a valid token in the scope of the current module.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ScopeName">
      <summary>Gets a string that represents the name of the dynamic module.</summary>
      <returns>The name of the dynamic module.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Applies a custom attribute to this module by using a specified binary large object (BLOB) that represents the attribute.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte BLOB representing the attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> or <paramref name="binaryAttribute" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Applies a custom attribute to this module by using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class that specifies the custom attribute to apply. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
      <summary>This method does nothing.</summary>
      <param name="name">The name of the custom attribute </param>
      <param name="data">An opaque binary large object (BLOB) of bytes that represents the value of the custom attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetUserEntryPoint(System.Reflection.MethodInfo)">
      <summary>Sets the user entry point.</summary>
      <param name="entryPoint">The user entry point. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entryPoint" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">This method is called on a dynamic module that is not a debug module.-or- <paramref name="entryPoint" /> is not contained in this dynamic module. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>For a description of this member, see <see cref="M:System.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />. </summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>For a description of this member, see <see cref="M:System.Runtime.InteropServices._ModuleBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#GetTypeInfoCount(System.UInt32@)">
      <summary>For a description of this member, see <see cref="M:System.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount(System.UInt32@)" />.</summary>
      <param name="pcTInfo">The location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>For a description of this member, see <see cref="M:System.Runtime.InteropServices._ModuleBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />.</summary>
      <param name="dispIdMember">The member ID.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="T:System.Reflection.Emit.OpCode">
      <summary>Describes a Microsoft intermediate language (MSIL) instruction.</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Object)">
      <summary>Tests whether the given object is equal to this Opcode.</summary>
      <returns>true if <paramref name="obj" /> is an instance of Opcode and is equal to this object; otherwise, false.</returns>
      <param name="obj">The object to compare to this object. </param>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.OpCode" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.OpCode" /> to compare to the current instance.</param>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.FlowControl">
      <summary>The flow control characteristics of the Microsoft intermediate language (MSIL) instruction.</summary>
      <returns>Read-only. The type of flow control.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.GetHashCode">
      <summary>Returns the generated hash code for this Opcode.</summary>
      <returns>Returns the hash code for this instance.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Name">
      <summary>The name of the Microsoft intermediate language (MSIL) instruction.</summary>
      <returns>Read-only. The name of the MSIL instruction.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.OpCode" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.OpCode" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.OpCode" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.OpCode" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.OpCode" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.OpCode" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OpCodeType">
      <summary>The type of Microsoft intermediate language (MSIL) instruction.</summary>
      <returns>Read-only. The type of Microsoft intermediate language (MSIL) instruction.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OperandType">
      <summary>The operand type of an Microsoft intermediate language (MSIL) instruction.</summary>
      <returns>Read-only. The operand type of an MSIL instruction.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Size">
      <summary>The size of the Microsoft intermediate language (MSIL) instruction.</summary>
      <returns>Read-only. The size of the MSIL instruction.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPop">
      <summary>How the Microsoft intermediate language (MSIL) instruction pops the stack.</summary>
      <returns>Read-only. The way the MSIL instruction pops the stack.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPush">
      <summary>How the Microsoft intermediate language (MSIL) instruction pushes operand onto the stack.</summary>
      <returns>Read-only. The way the MSIL instruction pushes operand onto the stack.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.ToString">
      <summary>Returns this Opcode as a <see cref="T:System.String" />.</summary>
      <returns>Returns a <see cref="T:System.String" /> containing the name of this Opcode.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Value">
      <summary>The value of the immediate operand of the Microsoft intermediate language (MSIL) instruction.</summary>
      <returns>Read-only. The value of the immediate operand of the MSIL instruction.</returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodes">
      <summary>Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the <see cref="T:System.Reflection.Emit.ILGenerator" /> class members (such as <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add">
      <summary>Adds two values and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf">
      <summary>Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un">
      <summary>Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.And">
      <summary>Computes the bitwise AND of two values and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Arglist">
      <summary>Returns an unmanaged pointer to the argument list of the current method.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq">
      <summary>Transfers control to a target instruction if two values are equal.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq_S">
      <summary>Transfers control to a target instruction (short form) if two values are equal.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge">
      <summary>Transfers control to a target instruction if the first value is greater than or equal to the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_S">
      <summary>Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un">
      <summary>Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un_S">
      <summary>Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt">
      <summary>Transfers control to a target instruction if the first value is greater than the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_S">
      <summary>Transfers control to a target instruction (short form) if the first value is greater than the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un">
      <summary>Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un_S">
      <summary>Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble">
      <summary>Transfers control to a target instruction if the first value is less than or equal to the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_S">
      <summary>Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un">
      <summary>Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un_S">
      <summary>Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt">
      <summary>Transfers control to a target instruction if the first value is less than the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_S">
      <summary>Transfers control to a target instruction (short form) if the first value is less than the second value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un">
      <summary>Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un_S">
      <summary>Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un">
      <summary>Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un_S">
      <summary>Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Box">
      <summary>Converts a value type to an object reference (type O).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br">
      <summary>Unconditionally transfers control to a target instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br_S">
      <summary>Unconditionally transfers control to a target instruction (short form).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Break">
      <summary>Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse">
      <summary>Transfers control to a target instruction if <paramref name="value" /> is false, a null reference (Nothing in Visual Basic), or zero.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse_S">
      <summary>Transfers control to a target instruction if <paramref name="value" /> is false, a null reference, or zero.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue">
      <summary>Transfers control to a target instruction if <paramref name="value" /> is true, not null, or non-zero.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue_S">
      <summary>Transfers control to a target instruction (short form) if <paramref name="value" /> is true, not null, or non-zero.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Call">
      <summary>Calls the method indicated by the passed method descriptor.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Calli">
      <summary>Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Callvirt">
      <summary>Calls a late-bound method on an object, pushing the return value onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Castclass">
      <summary>Attempts to cast an object passed by reference to the specified class.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ceq">
      <summary>Compares two values. If they are equal, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt">
      <summary>Compares two values. If the first value is greater than the second, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt_Un">
      <summary>Compares two unsigned or unordered values. If the first value is greater than the second, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ckfinite">
      <summary>Throws <see cref="T:System.ArithmeticException" /> if value is not a finite number.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt">
      <summary>Compares two values. If the first value is less than the second, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt_Un">
      <summary>Compares the unsigned or unordered values <paramref name="value1" /> and <paramref name="value2" />. If <paramref name="value1" /> is less than <paramref name="value2" />, then the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Constrained">
      <summary>Constrains the type on which a virtual method call is made.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I">
      <summary>Converts the value on top of the evaluation stack to native int.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I1">
      <summary>Converts the value on top of the evaluation stack to int8, then extends (pads) it to int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I2">
      <summary>Converts the value on top of the evaluation stack to int16, then extends (pads) it to int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I4">
      <summary>Converts the value on top of the evaluation stack to int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I8">
      <summary>Converts the value on top of the evaluation stack to int64.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I">
      <summary>Converts the signed value on top of the evaluation stack to signed native int, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to signed native int, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1">
      <summary>Converts the signed value on top of the evaluation stack to signed int8 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to signed int8 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2">
      <summary>Converts the signed value on top of the evaluation stack to signed int16 and extending it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to signed int16 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4">
      <summary>Converts the signed value on top of the evaluation stack to signed int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to signed int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8">
      <summary>Converts the signed value on top of the evaluation stack to signed int64, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to signed int64, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U">
      <summary>Converts the signed value on top of the evaluation stack to unsigned native int, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to unsigned native int, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1">
      <summary>Converts the signed value on top of the evaluation stack to unsigned int8 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to unsigned int8 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2">
      <summary>Converts the signed value on top of the evaluation stack to unsigned int16 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to unsigned int16 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4">
      <summary>Converts the signed value on top of the evaluation stack to unsigned int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to unsigned int32, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8">
      <summary>Converts the signed value on top of the evaluation stack to unsigned int64, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un">
      <summary>Converts the unsigned value on top of the evaluation stack to unsigned int64, throwing <see cref="T:System.OverflowException" /> on overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R_Un">
      <summary>Converts the unsigned integer value on top of the evaluation stack to float32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R4">
      <summary>Converts the value on top of the evaluation stack to float32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R8">
      <summary>Converts the value on top of the evaluation stack to float64.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U">
      <summary>Converts the value on top of the evaluation stack to unsigned native int, and extends it to native int.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U1">
      <summary>Converts the value on top of the evaluation stack to unsigned int8, and extends it to int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U2">
      <summary>Converts the value on top of the evaluation stack to unsigned int16, and extends it to int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U4">
      <summary>Converts the value on top of the evaluation stack to unsigned int32, and extends it to int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U8">
      <summary>Converts the value on top of the evaluation stack to unsigned int64, and extends it to int64.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpblk">
      <summary>Copies a specified number bytes from a source address to a destination address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpobj">
      <summary>Copies the value type located at the address of an object (type &amp;, * or native int) to the address of the destination object (type &amp;, * or native int).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div">
      <summary>Divides two values and pushes the result as a floating-point (type F) or quotient (type int32) onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div_Un">
      <summary>Divides two unsigned integer values and pushes the result (int32) onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Dup">
      <summary>Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfilter">
      <summary>Transfers control from the filter clause of an exception back to the Common Language Infrastructure (CLI) exception handler.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfinally">
      <summary>Transfers control from the fault or finally clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initblk">
      <summary>Initializes a specified block of memory at a specific address to a given size and initial value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initobj">
      <summary>Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Isinst">
      <summary>Tests whether an object reference (type O) is an instance of a particular class.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Jmp">
      <summary>Exits current method and jumps to specified method.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg">
      <summary>Loads an argument (referenced by a specified index value) onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_0">
      <summary>Loads the argument at index 0 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_1">
      <summary>Loads the argument at index 1 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_2">
      <summary>Loads the argument at index 2 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_3">
      <summary>Loads the argument at index 3 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_S">
      <summary>Loads the argument (referenced by a specified short form index) onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga">
      <summary>Load an argument address onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga_S">
      <summary>Load an argument address, in short form, onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4">
      <summary>Pushes a supplied value of type int32 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_0">
      <summary>Pushes the integer value of 0 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_1">
      <summary>Pushes the integer value of 1 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_2">
      <summary>Pushes the integer value of 2 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_3">
      <summary>Pushes the integer value of 3 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_4">
      <summary>Pushes the integer value of 4 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_5">
      <summary>Pushes the integer value of 5 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_6">
      <summary>Pushes the integer value of 6 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_7">
      <summary>Pushes the integer value of 7 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_8">
      <summary>Pushes the integer value of 8 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1">
      <summary>Pushes the integer value of -1 onto the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_S">
      <summary>Pushes the supplied int8 value onto the evaluation stack as an int32, short form.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I8">
      <summary>Pushes a supplied value of type int64 onto the evaluation stack as an int64.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R4">
      <summary>Pushes a supplied value of type float32 onto the evaluation stack as type F (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R8">
      <summary>Pushes a supplied value of type float64 onto the evaluation stack as type F (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem">
      <summary>Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction. </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I">
      <summary>Loads the element with type native int at a specified array index onto the top of the evaluation stack as a native int.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I1">
      <summary>Loads the element with type int8 at a specified array index onto the top of the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I2">
      <summary>Loads the element with type int16 at a specified array index onto the top of the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I4">
      <summary>Loads the element with type int32 at a specified array index onto the top of the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I8">
      <summary>Loads the element with type int64 at a specified array index onto the top of the evaluation stack as an int64.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R4">
      <summary>Loads the element with type float32 at a specified array index onto the top of the evaluation stack as type F (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R8">
      <summary>Loads the element with type float64 at a specified array index onto the top of the evaluation stack as type F (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_Ref">
      <summary>Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type O (object reference).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U1">
      <summary>Loads the element with type unsigned int8 at a specified array index onto the top of the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U2">
      <summary>Loads the element with type unsigned int16 at a specified array index onto the top of the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U4">
      <summary>Loads the element with type unsigned int32 at a specified array index onto the top of the evaluation stack as an int32.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelema">
      <summary>Loads the address of the array element at a specified array index onto the top of the evaluation stack as type &amp; (managed pointer).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldfld">
      <summary>Finds the value of a field in the object whose reference is currently on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldflda">
      <summary>Finds the address of a field in the object whose reference is currently on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldftn">
      <summary>Pushes an unmanaged pointer (type native int) to the native code implementing a specific method onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I">
      <summary>Loads a value of type native int as a native int onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I1">
      <summary>Loads a value of type int8 as an int32 onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I2">
      <summary>Loads a value of type int16 as an int32 onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I4">
      <summary>Loads a value of type int32 as an int32 onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I8">
      <summary>Loads a value of type int64 as an int64 onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R4">
      <summary>Loads a value of type float32 as a type F (float) onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R8">
      <summary>Loads a value of type float64 as a type F (float) onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_Ref">
      <summary>Loads an object reference as a type O (object reference) onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U1">
      <summary>Loads a value of type unsigned int8 as an int32 onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U2">
      <summary>Loads a value of type unsigned int16 as an int32 onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U4">
      <summary>Loads a value of type unsigned int32 as an int32 onto the evaluation stack indirectly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldlen">
      <summary>Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc">
      <summary>Loads the local variable at a specific index onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_0">
      <summary>Loads the local variable at index 0 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_1">
      <summary>Loads the local variable at index 1 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_2">
      <summary>Loads the local variable at index 2 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_3">
      <summary>Loads the local variable at index 3 onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_S">
      <summary>Loads the local variable at a specific index onto the evaluation stack, short form.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca">
      <summary>Loads the address of the local variable at a specific index onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca_S">
      <summary>Loads the address of the local variable at a specific index onto the evaluation stack, short form.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldnull">
      <summary>Pushes a null reference (type O) onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldobj">
      <summary>Copies the value type object pointed to by an address to the top of the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsfld">
      <summary>Pushes the value of a static field onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsflda">
      <summary>Pushes the address of a static field onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldstr">
      <summary>Pushes a new object reference to a string literal stored in the metadata.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldtoken">
      <summary>Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldvirtftn">
      <summary>Pushes an unmanaged pointer (type native int) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave">
      <summary>Exits a protected region of code, unconditionally transferring control to a specific target instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave_S">
      <summary>Exits a protected region of code, unconditionally transferring control to a target instruction (short form).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Localloc">
      <summary>Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type *) of the first allocated byte onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mkrefany">
      <summary>Pushes a typed reference to an instance of a specific type onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul">
      <summary>Multiplies two values and pushes the result on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf">
      <summary>Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un">
      <summary>Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Neg">
      <summary>Negates a value and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newarr">
      <summary>Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newobj">
      <summary>Creates a new object or a new instance of a value type, pushing an object reference (type O) onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Nop">
      <summary>Fills space if opcodes are patched. No meaningful operation is performed although a processing cycle can be consumed.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Not">
      <summary>Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Or">
      <summary>Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Pop">
      <summary>Removes the value currently on top of the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix1">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix2">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix3">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix4">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix5">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix6">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix7">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefixref">
      <summary>This is a reserved instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Readonly">
      <summary>Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanytype">
      <summary>Retrieves the type token embedded in a typed reference.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanyval">
      <summary>Retrieves the address (type &amp;) embedded in a typed reference.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem">
      <summary>Divides two values and pushes the remainder onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem_Un">
      <summary>Divides two unsigned values and pushes the remainder onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ret">
      <summary>Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rethrow">
      <summary>Rethrows the current exception.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shl">
      <summary>Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr">
      <summary>Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr_Un">
      <summary>Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sizeof">
      <summary>Pushes the size, in bytes, of a supplied value type onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg">
      <summary>Stores the value on top of the evaluation stack in the argument slot at a specified index.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg_S">
      <summary>Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem">
      <summary>Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I">
      <summary>Replaces the array element at a given index with the native int value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I1">
      <summary>Replaces the array element at a given index with the int8 value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I2">
      <summary>Replaces the array element at a given index with the int16 value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I4">
      <summary>Replaces the array element at a given index with the int32 value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I8">
      <summary>Replaces the array element at a given index with the int64 value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R4">
      <summary>Replaces the array element at a given index with the float32 value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R8">
      <summary>Replaces the array element at a given index with the float64 value on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_Ref">
      <summary>Replaces the array element at a given index with the object ref value (type O) on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stfld">
      <summary>Replaces the value stored in the field of an object reference or pointer with a new value.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I">
      <summary>Stores a value of type native int at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I1">
      <summary>Stores a value of type int8 at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I2">
      <summary>Stores a value of type int16 at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I4">
      <summary>Stores a value of type int32 at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I8">
      <summary>Stores a value of type int64 at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R4">
      <summary>Stores a value of type float32 at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R8">
      <summary>Stores a value of type float64 at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_Ref">
      <summary>Stores a object reference value at a supplied address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc">
      <summary>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_0">
      <summary>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_1">
      <summary>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_2">
      <summary>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_3">
      <summary>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_S">
      <summary>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at <paramref name="index" /> (short form).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stobj">
      <summary>Copies a value of a specified type from the evaluation stack into a supplied memory address.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stsfld">
      <summary>Replaces the value of a static field with a value from the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub">
      <summary>Subtracts one value from another and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf">
      <summary>Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un">
      <summary>Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Switch">
      <summary>Implements a jump table.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Tailcall">
      <summary>Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)">
      <summary>Returns true or false if the supplied opcode takes a single byte argument.</summary>
      <returns>True or false.</returns>
      <param name="inst">An instance of an Opcode object. </param>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Throw">
      <summary>Throws the exception object currently on the evaluation stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unaligned">
      <summary>Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following ldind, stind, ldfld, stfld, ldobj, stobj, initblk, or cpblk instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox">
      <summary>Converts the boxed representation of a value type to its unboxed form.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox_Any">
      <summary>Converts the boxed representation of a type specified in the instruction to its unboxed form. </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Volatile">
      <summary>Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Xor">
      <summary>Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.</summary>
    </member>
    <member name="T:System.Reflection.Emit.OpCodeType">
      <summary>Describes the types of the Microsoft intermediate language (MSIL) instructions.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Annotation">
      <summary>This enumerator value is reserved and should not be used.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Macro">
      <summary>These are Microsoft intermediate language (MSIL) instructions that are used as a synonym for other MSIL instructions. For example, ldarg.0 represents the ldarg instruction with an argument of 0.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Nternal">
      <summary>Describes a reserved Microsoft intermediate language (MSIL) instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Objmodel">
      <summary>Describes a Microsoft intermediate language (MSIL) instruction that applies to objects.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Prefix">
      <summary>Describes a prefix instruction that modifies the behavior of the following instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Primitive">
      <summary>Describes a built-in instruction.</summary>
    </member>
    <member name="T:System.Reflection.Emit.OperandType">
      <summary>Describes the operand type of Microsoft intermediate language (MSIL) instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineBrTarget">
      <summary>The operand is a 32-bit integer branch target.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineField">
      <summary>The operand is a 32-bit metadata token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI">
      <summary>The operand is a 32-bit integer.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI8">
      <summary>The operand is a 64-bit integer.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineMethod">
      <summary>The operand is a 32-bit metadata token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineNone">
      <summary>No operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlinePhi">
      <summary>The operand is reserved and should not be used.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineR">
      <summary>The operand is a 64-bit IEEE floating point number.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSig">
      <summary>The operand is a 32-bit metadata signature token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineString">
      <summary>The operand is a 32-bit metadata string token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSwitch">
      <summary>The operand is the 32-bit integer argument to a switch instruction.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineTok">
      <summary>The operand is a FieldRef, MethodRef, or TypeRef token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineType">
      <summary>The operand is a 32-bit metadata token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineVar">
      <summary>The operand is 16-bit integer containing the ordinal of a local variable or an argument.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineBrTarget">
      <summary>The operand is an 8-bit integer branch target.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineI">
      <summary>The operand is an 8-bit integer.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineR">
      <summary>The operand is a 32-bit IEEE floating point number.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineVar">
      <summary>The operand is an 8-bit integer containing the ordinal of a local variable or an argumenta.</summary>
    </member>
    <member name="T:System.Reflection.Emit.PackingSize">
      <summary>Specifies one of two factors that determine the memory alignment of fields when a type is marshaled.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Unspecified">
      <summary>The packing size is not specified.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size1">
      <summary>The packing size is 1 byte.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size2">
      <summary>The packing size is 2 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size4">
      <summary>The packing size is 4 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size8">
      <summary>The packing size is 8 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size16">
      <summary>The packing size is 16 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size32">
      <summary>The packing size is 32 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size64">
      <summary>The packing size is 64 bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size128">
      <summary>The packing size is 128 bytes.</summary>
    </member>
    <member name="T:System.Reflection.Emit.ParameterBuilder">
      <summary>Creates or associates parameter information.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Attributes">
      <summary>Retrieves the attributes for this parameter.</summary>
      <returns>Read-only. Retrieves the attributes for this parameter.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.GetToken">
      <summary>Retrieves the token for this parameter.</summary>
      <returns>Returns the token for this parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsIn">
      <summary>Retrieves whether this is an input parameter.</summary>
      <returns>Read-only. Retrieves whether this is an input parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOptional">
      <summary>Retrieves whether this parameter is optional.</summary>
      <returns>Read-only. Specifies whether this parameter is optional.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOut">
      <summary>Retrieves whether this parameter is an output parameter.</summary>
      <returns>Read-only. Retrieves whether this parameter is an output parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Name">
      <summary>Retrieves the name of this parameter.</summary>
      <returns>Read-only. Retrieves the name of this parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Position">
      <summary>Retrieves the signature position for this parameter.</summary>
      <returns>Read-only. Retrieves the signature position for this parameter.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)">
      <summary>Sets the default value of the parameter.</summary>
      <param name="defaultValue">The default value of this parameter. </param>
      <exception cref="T:System.ArgumentException">The parameter is not one of the supported types.-or-The type of <paramref name="defaultValue" /> does not match the type of the parameter.-or-The parameter is of type <see cref="T:System.Object" /> or other reference type, and <paramref name="defaultValue" /> is not null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Set a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> or <paramref name="binaryAttribute" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Set a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)">
      <summary>Specifies the marshaling for this parameter.</summary>
      <param name="unmanagedMarshal">The marshaling information for this parameter. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="unmanagedMarshal" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.System#Runtime#InteropServices#_ParameterBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.System#Runtime#InteropServices#_ParameterBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.System#Runtime#InteropServices#_ParameterBuilder#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.System#Runtime#InteropServices#_ParameterBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="T:System.Reflection.Emit.ParameterToken">
      <summary>The ParameterToken struct is an opaque representation of the token returned by the metadata to represent a parameter.</summary>
    </member>
    <member name="F:System.Reflection.Emit.ParameterToken.Empty">
      <summary>The default ParameterToken with <see cref="P:System.Reflection.Emit.ParameterToken.Token" /> value 0.</summary>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.Equals(System.Object)">
      <summary>Checks if the given object is an instance of ParameterToken and is equal to this instance.</summary>
      <returns>true if <paramref name="obj" /> is an instance of ParameterToken and equals the current instance; otherwise, false.</returns>
      <param name="obj">The object to compare to this object. </param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.Equals(System.Reflection.Emit.ParameterToken)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.ParameterToken" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.ParameterToken" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.GetHashCode">
      <summary>Generates the hash code for this parameter.</summary>
      <returns>Returns the hash code for this parameter.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.op_Equality(System.Reflection.Emit.ParameterToken,System.Reflection.Emit.ParameterToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.ParameterToken" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.ParameterToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.ParameterToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.op_Inequality(System.Reflection.Emit.ParameterToken,System.Reflection.Emit.ParameterToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.ParameterToken" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.ParameterToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.ParameterToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="P:System.Reflection.Emit.ParameterToken.Token">
      <summary>Retrieves the metadata token for this parameter.</summary>
      <returns>Read-only. Retrieves the metadata token for this parameter.</returns>
    </member>
    <member name="T:System.Reflection.Emit.PEFileKinds">
      <summary>Specifies the type of the portable executable (PE) file.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PEFileKinds.Dll">
      <summary>The portable executable (PE) file is a DLL.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PEFileKinds.ConsoleApplication">
      <summary>The application is a console (not a Windows-based) application.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PEFileKinds.WindowApplication">
      <summary>The application is a Windows-based application.</summary>
    </member>
    <member name="T:System.Reflection.Emit.PropertyBuilder">
      <summary>Defines the properties for a type.</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Adds one of the other methods associated with this property.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the other method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Attributes">
      <summary>Gets the attributes for this property.</summary>
      <returns>Attributes of this property.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanRead">
      <summary>Gets a value indicating whether the property can be read.</summary>
      <returns>true if this property can be read; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
      <summary>Gets a value indicating whether the property can be written to.</summary>
      <returns>true if this property can be written to; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
      <summary>Gets the class that declares this member.</summary>
      <returns>The Type object for the class that declares this member.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
      <summary>Returns an array of the public and non-public get and set accessors on this property.</summary>
      <returns>An array of type MethodInfo containing the matching public or non-public accessors, or an empty array if matching accessors do not exist on this property.</returns>
      <param name="nonPublic">Indicates whether non-public methods should be returned in the MethodInfo array. true if non-public methods are to be included; otherwise, false. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of all the custom attributes for this property.</summary>
      <returns>An array of all the custom attributes.</returns>
      <param name="inherit">If true, walks up this property's inheritance chain to find the custom attributes </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes identified by <see cref="T:System.Type" />.</summary>
      <returns>An array of custom attributes defined on this reflected member, or null if no attributes are defined on this member.</returns>
      <param name="attributeType">An array of custom attributes identified by type. </param>
      <param name="inherit">If true, walks up this property's inheritance chain to find the custom attributes. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
      <summary>Returns the public and non-public get accessor for this property.</summary>
      <returns>A MethodInfo object representing the get accessor for this property, if <paramref name="nonPublic" /> is true. Returns null if <paramref name="nonPublic" /> is false and the get accessor is non-public, or if <paramref name="nonPublic" /> is true but no get accessors exist.</returns>
      <param name="nonPublic">Indicates whether non-public get accessors should be returned. true if non-public methods are to be included; otherwise, false. </param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
      <summary>Returns an array of all the index parameters for the property.</summary>
      <returns>An array of type ParameterInfo containing the parameters for the indexes.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
      <summary>Returns the set accessor for this property.</summary>
      <returns>Value Condition A <see cref="T:System.Reflection.MethodInfo" /> object representing the Set method for this property. The set accessor is public.<paramref name="nonPublic" /> is true and non-public methods can be returned. null <paramref name="nonPublic" /> is true, but the property is read-only.<paramref name="nonPublic" /> is false and the set accessor is non-public. </returns>
      <param name="nonPublic">Indicates whether the accessor should be returned if it is non-public. true if non-public methods are to be included; otherwise, false. </param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
      <summary>Gets the value of the indexed property by calling the property's getter method.</summary>
      <returns>The value of the specified indexed property.</returns>
      <param name="obj">The object whose property value will be returned. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Gets the value of a property having the specified binding, index, and CultureInfo.</summary>
      <returns>The property value for <paramref name="obj" />.</returns>
      <param name="obj">The object whose property value will be returned. </param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags : InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. A suitable invocation attribute must be specified. If a static member is to be invoked, the Static flag of BindingFlags must be set. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
      <param name="culture">The CultureInfo object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the CultureInfo.Parent method will be called successively in search of a match. If this value is null, the CultureInfo is obtained from the CultureInfo.CurrentUICulture property. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether one or more instance of <paramref name="attributeType" /> is defined on this property.</summary>
      <returns>true if one or more instance of <paramref name="attributeType" /> is defined on this property; otherwise false.</returns>
      <param name="attributeType">The Type object to which the custom attributes are applied. </param>
      <param name="inherit">Specifies whether to walk up this property's inheritance chain to find the custom attributes. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Module">
      <summary>Gets the module in which the type that declares the current property is being defined.</summary>
      <returns>The <see cref="T:System.Reflection.Module" /> in which the type that declares the current property is defined.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Name">
      <summary>Gets the name of this member.</summary>
      <returns>A <see cref="T:System.String" /> containing the name of this member.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyToken">
      <summary>Retrieves the token for this property.</summary>
      <returns>Read-only. Retrieves the token for this property.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
      <summary>Gets the type of the field of this property.</summary>
      <returns>The type of this property.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance of MemberInfo.</summary>
      <returns>The Type object through which this MemberInfo object was obtained.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
      <summary>Sets the default value of this property.</summary>
      <param name="defaultValue">The default value of this property. </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
      <exception cref="T:System.ArgumentException">The property is not one of the supported types.-or-The type of <paramref name="defaultValue" /> does not match the type of the property.-or-The property is of type <see cref="T:System.Object" /> or other reference type, and <paramref name="defaultValue" /> is not null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Set a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> or <paramref name="binaryAttribute" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Set a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">if <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Sets the method that gets the property value.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the method that gets the property value. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Sets the method that sets the property value.</summary>
      <param name="mdBuilder">A MethodBuilder object that represents the method that sets the property value. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
      <summary>Sets the value of the property with optional index values for index properties.</summary>
      <param name="obj">The object whose property value will be set. </param>
      <param name="value">The new value for this property. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Sets the property value for the given object to the given value.</summary>
      <param name="obj">The object whose property value will be returned. </param>
      <param name="value">The new value for this property. </param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags : InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. A suitable invocation attribute must be specified. If a static member is to be invoked, the Static flag of BindingFlags must be set. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
      <param name="culture">The CultureInfo object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the CultureInfo.Parent method will be called successively in search of a match. If this value is null, the CultureInfo is obtained from the CultureInfo.CurrentUICulture property. </param>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">The method is called late-bound using the COM IDispatch interface.</exception>
    </member>
    <member name="T:System.Reflection.Emit.PropertyToken">
      <summary>The PropertyToken struct is an opaque representation of the Token returned by the metadata to represent a property.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PropertyToken.Empty">
      <summary>The default PropertyToken with <see cref="P:System.Reflection.Emit.PropertyToken.Token" /> value 0.</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.Equals(System.Object)">
      <summary>Checks if the given object is an instance of PropertyToken and is equal to this instance.</summary>
      <returns>true if <paramref name="obj" /> is an instance of PropertyToken and equals the current instance; otherwise, false.</returns>
      <param name="obj">The object to this object. </param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.Equals(System.Reflection.Emit.PropertyToken)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.PropertyToken" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.PropertyToken" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.GetHashCode">
      <summary>Generates the hash code for this property.</summary>
      <returns>Returns the hash code for this property.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.op_Equality(System.Reflection.Emit.PropertyToken,System.Reflection.Emit.PropertyToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.PropertyToken" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.PropertyToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.PropertyToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.op_Inequality(System.Reflection.Emit.PropertyToken,System.Reflection.Emit.PropertyToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.PropertyToken" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.PropertyToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.PropertyToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="P:System.Reflection.Emit.PropertyToken.Token">
      <summary>Retrieves the metadata token for this property.</summary>
      <returns>Read-only. Retrieves the metadata token for this instance.</returns>
    </member>
    <member name="T:System.Reflection.Emit.SignatureHelper">
      <summary>Provides methods for building signatures.</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)">
      <summary>Adds an argument to the signature.</summary>
      <param name="clsArgument">The type of the argument. </param>
      <exception cref="T:System.ArgumentException">The signature has already been finished. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clsArgument" /> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)">
      <summary>Adds an argument of the specified type to the signature, specifying whether the argument is pinned.</summary>
      <param name="argument">The argument type.</param>
      <param name="pinned">true if the argument is pinned; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])">
      <summary>Adds an argument to the signature, with the specified custom modifiers.</summary>
      <param name="argument">The argument type.</param>
      <param name="requiredCustomModifiers">An array of types representing the required custom modifiers for the argument, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. If the argument has no required custom modifiers, specify null.</param>
      <param name="optionalCustomModifiers">An array of types representing the optional custom modifiers for the argument, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. If the argument has no optional custom modifiers, specify null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> is null. -or-An element of <paramref name="requiredCustomModifiers" /> or <paramref name="optionalCustomModifiers" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The signature has already been finished. -or-One of the specified custom modifiers is an array type.-or-One of the specified custom modifiers is an open generic type. That is, the <see cref="P:System.Type.ContainsGenericParameters" /> property is true for the custom modifier.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])">
      <summary>Adds a set of arguments to the signature, with the specified custom modifiers.</summary>
      <param name="arguments">The types of the arguments to be added.</param>
      <param name="requiredCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. If a particular argument has no required custom modifiers, specify null instead of an array of types. If none of the arguments have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="optionalCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. If a particular argument has no optional custom modifiers, specify null instead of an array of types. If none of the arguments have optional custom modifiers, specify null instead of an array of arrays.</param>
      <exception cref="T:System.ArgumentNullException">An element of <paramref name="arguments" /> is null. -or-One of the specified custom modifiers is null. (However, null can be specified for the array of custom modifiers for any argument.)</exception>
      <exception cref="T:System.ArgumentException">The signature has already been finished. -or-One of the specified custom modifiers is an array type.-or-One of the specified custom modifiers is an open generic type. That is, the <see cref="P:System.Type.ContainsGenericParameters" /> property is true for the custom modifier. -or-The size of <paramref name="requiredCustomModifiers" /> or <paramref name="optionalCustomModifiers" /> does not equal the size of <paramref name="arguments" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddSentinel">
      <summary>Marks the end of a vararg fixed part. This is only used if the caller is creating a vararg signature call site.</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)">
      <summary>Checks if this instance is equal to the given object.</summary>
      <returns>true if the given object is a SignatureHelper and represents the same signature; otherwise, false.</returns>
      <param name="obj">The object with which this instance should be compared. </param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)">
      <summary>Returns a signature helper for a field.</summary>
      <returns>The SignatureHelper object for a field.</returns>
      <param name="mod">The dynamic module that contains the field for which the SignatureHelper is requested. </param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetHashCode">
      <summary>Creates and returns a hash code for this instance.</summary>
      <returns>Returns the hash code based on the name.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper">
      <summary>Returns a signature helper for a local variable.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.SignatureHelper" /> for a local variable.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)">
      <summary>Returns a signature helper for a local variable.</summary>
      <returns>The SignatureHelper object for a local variable.</returns>
      <param name="mod">The dynamic module that contains the local variable for which the SignatureHelper is requested. </param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)">
      <summary>Returns a signature helper for a method given the method's calling convention and return type.</summary>
      <returns>The SignatureHelper object for a method.</returns>
      <param name="callingConvention">The calling convention of the method. </param>
      <param name="returnType">The return type of the method, or null for a void return type (Sub procedure in Visual Basic). </param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)">
      <summary>Returns a signature helper for a method given the method's module, calling convention, and return type.</summary>
      <returns>The SignatureHelper object for a method.</returns>
      <param name="mod">The <see cref="T:System.Reflection.Emit.ModuleBuilder" /> that contains the method for which the SignatureHelper is requested. </param>
      <param name="callingConvention">The calling convention of the method. </param>
      <param name="returnType">The return type of the method, or null for a void return type (Sub procedure in Visual Basic). </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mod" /> is not a <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Runtime.InteropServices.CallingConvention,System.Type)">
      <summary>Returns a signature helper for a method given the method's module, unmanaged calling convention, and return type.</summary>
      <returns>The SignatureHelper object for a method.</returns>
      <param name="mod">The <see cref="T:System.Reflection.Emit.ModuleBuilder" /> that contains the method for which the SignatureHelper is requested. </param>
      <param name="unmanagedCallConv">The unmanaged calling convention of the method. </param>
      <param name="returnType">The return type of the method, or null for a void return type (Sub procedure in Visual Basic). </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mod" /> is not a <see cref="T:System.Reflection.Emit.ModuleBuilder" />.-or-<paramref name="unmanagedCallConv" /> is an unknown unmanaged calling convention.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary>Returns a signature helper for a method with a standard calling convention, given the method's module, return type, and argument types.</summary>
      <returns>The SignatureHelper object for a method.</returns>
      <param name="mod">The <see cref="T:System.Reflection.Emit.ModuleBuilder" /> that contains the method for which the SignatureHelper is requested. </param>
      <param name="returnType">The return type of the method, or null for a void return type (Sub procedure in Visual Basic). </param>
      <param name="parameterTypes">The types of the arguments of the method, or null if the method has no arguments. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> is null.-or-An element of <paramref name="parameterTypes" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mod" /> is not a <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Runtime.InteropServices.CallingConvention,System.Type)">
      <summary>Returns a signature helper for a method given the method's unmanaged calling convention and return type.</summary>
      <returns>The SignatureHelper object for a method.</returns>
      <param name="unmanagedCallingConvention">The unmanaged calling convention of the method. </param>
      <param name="returnType">The return type of the method, or null for a void return type (Sub procedure in Visual Basic). </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="unmanagedCallConv" /> is an unknown unmanaged calling convention.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Returns a signature helper for a property, given the dynamic module that contains the property, the calling convention, the property type, the property arguments, and custom modifiers for the return type and arguments.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.SignatureHelper" /> object for a property.</returns>
      <param name="mod">The <see cref="T:System.Reflection.Emit.ModuleBuilder" /> that contains the property for which the <see cref="T:System.Reflection.Emit.SignatureHelper" /> is requested.</param>
      <param name="callingConvention">The calling convention of the property accessors.</param>
      <param name="returnType">The property type.</param>
      <param name="requiredReturnTypeCustomModifiers">An array of types representing the required custom modifiers for the return type, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. If the return type has no required custom modifiers, specify null.</param>
      <param name="optionalReturnTypeCustomModifiers">An array of types representing the optional custom modifiers for the return type, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. If the return type has no optional custom modifiers, specify null.</param>
      <param name="parameterTypes">The types of the property's arguments, or null if the property has no arguments.</param>
      <param name="requiredParameterTypeCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify null instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="optionalParameterTypeCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify null instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify null instead of an array of arrays.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> is null.-or-An element of <paramref name="parameterTypes" /> is null. -or-One of the specified custom modifiers is null. (However, null can be specified for the array of custom modifiers for any argument.)</exception>
      <exception cref="T:System.ArgumentException">The signature has already been finished. -or-<paramref name="mod" /> is not a <see cref="T:System.Reflection.Emit.ModuleBuilder" />.-or-One of the specified custom modifiers is an array type.-or-One of the specified custom modifiers is an open generic type. That is, the <see cref="P:System.Type.ContainsGenericParameters" /> property is true for the custom modifier.-or-The size of <paramref name="requiredParameterTypeCustomModifiers" /> or <paramref name="optionalParameterTypeCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary>Returns a signature helper for a property, given the dynamic module that contains the property, the property type, and the property arguments.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.SignatureHelper" /> object for a property.</returns>
      <param name="mod">The <see cref="T:System.Reflection.Emit.ModuleBuilder" /> that contains the property for which the <see cref="T:System.Reflection.Emit.SignatureHelper" /> is requested.</param>
      <param name="returnType">The property type.</param>
      <param name="parameterTypes">The argument types, or null if the property has no arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> is null.-or-An element of <paramref name="parameterTypes" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mod" /> is not a <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Returns a signature helper for a property, given the dynamic module that contains the property, the property type, the property arguments, and custom modifiers for the return type and arguments.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.SignatureHelper" /> object for a property.</returns>
      <param name="mod">The <see cref="T:System.Reflection.Emit.ModuleBuilder" /> that contains the property for which the <see cref="T:System.Reflection.Emit.SignatureHelper" /> is requested.</param>
      <param name="returnType">The property type.</param>
      <param name="requiredReturnTypeCustomModifiers">An array of types representing the required custom modifiers for the return type, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. If the return type has no required custom modifiers, specify null.</param>
      <param name="optionalReturnTypeCustomModifiers">An array of types representing the optional custom modifiers for the return type, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. If the return type has no optional custom modifiers, specify null.</param>
      <param name="parameterTypes">The types of the property's arguments, or null if the property has no arguments.</param>
      <param name="requiredParameterTypeCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify null instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="optionalParameterTypeCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify null instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify null instead of an array of arrays.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> is null.-or-An element of <paramref name="parameterTypes" /> is null. -or-One of the specified custom modifiers is null. (However, null can be specified for the array of custom modifiers for any argument.)</exception>
      <exception cref="T:System.ArgumentException">The signature has already been finished. -or-<paramref name="mod" /> is not a <see cref="T:System.Reflection.Emit.ModuleBuilder" />.-or-One of the specified custom modifiers is an array type.-or-One of the specified custom modifiers is an open generic type. That is, the <see cref="P:System.Type.ContainsGenericParameters" /> property is true for the custom modifier.-or-The size of <paramref name="requiredParameterTypeCustomModifiers" /> or <paramref name="optionalParameterTypeCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetSignature">
      <summary>Adds the end token to the signature and marks the signature as finished, so no further tokens can be added.</summary>
      <returns>Returns a byte array made up of the full signature.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.ToString">
      <summary>Returns a string representing the signature arguments.</summary>
      <returns>Returns a string representing the arguments of this signature.</returns>
    </member>
    <member name="T:System.Reflection.Emit.SignatureToken">
      <summary>Represents the Token returned by the metadata to represent a signature.</summary>
    </member>
    <member name="F:System.Reflection.Emit.SignatureToken.Empty">
      <summary>The default SignatureToken with <see cref="P:System.Reflection.Emit.SignatureToken.Token" /> value 0.</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.Equals(System.Object)">
      <summary>Checks if the given object is an instance of SignatureToken and is equal to this instance.</summary>
      <returns>true if <paramref name="obj" /> is an instance of SignatureToken and is equal to this object; otherwise, false.</returns>
      <param name="obj">The object to compare with this SignatureToken. </param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.Equals(System.Reflection.Emit.SignatureToken)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.SignatureToken" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.SignatureToken" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.GetHashCode">
      <summary>Generates the hash code for this signature.</summary>
      <returns>Returns the hash code for this signature.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.op_Equality(System.Reflection.Emit.SignatureToken,System.Reflection.Emit.SignatureToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.SignatureToken" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.SignatureToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.SignatureToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.op_Inequality(System.Reflection.Emit.SignatureToken,System.Reflection.Emit.SignatureToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.SignatureToken" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.SignatureToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.SignatureToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="P:System.Reflection.Emit.SignatureToken.Token">
      <summary>Retrieves the metadata token for the local variable signature for this method.</summary>
      <returns>Read-only. Retrieves the metadata token of this signature.</returns>
    </member>
    <member name="T:System.Reflection.Emit.StackBehaviour">
      <summary>Describes how values are pushed onto a stack or popped off a stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop0">
      <summary>No values are popped off the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1">
      <summary>Pops one value off the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1_pop1">
      <summary>Pops 1 value off the stack for the first operand, and 1 value of the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi">
      <summary>Pops a 32-bit integer off the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_pop1">
      <summary>Pops a 32-bit integer off the stack for the first operand, and a value off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi">
      <summary>Pops a 32-bit integer off the stack for the first operand, and a 32-bit integer off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi8">
      <summary>Pops a 32-bit integer off the stack for the first operand, and a 64-bit integer off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi_popi">
      <summary>Pops a 32-bit integer off the stack for the first operand, a 32-bit integer off the stack for the second operand, and a 32-bit integer off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr4">
      <summary>Pops a 32-bit integer off the stack for the first operand, and a 32-bit floating point number off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr8">
      <summary>Pops a 32-bit integer off the stack for the first operand, and a 64-bit floating point number off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref">
      <summary>Pops a reference off the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_pop1">
      <summary>Pops a reference off the stack for the first operand, and a value off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi">
      <summary>Pops a reference off the stack for the first operand, and a 32-bit integer off the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi">
      <summary>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a value off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi8">
      <summary>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 64-bit integer off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr4">
      <summary>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 32-bit integer off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr8">
      <summary>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 64-bit floating point number off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popref">
      <summary>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a reference off the stack for the third operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push0">
      <summary>No values are pushed onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1">
      <summary>Pushes one value onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1_push1">
      <summary>Pushes 1 value onto the stack for the first operand, and 1 value onto the stack for the second operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi">
      <summary>Pushes a 32-bit integer onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi8">
      <summary>Pushes a 64-bit integer onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr4">
      <summary>Pushes a 32-bit floating point number onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr8">
      <summary>Pushes a 64-bit floating point number onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushref">
      <summary>Pushes a reference onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpop">
      <summary>Pops a variable off the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpush">
      <summary>Pushes a variable onto the stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_pop1">
      <summary>Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 32-bit integer off the stack for the third operand.</summary>
    </member>
    <member name="T:System.Reflection.Emit.StringToken">
      <summary>Represents a token that represents a string.</summary>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.Equals(System.Object)">
      <summary>Checks if the given object is an instance of StringToken and is equal to this instance.</summary>
      <returns>true if <paramref name="obj" /> is an instance of StringToken and is equal to this object; otherwise, false.</returns>
      <param name="obj">The object to compare with this StringToken. </param>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.Equals(System.Reflection.Emit.StringToken)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.StringToken" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.StringToken" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.GetHashCode">
      <summary>Returns the hash code for this string.</summary>
      <returns>Returns the underlying string token.</returns>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.op_Equality(System.Reflection.Emit.StringToken,System.Reflection.Emit.StringToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.StringToken" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.StringToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.StringToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.op_Inequality(System.Reflection.Emit.StringToken,System.Reflection.Emit.StringToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.StringToken" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.StringToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.StringToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="P:System.Reflection.Emit.StringToken.Token">
      <summary>Retrieves the metadata token for this string.</summary>
      <returns>Read-only. Retrieves the metadata token of this string.</returns>
    </member>
    <member name="T:System.Reflection.Emit.TypeBuilder">
      <summary>Defines and creates new instances of classes during run time.</summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
      <summary>Adds declarative security to this type.</summary>
      <param name="action">The security action to be taken such as Demand, Assert, and so on. </param>
      <param name="pset">The set of permissions the action applies to. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="action" /> is invalid (RequestMinimum, RequestOptional, and RequestRefuse are invalid). </exception>
      <exception cref="T:System.InvalidOperationException">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or- The permission set <paramref name="pset" /> contains an action that was added earlier by AddDeclarativeSecurity. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pset" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)">
      <summary>Adds an interface that this type implements.</summary>
      <param name="interfaceType">The interface that this type implements. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceType" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Assembly">
      <summary>Retrieves the dynamic assembly that contains this type definition.</summary>
      <returns>Read-only. Retrieves the dynamic assembly that contains this type definition.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName">
      <summary>Returns the full name of this type qualified by the display name of the assembly.</summary>
      <returns>Read-only. The full name of this type qualified by the display name of the assembly.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.BaseType">
      <summary>Retrieves the base type of this type.</summary>
      <returns>Read-only. Retrieves the base type of this type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateType">
      <summary>Creates a <see cref="T:System.Type" /> object for the class. After defining fields and methods on the class, CreateType is called in order to load its Type object.</summary>
      <returns>Returns the new <see cref="T:System.Type" /> object for this class.</returns>
      <exception cref="T:System.InvalidOperationException">The enclosing type has not been created.-or- This type is non-abstract and contains an abstract method.-or- This type is not an abstract class or an interface and has a method without a method body. </exception>
      <exception cref="T:System.NotSupportedException">The type contains invalid Microsoft intermediate language (MSIL) code.-or- The branch target is specified using a 1-byte offset, but the target is at a distance greater than 127 bytes from the branch. </exception>
      <exception cref="T:System.TypeLoadException">The type cannot be loaded. For example, it contains a static method that has the calling convention <see cref="F:System.Reflection.CallingConventions.HasThis" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod">
      <summary>Gets the method that declared the current generic type parameter.</summary>
      <returns>A <see cref="T:System.Reflection.MethodBase" /> that represents the method that declared the current type, if the current type is a generic type parameter; otherwise, null.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringType">
      <summary>Returns the type that declared this type.</summary>
      <returns>Read-only. The type that declared this type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])">
      <summary>Adds a new constructor to the type, with the given attributes and signature.</summary>
      <returns>The defined constructor.</returns>
      <param name="attributes">The attributes of the constructor. </param>
      <param name="callingConvention">The calling convention of the constructor. </param>
      <param name="parameterTypes">The parameter types of the constructor. </param>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])">
      <summary>Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.</summary>
      <returns>The defined constructor.</returns>
      <param name="attributes">The attributes of the constructor. </param>
      <param name="callingConvention">The calling convention of the constructor. </param>
      <param name="parameterTypes">The parameter types of the constructor. </param>
      <param name="requiredCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="optionalCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.</param>
      <exception cref="T:System.ArgumentException">The size of <paramref name="requiredCustomModifiers" /> or <paramref name="optionalCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)">
      <summary>Defines the default constructor. The constructor defined here will simply call the default constructor of the parent.</summary>
      <returns>Returns the constructor.</returns>
      <param name="attributes">A MethodAttributes object representing the attributes to be applied to the constructor. </param>
      <exception cref="T:System.NotSupportedException">The parent type (base type) does not have a default constructor. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)">
      <summary>Adds a new event to the type, with the given name, attributes and event type.</summary>
      <returns>The defined event.</returns>
      <param name="name">The name of the event. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the event. </param>
      <param name="eventtype">The type of the event. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="eventtype" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
      <summary>Adds a new field to the type, with the given name, attributes, and field type.</summary>
      <returns>The defined field.</returns>
      <param name="fieldName">The name of the field. <paramref name="fieldName" /> cannot contain embedded nulls. </param>
      <param name="type">The type of the field </param>
      <param name="attributes">The attributes of the field. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="fieldName" /> is zero.-or- <paramref name="type" /> is System.Void.-or- A total size was specified for the parent class of this field. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fieldName" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)">
      <summary>Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.</summary>
      <returns>The defined field.</returns>
      <param name="fieldName">The name of the field. <paramref name="fieldName" /> cannot contain embedded nulls. </param>
      <param name="type">The type of the field </param>
      <param name="requiredCustomModifiers">An array of types representing the required custom modifiers for the field, such as <see cref="T:Microsoft.VisualC.IsConstModifier" />.</param>
      <param name="optionalCustomModifiers">An array of types representing the optional custom modifiers for the field, such as <see cref="T:Microsoft.VisualC.IsConstModifier" />.</param>
      <param name="attributes">The attributes of the field. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="fieldName" /> is zero.-or- <paramref name="type" /> is System.Void.-or- A total size was specified for the parent class of this field. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fieldName" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])">
      <summary>Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that can be used to set their constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that can be used to define the constraints of the generic type parameters for the current type.</returns>
      <param name="names">An array of names for the generic type parameters.</param>
      <exception cref="T:System.InvalidOperationException">Generic type parameters have already been defined for this type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="names" /> is null.-or-An element of <paramref name="names" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="names" /> is an empty array.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary>Defines initialized data field in the .sdata section of the portable executable (PE) file.</summary>
      <returns>A field to reference the data.</returns>
      <param name="name">The name used to refer to the data. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="data">The blob of data. </param>
      <param name="attributes">The attributes for the field. </param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="name" /> is zero.-or- The size of the data is less than or equal to zero, or greater than or equal to 0x3f0000. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="data" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been previously called. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)">
      <summary>Adds a new method to the type, with the specified name and method attributes.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the newly defined method.</returns>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the method. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero.-or- The type of the parent of this method is an interface, and this method is not virtual (Overridable in Visual Basic). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)">
      <summary>Adds a new method to the type, with the specified name, method attributes, and calling convention.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the newly defined method.</returns>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="callingConvention">The calling convention of the method. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero.-or- The type of the parent of this method is an interface and this method is not virtual (Overridable in Visual Basic). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the newly defined method.</returns>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="callingConvention">The calling convention of the method. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="parameterTypes">The types of the parameters of the method. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero.-or- The type of the parent of this method is an interface, and this method is not virtual (Overridable in Visual Basic). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.MethodBuilder" /> object representing the newly added method.</returns>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="callingConvention">The calling convention of the method. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="returnTypeRequiredCustomModifiers">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method. If the return type has no required custom modifiers, specify null.</param>
      <param name="returnTypeOptionalCustomModifiers">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method. If the return type has no optional custom modifiers, specify null.</param>
      <param name="parameterTypes">The types of the parameters of the method.</param>
      <param name="parameterTypeRequiredCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="parameterTypeOptionalCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.</param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero.-or- The type of the parent of this method is an interface, and this method is not virtual (Overridable in Visual Basic). -or-The size of <paramref name="parameterTypeRequiredCustomModifiers" /> or <paramref name="parameterTypeOptionalCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary>Adds a new method to the type, with the specified name, method attributes, and method signature.</summary>
      <returns>The defined method.</returns>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="parameterTypes">The types of the parameters of the method. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero.-or- The type of the parent of this method is an interface, and this method is not virtual (Overridable in Visual Basic). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>Specifies a given method body that implements a given method declaration, potentially with a different name.</summary>
      <param name="methodInfoBody">The method body to be used. This should be a MethodBuilder object. </param>
      <param name="methodInfoDeclaration">The method whose declaration is to be used. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="methodInfoBody" /> does not belong to this class. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="methodInfoBody" /> or <paramref name="methodInfoDeclaration" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or- The declaring type of <paramref name="methodInfoBody" /> is not the type represented by this <see cref="T:System.Reflection.Emit.TypeBuilder" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)">
      <summary>Defines a nested type, given its name.</summary>
      <returns>The defined nested type.</returns>
      <param name="name">The short name of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="name" /> is zero or greater than 1023. -or-This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)">
      <summary>Defines a nested type, given its name and attributes.</summary>
      <returns>The defined nested type.</returns>
      <param name="name">The short name of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the type. </param>
      <exception cref="T:System.ArgumentException">The nested attribute is not specified.-or- This type is sealed.-or- This type is an array.-or- This type is an interface, but the nested type is not an interface.-or- The length of <paramref name="name" /> is zero or greater than 1023. -or-This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>Defines a nested type, given its name, attributes, and the type that it extends.</summary>
      <returns>The defined nested type.</returns>
      <param name="name">The short name of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the type. </param>
      <param name="parent">The type that the nested type extends. </param>
      <exception cref="T:System.ArgumentException">The nested attribute is not specified.-or- This type is sealed.-or- This type is an array.-or- This type is an interface, but the nested type is not an interface.-or- The length of <paramref name="name" /> is zero or greater than 1023. -or-This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary>Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.</summary>
      <returns>The defined nested type.</returns>
      <param name="name">The short name of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the type. </param>
      <param name="parent">The type that the nested type extends. </param>
      <param name="typeSize">The total size of the type. </param>
      <exception cref="T:System.ArgumentException">The nested attribute is not specified.-or- This type is sealed.-or- This type is an array.-or- This type is an interface, but the nested type is not an interface.-or- The length of <paramref name="name" /> is zero or greater than 1023. -or-This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary>Defines a nested type, given its name, attributes, the type that it extends, and the packing size.</summary>
      <returns>The defined nested type.</returns>
      <param name="name">The short name of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the type. </param>
      <param name="parent">The type that the nested type extends. </param>
      <param name="packSize">The packing size of the type. </param>
      <exception cref="T:System.ArgumentException">The nested attribute is not specified.-or- This type is sealed.-or- This type is an array.-or- This type is an interface, but the nested type is not an interface.-or- The length of <paramref name="name" /> is zero or greater than 1023. -or-This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.</summary>
      <returns>The defined nested type.</returns>
      <param name="name">The short name of the type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attr">The attributes of the type. </param>
      <param name="parent">The type that the nested type extends. </param>
      <param name="interfaces">The interfaces that the nested type implements. </param>
      <exception cref="T:System.ArgumentException">The nested attribute is not specified.-or- This type is sealed.-or- This type is an array.-or- This type is an interface, but the nested type is not an interface.-or- The length of <paramref name="name" /> is zero or greater than 1023. -or-This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or-An element of the <paramref name="interfaces" /> array is null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>Defines a PInvoke method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the PInvoke flags.</summary>
      <returns>The defined PInvoke method.</returns>
      <param name="name">The name of the PInvoke method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="dllName">The name of the DLL in which the PInvoke method is defined. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="callingConvention">The method's calling convention. </param>
      <param name="returnType">The method's return type. </param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <param name="nativeCallConv">The native calling convention. </param>
      <param name="nativeCharSet">The method's native character set. </param>
      <exception cref="T:System.ArgumentException">The method is not static.-or- The parent type is an interface.-or- The method is abstract.-or- The method was previously defined.-or- The length of <paramref name="name" /> or <paramref name="dllName" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="dllName" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>Defines a PInvoke method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the PInvoke flags.</summary>
      <returns>The defined PInvoke method.</returns>
      <param name="name">The name of the PInvoke method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="dllName">The name of the DLL in which the PInvoke method is defined. </param>
      <param name="entryName">The name of the entry point in the DLL. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="callingConvention">The method's calling convention. </param>
      <param name="returnType">The method's return type. </param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <param name="nativeCallConv">The native calling convention. </param>
      <param name="nativeCharSet">The method's native character set. </param>
      <exception cref="T:System.ArgumentException">The method is not static.-or- The parent type is an interface.-or- The method is abstract.-or- The method was previously defined.-or- The length of <paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>Defines a PInvoke method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, the PInvoke flags, and custom modifiers for the parameters and return type.</summary>
      <returns>A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the defined PInvoke method.</returns>
      <param name="name">The name of the PInvoke method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="dllName">The name of the DLL in which the PInvoke method is defined. </param>
      <param name="entryName">The name of the entry point in the DLL. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="callingConvention">The method's calling convention. </param>
      <param name="returnType">The method's return type. </param>
      <param name="returnTypeRequiredCustomModifiers">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method. If the return type has no required custom modifiers, specify null.</param>
      <param name="returnTypeOptionalCustomModifiers">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method. If the return type has no optional custom modifiers, specify null.</param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <param name="parameterTypeRequiredCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="parameterTypeOptionalCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.</param>
      <param name="nativeCallConv">The native calling convention. </param>
      <param name="nativeCharSet">The method's native character set. </param>
      <exception cref="T:System.ArgumentException">The method is not static.-or- The parent type is an interface.-or- The method is abstract.-or- The method was previously defined.-or- The length of <paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is zero. -or-The size of <paramref name="parameterTypeRequiredCustomModifiers" /> or <paramref name="parameterTypeOptionalCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>Adds a new property to the type, with the given name, attributes, calling convention, and property signature.</summary>
      <returns>The defined property.</returns>
      <param name="name">The name of the property. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the property. </param>
      <param name="callingConvention">The calling convention of the property accessors. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="parameterTypes">The types of the parameters of the property.</param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. -or- Any of the elements of the <paramref name="parameterTypes" /> array is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.</summary>
      <returns>The defined property.</returns>
      <param name="name">The name of the property. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the property. </param>
      <param name="callingConvention">The calling convention of the property accessors. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="returnTypeRequiredCustomModifiers">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property. If the return type has no required custom modifiers, specify null.</param>
      <param name="returnTypeOptionalCustomModifiers">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property. If the return type has no optional custom modifiers, specify null.</param>
      <param name="parameterTypes">The types of the parameters of the property. </param>
      <param name="parameterTypeRequiredCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="parameterTypeOptionalCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.</param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. -or- Any of the elements of the <paramref name="parameterTypes" /> array is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])">
      <summary>Adds a new property to the type, with the given name and property signature.</summary>
      <returns>The defined property.</returns>
      <param name="name">The name of the property. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the property. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="parameterTypes">The types of the parameters of the property. </param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. -or- Any of the elements of the <paramref name="parameterTypes" /> array is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Adds a new property to the type, with the given name, property signature, and custom modifiers.</summary>
      <returns>The defined property.</returns>
      <param name="name">The name of the property. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the property. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="returnTypeRequiredCustomModifiers">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property. If the return type has no required custom modifiers, specify null.</param>
      <param name="returnTypeOptionalCustomModifiers">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property. If the return type has no optional custom modifiers, specify null.</param>
      <param name="parameterTypes">The types of the parameters of the property. </param>
      <param name="parameterTypeRequiredCustomModifiers">An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.</param>
      <param name="parameterTypeOptionalCustomModifiers">An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.</param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="name" /> is zero. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null-or- Any of the elements of the <paramref name="parameterTypes" /> array is null</exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer">
      <summary>Defines the initializer for this type.</summary>
      <returns>Returns a type initializer.</returns>
      <exception cref="T:System.InvalidOperationException">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary>Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.</summary>
      <returns>A field to reference the data.</returns>
      <param name="name">The name used to refer to the data. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="size">The size of the data field. </param>
      <param name="attributes">The attributes for the field. </param>
      <exception cref="T:System.ArgumentException">Length of <paramref name="name" /> is zero.-or- <paramref name="size" /> is less than or equal to zero, or greater than or equal to 0x003f0000. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />. </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.FullName">
      <summary>Retrieves the full path of this type.</summary>
      <returns>Read-only. Retrieves the full path of this type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes">
      <summary>Gets a value that indicates the covariance and special constraints of the current generic type parameter. </summary>
      <returns>A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition">
      <summary>Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.</summary>
      <returns>If the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)">
      <summary>Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition. </summary>
      <returns>A <see cref="T:System.Reflection.ConstructorInfo" /> object that represents the constructor of <paramref name="type" /> corresponding to <paramref name="constructor" />, which specifies a constructor belonging to the generic type definition of <paramref name="type" />.</returns>
      <param name="type">The constructed generic type whose constructor is returned.</param>
      <param name="constructor">A constructor on the generic type definition of <paramref name="type" />, which specifies which constructor of <paramref name="type" /> to return.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not represent a generic type. -or-<paramref name="type" /> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder" />.-or-The declaring type of <paramref name="constructor" /> is not a generic type definition. -or-The declaring type of <paramref name="constructor" /> is not the generic type definition of <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the public and non-public constructors defined for this class, as specified.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.</returns>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> as in InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Returns all the custom attributes defined for this type.</summary>
      <returns>Returns an array of objects representing all the custom attributes of this type.</returns>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported for incomplete types. Retrieve the type using <see cref="M:System.Type.GetType" /> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Type" />. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns all the custom attributes of the current type that are assignable to a specified type.</summary>
      <returns>An array of custom attributes defined on the current type.</returns>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported for incomplete types. Retrieve the type using <see cref="M:System.Type.GetType" /> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Type" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The type must be a type provided by the underlying runtime system.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetElementType">
      <summary>Calling this method always throws <see cref="T:System.NotSupportedException" />.</summary>
      <returns>This method is not supported. No value is returned.</returns>
      <exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the event with the specified name.</summary>
      <returns>An <see cref="T:System.Reflection.EventInfo" /> object representing the event declared or inherited by this type with the specified name, or null if there are no matches.</returns>
      <param name="name">The name of the event to search for. </param>
      <param name="bindingAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values that limits the search. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents">
      <summary>Returns the public events declared or inherited by this type.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.</returns>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public events that are declared by this type.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the events declared or inherited by this type that match the specified binding flags. An empty array is returned if there are no matching events.</returns>
      <param name="bindingAttr">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values that limits the search.</param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the field specified by the given name.</summary>
      <returns>Returns the <see cref="T:System.Reflection.FieldInfo" /> object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches then null is returned.</returns>
      <param name="name">The name of the field to get. </param>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> as in InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)">
      <summary>Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition. </summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object that represents the field of <paramref name="type" /> corresponding to <paramref name="field" />, which specifies a field belonging to the generic type definition of <paramref name="type" />.</returns>
      <param name="type">The constructed generic type whose field is returned.</param>
      <param name="field">A field on the generic type definition of <paramref name="type" />, which specifies which field of <paramref name="type" /> to return.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not represent a generic type. -or-<paramref name="type" /> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder" />.-or-The declaring type of <paramref name="field" /> is not a generic type definition. -or-The declaring type of <paramref name="field" /> is not the generic type definition of <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public fields that are declared by this type.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.</returns>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments">
      <summary>Returns an array of <see cref="T:System.Type" /> objects representing the type arguments of a generic type or the type parameters of a generic type definition.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects. The elements of the array represent the type arguments of a generic type or the type parameters of a generic type definition.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition">
      <summary>Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current type can be obtained.</summary>
      <returns>A <see cref="T:System.Type" /> object representing a generic type definition from which the current type can be obtained.</returns>
      <exception cref="T:System.InvalidOperationException">The current type is not generic. That is, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> returns false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)">
      <summary>Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.</summary>
      <returns>Returns a <see cref="T:System.Type" /> object representing the implemented interface. Returns null if no interface matching name is found.</returns>
      <param name="name">The name of the interface. </param>
      <param name="ignoreCase">If true, the search is case-insensitive. If false, the search is case-sensitive. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)">
      <summary>Returns an interface mapping for the requested interface.</summary>
      <returns>Returns the requested interface mapping.</returns>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface for which the mapping is to be retrieved. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaces">
      <summary>Returns an array of all the interfaces implemented on this type and its base types.</summary>
      <returns>Returns an array of <see cref="T:System.Type" /> objects representing the implemented interfaces. If none are defined, an empty array is returned.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Returns all the public and non-public members declared or inherited by this type, as specified.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public and non-public members defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public members are returned.</returns>
      <param name="name">The name of the member. </param>
      <param name="type">The type of the member to return. </param>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, as in InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>Returns the members for the public and non-public members declared or inherited by this type.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.</returns>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)">
      <summary>Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition. </summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object that represents the method of <paramref name="type" /> corresponding to <paramref name="method" />, which specifies a method belonging to the generic type definition of <paramref name="type" />.</returns>
      <param name="type">The constructed generic type whose method is returned.</param>
      <param name="method">A method on the generic type definition of <paramref name="type" />, which specifies which method of <paramref name="type" /> to return.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is a generic method that is not a generic method definition.-or-<paramref name="type" /> does not represent a generic type.-or-<paramref name="type" /> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder" />.-or-The declaring type of <paramref name="method" /> is not a generic type definition. -or-The declaring type of <paramref name="method" /> is not the generic type definition of <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>Returns all the public and non-public methods declared or inherited by this type, as specified.</summary>
      <returns>Returns an array of <see cref="T:System.Reflection.MethodInfo" /> objects representing the public and non-public methods defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public methods are returned.</returns>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> as in InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public nested types that are declared by this type.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the nested type to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to conduct a case-sensitive search for public methods. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>Returns the public and non-public nested types that are declared or inherited by this type.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" /> that match the specified binding constraints.An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of the nested types match the binding constraints.</returns>
      <param name="bindingAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, as in InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>Returns all the public and non-public properties declared or inherited by this type, as specified.</summary>
      <returns>Returns an array of PropertyInfo objects representing the public and non-public properties defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public properties are returned.</returns>
      <param name="bindingAttr">This invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, NonPublic, and so on. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented for incomplete types. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GUID">
      <summary>Retrieves the GUID of this type.</summary>
      <returns>Read-only. Retrieves the GUID of this type </returns>
      <exception cref="T:System.NotSupportedException">This method is not currently supported for incomplete types. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</summary>
      <returns>Returns the return value of the invoked member.</returns>
      <param name="name">The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member. </param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects using reflection. If binder is null, the default binder is used. See <see cref="T:System.Reflection.Binder" />. </param>
      <param name="target">The object on which to invoke the specified member. If the member is static, this parameter is ignored. </param>
      <param name="args">An argument list. This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null. </param>
      <param name="modifiers">An array of the same length as <paramref name="args" /> with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for more details. </param>
      <param name="culture">An instance of CultureInfo used to govern the coercion of types. If this is null, the CultureInfo for the current thread is used. (Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.) </param>
      <param name="namedParameters">Each parameter in the <paramref name="namedParameters" /> array gets the value in the corresponding element in the <paramref name="args" /> array. If the length of <paramref name="args" /> is greater than the length of <paramref name="namedParameters" />, the remaining argument values are passed in order. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported for incomplete types. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)">
      <summary>Determines whether an instance of the current <see cref="T:System.Type" /> can be assigned from an instance of the specified Type.</summary>
      <returns>true if the <paramref name="c" /> parameter and the current <see cref="T:System.Type" /> represent the same type, or if the current Type is in the inheritance hierarchy of <paramref name="c" />, or if the current Type is an interface that <paramref name="c" /> supports. false if none of these conditions are the case, or if <paramref name="c" /> is a null reference (Nothing in Visual Basic).</returns>
      <param name="c">The Type to compare with the current Type. </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsCreated">
      <summary>Returns a value that indicates whether the current dynamic type has been created.</summary>
      <returns>true if the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has been called; otherwise, false. </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether a custom attribute is applied to the current type.</summary>
      <returns>true if one or more instances of <paramref name="attributeType" />, or an attribute derived from <paramref name="attributeType" />, is defined on this type; otherwise, false.</returns>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. </param>
      <exception cref="T:System.NotSupportedException">This method is not currently supported for incomplete types. Retrieve the type using <see cref="M:System.Type.GetType" /> and call <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> on the returned <see cref="T:System.Type" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not defined.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter">
      <summary>Gets a value indicating whether the current type is a generic type parameter.</summary>
      <returns>true if the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> object represents a generic type parameter; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericType">
      <summary>Gets a value indicating whether the current type is a generic type. </summary>
      <returns>true if the type represented by the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> object is generic; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition">
      <summary>Gets a value indicating whether the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> represents a generic type definition from which other generic types can be constructed.</summary>
      <returns>true if this <see cref="T:System.Reflection.Emit.TypeBuilder" /> object represents a generic type definition; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical">
      <summary>Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations. </summary>
      <returns>true if the current type is security-critical or security-safe-critical; false if it is transparent. </returns>
      <exception cref="T:System.NotSupportedException">The current dynamic type has not been created by calling the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical">
      <summary>Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code. </summary>
      <returns>true if the current type is security-safe-critical; false if it is security-critical or transparent.</returns>
      <exception cref="T:System.NotSupportedException">The current dynamic type has not been created by calling the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent">
      <summary>Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.</summary>
      <returns>true if the type is security-transparent; otherwise, false.</returns>
      <exception cref="T:System.NotSupportedException">The current dynamic type has not been created by calling the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)">
      <summary>Determines whether this type is derived from a specified type.</summary>
      <returns>Read-only. Returns true if this type is the same as the type <paramref name="c" />, or is a subtype of type <paramref name="c" />; otherwise, false.</returns>
      <param name="c">A <see cref="T:System.Type" /> that is to be checked. </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType">
      <summary>Returns a <see cref="T:System.Type" /> object that represents a one-dimensional array of the current type, with a lower bound of zero.</summary>
      <returns>A <see cref="T:System.Type" /> object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)">
      <summary>Returns a <see cref="T:System.Type" /> object that represents an array of the current type, with the specified number of dimensions.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents a one-dimensional array of the current type.</returns>
      <param name="rank">The number of dimensions for the array. </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> is not a valid array dimension.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeByRefType">
      <summary>Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a ref parameter (ByRef in Visual Basic).</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the current type when passed as a ref parameter (ByRef in Visual Basic).</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])">
      <summary>Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.</summary>
      <returns>A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type. </returns>
      <param name="typeArguments">An array of types to be substituted for the type parameters of the current generic type definition.</param>
      <exception cref="T:System.InvalidOperationException">The current type does not represent the definition of a generic type. That is, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> returns false. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> is null.-or- Any element of <paramref name="typeArguments" /> is null. </exception>
      <exception cref="T:System.ArgumentException">Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakePointerType">
      <summary>Returns a <see cref="T:System.Type" /> object that represents the type of an unmanaged pointer to the current type.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the type of an unmanaged pointer to the current type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Module">
      <summary>Retrieves the dynamic module that contains this type definition.</summary>
      <returns>Read-only. Retrieves the dynamic module that contains this type definition.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Name">
      <summary>Retrieves the name of this type.</summary>
      <returns>Read-only. Retrieves the <see cref="T:System.String" /> name of this type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Namespace">
      <summary>Retrieves the namespace where this TypeBuilder is defined.</summary>
      <returns>Read-only. Retrieves the namespace where this TypeBuilder is defined.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.PackingSize">
      <summary>Retrieves the packing size of this type.</summary>
      <returns>Read-only. Retrieves the packing size of this type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.ReflectedType">
      <summary>Returns the type that was used to obtain this type.</summary>
      <returns>Read-only. The type that was used to obtain this type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Sets a custom attribute using a specified custom attribute blob.</summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> or <paramref name="binaryAttribute" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Set a custom attribute using a custom attribute builder.</summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)">
      <summary>Sets the base type of the type currently under construction.</summary>
      <param name="parent">The new base type. </param>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.-or-<paramref name="parent" /> is null, and the current instance represents an interface whose attributes do not include <see cref="F:System.Reflection.TypeAttributes.Abstract" />.-or-For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is true, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is false. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parent" /> is an interface. This exception condition is new in the .NET Framework version 2.0. </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Size">
      <summary>Retrieves the total size of a type.</summary>
      <returns>Read-only. Retrieves this type’s total size.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array which receives the IDs corresponding to the names.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
      <exception cref="T:System.NotImplementedException">Late-bound access using the COM IDispatch interface is not supported.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.ToString">
      <summary>Returns the name of the type excluding the namespace.</summary>
      <returns>Read-only. The name of the type excluding the namespace.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeHandle">
      <summary>Not supported in dynamic modules.</summary>
      <returns>Read-only.</returns>
      <exception cref="T:System.NotSupportedException">Not supported in dynamic modules. </exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeToken">
      <summary>Returns the type token of this type.</summary>
      <returns>Read-only. Returns the TypeToken of this type.</returns>
      <exception cref="T:System.InvalidOperationException">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType">
      <summary>Returns the underlying system type for this TypeBuilder.</summary>
      <returns>Read-only. Returns the underlying system type.</returns>
      <exception cref="T:System.InvalidOperationException">This type is an enumeration, but there is no underlying system type. </exception>
    </member>
    <member name="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize">
      <summary>Represents that total size for the type is not specified.</summary>
    </member>
    <member name="T:System.Reflection.Emit.TypeToken">
      <summary>Represents the Token returned by the metadata to represent a type.</summary>
    </member>
    <member name="F:System.Reflection.Emit.TypeToken.Empty">
      <summary>The default TypeToken with <see cref="P:System.Reflection.Emit.TypeToken.Token" /> value 0.</summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.Equals(System.Object)">
      <summary>Checks if the given object is an instance of TypeToken and is equal to this instance.</summary>
      <returns>true if <paramref name="obj" /> is an instance of TypeToken and is equal to this object; otherwise, false.</returns>
      <param name="obj">The object to compare with this TypeToken. </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.Equals(System.Reflection.Emit.TypeToken)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.Reflection.Emit.TypeToken" />.</summary>
      <returns>true if the value of <paramref name="obj" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Reflection.Emit.TypeToken" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.GetHashCode">
      <summary>Generates the hash code for this type.</summary>
      <returns>Returns the hash code for this type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.op_Equality(System.Reflection.Emit.TypeToken,System.Reflection.Emit.TypeToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.TypeToken" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.TypeToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.TypeToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.TypeToken.op_Inequality(System.Reflection.Emit.TypeToken,System.Reflection.Emit.TypeToken)">
      <summary>Indicates whether two <see cref="T:System.Reflection.Emit.TypeToken" /> structures are not equal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.Reflection.Emit.TypeToken" /> to compare to <paramref name="b" />.</param>
      <param name="b">The <see cref="T:System.Reflection.Emit.TypeToken" /> to compare to <paramref name="a" />.</param>
    </member>
    <member name="P:System.Reflection.Emit.TypeToken.Token">
      <summary>Retrieves the metadata token for this class.</summary>
      <returns>Read-only. Retrieves the metadata token of this type.</returns>
    </member>
    <member name="T:System.Reflection.Emit.UnmanagedMarshal">
      <summary>Represents the class that describes how to marshal a field from managed to unmanaged code. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Reflection.Emit.UnmanagedMarshal.BaseType">
      <summary>Gets an unmanaged base type. This property is read-only.</summary>
      <returns>An UnmanagedType object.</returns>
      <exception cref="T:System.ArgumentException">The unmanaged type is not an LPArray or a SafeArray. </exception>
    </member>
    <member name="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
      <summary>Specifies a fixed-length array (ByValArray) to marshal to unmanaged code.</summary>
      <returns>An <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> object.</returns>
      <param name="elemCount">The number of elements in the fixed-length array. </param>
      <exception cref="T:System.ArgumentException">The argument is not a simple native type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
      <summary>Specifies a string in a fixed array buffer (ByValTStr) to marshal to unmanaged code.</summary>
      <returns>An <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> object.</returns>
      <param name="elemCount">The number of elements in the fixed array buffer. </param>
      <exception cref="T:System.ArgumentException">The argument is not a simple native type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
      <summary>Specifies an LPArray to marshal to unmanaged code. The length of an LPArray is determined at runtime by the size of the actual marshaled array.</summary>
      <returns>An <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> object.</returns>
      <param name="elemType">The unmanaged type to which to marshal the array. </param>
      <exception cref="T:System.ArgumentException">The argument is not a simple native type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
      <summary>Specifies a SafeArray to marshal to unmanaged code.</summary>
      <returns>An <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> object.</returns>
      <param name="elemType">The base type or the UnmanagedType of each element of the array. </param>
      <exception cref="T:System.ArgumentException">The argument is not a simple native type. </exception>
    </member>
    <member name="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
      <summary>Specifies a given type that is to be marshaled to unmanaged code.</summary>
      <returns>An <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> object.</returns>
      <param name="unmanagedType">The unmanaged type to which the type is to be marshaled. </param>
      <exception cref="T:System.ArgumentException">The argument is not a simple native type. </exception>
    </member>
    <member name="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount">
      <summary>Gets a number element. This property is read-only.</summary>
      <returns>An integer indicating the element count.</returns>
      <exception cref="T:System.ArgumentException">The argument is not an unmanaged element count. </exception>
    </member>
    <member name="P:System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType">
      <summary>Indicates an unmanaged type. This property is read-only.</summary>
      <returns>An <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> object.</returns>
    </member>
    <member name="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
      <summary>Gets a GUID. This property is read-only.</summary>
      <returns>A <see cref="T:System.Guid" /> object.</returns>
      <exception cref="T:System.ArgumentException">The argument is not a custom marshaler. </exception>
    </member>
    <member name="T:System.Resources.IResourceReader">
      <summary>Provides the base functionality to read data from resource files.</summary>
    </member>
    <member name="M:System.Resources.IResourceReader.Close">
      <summary>Closes the resource reader after releasing any resources associated with it.</summary>
    </member>
    <member name="M:System.Resources.IResourceReader.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> of the resources for this reader.</summary>
      <returns>A dictionary enumerator for the resources for this reader.</returns>
    </member>
    <member name="T:System.Resources.IResourceWriter">
      <summary>Provides functionality to write resources to an output file or stream.</summary>
    </member>
    <member name="M:System.Resources.IResourceWriter.AddResource(System.String,System.Byte[])">
      <summary>Adds an 8-bit unsigned integer array as a named resource to the list of resources to be written.</summary>
      <param name="name">Name of a resource. </param>
      <param name="value">Value of a resource as an 8-bit unsigned integer array. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Resources.IResourceWriter.AddResource(System.String,System.Object)">
      <summary>Adds a named resource of type <see cref="T:System.Object" /> to the list of resources to be written.</summary>
      <param name="name">The name of the resource. </param>
      <param name="value">The value of the resource. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Resources.IResourceWriter.AddResource(System.String,System.String)">
      <summary>Adds a named resource of type <see cref="T:System.String" /> to the list of resources to be written.</summary>
      <param name="name">The name of the resource. </param>
      <param name="value">The value of the resource. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null. </exception>
    </member>
    <member name="M:System.Resources.IResourceWriter.Close">
      <summary>Closes the underlying resource file or stream, ensuring all the data has been written to the file.</summary>
    </member>
    <member name="M:System.Resources.IResourceWriter.Generate">
      <summary>Writes all the resources added by the <see cref="M:System.Resources.IResourceWriter.AddResource(System.String,System.String)" /> method to the output file or stream.</summary>
    </member>
    <member name="T:System.Resources.MissingManifestResourceException">
      <summary>The exception thrown if the main assembly does not contain the resources for the neutral culture, and they are required because of a missing appropriate satellite assembly.</summary>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.MissingManifestResourceException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.MissingManifestResourceException" /> class from serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination of the exception. </param>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.MissingManifestResourceException" /> class with the specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.MissingManifestResourceException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Resources.MissingSatelliteAssemblyException">
      <summary>The exception that is thrown when the satellite assembly for the resources of the neutral culture is missing.</summary>
    </member>
    <member name="M:System.Resources.MissingSatelliteAssemblyException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.MissingSatelliteAssemblyException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Resources.MissingSatelliteAssemblyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.MissingSatelliteAssemblyException" /> class from serialized data. </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination of the exception.</param>
    </member>
    <member name="M:System.Resources.MissingSatelliteAssemblyException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.MissingSatelliteAssemblyException" /> class with the specified error message. </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Resources.MissingSatelliteAssemblyException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.MissingSatelliteAssemblyException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.Resources.MissingSatelliteAssemblyException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.MissingSatelliteAssemblyException" /> class with a specified error message and the name of a neutral culture. </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="cultureName">The name of the neutral culture.</param>
    </member>
    <member name="P:System.Resources.MissingSatelliteAssemblyException.CultureName">
      <summary>Gets the name of a neutral culture. </summary>
      <returns>A <see cref="T:System.String" /> object with the name of the neutral culture.</returns>
    </member>
    <member name="T:System.Resources.NeutralResourcesLanguageAttribute">
      <summary>Informs the <see cref="T:System.Resources.ResourceManager" /> of the neutral culture of an assembly. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Resources.NeutralResourcesLanguageAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> class.</summary>
      <param name="cultureName">The name of the culture that the current assembly's neutral resources were written in. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="cultureName" /> parameter is null. </exception>
    </member>
    <member name="M:System.Resources.NeutralResourcesLanguageAttribute.#ctor(System.String,System.Resources.UltimateResourceFallbackLocation)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> class with the specified ultimate resource fallback location.</summary>
      <param name="cultureName">The name of the culture that the current assembly's neutral resources were written in.</param>
      <param name="location">An <see cref="T:System.Resources.UltimateResourceFallbackLocation" /> enumeration value indicating the location from which to retrieve neutral fallback resources.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cultureName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> is not a member of <see cref="T:System.Resources.UltimateResourceFallbackLocation" />.</exception>
    </member>
    <member name="P:System.Resources.NeutralResourcesLanguageAttribute.CultureName">
      <summary>Gets the culture name.</summary>
      <returns>A <see cref="T:System.String" /> with the name of the default culture for the main assembly.</returns>
    </member>
    <member name="P:System.Resources.NeutralResourcesLanguageAttribute.Location">
      <summary>Gets the location for the <see cref="T:System.Resources.ResourceManager" /> class to use to retrieve neutral resources by using the resource fallback process.</summary>
      <returns>The value of the <see cref="T:System.Resources.UltimateResourceFallbackLocation" /> enumeration that indicates the location (main assembly or satellite) from which to retrieve neutral resources.</returns>
    </member>
    <member name="T:System.Resources.ResourceManager">
      <summary>Provides convenient access to culture-specific resources at run time.</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.ResourceManager" /> class with default values.</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.ResourceManager" /> class that looks up resources contained in files derived from the specified root name using the given <see cref="T:System.Reflection.Assembly" />.</summary>
      <param name="baseName">The root name of the resources. For example, the root name for the resource file named "MyResource.en-US.resources" is "MyResource". </param>
      <param name="assembly">The main <see cref="T:System.Reflection.Assembly" /> for the resources. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> or <paramref name="assembly" /> parameter is null. </exception>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.ResourceManager" /> class that looks up resources contained in files derived from the specified root name using the given <see cref="T:System.Reflection.Assembly" />.</summary>
      <param name="baseName">The root name of the resources. For example, the root name for the resource file named "MyResource.en-US.resources" is "MyResource". </param>
      <param name="assembly">The main <see cref="T:System.Reflection.Assembly" /> for the resources. </param>
      <param name="usingResourceSet">The <see cref="T:System.Type" /> of the custom <see cref="T:System.Resources.ResourceSet" /> to use. If null, the default runtime <see cref="T:System.Resources.ResourceSet" /> is used. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="usingResourceset" /> is not a derived class of <see cref="T:System.Resources.ResourceSet" />. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> or <paramref name="assembly" /> parameter is null. </exception>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.Type)">
      <summary>Creates a <see cref="T:System.Resources.ResourceManager" /> that looks up resources in satellite assemblies based on information from the specified <see cref="T:System.Type" />.</summary>
      <param name="resourceSource">A <see cref="T:System.Type" /> from which the <see cref="T:System.Resources.ResourceManager" /> derives all information for finding .resources files. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="resourceSource" /> parameter is null. </exception>
    </member>
    <member name="P:System.Resources.ResourceManager.BaseName">
      <summary>Gets the root name of the resource files that the <see cref="T:System.Resources.ResourceManager" /> searches for resources.</summary>
      <returns>The root name of the resource files that the <see cref="T:System.Resources.ResourceManager" /> searches for resources.</returns>
    </member>
    <member name="F:System.Resources.ResourceManager.BaseNameField">
      <summary>Indicates the root name of the resource files that the <see cref="T:System.Resources.ResourceManager" /> searches for resources.</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
      <summary>Returns a <see cref="T:System.Resources.ResourceManager" /> that searches a specific directory for resources instead of in the assembly manifest.</summary>
      <returns>The newly created <see cref="T:System.Resources.ResourceManager" /> that searches a specific directory for resources instead of in the assembly manifest.</returns>
      <param name="baseName">The root name of the resources. For example, the root name for the resource file named "MyResource.en-US.resources" is "MyResource". </param>
      <param name="resourceDir">The name of the directory to search for the resources. </param>
      <param name="usingResourceSet">The <see cref="T:System.Type" /> of the custom <see cref="T:System.Resources.ResourceSet" /> to use. If null, the default runtime <see cref="T:System.Resources.ResourceSet" /> is used. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> or <paramref name="resourceDir" /> parameter is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Resources.ResourceManager.FallbackLocation">
      <summary>Gets or sets the location from which to retrieve neutral fallback resources.</summary>
      <returns>One of the <see cref="T:System.Resources.UltimateResourceFallbackLocation" /> values.</returns>
    </member>
    <member name="M:System.Resources.ResourceManager.GetNeutralResourcesLanguage(System.Reflection.Assembly)">
      <summary>Returns the <see cref="T:System.Globalization.CultureInfo" /> for the main assembly's neutral resources by reading the value of the <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> on a specified <see cref="T:System.Reflection.Assembly" />.</summary>
      <returns>The culture from the <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" />, if found; otherwise, <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</returns>
      <param name="a">The assembly for which to return a <see cref="T:System.Globalization.CultureInfo" />. </param>
    </member>
    <member name="M:System.Resources.ResourceManager.GetObject(System.String)">
      <summary>Returns the value of the specified <see cref="T:System.Object" /> resource.</summary>
      <returns>The value of the resource localized for the caller's current culture settings. If a match is not possible, null is returned. The resource value can be null.</returns>
      <param name="name">The name of the resource to get. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">No usable set of resources has been found, and there are no neutral culture resources. </exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
      <summary>Gets the value of the <see cref="T:System.Object" /> resource localized for the specified culture.</summary>
      <returns>The value of the resource, localized for the specified culture. If a "best match" is not possible, null is returned.</returns>
      <param name="name">The name of the resource to get. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture for which the resource is localized. Note that if the resource is not localized for this culture, the lookup will fall back using the culture's <see cref="P:System.Globalization.CultureInfo.Parent" /> property, stopping after checking in the neutral culture.If this value is null, the <see cref="T:System.Globalization.CultureInfo" /> is obtained using the culture's <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">No usable set of resources have been found, and there are no neutral culture resources. </exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)">
      <summary>Generates the name for the resource file for the given <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <returns>The name that can be used for a resource file for the given <see cref="T:System.Globalization.CultureInfo" />.</returns>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> for which a resource file name is constructed. </param>
    </member>
    <member name="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
      <summary>Gets the <see cref="T:System.Resources.ResourceSet" /> for a particular culture.</summary>
      <returns>The specified <see cref="T:System.Resources.ResourceSet" />.</returns>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to look for. </param>
      <param name="createIfNotExists">If true and if the <see cref="T:System.Resources.ResourceSet" /> has not been loaded yet, load it. </param>
      <param name="tryParents">If the <see cref="T:System.Resources.ResourceSet" /> cannot be loaded, try parent <see cref="T:System.Globalization.CultureInfo" /> objects to see if they exist. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="culture" /> parameter is null. </exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetSatelliteContractVersion(System.Reflection.Assembly)">
      <summary>Returns the <see cref="T:System.Version" /> specified by the <see cref="T:System.Resources.SatelliteContractVersionAttribute" /> in the given assembly.</summary>
      <returns>The satellite contract <see cref="T:System.Version" /> of the given assembly, or null if no version was found.</returns>
      <param name="a">The <see cref="T:System.Reflection.Assembly" /> for which to look up the <see cref="T:System.Resources.SatelliteContractVersionAttribute" />. </param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Version" /> found in the assembly <paramref name="a" /> is invalid. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="a" /> is null. </exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetStream(System.String)">
      <summary>Returns an <see cref="T:System.IO.UnmanagedMemoryStream" /> object from the specified resource.</summary>
      <returns>An <see cref="T:System.IO.UnmanagedMemoryStream" /> object.</returns>
      <param name="name">The name of a resource.</param>
      <exception cref="T:System.InvalidOperationException">The value of the specified resource is not a <see cref="T:System.IO.MemoryStream" /> object.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">No usable set of resources is found, and there are no neutral resources.</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
      <summary>Returns an <see cref="T:System.IO.UnmanagedMemoryStream" /> object from the specified resource, using the specified culture.</summary>
      <returns>An <see cref="T:System.IO.UnmanagedMemoryStream" /> object.</returns>
      <param name="name">The name of a resource.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that specifies the culture to use for the resource lookup. If <paramref name="culture" /> is null, the culture for the current thread is used.</param>
      <exception cref="T:System.InvalidOperationException">The value of the specified resource is not a <see cref="T:System.IO.MemoryStream" /> object.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">No usable set of resources is found, and there are no neutral resources.</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetString(System.String)">
      <summary>Returns the value of the specified <see cref="T:System.String" /> resource.</summary>
      <returns>The value of the resource localized for the caller's current culture settings. If a match is not possible, null is returned.</returns>
      <param name="name">The name of the resource to get. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.InvalidOperationException">The value of the specified resource is not a string. </exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">No usable set of resources has been found, and there are no neutral culture resources. </exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
      <summary>Gets the value of the <see cref="T:System.String" /> resource localized for the specified culture.</summary>
      <returns>The value of the resource localized for the specified culture. If a best match is not possible, null is returned.</returns>
      <param name="name">The name of the resource to get. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture for which the resource is localized. Note that if the resource is not localized for this culture, the lookup will fall back using the current thread's <see cref="P:System.Globalization.CultureInfo.Parent" /> property, stopping after looking in the neutral culture.If this value is null, the <see cref="T:System.Globalization.CultureInfo" /> is obtained using the current thread's <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.InvalidOperationException">The value of the specified resource is not a <see cref="T:System.String" />. </exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">No usable set of resources has been found, and there are no neutral culture resources. </exception>
    </member>
    <member name="F:System.Resources.ResourceManager.HeaderVersionNumber">
      <summary>A constant readonly value indicating the version of resource file headers that the current implementation of <see cref="T:System.Resources.ResourceManager" /> can interpret and produce.</summary>
    </member>
    <member name="P:System.Resources.ResourceManager.IgnoreCase">
      <summary>Gets or sets a Boolean value indicating whether the current instance of ResourceManager allows case-insensitive resource lookups in the <see cref="M:System.Resources.ResourceManager.GetString(System.String)" /> and <see cref="M:System.Resources.ResourceManager.GetObject(System.String)" /> methods.</summary>
      <returns>A Boolean value indicating whether the case of the resource names should be ignored.</returns>
    </member>
    <member name="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
      <summary>Provides the implementation for finding a <see cref="T:System.Resources.ResourceSet" />.</summary>
      <returns>The specified <see cref="T:System.Resources.ResourceSet" />.</returns>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to look for. </param>
      <param name="createIfNotExists">If true and if the <see cref="T:System.Resources.ResourceSet" /> has not been loaded yet, load it. </param>
      <param name="tryParents">If the <see cref="T:System.Resources.ResourceSet" /> cannot be loaded, try parent <see cref="T:System.Globalization.CultureInfo" /> objects to see if they exist. </param>
      <exception cref="T:System.Resources.MissingManifestResourceException">The main assembly does not contain a .resources file and it is required to look up a resource. </exception>
      <exception cref="T:System.ExecutionEngineException">There was an internal error in the runtime.</exception>
      <exception cref="T:System.Resources.MissingSatelliteAssemblyException">The satellite assembly associated with <paramref name="culture" /> could not be located.</exception>
    </member>
    <member name="F:System.Resources.ResourceManager.MagicNumber">
      <summary>Holds the number used to identify resource files.</summary>
    </member>
    <member name="F:System.Resources.ResourceManager.MainAssembly">
      <summary>Indicates the main <see cref="T:System.Reflection.Assembly" /> that contains the resources.</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.ReleaseAllResources">
      <summary>Tells the <see cref="T:System.Resources.ResourceManager" /> to call <see cref="M:System.Resources.ResourceSet.Close" /> on all <see cref="T:System.Resources.ResourceSet" /> objects and release all resources.</summary>
    </member>
    <member name="F:System.Resources.ResourceManager.ResourceSets">
      <summary>Contains a <see cref="T:System.Collections.Hashtable" /> that returns a mapping from cultures to <see cref="T:System.Resources.ResourceSet" /> objects.</summary>
    </member>
    <member name="P:System.Resources.ResourceManager.ResourceSetType">
      <summary>Gets the <see cref="T:System.Type" /> of the <see cref="T:System.Resources.ResourceSet" /> the <see cref="T:System.Resources.ResourceManager" /> uses to construct a <see cref="T:System.Resources.ResourceSet" /> object.</summary>
      <returns>The <see cref="T:System.Type" /> of the <see cref="T:System.Resources.ResourceSet" /> the <see cref="T:System.Resources.ResourceManager" /> uses to construct a <see cref="T:System.Resources.ResourceSet" /> object.</returns>
    </member>
    <member name="T:System.Resources.ResourceReader">
      <summary>Enumerates .resources files and streams, reading sequential resource name and value pairs.</summary>
    </member>
    <member name="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class for the specified stream.</summary>
      <param name="stream">The input stream for reading resources. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="stream" /> is not readable. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stream" /> parameter is null. </exception>
      <exception cref="T:System.IO.IOException">An I/O error has occurred while accessing <paramref name="stream" />. </exception>
    </member>
    <member name="M:System.Resources.ResourceReader.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class for the specified resource file.</summary>
      <param name="fileName">The path of the resource file to be read. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="fileName" /> parameter is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file cannot be found. </exception>
      <exception cref="T:System.IO.IOException">An I/O error has occurred. </exception>
      <exception cref="T:System.BadImageFormatException">The resource file has an invalid format. For example, the length of the file is zero.</exception>
    </member>
    <member name="M:System.Resources.ResourceReader.Close">
      <summary>Releases all operating system resources associated with this <see cref="T:System.Resources.ResourceReader" />.</summary>
    </member>
    <member name="M:System.Resources.ResourceReader.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Resources.ResourceReader" /> class.</summary>
    </member>
    <member name="M:System.Resources.ResourceReader.GetEnumerator">
      <summary>Returns an enumerator for this <see cref="T:System.Resources.ResourceReader" />.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for this <see cref="T:System.Resources.ResourceReader" />.</returns>
      <exception cref="T:System.InvalidOperationException">The reader has been closed or disposed, and cannot be accessed. </exception>
    </member>
    <member name="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
      <summary>Retrieves the type name and data content of a named resource from an open resource file or stream.</summary>
      <param name="resourceName">The name of a resource.</param>
      <param name="resourceType">When this method returns, contains a string that is the type name of the retrieved type. This parameter is passed uninitialized.</param>
      <param name="resourceData">When this method returns, contains a byte array that is the binary representation of the retrieved type. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="resourceName" /> does not exist.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="resourceName" /> has an invalid type.</exception>
      <exception cref="T:System.FormatException">The retrieved resource data is corrupted.</exception>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Resources.ResourceReader" /> object is not initialized. The probable cause is that the <see cref="T:System.Resources.ResourceReader" /> object is closed.</exception>
    </member>
    <member name="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator for this <see cref="T:System.Resources.ResourceReader" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> for this <see cref="T:System.Resources.ResourceReader" />.</returns>
      <exception cref="T:System.InvalidOperationException">The reader has already been closed, and thus cannot be accessed. </exception>
    </member>
    <member name="T:System.Resources.ResourceSet">
      <summary>Stores all the resources localized for one particular culture, ignoring all other cultures, including any fallback rules.</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.ResourceSet" /> class with default properties.</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
      <summary>Creates a new instance of the <see cref="T:System.Resources.ResourceSet" /> class using the system default <see cref="T:System.Resources.ResourceReader" /> that reads resources from the given stream.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> of resources to be read. The stream should refer to an existing resources file. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="stream" /> is not readable. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stream" /> parameter is null. </exception>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)">
      <summary>Creates a new instance of the <see cref="T:System.Resources.ResourceSet" /> class using the specified resource reader.</summary>
      <param name="reader">The reader that will be used. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="reader" /> parameter is null. </exception>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Resources.ResourceSet" /> class using the system default <see cref="T:System.Resources.ResourceReader" /> that opens and reads resources from the given file.</summary>
      <param name="fileName">Resource file to read. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="fileName" /> parameter is null. </exception>
    </member>
    <member name="M:System.Resources.ResourceSet.Close">
      <summary>Closes and releases any resources used by this <see cref="T:System.Resources.ResourceSet" />.</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.Dispose">
      <summary>Disposes of the resources (other than memory) used by the current instance of <see cref="T:System.Resources.ResourceSet" />.</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.Dispose(System.Boolean)">
      <summary>Releases resources (other than memory) associated with the current instance, closing internal managed objects if requested.</summary>
      <param name="disposing">Indicates whether the objects contained in the current instance should be explicitly closed. </param>
    </member>
    <member name="M:System.Resources.ResourceSet.GetDefaultReader">
      <summary>Returns the preferred resource reader class for this kind of <see cref="T:System.Resources.ResourceSet" />.</summary>
      <returns>Returns the <see cref="T:System.Type" /> for the preferred resource reader for this kind of <see cref="T:System.Resources.ResourceSet" />.</returns>
    </member>
    <member name="M:System.Resources.ResourceSet.GetDefaultWriter">
      <summary>Returns the preferred resource writer class for this kind of <see cref="T:System.Resources.ResourceSet" />.</summary>
      <returns>Returns the <see cref="T:System.Type" /> for the preferred resource writer for this kind of <see cref="T:System.Resources.ResourceSet" />.</returns>
    </member>
    <member name="M:System.Resources.ResourceSet.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that can iterate through the <see cref="T:System.Resources.ResourceSet" />.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for this <see cref="T:System.Resources.ResourceSet" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The resource set has been closed or disposed. </exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetObject(System.String)">
      <summary>Searches for a resource object with the specified name.</summary>
      <returns>The requested resource.</returns>
      <param name="name">Case-sensitive name of the resource to search for. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
      <summary>Searches for a resource object with the specified name in a case-insensitive manner, if requested.</summary>
      <returns>The requested resource.</returns>
      <param name="name">Name of the resource to search for. </param>
      <param name="ignoreCase">Indicates whether the case of the specified name should be ignored. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetString(System.String)">
      <summary>Searches for a <see cref="T:System.String" /> resource with the specified name.</summary>
      <returns>The value of a resource, if the value is a <see cref="T:System.String" />.</returns>
      <param name="name">Name of the resource to search for. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.InvalidOperationException">The resource specified by <paramref name="name" /> is not a <see cref="T:System.String" />. </exception>
      <exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
      <summary>Searches for a <see cref="T:System.String" /> resource with the specified name in a case-insensitive manner, if requested.</summary>
      <returns>The value of a resource, if the value is a <see cref="T:System.String" />.</returns>
      <param name="name">Name of the resource to search for. </param>
      <param name="ignoreCase">Indicates whether the case of the case of the specified name should be ignored. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.InvalidOperationException">The resource specified by <paramref name="name" /> is not a <see cref="T:System.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
    </member>
    <member name="F:System.Resources.ResourceSet.Reader">
      <summary>Indicates the <see cref="T:System.Resources.IResourceReader" /> used to read the resources.</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.ReadResources">
      <summary>Reads all the resources and stores them in a <see cref="T:System.Collections.Hashtable" /> indicated in the <see cref="F:System.Resources.ResourceSet.Table" /> property.</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> object to avoid a race condition with Dispose. This member is not intended to be used directly from your code.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the current <see cref="T:System.Resources.ResourceSet" /> object.</returns>
    </member>
    <member name="F:System.Resources.ResourceSet.Table">
      <summary>The <see cref="T:System.Collections.Hashtable" /> in which the resources are stored.</summary>
    </member>
    <member name="T:System.Resources.ResourceWriter">
      <summary>Writes resources in the system-default format to an output file or an output stream. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Resources.ResourceWriter.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.ResourceWriter" /> class that writes the resources to the provided stream.</summary>
      <param name="stream">The output stream. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="stream" /> parameter is not writable. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stream" /> parameter is null. </exception>
    </member>
    <member name="M:System.Resources.ResourceWriter.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.ResourceWriter" /> class that writes the resources to the specified file.</summary>
      <param name="fileName">The output file name. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="fileName" /> parameter is null. </exception>
    </member>
    <member name="M:System.Resources.ResourceWriter.AddResource(System.String,System.Byte[])">
      <summary>Adds a named resource specified as a byte array to the list of resources to be written.</summary>
      <param name="name">The name of the resource. </param>
      <param name="value">Value of the resource as an 8-bit unsigned integer array. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> (or a name that varies only by capitalization) has already been added to this <see cref="T:System.Resources.ResourceWriter" />. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> or <paramref name="value" /> parameter is null. </exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Resources.ResourceWriter" /> has been closed and its <see cref="T:System.Collections.Hashtable" /> is unavailable. </exception>
    </member>
    <member name="M:System.Resources.ResourceWriter.AddResource(System.String,System.IO.Stream)">
      <summary>Adds a named resource specified as a stream to the list of resources to be written.</summary>
      <param name="name">The name of the resource to add. </param>
      <param name="value">The value of the resource to add that supports the <see cref="P:System.IO.Stream.Length" /> property. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> (or a name that varies only by capitalization) has already been added to this <see cref="T:System.Resources.ResourceWriter" />.-or-The stream does not support the <see cref="P:System.IO.Stream.Length" /> property.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Resources.ResourceWriter" /> has been closed.</exception>
    </member>
    <member name="M:System.Resources.ResourceWriter.AddResource(System.String,System.IO.Stream,System.Boolean)">
      <summary>Adds a named resource specified as a stream to the list of resources to be written, and specifies whether the stream should be closed after the <see cref="M:System.Resources.ResourceWriter.Generate" /> method is called. </summary>
      <param name="name">The name of the resource to add. </param>
      <param name="value">The value of the resource to add that supports the <see cref="P:System.IO.Stream.Length" /> property. </param>
      <param name="closeAfterWrite">true to close the stream after the <see cref="M:System.Resources.ResourceWriter.Generate" /> method is called; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> (or a name that varies only by capitalization) has already been added to this <see cref="T:System.Resources.ResourceWriter" />.-or-The stream does not support the <see cref="P:System.IO.Stream.Length" /> property.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Resources.ResourceWriter" /> has been closed.</exception>
    </member>
    <member name="M:System.Resources.ResourceWriter.AddResource(System.String,System.Object)">
      <summary>Adds a named resource specified as an object to the list of resources to be written.</summary>
      <param name="name">The name of the resource. </param>
      <param name="value">The value of the resource. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> (or a name that varies only by capitalization) has already been added to this <see cref="T:System.Resources.ResourceWriter" />. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> or <paramref name="value" /> parameter is null. </exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Resources.ResourceWriter" /> has been closed and its <see cref="T:System.Collections.Hashtable" /> is unavailable. </exception>
    </member>
    <member name="M:System.Resources.ResourceWriter.AddResource(System.String,System.String)">
      <summary>Adds a <see cref="T:System.String" /> resource to the list of resources to be written.</summary>
      <param name="name">The name of the resource. </param>
      <param name="value">The value of the resource. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> (or a name that varies only by capitalization) has already been added to this ResourceWriter. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> or <paramref name="value" /> parameter is null. </exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Resources.ResourceWriter" /> has been closed and its <see cref="T:System.Collections.Hashtable" /> is unavailable. </exception>
    </member>
    <member name="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])">
      <summary>Adds a unit of data as a resource to the list of resources to be written. </summary>
      <param name="name">A name that identifies the resource that contains the added data.</param>
      <param name="typeName">The type name of the added data.</param>
      <param name="serializedData">A byte array that contains the binary representation of the added data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />, <paramref name="typeName" />, or <paramref name="serializedData" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> (or a name that varies only by capitalization) has already been added to this <see cref="T:System.Resources.ResourceWriter" /> object. </exception>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Resources.ResourceWriter" /> object is not initialized. The probable cause is that the <see cref="T:System.Resources.ResourceWriter" /> object is closed.</exception>
    </member>
    <member name="M:System.Resources.ResourceWriter.Close">
      <summary>Saves the resources to the output stream and then closes it.</summary>
      <exception cref="T:System.IO.IOException">An I/O error has occurred. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An error has occurred during serialization of the object. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Resources.ResourceWriter.Dispose">
      <summary>Allows users to close the resource file or stream, explicitly releasing resources.</summary>
      <exception cref="T:System.IO.IOException">An I/O error has occurred. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An error has occurred during serialization of the object. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Resources.ResourceWriter.Generate">
      <summary>Saves all resources to the output stream in the system default format.</summary>
      <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">An error occurred during serialization of the object. </exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Resources.ResourceWriter" /> has been closed and its <see cref="T:System.Collections.Hashtable" /> is unavailable. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Resources.ResourceWriter.TypeNameConverter">
      <summary>Get or sets a delegate that enables resource assemblies to be written that target versions of the .NET Framework prior to the .NET Framework version 4 by using qualified assembly names.</summary>
      <returns>The type that is encapsulated by the delegate.</returns>
    </member>
    <member name="T:System.Resources.SatelliteContractVersionAttribute">
      <summary>Instructs the <see cref="T:System.Resources.ResourceManager" /> to ask for a particular version of a satellite assembly to simplify updates of the main assembly of an application.</summary>
    </member>
    <member name="M:System.Resources.SatelliteContractVersionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Resources.SatelliteContractVersionAttribute" /> class.</summary>
      <param name="version">A <see cref="T:System.String" /> with the version of the satellite assemblies to load. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="version" /> parameter is null. </exception>
    </member>
    <member name="P:System.Resources.SatelliteContractVersionAttribute.Version">
      <summary>Gets the version of the satellite assemblies with the required resources.</summary>
      <returns>A <see cref="T:System.String" /> containing the version of the satellite assemblies with the required resources.</returns>
    </member>
    <member name="T:System.Resources.UltimateResourceFallbackLocation">
      <summary>Specifies the assembly for the <see cref="T:System.Resources.ResourceManager" /> class to use to retrieve neutral resources by using the Packaging and Deploying Resources.</summary>
    </member>
    <member name="F:System.Resources.UltimateResourceFallbackLocation.MainAssembly">
      <summary>Fallback resources are located in the main assembly.</summary>
    </member>
    <member name="F:System.Resources.UltimateResourceFallbackLocation.Satellite">
      <summary>Fallback resources are located in a satellite assembly in the location specified by the <see cref="P:System.Resources.NeutralResourcesLanguageAttribute.Location" /> property.</summary>
    </member>
    <member name="M:System.Resources.ResourceReader.System#IDisposable#Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Resources.ResourceReader" />. </summary>
    </member>
    <member name="T:System.Runtime.AssemblyTargetedPatchBandAttribute">
      <summary>Specifies patch band information for targeted patching of the .NET Framework.</summary>
    </member>
    <member name="M:System.Runtime.AssemblyTargetedPatchBandAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.AssemblyTargetedPatchBandAttribute" /> class.</summary>
      <param name="targetedPatchBand">The patch band.</param>
    </member>
    <member name="P:System.Runtime.AssemblyTargetedPatchBandAttribute.TargetedPatchBand">
      <summary>Gets the patch band. </summary>
      <returns>The patch band information.</returns>
    </member>
    <member name="T:System.Runtime.GCLatencyMode">
      <summary>Adjusts the time that the garbage collector intrudes in your application.   </summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Batch">
      <summary>Disables garbage collection concurrency and reclaims objects in a batch call. This is the most intrusive mode.</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Interactive">
      <summary>Enables garbage collection concurrency and reclaims objects while the application is running. This is the default mode for garbage collection on a workstation and is less intrusive. It balances responsiveness with throughput.</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.LowLatency">
      <summary>Enables garbage collection that is more conservative in reclaiming objects. Full Collections occur only if the system is under memory pressure while generation 0 and generation 1 collections might occur more frequently. This is the least intrusive mode.</summary>
    </member>
    <member name="T:System.Runtime.GCSettings">
      <summary>Specifies the garbage collection settings for the current process. </summary>
    </member>
    <member name="P:System.Runtime.GCSettings.IsServerGC">
      <summary>Gets a value that indicates whether server garbage collection is enabled.</summary>
      <returns>true if server garbage collection is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LatencyMode">
      <summary>Gets or sets the current latency mode for garbage collection.</summary>
      <returns>One of the enumeration values that specifies the latency mode. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="T:System.Runtime.GCLatencyMode" /> is set to an invalid value.</exception>
    </member>
    <member name="T:System.Runtime.MemoryFailPoint">
      <summary>Checks for sufficient memory resources prior to execution. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.MemoryFailPoint" /> class, specifying the amount of memory required for successful execution. </summary>
      <param name="sizeInMegabytes">The required memory size in megabytes.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified memory size is negative.</exception>
      <exception cref="T:System.InsufficientMemoryException">There is insufficient memory to begin execution of the code protected by the gate.</exception>
    </member>
    <member name="M:System.Runtime.MemoryFailPoint.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Runtime.MemoryFailPoint" />. </summary>
    </member>
    <member name="T:System.Runtime.TargetedPatchingOptOutAttribute">
      <summary>Indicates that the .NET Framework class library method to which this attribute is applied is unlikely to be affected by servicing releases, and therefore is eligible to be inlined across Native Image Generator (NGen) images.</summary>
    </member>
    <member name="M:System.Runtime.TargetedPatchingOptOutAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.TargetedPatchingOptOutAttribute" /> class.</summary>
      <param name="reason">The reason why the method to which the <see cref="T:System.Runtime.TargetedPatchingOptOutAttribute" /> attribute is applied is considered to be eligible for inlining across Native Image Generator (NGen) images.</param>
    </member>
    <member name="P:System.Runtime.TargetedPatchingOptOutAttribute.Reason">
      <summary>Gets the reason why the method to which this attribute is applied is considered to be eligible for inlining across Native Image Generator (NGen) images.</summary>
      <returns>The reason why the method is considered to be eligible for inlining across NGen images.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute">
      <summary>Specifies the name of the property that accesses the attributed field.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the AccessedThroughPropertyAttribute class with the name of the property used to access the attributed field.</summary>
      <param name="propertyName">The name of the property used to access the attributed field. </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.PropertyName">
      <summary>Gets the name of the property used to access the attributed field.</summary>
      <returns>The name of the property used to access the attributed field.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallConvCdecl">
      <summary>Indicates that a method should use the Cdecl calling convention.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallConvCdecl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallConvCdecl" /> class. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallConvFastcall">
      <summary>This calling convention is not supported in this version of the .NET Framework.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallConvFastcall.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallConvFastcall" /> class. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallConvStdcall">
      <summary>Indicates that a method should use the StdCall calling convention.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallConvStdcall.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallConvStdcall" /> class. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallConvThiscall">
      <summary>Indicates that a method should use the ThisCall calling convention.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallConvThiscall.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallConvThiscall" /> class. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxations">
      <summary>Specifies parameters that control the strictness of the code generated by the common language runtime's just-in-time (JIT) compiler.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning">
      <summary>Marks an assembly as not requiring string-literal interning.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute">
      <summary>Controls the strictness of the code generated by the common language runtime's just-in-time (JIT) compiler.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> class with the specified compilation relaxations.</summary>
      <param name="relaxations">The compilation relaxations. </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Runtime.CompilerServices.CompilationRelaxations)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> class with the specified <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> value. </summary>
      <param name="relaxations">One of the <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> values.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations">
      <summary>Gets the compilation relaxations specified when the current object was constructed.</summary>
      <returns>The compilation relaxations specified when the current object was constructed.Use the <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> enumeration with the <see cref="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations" /> property.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute">
      <summary>Distinguishes a compiler-generated element from a user-generated element. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGeneratedAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGlobalScopeAttribute">
      <summary>Indicates that a class should be treated as if it has global scope.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGlobalScopeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerGlobalScopeAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerMarshalOverride">
      <summary>Indicates that the modified instance of a variable differs from its true type when marshaling. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
      <summary>Enables compilers to dynamically attach object fields to managed objects.</summary>
      <typeparam name="TKey">The reference type to which the field is attached. </typeparam>
      <typeparam name="TValue">The field's type. This must be a reference type.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
      <summary>Adds a key to the table.</summary>
      <param name="key">The key to add. <paramref name="key" /> represents the object to which the property is attached.</param>
      <param name="value">The key's property value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> already exists.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
      <summary>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes the default constructor of the class that represents the table's value to create a value that is bound to the specified key. </summary>
      <returns>The value that corresponds to <paramref name="key" />, if <paramref name="key" /> already exists in the table; otherwise, a new value created by the default constructor of the class defined by the <paramref name="TValue" /> generic type parameter.</returns>
      <param name="key">The key to search for. <paramref name="key" /> represents the object to which the property is attached.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.MissingMethodException">The class that represents the table's value does not define a default constructor.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)">
      <summary>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.</summary>
      <returns>The value attached to <paramref name="key" />, if <paramref name="key" /> already exists in the table; otherwise, the new value returned by the <paramref name="createValueCallback" /> delegate.</returns>
      <param name="key">The key to search for. <paramref name="key" /> represents the object to which the property is attached.</param>
      <param name="createValueCallback">A delegate to a method that can create a value for the given <paramref name="key" />. It has a single parameter of type <paramref name="TKey" />, and returns a value of type <paramref name="TValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="createValueCallback" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
      <summary>Removes a key and its value from the table.</summary>
      <returns>true if the key is found and removed; otherwise, false.</returns>
      <param name="key">The key to remove. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
      <summary>Gets the value of the specified key.</summary>
      <returns>true if <paramref name="key" /> is found; otherwise, false.</returns>
      <param name="key">The key that represents an object with an attached property.</param>
      <param name="value">When this method returns, contains the attached property value. If <paramref name="key" /> is not found, <paramref name="value" /> contains the default value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback">
      <summary>Represents a method that creates a non-default value to add as part of a key/value pair to a <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> object. </summary>
      <returns>An instance of a reference type that represents the value to attach to the specified key.</returns>
      <param name="key">The key that belongs to the value to create.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CustomConstantAttribute">
      <summary>Defines a constant value that a compiler can persist for a field or method parameter.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CustomConstantAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CustomConstantAttribute" /> class. </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CustomConstantAttribute.Value">
      <summary>Gets the constant value stored by this attribute.</summary>
      <returns>The constant value stored by this attribute.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DateTimeConstantAttribute">
      <summary>Persists an 8-byte <see cref="T:System.DateTime" /> constant for a field or parameter.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DateTimeConstantAttribute.#ctor(System.Int64)">
      <summary>Initializes a new instance of the DateTimeConstantAttribute class with the number of 100-nanosecond ticks that represent the date and time of this instance.</summary>
      <param name="ticks">The number of 100-nanosecond ticks that represent the date and time of this instance. </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DateTimeConstantAttribute.Value">
      <summary>Gets the number of 100-nanosecond ticks that represent the date and time of this instance.</summary>
      <returns>The number of 100-nanosecond ticks that represent the date and time of this instance.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DecimalConstantAttribute">
      <summary>Stores the value of a <see cref="T:System.Decimal" /> constant in metadata. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> class with the specified signed integer values. </summary>
      <param name="scale">The power of 10 scaling factor that indicates the number of digits to the right of the decimal point. Valid values are 0 through 28 inclusive.</param>
      <param name="sign">A value of 0 indicates a positive value, and a value of 1 indicates a negative value.</param>
      <param name="hi">The high 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />.</param>
      <param name="mid">The middle 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />.</param>
      <param name="low">The low 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> class with the specified unsigned integer values.</summary>
      <param name="scale">The power of 10 scaling factor that indicates the number of digits to the right of the decimal point. Valid values are 0 through 28 inclusive. </param>
      <param name="sign">A value of 0 indicates a positive value, and a value of 1 indicates a negative value. </param>
      <param name="hi">The high 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />. </param>
      <param name="mid">The middle 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />. </param>
      <param name="low">The low 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> &gt; 28. </exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value">
      <summary>Gets the decimal constant stored in this attribute.</summary>
      <returns>The decimal constant stored in this attribute.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DefaultDependencyAttribute">
      <summary>Provides a hint to the common language runtime (CLR) indicating how likely a dependency is to be loaded. This class is used in a dependent assembly to indicate what hint should be used when the parent does not specify the <see cref="T:System.Runtime.CompilerServices.DependencyAttribute" /> attribute.  This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DefaultDependencyAttribute.#ctor(System.Runtime.CompilerServices.LoadHint)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DefaultDependencyAttribute" /> class with the specified <see cref="T:System.Runtime.CompilerServices.LoadHint" /> binding. </summary>
      <param name="loadHintArgument">One of the <see cref="T:System.Runtime.CompilerServices.LoadHint" /> values that indicates the default binding preference.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DefaultDependencyAttribute.LoadHint">
      <summary>Gets the <see cref="T:System.Runtime.CompilerServices.LoadHint" /> value that indicates when an assembly loads a dependency.</summary>
      <returns>One of the <see cref="T:System.Runtime.CompilerServices.LoadHint" /> values.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DependencyAttribute">
      <summary>Indicates when a dependency is to be loaded by the referring assembly. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DependencyAttribute.#ctor(System.String,System.Runtime.CompilerServices.LoadHint)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DependencyAttribute" /> class with the specified <see cref="T:System.Runtime.CompilerServices.LoadHint" /> value. </summary>
      <param name="dependentAssemblyArgument">The dependent assembly to bind to.</param>
      <param name="loadHintArgument">One of the <see cref="T:System.Runtime.CompilerServices.LoadHint" /> values.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DependencyAttribute.DependentAssembly">
      <summary>Gets the value of the dependent assembly. </summary>
      <returns>The name of the dependent assembly.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.DependencyAttribute.LoadHint">
      <summary>Gets the <see cref="T:System.Runtime.CompilerServices.LoadHint" /> value that indicates when an assembly is to load a dependency. </summary>
      <returns>One of the <see cref="T:System.Runtime.CompilerServices.LoadHint" /> values.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DiscardableAttribute">
      <summary>Marks a type definition as discardable.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DiscardableAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DiscardableAttribute" /> class with default values.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute">
      <summary>Fixes the address of a static value type field throughout its lifetime. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedBufferAttribute">
      <summary>Indicates that a field should be treated as containing a fixed number of elements of the specified primitive type. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedBufferAttribute.#ctor(System.Type,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.FixedBufferAttribute" /> class. </summary>
      <param name="elementType">The type of the elements contained in the buffer.</param>
      <param name="length">The number of elements in the buffer.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.ElementType">
      <summary>Gets the type of the elements contained in the fixed buffer. </summary>
      <returns>The type of the elements.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.Length">
      <summary>Gets the number of elements in the fixed buffer. </summary>
      <returns>The number of elements in the fixed buffer.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.HasCopySemanticsAttribute">
      <summary>This class is not used in the .NET Framework version 2.0 and is reserved for future use. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.HasCopySemanticsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.HasCopySemanticsAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IDispatchConstantAttribute">
      <summary>Indicates that the default value for the attributed field or parameter is an instance of <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />, where the <see cref="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject" /> is null.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IDispatchConstantAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.IDispatchConstantAttribute" /> class.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IDispatchConstantAttribute.Value">
      <summary>Gets the IDispatch constant stored in this attribute.</summary>
      <returns>The IDispatch constant stored in this attribute. Only null is allowed for an IDispatch constant value.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Runtime.CompilerServices.IndexerNameAttribute">
      <summary>Indicates the name by which an indexer is known in programming languages that do not support indexers directly.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.IndexerNameAttribute" /> class.</summary>
      <param name="indexerName">The name of the indexer, as shown to other languages. </param>
    </member>
    <member name="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
      <summary>Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> class with the name of the specified friend assembly. </summary>
      <param name="assemblyName">The name of a friend assembly.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible">
      <summary>This property is not implemented.</summary>
      <returns>This property does not return a value.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
      <summary>Gets the name of the friend assembly to which all types and type members that are marked with the internal keyword are to be made visible. </summary>
      <returns>A string that represents the name of the friend assembly.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsBoxed">
      <summary>Indicates that the modified reference type is a boxed value type. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsByValue">
      <summary>Indicates that a modified method argument should be interpreted as having object passed-by-value semantics. This modifier is applied to reference types.  This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsConst">
      <summary>Indicates that the modified type has a const modifier. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsCopyConstructed">
      <summary>Indicates that any copying of values of this type must use the copy constructor provided by the type.  This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsExplicitlyDereferenced">
      <summary>Indicates that a managed pointer represents a pointer parameter within a method signature. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced">
      <summary>Indicates that the modified garbage collection reference represents a reference parameter within a method signature. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsJitIntrinsic">
      <summary>Indicates that a modified method is an intrinsic value for which the just-in-time (JIT) compiler  can perform special code generation. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsLong">
      <summary>Indicates that a modified integer is a standard C++ long value. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsPinned">
      <summary>Indicates that a modified instance is pinned in memory. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsSignUnspecifiedByte">
      <summary>Indicates that a modifier is neither signed nor unsigned. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsUdtReturn">
      <summary>Indicates that a return type is a user-defined type. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsVolatile">
      <summary>Marks a field as volatile. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IUnknownConstantAttribute">
      <summary>Indicates that the default value for the attributed field or parameter is an instance of <see cref="T:System.Runtime.InteropServices.UnknownWrapper" />, where the <see cref="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject" /> is null. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.IUnknownConstantAttribute" /> class.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IUnknownConstantAttribute.Value">
      <summary>Gets the IUnknown constant stored in this attribute.</summary>
      <returns>The IUnknown constant stored in this attribute. Only null is allowed for an IUnknown constant value.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.LoadHint">
      <summary>Specifies the preferred default binding for a dependent assembly.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.LoadHint.Default">
      <summary>No preference specified.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.LoadHint.Always">
      <summary>The dependency is always loaded.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.LoadHint.Sometimes">
      <summary>The dependency is sometimes loaded.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodCodeType">
      <summary>Defines how a method is implemented.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.IL">
      <summary>Specifies that the method implementation is in Microsoft intermediate language (MSIL).</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.Native">
      <summary>Specifies that the method is implemented in native code.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.OPTIL">
      <summary>Specifies that the method implementation is in optimized intermediate language (OPTIL).</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.Runtime">
      <summary>Specifies that the method implementation is provided by the runtime.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplAttribute">
      <summary>Specifies the details of how a method is implemented. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor">
      <summary>Initializes a new instance of the MethodImplAttribute class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the MethodImplAttribute class with the specified <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value.</summary>
      <param name="value">A bitmask representing the desired <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value which specifies properties of the attributed method. </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Runtime.CompilerServices.MethodImplOptions)">
      <summary>Initializes a new instance of the MethodImplAttribute class with the specified <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value.</summary>
      <param name="methodImplOptions">A <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value specifying properties of the attributed method. </param>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplAttribute.MethodCodeType">
      <summary>A <see cref="T:System.Runtime.CompilerServices.MethodCodeType" /> value indicating what kind of implementation is provided for this method.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.MethodImplAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value describing the attributed method.</summary>
      <returns>The <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value describing the attributed method.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplOptions">
      <summary>Defines the details of how a method is implemented.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Unmanaged">
      <summary>Specifies that the method is implemented in unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.ForwardRef">
      <summary>Specifies that the method is declared, but its implementation is provided elsewhere.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.PreserveSig">
      <summary>Specifies that the method signature is exported exactly as declared.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.InternalCall">
      <summary>Specifies an internal call. An internal call is a call to a method that is implemented within the common language runtime itself.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Synchronized">
      <summary>Specifies that the method can be executed by only one thread at a time.  Static methods lock on the type, whereas instance methods lock on the instance. Only one thread can execute in any of the instance functions, and only one thread can execute in any of a class's static functions.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining">
      <summary>Specifies that the method cannot be inlined.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoOptimization">
      <summary>Specifies that the method is not optimized by the just-in-time (JIT) compiler or by native code generation (see Ngen.exe) when debugging possible code generation problems.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.NativeCppClassAttribute">
      <summary>Applies metadata to an assembly that indicates that a type is an unmanaged type.  This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.NativeCppClassAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.NativeCppClassAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute">
      <summary>Identifies an assembly as a reference assembly, which contains metadata but no executable code.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> class. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> class by using the specified description. </summary>
      <param name="description">The description of the reference assembly. </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.Description">
      <summary>Gets the description of the reference assembly.</summary>
      <returns>The description of the reference assembly.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RequiredAttributeAttribute">
      <summary>Specifies that an importing compiler must fully understand the semantics of a type definition, or refuse to use it.  This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RequiredAttributeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RequiredAttributeAttribute" /> class.</summary>
      <param name="requiredContract">A type that an importing compiler must fully understand.This parameter is not supported in the .NET Framework version 2.0 and later. </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.RequiredAttributeAttribute.RequiredContract">
      <summary>Gets a type that an importing compiler must fully understand.</summary>
      <returns>A type that an importing compiler must fully understand. </returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
      <summary>Specifies whether to wrap exceptions that do not derive from the <see cref="T:System.Exception" /> class with a <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> object. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" /> class. </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows">
      <summary>Gets or sets a value that indicates whether to wrap exceptions that do not derive from the <see cref="T:System.Exception" /> class with a <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> object.</summary>
      <returns>true if exceptions that do not derive from the <see cref="T:System.Exception" /> class should appear wrapped with a <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> object; otherwise, false.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers">
      <summary>Provides a set of static methods and properties that provide support for compilers. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.EnsureSufficientExecutionStack">
      <summary>Ensures that the remaining stack space is large enough to execute the average .NET Framework function.</summary>
      <exception cref="T:System.InsufficientExecutionStackException">The available stack space is insufficient to execute the average .NET Framework function.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.Equals(System.Object,System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</summary>
      <returns>true if the <paramref name="o1" /> parameter is the same instance as the <paramref name="o2" /> parameter, or if both are null, or if o1.Equals(o2) returns true; otherwise, false.</returns>
      <param name="o1">The first object to compare. </param>
      <param name="o2">The second object to compare. </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.ExecuteCodeWithGuaranteedCleanup(System.Runtime.CompilerServices.RuntimeHelpers.TryCode,System.Runtime.CompilerServices.RuntimeHelpers.CleanupCode,System.Object)">
      <summary>Executes code using a <see cref="T:System.Delegate" /> while using another <see cref="T:System.Delegate" /> to execute additional code in case of an exception.</summary>
      <param name="code">A delegate to the code to try.</param>
      <param name="backoutCode">A delegate to the code to run if an exception occurs.</param>
      <param name="userData">The data to pass to <paramref name="code" /> and <paramref name="backoutCode" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)">
      <summary>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures such as a hash table.</summary>
      <returns>A hash code for the <see cref="T:System.Object" /> identified by the <paramref name="o" /> parameter.</returns>
      <param name="o">An object to retrieve the hash code for. </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)">
      <summary>Boxes a value type.</summary>
      <returns>A boxed copy of <paramref name="obj" /> if it is a value class; otherwise, <paramref name="obj" /> itself.</returns>
      <param name="obj">The value type to be boxed. </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)">
      <summary>Provides a fast way to initialize an array from data that is stored in a module.</summary>
      <param name="array">The array to be initialized. </param>
      <param name="fldHandle">A field handle that specifies the location of the data used to initialize the array. </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData">
      <summary>Gets the offset, in bytes, to the data in the given string.</summary>
      <returns>The byte offset, from the start of the <see cref="T:System.String" /> object to the first character in the string.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions">
      <summary>Designates a body of code as a constrained execution region (CER).</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegionsNoOP">
      <summary>Designates a body of code as a constrained execution region (CER) without performing any probing.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareContractedDelegate(System.Delegate)">
      <summary>Provides a way for applications to dynamically prepare <see cref="T:System.AppDomain" /> event delegates.</summary>
      <param name="d">The event delegate to prepare.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareDelegate(System.Delegate)">
      <summary>Indicates that the specified delegate should be prepared for inclusion in a constrained execution region (CER).</summary>
      <param name="d">The delegate type to prepare.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(System.RuntimeMethodHandle)">
      <summary>Prepares a method for inclusion in a constrained execution region (CER).</summary>
      <param name="method">A handle to the method to prepare.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(System.RuntimeMethodHandle,System.RuntimeTypeHandle[])">
      <summary>Prepares a method for inclusion in a constrained execution region (CER) with the specified instantiation.</summary>
      <param name="method">A handle to the method to prepare.</param>
      <param name="instantiation">The instantiation to pass to the method.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.ProbeForSufficientStack">
      <summary>Probes for a certain amount of stack space to ensure that a stack overflow cannot happen within a subsequent block of code (assuming that your code uses only a finite and moderate amount of stack space). We recommend that you use a constrained execution region (CER) instead of this method.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)">
      <summary>Runs a specified class constructor method.</summary>
      <param name="type">A type handle that specifies the class constructor method to run. </param>
      <exception cref="T:System.TypeInitializationException">The class initializer throws an exception. </exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunModuleConstructor(System.ModuleHandle)">
      <summary>Runs a specified module constructor method.</summary>
      <param name="module">A handle that specifies the module constructor method to run.</param>
      <exception cref="T:System.TypeInitializationException">The module constructor throws an exception. </exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers.CleanupCode">
      <summary>Represents a method to run when an exception occurs.</summary>
      <param name="userData">Data to pass to the delegate.</param>
      <param name="exceptionThrown">true to express that an exception was thrown; otherwise, false.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers.TryCode">
      <summary>Represents a delegate to code that should be run in a try block..</summary>
      <param name="userData">Data to pass to the delegate.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeWrappedException">
      <summary>Wraps an exception that does not derive from the <see cref="T:System.Exception" /> class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException">
      <summary>Gets the object that was wrapped by the <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> object.</summary>
      <returns>The object that was wrapped by the <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> object.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ScopelessEnumAttribute">
      <summary>Indicates that a native enumeration is not qualified by the enumeration type name. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ScopelessEnumAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ScopelessEnumAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.SpecialNameAttribute">
      <summary>Indicates that a type or member is treated in a special way by the runtime or tools.  This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SpecialNameAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.SpecialNameAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.StringFreezingAttribute">
      <summary>Deprecated. Freezes a string literal when creating native images using the Ngen.exe (Native Image Generator). This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StringFreezingAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.StringFreezingAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.SuppressIldasmAttribute">
      <summary>Prevents the Ildasm.exe (MSIL Disassembler) from disassembling an assembly. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SuppressIldasmAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.SuppressIldasmAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute">
      <summary>Specifies a source <see cref="T:System.Type" /> in another assembly. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedFromAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute" /> class. </summary>
      <param name="assemblyFullName">The source <see cref="T:System.Type" /> in another assembly. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFullName" /> is null or empty.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedFromAttribute.AssemblyFullName">
      <summary>Gets the assembly-qualified name of the source type.</summary>
      <returns>The assembly-qualified name of the source type.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedToAttribute">
      <summary>Specifies a destination <see cref="T:System.Type" /> in another assembly. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedToAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.TypeForwardedToAttribute" /> class specifying a destination <see cref="T:System.Type" />. </summary>
      <param name="destination">The destination <see cref="T:System.Type" /> in another assembly.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedToAttribute.Destination">
      <summary>Gets the destination <see cref="T:System.Type" /> in another assembly.</summary>
      <returns>The destination <see cref="T:System.Type" /> in another assembly.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute">
      <summary>Specifies that a type contains an unmanaged array that might potentially overflow. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.UnsafeValueTypeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.Cer">
      <summary>Specifies a method's behavior when called within a constrained execution region.</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Cer.None">
      <summary>The method, type, or assembly has no concept of a CER. It does not take advantage of CER guarantees. This implies the following:</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Cer.MayFail">
      <summary>In the face of exceptional conditions, the method might fail. In this case, the method will report back to the calling method whether it succeeded or failed. The method must have a CER around the method body to ensure that it can report the return value.</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Cer.Success">
      <summary>In the face of exceptional conditions, the method is guaranteed to succeed. You should always construct a CER around the method that is called, even when it is called from within a non-CER region. A method is successful if it accomplishes what is intended. For example, marking <see cref="P:System.Collections.ArrayList.Count" /> with ReliabilityContractAttribute(Cer.Success) implies that when it is run under a CER, it always returns a count of the number of elements in the <see cref="T:System.Collections.ArrayList" /> and it can never leave the internal fields in an undetermined state.</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.Consistency">
      <summary>Specifies a reliability contract.</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.MayCorruptProcess">
      <summary>In the face of exceptional conditions, the CLR makes no guarantees regarding state consistency; that is, the condition might corrupt the process.</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.MayCorruptAppDomain">
      <summary>In the face of exceptional conditions, the common language runtime (CLR) makes no guarantees regarding state consistency in the current application domain.</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance">
      <summary>In the face of exceptional conditions, the method is guaranteed to limit state corruption to the current instance.</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState">
      <summary>In the face of exceptional conditions, the method is guaranteed not to corrupt state. </summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
      <summary>Ensures that all finalization code in derived classes is marked as critical.</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" /> class.</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.Finalize">
      <summary>Releases all the resources used by the <see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" /> class.</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute">
      <summary>Instructs the native image generation service to prepare a method for inclusion in a constrained execution region (CER).</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
      <summary>Defines a contract for reliability between the author of some code, and the developers who have a dependency on that code.</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.#ctor(System.Runtime.ConstrainedExecution.Consistency,System.Runtime.ConstrainedExecution.Cer)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute" /> class with the specified <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> guarantee and <see cref="T:System.Runtime.ConstrainedExecution.Cer" /> value.</summary>
      <param name="consistencyGuarantee">One of the <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> values. </param>
      <param name="cer">One of the <see cref="T:System.Runtime.ConstrainedExecution.Cer" /> values. </param>
    </member>
    <member name="P:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.Cer">
      <summary>Gets the value that determines the behavior of a method, type, or assembly when called under a Constrained Execution Region (CER). </summary>
      <returns>One of the <see cref="T:System.Runtime.ConstrainedExecution.Cer" /> values.</returns>
    </member>
    <member name="P:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.ConsistencyGuarantee">
      <summary>Gets the value of the <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> reliability contract. </summary>
      <returns>One of the <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> values.</returns>
    </member>
    <member name="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs">
      <summary>Provides data for the notification event that is raised when a managed exception first occurs, before the common language runtime begins searching for event handlers.</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs" /> class with a specified exception.</summary>
      <param name="exception">The exception that was just thrown by managed code, and that will be examined by the <see cref="E:System.AppDomain.UnhandledException" /> event. </param>
    </member>
    <member name="P:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.Exception">
      <summary>The managed exception object that corresponds to the exception thrown in managed code.</summary>
      <returns>The newly thrown exception.</returns>
    </member>
    <member name="T:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute">
      <summary>Enables managed code to handle exceptions that indicate a corrupted process state.</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.Hosting.ActivationArguments">
      <summary>Provides data for manifest-based activation of an application. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Runtime.Hosting.ActivationArguments.#ctor(System.ActivationContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Hosting.ActivationArguments" /> class with the specified activation context. </summary>
      <param name="activationData">An object that identifies the manifest-based activation application.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activationData" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.Hosting.ActivationArguments.#ctor(System.ActivationContext,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Hosting.ActivationArguments" /> class with the specified activation context and activation data.</summary>
      <param name="activationContext">An object that identifies the manifest-based activation application.</param>
      <param name="activationData">An array of strings containing host-provided activation data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activationContext" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.Hosting.ActivationArguments.#ctor(System.ApplicationIdentity)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Hosting.ActivationArguments" /> class with the specified application identity.</summary>
      <param name="applicationIdentity">An object that identifies the manifest-based activation application.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="applicationIdentity" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.Hosting.ActivationArguments.#ctor(System.ApplicationIdentity,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Hosting.ActivationArguments" /> class with the specified application identity and activation data.</summary>
      <param name="applicationIdentity">An object that identifies the manifest-based activation application.</param>
      <param name="activationData">An array of strings containing host-provided activation data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="applicationIdentity" /> is null.</exception>
    </member>
    <member name="P:System.Runtime.Hosting.ActivationArguments.ActivationContext">
      <summary>Gets the activation context for manifest-based activation of an application.</summary>
      <returns>An object that identifies a manifest-based activation application.</returns>
    </member>
    <member name="P:System.Runtime.Hosting.ActivationArguments.ActivationData">
      <summary>Gets activation data from the host.</summary>
      <returns>An array of strings containing host-provided activation data.</returns>
    </member>
    <member name="P:System.Runtime.Hosting.ActivationArguments.ApplicationIdentity">
      <summary>Gets the application identity for a manifest-activated application.</summary>
      <returns>An object that identifies an application for manifest-based activation.</returns>
    </member>
    <member name="M:System.Runtime.Hosting.ActivationArguments.Clone">
      <summary>Produces a copy of the current <see cref="T:System.Runtime.Hosting.ActivationArguments" /> object.</summary>
      <returns>A copy of the current object.</returns>
    </member>
    <member name="T:System.Runtime.Hosting.ApplicationActivator">
      <summary>Provides the base class for the activation of manifest-based assemblies. </summary>
    </member>
    <member name="M:System.Runtime.Hosting.ApplicationActivator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Hosting.ApplicationActivator" /> class. </summary>
    </member>
    <member name="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)">
      <summary>Creates an instance of the application to be activated, using the specified activation context. </summary>
      <returns>An <see cref="T:System.Runtime.Remoting.ObjectHandle" /> that is a wrapper for the return value of the application execution. The return value must be unwrapped to access the real object.  </returns>
      <param name="activationContext">An <see cref="T:System.ActivationContext" /> that identifies the application to activate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activationContext" /> is null. </exception>
    </member>
    <member name="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])">
      <summary>Creates an instance of the application to be activated, using the specified activation context  and custom activation data.  </summary>
      <returns>An <see cref="T:System.Runtime.Remoting.ObjectHandle" /> that is a wrapper for the return value of the application execution. The return value must be unwrapped to access the real object.</returns>
      <param name="activationContext">An <see cref="T:System.ActivationContext" /> that identifies the application to activate.</param>
      <param name="activationCustomData">Custom activation data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activationContext" /> is null. </exception>
    </member>
    <member name="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)">
      <summary>Creates an instance of an application using the specified <see cref="T:System.AppDomainSetup" />  object.</summary>
      <returns>An <see cref="T:System.Runtime.Remoting.ObjectHandle" /> that is a wrapper for the return value of the application execution. The return value must be unwrapped to access the real object. </returns>
      <param name="adSetup">An <see cref="T:System.AppDomainSetup" /> object whose <see cref="P:System.AppDomainSetup.ActivationArguments" /> property identifies the application to activate.</param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.AppDomainSetup.ActivationArguments" /> property of <paramref name="adSetup " />is null. </exception>
      <exception cref="T:System.Security.Policy.PolicyException">The application instance failed to execute because the policy settings on the current application domain do not provide permission for this application to run.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices._Activator">
      <summary>Exposes the <see cref="T:System.Activator" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._Activator.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Activator.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Activator.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Activator.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier for the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._Assembly">
      <summary>Exposes the public members of the <see cref="T:System.Reflection.Assembly" /> class to unmanaged code.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices._Assembly.CodeBase">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.Assembly.CodeBase" /> property.</summary>
      <returns>The location of the assembly as specified originally.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.CreateInstance(System.String)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.CreateInstance(System.String)" /> method.</summary>
      <returns>An instance of <see cref="T:System.Object" /> representing the type, with culture, arguments, binder, and activation attributes set to null, and <see cref="T:System.Reflection.BindingFlags" /> set to Public or Instance, or null if <paramref name="typeName" /> is not found.</returns>
      <param name="typeName">The <see cref="P:System.Type.FullName" /> of the type to locate.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.CreateInstance(System.String,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)" /> method.</summary>
      <returns>An instance of <see cref="T:System.Object" /> representing the type, with culture, arguments, binder, and activation attributes set to null, and <see cref="T:System.Reflection.BindingFlags" /> set to Public or Instance, or null if <paramref name="typeName" /> is not found.</returns>
      <param name="typeName">The <see cref="P:System.Type.FullName" /> of the type to locate. </param>
      <param name="ignoreCase">true to ignore the case of the type name; otherwise, false. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" /> method.</summary>
      <returns>An instance of Object representing the type and matching the specified criteria, or null if <paramref name="typeName" /> is not found.</returns>
      <param name="typeName">The <see cref="P:System.Type.FullName" /> of the type to locate. </param>
      <param name="ignoreCase">true to ignore the case of the type name; otherwise, false. </param>
      <param name="bindingAttr">A bitmask that affects how the search is conducted. The value is a combination of bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="args">An array of type Object containing the arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the default constructor is desired, <paramref name="args" /> must be an empty array or null. </param>
      <param name="culture">An instance of CultureInfo used to govern the coercion of types. If this is null, the CultureInfo for the current thread is used. (This is necessary to convert a String that represents 1000 to a Double value, for example, since 1000 is represented differently by different cultures.) </param>
      <param name="activationAttributes">An array of type Object containing one or more activation attributes that can participate in the activation. An example of an activation attribute is: URLAttribute(http://hostname/appname/objectURI) </param>
    </member>
    <member name="P:System.Runtime.InteropServices._Assembly.EntryPoint">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.Assembly.EntryPoint" /> property.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object that represents the entry point of this assembly. If no entry point is found (for example, the assembly is a DLL), null is returned.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.Equals(System.Object)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.Equals(System.Object)" /> method.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices._Assembly.EscapedCodeBase">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.Assembly.EscapedCodeBase" /> property.</summary>
      <returns>A Uniform Resource Identifier (URI) with escape characters.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Assembly.Evidence">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.Assembly.Evidence" /> property.</summary>
      <returns>An <see cref="T:System.Security.Policy.Evidence" /> object for this assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Assembly.FullName">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.Assembly.FullName" /> property.</summary>
      <returns>The display name of the assembly.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetCustomAttributes(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)" /> method.</summary>
      <returns>An array of type Object containing the custom attributes for this assembly.</returns>
      <param name="inherit">This argument is ignored for objects of type <see cref="T:System.Reflection.Assembly" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)" /> method.</summary>
      <returns>An array of type <see cref="T:System.Object" /> containing the custom attributes for this assembly as specified by <paramref name="attributeType" />.</returns>
      <param name="attributeType">The <see cref="T:System.Type" /> for which the custom attributes are to be returned. </param>
      <param name="inherit">This argument is ignored for objects of type <see cref="T:System.Reflection.Assembly" />. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetExportedTypes">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetExportedTypes" /> property.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that represent the types defined in this assembly that are visible outside the assembly.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetFile(System.String)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetFile(System.String)" /> method.</summary>
      <returns>A <see cref="T:System.IO.FileStream" /> for the specified file, or null if the file is not found.</returns>
      <param name="name">The name of the specified file. Do not include the path to the file.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetFiles">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetFiles" /> method.</summary>
      <returns>An array of <see cref="T:System.IO.FileStream" /> objects.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetFiles(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetFiles(System.Boolean)" /> method.</summary>
      <returns>An array of <see cref="T:System.IO.FileStream" /> objects.</returns>
      <param name="getResourceModules">true to include resource modules; otherwise, false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetHashCode">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.GetHashCode" /> method.</summary>
      <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetLoadedModules">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetLoadedModules" /> method.</summary>
      <returns>An array of modules.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetLoadedModules(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetLoadedModules(System.Boolean)" /> method.</summary>
      <returns>An array of modules.</returns>
      <param name="getResourceModules">true to include resource modules; otherwise, false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetManifestResourceInfo(System.String)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.ManifestResourceInfo" /> object populated with information about the resource's topology, or null if the resource is not found.</returns>
      <param name="resourceName">The case-sensitive name of the resource.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetManifestResourceNames">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetManifestResourceNames" /> method.</summary>
      <returns>An array of type String containing the names of all the resources.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetManifestResourceStream(System.String)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" /> method.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> representing this manifest resource.</returns>
      <param name="name">The case-sensitive name of the manifest resource being requested.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetManifestResourceStream(System.Type,System.String)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)" /> method.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> representing this manifest resource.</returns>
      <param name="type">The type whose namespace is used to scope the manifest resource name. </param>
      <param name="name">The case-sensitive name of the manifest resource being requested. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetModule(System.String)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetModule(System.String)" /> method.</summary>
      <returns>The module being requested, or null if the module is not found.</returns>
      <param name="name">The name of the module being requested.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetModules">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetModules" /> method.</summary>
      <returns>An array of modules.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetModules(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetModules(System.Boolean)" /> method.</summary>
      <returns>An array of modules.</returns>
      <param name="getResourceModules">true to include resource modules; otherwise, false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetName">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetName" /> method.</summary>
      <returns>An <see cref="T:System.Reflection.AssemblyName" /> for this assembly.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetName(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetName(System.Boolean)" /> method.</summary>
      <returns>An <see cref="T:System.Reflection.AssemblyName" /> for this assembly.</returns>
      <param name="copiedName">true to set the <see cref="P:System.Reflection.Assembly.CodeBase" /> to the location of the assembly after it was shadow copied; false to set <see cref="P:System.Reflection.Assembly.CodeBase" /> to the original location.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> method.</summary>
      <param name="info">The object to be populated with serialization information. </param>
      <param name="context">The destination context of the serialization. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetReferencedAssemblies">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetReferencedAssemblies" /> method.</summary>
      <returns>An array of type <see cref="T:System.Reflection.AssemblyName" /> containing all the assemblies referenced by this assembly.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)" /> method.</summary>
      <returns>The specified satellite assembly.</returns>
      <param name="culture">The specified culture.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)" /> method.</summary>
      <returns>The specified satellite assembly.</returns>
      <param name="culture">The specified culture. </param>
      <param name="version">The version of the satellite assembly. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetType">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.GetType" /> method.</summary>
      <returns>A <see cref="T:System.Type" /> object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetType(System.String)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetType(System.String)" /> method.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the specified class, or null if the class is not found.</returns>
      <param name="name">The full name of the type.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetType(System.String,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetType(System.String,System.Boolean)" /> method.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the specified class.</returns>
      <param name="name">The full name of the type. </param>
      <param name="throwOnError">true to throw an exception if the type is not found; false to return null. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)" /> method.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the specified class.</returns>
      <param name="name">The full name of the type. </param>
      <param name="throwOnError">true to throw an exception if the type is not found; false to return null. </param>
      <param name="ignoreCase">true to ignore the case of the type name; otherwise, false. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.GetTypes">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetTypes" /> method.</summary>
      <returns>An array of type <see cref="T:System.Type" /> containing objects for all the types defined in this assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Assembly.GlobalAssemblyCache">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.Assembly.GlobalAssemblyCache" /> property.</summary>
      <returns>true if the assembly was loaded from the global assembly cache; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.IsDefined(System.Type,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)" /> method.</summary>
      <returns>true if a custom attribute identified by the specified <see cref="T:System.Type" /> is defined; otherwise, false.</returns>
      <param name="attributeType">The <see cref="T:System.Type" /> of the custom attribute to be checked for this assembly. </param>
      <param name="inherit">This argument is ignored for objects of this type. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.LoadModule(System.String,System.Byte[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[])" /> method.</summary>
      <returns>The loaded Module.</returns>
      <param name="moduleName">Name of the module. Must correspond to a file name in this assembly's manifest. </param>
      <param name="rawModule">A byte array that is a COFF-based image containing an emitted module, or a resource. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.LoadModule(System.String,System.Byte[],System.Byte[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])" /> method.</summary>
      <returns>The loaded module.</returns>
      <param name="moduleName">Name of the module. Must correspond to a file name in this assembly's manifest. </param>
      <param name="rawModule">A byte array that is a COFF-based image containing an emitted module, or a resource. </param>
      <param name="rawSymbolStore">A byte array containing the raw bytes representing the symbols for the module. Must be null if this is a resource file. </param>
    </member>
    <member name="P:System.Runtime.InteropServices._Assembly.Location">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.Assembly.Location" /> property.</summary>
      <returns>The location of the loaded file that contains the manifest. If the loaded file was shadow-copied, the location is that of the file after being shadow-copied. If the assembly is loaded from a byte array, such as when using the <see cref="M:System.Reflection.Assembly.Load(System.Byte[])" /> method overload, the value returned is an empty string ("").</returns>
    </member>
    <member name="E:System.Runtime.InteropServices._Assembly.ModuleResolve">
      <summary>Provides COM objects with version-independent access to the <see cref="E:System.Reflection.Assembly.ModuleResolve" /> event.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._Assembly.ToString">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.ToString" /> method.</summary>
      <returns>The full name of the assembly, or the class name if the full name of the assembly cannot be determined.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._AssemblyBuilder">
      <summary>Exposes the <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._AssemblyBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._AssemblyName">
      <summary>Exposes the <see cref="T:System.Reflection.AssemblyName" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._AssemblyName.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._AssemblyName.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._AssemblyName.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._AssemblyName.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._Attribute">
      <summary>Exposes the <see cref="T:System.Attribute" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Attribute.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._ConstructorBuilder">
      <summary>Exposes the <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._ConstructorInfo">
      <summary>Exposes the public members of the <see cref="T:System.Reflection.ConstructorInfo" /> class to unmanaged code.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.Attributes">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.Attributes" /> property.</summary>
      <returns>One of the <see cref="T:System.Reflection.MethodAttributes" /> values.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.CallingConvention">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.CallingConvention" /> property.</summary>
      <returns>The <see cref="T:System.Reflection.CallingConventions" /> for this method.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.DeclaringType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.DeclaringType" /> property.</summary>
      <returns>The <see cref="T:System.Type" /> object for the class that declares this member.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.Equals(System.Object)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.Equals(System.Object)" /> method.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.GetCustomAttributes(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> method.</summary>
      <returns>An array that contains all the custom attributes, or an array with zero elements if no attributes are defined.</returns>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)" /> method.</summary>
      <returns>An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</returns>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.GetHashCode">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.GetHashCode" /> method.</summary>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array that receives the IDs corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.GetMethodImplementationFlags">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodBase.GetMethodImplementationFlags" /> member.</summary>
      <returns>The <see cref="T:System.Reflection.MethodImplAttributes" /> flags.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.GetParameters">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodBase.GetParameters" /> method.</summary>
      <returns>An array of type <see cref="T:System.Reflection.ParameterInfo" /> containing information that matches the signature of the method (or constructor) reflected by this instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.GetType">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.GetType" /> method.</summary>
      <returns>A <see cref="T:System.Type" /> object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.Invoke_2(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> method.</summary>
      <returns>An instance of the class associated with the constructor.</returns>
      <param name="obj">The instance that created this method.</param>
      <param name="invokeAttr">One of the BindingFlags values that specifies the type of binding.</param>
      <param name="binder">A Binder that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If <paramref name="binder" /> is null, then Binder.DefaultBinding is used.</param>
      <param name="parameters">An array of type Object used to match the number, order, and type of the parameters for this constructor, under the constraints of <paramref name="binder" />. If this constructor does not require parameters, pass an array with zero elements, as in Object[] parameters = new Object[0]. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.Invoke_3(System.Object,System.Object[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> method.</summary>
      <returns>An instance of the class associated with the constructor.</returns>
      <param name="obj">The instance that created this method. </param>
      <param name="parameters">An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, <paramref name="parameters" /> should be null.If the method or constructor represented by this instance takes a ref parameter (ByRef in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.Invoke_4(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> method.</summary>
      <returns>An instance of the class associated with the constructor.</returns>
      <param name="invokeAttr">One of the BindingFlags values that specifies the type of binding. </param>
      <param name="binder">A Binder that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If <paramref name="binder" /> is null, then Binder.DefaultBinding is used. </param>
      <param name="parameters">An array of type Object used to match the number, order, and type of the parameters for this constructor, under the constraints of <paramref name="binder" />. If this constructor does not require parameters, pass an array with zero elements, as in Object[] parameters = new Object[0]. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type. </param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.Invoke_5(System.Object[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])" /> method.</summary>
      <returns>An instance of the class associated with the constructor.</returns>
      <param name="parameters">An array of values that matches the number, order, and type (under the constraints of the default binder) of the parameters for this constructor. If this constructor takes no parameters, then use either an array with zero elements or null, as in Object[] parameters = new Object[0]. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type.</param>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsAbstract">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsAbstract" /> property.</summary>
      <returns>true if the method is abstract; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsAssembly">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsAssembly" /> property.</summary>
      <returns>true if this method can be called by other classes in the same assembly; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsConstructor">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsConstructor" /> property.</summary>
      <returns>true if this method is a constructor; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> member.</summary>
      <returns>true if one or more instances of <paramref name="attributeType" /> is applied to this member; otherwise false.</returns>
      <param name="attributeType">The Type object to which the custom attributes are applied. </param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. </param>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsFamily">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsFamily" /> property.</summary>
      <returns>true if access to the class is restricted to members of the class itself and to members of its derived classes; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsFamilyAndAssembly">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsFamilyAndAssembly" /> property.</summary>
      <returns>true if access to this method is restricted to members of the class itself and to members of derived classes that are in the same assembly; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsFamilyOrAssembly">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsFamilyOrAssembly" /> property.</summary>
      <returns>true if access to this method is restricted to members of the class itself, members of derived classes wherever they are, and members of other classes in the same assembly; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsFinal">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsFinal" /> property.</summary>
      <returns>true if this method is final; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsHideBySig">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsHideBySig" /> property.</summary>
      <returns>true if the member is hidden by signature; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsPrivate">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsPrivate" /> property.</summary>
      <returns>true if access to this method is restricted to other members of the class itself; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsPublic">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsPublic" /> property.</summary>
      <returns>true if this method is public; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsSpecialName">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsSpecialName" /> property.</summary>
      <returns>true if this method has a special name; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsStatic">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsStatic" /> property.</summary>
      <returns>true if this method is static; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.IsVirtual">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsVirtual" /> property.</summary>
      <returns>true if this method is virtual; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.MemberType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.ConstructorInfo.MemberType" /> property.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating the type of member.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.MethodHandle">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.MethodHandle" /> property.</summary>
      <returns>A <see cref="T:System.RuntimeMethodHandle" /> object.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.Name">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.Name" /> property.</summary>
      <returns>A <see cref="T:System.String" /> containing the name of this member.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._ConstructorInfo.ReflectedType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.ReflectedType" /> property.</summary>
      <returns>The <see cref="T:System.Type" /> object through which this <see cref="T:System.Reflection.MemberInfo" /> object was obtained.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._ConstructorInfo.ToString">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.ToString" /> method.</summary>
      <returns>A string that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._CustomAttributeBuilder">
      <summary>Exposes the <see cref="T:System.Reflection.Emit.CustomAttributeBuilder" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._CustomAttributeBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._CustomAttributeBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._CustomAttributeBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._CustomAttributeBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._EnumBuilder">
      <summary>Exposes the <see cref="T:System.Reflection.Emit.EnumBuilder" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An  array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EnumBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EnumBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._EventBuilder">
      <summary>Exposes the <see cref="T:System.Reflection.Emit.EventBuilder" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._EventBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._EventInfo">
      <summary>Exposes the public members of the <see cref="T:System.Reflection.EventInfo" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method.</summary>
      <param name="target">The event source. </param>
      <param name="handler">A method or methods to be invoked when the event is raised by the target. </param>
    </member>
    <member name="P:System.Runtime.InteropServices._EventInfo.Attributes">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.EventInfo.Attributes" /> property.</summary>
      <returns>The read-only attributes for this event.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._EventInfo.DeclaringType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.DeclaringType" /> property.</summary>
      <returns>The Type object for the class that declares this member.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.Equals(System.Object)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.Equals(System.Object)" /> method.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices._EventInfo.EventHandlerType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.EventInfo.EventHandlerType" /> property.</summary>
      <returns>A read-only <see cref="T:System.Type" /> object representing the delegate event handler.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetAddMethod">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.EventInfo.GetAddMethod" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event-handler delegate to the event source.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetAddMethod(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event-handler delegate to the event source.</returns>
      <param name="nonPublic">true to return non-public methods; otherwise, false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetCustomAttributes(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> method.</summary>
      <returns>An array that contains all the custom attributes, or an array with zero (0) elements if no attributes are defined.</returns>
      <param name="inherit">true to search a member's inheritance chain to find the attributes; otherwise, false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> method.</summary>
      <returns>An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</returns>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetHashCode">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.GetHashCode" /> method.</summary>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetRaiseMethod">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.EventInfo.GetRaiseMethod" /> method.</summary>
      <returns>The method that is called when the event is raised.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetRaiseMethod(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" /> method.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> object that was called when the event was raised.</returns>
      <param name="nonPublic">true to return non-public methods; otherwise, false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetRemoveMethod">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.EventInfo.GetRemoveMethod" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event-handler delegate from the event source.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetRemoveMethod(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event-handler delegate from the event source.</returns>
      <param name="nonPublic">true to return non-public methods; otherwise, false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetType">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.GetType" /> method.</summary>
      <returns>A <see cref="T:System.Type" /> object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier for the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> method.</summary>
      <returns>true if one or more instance of the <paramref name="attributeType" /> parameter is applied to this member; otherwise, false.</returns>
      <param name="attributeType">The Type object to which the custom attributes are applied. </param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. </param>
    </member>
    <member name="P:System.Runtime.InteropServices._EventInfo.IsMulticast">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.EventInfo.IsMulticast" /> property.</summary>
      <returns>true if the delegate is an instance of a multicast delegate; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._EventInfo.IsSpecialName">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.EventInfo.IsSpecialName" /> property.</summary>
      <returns>true if this event has a special name; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._EventInfo.MemberType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.EventInfo.MemberType" /> property.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._EventInfo.Name">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.Name" /> property.</summary>
      <returns>A <see cref="T:System.String" /> object containing the name of this member.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._EventInfo.ReflectedType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.ReflectedType" /> property.</summary>
      <returns>The <see cref="T:System.Type" /> object that was used to obtain this object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)" /> method.</summary>
      <param name="target">The event source. </param>
      <param name="handler">The delegate to be disassociated from the events raised by target. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._EventInfo.ToString">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.ToString" /> method.</summary>
      <returns>A string that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._Exception">
      <summary>Exposes the public members of the <see cref="T:System.Exception" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._Exception.Equals(System.Object)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.Equals(System.Object)" /> method.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Exception.GetBaseException">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Exception.GetBaseException" /> method.</summary>
      <returns>The first exception thrown in a chain of exceptions. If the <see cref="P:System.Exception.InnerException" /> property of the current exception is a null reference (Nothing in Visual Basic), this property returns the current exception.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Exception.GetHashCode">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.GetHashCode" /> method.</summary>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> method</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Exception.GetType">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Exception.GetType" /> method.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the exact runtime type of the current instance.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Exception.HelpLink">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Exception.HelpLink" /> property.</summary>
      <returns>The Uniform Resource Name (URN) or Uniform Resource Locator (URL) to a help file.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Exception.InnerException">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Exception.InnerException" /> property.</summary>
      <returns>An instance of <see cref="T:System.Exception" /> that describes the error that caused the current exception. The <see cref="P:System.Exception.InnerException" /> property returns the same value that was passed to the constructor, or a null reference (Nothing in Visual Basic) if the inner exception value was not supplied to the constructor. This property is read-only.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Exception.Message">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Exception.Message" /> property.</summary>
      <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Exception.Source">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Exception.Source" /> property.</summary>
      <returns>The name of the application or the object that causes the error.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Exception.StackTrace">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Exception.StackTrace" /> property.</summary>
      <returns>A string that describes the contents of the call stack, with the most recent method call appearing first.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Exception.TargetSite">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Exception.TargetSite" /> property.</summary>
      <returns>The <see cref="T:System.Reflection.MethodBase" /> object that threw the current exception.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Exception.ToString">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Exception.ToString" /> method.</summary>
      <returns>A string that represents the current <see cref="T:System.Exception" /> object.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._FieldBuilder">
      <summary>Exposes the <see cref="T:System.Reflection.Emit.FieldBuilder" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._FieldInfo">
      <summary>Exposes the public members of the <see cref="T:System.Reflection.FieldInfo" /> class to unmanaged code.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.Attributes">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.FieldInfo.Attributes" /> property. </summary>
      <returns>The <see cref="T:System.Reflection.FieldAttributes" /> for this field.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.DeclaringType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.DeclaringType" /> property. </summary>
      <returns>The <see cref="T:System.Type" /> object for the class that declares this member.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.Equals(System.Object)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.Equals(System.Object)" /> method.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.FieldHandle">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.FieldInfo.FieldHandle" /> property.</summary>
      <returns>A handle to the internal metadata representation of a field.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.FieldType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.FieldInfo.FieldType" /> property.</summary>
      <returns>The type of this field object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.GetCustomAttributes(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> method.</summary>
      <returns>An array that contains all the custom attributes, or an array with zero elements if no attributes are defined.</returns>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> method.</summary>
      <returns>An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</returns>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.GetHashCode">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.GetHashCode" /> method.</summary>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array that receives the IDs corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.GetType">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.GetType" /> method.</summary>
      <returns>A <see cref="T:System.Type" /> object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.GetValue(System.Object)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" /> method.</summary>
      <returns>An object containing the value of the field reflected by this instance.</returns>
      <param name="obj">The object whose field value will be returned.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.GetValueDirect(System.TypedReference)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)" /> method.</summary>
      <returns>An <see cref="T:System.Object" /> containing a field value.</returns>
      <param name="obj">A <see cref="T:System.TypedReference" /> structure that encapsulates a managed pointer to a location and a runtime representation of the type that might be stored at that location.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsAssembly">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.FieldInfo.IsAssembly" /> property.</summary>
      <returns>true if the field has the Assembly attribute set; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> method.</summary>
      <returns>true if one or more instance of <paramref name="attributeType" /> is applied to this member; otherwise, false.</returns>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied. </param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. </param>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsFamily">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.FieldInfo.IsFamily" /> property.</summary>
      <returns>true if the field has the Family attribute set; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsFamilyAndAssembly">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.FieldInfo.IsFamilyAndAssembly" /> property.</summary>
      <returns>true if the field has the FamANDAssem attribute set; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsFamilyOrAssembly">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.FieldInfo.IsFamilyOrAssembly" /> property.</summary>
      <returns>true if the field has the FamORAssem attribute set; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsInitOnly">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.FieldInfo.IsInitOnly" /> property.</summary>
      <returns>true if the field has the InitOnly attribute set; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsLiteral">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.FieldInfo.IsLiteral" /> property.</summary>
      <returns>true if the field has the Literal attribute set; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsNotSerialized">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.FieldInfo.IsNotSerialized" /> property.</summary>
      <returns>true if the field has the NotSerialized attribute set; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsPinvokeImpl">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.FieldInfo.IsPinvokeImpl" /> property.</summary>
      <returns>true if the PinvokeImpl attribute is set in <see cref="T:System.Reflection.FieldAttributes" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsPrivate">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.FieldInfo.IsPrivate" /> property.</summary>
      <returns>true if the field is private; otherwise; false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsPublic">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.FieldInfo.IsPublic" /> property.</summary>
      <returns>true if this field is public; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsSpecialName">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.FieldInfo.IsSpecialName" /> property.</summary>
      <returns>true if the SpecialName attribute is set in <see cref="T:System.Reflection.FieldAttributes" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.IsStatic">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.FieldInfo.IsStatic" /> property.</summary>
      <returns>true if this field is static; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.MemberType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.FieldInfo.MemberType" /> property.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a field.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.Name">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.Name" /> property.</summary>
      <returns>A <see cref="T:System.String" /> containing the name of this member.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._FieldInfo.ReflectedType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.ReflectedType" /> property.</summary>
      <returns>The <see cref="T:System.Type" /> object through which this object was obtained.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.SetValue(System.Object,System.Object)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)" /> method.</summary>
      <param name="obj">The object whose field value will be set.</param>
      <param name="value">The value to assign to the field. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> method.</summary>
      <param name="obj">The object whose field value will be set. </param>
      <param name="value">The value to assign to the field. </param>
      <param name="invokeAttr">A field of <see cref="T:System.Reflection.Binder" /> that specifies the type of binding that is desired (for example, Binder.CreateInstance or Binder.ExactBinding). </param>
      <param name="binder">A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection. If <paramref name="binder" /> is null, then Binder.DefaultBinding is used. </param>
      <param name="culture">The software preferences of a particular culture. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)" /> method.</summary>
      <param name="obj">The object whose field value will be set.</param>
      <param name="value">The value to assign to the field.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._FieldInfo.ToString">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.ToString" /> method.</summary>
      <returns>A string that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._ILGenerator">
      <summary>Exposes the <see cref="T:System.Reflection.Emit.ILGenerator" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">A count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ILGenerator.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ILGenerator.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._LocalBuilder">
      <summary>Exposes the <see cref="T:System.Reflection.Emit.LocalBuilder" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._LocalBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._LocalBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._LocalBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._LocalBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._MemberInfo">
      <summary>Exposes the public members of the <see cref="T:System.Reflection.MemberInfo" /> class to unmanaged code.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices._MemberInfo.DeclaringType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.DeclaringType" /> property.</summary>
      <returns>The <see cref="T:System.Type" /> object for the class that declares this member.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.Equals(System.Object)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.Equals(System.Object)" /> method.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> method.</summary>
      <returns>An array that contains all the custom attributes, or an array with zero (0) elements if no attributes are defined.</returns>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)" /> method.</summary>
      <returns>An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</returns>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.GetHashCode">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.GetHashCode" /> method.</summary>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An  array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.GetType">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetType" /> method.</summary>
      <returns>A <see cref="T:System.Type" /> object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier for the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> method.</summary>
      <returns>true if one or more instance of the <paramref name="attributeType" /> parameter is applied to this member; otherwise, false.</returns>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied. </param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. </param>
    </member>
    <member name="P:System.Runtime.InteropServices._MemberInfo.MemberType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.MemberType" /> property.</summary>
      <returns>One of the <see cref="T:System.Reflection.MemberTypes" /> values indicating the type of member.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MemberInfo.Name">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.Name" /> property.</summary>
      <returns>A <see cref="T:System.String" /> object containing the name of this member.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MemberInfo.ReflectedType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.ReflectedType" /> property.</summary>
      <returns>The <see cref="T:System.Type" /> object that was used to obtain this <see cref="T:System.Reflection.MemberInfo" /> object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MemberInfo.ToString">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.ToString" /> method.</summary>
      <returns>A string that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._MethodBase">
      <summary>Exposes the public members of the <see cref="T:System.Reflection.MethodBase" /> class to unmanaged code.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.Attributes">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.Attributes" /> property.</summary>
      <returns>One of the <see cref="T:System.Reflection.MethodAttributes" /> values.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.CallingConvention">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.CallingConvention" /> property.</summary>
      <returns>One of the <see cref="T:System.Reflection.CallingConventions" /> values.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.DeclaringType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.DeclaringType" /> property.</summary>
      <returns>The Type object for the class that declares this member.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.Equals(System.Object)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.Equals(System.Object)" /> method.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.GetCustomAttributes(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> method.</summary>
      <returns>An array that contains all the custom attributes, or an array with zero (0) elements if no attributes are defined.</returns>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> method.</summary>
      <returns>An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</returns>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.GetHashCode">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.GetHashCode" /> method.</summary>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.GetMethodImplementationFlags">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodBase.GetMethodImplementationFlags" /> method.</summary>
      <returns>One of the <see cref="T:System.Reflection.MethodImplAttributes" /> values.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.GetParameters">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodBase.GetParameters" /> method.</summary>
      <returns>An array of type <see cref="T:System.Reflection.ParameterInfo" /> containing information that matches the signature of the method (or constructor) reflected by this instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.GetType">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetType" /> method.</summary>
      <returns>A <see cref="T:System.Type" /> object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.Invoke(System.Object,System.Object[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> method.</summary>
      <returns>An instance of the class associated with the constructor.</returns>
      <param name="obj">The instance that created this method. </param>
      <param name="parameters">An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, <paramref name="parameters" /> should be null.If the method or constructor represented by this instance takes a ref parameter (ByRef in Visual Basic), no special attribute is required for that parameter to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference type elements, this value is null. For value type elements, this value is 0, 0.0, or false, depending on the specific element type. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> method.</summary>
      <returns>An instance of the class associated with the constructor.</returns>
      <param name="obj">The instance that created this method.</param>
      <param name="invokeAttr">One of the BindingFlags values that specifies the type of binding.</param>
      <param name="binder">A Binder that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If <paramref name="binder" /> is null, then Binder.DefaultBinding is used.</param>
      <param name="parameters">An array of type Object used to match the number, order, and type of the parameters for this constructor, under the constraints of <paramref name="binder" />. If this constructor does not require parameters, pass an array with zero elements, as in Object[] parameters = new Object[0]. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference type elements, this value is null. For value type elements, this value is 0, 0.0, or false, depending on the specific element type.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier for the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsAbstract">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsAbstract" /> property.</summary>
      <returns>true if the method is abstract; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsAssembly">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsAssembly" /> property.</summary>
      <returns>true if this method can be called by other classes in the same assembly; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsConstructor">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsConstructor" /> property.</summary>
      <returns>true if this method is a constructor; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.IsDefined(System.Type,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> method.</summary>
      <returns>true if one or more instance of the <paramref name="attributeType" /> parameter is applied to this member; otherwise, false.</returns>
      <param name="attributeType">The Type object to which the custom attributes are applied. </param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. </param>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsFamily">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsFamily" /> property.</summary>
      <returns>true if access to the class is restricted to members of the class itself and to members of its derived classes; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsFamilyAndAssembly" /> property.</summary>
      <returns>true if access to this method is restricted to members of the class itself and to members of derived classes that are in the same assembly; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsFamilyOrAssembly" /> property.</summary>
      <returns>true if access to this method is restricted to members of the class itself, members of derived classes wherever they are, and members of other classes in the same assembly; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsFinal">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsFinal" /> property.</summary>
      <returns>true if this method is final; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsHideBySig">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsHideBySig" /> property.</summary>
      <returns>true if the member is hidden by signature; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsPrivate">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsPrivate" /> property.</summary>
      <returns>true if access to this method is restricted to other members of the class itself; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsPublic">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsPublic" /> property.</summary>
      <returns>true if this method is public; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsSpecialName">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsSpecialName" /> property.</summary>
      <returns>true if this method has a special name; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsStatic">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsStatic" /> property.</summary>
      <returns>true if this method is static; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.IsVirtual">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsVirtual" /> property.</summary>
      <returns>true if this method is virtual; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.MemberType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.MemberType" /> property.</summary>
      <returns>One of the <see cref="T:System.Reflection.MemberTypes" /> values indicating the type of member.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.MethodHandle">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.MethodHandle" /> property.</summary>
      <returns>A <see cref="T:System.RuntimeMethodHandle" /> object.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.Name">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.Name" /> property.</summary>
      <returns>A <see cref="T:System.String" /> object containing the name of this member.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodBase.ReflectedType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.ReflectedType" /> property.</summary>
      <returns>The Type object that was used to obtain this MemberInfo object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBase.ToString">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.ToString" /> method.</summary>
      <returns>A string that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._MethodBuilder">
      <summary>Exposes the <see cref="T:System.Reflection.Emit.MethodBuilder" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._MethodInfo">
      <summary>Exposes the public members of the <see cref="T:System.Reflection.MethodInfo" /> class to unmanaged code.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.Attributes">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.Attributes" /> property.</summary>
      <returns>One of the <see cref="T:System.Reflection.MethodAttributes" /> values.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.CallingConvention">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.CallingConvention" /> property.</summary>
      <returns>One of the <see cref="T:System.Reflection.CallingConventions" /> values.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.DeclaringType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.DeclaringType" /> property.</summary>
      <returns>The Type object for the class that declares this member.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.Equals(System.Object)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.Equals(System.Object)" /> method.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetBaseDefinition">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodInfo.GetBaseDefinition" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object for the first implementation of this method.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetCustomAttributes(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> method.</summary>
      <returns>An array that contains all the custom attributes, or an array with zero (0) elements if no attributes are defined.</returns>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> method.</summary>
      <returns>An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</returns>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetHashCode">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.GetHashCode" /> method.</summary>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetMethodImplementationFlags">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodBase.GetMethodImplementationFlags" /> method.</summary>
      <returns>One of the <see cref="T:System.Reflection.MethodImplAttributes" /> values.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetParameters">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodBase.GetParameters" /> method.</summary>
      <returns>An array of type <see cref="T:System.Reflection.ParameterInfo" /> containing information that matches the signature of the method (or constructor) reflected by this instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetType">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetType" /> method.</summary>
      <returns>A <see cref="T:System.Type" /> object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.Invoke(System.Object,System.Object[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> method.</summary>
      <returns>An instance of the class associated with the constructor.</returns>
      <param name="obj">The instance that created this method. </param>
      <param name="parameters">An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, <paramref name="parameters" /> should be null.If the method or constructor represented by this instance takes a ref parameter (ByRef in Visual Basic), no special attribute is required for that parameter to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference type elements, this value is null. For value type elements, this value is 0, 0.0, or false, depending on the specific element type. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> method.</summary>
      <returns>An instance of the class associated with the constructor.</returns>
      <param name="obj">The instance that created this method.</param>
      <param name="invokeAttr">One of the BindingFlags values that specifies the type of binding.</param>
      <param name="binder">A Binder that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If <paramref name="binder" /> is null, then Binder.DefaultBinding is used.</param>
      <param name="parameters">An array of type Object used to match the number, order, and type of the parameters for this constructor, under the constraints of <paramref name="binder" />. If this constructor does not require parameters, pass an array with zero elements, as in Object[] parameters = new Object[0]. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference type elements, this value is null. For value type elements, this value is 0, 0.0, or false, depending on the specific element type.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier for the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsAbstract">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsAbstract" /> property.</summary>
      <returns>true if the method is abstract; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsAssembly">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsAssembly" /> property.</summary>
      <returns>true if this method can be called by other classes in the same assembly; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsConstructor">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsConstructor" /> property.</summary>
      <returns>true if this method is a constructor; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> method.</summary>
      <returns>true if one or more instance of the <paramref name="attributeType" /> parameter is applied to this member; otherwise, false.</returns>
      <param name="attributeType">The Type object to which the custom attributes are applied. </param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. </param>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsFamily">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsFamily" /> property.</summary>
      <returns>true if access to the class is restricted to members of the class itself and to members of its derived classes; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsFamilyAndAssembly">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsFamilyAndAssembly" /> property.</summary>
      <returns>true if access to this method is restricted to members of the class itself and to members of derived classes that are in the same assembly; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsFamilyOrAssembly">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsFamilyOrAssembly" /> property.</summary>
      <returns>true if access to this method is restricted to members of the class itself, members of derived classes wherever they are, and members of other classes in the same assembly; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsFinal">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsFinal" /> property.</summary>
      <returns>true if this method is final; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsHideBySig">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsHideBySig" /> property.</summary>
      <returns>true if the member is hidden by signature; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsPrivate">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsPrivate" /> property.</summary>
      <returns>true if access to this method is restricted to other members of the class itself; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsPublic">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsPublic" /> property.</summary>
      <returns>true if this method is public; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsSpecialName">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsSpecialName" /> property.</summary>
      <returns>true if this method has a special name; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsStatic">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsStatic" /> property.</summary>
      <returns>true if this method is static; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.IsVirtual">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.IsVirtual" /> property.</summary>
      <returns>true if this method is virtual; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.MemberType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.MemberType" /> property.</summary>
      <returns>One of the <see cref="T:System.Reflection.MemberTypes" /> values indicating the type of member.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.MethodHandle">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodBase.MethodHandle" /> property.</summary>
      <returns>A <see cref="T:System.RuntimeMethodHandle" /> object.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.Name">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.Name" /> property.</summary>
      <returns>A <see cref="T:System.String" /> object containing the name of this member.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.ReflectedType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.ReflectedType" /> property.</summary>
      <returns>The Type object that was used to obtain this MemberInfo object.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.ReturnType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodInfo.ReturnType" /> property.</summary>
      <returns>The return type of this method.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._MethodInfo.ReturnTypeCustomAttributes">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes" /> property.</summary>
      <returns>An <see cref="T:System.Reflection.ICustomAttributeProvider" /> object representing the custom attributes for the return type.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodInfo.ToString">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.ToString" /> method.</summary>
      <returns>A string that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._MethodRental">
      <summary>Exposes the <see cref="T:System.Reflection.Emit.MethodRental" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodRental.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodRental.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodRental.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._MethodRental.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._Module">
      <summary>Exposes the <see cref="T:System.Reflection.Module" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._Module.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Module.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Module.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Module.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._ModuleBuilder">
      <summary>Exposes the <see cref="T:System.Reflection.Emit.ModuleBuilder" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ModuleBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ModuleBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._ParameterBuilder">
      <summary>Exposes the <see cref="T:System.Reflection.Emit.ParameterBuilder" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._ParameterBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ParameterBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ParameterBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ParameterBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._ParameterInfo">
      <summary>Exposes the <see cref="T:System.Reflection.ParameterInfo" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._ParameterInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._PropertyBuilder">
      <summary>Exposes the <see cref="T:System.Reflection.Emit.PropertyBuilder" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._PropertyInfo">
      <summary>Exposes the public members of the <see cref="T:System.Reflection.PropertyInfo" /> class to unmanaged code.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices._PropertyInfo.Attributes">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.PropertyInfo.Attributes" /> property.</summary>
      <returns>The attributes of this property.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._PropertyInfo.CanRead">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.PropertyInfo.CanRead" /> property.</summary>
      <returns>true if this property can be read; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._PropertyInfo.CanWrite">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.PropertyInfo.CanWrite" /> property.</summary>
      <returns>true if this property can be written to; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._PropertyInfo.DeclaringType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.DeclaringType" /> property.</summary>
      <returns>The Type object for the class that declares this member.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.Equals(System.Object)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.Equals(System.Object)" /> method.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetAccessors">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.GetAccessors" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects that reflect the public get, set, and other accessors of the property reflected by the current instance, if accessors are found; otherwise, this method returns an array with zero (0) elements.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetAccessors(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects whose elements reflect the get, set, and other accessors of the property reflected by the current instance. If the <paramref name="nonPublic" /> parameter is true, this array contains public and non-public get, set, and other accessors. If <paramref name="nonPublic" /> is false, this array contains only public get, set, and other accessors. If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.</returns>
      <param name="nonPublic">true to include non-public methods in the returned MethodInfo array; otherwise, false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetCustomAttributes(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> method.</summary>
      <returns>An array that contains all the custom attributes, or an array with zero elements if no attributes are defined.</returns>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> method.</summary>
      <returns>An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</returns>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetGetMethod">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.GetGetMethod" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the public get accessor for this property, or null if the get accessor is non-public or does not exist.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetGetMethod(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the get accessor for this property, if the <paramref name="nonPublic" /> parameter is true. Or null if <paramref name="nonPublic" /> is false and the get accessor is non-public, or if <paramref name="nonPublic" /> is true but no get accessors exist.</returns>
      <param name="nonPublic">true to return a non-public get accessor; otherwise, false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetHashCode">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.GetHashCode" /> method.</summary>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetIndexParameters">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" /> method.</summary>
      <returns>An array of type <see cref="T:System.Reflection.ParameterInfo" /> containing the parameters for the indexes.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetSetMethod">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.GetSetMethod" /> method.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> object representing the Set method for this property if the set accessor is public, or null if the set accessor is not public.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetSetMethod(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" /> method.</summary>
      <returns>One of the values in the following table.Value Meaning A <see cref="T:System.Reflection.MethodInfo" /> object representing the Set method for this property. The set accessor is public.-or- The <paramref name="nonPublic" /> parameter is true and the set accessor is non-public. nullThe <paramref name="nonPublic" /> parameter is true, but the property is read-only.-or- The <paramref name="nonPublic" /> parameter is false and the set accessor is non-public.-or- There is no set accessor. </returns>
      <param name="nonPublic">true to return a non-public accessor; otherwise, false.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetType">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.GetType" /> method.</summary>
      <returns>A <see cref="T:System.Type" /> object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object,System.Object[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" /> method.</summary>
      <returns>The property value for the <paramref name="obj" /> parameter.</returns>
      <param name="obj">The object whose property value will be returned. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> method.</summary>
      <returns>The property value for the <paramref name="obj" /> parameter.</returns>
      <param name="obj">The object whose property value will be returned. </param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags: InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. A suitable invocation attribute must be specified. If a static member will be invoked, the Static flag of BindingFlags must be set. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects through reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
      <param name="culture">The CultureInfo object that represents the culture for which the resource will be localized. Note that if the resource is not localized for this culture, the CultureInfo.Parent method will be called successively in search of a match. If this value is null, the CultureInfo is obtained from the CultureInfo.CurrentUICulture property. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> method.</summary>
      <returns>true if one or more instances of the <paramref name="attributeType" /> parameter are applied to this member; otherwise, false.</returns>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied. </param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise false. </param>
    </member>
    <member name="P:System.Runtime.InteropServices._PropertyInfo.IsSpecialName">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.PropertyInfo.IsSpecialName" /> property.</summary>
      <returns>true if this property is the special name; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._PropertyInfo.MemberType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.PropertyInfo.MemberType" /> property.</summary>
      <returns>One of the <see cref="T:System.Reflection.MemberTypes" /> values indicating that this member is a property.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._PropertyInfo.Name">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.Name" /> property.</summary>
      <returns>A <see cref="T:System.String" /> object containing the name of this member.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._PropertyInfo.PropertyType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> property.</summary>
      <returns>The type of this property.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._PropertyInfo.ReflectedType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.ReflectedType" /> property.</summary>
      <returns>The <see cref="T:System.Type" /> object through which this <see cref="T:System.Reflection.MemberInfo" /> object was obtained.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])" /> method.</summary>
      <param name="obj">The object whose property value will be set. </param>
      <param name="value">The new value for this property. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" /> method.</summary>
      <param name="obj">The object whose property value will be returned. </param>
      <param name="value">The new value for this property. </param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />: InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. A suitable invocation attribute must be specified. If a static member will be invoked, the Static flag of BindingFlags must be set. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture for which the resource will be localized. Note that if the resource is not localized for this culture, the CultureInfo.Parent method will be called successively in search of a match. If this value is null, the CultureInfo is obtained from the CultureInfo.CurrentUICulture property. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._PropertyInfo.ToString">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Object.ToString" /> method.</summary>
      <returns>A string that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._SignatureHelper">
      <summary>Exposes the <see cref="T:System.Reflection.Emit.SignatureHelper" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._SignatureHelper.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._SignatureHelper.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._SignatureHelper.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._SignatureHelper.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._Thread">
      <summary>Exposes the <see cref="T:System.Threading.Thread" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._Thread.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Thread.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Thread.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Thread.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices._Type">
      <summary>Exposes the public members of the <see cref="T:System.Type" /> class to the unmanaged code.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.Assembly">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.Assembly" /> property.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.AssemblyQualifiedName">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.AssemblyQualifiedName" /> property.</summary>
      <returns>The assembly-qualified name of the <see cref="T:System.Type" />, including the name of the assembly from which the <see cref="T:System.Type" /> was loaded.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.Attributes">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.Attributes" /> property.</summary>
      <returns>A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.BaseType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.BaseType" /> property.</summary>
      <returns>The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or null if the current Type represents the <see cref="T:System.Object" /> class.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.DeclaringType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.DeclaringType" /> property.</summary>
      <returns>The <see cref="T:System.Type" /> object for the class that declares this member. If the type is a nested type, this property returns the enclosing type.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.Equals(System.Object)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.Equals(System.Object)" /> method.</summary>
      <returns>true if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Object" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.Equals(System.Type)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.Equals(System.Type)" /> method.</summary>
      <returns>true if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Type" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" /> method.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Type" />, if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</returns>
      <param name="filter">The <see cref="T:System.Reflection.TypeFilter" /> delegate that compares the interfaces against <paramref name="filterCriteria" />. </param>
      <param name="filterCriteria">The search criteria that determines whether an interface should be included in the returned array. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" /> method.</summary>
      <returns>A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.-or- An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</returns>
      <param name="memberType">A MemberTypes object indicating the type of member to search for. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="filter">The delegate that does the comparisons, returning true if the member currently being inspected matches the <paramref name="filterCriteria" /> and false otherwise. You can use the FilterAttribute, FilterName, and FilterNameIgnoreCase delegates supplied by this class. The first uses the fields of FieldAttributes, MethodAttributes, and MethodImplAttributes as search criteria, and the other two delegates use String objects as the search criteria. </param>
      <param name="filterCriteria">The search criteria that determines whether a member is returned in the array of MemberInfo objects.The fields of FieldAttributes, MethodAttributes, and MethodImplAttributes can be used in conjunction with the FilterAttribute delegate supplied by this class. </param>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.FullName">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.FullName" /> property.</summary>
      <returns>A string containing the fully qualified name of the <see cref="T:System.Type" />, including the namespace of the <see cref="T:System.Type" /> but not the assembly.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetArrayRank">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetArrayRank" /> method.</summary>
      <returns>An <see cref="T:System.Int32" /> containing the number of dimensions in the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.-or- <see cref="F:System.Type.EmptyTypes" />. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array. The default binder does not process this parameter. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetConstructor(System.Type[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructor(System.Type[])" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, null.</returns>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.-or- An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters. Such an empty array is provided by the static field <see cref="F:System.Type.EmptyTypes" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetConstructors">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructors" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor). If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter of a generic type or method definition, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined. Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter of a generic type or method definition.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetCustomAttributes(System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)" /> method.</summary>
      <returns>An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</returns>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> method.</summary>
      <returns>An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</returns>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetDefaultMembers">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetDefaultMembers" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetElementType">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetElementType" /> method.</summary>
      <returns>The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.-or- null if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter of a generic type or method definition.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetEvent(System.String)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvent(System.String)" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</returns>
      <param name="name">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> method.</summary>
      <returns>The <see cref="T:System.Reflection.EventInfo" /> object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetEvents">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvents" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events that are declared or inherited by the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetField(System.String)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetField(System.String)" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object representing the public field with the specified name, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the data field to get.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object representing the field that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the data field to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetFields">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetFields" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetHashCode">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetHashCode" /> method.</summary>
      <returns>An <see cref="T:System.Int32" /> containing the hash code for this instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">Passed-in array of names to be mapped.</param>
      <param name="cNames">Count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">Caller-allocated array that receives the IDs corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetInterface(System.String)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterface(System.String)" /> method.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the interface to get. For generic interfaces, this is the mangled name.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetInterface(System.String,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" /> method.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the interface to get. For generic interfaces, this is the mangled name.</param>
      <param name="ignoreCase">true to perform a case-insensitive search for <paramref name="name" />.-or- false to perform a case-sensitive search for <paramref name="name" />. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterfaceMap(System.Type)" /> method.</summary>
      <returns>An <see cref="T:System.Reflection.InterfaceMapping" /> object representing the interface mapping for <paramref name="interfaceType" />.</returns>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface of which to retrieve a mapping.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetInterfaces">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterfaces" /> method.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMember(System.String)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMember(System.String)" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public members to get.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the members to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return an empty array. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the members to get. </param>
      <param name="type">The <see cref="T:System.Reflection.MemberTypes" /> value to search for. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return an empty array. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMembers">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMembers" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMembers(System.Reflection.BindingFlags)" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMethod(System.String)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String)" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method with the specified name, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public method to get.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Type[])" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method whose parameters match the specified argument types, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public method to get. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public method to get. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMethods">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethods" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetNestedType(System.String)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedType(System.String)" /> method.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the public nested type with the specified name, if found; otherwise, null.</returns>
      <param name="name">The string containing the name of the nested type to get.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" /> method.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The string containing the name of the nested type to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetNestedTypes">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedTypes" /> method.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" /> method, and searches for the types nested within the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of the nested types match the binding constraints.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetProperties">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperties" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" /> method.</summary>
      <returns>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetProperty(System.String)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String)" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property with the specified name, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the property to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the property to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type)" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property with the specified name, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get. </param>
      <param name="returnType">The return type of the property. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property whose parameters match the specified argument types, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type[])" /> method.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property whose parameters match the specified argument types, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetType">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.GetType" /> method.</summary>
      <returns>The current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can then be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.GUID">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.GUID" /> property.</summary>
      <returns>The GUID associated with the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.HasElementType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.HasElementType" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">Identifies the member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
      <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</summary>
      <returns>An <see cref="T:System.Object" /> representing the return value of the invoked member.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.-or- An empty string ("") to invoke the default member. -or-For IDispatch members, a string representing the DispID, for example "[DispID=3]".</param>
      <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance will apply. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="target">The <see cref="T:System.Object" /> on which to invoke the specified member. </param>
      <param name="args">An array containing the arguments to pass to the member to invoke. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" /> method.</summary>
      <returns>An <see cref="T:System.Object" /> representing the return value of the invoked member.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.-or- An empty string ("") to invoke the default member. -or-For IDispatch members, a string representing the DispID, for example "[DispID=3]".</param>
      <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance will apply. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="target">The <see cref="T:System.Object" /> on which to invoke the specified member. </param>
      <param name="args">An array containing the arguments to pass to the member to invoke. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.-or- null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />. </param>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> method.</summary>
      <returns>An <see cref="T:System.Object" /> representing the return value of the invoked member.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.-or- An empty string ("") to invoke the default member. -or-For IDispatch members, a string representing the DispID, for example "[DispID=3]".</param>
      <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance will apply. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="target">The <see cref="T:System.Object" /> on which to invoke the specified member. </param>
      <param name="args">An array containing the arguments to pass to the member to invoke. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="args" /> array. A parameter's associated attributes are stored in the member's signature. The default binder does not process this parameter. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.-or- null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />. </param>
      <param name="namedParameters">An array containing the names of the parameters to which the values in the <paramref name="args" /> array are passed. </param>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsAbstract">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAbstract" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> is abstract; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsAnsiClass">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAnsiClass" /> property.</summary>
      <returns>true if the string format attribute AnsiClass is selected for the <see cref="T:System.Type" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsArray">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsArray" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> is an array; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> method.</summary>
      <returns>true if <paramref name="c" /> and the current <see cref="T:System.Type" /> represent the same type, or if the current <see cref="T:System.Type" /> is in the inheritance hierarchy of <paramref name="c" />, or if the current <see cref="T:System.Type" /> is an interface that <paramref name="c" /> implements, or if <paramref name="c" /> is a generic type parameter and the current <see cref="T:System.Type" /> represents one of the constraints of <paramref name="c" />. false if none of these conditions are the case, or if <paramref name="c" /> is null.</returns>
      <param name="c">The <see cref="T:System.Type" /> to compare with the current <see cref="T:System.Type" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsAutoClass">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAutoClass" /> property.</summary>
      <returns>true if the string format attribute AutoClass is selected for the <see cref="T:System.Type" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsAutoLayout">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAutoLayout" /> property.</summary>
      <returns>true if the class layout attribute AutoLayout is selected for the <see cref="T:System.Type" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsByRef">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsByRef" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> is passed by reference; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsClass">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsClass" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a class; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsCOMObject">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsCOMObject" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a COM object; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsContextful">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsContextful" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.IsDefined(System.Type,System.Boolean)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> method.</summary>
      <returns>true if one or more instance of <paramref name="attributeType" /> is applied to this member; otherwise, false.</returns>
      <param name="attributeType">The Type object to which the custom attributes are applied. </param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes. </param>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsEnum">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsEnum" /> property.</summary>
      <returns>true if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsExplicitLayout">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsExplicitLayout" /> property.</summary>
      <returns>true if the class layout attribute ExplicitLayout is selected for the <see cref="T:System.Type" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsImport">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsImport" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> has <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.IsInstanceOfType(System.Object)" /> method.</summary>
      <returns>true if the current <see cref="T:System.Type" /> is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current <see cref="T:System.Type" /> is an interface that <paramref name="o" /> supports. false if neither of these conditions is the case, or if <paramref name="o" /> is null, or if the current <see cref="T:System.Type" /> is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns true).</returns>
      <param name="o">The object to compare with the current <see cref="T:System.Type" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsInterface">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsInterface" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> is an interface; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsLayoutSequential">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsLayoutSequential" /> property.</summary>
      <returns>true if the class layout attribute SequentialLayout is selected for the <see cref="T:System.Type" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsMarshalByRef">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsMarshalByRef" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsNestedAssembly">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedAssembly" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsNestedFamANDAssem">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedFamANDAssem" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsNestedFamily">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedFamily" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsNestedFamORAssem">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedFamORAssem" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsNestedPrivate">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedPrivate" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and declared private; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsNestedPublic">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedPublic" /> property.</summary>
      <returns>true if the class is nested and declared public; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsNotPublic">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNotPublic" /> property.</summary>
      <returns>true if the top-level <see cref="T:System.Type" /> is not declared public; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsPointer">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsPointer" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a pointer; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsPrimitive">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsPrimitive" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsPublic">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsPublic" /> property.</summary>
      <returns>true if the top-level <see cref="T:System.Type" /> is declared public; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsSealed">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsSealed" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> is declared sealed; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsSerializable">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsSerializable" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> is serializable; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsSpecialName">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsSpecialName" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> has a name that requires special handling; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.IsSubclassOf(System.Type)">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.IsSubclassOf(System.Type)" /> method.</summary>
      <returns>true if the <see cref="T:System.Type" /> represented by the <paramref name="c" /> parameter and the current <see cref="T:System.Type" /> represent classes, and the class represented by the current <see cref="T:System.Type" /> derives from the class represented by <paramref name="c" />; otherwise, false. This method also returns false if <paramref name="c" /> and the current <see cref="T:System.Type" /> represent the same class.</returns>
      <param name="c">The <see cref="T:System.Type" /> to compare with the current <see cref="T:System.Type" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsUnicodeClass">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsUnicodeClass" /> property.</summary>
      <returns>true if the string format attribute UnicodeClass is selected for the <see cref="T:System.Type" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.IsValueType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.IsValueType" /> property.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a value type; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.MemberType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.MemberType" /> property.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.Module">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.Module" /> property.</summary>
      <returns>The name of the module in which the current <see cref="T:System.Type" /> is defined.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.Name">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.Name" /> property.</summary>
      <returns>The name of the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.Namespace">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.Namespace" /> property.</summary>
      <returns>The namespace of the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.ReflectedType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.ReflectedType" /> property.</summary>
      <returns>The <see cref="T:System.Type" /> object through which this <see cref="T:System.Reflection.MemberInfo" /> object was obtained.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices._Type.ToString">
      <summary>Provides COM objects with version-independent access to the <see cref="M:System.Type.ToString" /> method.</summary>
      <returns>A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.TypeHandle">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.TypeHandle" /> property.</summary>
      <returns>The handle for the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.TypeInitializer">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.TypeInitializer" /> property.</summary>
      <returns>A <see cref="T:System.Reflection.ConstructorInfo" /> containing the name of the class constructor for the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices._Type.UnderlyingSystemType">
      <summary>Provides COM objects with version-independent access to the <see cref="P:System.Type.UnderlyingSystemType" /> property.</summary>
      <returns>The underlying system type for the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices._TypeBuilder">
      <summary>Exposes the <see cref="T:System.Reflection.Emit.TypeBuilder" /> class to unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="rgszNames">An array of names to be mapped.</param>
      <param name="cNames">The count of the names to be mapped.</param>
      <param name="lcid">The locale context in which to interpret the names.</param>
      <param name="rgDispId">An array allocated by the caller that receives the identifiers corresponding to the names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
      <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
      <param name="iTInfo">The type information to return.</param>
      <param name="lcid">The locale identifier for the type information.</param>
      <param name="ppTInfo">A pointer to the requested type information object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount(System.UInt32@)">
      <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
      <param name="pcTInfo">If this is really an out parameter as the syntax above indicates, the wording here should be "When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices._TypeBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Provides access to properties and methods exposed by an object.</summary>
      <param name="dispIdMember">An identifier of a member.</param>
      <param name="riid">Reserved for future use. Must be IID_NULL.</param>
      <param name="lcid">The locale context in which to interpret arguments.</param>
      <param name="wFlags">Flags describing the context of the call.</param>
      <param name="pDispParams">A pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
      <param name="pVarResult">A pointer to the location where the result will be stored.</param>
      <param name="pExcepInfo">A pointer to a structure that contains exception information.</param>
      <param name="puArgErr">The index of the first argument that has an error.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
      <summary>Allows an unmanaged method to call a managed method.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary>Encapsulates an array and an offset within the specified array.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> structure.</summary>
      <param name="array">A managed array. </param>
      <param name="offset">The offset in bytes, of the element to be passed through platform invoke. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary>Indicates whether the specified object matches the current <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object.</summary>
      <returns>true if the object matches this <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />; otherwise, false.</returns>
      <param name="obj">Object to compare with this instance. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>Indicates whether the specified <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object matches the current instance.</summary>
      <returns>true if the specified <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object matches the current instance; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object to compare with this instance.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary>Returns the managed array referenced by this <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</summary>
      <returns>The managed array this instance references.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary>Returns a hash code for this value type.</summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary>Returns the offset provided when this <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> was constructed.</summary>
      <returns>The offset for this instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>Determines whether two specified <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> objects have the same value.</summary>
      <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
      <param name="a">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object to compare with the <paramref name="b" /> parameter. </param>
      <param name="b">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object to compare with the <paramref name="a" /> parameter.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>Determines whether two specified <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> objects no not have the same value.</summary>
      <returns>true if the value of <paramref name="a" /> is not the same as the value of <paramref name="b" />; otherwise, false.</returns>
      <param name="a">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object to compare with the <paramref name="b" /> parameter. </param>
      <param name="b">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object to compare with the <paramref name="a" /> parameter.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.AssemblyRegistrationFlags">
      <summary>Defines a set of flags used when registering assemblies.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.AssemblyRegistrationFlags.None">
      <summary>Indicates no special settings.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.AssemblyRegistrationFlags.SetCodeBase">
      <summary>Indicates that the code base key for the assembly should be set in the registry.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.AutomationProxyAttribute">
      <summary>Specifies whether the type should be marshaled using the Automation marshaler or a custom proxy and stub.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.AutomationProxyAttribute" /> class.</summary>
      <param name="val">true if the class should be marshaled using the Automation Marshaler; false if a proxy stub marshaler should be used. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.AutomationProxyAttribute.Value">
      <summary>Gets a value indicating the type of marshaler to use.</summary>
      <returns>true if the class should be marshaled using the Automation Marshaler; false if a proxy stub marshaler should be used.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary>Controls whether Unicode characters are converted to the closest matching ANSI characters.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" /> class set to the value of the <see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping" /> property.</summary>
      <param name="BestFitMapping">true to indicate that best-fit mapping is enabled; otherwise, false. The default is true. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary>Gets the best-fit mapping behavior when converting Unicode characters to ANSI characters.</summary>
      <returns>true if best-fit mapping is enabled; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary>Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI '?' character.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.BIND_OPTS">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BIND_OPTS.cbStruct">
      <summary>Specifies the size of the BIND_OPTS structure in bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BIND_OPTS.dwTickCountDeadline">
      <summary>Indicates the amount of time (clock time in milliseconds, as returned by the GetTickCount function) the caller specified to complete the binding operation.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BIND_OPTS.grfFlags">
      <summary>Controls aspects of moniker binding operations.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BIND_OPTS.grfMode">
      <summary>Flags that should be used when opening the file that contains the object identified by the moniker.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.BINDPTR">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.BINDPTR" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BINDPTR.lpfuncdesc">
      <summary>Represents a pointer to a <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BINDPTR.lptcomp">
      <summary>Represents a pointer to a <see cref="F:System.Runtime.InteropServices.BINDPTR.lptcomp" /> interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BINDPTR.lpvardesc">
      <summary>Represents a pointer to a <see cref="T:System.Runtime.InteropServices.VARDESC" /> structure.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary>Marshals data of type VT_BSTR from managed to unmanaged code. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> class with the specified <see cref="T:System.Object" /> object.</summary>
      <param name="value">The object to wrap and marshal as VT_BSTR.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> class with the specified <see cref="T:System.String" /> object.</summary>
      <param name="value">The object to wrap and marshal as VT_BSTR.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary>Gets the wrapped <see cref="T:System.String" /> object to marshal as type VT_BSTR.</summary>
      <returns>The object that is wrapped by <see cref="T:System.Runtime.InteropServices.BStrWrapper" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CALLCONV">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_CDECL">
      <summary>Indicates that the Cdecl calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_MSCPASCAL">
      <summary>Indicates that the Mscpascal calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_PASCAL">
      <summary>Indicates that the Pascal calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_MACPASCAL">
      <summary>Indicates that the Macpascal calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_STDCALL">
      <summary>Indicates that the Stdcall calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_RESERVED">
      <summary>This value is reserved for future use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_SYSCALL">
      <summary>Indicates that the Syscall calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_MPWCDECL">
      <summary>Indicates that the Mpwcdecl calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_MPWPASCAL">
      <summary>Indicates that the Mpwpascal calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_MAX">
      <summary>Indicates the end of the <see cref="T:System.Runtime.InteropServices.CALLCONV" /> enumeration.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary>Specifies the calling convention required to call methods implemented in unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary>This member is not actually a calling convention, but instead uses the default platform calling convention. For example, on Windows the default is <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" /> and on Windows CE.NET it is <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary>The caller cleans the stack. This enables calling functions with varargs, which makes it appropriate to use for methods that accept a variable number of parameters, such as Printf.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary>The callee cleans the stack. This is the default convention for calling unmanaged functions with platform invoke.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary>The first parameter is the this pointer and is stored in register ECX. Other parameters are pushed on the stack. This calling convention is used to call methods on classes exported from an unmanaged DLL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary>This calling convention is not supported.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CharSet">
      <summary>Dictates which character set marshaled strings should use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.None">
      <summary>This value is obsolete and has the same behavior as <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Ansi">
      <summary>Marshal strings as multiple-byte character strings.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Unicode">
      <summary>Marshal strings as Unicode 2-byte characters.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Auto">
      <summary>Automatically marshal strings appropriately for the target operating system. The default is <see cref="F:System.Runtime.InteropServices.CharSet.Unicode" /> on Windows NT, Windows 2000, Windows XP, and the Windows Server 2003 family; the default is <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" /> on Windows 98 and Windows Me. Although the common language runtime default is <see cref="F:System.Runtime.InteropServices.CharSet.Auto" />, languages may override this default. For example, by default C# marks all methods and types as <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary>Indicates the type of class interface to be generated for a class exposed to COM, if an interface is generated at all.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> enumeration value.</summary>
      <param name="classInterfaceType">Describes the type of interface that is generated for a class. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> enumeration member.</summary>
      <param name="classInterfaceType">One of the <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> values that describes the type of interface that is generated for a class. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> value that describes which type of interface should be generated for the class.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> value that describes which type of interface should be generated for the class.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary>Identifies the type of class interface that is generated for a class.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary>Indicates that no class interface is generated for the class. If no interfaces are implemented explicitly, the class can only provide late-bound access through the IDispatch interface. This is the recommended setting for <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />. Using ClassInterfaceType.None is the only way to expose functionality through interfaces implemented explicitly by the class.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary>Indicates that the class only supports late binding for COM clients. A dispinterface for the class is automatically exposed to COM clients on request. The type library produced by Tlbexp.exe (Type Library Exporter) does not contain type information for the dispinterface in order to prevent clients from caching the DISPIDs of the interface. The dispinterface does not exhibit the versioning problems described in <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> because clients can only late-bind to the interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary>Indicates that a dual class interface is automatically generated for the class and exposed to COM. Type information is produced for the class interface and published in the type library. Using AutoDual is strongly discouraged because of the versioning limitations described in <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary>Specifies the class identifier of a coclass imported from a type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary>Initializes new instance of the <see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> with the class identifier of the original coclass.</summary>
      <param name="coClass">A <see cref="T:System.Type" /> that contains the class identifier of the original coclass. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary>Gets the class identifier of the original coclass.</summary>
      <returns>A <see cref="T:System.Type" /> containing the class identifier of the original coclass.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAliasNameAttribute">
      <summary>Indicates the COM alias for a parameter or field type.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComAliasNameAttribute" /> class with the alias for the attributed field or parameter.</summary>
      <param name="alias">The alias for the field or parameter as found in the type library when it was imported. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAliasNameAttribute.Value">
      <summary>Gets the alias for the field or parameter as found in the type library when it was imported.</summary>
      <returns>The alias for the field or parameter as found in the type library when it was imported.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute">
      <summary>Indicates to a COM client that all classes in the current version of an assembly are compatible with classes in an earlier version of the assembly.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute" /> class with the major version, minor version, build, and revision numbers of the assembly.</summary>
      <param name="major">The major version number of the assembly. </param>
      <param name="minor">The minor version number of the assembly. </param>
      <param name="build">The build number of the assembly. </param>
      <param name="revision">The revision number of the assembly. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.BuildNumber">
      <summary>Gets the build number of the assembly.</summary>
      <returns>The build number of the assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MajorVersion">
      <summary>Gets the major version number of the assembly.</summary>
      <returns>The major version number of the assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MinorVersion">
      <summary>Gets the minor version number of the assembly.</summary>
      <returns>The minor version number of the assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.RevisionNumber">
      <summary>Gets the revision number of the assembly.</summary>
      <returns>The revision number of the assembly.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComConversionLossAttribute">
      <summary>Indicates that information was lost about a class or interface when it was imported from a type library to an assembly.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor">
      <summary>Initializes a new instance of the ComConversionLossAttribute class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary>Specifies a default interface to expose to COM. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> class with the specified <see cref="T:System.Type" /> object as the default interface exposed to COM.</summary>
      <param name="defaultInterface">A <see cref="T:System.Type" /> value indicating the default interface to expose to COM. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary>Gets the <see cref="T:System.Type" /> object that specifies the default interface to expose to COM.</summary>
      <returns>The <see cref="T:System.Type" /> object that specifies the default interface to expose to COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary>Identifies the source interface and the class that implements the methods of the event interface that is generated when a coclass is imported from a COM type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /> class with the source interface and event provider class.</summary>
      <param name="SourceInterface">A <see cref="T:System.Type" /> that contains the original source interface from the type library. COM uses this interface to call back to the managed class. </param>
      <param name="EventProvider">A <see cref="T:System.Type" /> that contains the class that implements the methods of the event interface. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary>Gets the class that implements the methods of the event interface.</summary>
      <returns>A <see cref="T:System.Type" /> that contains the class that implements the methods of the event interface.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary>Gets the original source interface from the type library.</summary>
      <returns>A <see cref="T:System.Type" /> containing the source interface.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventsHelper">
      <summary>Provides methods that enable .NET Framework delegates that handle events to be added and removed from COM objects.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>Adds a delegate to the invocation list of events originating from a COM object.</summary>
      <param name="rcw">The COM object that triggers the events the caller would like to respond to.</param>
      <param name="iid">The identifier of the source interface used by the COM object to trigger events. </param>
      <param name="dispid">The dispatch identifier of the method on the source interface.</param>
      <param name="d">The delegate to invoke when the COM event is fired.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>Removes a delegate from the invocation list of events originating from a COM object.</summary>
      <returns>The delegate that was removed from the invocation list.</returns>
      <param name="rcw">The COM object the delegate is attached to.</param>
      <param name="iid">The identifier of the source interface used by the COM object to trigger events. </param>
      <param name="dispid">The dispatch identifier of the method on the source interface.</param>
      <param name="d">The delegate to remove from the invocation list.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary>The exception that is thrown when an unrecognized HRESULT is returned from a COM method call.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException" /> class with default values.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException" /> class from serialization data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that supplies the contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException" /> class with a specified message.</summary>
      <param name="message">The message that indicates the reason for the exception. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException" /> class with a specified message and error code.</summary>
      <param name="message">The message that indicates the reason the exception occurred. </param>
      <param name="errorCode">The error code (HRESULT) value associated with this exception. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary>Converts the contents of the exception to a string.</summary>
      <returns>A string containing the <see cref="P:System.Exception.HResult" />, <see cref="P:System.Exception.Message" />, <see cref="P:System.Exception.InnerException" />, and <see cref="P:System.Exception.StackTrace" /> properties of the exception.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary>Indicates that the attributed type was previously defined in COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary>Identifies how to expose an interface to COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary>Indicates the interface is exposed to COM as a dual interface, which enables both early and late binding. <see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" /> is the default value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary>Indicates an interface is exposed to COM as an IUnknown -derived interface, which enables only early binding.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary>Indicates an interface is exposed to COM as a dispinterface, which enables late binding only.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary>Describes the type of a COM member.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary>The member is a normal method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary>The member gets properties.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary>The member sets properties.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
      <summary>Specifies the method to call when you register an assembly for use from COM; this enables the execution of user-written code during the registration process.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary>Identifies a list of interfaces that are exposed as COM event sources for the attributed class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> class with the name of the event source interface.</summary>
      <param name="sourceInterfaces">A null-delimited list of fully qualified event source interface names. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> class with the type to use as a source interface.</summary>
      <param name="sourceInterface">The <see cref="T:System.Type" /> of the source interface. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> class with the types to use as source interfaces.</summary>
      <param name="sourceInterface1">The <see cref="T:System.Type" /> of the default source interface. </param>
      <param name="sourceInterface2">The <see cref="T:System.Type" /> of a source interface. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary>Initializes a new instance of the ComSourceInterfacesAttribute class with the types to use as source interfaces.</summary>
      <param name="sourceInterface1">The <see cref="T:System.Type" /> of the default source interface. </param>
      <param name="sourceInterface2">The <see cref="T:System.Type" /> of a source interface. </param>
      <param name="sourceInterface3">The <see cref="T:System.Type" /> of a source interface. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> class with the types to use as source interfaces.</summary>
      <param name="sourceInterface1">The <see cref="T:System.Type" /> of the default source interface. </param>
      <param name="sourceInterface2">The <see cref="T:System.Type" /> of a source interface. </param>
      <param name="sourceInterface3">The <see cref="T:System.Type" /> of a source interface. </param>
      <param name="sourceInterface4">The <see cref="T:System.Type" /> of a source interface. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary>Gets the fully qualified name of the event source interface.</summary>
      <returns>The fully qualified name of the event source interface.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
      <summary>Specifies the method to call when you unregister an assembly for use from COM; this allows for the execution of user-written code during the unregistration process.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
      <summary>Controls accessibility of an individual managed type or member, or of all types within an assembly, to COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the ComVisibleAttribute class.</summary>
      <param name="visibility">true to indicate that the type is visible to COM; otherwise, false. The default is true. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComVisibleAttribute.Value">
      <summary>Gets a value that indicates whether the COM type is visible.</summary>
      <returns>true if the type is visible; otherwise, false. The default value is true.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CONNECTDATA">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CONNECTDATA.dwCookie">
      <summary>Represents a connection token that is returned from a call to <see cref="M:System.Runtime.InteropServices.UCOMIConnectionPoint.Advise(System.Object,System.Int32@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CONNECTDATA.pUnk">
      <summary>Represents a pointer to the IUnknown interface on a connected advisory sink. The caller must call IUnknown::Release on this pointer when the CONNECTDATA structure is no longer needed.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CriticalHandle">
      <summary>Represents a wrapper class for handle resources.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> class with the specified invalid handle value.</summary>
      <param name="invalidHandleValue">The value of an invalid handle (usually 0 or -1).</param>
      <exception cref="T:System.TypeLoadException">The derived class resides in an assembly without unmanaged code access permission.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Close">
      <summary>Marks the handle for releasing and freeing resources.</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Runtime.InteropServices.CriticalHandle" />. </summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> class specifying whether to perform a normal dispose operation.</summary>
      <param name="disposing">true for a normal dispose operation; false to finalize the handle.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Finalize">
      <summary>Frees all resources associated with the handle.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CriticalHandle.handle">
      <summary>Specifies the handle to be wrapped.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsClosed">
      <summary>Gets a value indicating whether the handle is closed.</summary>
      <returns>true if the handle is closed; otherwise, false.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsInvalid">
      <summary>When overridden in a derived class, gets a value indicating whether the handle value is invalid.</summary>
      <returns>true if the handle is valid; otherwise, false.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle">
      <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
      <returns>true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)">
      <summary>Sets the handle to the specified pre-existing handle.</summary>
      <param name="handle">The pre-existing handle to use.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid">
      <summary>Marks a handle as invalid.</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary>Wraps objects the marshaler should marshal as a VT_CY.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> class with the Decimal to be wrapped and marshaled as type VT_CY.</summary>
      <param name="obj">The Decimal to be wrapped and marshaled as VT_CY. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> class with the object containing the Decimal to be wrapped and marshaled as type VT_CY.</summary>
      <param name="obj">The object containing the Decimal to be wrapped and marshaled as VT_CY. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="obj" /> parameter is not a <see cref="T:System.Decimal" /> type.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary>Gets the wrapped object to be marshaled as type VT_CY.</summary>
      <returns>The wrapped object to be marshaled as type VT_CY.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary>Indicates whether the <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> method's IUnknown::QueryInterface calls can use the <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary>IUnknown::QueryInterface method calls should ignore the <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary>IUnknown::QueryInterface method calls can use the <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> interface. When you use this value, the <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> method overload functions like the <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" /> overload.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary>Provides return values for the <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary>The interface pointer that is returned from the <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> method can be used as the result of IUnknown::QueryInterface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary>The custom QueryInterface was not used. Instead, the default implementation of IUnknown::QueryInterface should be used.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary>The interface for a specific interface ID is not available. In this case, the returned interface is null. E_NOINTERFACE is returned to the caller of IUnknown::QueryInterface.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary>Specifies the value of the <see cref="T:System.Runtime.InteropServices.CharSet" /> enumeration. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.CharSet" /> value.</summary>
      <param name="charSet">One of the <see cref="T:System.Runtime.InteropServices.CharSet" /> values.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary>Gets the default value of <see cref="T:System.Runtime.InteropServices.CharSet" /> for any call to <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />.</summary>
      <returns>The default value of <see cref="T:System.Runtime.InteropServices.CharSet" /> for any call to <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DESCKIND">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.DESCKIND" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DESCKIND.DESCKIND_NONE">
      <summary>Indicates that no match was found.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DESCKIND.DESCKIND_FUNCDESC">
      <summary>Indicates that a <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> was returned.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DESCKIND.DESCKIND_VARDESC">
      <summary>Indicates that a VARDESC was returned.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DESCKIND.DESCKIND_TYPECOMP">
      <summary>Indicates that a TYPECOMP was returned.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary>Indicates that an IMPLICITAPPOBJ was returned.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DESCKIND.DESCKIND_MAX">
      <summary>Indicates an end of enumeration marker.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary>Wraps objects the marshaler should marshal as a VT_DISPATCH.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> class with the object being wrapped.</summary>
      <param name="obj">The object to be wrapped and converted to <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a class or an array.-or- <paramref name="obj" /> does not support IDispatch. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="obj" /> parameter was marked with a <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />  attribute that was passed a value of false.-or-The <paramref name="obj" /> parameter inherits from a type marked with a <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />  attribute that was passed a value of false.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary>Gets the object wrapped by the <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />.</summary>
      <returns>The object wrapped by the <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary>Specifies the COM dispatch identifier (DISPID) of a method, field, or property.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the DispIdAttribute class with the specified DISPID.</summary>
      <param name="dispId">The DISPID for the member. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary>Gets the DISPID for the member.</summary>
      <returns>The DISPID for the member.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DISPPARAMS">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DISPPARAMS.cArgs">
      <summary>Represents the count of arguments.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DISPPARAMS.cNamedArgs">
      <summary>Represents the count of named arguments </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DISPPARAMS.rgdispidNamedArgs">
      <summary>Represents the dispatch IDs of named arguments.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DISPPARAMS.rgvarg">
      <summary>Represents a reference to the array of arguments.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary>Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> class with the name of the DLL containing the method to import.</summary>
      <param name="dllName">The name of the DLL that contains the unmanaged method. This can include an assembly display name, if the DLL is included in an assembly.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary>Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary>Indicates the calling convention of an entry point.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary>Indicates how to marshal string parameters to the method and controls name mangling.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary>Indicates the name or ordinal of the DLL entry point to be called.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary>Controls whether the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary>Indicates whether unmanaged methods that have HRESULT or retval return values are directly translated or whether HRESULT or retval return values are automatically converted to exceptions.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary>Indicates whether the callee calls the SetLastError Win32 API function before returning from the attributed method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary>Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary>Gets the name of the DLL file that contains the entry point.</summary>
      <returns>The name of the DLL file that contains the entry point.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ELEMDESC">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.ELEMDESC" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ELEMDESC.desc">
      <summary>Contains information about an element.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ELEMDESC.tdesc">
      <summary>Identifies the type of the element.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ELEMDESC.DESCUNION">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ELEMDESC.DESCUNION.idldesc">
      <summary>Contains information for remoting the element.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ELEMDESC.DESCUNION.paramdesc">
      <summary>Contains information about the parameter.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary>Wraps objects the marshaler should marshal as a VT_ERROR.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> class with the HRESULT that corresponds to the exception supplied.</summary>
      <param name="e">The exception to be converted to an error code. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> class with the HRESULT of the error.</summary>
      <param name="errorCode">The HRESULT of the error. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> class with an object containing the HRESULT of the error.</summary>
      <param name="errorCode">The object containing the HRESULT of the error. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="errorCode" /> parameter is not an <see cref="T:System.Int32" /> type.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary>Gets the error code of the wrapper.</summary>
      <returns>The HRESULT of the error.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.EXCEPINFO">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.bstrDescription">
      <summary>Describes the error intended for the customer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.bstrHelpFile">
      <summary>Contains the fully-qualified drive, path, and file name of a Help file with more information about the error.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.bstrSource">
      <summary>Indicates the name of the source of the exception. Typically, this is an application name.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.dwHelpContext">
      <summary>Indicates the Help context ID of the topic within the Help file.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.pfnDeferredFillIn">
      <summary>Represents a pointer to a function that takes an <see cref="T:System.Runtime.InteropServices.EXCEPINFO" /> structure as an argument and returns an HRESULT value. If deferred fill-in is not desired, this field is set to null.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.pvReserved">
      <summary>This field is reserved; must be set to null.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.wCode">
      <summary>Represents an error code identifying the error.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.wReserved">
      <summary>This field is reserved; must be set to 0.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ExporterEventKind">
      <summary>Describes the callbacks that the type library exporter makes when exporting a type library.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ExporterEventKind.NOTIF_TYPECONVERTED">
      <summary>Specifies that the event is invoked when a type has been exported.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ExporterEventKind.NOTIF_CONVERTWARNING">
      <summary>Specifies that the event is invoked when a warning occurs during conversion.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ExporterEventKind.ERROR_REFTOINVALIDASSEMBLY">
      <summary>This value is not supported in this version of the .NET Framework.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ExtensibleClassFactory">
      <summary>Enables customization of managed objects that extend from unmanaged objects during creation.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExtensibleClassFactory.RegisterObjectCreationCallback(System.Runtime.InteropServices.ObjectCreationDelegate)">
      <summary>Registers a delegate that is called when an instance of a managed type, that extends from an unmanaged type, needs to allocate the aggregated unmanaged object.</summary>
      <param name="callback">A delegate that is called in place of CoCreateInstance. </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ExternalException">
      <summary>The base exception type for all COM interop exceptions and structured exception handling (SEH) exceptions.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor">
      <summary>Initializes a new instance of the ExternalException class with default properties.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the ExternalException class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String)">
      <summary>Initializes a new instance of the ExternalException class with a specified error message.</summary>
      <param name="message">The error message that specifies the reason for the exception. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ExternalException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the ExternalException class with a specified error message and the HRESULT of the error.</summary>
      <param name="message">The error message that specifies the reason for the exception. </param>
      <param name="errorCode">The HRESULT of the error. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ExternalException.ErrorCode">
      <summary>Gets the HRESULT of the error.</summary>
      <returns>The HRESULT of the error.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.ToString">
      <summary>Returns a string that contains the HRESULT of the error.</summary>
      <returns>A string that represents the HRESULT. </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.FieldOffsetAttribute">
      <summary>Indicates the physical position of fields within the unmanaged representation of a class or structure.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.FieldOffsetAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> class with the offset in the structure to the beginning of the field.</summary>
      <param name="offset">The offset in bytes from the beginning of the structure to the beginning of the field. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.FieldOffsetAttribute.Value">
      <summary>Gets the offset from the beginning of the structure to the beginning of the field.</summary>
      <returns>The offset from the beginning of the structure to the beginning of the field.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.FILETIME">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FILETIME.dwHighDateTime">
      <summary>Specifies the high 32 bits of the FILETIME.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FILETIME.dwLowDateTime">
      <summary>Specifies the low 32 bits of the FILETIME.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.FUNCDESC">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.FUNCDESC" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.callconv">
      <summary>Specifies the calling convention of a function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.cParams">
      <summary>Counts the total number of parameters.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.cParamsOpt">
      <summary>Counts the optional parameters.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.cScodes">
      <summary>Counts the permitted return values.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.elemdescFunc">
      <summary>Contains the return type of the function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.funckind">
      <summary>Specifies whether the function is virtual, static, or dispatch-only.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.invkind">
      <summary>Specifies the type of a property function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.lprgelemdescParam">
      <summary>Indicates the size of <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.lprgscode">
      <summary>Stores the count of errors a function can return on a 16-bit system.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.memid">
      <summary>Identifies the function member ID.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.oVft">
      <summary>Specifies the offset in the VTBL for <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.wFuncFlags">
      <summary>Indicates the <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> of a function.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.FUNCFLAGS">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS" /> instead. </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary>The function should not be accessible from macro languages. This flag is intended for system-level functions or functions that type browsers should not display.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary>The function returns an object that is a source of events.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary>The function that supports data binding.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary>When set, any call to a method that sets the property results first in a call to IPropertyNotifySink::OnRequestEdit. The implementation of OnRequestEdit determines if the call is allowed to set the property.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary>The function that is displayed to the user as bindable. <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" /> must also be set.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary>The function that best represents the object. Only one function in a type information can have this attribute.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary>The function should not be displayed to the user, although it exists and is bindable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary>The function supports GetLastError. If an error occurs during the function, the caller can call GetLastError to retrieve the error code.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary>Permits an optimization in which the compiler looks for a member named "xyz" on the type of "abc". If such a member is found, and is flagged as an accessor function for an element of the default collection, a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary>The type information member is the default member for display in the user interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary>The property appears in an object browser, but not in a properties browser.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary>Tags the interface as having default behaviors.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary>Mapped as individual bindable properties.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.FUNCKIND">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.FUNCKIND" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL">
      <summary>The function is accessed the same as <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" />, except the function has an implementation.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary>The function is accessed through the virtual function table (VTBL), and takes an implicit this pointer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCKIND.FUNC_NONVIRTUAL">
      <summary>The function is accessed by static address and takes an implicit this pointer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCKIND.FUNC_STATIC">
      <summary>The function is accessed by static address and does not take an implicit this pointer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCKIND.FUNC_DISPATCH">
      <summary>The function can be accessed only through IDispatch.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandle">
      <summary>Provides a way to access a managed object from unmanaged memory.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
      <summary>Retrieves the address of an object in a <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /> handle.</summary>
      <returns>The address of the of the Pinned object as an <see cref="T:System.IntPtr" />.</returns>
      <exception cref="T:System.InvalidOperationException">The handle is any type other than <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" />. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
      <summary>Allocates a <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" /> handle for the specified object.</summary>
      <returns>A new <see cref="T:System.Runtime.InteropServices.GCHandle" /> that protects the object from garbage collection. This <see cref="T:System.Runtime.InteropServices.GCHandle" /> must be released with <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> when it is no longer needed.</returns>
      <param name="value">The object that uses the <see cref="T:System.Runtime.InteropServices.GCHandle" />. </param>
      <exception cref="T:System.ArgumentException">An instance with nonprimitive (non-blittable) members cannot be pinned. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
      <summary>Allocates a handle of the specified type for the specified object.</summary>
      <returns>A new <see cref="T:System.Runtime.InteropServices.GCHandle" /> of the specified type. This <see cref="T:System.Runtime.InteropServices.GCHandle" /> must be released with <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> when it is no longer needed.</returns>
      <param name="value">The object that uses the <see cref="T:System.Runtime.InteropServices.GCHandle" />. </param>
      <param name="type">One of the <see cref="T:System.Runtime.InteropServices.GCHandleType" /> values, indicating the type of <see cref="T:System.Runtime.InteropServices.GCHandle" /> to create. </param>
      <exception cref="T:System.ArgumentException">An instance with nonprimitive (non-blittable) members cannot be pinned. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Runtime.InteropServices.GCHandle" /> object is equal to the current <see cref="T:System.Runtime.InteropServices.GCHandle" /> object.</summary>
      <returns>true if the specified <see cref="T:System.Runtime.InteropServices.GCHandle" /> object is equal to the current <see cref="T:System.Runtime.InteropServices.GCHandle" /> object; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Runtime.InteropServices.GCHandle" /> object to compare with the current <see cref="T:System.Runtime.InteropServices.GCHandle" /> object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Free">
      <summary>Releases a <see cref="T:System.Runtime.InteropServices.GCHandle" />.</summary>
      <exception cref="T:System.InvalidOperationException">The handle was freed or never initialized. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
      <summary>Returns a new <see cref="T:System.Runtime.InteropServices.GCHandle" /> object created from a handle to a managed object.</summary>
      <returns>A new <see cref="T:System.Runtime.InteropServices.GCHandle" /> object that corresponds to the value parameter.  </returns>
      <param name="value">An <see cref="T:System.IntPtr" /> handle to a managed object to create a <see cref="T:System.Runtime.InteropServices.GCHandle" /> object from.</param>
      <exception cref="T:System.InvalidOperationException">The value of the <paramref name="value" /> parameter is <see cref="F:System.IntPtr.Zero" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
      <summary>Returns an identifier for the current <see cref="T:System.Runtime.InteropServices.GCHandle" /> object.</summary>
      <returns>An identifier for the current <see cref="T:System.Runtime.InteropServices.GCHandle" /> object.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
      <summary>Gets a value indicating whether the handle is allocated.</summary>
      <returns>true if the handle is allocated; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
      <summary>Returns a value indicating whether two <see cref="T:System.Runtime.InteropServices.GCHandle" /> objects are equal.</summary>
      <returns>true if the <paramref name="a" /> and <paramref name="b" /> parameters are equal; otherwise, false.</returns>
      <param name="a">A <see cref="T:System.Runtime.InteropServices.GCHandle" /> object to compare with the <paramref name="b" /> parameter. </param>
      <param name="b">A <see cref="T:System.Runtime.InteropServices.GCHandle" /> object to compare with the <paramref name="a" /> parameter.  </param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
      <summary>A <see cref="T:System.Runtime.InteropServices.GCHandle" /> is stored using an internal integer representation.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.GCHandle" />.</returns>
      <param name="value">An <see cref="T:System.IntPtr" /> that indicates the handle for which the conversion is required. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
      <summary>A <see cref="T:System.Runtime.InteropServices.GCHandle" /> is stored using an internal integer representation.</summary>
      <returns>The integer value.</returns>
      <param name="value">The <see cref="T:System.Runtime.InteropServices.GCHandle" /> for which the integer is required. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
      <summary>Returns a value indicating whether two <see cref="T:System.Runtime.InteropServices.GCHandle" /> objects are not equal.</summary>
      <returns>true if the <paramref name="a" /> and <paramref name="b" /> parameters are not equal; otherwise, false.</returns>
      <param name="a">A <see cref="T:System.Runtime.InteropServices.GCHandle" /> object to compare with the <paramref name="b" /> parameter. </param>
      <param name="b">A <see cref="T:System.Runtime.InteropServices.GCHandle" /> object to compare with the <paramref name="a" /> parameter.  </param>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.Target">
      <summary>Gets or sets the object this handle represents.</summary>
      <returns>The object this handle represents.</returns>
      <exception cref="T:System.InvalidOperationException">The handle was freed, or never initialized. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
      <summary>Returns the internal integer representation of a <see cref="T:System.Runtime.InteropServices.GCHandle" /> object.</summary>
      <returns>An <see cref="T:System.IntPtr" /> object that represents a <see cref="T:System.Runtime.InteropServices.GCHandle" /> object. </returns>
      <param name="value">A <see cref="T:System.Runtime.InteropServices.GCHandle" /> object to retrieve an internal integer representation from.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandleType">
      <summary>Represents the types of handles the <see cref="T:System.Runtime.InteropServices.GCHandle" /> class can allocate.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Weak">
      <summary>This handle type is used to track an object, but allow it to be collected. When an object is collected, the contents of the <see cref="T:System.Runtime.InteropServices.GCHandle" /> are zeroed. Weak references are zeroed before the finalizer runs, so even if the finalizer resurrects the object, the Weak reference is still zeroed.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.WeakTrackResurrection">
      <summary>This handle type is similar to <see cref="F:System.Runtime.InteropServices.GCHandleType.Weak" />, but the handle is not zeroed if the object is resurrected during finalization.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Normal">
      <summary>This handle type represents an opaque handle, meaning you cannot resolve the address of the pinned object through the handle. You can use this type to track an object and prevent its collection by the garbage collector. This enumeration member is useful when an unmanaged client holds the only reference, which is undetectable from the garbage collector, to a managed object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Pinned">
      <summary>This handle type is similar to <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" />, but allows the address of the pinned object to be taken. This prevents the garbage collector from moving the object and hence undermines the efficiency of the garbage collector. Use the <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> method to free the allocated handle as soon as possible.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary>Supplies an explicit <see cref="T:System.Guid" /> when an automatic GUID is undesirable.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> class with the specified GUID.</summary>
      <param name="guid">The <see cref="T:System.Guid" /> to be assigned. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary>Gets the <see cref="T:System.Guid" /> of the class.</summary>
      <returns>The <see cref="T:System.Guid" /> of the class.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleRef">
      <summary>Wraps a managed object holding a handle to a resource that is passed to unmanaged code using platform invoke.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.HandleRef" /> class with the object to wrap and a handle to the resource used by unmanaged code.</summary>
      <param name="wrapper">A managed object that should not be finalized until the platform invoke call returns. </param>
      <param name="handle">An <see cref="T:System.IntPtr" /> that indicates a handle to a resource. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Handle">
      <summary>Gets the handle to a resource.</summary>
      <returns>The handle to a resource.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
      <summary>Returns the handle to a resource of the specified <see cref="T:System.Runtime.InteropServices.HandleRef" /> object.</summary>
      <returns>The handle to a resource of the specified <see cref="T:System.Runtime.InteropServices.HandleRef" /> object.</returns>
      <param name="value">The object that needs a handle. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
      <summary>Returns the internal integer representation of a <see cref="T:System.Runtime.InteropServices.HandleRef" /> object.</summary>
      <returns>An <see cref="T:System.IntPtr" /> object that represents a <see cref="T:System.Runtime.InteropServices.HandleRef" /> object.</returns>
      <param name="value">A <see cref="T:System.Runtime.InteropServices.HandleRef" /> object to retrieve an internal integer representation from.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Wrapper">
      <summary>Gets the object holding the handle to a resource.</summary>
      <returns>The object holding the handle to a resource.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary>Provides a way for clients to access the actual object, rather than the adapter object handed out by a custom marshaler.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary>Provides access to the underlying object wrapped by a custom marshaler.</summary>
      <returns>The object contained by the adapter object.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomFactory">
      <summary>Enables users to write activation code for managed objects that extend <see cref="T:System.MarshalByRefObject" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)">
      <summary>Creates a new instance of the specified type.</summary>
      <returns>A <see cref="T:System.MarshalByRefObject" /> associated with the specified type.</returns>
      <param name="serverType">The type to activate. </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomMarshaler">
      <summary>Provides custom wrappers for handling method calls.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)">
      <summary>Performs necessary cleanup of the managed data when it is no longer needed.</summary>
      <param name="ManagedObj">The managed object to be destroyed. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)">
      <summary>Performs necessary cleanup of the unmanaged data when it is no longer needed.</summary>
      <param name="pNativeData">A pointer to the unmanaged data to be destroyed. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize">
      <summary>Returns the size of the native data to be marshaled.</summary>
      <returns>The size, in bytes, of the native data.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)">
      <summary>Converts the managed data to unmanaged data.</summary>
      <returns>A pointer to the COM view of the managed object.</returns>
      <param name="ManagedObj">The managed object to be converted. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary>Converts the unmanaged data to managed data.</summary>
      <returns>An object that represents the managed view of the COM data.</returns>
      <param name="pNativeData">A pointer to the unmanaged data to be wrapped. </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary>Enables developers to provide a custom, managed implementation of the IUnknown::QueryInterface(REFIID riid, void **ppvObject) method.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary>Returns an interface according to a specified interface ID.</summary>
      <returns>One of the enumeration values that indicates whether a custom implementation of IUnknown::QueryInterface was used.</returns>
      <param name="iid">The GUID of the requested interface.</param>
      <param name="ppv">A reference to the requested interface, when this method returns.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.IDispatchImplAttribute">
      <summary>Indicates which IDispatch implementation the common language runtime uses when exposing dual interfaces and dispinterfaces to COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.IDispatchImplAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the IDispatchImplAttribute class with specified <see cref="T:System.Runtime.InteropServices.IDispatchImplType" /> value.</summary>
      <param name="implType">Indicates which <see cref="T:System.Runtime.InteropServices.IDispatchImplType" /> enumeration will be used. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.IDispatchImplAttribute.#ctor(System.Runtime.InteropServices.IDispatchImplType)">
      <summary>Initializes a new instance of the IDispatchImplAttribute class with specified <see cref="T:System.Runtime.InteropServices.IDispatchImplType" /> value.</summary>
      <param name="implType">Indicates which <see cref="T:System.Runtime.InteropServices.IDispatchImplType" /> enumeration will be used. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.IDispatchImplAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.IDispatchImplType" /> value used by the class.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.IDispatchImplType" /> value used by the class.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.IDispatchImplType">
      <summary>Indicates which IDispatch implementation to use for a particular class.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDispatchImplType.SystemDefinedImpl">
      <summary>Specifies that the common language runtime decides which IDispatch implementation to use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDispatchImplType.InternalImpl">
      <summary>Specifies that the IDispatch implemenation is supplied by the runtime.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDispatchImplType.CompatibleImpl">
      <summary>Specifies that the IDispatch implementation is supplied by passing the type information for the object to the COM CreateStdDispatch API method.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.IDLDESC">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.IDLDESC" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLDESC.dwReserved">
      <summary>Reserved; set to null.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLDESC.wIDLFlags">
      <summary>Indicates an <see cref="T:System.Runtime.InteropServices.IDLFLAG" /> value describing the type.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.IDLFLAG">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.IDLFLAG" /> instead. </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLFLAG.IDLFLAG_NONE">
      <summary>Whether the parameter passes or receives information is unspecified.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLFLAG.IDLFLAG_FIN">
      <summary>The parameter passes information from the caller to the callee.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLFLAG.IDLFLAG_FOUT">
      <summary>The parameter returns information from the callee to the caller.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLFLAG.IDLFLAG_FLCID">
      <summary>The parameter is the local identifier of a client application.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLFLAG.IDLFLAG_FRETVAL">
      <summary>The parameter is the return value of the member.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.IMPLTYPEFLAGS">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary>The interface or dispinterface represents the default for the source or sink.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary>This member of a coclass is called rather than implemented.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary>The member should not be displayed or programmable by users.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary>Sinks receive events through the virtual function table (VTBL).</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
      <summary>Indicates that the types defined within an assembly were originally defined in a type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute" /> class with the name of the original type library file.</summary>
      <param name="tlbFile">The location of the original type library file. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.Value">
      <summary>Gets the name of the original type library file.</summary>
      <returns>The name of the original type library file.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ImporterEventKind">
      <summary>Describes the callbacks that the type library importer makes when importing a type library.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ImporterEventKind.NOTIF_TYPECONVERTED">
      <summary>Specifies that the event is invoked when a type has been imported.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ImporterEventKind.NOTIF_CONVERTWARNING">
      <summary>Specifies that the event is invoked when a warning occurs during conversion.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ImporterEventKind.ERROR_REFTOINVALIDTYPELIB">
      <summary>This property is not supported in this version of the .NET Framework.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.InAttribute">
      <summary>Indicates that data should be marshaled from the caller to the callee, but not back to the caller.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary>Indicates whether a managed interface is dual, dispatch-only, or IUnknown -only when exposed to COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> enumeration member.</summary>
      <param name="interfaceType">Describes how the interface should be exposed to COM clients. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> enumeration member.</summary>
      <param name="interfaceType">One of the <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> values that describes how the interface should be exposed to COM clients. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> value that describes how the interface should be exposed to COM.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> value that describes how the interface should be exposed to COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary>The exception thrown when an invalid COM object is used.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary>Initializes an instance of the InvalidComObjectException with default properties.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the COMException class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary>Initializes an instance of the InvalidComObjectException with a message.</summary>
      <param name="message">The message that indicates the reason for the exception. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InvalidComObjectException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary>The exception thrown by the marshaler when it encounters an argument of a variant type that can not be marshaled to managed code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary>Initializes a new instance of the InvalidOleVariantTypeException class with default values.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the InvalidOleVariantTypeException class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary>Initializes a new instance of the InvalidOleVariantTypeException class with a specified message.</summary>
      <param name="message">The message that indicates the reason for the exception. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Runtime.InteropServices.INVOKEKIND">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.INVOKEKIND.INVOKE_FUNC">
      <summary>The member is called using a normal function invocation syntax.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary>The function is invoked using a normal property-access syntax.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary>The function is invoked using a property value assignment syntax.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary>The function is invoked using a property reference assignment syntax.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.IRegistrationServices">
      <summary>Provides a set of services for registering and unregistering managed assemblies for use from COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.GetManagedCategoryGuid">
      <summary>Returns the GUID of the COM category that contains the managed classes.</summary>
      <returns>The GUID of the COM category that contains the managed classes.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.GetProgIdForType(System.Type)">
      <summary>Retrieves the COM ProgID for a specified type.</summary>
      <returns>The ProgID for the specified type.</returns>
      <param name="type">The type whose ProgID is being requested. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.GetRegistrableTypesInAssembly(System.Reflection.Assembly)">
      <summary>Retrieves a list of classes in an assembly that would be registered by a call to <see cref="M:System.Runtime.InteropServices.IRegistrationServices.RegisterAssembly(System.Reflection.Assembly,System.Runtime.InteropServices.AssemblyRegistrationFlags)" />.</summary>
      <returns>A <see cref="T:System.Type" /> array containing a list of classes in <paramref name="assembly" />.</returns>
      <param name="assembly">The assembly to search for classes. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.RegisterAssembly(System.Reflection.Assembly,System.Runtime.InteropServices.AssemblyRegistrationFlags)">
      <summary>Registers the classes in a managed assembly to enable creation from COM.</summary>
      <returns>true if <paramref name="assembly" /> contains types that were successfully registered; otherwise false if the assembly contains no eligible types.</returns>
      <param name="assembly">The assembly to be registered. </param>
      <param name="flags">An <see cref="T:System.Runtime.InteropServices.AssemblyRegistrationFlags" /> value indicating any special settings needed when registering <paramref name="assembly" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The full name of <paramref name="assembly" /> is null.-or- A method marked with <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> is not static.-or- There is more than one method marked with <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> at a given level of the hierarchy.-or- The signature of the method marked with <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> is not valid. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.RegisterTypeForComClients(System.Type,System.Guid@)">
      <summary>Registers the specified type with COM using the specified GUID.</summary>
      <param name="type">The type to be registered for use from COM. </param>
      <param name="g">GUID used to register the specified type. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.TypeRepresentsComType(System.Type)">
      <summary>Determines whether the specified type is a COM type.</summary>
      <returns>true if the specified type is a COM type; otherwise false.</returns>
      <param name="type">The type to determine if it is a COM type. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.TypeRequiresRegistration(System.Type)">
      <summary>Determines whether the specified type requires registration.</summary>
      <returns>true if the type must be registered for use from COM; otherwise false.</returns>
      <param name="type">The type to check for COM registration requirements. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.UnregisterAssembly(System.Reflection.Assembly)">
      <summary>Unregisters the classes in a managed assembly.</summary>
      <returns>true if <paramref name="assembly" /> contains types that were successfully unregistered; otherwise false if the assembly contains no eligible types.</returns>
      <param name="assembly">The assembly to be unregistered. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The full name of <paramref name="assembly" /> is null.-or- A method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> is not static.-or- There is more than one method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> at a given level of the hierarchy.-or- The signature of the method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> is not valid. </exception>
    </member>
    <member name="T:System.Runtime.InteropServices.ITypeLibConverter">
      <summary>Provides a set of services that convert a managed assembly to a COM type library and vice versa.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibConverter.ConvertAssemblyToTypeLib(System.Reflection.Assembly,System.String,System.Runtime.InteropServices.TypeLibExporterFlags,System.Runtime.InteropServices.ITypeLibExporterNotifySink)">
      <summary>Converts an assembly to a COM type library.</summary>
      <returns>An object that implements the ITypeLib interface.</returns>
      <param name="assembly">The assembly to convert. </param>
      <param name="typeLibName">The file name of the resulting type library. </param>
      <param name="flags">A <see cref="T:System.Runtime.InteropServices.TypeLibExporterFlags" /> value indicating any special settings. </param>
      <param name="notifySink">The <see cref="T:System.Runtime.InteropServices.ITypeLibExporterNotifySink" /> interface implemented by the caller. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibConverter.ConvertTypeLibToAssembly(System.Object,System.String,System.Int32,System.Runtime.InteropServices.ITypeLibImporterNotifySink,System.Byte[],System.Reflection.StrongNameKeyPair,System.Boolean)">
      <summary>Converts a COM type library to an assembly.</summary>
      <returns>An <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> object containing the converted type library.</returns>
      <param name="typeLib">The object that implements the ITypeLib interface. </param>
      <param name="asmFileName">The file name of the resulting assembly. </param>
      <param name="flags">A <see cref="T:System.Runtime.InteropServices.TypeLibImporterFlags" /> value indicating any special settings. </param>
      <param name="notifySink">
        <see cref="T:System.Runtime.InteropServices.ITypeLibImporterNotifySink" /> interface implemented by the caller. </param>
      <param name="publicKey">A byte array containing the public key. </param>
      <param name="keyPair">A <see cref="T:System.Reflection.StrongNameKeyPair" /> object containing the public and private cryptographic key pair. </param>
      <param name="unsafeInterfaces">If true, the interfaces require link time checks for <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> permission. If false, the interfaces require run time checks that require a stack walk and are more expensive, but help provide greater protection. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibConverter.ConvertTypeLibToAssembly(System.Object,System.String,System.Runtime.InteropServices.TypeLibImporterFlags,System.Runtime.InteropServices.ITypeLibImporterNotifySink,System.Byte[],System.Reflection.StrongNameKeyPair,System.String,System.Version)">
      <summary>Converts a COM type library to an assembly.</summary>
      <returns>An <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> object containing the converted type library.</returns>
      <param name="typeLib">The object that implements the ITypeLib interface. </param>
      <param name="asmFileName">The file name of the resulting assembly. </param>
      <param name="flags">A <see cref="T:System.Runtime.InteropServices.TypeLibImporterFlags" /> value indicating any special settings. </param>
      <param name="notifySink">
        <see cref="T:System.Runtime.InteropServices.ITypeLibImporterNotifySink" /> interface implemented by the caller. </param>
      <param name="publicKey">A byte array containing the public key. </param>
      <param name="keyPair">A <see cref="T:System.Reflection.StrongNameKeyPair" /> object containing the public and private cryptographic key pair. </param>
      <param name="asmNamespace">The namespace for the resulting assembly. </param>
      <param name="asmVersion">The version of the resulting assembly. If null, the version of the type library is used. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibConverter.GetPrimaryInteropAssembly(System.Guid,System.Int32,System.Int32,System.Int32,System.String@,System.String@)">
      <summary>Gets the name and code base of a primary interop assembly for a specified type library.</summary>
      <returns>true if the primary interop assembly was found in the registry; otherwise false.</returns>
      <param name="g">The GUID of the type library. </param>
      <param name="major">The major version number of the type library. </param>
      <param name="minor">The minor version number of the type library. </param>
      <param name="lcid">The LCID of the type library. </param>
      <param name="asmName">On successful return, the name of the primary interop assembly associated with <paramref name="g" />. </param>
      <param name="asmCodeBase">On successful return, the code base of the primary interop assembly associated with <paramref name="g" />. </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ITypeLibExporterNameProvider">
      <summary>Provides control over the casing of names when exported to a type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibExporterNameProvider.GetNames">
      <summary>Returns a list of names to control the casing of.</summary>
      <returns>An array of strings, where each element contains the name of a type to control casing for.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ITypeLibExporterNotifySink">
      <summary>Provides a callback mechanism for the assembly converter to inform the caller of the status of the conversion, and involve the caller in the conversion process itself.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibExporterNotifySink.ReportEvent(System.Runtime.InteropServices.ExporterEventKind,System.Int32,System.String)">
      <summary>Notifies the caller that an event occured during the conversion of an assembly.</summary>
      <param name="eventKind">An <see cref="T:System.Runtime.InteropServices.ExporterEventKind" /> value indicating the type of event. </param>
      <param name="eventCode">Indicates extra information about the event. </param>
      <param name="eventMsg">A message generated by the event. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibExporterNotifySink.ResolveRef(System.Reflection.Assembly)">
      <summary>Asks the user to resolve a reference to another assembly.</summary>
      <returns>The type library for <paramref name="assembly" />.</returns>
      <param name="assembly">The assembly to resolve. </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ITypeLibImporterNotifySink">
      <summary>Provides a callback mechanism for the type library converter to inform the caller of the status of the conversion, and involve the caller in the conversion process itself.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibImporterNotifySink.ReportEvent(System.Runtime.InteropServices.ImporterEventKind,System.Int32,System.String)">
      <summary>Notifies the caller that an event occured during the conversion of a type library.</summary>
      <param name="eventKind">An <see cref="T:System.Runtime.InteropServices.ImporterEventKind" /> value indicating the type of event. </param>
      <param name="eventCode">Indicates extra information about the event. </param>
      <param name="eventMsg">A message generated by the event. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibImporterNotifySink.ResolveRef(System.Object)">
      <summary>Asks the user to resolve a reference to another type library.</summary>
      <returns>The assembly corresponding to <paramref name="typeLib" />.</returns>
      <param name="typeLib">The object implementing the ITypeLib interface that needs to be resolved. </param>
    </member>
    <member name="T:System.Runtime.InteropServices.LayoutKind">
      <summary>Controls the layout of an object when exported to unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Sequential">
      <summary>The members of the object are laid out sequentially, in the order in which they appear when exported to unmanaged memory. The members are laid out according to the packing specified in <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />, and can be noncontiguous.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Explicit">
      <summary>The precise position of each member of an object in unmanaged memory is explicitly controlled. Each member must use the <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> to indicate the position of that field within the type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Auto">
      <summary>The runtime automatically chooses an appropriate layout for the members of an object in unmanaged memory. Objects defined with this enumeration member cannot be exposed outside of managed code. Attempting to do so generates an exception.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.LCIDConversionAttribute">
      <summary>Indicates that a method's unmanaged signature expects a locale identifier (LCID) parameter.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the LCIDConversionAttribute class with the position of the LCID in the unmanaged signature.</summary>
      <param name="lcid">Indicates the position of the LCID argument in the unmanaged signature, where 0 is the first argument. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.LCIDConversionAttribute.Value">
      <summary>Gets the position of the LCID argument in the unmanaged signature.</summary>
      <returns>The position of the LCID argument in the unmanaged signature, where 0 is the first argument.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.LIBFLAGS">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary>The type library is restricted, and should not be displayed to users.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary>The type library describes controls, and should not be displayed in type browsers intended for nonvisual objects.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary>The type library should not be displayed to users, although its use is not restricted. Should be used by controls. Hosts should create a new type library that wraps the control with extended properties.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary>The type library exists in a persisted form on disk.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute">
      <summary>Provides support for user customization of interop stubs in managed-to-COM interop scenarios.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute" /> class with the specified class type and method name.</summary>
      <param name="classType">The class that contains the required stub method. </param>
      <param name="methodName">The name of the stub method.</param>
      <exception cref="T:System.ArgumentException">The stub method is not in the same assembly as the interface that contains the managed interop method.-or-<paramref name="classType" /> is a generic type.-or-<paramref name="classType" /> is an interface. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="methodName" /> cannot be found.-or-The method is not static or non-generic.-or-The method's parameter list does not match the expected parameter list for the stub.</exception>
      <exception cref="T:System.MethodAccessException">The interface that contains the managed interop method has no access to the stub method, because the stub method has private or protected accessibility, or because of a security issue.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType">
      <summary>Gets the class that contains the required stub method.</summary>
      <returns>The class that contains the customized interop stub.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName">
      <summary>Gets the name of the stub method.</summary>
      <returns>The name of a customized interop stub.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary>Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary>Increments the reference count on the specified interface.</summary>
      <returns>The new value of the reference count on the <paramref name="pUnk" /> parameter.</returns>
      <param name="pUnk">The interface reference count to increment.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary>Allocates a block of memory of specified size from the COM task memory allocator.</summary>
      <returns>An integer representing the address of the block of memory allocated. This memory must be released with <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />.</returns>
      <param name="cb">The size of the block of memory to be allocated.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary>Allocates memory from the unmanaged memory of the process by using the specified number of bytes.</summary>
      <returns>A pointer to the newly allocated memory. This memory must be released using the <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> method.</returns>
      <param name="cb">The required number of bytes in memory.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary>Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.</summary>
      <returns>A pointer to the newly allocated memory. This memory must be released using the <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> method.</returns>
      <param name="cb">The required number of bytes in memory.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup">
      <summary>Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.</summary>
      <returns>true if there are any RCWs available for cleanup; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary>Gets an interface pointer identified by the specified moniker.</summary>
      <returns>An object containing a reference to the interface pointer identified by the <paramref name="monikerName" /> parameter. A moniker is a name, and in this case, the moniker is defined by an interface.</returns>
      <param name="monikerName">The moniker corresponding to the desired interface pointer.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">An unrecognized HRESULT was returned by the unmanaged BindToMoniker method.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary>Changes the strength of an object's COM Callable Wrapper (CCW) handle.</summary>
      <param name="otp">The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.</param>
      <param name="fIsWeak">true to change the strength of the handle on the <paramref name="otp" /> parameter to weak, regardless of its reference count; false to reset the handle strength on <paramref name="otp" /> to be reference counted.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext">
      <summary>Notifies the runtime to clean up all Runtime Callable Wrappers (RCWs) allocated in the current context.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" /> or <paramref name="length" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed character array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed <see cref="T:System.IntPtr" /> array.</summary>
      <param name="source">The memory pointer to copy from. </param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index into the array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.</summary>
      <param name="source">The memory pointer to copy from. </param>
      <param name="destination">The array to copy to. </param>
      <param name="startIndex">The zero-based index in the source array where copying should start. </param>
      <param name="length">The number of array elements to copy. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed <see cref="T:System.IntPtr" /> array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index into the array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from. </param>
      <param name="startIndex">The zero-based index in the source array where copying should start. </param>
      <param name="destination">The memory pointer to copy to. </param>
      <param name="length">The number of array elements to copy. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary>Aggregates a managed object with the specified COM object.</summary>
      <returns>The inner IUnknown pointer of the managed object.</returns>
      <param name="pOuter">The outer IUnknown pointer.</param>
      <param name="o">An object to aggregate.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary>Wraps the specified COM object in an object of the specified type.</summary>
      <returns>The newly wrapped object that is an instance of the desired type.</returns>
      <param name="o">The object to be wrapped. </param>
      <param name="t">The type of wrapper to create. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> must derive from __ComObject. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="t" /> parameter is null.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> cannot be converted to the destination type because it does not support all required interfaces. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary>Frees all substructures that the specified unmanaged memory block points to.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory. </param>
      <param name="structuretype">Type of a formatted class. This provides the layout information necessary to delete the buffer in the <paramref name="ptr" /> parameter.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structureType" /> has an automatic layout. Use sequential or explicit instead.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary>Releases all references to a Runtime Callable Wrapper (RCW) by setting its reference count to 0.</summary>
      <returns>The new value of the reference count of the RCW associated with the <paramref name="o" />parameter, which is 0 (zero) if the release is successful.</returns>
      <param name="o">The RCW to be released.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> is not a valid COM object.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary>Frees a BSTR using the COM SysFreeString function.</summary>
      <param name="ptr">The address of the BSTR to be freed. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary>Frees a block of memory allocated by the unmanaged COM task memory allocator.</summary>
      <param name="ptr">The address of the memory to be freed. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary>Frees memory previously allocated from the unmanaged memory of the process.</summary>
      <param name="hglobal">The handle returned by the original matching call to <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary>Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).</summary>
      <returns>An identifier for the specified type.</returns>
      <param name="type">The type to generate a GUID for. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary>Returns a programmatic identifier (ProgID) for the specified type.</summary>
      <returns>The ProgID of the specified type.</returns>
      <param name="type">The type to get a ProgID for. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="type" /> parameter is not a class that can be create by COM. The class must be public, have a public default constructor, and be COM visible. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetActiveObject(System.String)">
      <summary>Obtains a running instance of the specified object from the running object table (ROT).</summary>
      <returns>The object that was requested; otherwise null. You can cast this object to any COM interface that it supports.</returns>
      <param name="progID">The programmatic identifier (ProgID) of the object that was requested.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">The object was not found.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary>Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.</summary>
      <returns>The interface pointer that represents the specified interface for the object.</returns>
      <param name="o">The object that provides the interface. </param>
      <param name="T">The type of interface that is requested. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="T" /> parameter is not an interface.-or- The type is not visible to COM. -or-The <paramref name="T" /> parameter is a generic type.</exception>
      <exception cref="T:System.InvalidCastException">The <paramref name="o" /> parameter does not support the requested interface. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="o" /> parameter is null.-or- The <paramref name="T" /> parameter is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
      <summary>Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.</summary>
      <returns>The interface pointer that represents the interface for the object.</returns>
      <param name="o">The object that provides the interface.</param>
      <param name="T">The type of interface that is requested.</param>
      <param name="mode">One of the enumeration values that indicates whether to apply an IUnknown::QueryInterface customization that is supplied by an <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="T" /> parameter is not an interface.-or- The type is not visible to COM.-or-The <paramref name="T" /> parameter is a generic type.</exception>
      <exception cref="T:System.InvalidCastException">The object <paramref name="o" /> does not support the requested interface.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="o" /> parameter is null.-or- The <paramref name="T" /> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext(System.Object,System.Type)">
      <summary>Returns an interface pointer that represents the specified interface for an object, if the caller is in the same context as that object.</summary>
      <returns>The interface pointer specified by <paramref name="t" /> that represents the interface for the specified object, or null if the caller is not in the same context as the object.</returns>
      <param name="o">The object that provides the interface.</param>
      <param name="t">The type of interface that is requested.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> is not an interface.-or- The type is not visible to COM.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> does not support the requested interface.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> is null.-or- <paramref name="t" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary>Retrieves data that is referenced by the specified key from the specified COM object.</summary>
      <returns>The data represented by the <paramref name="key" /> parameter in the internal hash table of the <paramref name="obj" /> parameter.</returns>
      <param name="obj">The COM object that contains the data that you want.</param>
      <param name="key">The key in the internal hash table of <paramref name="obj" /> to retrieve the data from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null.-or- <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a COM object.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo(System.Reflection.MemberInfo)">
      <summary>Retrieves the virtual function table (v-table or VTBL) slot for a specified <see cref="T:System.Reflection.MemberInfo" /> type when that type is exposed to COM.</summary>
      <returns>The VTBL slot <paramref name="m" /> identifier when it is exposed to COM.</returns>
      <param name="m">An object that represents an interface method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="m" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="m" /> parameter is not a <see cref="T:System.Reflection.MemberInfo" /> object.-or-The <paramref name="m" /> parameter is not an interface method.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary>Converts an unmanaged function pointer to a delegate.</summary>
      <returns>A delegate instance that can be cast to the appropriate delegate type.</returns>
      <param name="ptr">The unmanaged function pointer to be converted.</param>
      <param name="t">The type of the delegate to be returned.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="t" /> parameter is not a delegate or is generic.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="ptr" /> parameter is null.-or-The <paramref name="t" /> parameter is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)">
      <summary>Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.</summary>
      <returns>The last VTBL slot of the interface when exposed to COM. If the <paramref name="t" /> parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class.</returns>
      <param name="t">A type that represents an interface or class.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary>Retrieves a code that identifies the type of the exception that occurred.</summary>
      <returns>The type of the exception.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary>Converts the specified HRESULT error code to a corresponding <see cref="T:System.Exception" /> object.</summary>
      <returns>An object that represents the converted HRESULT.</returns>
      <param name="errorCode">The HRESULT to be converted.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary>Converts the specified HRESULT error code to a corresponding <see cref="T:System.Exception" /> object, with additional error information passed in an IErrorInfo interface for the exception object.</summary>
      <returns>An object that represents the converted HRESULT and information obtained from <paramref name="errorInfo" />.</returns>
      <param name="errorCode">The HRESULT to be converted.</param>
      <param name="errorInfo">A pointer to the IErrorInfo interface that provides more information about the error. You can specify IntPtr(0) to use the current IErrorInfo interface, or IntPtr(-1) to ignore the current IErrorInfo interface and construct the exception just from the error code. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers">
      <summary>Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.</summary>
      <returns>A pointer to an EXCEPTION_POINTERS structure.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary>Converts a delegate into a function pointer that is callable from unmanaged code.</summary>
      <returns>A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate. </returns>
      <param name="d">The delegate to be passed to unmanaged code.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="d" /> parameter is a generic type.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="d" /> parameter is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary>Returns the instance handle (HINSTANCE) for the specified module.</summary>
      <returns>The HINSTANCE for <paramref name="m" />; or -1 if the module does not have an HINSTANCE.</returns>
      <param name="m">The module whose HINSTANCE is desired.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="m" /> parameter is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary>Converts the specified exception to an HRESULT.</summary>
      <returns>The HRESULT mapped to the supplied exception.</returns>
      <param name="e">Theexception to convert to an HRESULT.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary>Returns the HRESULT corresponding to the last error incurred by Win32 code executed using <see cref="T:System.Runtime.InteropServices.Marshal" />.</summary>
      <returns>The HRESULT corresponding to the last Win32 error code.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)">
      <summary>Returns an IDispatch interface from a managed object.</summary>
      <returns>The IDispatch pointer for the <paramref name="o" /> parameter.</returns>
      <param name="o">The object whose IDispatch interface is requested.</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> does not support the requested interface.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext(System.Object)">
      <summary>Returns an IDispatch interface pointer from a managed object, if the caller is in the same context as that object.</summary>
      <returns>The IDispatch interface pointer for the specified object, or null if the caller is not in the same context as the specified object.</returns>
      <param name="o">The object whose IDispatch interface is requested.</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> does not support the requested interface.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetITypeInfoForType(System.Type)">
      <summary>Returns a <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeInfo" /> interface from a managed type.</summary>
      <returns>A pointer to the ITypeInfo interface for the <paramref name="t" /> parameter.</returns>
      <param name="t">The type whose ITypeInfo interface is being requested.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> is not a visible type to COM.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">A type library is registered for the assembly that contains the type, but the type definition cannot be found.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary>Returns an IUnknown interface from a managed object.</summary>
      <returns>The IUnknown pointer for the <paramref name="o" /> parameter.</returns>
      <param name="o">The object whose IUnknown interface is requested.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext(System.Object)">
      <summary>Returns an IUnknown interface from a managed object, if the caller is in the same context as that object.</summary>
      <returns>The IUnknown pointer for the specified object, or null if the caller is not in the same context as the specified object.</returns>
      <param name="o">The object whose IUnknown interface is requested.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary>Returns the error code returned by the last unmanaged function that was called using platform invoke that has the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> flag set.</summary>
      <returns>The last error code set by a call to the Win32 SetLastError function.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)">
      <summary>Gets a pointer to a runtime-generated function that marshals a call from managed to unmanaged code.</summary>
      <returns>A pointer to the function that will marshal a call from the <paramref name="pfnMethodToWrap" /> parameter to unmanaged code.</returns>
      <param name="pfnMethodToWrap">A pointer to the method to marshal.</param>
      <param name="pbSignature">A pointer to the method signature.</param>
      <param name="cbSignature">The number of bytes in <paramref name="pbSignature" />.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)">
      <summary>Retrieves a <see cref="T:System.Reflection.MemberInfo" /> object for the specified virtual function table (v-table or VTBL) slot.</summary>
      <returns>The object that represents the member at the specified VTBL slot.</returns>
      <param name="t">The type for which the <see cref="T:System.Reflection.MemberInfo" /> is to be retrieved.</param>
      <param name="slot">The VTBL slot.</param>
      <param name="memberType">On successful return, one of the enumeration values that specifies the type of the member. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> is not visible from COM. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary>Converts an object to a COM VARIANT.</summary>
      <param name="obj">The object for which to get a COM VARIANT.</param>
      <param name="pDstNativeVariant">A pointer to receive the VARIANT that corresponds to the <paramref name="obj" /> parameter.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="obj" /> parameter is a generic type.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary>Returns an instance of a type that represents a COM object by a pointer to its IUnknown interface.</summary>
      <returns>An object that represents the specified unmanaged COM object.</returns>
      <param name="pUnk">A pointer to the IUnknown interface. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary>Converts a COM VARIANT to an object.</summary>
      <returns>An object that corresponds to the <paramref name="pSrcNativeVariant" /> parameter.</returns>
      <param name="pSrcNativeVariant">A pointer to a COM VARIANT.</param>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
        <paramref name="pSrcNativeVariant" /> is not a valid VARIANT type.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pSrcNativeVariant" /> has an unsupported type.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary>Converts an array of COM VARIANTs to an array of objects. </summary>
      <returns>An object array that corresponds to <paramref name="aSrcNativeVariant" />.</returns>
      <param name="aSrcNativeVariant">A pointer to the first element of an array of COM VARIANTs.</param>
      <param name="cVars">The count of COM VARIANTs in <paramref name="aSrcNativeVariant" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cVars" /> is a negative number.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary>Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.</summary>
      <returns>The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on IUnknown, and 7 if the interface is based on IDispatch.</returns>
      <param name="t">A type that represents an interface.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> is not visible from COM.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie(System.Int32)">
      <summary>Converts a fiber cookie into the corresponding <see cref="T:System.Threading.Thread" /> instance.</summary>
      <returns>A thread that corresponds to the <paramref name="cookie" /> parameter.</returns>
      <param name="cookie">An integer that represents a fiber cookie.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="cookie" /> parameter is 0.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)">
      <summary>Returns a managed object of a specified type that represents a COM object.</summary>
      <returns>An instance of the class corresponding to the <see cref="T:System.Type" /> object that represents the requested unmanaged COM object.</returns>
      <param name="pUnk">A pointer to the IUnknown interface of the unmanaged object.</param>
      <param name="t">The type of the requested managed class.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> is not attributed with <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo(System.IntPtr)">
      <summary>Converts an unmanaged ITypeInfo object into a managed <see cref="T:System.Type" /> object.</summary>
      <returns>A managed type that represents the unmanaged ITypeInfo object.</returns>
      <param name="piTypeInfo">The ITypeInfo interface to marshal. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
      <summary>Retrieves the name of the type represented by an ITypeInfo object.</summary>
      <returns>The name of the type that the <paramref name="typeInfo" /> parameter points to.</returns>
      <param name="typeInfo">An object that represents an ITypeInfo pointer.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeInfo" /> parameter is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.UCOMITypeInfo)">
      <summary>Retrieves the name of the type represented by an ITypeInfo object.</summary>
      <returns>The name of the type that the <paramref name="pTI" /> parameter points to.</returns>
      <param name="pTI">An object that represents an ITypeInfo pointer. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.ComTypes.ITypeLib)">
      <summary>Retrieves the library identifier (LIBID) of a type library.</summary>
      <returns>The LIBID of the specified type library.</returns>
      <param name="typelib">The type library whose LIBID is to be retrieved.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.UCOMITypeLib)">
      <summary>Retrieves the library identifier (LIBID) of a type library.</summary>
      <returns>The LIBID of the type library that the <paramref name="pTLB" /> parameter points to.</returns>
      <param name="pTLB">The type library whose LIBID is to be retrieved. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly(System.Reflection.Assembly)">
      <summary>Retrieves the library identifier (LIBID) that is assigned to a type library when it was exported from the specified assembly.</summary>
      <returns>The LIBID that is assigned to a type library when it is exported from the specified assembly.</returns>
      <param name="asm">The assembly from which the type library was exported.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asm" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.ComTypes.ITypeLib)">
      <summary>Retrieves the LCID of a type library.</summary>
      <returns>The LCID of the type library that the <paramref name="typelib" /> parameter points to.</returns>
      <param name="typelib">The type library whose LCID is to be retrieved.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.UCOMITypeLib)">
      <summary>Retrieves the LCID of a type library.</summary>
      <returns>The LCID of the type library that the <paramref name="pTLB" /> parameter points to.</returns>
      <param name="pTLB">The type library whose LCID is to be retrieved.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.ComTypes.ITypeLib)">
      <summary>Retrieves the name of a type library.</summary>
      <returns>The name of the type library that the <paramref name="typelib" /> parameter points to.</returns>
      <param name="typelib">The type library whose name is to be retrieved.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typelib" /> parameter is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.UCOMITypeLib)">
      <summary>Retrieves the name of a type library.</summary>
      <returns>The name of the type library that the <paramref name="pTLB" /> parameter points to.</returns>
      <param name="pTLB">The type library whose name is to be retrieved.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly(System.Reflection.Assembly,System.Int32@,System.Int32@)">
      <summary>Retrieves the version number of a type library that will be exported from the specified assembly.</summary>
      <param name="inputAssembly">A managed assembly.</param>
      <param name="majorVersion">The major version number.</param>
      <param name="minorVersion">The minor version number.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputAssembly" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary>Creates a unique Runtime Callable Wrapper (RCW) object for a given IUnknown interface.</summary>
      <returns>A unique RCW for the specified IUnknown interface.</returns>
      <param name="unknown">A managed pointer to an IUnknown interface.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)">
      <summary>Gets a pointer to a runtime-generated function that marshals a call from unmanaged to managed code.</summary>
      <returns>A pointer to a function that will marshal a call from <paramref name="pfnMethodToWrap" /> to managed code.</returns>
      <param name="pfnMethodToWrap">A pointer to the method to marshal.</param>
      <param name="pbSignature">A pointer to the method signature.</param>
      <param name="cbSignature">The number of bytes in <paramref name="pbSignature" />.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary>Indicates whether a specified object represents a COM object.</summary>
      <returns>true if the <paramref name="o" /> parameter is a COM type; otherwise, false.</returns>
      <param name="o">The object to check.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)">
      <summary>Indicates whether a type is visible to COM clients.</summary>
      <returns>true if the type is visible to COM; otherwise, false.</returns>
      <param name="t">The type to check for COM visibility.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.NumParamBytes(System.Reflection.MethodInfo)">
      <summary>Calculates the number of bytes in unmanaged memory that are required to hold the parameters for the specified method.</summary>
      <returns>The number of bytes required to represent the method parameters in unmanaged memory.</returns>
      <param name="m">The method to be checked.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="m" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="m" /> parameter is not a <see cref="T:System.Reflection.MethodInfo" /> object.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary>Returns the field offset of the unmanaged form of the managed class.</summary>
      <returns>The offset, in bytes, for the <paramref name="fieldName" /> parameter within the specified class that is declared by platform invoke.</returns>
      <param name="t">A value type or formatted reference type that specifies the managed class. You must apply the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> to the class.</param>
      <param name="fieldName">The field within the <paramref name="t" /> parameter.</param>
      <exception cref="T:System.ArgumentException">The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="t" /> parameter is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary>Executes one-time method setup tasks without calling the method.</summary>
      <param name="m">The method to be checked.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="m" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="m" /> parameter is not a <see cref="T:System.Reflection.MethodInfo" /> object.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary>Performs a pre-link check for all methods on a class.</summary>
      <param name="c">The class whose methods are to be checked.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="c" /> parameter is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary>Copies all characters up to the first null character from an unmanaged ANSI string to a managed <see cref="T:System.String" />, and widens each ANSI character to Unicode.</summary>
      <returns>A managed string that holds a copy of the unmanaged ANSI string. If <paramref name="ptr" /> is null, the method returns a null string.</returns>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary>Allocates a managed <see cref="T:System.String" />, copies a specified number of characters from an unmanaged ANSI string into it, and widens each ANSI character to Unicode.</summary>
      <returns>A managed string that holds a copy of the native ANSI string if the value of the <paramref name="ptr" /> parameter is not null; otherwise, this method returns null.</returns>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <param name="len">The byte count of the input string to copy.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" /> is less than zero.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies all characters up to the first null character from a string stored in unmanaged memory into it.</summary>
      <returns>A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr" /> parameter is not null; otherwise, this method returns null.</returns>
      <param name="ptr">For Unicode platforms, the address of the first Unicode character.-or- For ANSI plaforms, the address of the first ANSI character.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies the specified number of characters from a string stored in unmanaged memory into it.</summary>
      <returns>A managed string that holds a copy of the native string if the value of the <paramref name="ptr" /> parameter is not null; otherwise, this method returns null.</returns>
      <param name="ptr">For Unicode platforms, the address of the first Unicode character.-or- For ANSI plaforms, the address of the first ANSI character.</param>
      <param name="len">The number of characters to copy.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" /> is less than zero.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies a BSTR string stored in unmanaged memory into it.</summary>
      <returns>A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr" /> parameter is not null; otherwise, this method returns null.</returns>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies all characters up to the first null character from an unmanaged Unicode string into it.</summary>
      <returns>A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr" /> parameter is not null; otherwise, this method returns null.</returns>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies a specified number of characters from an unmanaged Unicode string into it.</summary>
      <returns>A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr" /> parameter is not null; otherwise, this method returns null.</returns>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <param name="len">The number of Unicode characters to copy.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary>Marshals data from an unmanaged block of memory to a managed object.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <param name="structure">The object to which the data is to be copied. This must be an instance of a formatted class.</param>
      <exception cref="T:System.ArgumentException">Structure layout is not sequential or explicit.-or- Structure is a boxed value type.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary>Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.</summary>
      <returns>A managed object containing the data pointed to by the <paramref name="ptr" /> parameter.</returns>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <param name="structureType">The type of object to be created. This object must represent a formatted class or a structure.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="structureType" /> parameter layout is not sequential or explicit.-or-The <paramref name="structureType" /> parameter is a generic type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structureType" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary>Requests a pointer to a specified interface from a COM object.</summary>
      <returns>An HRESULT that indicates the success or failure of the call.</returns>
      <param name="pUnk">The interface to be queried.</param>
      <param name="iid">The interface identifier (IID) of the requested interface.</param>
      <param name="ppv">When this method returns, contains a reference to the returned interface.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary>Reads a single byte from unmanaged memory.</summary>
      <returns>The byte read from unmanaged memory.</returns>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.-or-<paramref name="ptr" /> is null. -or-<paramref name="ptr" /> is invalid.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary>Reads a single byte at a given offset (or index) from unmanaged memory.</summary>
      <returns>The byte read from unmanaged memory at the given offset.</returns>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary>Reads a single byte at a given offset (or index) from unmanaged memory. </summary>
      <returns>The byte read from unmanaged memory at the given offset.</returns>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary>Reads a 16-bit signed integer from unmanaged memory.</summary>
      <returns>The 16-bit signed integer read from unmanaged memory.</returns>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.-or-<paramref name="ptr" /> is null.-or-<paramref name="ptr" /> is invalid.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary>Reads a 16-bit signed integer at a given offset from unmanaged memory.</summary>
      <returns>The 16-bit signed integer read from unmanaged memory at the given offset.</returns>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary>Reads a 16-bit signed integer at a given offset from unmanaged memory.</summary>
      <returns>The 16-bit signed integer read from unmanaged memory at the given offset.</returns>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary>Reads a 32-bit signed integer from unmanaged memory.</summary>
      <returns>The 32-bit signed integer read from unmanaged memory.</returns>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.-or-<paramref name="ptr" /> is null.-or-<paramref name="ptr" /> is invalid.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary>Reads a 32-bit signed integer at a given offset from unmanaged memory.</summary>
      <returns>The 32-bit signed integer read from unmanaged memory.</returns>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary>Reads a 32-bit signed integer at a given offset from unmanaged memory.</summary>
      <returns>The 32-bit signed integer read from unmanaged memory at the given offset.</returns>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary>Reads a 64-bit signed integer from unmanaged memory.</summary>
      <returns>The 64-bit signed integer read from unmanaged memory.</returns>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.-or-<paramref name="ptr" /> is null.-or-<paramref name="ptr" /> is invalid.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary>Reads a 64-bit signed integer at a given offset from unmanaged memory.</summary>
      <returns>The 64-bit signed integer read from unmanaged memory at the given offset.</returns>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary>Reads a 64-bit signed integer at a given offset from unmanaged memory.</summary>
      <returns>The 64-bit signed integer read from unmanaged memory at the given offset.</returns>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary>Reads a processor native-sized integer from unmanaged memory.</summary>
      <returns>The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.</returns>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.-or-<paramref name="ptr" /> is null. -or-<paramref name="ptr" /> is invalid.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary>Reads a processor native sized integer at a given offset from unmanaged memory.</summary>
      <returns>The integer read from unmanaged memory at the given offset.</returns>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary>Reads a processor native sized integer from unmanaged memory.</summary>
      <returns>The integer read from unmanaged memory at the given offset.</returns>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary>Resizes a block of memory previously allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />.</summary>
      <returns>An integer representing the address of the reallocated block of memory. This memory must be released with <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />.</returns>
      <param name="pv">A pointer to memory allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />.</param>
      <param name="cb">The new size of the allocated block.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary>Resizes a block of memory previously allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</summary>
      <returns>A pointer to the reallocated memory. This memory must be released using <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.</returns>
      <param name="pv">A pointer to memory allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</param>
      <param name="cb">The new size of the allocated block.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary>Decrements the reference count on the specified interface.</summary>
      <returns>The new value of the reference count on the interface specified by the <paramref name="pUnk" /> parameter.</returns>
      <param name="pUnk">The interface to release.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary>Decrements the reference count of the specified Runtime Callable Wrapper (RCW) associated with the specified COM object.</summary>
      <returns>The new value of the reference count of the RCW associated with <paramref name="o" />. This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.</returns>
      <param name="o">The COM object to release.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> is not a valid COM object.-or-<paramref name="o" /> is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseThreadCache">
      <summary>Releases the thread cache.</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)">
      <summary>Allocates a BSTR and copies the contents of a managed <see cref="T:System.Security.SecureString" /> object into it.</summary>
      <returns>The address, in unmanaged memory, where the <paramref name="s" /> parameter was copied to, or 0 if a null object was supplied.</returns>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The current computer is not running Microsoft Windows 2000 Service Pack 3 or later.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString" /> object to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <returns>The address, in unmanaged memory, where the <paramref name="s" /> parameter was copied to, or 0 if a null object was supplied.</returns>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The current computer is not running Microsoft Windows 2000 Service Pack 3 or later.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString" /> object to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <returns>The address, in unmanaged memory, where the <paramref name="s" /> parameter was copied to, or 0 if a null object was supplied.</returns>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The current computer is not running Microsoft Windows 2000 Service Pack 3 or later.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString" /> into unmanaged memory, converting into ANSI format as it copies.</summary>
      <returns>The address, in unmanaged memory, to where the <paramref name="s" /> parameter was copied, or 0 if a null object was supplied.</returns>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The current computer is not running Microsoft Windows 2000 Service Pack 3 or later.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString" /> into unmanaged memory.</summary>
      <returns>The address, in unmanaged memory, to where the <paramref name="s" /> parameter was copied, or 0 if a null object was supplied.</returns>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The current computer is not running Microsoft Windows 2000 Service Pack 3 or later.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)">
      <summary>Sets data referenced by the specified key in the specified COM object.</summary>
      <returns>true if the data was set successfully; otherwise, false.</returns>
      <param name="obj">The COM object in which to store the data.</param>
      <param name="key">The key in the internal hash table of the COM object in which to store the data.</param>
      <param name="data">The data to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null.-or- <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a COM object.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary>Returns the unmanaged size of an object in bytes.</summary>
      <returns>The size of the specified object in unmanaged code.</returns>
      <param name="structure">The object whose size is to be returned.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="structure" /> parameter is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary>Returns the size of an unmanaged type in bytes.</summary>
      <returns>The size of the specified type in unmanaged code.</returns>
      <param name="t">The type whose size is to be returned.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="t" /> parameter is a generic type.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="t" /> parameter is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary>Allocates a BSTR and copies the contents of a managed <see cref="T:System.String" /> into it.</summary>
      <returns>An unmanaged pointer to the BSTR, or 0 if <paramref name="s" /> is null.</returns>
      <param name="s">The managed string to be copied.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length for <paramref name="s" /> is out of range.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <returns>An integer representing a pointer to the block of memory allocated for the string, or 0 if <paramref name="s" /> is null.</returns>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="s" /> parameter exceeds the maximum length allowed by the operating system.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <returns>The allocated memory block, or 0 if <paramref name="s" /> is null.</returns>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length for <paramref name="s" /> is out of range.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <returns>An integer representing a pointer to the block of memory allocated for the string, or 0 if s is null.</returns>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="s" /> parameter exceeds the maximum length allowed by the operating system.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> into unmanaged memory, converting into ANSI format as it copies.</summary>
      <returns>The address, in unmanaged memory, to where <paramref name="s" /> was copied, or 0 if <paramref name="s" /> is null.</returns>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="s" /> parameter exceeds the maximum length allowed by the operating system.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> into unmanaged memory, converting into ANSI format if required.</summary>
      <returns>The address, in unmanaged memory, to where the string was copied, or 0 if <paramref name="s" /> is null.</returns>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> into unmanaged memory.</summary>
      <returns>The address, in unmanaged memory, to where the <paramref name="s" /> was copied, or 0 if <paramref name="s" /> is null.</returns>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.OutOfMemoryException">The method could not allocate enough native heap memory.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="s" /> parameter exceeds the maximum length allowed by the operating system.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary>Marshals data from a managed object to an unmanaged block of memory.</summary>
      <param name="structure">A managed object holding the data to be marshaled. This object must be an instance of a formatted class.</param>
      <param name="ptr">A pointer to an unmanaged block of memory, which must be allocated before this method is called.</param>
      <param name="fDeleteOld">true to have the <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> method called on the <paramref name="ptr" /> parameter before this method executes. Note that passing false can lead to a memory leak.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="structure" /> parameter is a generic type.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary>Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary>Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary>Throws an exception with a specific failure HRESULT value.</summary>
      <param name="errorCode">The HRESULT corresponding to the desired exception.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary>Throws an exception with a specific failure HRESULT, based on the specified IErrorInfo Interface interface.</summary>
      <param name="errorCode">The HRESULT corresponding to the desired exception.</param>
      <param name="errorInfo">A pointer to the IErrorInfo Interface interface provided by the COM object.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary>Gets the address of the element at the specified index inside the specified array.</summary>
      <returns>The address of <paramref name="index" /> inside <paramref name="arr" />.</returns>
      <param name="arr">The array that contains the desired element.</param>
      <param name="index">The index in the <paramref name="arr" /> parameter of the desired element.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary>Writes a single byte value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.-or-<paramref name="ptr" /> is null.-or-<paramref name="ptr" /> is invalid.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary>Writes a single byte value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary>Writes a single byte value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary>Writes a character as a 16-bit integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.-or-<paramref name="ptr" /> is null.-or-<paramref name="ptr" /> is invalid.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary>Writes a 16-bit integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.-or-<paramref name="ptr" /> is null.-or-<paramref name="ptr" /> is invalid.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in the native heap to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary>Writes a 16-bit signed integer value into unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing. </param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary>Writes a 32-bit signed integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.-or-<paramref name="ptr" /> is null. -or-<paramref name="ptr" /> is invalid.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary>Writes a 32-bit signed integer value into unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary>Writes a 32-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary>Writes a 64-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary>Writes a 64-bit signed integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.-or-<paramref name="ptr" /> is null.-or-<paramref name="ptr" /> is invalid.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary>Writes a 64-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary>Writes a processor native-sized integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary>Writes a processor native sized integer value into unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.-or-<paramref name="ptr" /> is null.-or-<paramref name="ptr" /> is invalid.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary>Writes a processor native sized integer value to unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)">
      <summary>Frees a BSTR pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" /> method.</summary>
      <param name="s">The address of the BSTR to free.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
      <summary>Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" /> method.</summary>
      <param name="s">The address of the unmanaged string to free.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
      <summary>Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" /> method.</summary>
      <param name="s">The address of the unmanaged string to free.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
      <summary>Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" /> method.</summary>
      <param name="s">The address of the unmanaged string to free.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
      <summary>Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" /> method.</summary>
      <param name="s">The address of the unmanaged string to free.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary>Indicates how to marshal the data between managed and unmanaged code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> value.</summary>
      <param name="unmanagedType">The value the data is to be marshaled as. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> enumeration member.</summary>
      <param name="unmanagedType">The value the data is to be marshaled as. </param>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary>Specifies the element type of the unmanaged <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> or <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex">
      <summary>Specifies the parameter index of the unmanaged iid_is attribute used by COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary>Provides additional information to a custom marshaler.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary>Specifies the fully qualified name of a custom marshaler.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary>Implements <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> as a type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary>Indicates the element type of the <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary>Indicates the user-defined element type of the <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary>Indicates the number of elements in the fixed-length array or the number of characters (not bytes) in a string to import.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary>Indicates the zero-based parameter that contains the count of array elements, similar to size_is in COM.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> value the data is to be marshaled as.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> value the data is to be marshaled as.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary>The exception that is thrown by the marshaler when it encounters a <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> it does not support.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary>Initializes a new instance of the MarshalDirectiveException class with default properties.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the MarshalDirectiveException class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary>Initializes a new instance of the MarshalDirectiveException class with a specified error message.</summary>
      <param name="message">The error message that specifies the reason for the exception. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.MarshalDirectiveException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ObjectCreationDelegate">
      <summary>Creates a COM object.</summary>
      <returns>An <see cref="T:System.IntPtr" /> object that represents the IUnknown interface of the COM object.</returns>
      <param name="aggregator">A pointer to the managed object's IUnknown interface. </param>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary>Indicates that a parameter is optional.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary>Initializes a new instance of the OptionalAttribute class with default values.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OutAttribute">
      <summary>Indicates that data should be marshaled from callee back to caller.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OutAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.OutAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PARAMDESC">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.PARAMDESC" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMDESC.lpVarValue">
      <summary>Represents a pointer to a value that is being passed between processes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMDESC.wParamFlags">
      <summary>Represents bitmask values that describe the structure element, parameter, or return value.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PARAMFLAG">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.PARAMFLAG" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMFLAG.PARAMFLAG_NONE">
      <summary>Whether the parameter passes or receives information is unspecified.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMFLAG.PARAMFLAG_FIN">
      <summary>The parameter passes information from the caller to the callee.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMFLAG.PARAMFLAG_FOUT">
      <summary>The parameter returns information from the callee to the caller.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMFLAG.PARAMFLAG_FLCID">
      <summary>The parameter is the local identifier of a client application.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary>The parameter is the return value of the member.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMFLAG.PARAMFLAG_FOPT">
      <summary>The parameter is optional.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary>The parameter has default behaviors defined.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary>The parameter has custom data.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary>Indicates that the HRESULT or retval signature transformation that takes place during COM interop calls should be suppressed.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute">
      <summary>Indicates that the attributed assembly is a primary interop assembly.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute" /> class with the major and minor version numbers of the type library for which this assembly is the primary interop assembly.</summary>
      <param name="major">The major version of the type library for which this assembly is the primary interop assembly. </param>
      <param name="minor">The minor version of the type library for which this assembly is the primary interop assembly. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MajorVersion">
      <summary>Gets the major version number of the type library for which this assembly is the primary interop assembly.</summary>
      <returns>The major version number of the type library for which this assembly is the primary interop assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MinorVersion">
      <summary>Gets the minor version number of the type library for which this assembly is the primary interop assembly.</summary>
      <returns>The minor version number of the type library for which this assembly is the primary interop assembly.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ProgIdAttribute">
      <summary>Allows the user to specify the ProgID of a class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ProgIdAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the ProgIdAttribute with the specified ProgID.</summary>
      <param name="progId">The ProgID to be assigned to the class. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.ProgIdAttribute.Value">
      <summary>Gets the ProgID of the class.</summary>
      <returns>The ProgID of the class.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.RegistrationClassContext">
      <summary>Specifies the set of execution contexts in which a class object will be made available for requests to construct instances.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationClassContext.InProcessServer">
      <summary>The code that creates and manages objects of this class is a DLL that runs in the same process as the caller of the function specifying the class context.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationClassContext.InProcessHandler">
      <summary>The code that manages objects of this class is an in-process handler.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationClassContext.LocalServer">
      <summary>The EXE code that creates and manages objects of this class runs on same machine but is loaded in a separate process space.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationClassContext.InProcessServer16">
      <summary>Not used.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationClassContext.RemoteServer">
      <summary>A remote machine context.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationClassContext.InProcessHandler16">
      <summary>Not used.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationClassContext.Reserved1">
      <summary>Not used.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationClassContext.Reserved2">
      <summary>Not used.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationClassContext.Reserved3">
      <summary>Not used.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationClassContext.Reserved4">
      <summary>Not used.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationClassContext.NoCodeDownload">
      <summary>Disallows the downloading of code from the Directory Service or the Internet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationClassContext.Reserved5">
      <summary>Not used.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationClassContext.NoCustomMarshal">
      <summary>Specifies whether activation fails if it uses custom marshaling.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationClassContext.EnableCodeDownload">
      <summary>Allows the downloading of code from the Directory Service or the Internet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationClassContext.NoFailureLog">
      <summary>Overrides the logging of failures.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationClassContext.DisableActivateAsActivator">
      <summary>Disables activate-as-activator (AAA) activations for this activation only.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationClassContext.EnableActivateAsActivator">
      <summary>Enables activate-as-activator (AAA) activations for this activation only.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationClassContext.FromDefaultContext">
      <summary>Begin this activation from the default context of the current apartment.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.RegistrationConnectionType">
      <summary>Defines the types of connections to a class object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationConnectionType.SingleUse">
      <summary>Once an application is connected to a class object with CoGetClassObject, the class object is removed from public view so that no other applications can connect to it. This value is commonly used for single document interface (SDI) applications.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationConnectionType.MultipleUse">
      <summary>Multiple applications can connect to the class object through calls to CoGetClassObject.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationConnectionType.MultiSeparate">
      <summary>Registers separate CLSCTX_LOCAL_SERVER and CLSCTX_INPROC_SERVER class factories.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationConnectionType.Suspended">
      <summary>Suspends registration and activation requests for the specified CLSID until there is a call to CoResumeClassObjects.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.RegistrationConnectionType.Surrogate">
      <summary>The class object is a surrogate process used to run DLL servers.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.RegistrationServices">
      <summary>Provides a set of services for registering and unregistering managed assemblies for use from COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.RegistrationServices" /> class. </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.GetManagedCategoryGuid">
      <summary>Returns the GUID of the COM category that contains the managed classes.</summary>
      <returns>The GUID of the COM category that contains the managed classes.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)">
      <summary>Retrieves the COM ProgID for the specified type.</summary>
      <returns>The ProgID for the specified type.</returns>
      <param name="type">The type corresponding to the ProgID that is being requested. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.GetRegistrableTypesInAssembly(System.Reflection.Assembly)">
      <summary>Retrieves a list of classes in an assembly that would be registered by a call to <see cref="M:System.Runtime.InteropServices.RegistrationServices.RegisterAssembly(System.Reflection.Assembly,System.Runtime.InteropServices.AssemblyRegistrationFlags)" />.</summary>
      <returns>A <see cref="T:System.Type" /> array containing a list of classes in <paramref name="assembly" />.</returns>
      <param name="assembly">The assembly to search for classes. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="assembly" /> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.RegisterAssembly(System.Reflection.Assembly,System.Runtime.InteropServices.AssemblyRegistrationFlags)">
      <summary>Registers the classes in a managed assembly to enable creation from COM.</summary>
      <returns>true if <paramref name="assembly" /> contains types that were successfully registered; otherwise false if the assembly contains no eligible types.</returns>
      <param name="assembly">The assembly to be registered. </param>
      <param name="flags">An <see cref="T:System.Runtime.InteropServices.AssemblyRegistrationFlags" /> value indicating any special settings used when registering <paramref name="assembly" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The full name of <paramref name="assembly" /> is null.-or- A method marked with <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> is not static.-or- There is more than one method marked with <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> at a given level of the hierarchy.-or- The signature of the method marked with <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> is not valid. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A user-defined custom registration function (marked with the <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> attribute) throws an exception.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.RegisterTypeForComClients(System.Type,System.Guid@)">
      <summary>Registers the specified type with COM using the specified GUID.</summary>
      <param name="type">The <see cref="T:System.Type" /> to be registered for use from COM. </param>
      <param name="g">The <see cref="T:System.Guid" /> used to register the specified type. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="type" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter cannot be created.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.RegisterTypeForComClients(System.Type,System.Runtime.InteropServices.RegistrationClassContext,System.Runtime.InteropServices.RegistrationConnectionType)">
      <summary>Registers the specified type with COM using the specified execution context and connection type.</summary>
      <returns>An integer that represents a cookie value.</returns>
      <param name="type">The <see cref="T:System.Type" /> object to register for use from COM.</param>
      <param name="classContext">One of the <see cref="T:System.Runtime.InteropServices.RegistrationClassContext" /> values that indicates the context in which the executable code will be run.</param>
      <param name="flags">One of the <see cref="T:System.Runtime.InteropServices.RegistrationConnectionType" /> values that specifies how connections are made to the class object.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="type" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter cannot be created.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.TypeRepresentsComType(System.Type)">
      <summary>Indicates whether a type is marked with the <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />, or derives from a type marked with the <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> and shares the same GUID as the parent.</summary>
      <returns>true if a type is marked with the <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />, or derives from a type marked with the <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> and shares the same GUID as the parent; otherwise false.</returns>
      <param name="type">The type to check for being a COM type. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.TypeRequiresRegistration(System.Type)">
      <summary>Determines whether the specified type requires registration.</summary>
      <returns>true if the type must be registered for use from COM; otherwise false.</returns>
      <param name="type">The type to check for COM registration requirements. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.UnregisterAssembly(System.Reflection.Assembly)">
      <summary>Unregisters the classes in a managed assembly.</summary>
      <returns>true if <paramref name="assembly" /> contains types that were successfully unregistered; otherwise false if the assembly contains no eligible types.</returns>
      <param name="assembly">The assembly to be unregistered. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The full name of <paramref name="assembly" /> is null.-or- A method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> is not static.-or- There is more than one method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> at a given level of the hierarchy.-or- The signature of the method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> is not valid. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A user-defined custom unregistration function (marked with the <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />  attribute) throws an exception.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.UnregisterTypeForComClients(System.Int32)">
      <summary>Removes references to a type registered with the <see cref="M:System.Runtime.InteropServices.RegistrationServices.RegisterTypeForComClients(System.Type,System.Runtime.InteropServices.RegistrationClassContext,System.Runtime.InteropServices.RegistrationConnectionType)" /> method. </summary>
      <param name="cookie">The cookie value returned by a previous call to the <see cref="M:System.Runtime.InteropServices.RegistrationServices.RegisterTypeForComClients(System.Type,System.Runtime.InteropServices.RegistrationClassContext,System.Runtime.InteropServices.RegistrationConnectionType)" /> method.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Runtime.InteropServices.RuntimeEnvironment">
      <summary>Provides a collection of static methods that return information about the common language runtime environment.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.RuntimeEnvironment" /> class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.FromGlobalAccessCache(System.Reflection.Assembly)">
      <summary>Tests whether the specified assembly is loaded in the global assembly cache.</summary>
      <returns>true if the assembly is loaded in the global assembly cache; otherwise, false.</returns>
      <param name="a">The assembly to test. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory">
      <summary>Returns the directory where the common language runtime is installed.</summary>
      <returns>A string that contains the path to the directory where the common language runtime is installed.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(System.Guid,System.Guid)">
      <summary>Returns the specified interface on the specified class.</summary>
      <returns>An unmanaged pointer to the requested interface.</returns>
      <param name="clsid">The identifier for the desired class.</param>
      <param name="riid">The identifier for the desired interface.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">IUnknown::QueryInterface failure.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject(System.Guid,System.Guid)">
      <summary>Returns an instance of a type that represents a COM object by a pointer to its IUnknown interface.</summary>
      <returns>An object that represents the specified unmanaged COM object.</returns>
      <param name="clsid">The identifier for the desired class.</param>
      <param name="riid">The identifier for the desired interface.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">IUnknown::QueryInterface failure.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion">
      <summary>Gets the version number of the common language runtime that is running the current process.</summary>
      <returns>A string containing the version number of the common language runtime.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile">
      <summary>Gets the path to the system configuration file.</summary>
      <returns>The path to the system configuration file.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary>The exception thrown when the rank of an incoming SAFEARRAY does not match the rank specified in the managed signature.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary>Initializes a new instance of the SafeArrayTypeMismatchException class with default values.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the SafeArrayTypeMismatchException class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the SafeArrayRankMismatchException class with the specified message.</summary>
      <param name="message">The message that indicates the reason for the exception. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary>The exception thrown when the type of the incoming SAFEARRAY does not match the type specified in the managed signature.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary>Initializes a new instance of the SafeArrayTypeMismatchException class with default values.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the SafeArrayTypeMismatchException class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the SafeArrayTypeMismatchException class with the specified message.</summary>
      <param name="message">The message that indicates the reason for the exception. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeBuffer">
      <summary>Provides a controlled memory buffer that can be used for reading and writing. Attempts to access memory outside the controlled buffer (underruns and overruns) raise exceptions.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> class, and specifies whether the buffer handle is to be reliably released. </summary>
      <param name="ownsHandle">true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
      <summary>Obtains a pointer from a <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> object for a block of memory.</summary>
      <param name="pointer">A byte pointer, passed by reference, to receive the pointer from within the <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> object. You must set this pointer to null before you call this method.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> method has not been called. </exception>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeBuffer.ByteLength">
      <summary>Gets the size of the buffer, in bytes.</summary>
      <returns>The number of bytes in the memory buffer.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> method has not been called.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
      <summary>Defines the allocation size of the memory region by specifying the number of value types. You must call this method before you use the <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> instance.</summary>
      <param name="numElements">The number of elements of the value type to allocate memory for.</param>
      <typeparam name="T">The value type to allocate memory for.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" /> is less than zero.-or-<paramref name="numElements" /> multiplied by the size of each element is greater than the available address space.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
      <summary>Specifies the allocation size of the memory buffer by using the specified number of elements and element size. You must call this method before you use the <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> instance.</summary>
      <param name="numElements">The number of elements in the buffer.</param>
      <param name="sizeOfEachElement">The size of each element in the buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" /> is less than zero. -or-<paramref name="sizeOfEachElement" /> is less than zero.-or-<paramref name="numElements" /> multiplied by <paramref name="sizeOfEachElement" /> is greater than the available address space.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
      <summary>Defines the allocation size of the memory region in bytes. You must call this method before you use the <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> instance.</summary>
      <param name="numBytes">The number of bytes in the buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numBytes" /> is less than zero.-or-<paramref name="numBytes" /> is greater than the available address space.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
      <summary>Reads a value type from memory at the specified offset.</summary>
      <returns>The value type that was read from memory.</returns>
      <param name="byteOffset">The location from which to read the value type. You may have to consider alignment issues.</param>
      <typeparam name="T">The value type to read.</typeparam>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> method has not been called.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>Reads the specified number of value types from memory starting at the offset, and writes them into an array starting at the index. </summary>
      <param name="byteOffset">The location from which to start reading.</param>
      <param name="array">The output array to write to.</param>
      <param name="index">The location in the output array to begin writing to.</param>
      <param name="count">The number of value types to read from the input array and to write to the output array.</param>
      <typeparam name="T">The value type to read.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="count" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The length of the array minus the index is less than <paramref name="count" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> method has not been called.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer">
      <summary>Releases a pointer that was obtained by the <see cref="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)" /> method.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> method has not been called.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
      <summary>Writes a value type to memory at the given location.</summary>
      <param name="byteOffset">The location at which to start writing. You may have to consider alignment issues.</param>
      <param name="value">The value to write.</param>
      <typeparam name="T">The value type to write.</typeparam>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> method has not been called.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>Writes the specified number of value types to a memory location by reading bytes starting from the specified location in the input array.</summary>
      <param name="byteOffset">The location in memory to write to.</param>
      <param name="array">The input array.</param>
      <param name="index">The offset in the array to start reading from.</param>
      <param name="count">The number of value types to write.</param>
      <typeparam name="T">The value type to write.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The length of the input array minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> method has not been called.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeHandle">
      <summary>Represents a wrapper class for operating system handles. This class must be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class with the specified invalid handle value.</summary>
      <param name="invalidHandleValue">The value of an invalid handle (usually 0 or -1).  Your implementation of <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> should return true for this value.</param>
      <param name="ownsHandle">true to reliably let <see cref="T:System.Runtime.InteropServices.SafeHandle" /> release the handle during the finalization phase; otherwise, false (not recommended). </param>
      <exception cref="T:System.TypeLoadException">The derived class resides in an assembly without unmanaged code access permission. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Close">
      <summary>Marks the handle for releasing and freeing resources.</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
      <summary>Manually increments the reference counter on <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instances.</summary>
      <param name="success">true if the reference counter was successfully incremented; otherwise, false.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
      <summary>Returns the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> field.</summary>
      <returns>An IntPtr representing the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> field. If the handle has been marked invalid with <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />, this method still returns the original handle value, which can be a stale value.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
      <summary>Manually decrements the reference counter on a <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instance.</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class.</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class specifying whether to perform a normal dispose operation.</summary>
      <param name="disposing">true for a normal dispose operation; false to finalize the handle.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Finalize">
      <summary>Frees all resources associated with the handle.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.SafeHandle.handle">
      <summary>Specifies the handle to be wrapped.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
      <summary>Gets a value indicating whether the handle is closed.</summary>
      <returns>true if the handle is closed; otherwise, false.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
      <summary>When overridden in a derived class, gets a value indicating whether the handle value is invalid.</summary>
      <returns>true if the handle value is invalid; otherwise, false.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
      <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
      <returns>true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
      <summary>Sets the handle to the specified pre-existing handle.</summary>
      <param name="handle">The pre-existing handle to use. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
      <summary>Marks a handle as no longer used.</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary>Represents structured exception handling (SEH) errors. </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException" /> class. </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException" /> class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException" /> class with a specified message.</summary>
      <param name="message">The message that indicates the reason for the exception. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary>Indicates whether the exception can be recovered from, and whether the code can continue from the point at which the exception was thrown.</summary>
      <returns>Always false, because resumable exceptions are not implemented.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.SetWin32ContextInIDispatchAttribute">
      <summary>This attribute has been deprecated. </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SetWin32ContextInIDispatchAttribute.#ctor">
      <summary>This attribute has been deprecated.  </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.STATSTG">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.STATSTG" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.atime">
      <summary>Indicates the last access time for this storage, stream or byte array </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.cbSize">
      <summary>Specifies the size in bytes of the stream or byte array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.clsid">
      <summary>Indicates the class identifier for the storage object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.ctime">
      <summary>Indicates the creation time for this storage, stream, or byte array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.grfLocksSupported">
      <summary>Indicates the types of region locking supported by the stream or byte array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.grfMode">
      <summary>Indicates the access mode that was specified when the object was opened.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.grfStateBits">
      <summary>Indicates the current state bits of the storage object (the value most recently set by the IStorage::SetStateBits method).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.mtime">
      <summary>Indicates the last modification time for this storage, stream, or byte array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.pwcsName">
      <summary>Pointer to a null-terminated string containing the name of the object described by this structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.reserved">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.type">
      <summary>Indicates the type of storage object which is one of the values from the STGTY enumeration.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.StructLayoutAttribute">
      <summary>Lets you control the physical layout of the data fields of a class or structure.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)">
      <summary>Initalizes a new instance of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.LayoutKind" /> enumeration member.</summary>
      <param name="layoutKind">A 16-bit integer that represents one of the <see cref="T:System.Runtime.InteropServices.LayoutKind" /> values that specifes how the class or structure should be arranged. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
      <summary>Initalizes a new instance of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.LayoutKind" /> enumeration member.</summary>
      <param name="layoutKind">One of the enumeration values that specifes how the class or structure should be arranged. </param>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
      <summary>Indicates whether string data fields within the class should be marshaled as LPWSTR or LPSTR by default.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
      <summary>Controls the alignment of data fields of a class or structure in memory.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
      <summary>Indicates the absolute size of the class or structure.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.StructLayoutAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.LayoutKind" /> value that specifies how the class or structure is arranged.</summary>
      <returns>One of the enumeration values that specifies how the class or structure is arranged.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.SYSKIND">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.SYSKIND" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.SYSKIND.SYS_WIN16">
      <summary>The target operating system for the type library is 16-bit Windows systems. By default, data fields are packed.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.SYSKIND.SYS_WIN32">
      <summary>The target operating system for the type library is 32-bit Windows systems. By default, data fields are naturally aligned (for example, 2-byte integers are aligned on even-byte boundaries; 4-byte integers are aligned on quad-word boundaries, and so on). </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.SYSKIND.SYS_MAC">
      <summary>The target operating system for the type library is Apple Macintosh. By default, all data fields are aligned on even-byte boundaries.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TYPEATTR">
      <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.TYPEATTR" /> instead.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.cbAlignment">
      <summary>Specifies the byte alignment for an instance of this type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.cbSizeInstance">
      <summary>The size of an instance of this type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.cbSizeVft">
      <summary>The size of this type's virtual method table (VTBL).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.cFuncs">
      <summary>Indicates the number of functions on the interface this structure describes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.cImplTypes">
      <summary>Indicates the number of implemented interfaces on the interface this structure describes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.cVars">
      <summary>Indicates the number of variables and data fields on the interface described by this structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.dwReserved">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.guid">
      <summary>The GUID of the type information.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.idldescType">
      <summary>IDL attributes of the described type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.lcid">
      <summary>Locale of member names and documentation strings.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.lpstrSchema">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL">
      <summary>A constant used with