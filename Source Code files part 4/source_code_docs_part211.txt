System.Windows.Forms.RichTextBox" />
control for a string with specific options applied to the search.</para>
      </summary>
      <param name="str">The text to locate in the control.</param>
      <param name="options">A bitwise combination of the <see cref="T:System.Windows.Forms.RichTextBoxFinds" /> values.</param>
      <returns>
        <para>The location within the control where the search text was found.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.Find(System.String,System.Int32,System.Windows.Forms.RichTextBoxFinds)">
      <summary>
        <para>Searches the text in a <see cref="T:System.Windows.Forms.RichTextBox" /> control for a string
   at a specific location within the control and with specific options applied to the search.</para>
      </summary>
      <param name="str">The text to locate in the control.</param>
      <param name="start">The location within the control's text at which to begin searching.</param>
      <param name="options">A bitwise combination of the <see cref="T:System.Windows.Forms.RichTextBoxFinds" /> values.</param>
      <returns>
        <para>The location within the control where the search text was found.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.Find(System.String,System.Int32,System.Int32,System.Windows.Forms.RichTextBoxFinds)">
      <summary>
        <para>Searches the text in a <see cref="T:System.Windows.Forms.RichTextBox" /> control for a string within a range of text within the control and with specific options applied to the search.</para>
      </summary>
      <param name="str">The text to locate in the control.</param>
      <param name="start">The location within the control's text at which to begin searching.</param>
      <param name="end">The location within the control's text at which to end searching. This value must be equal to negative one (-1) or greater than or equal to the <paramref name="start" /> parameter.</param>
      <param name="options">A bitwise combination of the <see cref="T:System.Windows.Forms.RichTextBoxFinds" /> values.</param>
      <returns>
        <para>The location within the control where the search text was found.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.Find(System.Char[])">
      <summary>
        <para> Searches the text of a <see cref="T:System.Windows.Forms.RichTextBox" />
control for the first instance of a character from a list of characters.</para>
      </summary>
      <param name="characterSet">The array of characters to search for.</param>
      <returns>
        <para>The location within the control where the search 
      characters were found or a negative one (-1) if the search characters are
      not found or an empty search character set is specified in the <paramref name="char&#xD;&#xA;      " /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.Find(System.Char[],System.Int32)">
      <summary>
        <para>Searches the text of a <see cref="T:System.Windows.Forms.RichTextBox" />
control, at a specific starting point, for the first instance of a character from a list of characters.</para>
      </summary>
      <param name="characterSet">The array of characters to search for.</param>
      <param name="start">The location within the control's text at which to begin searching.</param>
      <returns>
        <para>The location within the control where the search characters are found.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.Find(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Searches a range of text in a <see cref="T:System.Windows.Forms.RichTextBox" /> control for the first instance of a character from a list of characters.</para>
      </summary>
      <param name="characterSet">The array of characters to search for.</param>
      <param name="start">The location within the control's text at which to begin searching.</param>
      <param name="end">The location within the control's text at which to end searching.</param>
      <returns>
        <para>The location within the control where the search characters are found.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.GetCharFromPosition(System.Drawing.Point)">
      <summary>
        <para>Gets the character that is closest to the specified location within the control.</para>
      </summary>
      <param name="pt">The location from which to seek the nearest character.</param>
      <returns>
        <para>The character at the specified location.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.GetCharIndexFromPosition(System.Drawing.Point)">
      <summary>
        <para>Gets the index of the character nearest to the specified location.</para>
      </summary>
      <param name=" pt">The location to search.</param>
      <returns>
        <para> The zero-based character index at the specified location.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.GetLineFromCharIndex(System.Int32)">
      <summary>
        <para>Gets the line number from the specified character
      position within the text of the <see cref="T:System.Windows.Forms.RichTextBox" />
      control.</para>
      </summary>
      <param name="index">The character index position to search.</param>
      <returns>
        <para> The zero-based line number where the character index is located in.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.GetPositionFromCharIndex(System.Int32)">
      <summary>
        <para>Gets the location within the control at the specified character index.</para>
      </summary>
      <param name="index">The index of the character for which to retrieve the location.</param>
      <returns>
        <para>The location of the specified character.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.LoadFile(System.String)">
      <summary>
        <para>Loads a Rich Text Format (RTF) or standard ASCII text
      file into the <see cref="T:System.Windows.Forms.RichTextBox" /> control.</para>
      </summary>
      <param name="path">The name and location of the file to load into the control.</param>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.LoadFile(System.String,System.Windows.Forms.RichTextBoxStreamType)">
      <summary>
        <para>Loads a specific type of file into the <see cref="T:System.Windows.Forms.RichTextBox" /> control.</para>
      </summary>
      <param name="path">The name and location of the file to load into the control.</param>
      <param name="fileType">One of the <see cref="T:System.Windows.Forms.RichTextBoxStreamType" /> values.</param>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.LoadFile(System.IO.Stream,System.Windows.Forms.RichTextBoxStreamType)">
      <summary>
        <para>Loads the contents of an existing data stream into the <see cref="T:System.Windows.Forms.RichTextBox" /> control.</para>
      </summary>
      <param name="data">A stream of data to load into the <see cref="T:System.Windows.Forms.RichTextBox" /> control.</param>
      <param name="fileType">One of the <see cref="T:System.Windows.Forms.RichTextBoxStreamType" /> values.</param>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.OnContentsResized(System.Windows.Forms.ContentsResizedEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.RichTextBox.ContentsResized" /> 
 event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.ContentsResizedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.OnHScroll(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.RichTextBox.HScroll" /> 
 event.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.OnLinkClicked(System.Windows.Forms.LinkClickedEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.RichTextBox.LinkClicked" /> 
 event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.LinkClickedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.OnImeChange(System.EventArgs)">
      <summary>
        <para> Raises the <see cref="E:System.Windows.Forms.RichTextBox.ImeChange" /> event.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.OnProtected(System.EventArgs)">
      <summary>
        <para> 
       Raises the <see cref="E:System.Windows.Forms.RichTextBox.Protected" />
       event.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.OnSelectionChanged(System.EventArgs)">
      <summary>
        <para> 
       Raises the <see cref="E:System.Windows.Forms.RichTextBox.SelectionChanged" />
       event.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.OnVScroll(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.RichTextBox.VScroll" /> 
 event.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.Paste(System.Windows.Forms.DataFormats.Format)">
      <summary>
        <para>Pastes the contents of the Clipboard in the specified Clipboard format.</para>
      </summary>
      <param name="clipFormat">The Clipboard format in which the data should be obtained from the Clipboard.</param>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.Redo">
      <summary>
        <para>Reapplies the last operation that was undone in the control.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.SaveFile(System.String)">
      <summary>
        <para>Saves the contents of the <see cref="T:System.Windows.Forms.RichTextBox" /> to a Rich Text Format (RTF) file.</para>
      </summary>
      <param name="path">The name and location of the file to save.</param>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.SaveFile(System.String,System.Windows.Forms.RichTextBoxStreamType)">
      <summary>
        <para>Saves the contents of the <see cref="T:System.Windows.Forms.RichTextBox" /> to a specific type of file.</para>
      </summary>
      <param name="path">The name and location of the file to save.</param>
      <param name="fileType">One of the <see cref="T:System.Windows.Forms.RichTextBoxStreamType" /> values.</param>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.SaveFile(System.IO.Stream,System.Windows.Forms.RichTextBoxStreamType)">
      <summary>
        <para>Saves the contents of a <see cref="T:System.Windows.Forms.RichTextBox" /> control to an open data stream.</para>
      </summary>
      <param name="data">The data stream that contains the file to save to.</param>
      <param name="fileType">One of the <see cref="T:System.Windows.Forms.RichTextBoxStreamType" /> values.</param>
    </member>
    <member name="M:System.Windows.Forms.RichTextBox.CreateRichEditOleCallback">
      <summary>
        <para>Creates an <see langword="IRichEditOleCallback " /> compatible object
   for handling RichEdit callback operations.</para>
      </summary>
      <returns>
        <para>An object that implements the 
   <see langword="IRichEditOleCallback" /> interface.</para>
      </returns>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.AllowDrop">
      <summary>
        <para>Gets or sets a value indicating whether the control will allow drag and drop 
       operations.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.AutoWordSelection">
      <summary>
        <para>Gets or sets a value indicating whether automatic word selection is enabled.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.AutoSize">
      <summary>
        <para>Gets or sets a value indicating whether the size of the 
    <see cref="T:System.Windows.Forms.RichTextBox" /> automatically 
       adjusts when the font assigned to the control is changed.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.BulletIndent">
      <summary>
        <para>Gets or sets the indentation used in the <see cref="T:System.Windows.Forms.RichTextBox" /> control
   when the bullet style is applied to the text.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.CanRedo">
      <summary>
        <para> Gets a value indicating whether there are actions that
      have occurred within the <see cref="T:System.Windows.Forms.RichTextBox" /> that can be reapplied.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.DetectUrls">
      <summary>
        <para> Gets or sets a value indicating whether or not the
   <see cref="T:System.Windows.Forms.RichTextBox" /> will automatically
      format a Uniform Resource Locator (URL) when it is
      typed
      into the control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.RedoActionName">
      <summary>
        <para>Gets the name of the action that can be reapplied to the control when the
   <see cref="M:System.Windows.Forms.RichTextBox.Redo" /> method is called.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.RightMargin">
      <summary>
        <para>Gets or sets the size of a single line of text within the <see cref="T:System.Windows.Forms.RichTextBox" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.Rtf">
      <summary>
        <para>Gets or sets the text of the <see cref="T:System.Windows.Forms.RichTextBox" /> control, including all Rich Text Format (RTF) codes.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.ScrollBars">
      <summary>
        <para>Gets or sets the type of scroll bars to display in the
   <see cref="T:System.Windows.Forms.RichTextBox" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.SelectionAlignment">
      <summary>
        <para> Gets or sets the alignment to apply to
      the current selection or insertion point.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.SelectionBullet">
      <summary>
        <para> Gets or sets a value indicating
      whether the bullet style is applied to the current selection or insertion point.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.SelectionCharOffset">
      <summary>
        <para> Gets or sets whether
      text in the control appears on the baseline, as a superscript,
      or as a subscript below the baseline.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.SelectionColor">
      <summary>
        <para>Gets or sets the text color of the current text selection or insertion
      point.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.SelectionFont">
      <summary>
        <para>Gets or sets the font of the current text selection or insertion point.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.SelectionHangingIndent">
      <summary>
        <para>Gets or sets the distance between the left edge of the first line of text in 
       the selected paragraph and the left edge of subsequent lines in the same
       paragraph.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.SelectionIndent">
      <summary>
        <para>Gets or sets the distance in pixels between the left
      edge of the <see cref="T:System.Windows.Forms.RichTextBox" />
      and the left edge of the current text selection or text added after the
      insertion point.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.SelectionLength">
      <summary>
        <para> Gets or sets the number of characters selected in
       control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.SelectionProtected">
      <summary>
        <para>Gets or sets a value indicating whether the current text selection is protected.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.SelectedRtf">
      <summary>
        <para>Gets or sets the currently selected Rich Text Format (RTF) formatted text
      in the control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.SelectionRightIndent">
      <summary>
        <para>The distance (in pixels) between the right edge of the RichTextBox control and
      the right edge of the text that is selected or added at the current
      insertion point.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.SelectionTabs">
      <summary>
        <para>Gets or sets the absolute tab stop positions in a
   <see cref="T:System.Windows.Forms.RichTextBox" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.SelectedText">
      <summary>
        <para>Gets or sets the selected text within the <see cref="T:System.Windows.Forms.RichTextBox" /> 
 .</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.SelectionType">
      <summary>
        <para>Gets the selection type within the control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.ShowSelectionMargin">
      <summary>
        <para>Gets or sets a value indicating whether a
      selection margin is displayed in the <see cref="T:System.Windows.Forms.RichTextBox" />
      .</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.TextLength">
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.UndoActionName">
      <summary>
        <para>Gets the name of the action that can be undone in the
      control when the <see cref="M:System.Windows.Forms.TextBoxBase.Undo" /> method is called.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.RichTextBox.ZoomFactor">
      <summary>
        <para>Gets or sets the current zoom level of the <see cref="T:System.Windows.Forms.RichTextBox" />
.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.RichTextBox.ContentsResized">
      <summary>
        <para>Occurs when contents within the control are resized.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.RichTextBox.HScroll">
      <summary>
        <para>Occurs when the user clicks the horizontal scroll bar of the control.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.RichTextBox.LinkClicked">
      <summary>
        <para>Occurs when the user clicks on a link within the text of the control.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.RichTextBox.ImeChange">
      <summary>
        <para>Occurs when the user switches input methods on an Asian version of the 
       Windows operating system. </para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.RichTextBox.Protected">
      <summary>
        <para>Occurs when the user attempts to modify protected text in the control.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.RichTextBox.SelectionChanged">
      <summary>
        <para>Occurs when the selection of text within the control has changed.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.RichTextBox.VScroll">
      <summary>
        <para>Occurs when the user clicks the vertical scroll bars of the control.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.RichTextBoxFinds">
      <summary>
        <para>Specifies how a text search is carried out in a <see cref="T:System.Windows.Forms.RichTextBox" /> control. </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxFinds.None">
      <summary>
        <para> Locate all instances of the search 
      text, whether the instances found in the search are whole words or not.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxFinds.WholeWord">
      <summary>
        <para> Locate only instances of the search text that are whole words.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxFinds.MatchCase">
      <summary>
        <para>Locate only instances of the search text that have the exact casing.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxFinds.NoHighlight">
      <summary>
        <para> The search text, if found, should not be highlighted.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxFinds.Reverse">
      <summary>
        <para>The search starts at the end of the control's document 
      and searches to the beginning of the document.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.RichTextBoxScrollBars">
      <summary>
        <para> Specifies the type of scroll bars to display in a <see cref="T:System.Windows.Forms.RichTextBox" />control.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxScrollBars.None">
      <summary>
        <para> No scroll bars are displayed.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxScrollBars.Horizontal">
      <summary>
        <para> Display a horizontal scroll bar only when text is longer
      than the width of the control.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxScrollBars.Vertical">
      <summary>
        <para> Display a vertical scroll bar only when text is longer than
      the height of the control.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxScrollBars.Both">
      <summary>
        <para> Display both a horizontal and a vertical scroll bar when needed.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxScrollBars.ForcedHorizontal">
      <summary>
        <para> Always
      display a horizontal scroll bar.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxScrollBars.ForcedVertical">
      <summary>
        <para> Always display a vertical scroll bar.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxScrollBars.ForcedBoth">
      <summary>
        <para> Always display both a horizontal and a vertical scroll bar.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxSelectionAttribute.Mixed">
      <summary>
        <para>
       Some but not all characters.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxSelectionAttribute.None">
      <summary>
        <para>
       No characters.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxSelectionAttribute.All">
      <summary>
        <para>
       All characters.
    </para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.RichTextBoxSelectionTypes">
      <summary>
        <para>Specifies the type of selection in a <see cref="T:System.Windows.Forms.RichTextBox" /> control.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxSelectionTypes.Empty">
      <summary>
        <para>No text is selected in the current selection.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxSelectionTypes.Text">
      <summary>
        <para>The current selection contains only text.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxSelectionTypes.Object">
      <summary>
        <para> At least one Object Linking and Embedding (OLE) object is selected.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxSelectionTypes.MultiChar">
      <summary>
        <para> More than one character is selected.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxSelectionTypes.MultiObject">
      <summary>
        <para>More than one Object Linking and Embedding (OLE) object is selected.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.RichTextBoxStreamType">
      <summary>
        <para>Specifies the types of input and output streams used to 
      load and save data in the <see cref="T:System.Windows.Forms.RichTextBox" />
      control.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxStreamType.RichText">
      <summary>
        <para>A Rich Text Format (RTF) stream.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxStreamType.PlainText">
      <summary>
        <para>A plain text stream that includes spaces in places of Object Linking and Embedding (OLE) objects.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxStreamType.RichNoOleObjs">
      <summary>
        <para>A Rich Text Format (RTF) stream with spaces in place of OLE objects. This value
      is only valid for use with the <see cref="M:System.Windows.Forms.RichTextBox.SaveFile(System.String)" /> method of the <see cref="T:System.Windows.Forms.RichTextBox" /> control.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxStreamType.TextTextOleObjs">
      <summary>
        <para> A plain text stream with a textual representation of OLE 
      objects. This value is only valid for use with the <see cref="M:System.Windows.Forms.RichTextBox.SaveFile(System.String)" /> method of the <see cref="T:System.Windows.Forms.RichTextBox" />
      control.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxStreamType.UnicodePlainText">
      <summary>
        <para>A text stream that contains spaces in place of Object Linking and Embedding (OLE) objects. The text is encoded in Unicode.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxWordPunctuations.Level1">
      <summary>
     Use pre-defined Level 1 punctuation table as default.
 </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxWordPunctuations.Level2">
      <summary>
     Use pre-defined Level 2 punctuation table as default.
 </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxWordPunctuations.Custom">
      <summary>
     Use a custom defined punctuation table.
 </summary>
    </member>
    <member name="F:System.Windows.Forms.RichTextBoxWordPunctuations.All">
      <summary>
     Used as a mask.
 </summary>
    </member>
    <member name="T:System.Windows.Forms.RightToLeft">
      <summary>
        <para>Specifies a value indicating whether the text appears from right to left, such as when using Hebrew or Arabic fonts.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RightToLeft.No">
      <summary>
        <para> The text reads from left to right. This is the default.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RightToLeft.Yes">
      <summary>
        <para>The text reads from right to left.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.RightToLeft.Inherit">
      <summary>
        <para> The direction the text read is inherited from the parent control.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.SaveFileDialog">
      <summary>
        <para>Represents
      a common dialog box that allows the user to specify options for saving a
      file. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.SaveFileDialog.OpenFile">
      <summary>
        <para> Opens the file with read/write permission selected by the user.
      </para>
      </summary>
      <returns>
        <para> The read/write file selected by the user.
      </para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.SaveFileDialog.Reset">
      <summary>
        <para>
       Resets all dialog box options to their default
       values.
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SaveFileDialog.CreatePrompt">
      <summary>
        <para> Gets or sets a value indicating whether the dialog box prompts the user for
      permission to create a file if the user specifies a file that does not exist.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SaveFileDialog.OverwritePrompt">
      <summary>
        <para> Gets or sets a value indicating whether the Save As dialog box displays a warning if the user specifies
      a file name that already exists.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.Screen">
      <summary>
        <para> Represents a display device or
      multiple display devices on a single system.
      </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Screen.Equals(System.Object)">
      <summary>
        <para>Gets or sets a value indicating whether the specified
      object is equal to this <see langword="Screen" />.</para>
      </summary>
      <param name="obj">The object to compare to this <see cref="T:System.Windows.Forms.Screen" /> .</param>
      <returns>
        <para>
          <see langword="true" /> if
   the specified object is equal to this <see cref="T:System.Windows.Forms.Screen" />
   ; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Screen.FromPoint(System.Drawing.Point)">
      <summary>
        <para> Retrieves a <see cref="T:System.Windows.Forms.Screen" />
for the display that contains the specified point.</para>
      </summary>
      <param name="point">A <see cref="T:System.Drawing.Point" /> that specifies the location for which to retrieve a <see cref="T:System.Windows.Forms.Screen" />. </param>
      <returns>
        <para> A <see cref="T:System.Windows.Forms.Screen" />
for the display that contains the point. In multiple display environments
where no display contains the point, the display closest to the specified point is returned.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Screen.FromRectangle(System.Drawing.Rectangle)">
      <summary>
        <para> Retrieves a <see cref="T:System.Windows.Forms.Screen" /> for the display that contains
   the largest portion of the rectangle.</para>
      </summary>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> that specifies the area for which to retrieve the display. </param>
      <returns>
        <para> A <see cref="T:System.Windows.Forms.Screen" />
for the display that contains the largest region of the
specified rectangle. In multiple display environments where no display contains the rectangle,
the display closest to the rectangle is returned.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Screen.FromControl(System.Windows.Forms.Control)">
      <summary>
        <para> Retrieves a <see cref="T:System.Windows.Forms.Screen" />
for the display that contains
the largest portion of the specified control.</para>
      </summary>
      <param name="control">A <see cref="T:System.Windows.Forms.Control" /> for which to retrieve a <see cref="T:System.Windows.Forms.Screen" /> . </param>
      <returns>
        <para> A <see cref="T:System.Windows.Forms.Screen" />
for the display that contains the largest
region of the specified control. In multiple display environments where no display contains the control,
the display closest to the specified control is returned.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Screen.FromHandle(System.IntPtr)">
      <summary>
        <para> Retrieves a <see cref="T:System.Windows.Forms.Screen" /> for the display
   that contains the largest portion of the of the object referred to by
   the specified handle. </para>
      </summary>
      <param name="hwnd">The window handle for which to retrieve the <see cref="T:System.Windows.Forms.Screen" /> . </param>
      <returns>
        <para> A <see cref="T:System.Windows.Forms.Screen" />
for the display that contains the largest region
of the object. In multiple display environments where no display contains any portion
of the specified window, the display closest to the object is returned.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Screen.GetWorkingArea(System.Drawing.Point)">
      <summary>
        <para> Retrieves the working
      area closest to the specified point. The working area is the desktop area of the display, excluding taskbars, docked windows, and docked
      tool bars.
      
   </para>
      </summary>
      <param name="pt">A <see cref="T:System.Drawing.Point" /> that specifies the coordinates for which to retrieve the working area. </param>
      <returns>
        <para> A <see cref="T:System.Drawing.Rectangle" /> that
   specifies the working area. In multiple display environments where no display contains the specified point, the display
   closest to the point is returned.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Screen.GetWorkingArea(System.Drawing.Rectangle)">
      <summary>
        <para> Retrieves the working area for the display that contains
      the largest portion of the specified rectangle. The working area is the desktop area of the display, excluding taskbars, docked windows,
      and docked tool bars.
      
   </para>
      </summary>
      <param name="rect">The <see cref="T:System.Drawing.Rectangle" /> that specifies the area for which to retrieve the working area. </param>
      <returns>
        <para>A <see cref="T:System.Drawing.Rectangle" /> that specifies the working area. In multiple
   display environments where no display contains the specified rectangle, the
   display closest to the rectangle is returned.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Screen.GetWorkingArea(System.Windows.Forms.Control)">
      <summary>
        <para> Retrieves the working area for the display that contains
      the largest region of the specified control. The working area is the desktop area of the display, excluding taskbars, docked
      windows, and docked tool bars.
      
   </para>
      </summary>
      <param name="ctl">The <see cref="T:System.Windows.Forms.Control" /> for which to retrieve the working area. </param>
      <returns>
        <para> A <see cref="T:System.Drawing.Rectangle" /> that specifies the working area. In multiple display environments where
   no display contains the specified control, the display closest to the control is
   returned.
   </para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Screen.GetBounds(System.Drawing.Point)">
      <summary>
        <para> Retrieves the bounds of the display that contains the specified
      point.
      </para>
      </summary>
      <param name="pt">A <see cref="T:System.Drawing.Point" /> that specifies the coordinates for which to retrieve the display bounds. </param>
      <returns>
        <para> A <see cref="T:System.Drawing.Rectangle" /> that
   specifies the bounds of the display that
   contains the specified point. In multiple display environments where no display contains
   the specified point, the display closest to the point is returned.
   </para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Screen.GetBounds(System.Drawing.Rectangle)">
      <summary>
        <para> Retrieves the bounds of the display that contains the largest portion of the
      specified rectangle.
      </para>
      </summary>
      <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> that specifies the area for which to retrieve the display bounds. </param>
      <returns>
        <para> A <see cref="T:System.Drawing.Rectangle" /> that
   specifies the bounds of the display
   that contains the specified rectangle. In multiple display environments where no monitor contains
   the specified rectangle, the monitor closest to the rectangle is returned.
   </para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Screen.GetBounds(System.Windows.Forms.Control)">
      <summary>
        <para> Retrieves the bounds of
      the display that contains the largest portion of the specified control.
      </para>
      </summary>
      <param name="ctl">The <see cref="T:System.Windows.Forms.Control" /> for which to retrieve the display bounds. </param>
      <returns>
        <para> A <see cref="T:System.Drawing.Rectangle" /> that
   specifies the bounds of the display that contains the specified
   control. In multiple display environments where no display contains the
   specified control, the display closest to the control is returned.
   </para>
      </returns>
    </member>
    <member name="P:System.Windows.Forms.Screen.AllScreens">
      <summary>
        <para> Gets an array of all displays on the system.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Screen.Bounds">
      <summary>
        <para> Gets the bounds of the display.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Screen.DeviceName">
      <summary>
        <para> Gets the device name associated with a display.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Screen.Primary">
      <summary>
        <para> Gets a value indicating whether a particular display is
      the primary device.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Screen.PrimaryScreen">
      <summary>
        <para> Gets the
      primary display.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Screen.WorkingArea">
      <summary>
        <para> Gets the working area of the display. The working
      area is the desktop area of the display, excluding taskbars, docked windows, and docked tool bars.
      </para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.ScrollBars">
      <summary>
        <para>Specifies
       which scroll bars will be visible on a control.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollBars.None">
      <summary>
        <para>
       No scroll bars are shown.
       
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollBars.Horizontal">
      <summary>
        <para>
       Only horizontal scroll bars are shown.
       
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollBars.Vertical">
      <summary>
        <para>
       Only vertical scroll bars are shown.
       
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollBars.Both">
      <summary>
        <para>
       Both horizontal and vertical scroll bars are shown.
       
    </para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.ScrollButton">
      <summary>
        <para>Specifies the type of scroll arrow to draw on a scroll bar.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollButton.Down">
      <summary>
        <para>A down-scroll arrow.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollButton.Left">
      <summary>
        <para>A left-scroll arrow.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollButton.Right">
      <summary>
        <para>A right-scroll arrow.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollButton.Up">
      <summary>
        <para>An up-scroll arrow.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollButton.Min">
      <summary>
        <para> A minimum-scroll arrow. </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollButton.Max">
      <summary>
        <para> A maximum-scroll arrow.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.ScrollEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Windows.Forms.ScrollBar.Scroll" />
 event.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.ScrollEventArgs.#ctor(System.Windows.Forms.ScrollEventType,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.ScrollEventArgs" />class.</para>
      </summary>
      <param name="type">One of the <see cref="T:System.Windows.Forms.ScrollEventType" /> values.</param>
      <param name="newValue">The new value for the scroll bar.</param>
    </member>
    <member name="P:System.Windows.Forms.ScrollEventArgs.Type">
      <summary>
        <para> Gets the type of scroll event 
       that occurred.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.ScrollEventArgs.NewValue">
      <summary>
        <para>Gets or sets the new <see cref="P:System.Windows.Forms.ScrollBar.Value" /> of the scroll bar.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.ScrollEventHandler">
      <summary>
        <para>Represents the method that handles the
    <see langword="Scroll" /> event of a <see cref="T:System.Windows.Forms.ScrollBar" />, <see cref="T:System.Windows.Forms.TrackBar" />, or 
    <see cref="T:System.Windows.Forms.DataGrid" />.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Windows.Forms.ScrollEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Windows.Forms.ScrollEventType">
      <summary>
        <para>Specifies the type of action used to raise the <see cref="E:System.Windows.Forms.ScrollBar.Scroll" /> event.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollEventType.SmallDecrement">
      <summary>
        <para>The scroll box was moved a small distance. The user clicked the left(horizontal) or top(vertical) scroll arrow or pressed the UP ARROW key.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollEventType.SmallIncrement">
      <summary>
        <para>The scroll box was moved a small distance. The user clicked the right(horizontal) or bottom(vertical) scroll arrow or
       pressed the DOWN ARROW key.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollEventType.LargeDecrement">
      <summary>
        <para>The scroll box moved a large distance. The user clicked the scroll bar to the left(horizontal) or above(vertical) the scroll box, or pressed the PAGE UP key.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollEventType.LargeIncrement">
      <summary>
        <para>The scroll box moved a large distance. The user clicked the scroll bar to the right(horizontal) or below(vertical) the scroll box, or pressed the PAGE DOWN key.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollEventType.ThumbPosition">
      <summary>
        <para>The scroll box was moved.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollEventType.ThumbTrack">
      <summary>
        <para>The scroll box is currently being moved.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollEventType.First">
      <summary>
        <para>The scroll box was moved to the <see cref="P:System.Windows.Forms.ScrollBar.Minimum" /> position.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollEventType.Last">
      <summary>
        <para>The scroll box was moved to the <see cref="P:System.Windows.Forms.ScrollBar.Maximum" /> position.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ScrollEventType.EndScroll">
      <summary>
        <para>The scroll box has stopped moving.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SecurityIDType.User">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SecurityIDType.Group">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SecurityIDType.Domain">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SecurityIDType.Alias">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SecurityIDType.WellKnownGroup">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SecurityIDType.DeletedAccount">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SecurityIDType.Invalid">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SecurityIDType.Unknown">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SecurityIDType.Computer">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.SelectedGridItemChangedEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Windows.Forms.PropertyGrid.SelectedGridItemChanged" /> event of the <see cref="T:System.Windows.Forms.PropertyGrid" /> control.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.SelectedGridItemChangedEventArgs.#ctor(System.Windows.Forms.GridItem,System.Windows.Forms.GridItem)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.SelectedGridItemChangedEventArgs" /> class.</para>
      </summary>
      <param name="oldSel">The previously selected grid item.</param>
      <param name=" newSel">The newly selected grid item.</param>
    </member>
    <member name="P:System.Windows.Forms.SelectedGridItemChangedEventArgs.NewSelection">
      <summary>
        <para>Gets the newly selected <see cref="T:System.Windows.Forms.GridItem" /> object.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SelectedGridItemChangedEventArgs.OldSelection">
      <summary>
        <para>Gets the previously selected <see cref="T:System.Windows.Forms.GridItem" /> object.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.SelectedGridItemChangedEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Windows.Forms.PropertyGrid.SelectedGridItemChanged" /> event of a <see cref="T:System.Windows.Forms.PropertyGrid" />
.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">A <see cref="T:System.Windows.Forms.SelectedGridItemChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Windows.Forms.SelectionMode">
      <summary>
        <para>Specifies the selection behavior of a list box.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SelectionMode.None">
      <summary>
        <para> No items can be selected.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SelectionMode.One">
      <summary>
        <para> Only one item can be selected.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SelectionMode.MultiSimple">
      <summary>
        <para> Multiple items can be selected.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SelectionMode.MultiExtended">
      <summary>
        <para> Multiple items can be selected, and the user can use the SHIFT, 
       CTRL, and arrow keys to make selections</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.SelectionRange">
      <summary>
        <para>Represents a date selection range in a month calendar control. </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.SelectionRange.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.SelectionRange" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.SelectionRange.#ctor(System.DateTime,System.DateTime)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.SelectionRange" /> class with the specified beginning and ending dates.</para>
      </summary>
      <param name="lower">The starting date in the <see cref="T:System.Windows.Forms.SelectionRange" /> .</param>
      <param name=" upper">The ending date in the <see cref="T:System.Windows.Forms.SelectionRange" /> .</param>
    </member>
    <member name="M:System.Windows.Forms.SelectionRange.#ctor(System.Windows.Forms.SelectionRange)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.SelectionRange" /> class with the specified selection range.</para>
      </summary>
      <param name="range">The existing <see cref="T:System.Windows.Forms.SelectionRange" /> object.</param>
    </member>
    <member name="P:System.Windows.Forms.SelectionRange.End">
      <summary>
        <para>Gets or sets the ending date and time of the selection range.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SelectionRange.Start">
      <summary>
        <para>Gets or sets the starting date and time of the selection range.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.SelectionRangeConverter">
      <summary>
        <para>Provides a type converter to convert <see cref="T:System.Windows.Forms.SelectionRange" /> objects to and from various other
 representations.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.SendKeys">
      <summary>
        <para>Provides methods for sending keystrokes to an application.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.SendKeys.Send(System.String)">
      <summary>
        <para>Sends keystrokes to the active application.</para>
      </summary>
      <param name="keys">The string of keystrokes to send.</param>
    </member>
    <member name="M:System.Windows.Forms.SendKeys.SendWait(System.String)">
      <summary>
        <para>Sends the given keys to the active application, and then waits for
      the messages to be processed.</para>
      </summary>
      <param name="keys">The string of keystrokes to send.</param>
    </member>
    <member name="M:System.Windows.Forms.SendKeys.Flush">
      <summary>
        <para>Processes all the Windows messages currently in the message queue.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.Shortcut">
      <summary>
        <para>
       Specifies shortcut keys that can be used by menu items.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.None">
      <summary>
        <para>
       No shortcut key is associated with the menu item.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlA">
      <summary>
        <para>
       The shortcut keys CTRL+A.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlB">
      <summary>
        <para>
       The shortcut keys CTRL+B.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlC">
      <summary>
        <para>
       The shortcut keys CTRL+C.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlD">
      <summary>
        <para>
       The shortcut keys CTRL+D.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlE">
      <summary>
        <para>
       The shortcut keys CTRL+E.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlF">
      <summary>
        <para>
       The shortcut keys CTRL+F.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlG">
      <summary>
        <para>
       The shortcut keys CTRL+G.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlH">
      <summary>
        <para>
       The shortcut keys CTRL+H.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlI">
      <summary>
        <para>
       The shortcut keys CTRL+I.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlJ">
      <summary>
        <para>
       The shortcut keys CTRL+J.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlK">
      <summary>
        <para>
       The shortcut keys CTRL+K.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlL">
      <summary>
        <para>
       The shortcut keys CTRL+L.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlM">
      <summary>
        <para>
       The shortcut keys CTRL+M.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlN">
      <summary>
        <para>
       The shortcut keys CTRL+N.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlO">
      <summary>
        <para>
       The shortcut keys CTRL+O.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlP">
      <summary>
        <para>
       The shortcut keys CTRL+P.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlQ">
      <summary>
        <para>
       The shortcut keys CTRL+Q.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlR">
      <summary>
        <para>
       The shortcut keys CTRL+R.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlS">
      <summary>
        <para>
       The shortcut keys CTRL+S.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlT">
      <summary>
        <para>
       The shortcut keys CTRL+T.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlU">
      <summary>
        <para>
       The shortcut keys CTRL+U
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlV">
      <summary>
        <para>
       The shortcut keys CTRL+V.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlW">
      <summary>
        <para>
       The shortcut keys CTRL+W.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlX">
      <summary>
        <para>
       The shortcut keys CTRL+X.				  
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlY">
      <summary>
        <para>
       The shortcut keys CTRL+Y.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlZ">
      <summary>
        <para>
       The shortcut keys CTRL+Z.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftA">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+A.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftB">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+B.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftC">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+C.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftD">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+D.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftE">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+E.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+F.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftG">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+G.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftH">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+H.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftI">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+I.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftJ">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+J.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftK">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+K.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftL">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+L.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftM">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+M.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftN">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+N.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftO">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+O.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftP">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+P.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftQ">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+Q.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftR">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+R.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftS">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+S.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftT">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+T.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftU">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+U.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftV">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+V.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftW">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+W.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftX">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+X.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftY">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+Y.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftZ">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+Z.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.F1">
      <summary>
        <para>
       The shortcut key F1.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.F2">
      <summary>
        <para>
       The shortcut key F2.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.F3">
      <summary>
        <para>
       The shortcut key F3.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.F4">
      <summary>
        <para>
       The shortcut key F4.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.F5">
      <summary>
        <para>
       The shortcut key F5.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.F6">
      <summary>
        <para>
       The shortcut key F6.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.F7">
      <summary>
        <para>
       The shortcut key F7.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.F8">
      <summary>
        <para>The shortcut key F8.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.F9">
      <summary>
        <para>
       The shortcut key F9.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.F10">
      <summary>
        <para>The shortcut key F10.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.F11">
      <summary>
        <para>
       The shortcut key F11.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.F12">
      <summary>
        <para>
       The shortcut key F12.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.ShiftF1">
      <summary>
        <para>
       The shortcut keys SHIFT+F1.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.ShiftF2">
      <summary>
        <para>
       The shortcut keys SHIFT+F2.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.ShiftF3">
      <summary>
        <para>
       The shortcut keys SHIFT+F3.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.ShiftF4">
      <summary>
        <para>
       The shortcut keys SHIFT+F4.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.ShiftF5">
      <summary>
        <para>
       The shortcut keys SHIFT+F5.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.ShiftF6">
      <summary>
        <para>
       The shortcut keys SHIFT+F6.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.ShiftF7">
      <summary>
        <para>
       The shortcut keys SHIFT+F7.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.ShiftF8">
      <summary>
        <para>
       The shortcut keys SHIFT+F8.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.ShiftF9">
      <summary>
        <para>
       The shortcut keys SHIFT+F9.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.ShiftF10">
      <summary>
        <para>The shortcut keys SHIFT+F10.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.ShiftF11">
      <summary>
        <para>
       The shortcut keys SHIFT+F11.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.ShiftF12">
      <summary>
        <para>
       The shortcut keys SHIFT+F12.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlF1">
      <summary>
        <para>
       The shortcut keys CTRL+F1.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlF2">
      <summary>
        <para>
       The shortcut keys CTRL+F2.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlF3">
      <summary>
        <para>
       The shortcut keys CTRL+F3.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlF4">
      <summary>
        <para>
       The shortcut keys CTRL+F4.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlF5">
      <summary>
        <para>
       The shortcut keys CTRL+F5.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlF6">
      <summary>
        <para>
       The shortcut keys CTRL+F6.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlF7">
      <summary>
        <para>
       The shortcut keys CTRL+F7.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlF8">
      <summary>
        <para>
       The shortcut keys CTRL+F8.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlF9">
      <summary>
        <para>
       The shortcut keys CTRL+F9.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlF10">
      <summary>
        <para>The shortcut keys CTRL+F10.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlF11">
      <summary>
        <para>
       The shortcut keys CTRL+F11.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlF12">
      <summary>
        <para>
       The shortcut keys CTRL+F12.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF1">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+F1.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF2">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+F2.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF3">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+F3.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF4">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+F4.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF5">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+F5.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF6">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+F6.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF7">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+F7.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF8">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+F8.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF9">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+F9.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF10">
      <summary>
        <para>The shortcut keys CTRL+SHIFT+F10.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF11">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+F11.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShiftF12">
      <summary>
        <para>
       The shortcut keys CTRL+SHIFT+F12.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Ins">
      <summary>
        <para>
       The shortcut key INSERT.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlIns">
      <summary>
        <para>
       The shortcut keys CTRL+INSERT.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.ShiftIns">
      <summary>
        <para>
       The shortcut keys SHIFT+INSERT.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Del">
      <summary>
        <para>
       The shortcut key DELETE.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlDel">
      <summary>
        <para>
       The shortcut keys CTRL+DELETE.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.ShiftDel">
      <summary>
        <para>
       The shortcut keys SHIFT+DELETE.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.AltBksp">
      <summary>
        <para>
       The shortcut keys ALT+BACKSPACE.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.AltF1">
      <summary>
        <para>
       The shortcut keys ALT+F1.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.AltF2">
      <summary>
        <para>
       The shortcut keys ALT+F2.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.AltF3">
      <summary>
        <para>
       The shortcut keys ALT+F3.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.AltF4">
      <summary>
        <para>
       The shortcut keys ALT+F4.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.AltF5">
      <summary>
        <para>
       The shortcut keys ALT+F5.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.AltF6">
      <summary>
        <para>
       The shortcut keys ALT+F6.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.AltF7">
      <summary>
        <para>
       The shortcut keys ALT+F7.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.AltF8">
      <summary>
        <para>
       The shortcut keys ALT+F8.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.AltF9">
      <summary>
        <para>
       The shortcut keys ALT+F9.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.AltF10">
      <summary>
        <para>
       The shortcut keys ALT+F10.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.AltF11">
      <summary>
        <para>
       The shortcut keys ALT+F11.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.AltF12">
      <summary>
        <para>
       The shortcut keys ALT+F12.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Alt0">
      <summary>
        <para>The shortcut keys ALT+0.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Alt1">
      <summary>
        <para>The shortcut keys ALT+1.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Alt2">
      <summary>
        <para>The shortcut keys ALT+2.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Alt3">
      <summary>
        <para>The shortcut keys ALT+3.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Alt4">
      <summary>
        <para>The shortcut keys ALT+4.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Alt5">
      <summary>
        <para>The shortcut keys ALT+5.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Alt6">
      <summary>
        <para>The shortcut keys ALT+6.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Alt7">
      <summary>
        <para>The shortcut keys ALT+7.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Alt8">
      <summary>
        <para>The shortcut keys ALT+8.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Alt9">
      <summary>
        <para>The shortcut keys ALT+9.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Ctrl0">
      <summary>
        <para>The shortcut keys CTRL+0.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Ctrl1">
      <summary>
        <para>The shortcut keys CTRL+1.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Ctrl2">
      <summary>
        <para>The shortcut keys CTRL+2.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Ctrl3">
      <summary>
        <para>The shortcut keys CTRL+3.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Ctrl4">
      <summary>
        <para>The shortcut keys CTRL+4.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Ctrl5">
      <summary>
        <para>The shortcut keys CTRL+5.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Ctrl6">
      <summary>
        <para>The shortcut keys CTRL+6.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Ctrl7">
      <summary>
        <para>The shortcut keys CTRL+7.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Ctrl8">
      <summary>
        <para>The shortcut keys CTRL+8.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.Ctrl9">
      <summary>
        <para>The shortcut keys CTRL+9.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShift0">
      <summary>
        <para>The shortcut keys CTRL+SHIFT+0.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShift1">
      <summary>
        <para>The shortcut keys CTRL+SHIFT+1.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShift2">
      <summary>
        <para>The shortcut keys CTRL+SHIFT+2.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShift3">
      <summary>
        <para>The shortcut keys CTRL+SHIFT+3.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShift4">
      <summary>
        <para>The shortcut keys CTRL+SHIFT+4.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShift5">
      <summary>
        <para>The shortcut keys CTRL+SHIFT+5.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShift6">
      <summary>
        <para>The shortcut keys CTRL+SHIFT+6.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShift7">
      <summary>
        <para>The shortcut keys CTRL+SHIFT+7.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShift8">
      <summary>
        <para>The shortcut keys CTRL+SHIFT+8.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Shortcut.CtrlShift9">
      <summary>
        <para>The shortcut keys CTRL+SHIFT+9.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.SizeGripStyle">
      <summary>
        <para>
       Specifies the style of the sizing grip on a <see cref="T:System.Windows.Forms.Form" />.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SizeGripStyle.Auto">
      <summary>
        <para>The sizing grip is automatically displayed when needed.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SizeGripStyle.Show">
      <summary>
        <para>
       The sizing grip is always shown on the form.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SizeGripStyle.Hide">
      <summary>
        <para>
       The sizing grip is hidden.
    </para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.SortOrder">
      <summary>
        <para>
       Specifies how items in
       a list are sorted.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SortOrder.None">
      <summary>
        <para>
       The items are
       not sorted.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SortOrder.Ascending">
      <summary>
        <para>
       The items
       are sorted in ascending order.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.SortOrder.Descending">
      <summary>
        <para>
       The items are
       sorted in descending order.
    </para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.Splitter">
      <summary>
        <para> Represents a splitter control that allows the user to resize docked
      controls.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Splitter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Splitter" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Splitter.OnSplitterMoving(System.Windows.Forms.SplitterEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.Splitter.SplitterMoving" /> event.</para>
      </summary>
      <param name="sevent">A <see cref="T:System.Windows.Forms.SplitterEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.Splitter.OnSplitterMoved(System.Windows.Forms.SplitterEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.Splitter.SplitterMoved" /> event.</para>
      </summary>
      <param name="sevent">A <see cref="T:System.Windows.Forms.SplitterEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:System.Windows.Forms.Splitter.BorderStyle">
      <summary>
        <para>Gets or sets the style of border for the control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Splitter.MinExtra">
      <summary>
        <para>Gets or sets the minimum distance that must remain 
      between the splitter
      control and the edge of the opposite side of the container (or the closest control docked to that side). </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Splitter.MinSize">
      <summary>
        <para>Gets or sets the minimum distance that must remain 
      between the splitter control and the container edge that the control is docked to.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Splitter.SplitPosition">
      <summary>
        <para>Gets or sets the distance between the splitter control and the container
      edge that the control is docked to. </para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.Splitter.SplitterMoving">
      <summary>
        <para>Occurs when the splitter control is in the process of moving.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.Splitter.SplitterMoved">
      <summary>
        <para>Occurs when the splitter control is moved.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.SplitterEventArgs">
      <summary>
        <para>Provides data for <see cref="E:System.Windows.Forms.Splitter.SplitterMoving" /> and the <see cref="E:System.Windows.Forms.Splitter.SplitterMoved" /> events.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.SplitterEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Initializes an instance of the <see cref="T:System.Windows.Forms.SplitterEventArgs" /> class with the specified coordinates of the
 mouse pointer and the coordinates of the upper-left corner of the <see cref="T:System.Windows.Forms.Splitter" /> control.</para>
      </summary>
      <param name="x">The x-coordinate of the mouse pointer (in client coordinates).</param>
      <param name=" y">The y-coordinate of the mouse pointer (in client coordinates).</param>
      <param name=" splitX">The x-coordinate of the upper-left corner of the <see cref="T:System.Windows.Forms.Splitter" /> (in client coordinates).</param>
      <param name=" splitY">The y-coordinate of the upper-left corner of the <see cref="T:System.Windows.Forms.Splitter" /> (in client coordinates).</param>
    </member>
    <member name="P:System.Windows.Forms.SplitterEventArgs.X">
      <summary>
        <para>Gets the x-coordinate of the
 mouse pointer (in client coordinates).</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SplitterEventArgs.Y">
      <summary>
        <para>Gets the y-coordinate of the mouse pointer (in
 client coordinates).</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SplitterEventArgs.SplitX">
      <summary>
        <para>Gets or sets the x-coordinate of the
 upper-left corner of the <see cref="T:System.Windows.Forms.Splitter" /> (in client coordinates).</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SplitterEventArgs.SplitY">
      <summary>
        <para>Gets or sets the y-coordinate of the upper-left corner of the <see cref="T:System.Windows.Forms.Splitter" /> (in client coordinates).</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.SplitterEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Windows.Forms.Splitter.SplitterMoving" /> and <see cref="E:System.Windows.Forms.Splitter.SplitterMoved" /> events of a <see cref="T:System.Windows.Forms.Splitter" />.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">A <see cref="T:System.Windows.Forms.SplitterEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Windows.Forms.StatusBar">
      <summary>
        <para> Represents a Windows status bar control.
      </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.StatusBar.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.StatusBar" /> class. </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.StatusBar.OnPanelClick(System.Windows.Forms.StatusBarPanelClickEventArgs)">
      <summary>
        <para> Raises the <see cref="M:System.Windows.Forms.StatusBar.OnPanelClick(System.Windows.Forms.StatusBarPanelClickEventArgs)" /> event.
 </para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.StatusBarPanelClickEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Forms.StatusBar.OnDrawItem(System.Windows.Forms.StatusBarDrawItemEventArgs)">
      <summary>
        <para> Raises the <see cref="M:System.Windows.Forms.StatusBar.OnDrawItem(System.Windows.Forms.StatusBarDrawItemEventArgs)" />
event.</para>
      </summary>
      <param name="sbdievent">A <see cref="T:System.Windows.Forms.StatusBarDrawItemEventArgs" /> that contains the event data. </param>
    </member>
    <member name="P:System.Windows.Forms.StatusBar.Panels">
      <summary>
        <para> Gets the collection of <see cref="T:System.Windows.Forms.StatusBar" />
panels contained within the
control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.StatusBar.ShowPanels">
      <summary>
        <para> Gets or sets a value indicating whether any panels that
      have been added to the control are displayed.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.StatusBar.SizingGrip">
      <summary>
        <para> Gets or sets a value indicating whether a sizing 
      grip is displayed in the lower-right corner of
      the control.
      </para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.StatusBar.DrawItem">
      <summary>
        <para> Occurs when a visual aspect of an owner-drawn status bar 
      control changes.
      </para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.StatusBar.PanelClick">
      <summary>
        <para> Occurs when a <see cref="T:System.Windows.Forms.StatusBarPanel" /> object on a <see cref="T:System.Windows.Forms.StatusBar" /> control is clicked.
 </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.#ctor(System.Windows.Forms.StatusBar)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.StatusBar.StatusBarPanelCollection" /> class.</para>
      </summary>
      <param name="owner">
        <para>The <see cref="T:System.Windows.Forms.StatusBar" /> control that contains this collection. </para>
      </param>
    </member>
    <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.Add(System.String)">
      <summary>
        <para> Adds a <see cref="T:System.Windows.Forms.StatusBarPanel" /> with the specified text to the collection.
 </para>
      </summary>
      <param name="text">The text for the <see cref="T:System.Windows.Forms.StatusBarPanel" /> that is being added. </param>
      <returns>
        <para>A <see cref="T:System.Windows.Forms.StatusBarPanel" /> that represents the panel that was added
 to the collection.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.Add(System.Windows.Forms.StatusBarPanel)">
      <summary>
        <para> Adds a <see cref="T:System.Windows.Forms.StatusBarPanel" /> to the collection.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.Windows.Forms.StatusBarPanel" /> that represents the panel to add to the collection. </param>
      <returns>
        <para>The zero-based index of the item in the collection.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.AddRange(System.Windows.Forms.StatusBarPanel[])">
      <summary>
        <para>Adds an array of <see cref="T:System.Windows.Forms.StatusBarPanel" />
objects to the collection.</para>
      </summary>
      <param name="panels">An array of <see cref="T:System.Windows.Forms.StatusBarPanel" /> objects to add.</param>
    </member>
    <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.Contains(System.Windows.Forms.StatusBarPanel)">
      <summary>
        <para>Determines whether the specified panel is located within the collection.</para>
      </summary>
      <param name="panel">The <see cref="T:System.Windows.Forms.StatusBarPanel" /> to locate in the collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the panel is located within the 
   collection; otherwise, <see langword="false" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.IndexOf(System.Windows.Forms.StatusBarPanel)">
      <summary>
        <para>Returns the index within the collection of the specified 
      panel.</para>
      </summary>
      <param name="panel">The <see cref="T:System.Windows.Forms.StatusBarPanel" /> object to locate in the collection.</param>
      <returns>
        <para>The zero-based index where the panel is located within the collection; 
      otherwise, negative one (-1).</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.Insert(System.Int32,System.Windows.Forms.StatusBarPanel)">
      <summary>
        <para> Inserts the specified <see cref="T:System.Windows.Forms.StatusBarPanel" /> into the collection at the specified index.
   </para>
      </summary>
      <param name="index">The zero-based index location where the panel is inserted. </param>
      <param name="value">A <see cref="T:System.Windows.Forms.StatusBarPanel" /> representing the panel to insert. </param>
    </member>
    <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.Clear">
      <summary>
        <para> Removes all items from the collection.
      </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.Remove(System.Windows.Forms.StatusBarPanel)">
      <summary>
        <para> Removes the specified <see cref="T:System.Windows.Forms.StatusBarPanel" /> from the collection.
   </para>
      </summary>
      <param name="value">The <see cref="T:System.Windows.Forms.StatusBarPanel" /> representing the panel to remove from the collection. </param>
    </member>
    <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.RemoveAt(System.Int32)">
      <summary>
        <para> Removes the <see cref="T:System.Windows.Forms.StatusBarPanel" /> located at the specified index within the collection.
   </para>
      </summary>
      <param name="index">The zero-based index of the item to remove. </param>
    </member>
    <member name="M:System.Windows.Forms.StatusBar.StatusBarPanelCollection.GetEnumerator">
      <summary>
        <para> Returns an enumerator to use to iterate through the item collection.
      </para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> object that represents the item collection.</para>
      </returns>
    </member>
    <member name="P:System.Windows.Forms.StatusBar.StatusBarPanelCollection.Item(System.Int32)">
      <summary>
        <para>Gets or sets the <see cref="T:System.Windows.Forms.StatusBarPanel" /> at the specified index.</para>
      </summary>
      <param name="index">The index of the panel in the collection to get or set.</param>
    </member>
    <member name="P:System.Windows.Forms.StatusBar.StatusBarPanelCollection.Count">
      <summary>
        <para>Gets the number of items in the collection.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.StatusBar.StatusBarPanelCollection.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether this collection is
      read-only.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.StatusBar.ControlToolTip.Finalize">
      <summary>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.StatusBarDrawItemEventArgs">
      <summary>
        <para> Provides data for the <see cref="E:System.Windows.Forms.StatusBar.DrawItem" />
event.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.StatusBarDrawItemEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DrawItemState,System.Windows.Forms.StatusBarPanel)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Windows.Forms.StatusBarDrawItemEventArgs" />
class.</para>
      </summary>
      <param name="g">The <see cref="T:System.Drawing.Graphics" /> object to use to draw the <see cref="T:System.Windows.Forms.StatusBarPanel" /> . </param>
      <param name="font">The <see cref="T:System.Drawing.Font" /> used to render text. </param>
      <param name="r">The <see cref="T:System.Drawing.Rectangle" /> that represents the client area of the <see cref="T:System.Windows.Forms.StatusBarPanel" /> . </param>
      <param name="itemId">The zero-based index of the panel in the <see cref="T:System.Windows.Forms.StatusBar.StatusBarPanelCollection" /> of the <see cref="T:System.Windows.Forms.StatusBar" /> control. </param>
      <param name="itemState">One of the <see cref="T:System.Windows.Forms.DrawItemState" /> values that represents state information about the <see cref="T:System.Windows.Forms.StatusBarPanel" /> . </param>
      <param name="panel">A <see cref="T:System.Windows.Forms.StatusBarPanel" /> that represents the panel to draw. </param>
    </member>
    <member name="P:System.Windows.Forms.StatusBarDrawItemEventArgs.Panel">
      <summary>
        <para> Gets the <see cref="T:System.Windows.Forms.StatusBarPanel" />
to
draw.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.StatusBarDrawItemEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Windows.Forms.StatusBar.DrawItem" />
event of a <see cref="T:System.Windows.Forms.StatusBar" />.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="sbdevent">A <see cref="T:System.Windows.Forms.StatusBarDrawItemEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Windows.Forms.StatusBarPanel">
      <summary>
        <para> Represents a panel in a <see cref="T:System.Windows.Forms.StatusBar" />
control.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.StatusBarPanel.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Windows.Forms.StatusBarPanel" /> class.
   </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.StatusBarPanel.Alignment">
      <summary>
        <para> Gets or sets the alignment of text and icons within the 
      status bar
      panel.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.StatusBarPanel.AutoSize">
      <summary>
        <para> Gets or sets a value indicating whether the status bar
      panel
      is
      autosized.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.StatusBarPanel.BorderStyle">
      <summary>
        <para> Gets or sets the border style of the status bar
      panel.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.StatusBarPanel.Icon">
      <summary>
        <para> Gets or sets the icon to display within the status bar 
      panel.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.StatusBarPanel.MinWidth">
      <summary>
        <para>Gets or sets the minimum allowed width of the status bar 
      panel within the <see cref="T:System.Windows.Forms.StatusBar" />
      control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.StatusBarPanel.Parent">
      <summary>
        <para> Gets the <see cref="T:System.Windows.Forms.StatusBar" /> control that hosts the status bar 
   panel.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.StatusBarPanel.Style">
      <summary>
        <para> Gets or sets the style of the status 
      bar panel.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.StatusBarPanel.Text">
      <summary>
        <para> Gets or sets the text of the status bar panel.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.StatusBarPanel.ToolTipText">
      <summary>
        <para> Gets or sets ToolTip text associated with the status bar
      panel.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.StatusBarPanel.Width">
      <summary>
        <para> Gets or sets the width of the status bar 
      panel within the <see cref="T:System.Windows.Forms.StatusBar" />
      control.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.StatusBarPanelAutoSize">
      <summary>
        <para> Specifies how a <see cref="T:System.Windows.Forms.StatusBarPanel" /> on a <see cref="T:System.Windows.Forms.StatusBar" /> control behaves when
   the control resizes.
   </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.StatusBarPanelAutoSize.None">
      <summary>
        <para> The <see cref="T:System.Windows.Forms.StatusBarPanel" /> does not change size when 
 the <see cref="T:System.Windows.Forms.StatusBar" />
 control resizes.
 </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.StatusBarPanelAutoSize.Spring">
      <summary>
        <para>The <see cref="T:System.Windows.Forms.StatusBarPanel" /> shares the available space on the
<see cref="T:System.Windows.Forms.StatusBar" />(the space not taken up by other panels 
   whose <see cref="P:System.Windows.Forms.StatusBarPanel.AutoSize" /> property is set to
<see langword="StatusBarPanelAutoSize.None" /> or <see langword="StatusBarPanelAutoSize.Contents" />) 
   with other panels that have their <see cref="P:System.Windows.Forms.StatusBarPanel.AutoSize" /> property set to
<see langword="StatusBarPanelAutoSize.Spring" />. </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.StatusBarPanelAutoSize.Contents">
      <summary>
        <para> The width of the <see cref="T:System.Windows.Forms.StatusBarPanel" /> is determined by its contents.
   </para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.StatusBarPanelBorderStyle">
      <summary>
        <para> Specifies the appearance of the border for a <see cref="T:System.Windows.Forms.StatusBarPanel" /> on a
<see cref="T:System.Windows.Forms.StatusBar" /> control. </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.StatusBarPanelBorderStyle.None">
      <summary>
        <para>No border is displayed.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.StatusBarPanelBorderStyle.Raised">
      <summary>
        <para> The <see cref="T:System.Windows.Forms.StatusBarPanel" /> is displayed with a three-dimensional raised border. </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.StatusBarPanelBorderStyle.Sunken">
      <summary>
        <para> The <see cref="T:System.Windows.Forms.StatusBarPanel" /> is displayed with a three-dimensional sunken border.
 </para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.StatusBarPanelClickEventArgs">
      <summary>
        <para> Provides data for the <see cref="E:System.Windows.Forms.StatusBar.PanelClick" />
event.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.StatusBarPanelClickEventArgs.#ctor(System.Windows.Forms.StatusBarPanel,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Windows.Forms.StatusBarPanelClickEventArgs" />
class.</para>
      </summary>
      <param name="statusBarPanel">The <see cref="T:System.Windows.Forms.StatusBarPanel" /> that represents the panel that was clicked. </param>
      <param name="button">One of the <see cref="T:System.Windows.Forms.MouseButtons" /> values that represents the mouse buttons that were clicked while over the <see cref="T:System.Windows.Forms.StatusBarPanel" /> . </param>
      <param name="clicks">The number of times that the mouse button was clicked. </param>
      <param name="x">The x-coordinate of the mouse click. </param>
      <param name="y">The y-coordinate of the mouse click. </param>
    </member>
    <member name="P:System.Windows.Forms.StatusBarPanelClickEventArgs.StatusBarPanel">
      <summary>
        <para> Gets the <see cref="T:System.Windows.Forms.StatusBarPanel" />
to
draw.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.StatusBarPanelClickEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Windows.Forms.StatusBar.PanelClick" />
event of a <see cref="T:System.Windows.Forms.StatusBar" />.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Windows.Forms.StatusBarPanelClickEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Windows.Forms.StatusBarPanelStyle">
      <summary>
        <para> Specifies whether a <see cref="T:System.Windows.Forms.StatusBarPanel" /> object on a <see cref="T:System.Windows.Forms.StatusBar" />
control is owner-drawn or system-drawn.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.StatusBarPanelStyle.Text">
      <summary>
        <para> 
 The <see cref="T:System.Windows.Forms.StatusBarPanel" /> displays text
 in the standard font.
 </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.StatusBarPanelStyle.OwnerDraw">
      <summary>
        <para> The <see cref="T:System.Windows.Forms.StatusBarPanel" /> is
 drawn by the owner.
 </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.StringSorter.IgnoreCase">
    </member>
    <member name="F:System.Windows.Forms.StringSorter.IgnoreKanaType">
    </member>
    <member name="F:System.Windows.Forms.StringSorter.IgnoreNonSpace">
    </member>
    <member name="F:System.Windows.Forms.StringSorter.IgnoreSymbols">
    </member>
    <member name="F:System.Windows.Forms.StringSorter.IgnoreWidth">
    </member>
    <member name="F:System.Windows.Forms.StringSorter.StringSort">
    </member>
    <member name="F:System.Windows.Forms.StringSorter.Descending">
    </member>
    <member name="M:System.Windows.Forms.StringSorter.Compare(System.String,System.String)">
    </member>
    <member name="M:System.Windows.Forms.StringSorter.Compare(System.String,System.String,System.Int32)">
    </member>
    <member name="M:System.Windows.Forms.StringSorter.Compare(System.Globalization.CultureInfo,System.String,System.String,System.Int32)">
    </member>
    <member name="M:System.Windows.Forms.StringSorter.Sort(System.Object[])">
    </member>
    <member name="M:System.Windows.Forms.StringSorter.Sort(System.Object[],System.Int32,System.Int32)">
    </member>
    <member name="M:System.Windows.Forms.StringSorter.Sort(System.String[],System.Object[])">
    </member>
    <member name="M:System.Windows.Forms.StringSorter.Sort(System.String[],System.Object[],System.Int32,System.Int32)">
    </member>
    <member name="M:System.Windows.Forms.StringSorter.Sort(System.Object[],System.Int32)">
    </member>
    <member name="M:System.Windows.Forms.StringSorter.Sort(System.Object[],System.Int32,System.Int32,System.Int32)">
    </member>
    <member name="M:System.Windows.Forms.StringSorter.Sort(System.String[],System.Object[],System.Int32)">
    </member>
    <member name="M:System.Windows.Forms.StringSorter.Sort(System.String[],System.Object[],System.Int32,System.Int32,System.Int32)">
    </member>
    <member name="M:System.Windows.Forms.StringSorter.Sort(System.Globalization.CultureInfo,System.Object[],System.Int32)">
    </member>
    <member name="M:System.Windows.Forms.StringSorter.Sort(System.Globalization.CultureInfo,System.Object[],System.Int32,System.Int32,System.Int32)">
    </member>
    <member name="M:System.Windows.Forms.StringSorter.Sort(System.Globalization.CultureInfo,System.String[],System.Object[],System.Int32)">
    </member>
    <member name="M:System.Windows.Forms.StringSorter.Sort(System.Globalization.CultureInfo,System.String[],System.Object[],System.Int32,System.Int32,System.Int32)">
    </member>
    <member name="F:System.Windows.Forms.StructFormat.Ansi">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.StructFormat.Unicode">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.StructFormat.Auto">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.SystemInformation">
      <summary>
        <para>Provides information about the operating system.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.DragFullWindows">
      <summary>
        <para> Gets a value indicating whether the user has enabled full window drag.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.HighContrast">
      <summary>
        <para> Gets a value indicating whether the user has selected to run in high-contrast
      mode.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.MouseWheelScrollLines">
      <summary>
        <para>
       Gets the number of lines to scroll when the mouse wheel is rotated.
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.PrimaryMonitorSize">
      <summary>
        <para> Gets the dimensions, in pixels, of the primary display monitor.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.VerticalScrollBarWidth">
      <summary>
        <para> Gets the width, in pixels, of the vertical scroll bar.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.HorizontalScrollBarHeight">
      <summary>
        <para> Gets the height, in pixels, of the horizontal scroll bar.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.CaptionHeight">
      <summary>
        <para> Gets the height, in pixels, of the normal caption area of a window.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.BorderSize">
      <summary>
        <para> Gets the width and
      height, in pixels, of a window border.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.FixedFrameBorderSize">
      <summary>
        <para> Gets the thickness, in pixels, of the border for a window that has a caption
      and is not resizable.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.VerticalScrollBarThumbHeight">
      <summary>
        <para>Gets the height, in pixels, of the scroll box in a vertical scroll bar.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.HorizontalScrollBarThumbWidth">
      <summary>
        <para>Gets the width, in pixels, of the scroll box in a horizontal scroll bar.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.IconSize">
      <summary>
        <para> Gets the default dimensions, in pixels, of an icon.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.CursorSize">
      <summary>
        <para> Gets the dimensions, in pixels, of a cursor.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.MenuFont">
      <summary>
        <para> Gets the operating system font for menus.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.MenuHeight">
      <summary>
        <para> Gets the height of one line of a menu in pixels.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.WorkingArea">
      <summary>
        <para> Gets the size, in pixels, of the working area.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.KanjiWindowHeight">
      <summary>
        <para> Gets
      the height, in pixels, of the Kanji window at the bottom
      of the screen for double-byte character set (DBCS) versions of Windows.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.MousePresent">
      <summary>
        <para> Gets a value indicating whether a mouse is installed.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.VerticalScrollBarArrowHeight">
      <summary>
        <para> Gets the height, in pixels, of the arrow bitmap on the vertical scroll bar.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.HorizontalScrollBarArrowWidth">
      <summary>
        <para> Gets the width, in pixels, of the arrow bitmap on the horizontal scroll bar.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.DebugOS">
      <summary>
        <para>Gets a value indicating whether the debugging version of USER.EXE is
      installed.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.MouseButtonsSwapped">
      <summary>
        <para>
       Gets a value indicating whether the functions of the left and right mouse
       buttons have been swapped.
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.MinimumWindowSize">
      <summary>
        <para> Gets the minimum allowable dimensions, in pixels, of a window.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.CaptionButtonSize">
      <summary>
        <para> Gets the dimensions, in pixels, of a caption bar or title bar
      button.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.FrameBorderSize">
      <summary>
        <para> Gets the thickness, in pixels, of the border for a window that can be resized.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.MinWindowTrackSize">
      <summary>
        <para> Gets the default minimum tracking dimensions, in
      pixels, of the operating system for a window.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.DoubleClickSize">
      <summary>
        <para> Gets the dimensions, in pixels, of
      the area within which the user must click for the operating system to consider
      the two clicks a double-click.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.DoubleClickTime">
      <summary>
        <para> Gets the maximum number of milliseconds allowed between mouse clicks for a double-click to be
      valid.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.IconSpacingSize">
      <summary>
        <para> 
      Gets the dimensions, in pixels, of the grid
      used to arrange icons in a large-icon view.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.RightAlignedMenus">
      <summary>
        <para> Gets a value indicating whether drop-down menus are right-aligned
      with the corresponding menu-bar item.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.PenWindows">
      <summary>
        <para> Gets a value indicating whether the Microsoft Windows for Pen Computing
      extensions are installed.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.DbcsEnabled">
      <summary>
        <para> Gets a value indicating whether the operating system is capable of handling double-byte character
      set (DBCS) characters.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.MouseButtons">
      <summary>
        <para> Gets the number of buttons on the mouse.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.Secure">
      <summary>
        <para> Gets a value indicating whether security is present on this operating system.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.Border3DSize">
      <summary>
        <para> Gets the dimensions, in pixels, of a three-dimensional (3-D)
      border.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.MinimizedWindowSpacingSize">
      <summary>
        <para> Gets the
      dimensions, in pixels,
      of the grid into which minimized windows are placed.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.SmallIconSize">
      <summary>
        <para> Gets
      the recommended dimensions, in pixels, of a small icon.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.ToolWindowCaptionHeight">
      <summary>
        <para> Gets the height, in
      pixels, of a small caption.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.ToolWindowCaptionButtonSize">
      <summary>
        <para> Gets the
      dimensions, in pixels, of small caption buttons.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.MenuButtonSize">
      <summary>
        <para> Gets the dimensions, in pixels, of menu-bar buttons.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.ArrangeStartingPosition">
      <summary>
        <para>Gets flags specifying how the operating system arranges minimized windows.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.ArrangeDirection">
      <summary>
        <para> Gets flags specifying how the operating system arranges minimized windows.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.MinimizedWindowSize">
      <summary>
        <para> Gets the dimensions, in pixels, of a normal minimized window.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.MaxWindowTrackSize">
      <summary>
        <para> Gets the default maximum dimensions, in pixels, of a
      window that has a caption and sizing borders.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.PrimaryMonitorMaximizedWindowSize">
      <summary>
        <para> Gets the default dimensions, in pixels, of a maximized window on the
      primary monitor.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.Network">
      <summary>
        <para> Gets a value indicating whether this computer is connected to a network.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.BootMode">
      <summary>
        <para>Gets a value that specifies how the system was started.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.DragSize">
      <summary>
        <para> Gets the dimensions, in pixels, of the rectangle that a drag operation must
      extend to be considered a drag operation. The rectangle is centered on a drag
      point.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.ShowSounds">
      <summary>
        <para> Gets a value indicating whether the user requires an application to present information
      in visual form in situations when it would present the
      information in audible form.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.MenuCheckSize">
      <summary>
        <para> Gets the dimensions,
      in pixels, of the default size of a menu check mark.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.MidEastEnabled">
      <summary>
        <para> Gets a value indicating
      whether the operating system is enabled for Hebrew and Arabic languages.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.NativeMouseWheelSupport">
      <summary>
        <para> Gets a value indicating whether the operating system natively
      supports a mouse wheel.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.MouseWheelPresent">
      <summary>
        <para> Gets a value indicating whether a mouse with a
      mouse wheel is installed.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.VirtualScreen">
      <summary>
        <para> Gets the
      bounds of the virtual screen.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.MonitorCount">
      <summary>
        <para> Gets the number of display monitors on the desktop.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.MonitorsSameDisplayFormat">
      <summary>
        <para> Gets a value indicating whether all the display monitors have the
      same color format.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.ComputerName">
      <summary>
        <para> Gets the computer name of the current system.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.UserDomainName">
      <summary>
        <para>Gets the name of the user domain.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.UserInteractive">
      <summary>
        <para> Gets a value indicating whether the current process is running in
      user-interactive mode.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.SystemInformation.UserName">
      <summary>
        <para> Gets the user name for the current thread (the name of the user currently
      logged on to the operating system).</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.TabAlignment">
      <summary>
        <para>Specifies the locations of the tabs in a tab
      control.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TabAlignment.Top">
      <summary>
        <para>The tabs are located across the top of the control.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TabAlignment.Bottom">
      <summary>
        <para>The tabs are located across the bottom of the control.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TabAlignment.Left">
      <summary>
        <para>The tabs are located along the left edge of the control.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TabAlignment.Right">
      <summary>
        <para>The tabs are located along the right edge of the control.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.TabAppearance">
      <summary>
        <para> Specifies the appearance of the tabs in a 
       tab control. </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TabAppearance.Normal">
      <summary>
        <para>The tabs have the standard appearance of tabs.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TabAppearance.Buttons">
      <summary>
        <para> 
       The tabs have the appearance
       of three-dimensional buttons.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TabAppearance.FlatButtons">
      <summary>
        <para> The tabs have the appearance of flat buttons.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.TabControl">
      <summary>
        <para>Manages a related set of tab pages.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TabControl.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.TabControl" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TabControl.GetTabRect(System.Int32)">
      <summary>
        <para> Returns the bounding rectangle for a specified tab in this tab control.</para>
      </summary>
      <param name="index">The 0-based index of the tab you want.</param>
      <returns>
        <para>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds of the specified
   tab.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.TabControl.IsInputKey(System.Windows.Forms.Keys)">
      <summary>
        <para>Determines whether the specified key is a regular
      input key or a special key that requires preprocessing.</para>
      </summary>
      <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified key is a regular 
   input key; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.TabControl.OnHandleDestroyed(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed" qualify="true" /> event.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.TabControl.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.TabControl.DrawItem" /> event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.DrawItemEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.TabControl.OnSelectedIndexChanged(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.TabControl.SelectedIndexChanged" /> event.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.TabControl.OnFontChanged(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.Control.FontChanged" /> event.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.TabControl.RemoveAll">
      <summary>
        <para>Removes all the tab pages and additional controls
      from this tab control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabControl.Alignment">
      <summary>
        <para> Gets or sets the area of the control (for example, along the top)
 where the tabs are aligned.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabControl.Appearance">
      <summary>
        <para> Gets or sets
      the visual appearance of the control's tabs. </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabControl.DisplayRectangle">
      <summary>
        <para>Gets the display area of the control's tab pages.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabControl.DrawMode">
      <summary>
        <para> Gets or sets the way
      that the control's tab pages are drawn.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabControl.HotTrack">
      <summary>
        <para>Gets or sets a value indicating whether the control's tabs change in appearance when the mouse passes over them.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabControl.ImageList">
      <summary>
        <para>Gets or sets the images to display on the control's tabs.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabControl.ItemSize">
      <summary>
        <para>Gets or sets the size of the control's tabs. </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabControl.Multiline">
      <summary>
        <para>Gets or sets a value indicating whether more than one row
      of tabs can be displayed.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabControl.Padding">
      <summary>
        <para>Gets or sets the amount of space around each item on the control's tab pages. </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabControl.RowCount">
      <summary>
        <para>Gets the number of rows that are currently being displayed in the control's tab strip. </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabControl.SelectedIndex">
      <summary>
        <para> Gets or sets the index of the currently-selected tab page.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabControl.SelectedTab">
      <summary>
        <para> Gets or sets the currently-selected tab page.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabControl.SizeMode">
      <summary>
        <para>Gets or sets the way that the control's tabs are sized.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabControl.ShowToolTips">
      <summary>
        <para> Gets or sets a value indicating whether a tab's ToolTip is shown when the mouse passes over the tab.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabControl.TabCount">
      <summary>
        <para>Gets the number of tabs in the tab strip.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabControl.TabPages">
      <summary>
        <para>Gets the collection of tab pages in this tab control.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.TabControl.DrawItem">
      <summary>
        <para>Occurs when the tabs are drawn, if the <see cref="P:System.Windows.Forms.TabControl.DrawMode" /> property is set to
<see langword="OwnerDrawFixed" />.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.TabControl.SelectedIndexChanged">
      <summary>
        <para>Occurs when the <see cref="P:System.Windows.Forms.TabControl.SelectedIndex" /> property is changed.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TabControl.TabPageCollection.#ctor(System.Windows.Forms.TabControl)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.TabControl.TabPageCollection" /> class.</para>
      </summary>
      <param name="owner">The <see cref="T:System.Windows.Forms.TabControl" /> that this collection belongs to.</param>
    </member>
    <member name="M:System.Windows.Forms.TabControl.TabPageCollection.Add(System.Windows.Forms.TabPage)">
      <summary>
        <para>Adds a <see cref="T:System.Windows.Forms.TabPage" /> to the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.Windows.Forms.TabPage" /> to add.</param>
    </member>
    <member name="M:System.Windows.Forms.TabControl.TabPageCollection.AddRange(System.Windows.Forms.TabPage[])">
      <summary>
        <para> Adds a set of tab pages to the collection.</para>
      </summary>
      <param name="pages">An array of type <see cref="T:System.Windows.Forms.TabPage" /> that contains the tab pages to add.</param>
    </member>
    <member name="M:System.Windows.Forms.TabControl.TabPageCollection.Contains(System.Windows.Forms.TabPage)">
      <summary>
        <para>Determines whether a specified tab page is in the collection.</para>
      </summary>
      <param name="page">The <see cref="T:System.Windows.Forms.TabPage" /> to locate in the collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   specified <see cref="T:System.Windows.Forms.TabPage" /> is
   in the collection; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.TabControl.TabPageCollection.IndexOf(System.Windows.Forms.TabPage)">
      <summary>
        <para>Returns the index of the specified tab page in the collection.</para>
      </summary>
      <param name="page">The <see cref="T:System.Windows.Forms.TabPage" /> to locate in the collection.</param>
      <returns>
        <para> The 0-based index of the tab page; -1 if it cannot be found.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.TabControl.TabPageCollection.Clear">
      <summary>
        <para>Removes all the tab pages from the collection.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TabControl.TabPageCollection.GetEnumerator">
      <summary>
        <para>Returns an enumeration of all the tab pages in the collection.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Windows.Forms.TabControl.TabPageCollection" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.TabControl.TabPageCollection.Remove(System.Windows.Forms.TabPage)">
      <summary>
        <para>Removes a <see cref="T:System.Windows.Forms.TabPage" /> from the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.Windows.Forms.TabPage" /> to remove.</param>
    </member>
    <member name="M:System.Windows.Forms.TabControl.TabPageCollection.RemoveAt(System.Int32)">
      <summary>
        <para>Removes the tab page at the specified index from the collection.</para>
      </summary>
      <param name="index">The 0-based index of the <see cref="T:System.Windows.Forms.TabPage" /> to remove.</param>
    </member>
    <member name="P:System.Windows.Forms.TabControl.TabPageCollection.Item(System.Int32)">
      <summary>
        <para> Gets or sets a <see cref="T:System.Windows.Forms.TabPage" /> in
   the collection.</para>
      </summary>
      <param name="index">The 0-based index of the tab page to get or set.</param>
    </member>
    <member name="P:System.Windows.Forms.TabControl.TabPageCollection.Count">
      <summary>
        <para> Gets the number of tab pages in the collection.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabControl.TabPageCollection.IsReadOnly">
      <summary>
        <para> Gets a value indicating whether the collection is read-only.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TabControl.ControlCollection.#ctor(System.Windows.Forms.TabControl)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.TabControl.ControlCollection" /> class.</para>
      </summary>
      <param name="owner">The <see cref="T:System.Windows.Forms.TabControl" /> that this collection belongs to.</param>
    </member>
    <member name="M:System.Windows.Forms.TabControl.ControlCollection.Add(System.Windows.Forms.Control)">
      <summary>
        <para>Adds a <see cref="T:System.Windows.Forms.Control" /> to the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.Windows.Forms.Control" /> to add.</param>
    </member>
    <member name="M:System.Windows.Forms.TabControl.ControlCollection.Remove(System.Windows.Forms.Control)">
      <summary>
        <para>Removes a <see cref="T:System.Windows.Forms.Control" /> from the collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.Windows.Forms.Control" /> to remove.</param>
    </member>
    <member name="T:System.Windows.Forms.TabDrawMode">
      <summary>
        <para>Specifies whether the tabs in a tab control are owner-drawn (drawn by the parent window), or drawn by the operating
      system. </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TabDrawMode.Normal">
      <summary>
        <para> The tabs are drawn by the operating system, and are of 
       the same size.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TabDrawMode.OwnerDrawFixed">
      <summary>
        <para> The tabs are drawn by the parent window, and are of the same 
       size.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.TabPage">
      <summary>
        <para>Represents a single tab page in a <see cref="T:System.Windows.Forms.TabControl" />.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TabPage.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.TabPage" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TabPage.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.TabPage" /> class, specifies the text
   for the tab.</para>
      </summary>
      <param name="text">The text for the tab.</param>
    </member>
    <member name="M:System.Windows.Forms.TabPage.GetTabPageOfComponent(System.Object)">
      <summary>
        <para>Retrieves the tab page that contains the specified object.</para>
      </summary>
      <param name="comp">The object to look for.</param>
      <returns>
        <para>The <see cref="T:System.Windows.Forms.TabPage" /> that
 contains the specified object, or <see langword="null" /> if the object cannot be found.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.TabPage.ToString">
      <summary>
        <para>Returns a string containing the value of the <see cref="P:System.Windows.Forms.TabPage.Text" /> property for the <see cref="T:System.Windows.Forms.TabPage" /> object's default printing.</para>
      </summary>
      <returns>
        <para>A string containing the value of the <see cref="P:System.Windows.Forms.TabPage.Text" /> property.</para>
      </returns>
    </member>
    <member name="P:System.Windows.Forms.TabPage.ImageIndex">
      <summary>
        <para>Gets or sets the index to the image displayed on this tab.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabPage.Text">
      <summary>
        <para>Gets or sets the text to display on the tab.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TabPage.ToolTipText">
      <summary>
        <para> Gets or sets the ToolTip text for this tab.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TabPage.TabPageControlCollection.#ctor(System.Windows.Forms.TabPage)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.TabPage.TabPageControlCollection" /> class.</para>
      </summary>
      <param name="owner">The <see cref="T:System.Windows.Forms.TabPage" /> that contains this collection of controls.</param>
    </member>
    <member name="M:System.Windows.Forms.TabPage.TabPageControlCollection.Add(System.Windows.Forms.Control)">
      <summary>
        <para>Adds a control to the collection.</para>
      </summary>
      <param name="value">The control to add.</param>
    </member>
    <member name="T:System.Windows.Forms.TabSizeMode">
      <summary>
        <para>Specifies how tabs in a tab control are sized. </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TabSizeMode.Normal">
      <summary>
        <para> The width of each tab is sized to accommodate what
      is displayed on the tab, and the size of tabs in a row are not adjusted to fill
      the entire width of the container control.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TabSizeMode.FillToRight">
      <summary>
        <para> The width of each tab is sized so that each row of tabs fills the entire width of the container control. This 
       is only applicable to tab controls with more than one row.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TabSizeMode.Fixed">
      <summary>
        <para> All tabs in a control are the same width.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.ThreadExceptionDialog.#ctor(System.Exception)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.Windows.Forms.ThreadExceptionDialog" /> class.
       
    </para>
      </summary>
      <param name="t">
    The <see cref="T:System.Exception" /> that represents the exception that occurred.
 </param>
    </member>
    <member name="T:System.Windows.Forms.TickStyle">
      <summary>
        <para>
       Specifies the
       location of tick marks in a <see cref="T:System.Windows.Forms.TrackBar" />
       control.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TickStyle.None">
      <summary>
        <para>
       No tick marks appear in the control.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TickStyle.TopLeft">
      <summary>
        <para>Tick marks
       are located on the top of a horizontal control or on the left of a vertical control.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TickStyle.BottomRight">
      <summary>
        <para>
       Tick marks are
       located on the bottom of a horizontal control or on the right side of a vertical control.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TickStyle.Both">
      <summary>
        <para>
       Tick
       marks are located on both sides of the control.
    </para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.Timer">
      <summary>
        <para> Implements a timer that raises an event at user-defined intervals. This timer is optimized for
      use in Windows Forms applications and must be used in a window.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Timer.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Timer" />
 class.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Timer" /> class with the specified container.</para>
      </summary>
      <param name="container">An <see cref="T:System.ComponentModel.IContainer" /> that represents the container for the timer.</param>
    </member>
    <member name="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.Timer.Tick" />
 event.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. This is always <see cref="F:System.EventArgs.Empty" />.</param>
    </member>
    <member name="M:System.Windows.Forms.Timer.Start">
      <summary>
        <para>Starts the
       timer.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Timer.Stop">
      <summary>
        <para>Stops the
       timer.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.Timer.Tick">
      <summary>
        <para>Occurs when the specified timer
       interval has elapsed and the timer is enabled.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Timer.Enabled">
      <summary>
        <para>Gets or sets whether the timer is
      running.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Timer.Interval">
      <summary>
        <para> Gets or sets the time, in milliseconds, between timer ticks.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.ToolBarAppearance">
      <summary>
        <para>Specifies the type of toolbar to display.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ToolBarAppearance.Normal">
      <summary>
        <para> The toolbar and buttons appear as standard three-dimensional controls.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ToolBarAppearance.Flat">
      <summary>
        <para> The toolbar and buttons appear flat, but the buttons change to
       three-dimensional as the mouse pointer moves over them.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.ToolBarButton">
      <summary>
        <para> Represents a Windows toolbar button.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.ToolBarButton.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.ToolBarButton" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.ToolBarButton.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.ToolBarButton" /> class and displays the assigned
   text on the button.</para>
      </summary>
      <param name="text">The text to display on the new <see cref="T:System.Windows.Forms.ToolBarButton" />.</param>
    </member>
    <member name="P:System.Windows.Forms.ToolBarButton.DropDownMenu">
      <summary>
        <para> Gets or
      sets the menu to be displayed in
      the drop-down toolbar button.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.ToolBarButton.Enabled">
      <summary>
        <para> Gets or sets a value indicating whether the button is enabled.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.ToolBarButton.ImageIndex">
      <summary>
        <para> Gets or sets the index
      value of the image assigned to the button.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.ToolBarButton.Parent">
      <summary>
        <para> Gets the toolbar control that the toolbar button is assigned 
       to.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.ToolBarButton.PartialPush">
      <summary>
        <para> 
       Gets or sets a value
       indicating whether a toggle-style toolbar button
       is partially pushed.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.ToolBarButton.Pushed">
      <summary>
        <para>Gets or sets a value indicating whether a toggle-style toolbar button is currently in the pushed state.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.ToolBarButton.Rectangle">
      <summary>
        <para> Gets the bounding rectangle for a toolbar 
       button.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.ToolBarButton.Style">
      <summary>
        <para> Gets or sets the style of the
       toolbar button.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.ToolBarButton.Tag">
      <summary>
        <para>Gets or sets the object that contains data about the toolbar button.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.ToolBarButton.Text">
      <summary>
        <para> Gets or sets the text displayed on the toolbar button.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.ToolBarButton.ToolTipText">
      <summary>
        <para> 
       Gets or
       sets
       the text that appears as a tool tip for a control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.ToolBarButton.Visible">
      <summary>
        <para> 
       Gets or sets a value
       indicating whether the toolbar button
       is visible.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.ToolBarButtonClickEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Windows.Forms.ToolBar.ButtonClick" />
 event.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.ToolBarButtonClickEventArgs.#ctor(System.Windows.Forms.ToolBarButton)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.ToolBarButtonClickEventArgs" />
 class.</para>
      </summary>
      <param name="button">The <see cref="T:System.Windows.Forms.ToolBarButton" /> that was clicked.</param>
    </member>
    <member name="P:System.Windows.Forms.ToolBarButtonClickEventArgs.Button">
      <summary>
        <para>Gets or sets the <see cref="T:System.Windows.Forms.ToolBarButton" />
 that was clicked.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.ToolBarButtonClickEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Windows.Forms.ToolBar.ButtonClick" /> event of a
 <see cref="T:System.Windows.Forms.ToolBar" /> .</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">A <see cref="T:System.Windows.Forms.ToolBarButtonClickEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Windows.Forms.ToolBarButtonStyle">
      <summary>
        <para>Specifies the button style within a toolbar.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ToolBarButtonStyle.PushButton">
      <summary>
        <para>
       A
       standard, three-dimensional
       button.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ToolBarButtonStyle.ToggleButton">
      <summary>
        <para>
       A toggle button that appears sunken when clicked
       and retains the sunken appearance until
       clicked again.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ToolBarButtonStyle.Separator">
      <summary>
        <para>
       A space or
       line between toolbar buttons. The appearance depends on the
       value of the <see cref="P:System.Windows.Forms.ToolBar.Appearance" />
       property.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ToolBarButtonStyle.DropDownButton">
      <summary>
        <para> A drop-down control that displays a menu or other window
       when
       clicked.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.ToolBarTextAlign">
      <summary>
        <para>Specifies
       the alignment of text on the toolbar button control.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ToolBarTextAlign.Underneath">
      <summary>
        <para>
       The text
       is aligned underneath the toolbar button image.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.ToolBarTextAlign.Right">
      <summary>
        <para>
       The text
       is aligned to the right of the toolbar button image.
    </para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.ToolTip">
      <summary>
        <para>Represents a small rectangular pop-up 
      window that displays a brief description of a control's purpose when the mouse
      hovers over the control.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.ToolTip.#ctor(System.ComponentModel.IContainer)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Windows.Forms.ToolTip" /> class with a specified container.
   </para>
      </summary>
      <param name="cont"> An <see cref="T:System.ComponentModel.IContainer" /> that represents the container of the <see cref="T:System.Windows.Forms.ToolTip" /> . </param>
    </member>
    <member name="M:System.Windows.Forms.ToolTip.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Windows.Forms.ToolTip" /> without a specified container.
   </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.ToolTip.GetToolTip(System.Windows.Forms.Control)">
      <summary>
        <para> Retrieves the ToolTip text associated with the specified control.
      </para>
      </summary>
      <param name="control">The <see cref="T:System.Windows.Forms.Control" /> for which to retrieve the <see cref="T:System.Windows.Forms.ToolTip" /> text. </param>
      <returns>
        <para> The ToolTip text for the specified control.
      </para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.ToolTip.RemoveAll">
      <summary>
        <para> Removes all ToolTip text currently associated with the 
      ToolTip control.
      </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.ToolTip.SetToolTip(System.Windows.Forms.Control,System.String)">
      <summary>
        <para> Associates ToolTip text with the specified control.
      </para>
      </summary>
      <param name="control">The <see cref="T:System.Windows.Forms.Control" /> to associate the ToolTip text with. </param>
      <param name="caption">The ToolTip text to display when the mouse cursor is over the control. </param>
    </member>
    <member name="P:System.Windows.Forms.ToolTip.Active">
      <summary>
        <para> Gets or sets a value indicating whether the ToolTip is currently active.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.ToolTip.AutomaticDelay">
      <summary>
        <para>Gets or sets the automatic delay for the ToolTip.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.ToolTip.AutoPopDelay">
      <summary>
        <para>Gets or sets the period of time the ToolTip remains visible if the mouse pointer is
      stationary within a control
      with specified ToolTip text.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.ToolTip.InitialDelay">
      <summary>
        <para>Gets or sets the time that passes before the 
      ToolTip appears. </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.ToolTip.ReshowDelay">
      <summary>
        <para>Gets or sets the length of time that must transpire before subsequent ToolTip
      windows appear as the mouse pointer moves from one control to another. </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.ToolTip.ShowAlways">
      <summary>
        <para>Gets or sets a value indicating whether a ToolTip window is 
      displayed even when its parent control is not active.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.TrackBar">
      <summary>
        <para> Represents a standard Windows trackbar.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TrackBar.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.TrackBar" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TrackBar.OnScroll(System.EventArgs)">
      <summary>
        <para>Raises the <see langword="Scroll" />
event.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.TrackBar.SetRange(System.Int32,System.Int32)">
      <summary>
        <para>Sets the minimum and maximum values for a <see cref="T:System.Windows.Forms.TrackBar" /> control.</para>
      </summary>
      <param name="minValue">The lower limit of the range of the trackbar. </param>
      <param name="maxValue">The upper limit of the range of the trackbar. </param>
    </member>
    <member name="P:System.Windows.Forms.TrackBar.AutoSize">
      <summary>
        <para>Gets or sets a value indicating whether the height or
      width of the control is being automatically sized.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TrackBar.ForeColor">
      <summary>
        <para> Gets the foreground color of the trackbar.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TrackBar.LargeChange">
      <summary>
        <para> Gets or sets a value to be added to or subtracted
      from the <see cref="P:System.Windows.Forms.TrackBar.Value" />
      property when the scroll box is moved a large
      distance.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TrackBar.Maximum">
      <summary>
        <para>Gets or sets the upper limit of the range this <see cref="T:System.Windows.Forms.TrackBar" /> is working with.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TrackBar.Minimum">
      <summary>
        <para>Gets or sets the lower limit of the range this <see cref="T:System.Windows.Forms.TrackBar" /> is working with.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TrackBar.Orientation">
      <summary>
        <para> Gets or
 sets a value indicating the horizontal or vertical
 orientation of the track bar.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TrackBar.SmallChange">
      <summary>
        <para> Gets or sets the value added to or
      subtracted from the <see cref="P:System.Windows.Forms.TrackBar.Value" />
      property when the slider is moved a small distance.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TrackBar.TickStyle">
      <summary>
        <para> Gets
 or sets a value indicating how to display the tick marks on the
 track bar.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TrackBar.TickFrequency">
      <summary>
        <para>Gets or sets a value that specifies the delta
      between ticks drawn on the control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TrackBar.Value">
      <summary>
        <para> Gets or sets a
 numeric value that represents the current position of the slider on the track bar control.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.TrackBar.Scroll">
      <summary>
        <para>Occurs when either a mouse or keyboard action moves the
      slider.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.TrackBar.ValueChanged">
      <summary>
        <para>Occurs when the <see cref="P:System.Windows.Forms.TrackBar.Value" /> property of a track bar
   changes, either by movement of the slider or by manipulation in code.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.NotifyIcon">
      <summary>
        <para> Specifies a component that
      creates an icon in the status area. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.NotifyIcon.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Windows.Forms.NotifyIcon" /> class.
   </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.NotifyIcon.#ctor(System.ComponentModel.IContainer)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.NotifyIcon" />
class with the specified container.</para>
      </summary>
      <param name="container">An <see cref="T:System.ComponentModel.IContainer" /> that represents the container for the <see cref="T:System.Windows.Forms.NotifyIcon" /> control.</param>
    </member>
    <member name="P:System.Windows.Forms.NotifyIcon.ContextMenu">
      <summary>
        <para> Gets or sets the context
      menu for the icon.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.NotifyIcon.Icon">
      <summary>
        <para>
       Gets or sets the current
       icon.
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.NotifyIcon.Text">
      <summary>
        <para>Gets or sets the ToolTip text displayed when
      the mouse hovers over a status area icon.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.NotifyIcon.Visible">
      <summary>
        <para> Gets or sets a value indicating whether the icon is visible in the status notification area of the taskbar.
      </para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.NotifyIcon.Click">
      <summary>
        <para>Occurs when the user clicks the icon in the status area.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.NotifyIcon.DoubleClick">
      <summary>
        <para>Occurs when the user double-clicks the icon in the status notification area of the taskbar.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.NotifyIcon.MouseDown">
      <summary>
        <para> Occurs when the user presses the
      mouse button while the pointer is over the icon in the status notification area of the taskbar.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.NotifyIcon.MouseMove">
      <summary>
        <para>Occurs when the user moves the mouse while the pointer is over the icon in the status notification
      area of the taskbar.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.NotifyIcon.MouseUp">
      <summary>
        <para>Occurs when the user releases the mouse button while the pointer is over the icon in the
      status notification area of the taskbar.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.TreeNode">
      <summary>
        <para>Represents a node of a <see cref="T:System.Windows.Forms.TreeView" />. </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TreeNode.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.TreeNode" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TreeNode.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.TreeNode" />
class with the specified label text.</para>
      </summary>
      <param name="text">The label <see cref="P:System.Windows.Forms.TreeNode.Text" /> of the new tree node. </param>
    </member>
    <member name="M:System.Windows.Forms.TreeNode.#ctor(System.String,System.Windows.Forms.TreeNode[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.TreeNode" /> class
   with the specified label text and child tree nodes.</para>
      </summary>
      <param name="text">The label <see cref="P:System.Windows.Forms.TreeNode.Text" /> of the new tree node. </param>
      <param name="children">An array of child <see cref="T:System.Windows.Forms.TreeNode" /> objects. </param>
    </member>
    <member name="M:System.Windows.Forms.TreeNode.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.TreeNode" /> class with the
   specified label text and images to display when the tree node is in a
   selected and unselected state.</para>
      </summary>
      <param name="text">The label <see cref="P:System.Windows.Forms.TreeNode.Text" /> of the new tree node. </param>
      <param name="imageIndex">The index value of <see cref="T:System.Drawing.Image" /> to display when the tree node is unselected. </param>
      <param name="selectedImageIndex">The index value of <see cref="T:System.Drawing.Image" /> to display when the tree node is selected. </param>
    </member>
    <member name="M:System.Windows.Forms.TreeNode.#ctor(System.String,System.Int32,System.Int32,System.Windows.Forms.TreeNode[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.TreeNode" /> class with the specified label text, child tree nodes, and images to display when the tree node is
   in a selected and unselected state.</para>
      </summary>
      <param name="text">The label <see cref="P:System.Windows.Forms.TreeNode.Text" /> of the new tree node. </param>
      <param name="imageIndex">The index value of <see cref="T:System.Drawing.Image" /> to display when the tree node is unselected. </param>
      <param name="selectedImageIndex">The index value of <see cref="T:System.Drawing.Image" /> to display when the tree node is selected. </param>
      <param name="children">An array of child <see cref="T:System.Windows.Forms.TreeNode" /> objects. </param>
    </member>
    <member name="M:System.Windows.Forms.TreeNode.FromHandle(System.Windows.Forms.TreeView,System.IntPtr)">
      <summary>
        <para>Returns the tree node with the specified handle and assigned to the
      specified tree view control.</para>
      </summary>
      <param name="tree">The <see cref="T:System.Windows.Forms.TreeView" /> that contains the tree node. </param>
      <param name="handle">The handle of the tree node. </param>
      <returns>
        <para>A <see cref="T:System.Windows.Forms.TreeNode" /> that represents the tree node assigned to
   the specified <see cref="T:System.Windows.Forms.TreeView" /> control with the specified handle.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.TreeNode.BeginEdit">
      <summary>
        <para>Initiates the editing of the tree node label. </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TreeNode.Clone">
      <summary>
        <para>Copies the tree node and the entire subtree rooted at this tree node.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Object" /> 
that represents the cloned <see cref="T:System.Windows.Forms.TreeNode" /> object. </para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.TreeNode.Collapse">
      <summary>
        <para>Collapses the tree node.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TreeNode.EndEdit(System.Boolean)">
      <summary>
        <para> Ends the editing of the tree node label.</para>
      </summary>
      <param name="cancel">
        <see langword="true" /> if the editing of the tree node label text was canceled without being saved; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Windows.Forms.TreeNode.EnsureVisible">
      <summary>
        <para>Ensures that the tree node is visible, expanding tree nodes and scrolling the tree
      view control as necessary.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TreeNode.Expand">
      <summary>
        <para>Expands the tree node.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TreeNode.ExpandAll">
      <summary>
        <para>Expands all the child tree nodes.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TreeNode.GetNodeCount(System.Boolean)">
      <summary>
        <para>Returns the number of child tree nodes.</para>
      </summary>
      <param name="includeSubTrees">
        <para>
          <see langword="true" /> if the resulting count includes all tree nodes indirectly rooted at this tree node; otherwise, <see langword="false" /> . </para>
      </param>
      <returns>
        <para> The number of child tree nodes assigned to
      the <see cref="P:System.Windows.Forms.TreeNode.Nodes" /> collection.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.TreeNode.Remove">
      <summary>
        <para> Removes
      the current tree node from the tree view control.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TreeNode.Toggle">
      <summary>
        <para> Toggles the tree node to either the expanded or collapsed
      state.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.BackColor">
      <summary>
        <para>Gets or sets the background color of the tree node.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.Bounds">
      <summary>
        <para>Gets the bounds of the tree node.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.Checked">
      <summary>
        <para> Gets or sets a value indicating whether the tree node is in a checked
      state.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.FirstNode">
      <summary>
        <para>Gets the first child tree node in the tree node collection.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.ForeColor">
      <summary>
        <para>Gets or sets the foreground color of the tree node.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.FullPath">
      <summary>
        <para>Gets the path from the root tree node to the current tree node.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.Handle">
      <summary>
        <para>Gets the handle of the tree node.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.ImageIndex">
      <summary>
        <para> Gets or sets the image list index value of the image displayed when the
      tree node is in the unselected state.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.Index">
      <summary>
        <para> Gets the position of the tree node in the tree node collection.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.IsEditing">
      <summary>
        <para> Gets a value indicating whether the tree node is in an editable state.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.IsExpanded">
      <summary>
        <para>Gets a value indicating whether the tree node is in the expanded state.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.IsSelected">
      <summary>
        <para>Gets a value indicating whether the tree node is in the selected state.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.IsVisible">
      <summary>
        <para>Gets a value indicating whether the tree node is visible.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.LastNode">
      <summary>
        <para> Gets the last child tree node.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.NextNode">
      <summary>
        <para> Gets the next sibling tree node.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.NextVisibleNode">
      <summary>
        <para> Gets the next visible tree node.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.NodeFont">
      <summary>
        <para>Gets or sets the font used to display the text on the
      tree node's label.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.Nodes">
      <summary>
        <para>Gets the collection of <see cref="T:System.Windows.Forms.TreeNode" /> objects assigned to the current tree node.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.Parent">
      <summary>
        <para>Gets the parent tree node of the current tree node.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.PrevNode">
      <summary>
        <para>Gets the previous sibling tree node.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.PrevVisibleNode">
      <summary>
        <para>Gets the previous visible tree node.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.SelectedImageIndex">
      <summary>
        <para> Gets or sets the image list index value of the image that is displayed when the
      tree node is in the selected state.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.Tag">
      <summary>
        <para>Gets or sets the object that contains data about the tree node.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.Text">
      <summary>
        <para>Gets or sets the text displayed in the label of the tree node.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNode.TreeView">
      <summary>
        <para>Gets the parent tree view that the tree node is assigned to.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.TreeNodeCollection">
      <summary>
        <para>Represents a collection of <see cref="T:System.Windows.Forms.TreeNode" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TreeNodeCollection.Add(System.String)">
      <summary>
        <para>Adds a new tree node to the end of the current tree node collection with the specified label text.</para>
      </summary>
      <param name="text">The label text displayed by the <see cref="T:System.Windows.Forms.TreeNode" /> .</param>
      <returns>
        <para>A <see cref="T:System.Windows.Forms.TreeNode" /> that represents the tree node being added to the
   collection.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.TreeNodeCollection.AddRange(System.Windows.Forms.TreeNode[])">
      <summary>
        <para>Adds an array of previously created tree
 nodes to the collection.</para>
      </summary>
      <param name="nodes">An array of <see cref="T:System.Windows.Forms.TreeNode" /> objects representing the tree nodes to add to the collection.</param>
    </member>
    <member name="M:System.Windows.Forms.TreeNodeCollection.Add(System.Windows.Forms.TreeNode)">
      <summary>
        <para>Adds a previously created tree node to the end of the tree node collection.</para>
      </summary>
      <param name="node">The <see cref="T:System.Windows.Forms.TreeNode" /> to add to the collection.</param>
      <returns>
        <para>The zero-based index value of the <see cref="T:System.Windows.Forms.TreeNode" />
added to the tree node collection. </para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.TreeNodeCollection.Contains(System.Windows.Forms.TreeNode)">
      <summary>
        <para>Determines whether the specified tree node
      is a member of the collection.</para>
      </summary>
      <param name="node">The <see cref="T:System.Windows.Forms.TreeNode" /> to locate in the collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Windows.Forms.TreeNode" />
is a member of the collection; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.TreeNodeCollection.IndexOf(System.Windows.Forms.TreeNode)">
      <summary>
        <para> Returns the index of the specified tree node in the collection.</para>
      </summary>
      <param name="node">The <see cref="T:System.Windows.Forms.TreeNode" /> to locate in the collection.</param>
      <returns>
        <para> The zero-based index of the item found in the tree node collection;
      otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.Windows.Forms.TreeNode)">
      <summary>
        <para>Inserts an existing tree node in the tree node collection at the specified location.</para>
      </summary>
      <param name="index">The indexed location within the collection to insert the tree node. </param>
      <param name="node">The <see cref="T:System.Windows.Forms.TreeNode" /> to insert into the collection. </param>
    </member>
    <member name="M:System.Windows.Forms.TreeNodeCollection.Clear">
      <summary>
        <para> Removes all tree nodes from the collection.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TreeNodeCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the entire collection into an existing array at a
      specified location within the array.</para>
      </summary>
      <param name="dest">The destination array.</param>
      <param name=" index">The index in the destination array at which storing begins.</param>
    </member>
    <member name="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)">
      <summary>
        <para>Removes the specified tree node from
      the tree node collection.</para>
      </summary>
      <param name="node">The <see cref="T:System.Windows.Forms.TreeNode" /> to remove.</param>
    </member>
    <member name="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)">
      <summary>
        <para>Removes a tree node from the tree node collection at a specified index.</para>
      </summary>
      <param name="index">The index of the <see cref="T:System.Windows.Forms.TreeNode" /> to remove.</param>
    </member>
    <member name="M:System.Windows.Forms.TreeNodeCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can be used to iterate through the tree node
      collection.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> object that represents the tree node collection.</para>
      </returns>
    </member>
    <member name="P:System.Windows.Forms.TreeNodeCollection.Item(System.Int32)">
      <summary>
        <para>Indicates the <see cref="T:System.Windows.Forms.TreeNode" /> at the specified
   indexed location in the collection.</para>
      </summary>
      <param name="index">The indexed location of the <see cref="T:System.Windows.Forms.TreeNode" /> in the collection.</param>
    </member>
    <member name="P:System.Windows.Forms.TreeNodeCollection.Count">
      <summary>
        <para> Gets the total number of <see cref="T:System.Windows.Forms.TreeNode" /> objects in the
   collection.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeNodeCollection.IsReadOnly">
      <summary>
        <para> Gets a value indicating whether the collection is read-only.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.TreeNodeConverter">
      <summary>
        <para>Provides a type converter to convert <see cref="T:System.Windows.Forms.TreeNode" /> objects to and from various other
   representations.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.TreeView">
      <summary>
        <para>Displays a hierarchical collection of labeled items, each represented by a
   <see cref="T:System.Windows.Forms.TreeNode" />. </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TreeView.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.TreeView" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TreeView.BeginUpdate">
      <summary>
        <para>Disables any redrawing of the tree view. </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TreeView.CollapseAll">
      <summary>
        <para> Collapses all the tree nodes.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TreeView.EndUpdate">
      <summary>
        <para>Enables the redrawing of the tree view. </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TreeView.ExpandAll">
      <summary>
        <para> Expands all the tree nodes.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TreeView.GetNodeCount(System.Boolean)">
      <summary>
        <para>Retrieves the number of tree nodes, optionally including those in all subtrees, assigned to the tree
      view control.</para>
      </summary>
      <param name="includeSubTrees">
        <para>
          <see langword="true" /> to count the <see cref="T:System.Windows.Forms.TreeNode" /> items that the subtrees contain; otherwise, <see langword="false" />.</para>
      </param>
      <returns>
        <para> The number of tree nodes, optionally including
      those in all subtrees, assigned to the tree view control.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.TreeView.GetNodeAt(System.Drawing.Point)">
      <summary>
        <para>Retrieves the tree node that is at the specified point.</para>
      </summary>
      <param name="pt">The <see cref="T:System.Drawing.Point" /> to evaluate and retrieve the node from. </param>
      <returns>
        <para>The <see cref="T:System.Windows.Forms.TreeNode" /> at the specified point, in tree view
   coordinates.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.TreeView.GetNodeAt(System.Int32,System.Int32)">
      <summary>
        <para>Retrieves the tree node at the point with the specified coordinates.</para>
      </summary>
      <param name="x">The <see cref="P:System.Drawing.Point.X" /> position to evaluate and retrieve the node from. </param>
      <param name="y">The <see cref="P:System.Drawing.Point.Y" /> position to evaluate and retrieve the node from. </param>
      <returns>
        <para>The <see cref="T:System.Windows.Forms.TreeNode" /> at the specified location, in tree view coordinates.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.TreeView.OnBeforeLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.TreeView.BeforeLabelEdit" /> event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.NodeLabelEditEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.TreeView.OnAfterLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.TreeView.AfterLabelEdit" /> event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.NodeLabelEditEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.TreeView.OnBeforeCheck(System.Windows.Forms.TreeViewCancelEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.TreeView.BeforeCheck" /> event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.TreeViewCancelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.TreeView.OnAfterCheck(System.Windows.Forms.TreeViewEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.TreeView.AfterCheck" /> event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.TreeViewEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.TreeView.OnBeforeCollapse(System.Windows.Forms.TreeViewCancelEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.TreeView.BeforeCollapse" /> event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.TreeViewCancelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.TreeView.OnAfterCollapse(System.Windows.Forms.TreeViewEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.TreeView.AfterCollapse" /> event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.TreeViewEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.TreeView.OnBeforeExpand(System.Windows.Forms.TreeViewCancelEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.TreeView.BeforeExpand" /> event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.TreeViewCancelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.TreeView.OnAfterExpand(System.Windows.Forms.TreeViewEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.TreeView.AfterExpand" /> event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.TreeViewEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.TreeView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.TreeView.ItemDrag" /> event.</para>
      </summary>
      <param name="e">An <see cref="T:System.Windows.Forms.ItemDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.TreeView.OnBeforeSelect(System.Windows.Forms.TreeViewCancelEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.TreeView.BeforeSelect" /> event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.TreeViewCancelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.TreeView.OnAfterSelect(System.Windows.Forms.TreeViewEventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.TreeView.AfterSelect" /> event.</para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.TreeViewEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:System.Windows.Forms.TreeView.BorderStyle">
      <summary>
        <para>Gets or sets the border style of the tree view control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.CheckBoxes">
      <summary>
        <para>Gets or sets a value indicating whether check boxes are displayed next to the tree nodes in the tree view control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.FullRowSelect">
      <summary>
        <para> Gets or sets a value indicating whether the selection highlight spans
      the width of the tree view control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.HideSelection">
      <summary>
        <para>Gets or sets a value indicating whether the selected tree node
      remains highlighted even when the tree view has lost the focus.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.HotTracking">
      <summary>
        <para>Gets or sets a value indicating whether a tree node label takes on the appearance of
      a hyperlink as the mouse pointer passes over it.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.ImageIndex">
      <summary>
        <para>Gets or sets the image-list index value of the default image that is displayed by the tree
      nodes.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.ImageList">
      <summary>
        <para>Gets or sets the <see cref="T:System.Windows.Forms.ImageList" /> that contains the <see cref="T:System.Drawing.Image" /> objects used
   by the tree nodes.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.Indent">
      <summary>
        <para>Gets or sets the distance to indent each of the child tree node levels.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.ItemHeight">
      <summary>
        <para>Gets or sets the height of each tree node in the tree view control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.LabelEdit">
      <summary>
        <para> Gets or sets a value indicating whether the label text of the
      tree nodes can be edited.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.Nodes">
      <summary>
        <para>Gets the collection of tree nodes that are assigned to the tree view control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.PathSeparator">
      <summary>
        <para>Gets or sets the delimiter string that the tree node path uses.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.Scrollable">
      <summary>
        <para>Gets or sets a value indicating whether the tree view control displays scroll bars when
      they are needed.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.SelectedImageIndex">
      <summary>
        <para> Gets or sets the image list index value of the image that is displayed when a tree node is selected.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.SelectedNode">
      <summary>
        <para>Gets or sets the tree node that is currently selected in the tree view control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.ShowLines">
      <summary>
        <para>Gets or sets a value indicating whether lines are drawn between tree nodes
      in the tree view control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.ShowPlusMinus">
      <summary>
        <para>Gets or sets a value indicating whether plus-sign (+) and minus-sign (-) buttons
      are displayed next to tree nodes that contain child tree nodes.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.ShowRootLines">
      <summary>
        <para>Gets or sets a value indicating whether lines are drawn between the tree nodes that
      are at the root of the tree view.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.Sorted">
      <summary>
        <para>Gets or sets a value indicating whether the tree nodes in the tree view are sorted.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.TopNode">
      <summary>
        <para> Gets the first fully-visible tree node in the tree view
      control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeView.VisibleCount">
      <summary>
        <para>Gets the number of tree nodes that can be fully visible in the tree view
      control.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.TreeView.BeforeLabelEdit">
      <summary>
        <para>Occurs before the tree node label text is edited.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.TreeView.AfterLabelEdit">
      <summary>
        <para>Occurs after the tree node label text is edited.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.TreeView.BeforeCheck">
      <summary>
        <para>Occurs before the tree node check box is checked.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.TreeView.AfterCheck">
      <summary>
        <para>Occurs after the tree node check box is checked.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.TreeView.BeforeCollapse">
      <summary>
        <para>Occurs before the tree node is collapsed.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.TreeView.AfterCollapse">
      <summary>
        <para>Occurs after the tree node is collapsed.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.TreeView.BeforeExpand">
      <summary>
        <para>Occurs before the tree node is expanded.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.TreeView.AfterExpand">
      <summary>
        <para>Occurs after the tree node is expanded.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.TreeView.ItemDrag">
      <summary>
        <para>Occurs when an item is dragged into the tree view control.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.TreeView.BeforeSelect">
      <summary>
        <para>Occurs before the tree node is selected.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.TreeView.AfterSelect">
      <summary>
        <para>Occurs after the tree node is selected.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.TreeViewAction">
      <summary>
        <para>Specifies the action that raised a <see cref="T:System.Windows.Forms.TreeViewEventArgs" /> event.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TreeViewAction.Unknown">
      <summary>
        <para>The action that caused the event is unknown.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TreeViewAction.ByKeyboard">
      <summary>
     The event was caused by a keystroke.
 </summary>
    </member>
    <member name="F:System.Windows.Forms.TreeViewAction.ByMouse">
      <summary>
        <para>The event was caused by a mouse operation.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TreeViewAction.Collapse">
      <summary>
        <para>The event was caused by the <see cref="T:System.Windows.Forms.TreeNode" /> collapsing.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.TreeViewAction.Expand">
      <summary>
        <para>The event was caused by the <see cref="T:System.Windows.Forms.TreeNode" /> expanding.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.TreeViewCancelEventArgs">
      <summary>
        <para> Provides data for the <see cref="E:System.Windows.Forms.TreeView.BeforeCheck" />, <see cref="E:System.Windows.Forms.TreeView.BeforeCollapse" />, <see cref="E:System.Windows.Forms.TreeView.BeforeExpand" />, or <see cref="E:System.Windows.Forms.TreeView.BeforeSelect" /> events of a <see cref="T:System.Windows.Forms.TreeView" /> control.
   </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TreeViewCancelEventArgs.#ctor(System.Windows.Forms.TreeNode,System.Boolean,System.Windows.Forms.TreeViewAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.TreeViewCancelEventArgs" /> class with the
   specified tree node,
   a value specifying whether
   the event is to be canceled, and the
   type of tree view action that raised the event.</para>
      </summary>
      <param name="node">The <see cref="T:System.Windows.Forms.TreeNode" /> that the event is responding to.</param>
      <param name=" cancel">
        <see langword="true" /> to cancel the event; otherwise, <see langword="false" />.</param>
      <param name=" action">The type of <see cref="T:System.Windows.Forms.TreeViewAction" /> that raised the event.</param>
    </member>
    <member name="P:System.Windows.Forms.TreeViewCancelEventArgs.Node">
      <summary>
        <para> Gets the tree node to be checked, expanded, collapsed, or selected.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeViewCancelEventArgs.Action">
      <summary>
        <para> Gets the type of <see cref="T:System.Windows.Forms.TreeViewAction" /> that raised the event.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.TreeViewCancelEventHandler">
      <summary>
        <para> Represents the method that will handle the <see cref="E:System.Windows.Forms.TreeView.BeforeCheck" />, <see cref="E:System.Windows.Forms.TreeView.BeforeCollapse" />, <see cref="E:System.Windows.Forms.TreeView.BeforeExpand" />, or <see cref="E:System.Windows.Forms.TreeView.BeforeSelect" /> event of a <see cref="T:System.Windows.Forms.TreeView" />.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">A <see cref="T:System.Windows.Forms.TreeViewCancelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Windows.Forms.TreeViewEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Windows.Forms.TreeView.AfterCheck" />, <see cref="E:System.Windows.Forms.TreeView.AfterCollapse" />, <see cref="E:System.Windows.Forms.TreeView.AfterExpand" />, or <see cref="E:System.Windows.Forms.TreeView.AfterSelect" /> events of a <see cref="T:System.Windows.Forms.TreeView" /> control.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.TreeViewEventArgs.#ctor(System.Windows.Forms.TreeNode)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.TreeViewEventArgs" /> class for the specified tree node.</para>
      </summary>
      <param name="node">The <see cref="T:System.Windows.Forms.TreeNode" /> that the event is responding to.</param>
    </member>
    <member name="M:System.Windows.Forms.TreeViewEventArgs.#ctor(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeViewAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.TreeViewEventArgs" /> class for the specified
   tree node and with the specified type of action that raised the
   event.</para>
      </summary>
      <param name="node">The <see cref="T:System.Windows.Forms.TreeNode" /> that the event is responding to.</param>
      <param name=" action">The type of <see cref="T:System.Windows.Forms.TreeViewAction" /> that raised the event.</param>
    </member>
    <member name="P:System.Windows.Forms.TreeViewEventArgs.Node">
      <summary>
        <para> Gets the tree node that has been checked,
      expanded, collapsed, or selected.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeViewEventArgs.Action">
      <summary>
        <para> Gets the type of action<see langword=" " />that raised the 
   event.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.TreeViewEventHandler">
      <summary>
        <para> Represents the method that will handle the <see cref="E:System.Windows.Forms.TreeView.AfterCheck" />, <see cref="E:System.Windows.Forms.TreeView.AfterCollapse" />, <see cref="E:System.Windows.Forms.TreeView.AfterExpand" />, or <see cref="E:System.Windows.Forms.TreeView.AfterSelect" />
event of a <see cref="T:System.Windows.Forms.TreeView" />
.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">A <see cref="T:System.Windows.Forms.TreeViewEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Windows.Forms.TreeViewImageIndexConverter">
      <summary>
        <para>Provides a type converter to convert data for an image index to and
      from one data type to another for use by the <see cref="T:System.Windows.Forms.TreeView" /> control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.TreeViewImageIndexConverter.IncludeNoneAsStandardValue">
      <summary>
        <para> Gets a value indicating whether a <see langword="none" /> or <see langword="null" /> value is valid in
   the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> collection.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.UICues">
      <summary>
        <para> Specifies the state of the user interface.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.UICues.ShowFocus">
      <summary>
        <para>Focus rectangles are displayed after the change.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.UICues.ShowKeyboard">
      <summary>
     Keyboard cues are underlined after the change.
 </summary>
    </member>
    <member name="F:System.Windows.Forms.UICues.Shown">
      <summary>
        <para>Focus rectangles are displayed and keyboard cues are underlined after the change.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.UICues.ChangeFocus">
      <summary>
     The state of the focus cues has changed.
 </summary>
    </member>
    <member name="F:System.Windows.Forms.UICues.ChangeKeyboard">
      <summary>
     The state of the keyboard cues has changed.
 </summary>
    </member>
    <member name="F:System.Windows.Forms.UICues.Changed">
      <summary>
        <para>The state of the focus cues and keyboard cues has changed.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.UICues.None">
      <summary>
        <para>No change was made.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.UICuesEventArgs">
      <summary>
        <para> Provides data for the <see cref="E:System.Windows.Forms.Control.ChangeUICues" /> event.
   </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.UICuesEventArgs.#ctor(System.Windows.Forms.UICues)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.UICuesEventArgs" /> class with the specified <see cref="T:System.Windows.Forms.UICues" /> .</para>
      </summary>
      <param name="uicues">A bitwise combination of the <see cref="T:System.Windows.Forms.UICues" /> values.</param>
    </member>
    <member name="P:System.Windows.Forms.UICuesEventArgs.ShowFocus">
      <summary>
        <para>Gets a value indicating whether focus rectangles are shown after the
      change.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.UICuesEventArgs.ShowKeyboard">
      <summary>
        <para>Gets a value indicating whether keyboard cues are underlined after the
      change.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.UICuesEventArgs.ChangeFocus">
      <summary>
        <para>Gets a value indicating whether the state of the focus cues has changed.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.UICuesEventArgs.ChangeKeyboard">
      <summary>
        <para>Gets a value indicating whether the state of the keyboard cues has
      changed.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.UICuesEventArgs.Changed">
      <summary>
        <para> Gets the bitwise combination of the <see cref="T:System.Windows.Forms.UICues" /> values.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.UICuesEventHandler">
      <summary>
        <para>
       Represents a method that will handle the <see cref="E:System.Windows.Forms.Control.ChangeUICues" /> event of a <see cref="T:System.Windows.Forms.Control" />.
    </para>
      </summary>
      <param name="sender">
    The source of the event.
 </param>
      <param name="e">
    A <see cref="T:System.Windows.Forms.UICuesEventArgs" /> that contains the event data.
 </param>
    </member>
    <member name="M:System.Windows.Forms.UpDownEventArgs.#ctor(System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.UpDownEventArgs.ButtonID">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.UserControl">
      <summary>
        <para> Provides an empty control that can be used
      to create other controls.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.UserControl.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.UserControl" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.UserControl.OnLoad(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.UserControl.Load" /> event.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="E:System.Windows.Forms.UserControl.Load">
      <summary>
        <para>Occurs before the control becomes visible for the first time.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.View">
      <summary>
        <para>
       Specifies how list items are displayed in
       a <see cref="T:System.Windows.Forms.ListView" /> control.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.View.LargeIcon">
      <summary>
     Each item appears as a full-sized icon with a label below it.
 </summary>
    </member>
    <member name="F:System.Windows.Forms.View.Details">
      <summary>
        <para>Each item appears on a separate line with further information
       about each item arranged in columns. The left most
       column contains
       a small icon and label,
       and subsequent columns contain sub items as specified by the application. A
       column displays a header which can display a caption for the
       column. The user can resize each column at runtime.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.View.SmallIcon">
      <summary>
        <para>
       Each item appears as a small icon with a label to its right.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.View.List">
      <summary>
        <para>
       Each item
       appears as a small icon with a label to its right.
       Items are arranged in columns with no column headers.
    </para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.VScrollBar">
      <summary>
        <para>Represents
       a standard Windows vertical scroll bar.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.WinCategoryAttribute.#ctor(System.String)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.CategoryAttribute" /> class.
    </para>
      </summary>
      <param name="category">
    The name of the category.
 </param>
    </member>
    <member name="M:System.Windows.Forms.WinCategoryAttribute.GetLocalizedString(System.String)">
      <summary>
     This method is called the first time the category property
     is accessed.  It provides a way to lookup a localized string for
     the given category.  Classes may override this to add their
     own localized names to categories.  If a localized string is
     available for the given value, the method should return it.
     Otherwise, it should return null.
 </summary>
      <param name="value">
     The value of the string.
 </param>
    </member>
    <member name="M:System.Windows.Forms.WindowsFormsSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
    </member>
    <member name="M:System.Windows.Forms.IComponentEditorPageSite.GetControl">
      <summary>
    Returns the parent control for the page window.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.IComponentEditorPageSite.SetDirty">
      <summary>
        <para>Notifies the site that the editor is in dirty state.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.Design.ComponentEditorForm">
      <summary>
        <para>Provides a user interface for a <see cref="T:System.Windows.Forms.Design.WindowsFormsComponentEditor" />.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorForm.#ctor(System.Object,System.Type[])">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.ComponentEditorForm" /> class.
    </para>
      </summary>
      <param name="component">
    The component to be edited.
 </param>
      <param name="pageTypes">
    The set of <see cref="T:System.Windows.Forms.Design.ComponentEditorPage" /> objects to be shown in the form.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorForm.PreProcessMessage(System.Windows.Forms.Message@)">
      <summary>
        <para>Provides a method to override in order to pre-process input messages before
      they are dispatched.</para>
      </summary>
      <param name="msg">A <see cref="T:System.Windows.Forms.Message" /> that specifies the message to pre-process.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified message is for a component editor
   page; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorForm.ShowForm">
      <summary>
        <para>Shows the form. The form will have no owner window.</para>
      </summary>
      <returns>
        <para>One of the <see cref="T:System.Windows.Forms.DialogResult" /> values
   indicating the result code returned from the dialog
   box.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorForm.ShowForm(System.Int32)">
      <summary>
        <para> Shows the specified page of the specified form. The form will have no owner window.</para>
      </summary>
      <param name="page">The index of the page to show.</param>
      <returns>
        <para>One of the <see cref="T:System.Windows.Forms.DialogResult" /> values
   indicating the result code returned from the dialog
   box.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorForm.ShowForm(System.Windows.Forms.IWin32Window)">
      <summary>
        <para>Shows the form with the specified owner.</para>
      </summary>
      <param name="owner">The <see cref="T:System.Windows.Forms.IWin32Window" /> to own the dialog.</param>
      <returns>
        <para>One of the <see cref="T:System.Windows.Forms.DialogResult" /> values
   indicating the result code returned from the dialog
   box.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorForm.ShowForm(System.Windows.Forms.IWin32Window,System.Int32)">
      <summary>
        <para>Shows the form and the specified page with the specified owner.</para>
      </summary>
      <param name=" owner">The <see cref="T:System.Windows.Forms.IWin32Window" /> to own the dialog.</param>
      <param name="page">The index of the page to show.</param>
      <returns>
        <para>One of the <see cref="T:System.Windows.Forms.DialogResult" /> values
   indicating the result code returned from the dialog
   box.</para>
      </returns>
    </member>
    <member name="T:System.Windows.Forms.Design.ComponentEditorPage">
      <summary>
        <para>Provides a base implementation for a <see cref="T:System.Windows.Forms.Design.ComponentEditorPage" />.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.#ctor">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.ComponentEditorPage" /> class.
    </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.Activate">
      <summary>
     Activates and displays the page.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.ApplyChanges">
      <summary>
        <para>Applies changes to all the components being edited.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.Deactivate">
      <summary>
        <para>Deactivates and hides the page.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.EnterLoadingMode">
      <summary>
        <para>Increments the loading counter.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.ExitLoadingMode">
      <summary>
        <para>Decrements the loading counter.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.GetControl">
      <summary>
        <para>Gets the control that represents the window for this page.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Windows.Forms.Control" /> that represents the window for this page.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.GetSelectedComponent">
      <summary>
        <para>Gets the component that is to be edited.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.ComponentModel.IComponent" /> that is being edited.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.IsPageMessage(System.Windows.Forms.Message@)">
      <summary>
        <para>Processes messages that could be handled by the page.</para>
      </summary>
      <param name="msg">The Message to process.</param>
      <returns>
        <para>
          <see langword="true " />if the page processed the message;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.IsFirstActivate">
      <summary>
        <para>Gets a value indicating whether the page is being activated for the first time.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if this is the first time the page is being 
    activated; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.IsLoading">
      <summary>
        <para>Gets a value indicating whether the page is being loaded.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the page is being
   loaded; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.LoadComponent">
      <summary>
        <para>Loads the component into the page UI.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.OnApplyComplete">
      <summary>
        <para> Called when the page and any sibling
      pages have applied their changes.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.ReloadComponent">
      <summary>
        <para> 
      Reloads the component for the page.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.SaveComponent">
      <summary>
        <para>Saves the component from the page UI.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.SetDirty">
      <summary>
        <para>Sets the page as changed since the last load or save.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.SetComponent(System.ComponentModel.IComponent)">
      <summary>
        <para>Sets the component to be edited.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> to be edited.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.ShowHelp">
      <summary>
        <para>Shows help information if the page supports help information.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentEditorPage.SupportsHelp">
      <summary>
        <para>Gets a value indicating whether the editor supports Help.</para>
      </summary>
      <returns>
        <para>
          <see langword="true " />if the editor supports Help;
   otherwise, <see langword="false" />. The default implementation returns
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentEditorPage.Component">
      <summary>
        <para>Gets or sets the component to edit.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentEditorPage.FirstActivate">
      <summary>
        <para>Gets or sets a value indicating whether the page is being activated for the first time.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentEditorPage.LoadRequired">
      <summary>
        <para>Gets or sets a value indicating whether a component must be loaded before editing can occur.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentEditorPage.Loading">
      <summary>
        <para>Indicates how many load dependencies remain until loading has been completed.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentEditorPage.CommitOnDeactivate">
      <summary>
        <para> Specifies whether the editor should apply its
      changes before it is deactivated.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentEditorPage.CreateParams">
      <summary>
        <para> Gets the creation parameters for the control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentEditorPage.Icon">
      <summary>
        <para>Gets or sets the icon for the page.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentEditorPage.Title">
      <summary>
        <para> Gets the title of the page.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.Design.EventsTab">
      <summary>
        <para>Provides a <see cref="T:System.Windows.Forms.Design.PropertyTab" /> that can display events for selection and linking.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.Design.PropertyTab">
      <summary>
        <para>Provides a base class for property tabs.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.PropertyTab.CanExtend(System.Object)">
      <summary>
        <para>Gets a value indicating whether the specified object can be extended.</para>
      </summary>
      <param name="extendee"> The object to test for extensibility.</param>
      <returns>
        <para>
          <see langword="true" /> if the object can be extended; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.PropertyTab.Dispose">
      <summary>
        <para>Releases all the resources used by the <see cref="T:System.Windows.Forms.Design.PropertyTab" /> .</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.PropertyTab.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Design.PropertyTab" /> and optionally releases the managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.PropertyTab.GetDefaultProperty(System.Object)">
      <summary>
        <para>Gets the default property of the specified component.</para>
      </summary>
      <param name="component">The component to retrieve the default property of.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that represents the default property.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.PropertyTab.GetProperties(System.Object)">
      <summary>
        <para>Gets the properties of the specified component.</para>
      </summary>
      <param name="component">The component to retrieve the properties of.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains the properties of
   the component.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.PropertyTab.GetProperties(System.Object,System.Attribute[])">
      <summary>
        <para>Gets the properties of the specified component that match the specified
      attributes.</para>
      </summary>
      <param name="component">The component to retrieve properties from.</param>
      <param name=" attributes">An array of type <see cref="T:System.Attribute" /> that indicates the attributes of the properties to retrieve.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains the properties.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.PropertyTab.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
        <para>Gets the properties of the specified component that match the specified attributes and context.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that indicates the context to retrieve properties from.</param>
      <param name=" component">The component to retrieve properties from.</param>
      <param name=" attributes">An array of type <see cref="T:System.Attribute" /> that indicates the attributes of the properties to retrieve.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains the properties matching
   the specified context and attributes.</para>
      </returns>
    </member>
    <member name="P:System.Windows.Forms.Design.PropertyTab.Bitmap">
      <summary>
        <para> Gets a bitmap to display in the property tab.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.PropertyTab.Components">
      <summary>
        <para>Gets or sets the array of components the property tab is associated with.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.PropertyTab.TabName">
      <summary>
        <para> Gets the name for the property tab.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.PropertyTab.HelpKeyword">
      <summary>
        <para> Gets the Help keyword that is to be
      associated with this tab.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.EventsTab.#ctor(System.IServiceProvider)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.EventsTab" /> class.</para>
      </summary>
      <param name="sp">An <see cref="T:System.IServiceProvider" /> to use.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.EventsTab.CanExtend(System.Object)">
      <summary>
        <para>Gets a value indicating whether the specified object can be extended.</para>
      </summary>
      <param name="extendee">The object to test for extensibility.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified object can be extended; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.EventsTab.GetDefaultProperty(System.Object)">
      <summary>
        <para>Gets the default property from the specified object.</para>
      </summary>
      <param name="obj">The object to retrieve the default property of.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> indicating the default property.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.EventsTab.GetProperties(System.Object,System.Attribute[])">
      <summary>
        <para> 
      Gets all the properties of the
      event tab that match the specified attributes.</para>
      </summary>
      <param name="component">The component to retrieve the properties of.</param>
      <param name=" attributes">An array of <see cref="T:System.Attribute" /> that indicates the attributes of the event properties to retrieve. </param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 
that contains the properties. This will be an empty
<see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> if the component does not implement an event service.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.EventsTab.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
        <para>Gets all the properties of the event tab that match the specified attributes
      and context.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain context information.</param>
      <param name=" component">The component to retrieve the properties of.</param>
      <param name=" attributes">An array of type <see cref="T:System.Attribute" /> that indicates the attributes of the event properties to retrieve.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains the properties. This
   will be an empty <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> if the component does
   not implement an event service.</para>
      </returns>
    </member>
    <member name="P:System.Windows.Forms.Design.EventsTab.TabName">
      <summary>
        <para> Gets the name of the tab.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.EventsTab.HelpKeyword">
      <summary>
        <para> Gets the Help keyword for the tab.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.Design.IUIService">
      <summary>
        <para> 
      Enables interaction with the user
      interface of the development environment object that is hosting the designer.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.IUIService.CanShowComponentEditor(System.Object)">
      <summary>
        <para> Indicates whether the component can display a <see cref="T:System.Windows.Forms.Design.ComponentEditorForm" />.</para>
      </summary>
      <param name="component">The component to check for support for displaying a <see cref="T:System.Windows.Forms.Design.ComponentEditorForm" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified component can display a component editor
   form; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.IUIService.GetDialogOwnerWindow">
      <summary>
        <para>Gets the window that should be used as the owner when showing dialogs.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Windows.Forms.IWin32Window" /> that 
   indicates the window to own any child dialog
   boxes.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.IUIService.SetUIDirty">
      <summary>
        <para>Sets a flag indicating the UI has changed.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.IUIService.ShowComponentEditor(System.Object,System.Windows.Forms.IWin32Window)">
      <summary>
        <para>Attempts to display a <see cref="T:System.Windows.Forms.Design.ComponentEditorForm" /> for a component.</para>
      </summary>
      <param name="component">The component for which to display a <see cref="T:System.Windows.Forms.Design.ComponentEditorForm" /> .</param>
      <param name="parent">The <see cref="T:System.Windows.Forms.IWin32Window" /> to parent any dialogs to.</param>
      <returns>
        <para>
          <see langword="true" /> if the attempt is successful; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.IUIService.ShowDialog(System.Windows.Forms.Form)">
      <summary>
        <para>Attempts to display the specified form in a dialog box.</para>
      </summary>
      <param name="form">The <see cref="T:System.Windows.Forms.Form" /> to display.</param>
      <returns>
        <para>One of the <see cref="T:System.Windows.Forms.DialogResult" /> values 
   indicating the result code returned by the dialog box.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.IUIService.ShowError(System.String)">
      <summary>
        <para>Displays the specified error message in a message box.</para>
      </summary>
      <param name="message">The error message to display.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.IUIService.ShowError(System.Exception)">
      <summary>
        <para> Displays the specified exception and information
      about the exception in a message box.</para>
      </summary>
      <param name="ex">The <see cref="T:System.Exception" /> to display.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.IUIService.ShowError(System.Exception,System.String)">
      <summary>
        <para> Displays the specified exception and information
      about the exception in a message box.</para>
      </summary>
      <param name="ex">The <see cref="T:System.Exception" /> to display.</param>
      <param name="message">A message to display that provides information about the exception.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.IUIService.ShowMessage(System.String)">
      <summary>
        <para>Displays the specified message in a message box.</para>
      </summary>
      <param name="message">The message to display</param>
    </member>
    <member name="M:System.Windows.Forms.Design.IUIService.ShowMessage(System.String,System.String)">
      <summary>
        <para> Displays the specified message in
      a message box with the specified caption.</para>
      </summary>
      <param name="message">The message to display.</param>
      <param name="caption">The caption for the message box.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.IUIService.ShowMessage(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
      <summary>
        <para> Displays the specified message in a message box with the specified caption and
      buttons to place on the dialog box.</para>
      </summary>
      <param name="message">The message to display.</param>
      <param name="caption">The caption for the dialog box.</param>
      <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons" /> values: <see cref="F:System.Windows.Forms.MessageBoxButtons.OK" />, <see cref="F:System.Windows.Forms.MessageBoxButtons.OKCancel" />, <see cref="F:System.Windows.Forms.MessageBoxButtons.YesNo" />, or <see cref="F:System.Windows.Forms.MessageBoxButtons.YesNoCancel" />.</param>
      <returns>
        <para>One of the <see cref="T:System.Windows.Forms.DialogResult" /> values 
   indicating the result code returned by the dialog box.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.IUIService.ShowToolWindow(System.Guid)">
      <summary>
        <para>Displays the specified tool window.</para>
      </summary>
      <param name="toolWindow">A <see cref="T:System.Guid" /> identifier for the tool window. This can be a custom <see cref="T:System.Guid" /> or one of the predefined values from <see cref="T:System.ComponentModel.Design.StandardToolWindows" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the tool window was
   successfully shown; <see langword="false" /> if it couldn't
   be shown or found.</para>
      </returns>
    </member>
    <member name="P:System.Windows.Forms.Design.IUIService.Styles">
      <summary>
        <para> Gets the collection of
      styles that are specific to the host's environment.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.Design.IWindowsFormsEditorService">
      <summary>
        <para>Provides an interface to display Windows Forms dialog
      boxes or forms, and drop down list controls.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.IWindowsFormsEditorService.CloseDropDown">
      <summary>
        <para>Closes any previously opened drop down control.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.IWindowsFormsEditorService.DropDownControl(System.Windows.Forms.Control)">
      <summary>
        <para>Opens the specified drop down list control.</para>
      </summary>
      <param name="control">The drop down list <see cref="T:System.Windows.Forms.Control" /> to open.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.IWindowsFormsEditorService.ShowDialog(System.Windows.Forms.Form)">
      <summary>
        <para>Shows the specified <see cref="T:System.Windows.Forms.Form" /> .</para>
      </summary>
      <param name="dialog">The <see cref="T:System.Windows.Forms.Form" /> to display.</param>
      <returns>
        <para>A <see cref="T:System.Windows.Forms.DialogResult" /> indicating the result code returned by the
   dialog box.</para>
      </returns>
    </member>
    <member name="T:System.Windows.Forms.PageSetupDialog">
      <summary>
        <para> Represents
       a dialog box that allows users to manipulate page settings, including margins and paper orientation.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.PageSetupDialog.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.PageSetupDialog" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.PageSetupDialog.Reset">
      <summary>
        <para>
       Resets all options to their default values.
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PageSetupDialog.AllowMargins">
      <summary>
        <para>
       Gets or sets a value indicating whether the margins section of the dialog box is enabled.
       
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PageSetupDialog.AllowOrientation">
      <summary>
        <para> Gets or sets a value indicating whether the orientation section of the dialog box (landscape vs. portrait)
       is enabled.
       </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PageSetupDialog.AllowPaper">
      <summary>
        <para>
       Gets or sets a value indicating whether the paper section of the dialog box (paper size and paper source)
       is enabled.
       
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PageSetupDialog.AllowPrinter">
      <summary>
        <para>
       Gets or sets a value indicating whether the Printer button is enabled.
       
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PageSetupDialog.Document">
      <summary>
        <para>Gets or sets a value indicating the <see cref="T:System.Drawing.Printing.PrintDocument" /> 
 to get page settings from.
 </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PageSetupDialog.MinMargins">
      <summary>
        <para>
       Gets or sets a value indicating the minimum margins the
       user is allowed to select, in hundredths of an inch.
       
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PageSetupDialog.PageSettings">
      <summary>
   Gets or sets a value indicating the page settings to
   modify.
</summary>
    </member>
    <member name="P:System.Windows.Forms.PageSetupDialog.PrinterSettings">
      <summary>
        <para> Gets or sets
      the printer settings the dialog box to modify when the user clicks the Printer button.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PageSetupDialog.ShowHelp">
      <summary>
        <para>
       Gets or sets a value indicating whether the Help button is visible.
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PageSetupDialog.ShowNetwork">
      <summary>
        <para>
       Gets or sets a value indicating whether the Network button is visible.
    </para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.PrintControllerWithStatusDialog">
      <summary>
        <para>Controls how a document is printed.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.PrintControllerWithStatusDialog.#ctor(System.Drawing.Printing.PrintController)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.PrintControllerWithStatusDialog" /> class, wrapping the 
    supplied <see cref="T:System.Drawing.Printing.PrintController" /> .</para>
      </summary>
      <param name="underlyingController">A <see cref="T:System.Drawing.Printing.PrintController" /> to encapsulate.</param>
    </member>
    <member name="M:System.Windows.Forms.PrintControllerWithStatusDialog.#ctor(System.Drawing.Printing.PrintController,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.PrintControllerWithStatusDialog" /> class, wrapping the 
    supplied <see cref="T:System.Drawing.Printing.PrintController" />
    and specifying
    a title for the dialog.</para>
      </summary>
      <param name=" underlyingController">A <see cref="T:System.Drawing.Printing.PrintController" /> to encapsulate. </param>
      <param name="dialogTitle">A <see cref="T:System.String" /> containing a title for the status dialog.</param>
    </member>
    <member name="T:System.Windows.Forms.PrintDialog">
      <summary>
        <para> Allows users to select a printer and choose which
       portions of the document to print.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.PrintDialog.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.PrintDialog" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.PrintDialog.Reset">
      <summary>
        <para>
       Resets all options, the last selected printer, and the page
       settings to their default values.
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintDialog.AllowSomePages">
      <summary>
        <para>
       Gets or sets a value indicating whether the Pages option button is enabled.
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintDialog.AllowPrintToFile">
      <summary>
        <para>Gets or sets a value indicating whether the Print to file check box is enabled.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintDialog.AllowSelection">
      <summary>
        <para>
       Gets or sets a value indicating whether the From... To... Page option button is enabled.
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintDialog.Document">
      <summary>
        <para>
       Gets or sets a value indicating the <see cref="T:System.Drawing.Printing.PrintDocument" /> used to obtain <see cref="T:System.Drawing.Printing.PrinterSettings" />.
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintDialog.PrinterSettings">
      <summary>
        <para> Gets or sets the <see cref="T:System.Drawing.Printing.PrinterSettings" />
the dialog box modifies.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintDialog.PrintToFile">
      <summary>
        <para>Gets or sets a value indicating whether the Print to file check box is checked.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintDialog.ShowHelp">
      <summary>
        <para>
       Gets or sets a value indicating whether the Help button is displayed.
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintDialog.ShowNetwork">
      <summary>
        <para>
       Gets or sets a value indicating whether the Network button is displayed.
    </para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.PrintPreviewControl">
      <summary>
        <para> The raw "preview" part of print previewing, without any dialogs or buttons. Most PrintPreviewControl objects
      are found on PrintPreviewDialog objects, but
      they do not have to be.
      </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.PrintPreviewControl.#ctor">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.Windows.Forms.PrintPreviewControl" /> class.
    </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.PrintPreviewControl.InvalidatePreview">
      <summary>
        <para>
       Refreshes the preview of the document.
    </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.PrintPreviewControl.OnStartPageChanged(System.EventArgs)">
      <summary>
        <para>Raises the <see cref="E:System.Windows.Forms.PrintPreviewControl.StartPageChanged" /> event.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewControl.UseAntiAlias">
      <summary>
        <para>Gets or sets a value indicating whether printing uses the 
      anti-aliasing features of the operating system.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewControl.AutoZoom">
      <summary>
 Gets or sets a value indicating whether resizing the
 control or changing the number of pages shown automatically adjusts
 the <see cref="P:System.Windows.Forms.PrintPreviewControl.Zoom" /> property.
</summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewControl.Document">
      <summary>
        <para>
       Gets or sets a value indicating the document to preview.
       
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewControl.Columns">
      <summary>
        <para>
       Gets or sets the number of pages
       displayed horizontally across the screen.
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewControl.Rows">
      <summary>
        <para>
       Gets or sets the number of pages
       displayed vertically down the screen.
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewControl.StartPage">
      <summary>
        <para>
       Gets or sets the page number of the upper left page.
       
    </para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.PrintPreviewControl.StartPageChanged">
      <summary>
        <para>Occurs when the start page changes.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewControl.Zoom">
      <summary>
        <para>
       Gets or sets a value indicating how large the pages will appear.
    </para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.PrintPreviewDialog">
      <summary>
        <para> Represents a
       dialog box form that contains a <see cref="T:System.Windows.Forms.PrintPreviewControl" />.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.PrintPreviewDialog.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.PrintPreviewDialog" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.PrintPreviewDialog.CreateHandle">
      <summary>
        <para> Creates the handle for the form that encapsulates the
   <see cref="T:System.Windows.Forms.PrintPreviewDialog" />
   .</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.AcceptButton">
      <summary>
        <para>Gets or sets the button on the form that is clicked when
 the user presses the ENTER key.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.AutoScale">
      <summary>
        <para>Gets or sets a value indicating whether the form adjusts its size to fit the 
      height of the font used on the form and scales its controls.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.ControlBox">
      <summary>
        <para>Gets or sets a value indicating whether a control box is 
      displayed in the caption bar of the form.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.FormBorderStyle">
      <summary>
        <para>Gets or sets the border style of the form.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.HelpButton">
      <summary>
        <para>Gets or sets a value indicating whether a help button 
      should be displayed in the caption box of the form.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.Icon">
      <summary>
        <para>Gets or sets the icon for the form.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.IsMdiContainer">
      <summary>
        <para>Gets or sets a value indicating whether the form is a 
      container for multiple document interface (MDI) child forms.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.KeyPreview">
      <summary>
        <para>Gets or sets a value indicating whether the form will
 receive key events before the event is passed to the control that has focus.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.MaximumSize">
      <summary>
        <para>Gets or sets the maximum size the form can be resized to.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.MaximizeBox">
      <summary>
        <para>Gets or sets a value indicating whether the maximize 
      button is displayed in the caption bar of the form.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.Menu">
      <summary>
        <para>Gets or sets the <see cref="T:System.Windows.Forms.MainMenu" /> that is displayed in the form.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.MinimumSize">
      <summary>
        <para>Gets the minimum size the form can be resized to.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.Size">
      <summary>
        <para>Gets or sets the size of the form.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.StartPosition">
      <summary>
        <para>Gets or sets the starting position of the form at run time.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.TopMost">
      <summary>
        <para>Gets or sets a value indicating whether the form should be displayed as the 
      top-most form of your application.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.TransparencyKey">
      <summary>
        <para>Gets or sets the color that will represent transparent 
      areas of the form.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.WindowState">
      <summary>
        <para>Gets or sets the form's window state.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.AccessibleRole">
      <summary>
        <para>The accessible role of the control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.AccessibleDescription">
      <summary>
        <para>Gets or sets the accessible description of the control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.AccessibleName">
      <summary>
        <para>Gets or sets the accessible name of the control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.CausesValidation">
      <summary>
        <para>Gets or sets a value indicating whether entering the 
      control causes validation for all controls that require validation.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.DataBindings">
      <summary>
        <para>Gets the data bindings for the control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.Enabled">
      <summary>
        <para>Get or sets a value indicating whether the control is enabled.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.Location">
      <summary>
        <para>Gets or sets the coordinates of the upper-left corner of 
      the control relative to the upper-left corner of its container.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.Tag">
      <summary>
        <para>Gets or sets the object that contains data about the control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.ImeMode">
      <summary>
        <para>Gets or sets the Input Method Editor(IME) mode supported 
      by this control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.AutoScrollMargin">
      <summary>
        <para>Gets or sets the size of the auto-scroll margin.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.AutoScrollMinSize">
      <summary>
        <para>Gets or sets the minimum size of the auto-scroll.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.Visible">
      <summary>
        <para>Gets or sets a value indicating whether the control is visible.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.TabStop">
      <summary>
        <para>Gets or sets a value indicating whether the user can 
      give the focus to this control using the TAB key.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.UseAntiAlias">
      <summary>
        <para>Gets or sets a value indicating whether printing uses the 
      anti-aliasing features of the operating system.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.Document">
      <summary>
        <para>
       Gets or sets the document to preview.
    </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.MinimizeBox">
      <summary>
        <para>Gets or sets a value indicating whether the minimize
      button is displayed in the caption bar of the form.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.PrintPreviewControl">
      <summary>
        <para> Gets a value indicating the <see cref="T:System.Windows.Forms.PrintPreviewControl" />
contained in this form.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PrintPreviewDialog.ShowInTaskbar">
      <summary>
        <para>Gets or sets a value indicating whether the form is 
      displayed in the Windows taskbar.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetBackgroundBrush(System.Drawing.Graphics)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.AddOnLabelClick(System.EventHandler)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.AddOnLabelDoubleClick(System.EventHandler)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.AddOnValueClick(System.EventHandler)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.AddOnValueDoubleClick(System.EventHandler)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.AddOnOutlineClick(System.EventHandler)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.AddOnOutlineDoubleClick(System.EventHandler)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.AddOnRecreateChildren(System.Windows.Forms.PropertyGridInternal.GridEntryRecreateChildrenEventHandler)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.ConvertTextToValue(System.String)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.CreateChildren">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.CreateChildren(System.Boolean)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.DisposeChildren">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.Equals(System.Object)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.FindPropertyValue(System.String,System.Type)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetComponents">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetValueOwner">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetValueOwners">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetChildValueOwner(System.Windows.Forms.PropertyGridInternal.GridEntry)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetTestingInfo">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetValueType">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetPropEntries(System.Windows.Forms.PropertyGridInternal.GridEntry,System.Object,System.Type)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.ResetPropertyValue">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.CanResetPropertyValue">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.DoubleClickPropertyValue">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetPropertyTextValue">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetPropertyTextValue(System.Object)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetPropertyValueList">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetFlagSet(System.Int32)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GetService(System.Type)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.PaintLabel(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.PaintOutline(System.Drawing.Graphics,System.Drawing.Rectangle)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.PaintValue(System.Object,System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.PropertyGridInternal.GridEntry.PaintValueFlags)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.OnLabelClick(System.EventArgs)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.OnLabelDoubleClick(System.EventArgs)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.OnMouseClick(System.Int32,System.Int32,System.Int32,System.Windows.Forms.MouseButtons)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.OnOutlineClick(System.EventArgs)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.OnOutlineDoubleClick(System.EventArgs)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.OnRecreateChildren(System.Windows.Forms.PropertyGridInternal.GridEntryRecreateChildrenEventArgs)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.OnValueClick(System.EventArgs)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.OnValueDoubleClick(System.EventArgs)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.PaintValue(System.Drawing.Graphics,System.Drawing.Rectangle)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.SetFlag(System.Int32,System.Boolean)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.SetFlag(System.Int32,System.Int32,System.Boolean)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.SetFlag(System.Int32,System.Int32)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.Refresh">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.SetPropertyTextValue(System.String)">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.AllowMerge">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.BrowsableAttributes">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.Component">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.Container">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.Focus">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.FullLabel">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.HelpKeyword">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.Instance">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.PropertyDescriptor">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.OutlineRect">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.PropertyCategory">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.PropertyDepth">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.PropertyDescription">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.PropertyLabel">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.PropertyName">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.PropertyType">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.GridEntry.PropertyValue">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GridEntryAccessibleObject.GetFocused">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.GridEntry.GridEntryAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.CategoryGridEntry.GetChildValueOwner(System.Windows.Forms.PropertyGridInternal.GridEntry)">
      <summary>
 Gets the owner of the current value.  This is usually the value of the
 root entry, which is the object being browsed
 </summary>
      <returns>
 The object that owns the current value
 </returns>
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.ViewEvent(System.Object,System.String,System.ComponentModel.EventDescriptor,System.Boolean)">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.AllowMerge">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.HelpKeyword">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.PropertyDescriptor">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.PropertyName">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.PropertyValue">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.ExceptionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.ExceptionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry.ExceptionEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="T:System.Windows.Forms.PropertyGridInternal.IRootGridEntry">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.IRootGridEntry.ResetBrowsableAttributes">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.IRootGridEntry.ShowCategories(System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.IRootGridEntry.BrowsableAttributes">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.CanResetValue(System.Object)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.CreateAttributeCollection">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.GetEditor(System.Type)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.GetValue(System.Object)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.ResetValue(System.Object)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.SetValue(System.Object,System.Object)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.ShouldSerializeValue(System.Object)">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.ComponentType">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.Converter">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.IsLocalizable">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.IsReadOnly">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.PropertyType">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.MultiMergeCollection.MergeCollection(System.Collections.ICollection)">
      <summary>
 Ensures that the new collection equals the exisitng one.
 Otherwise, it wipes out the contents of the new collection.
 </summary>
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.MultiMergeCollection.Count">
      <summary>
     Retrieves the number of items.
 </summary>
      <returns>
     count of item.
 </returns>
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.MergePropertyDescriptor.MultiMergeCollection.Locked">
      <summary>
     Prevents the contents of the collection from being re-initialized;
 </summary>
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.MultiPropertyDescriptorGridEntry.GetPropertyTextValue(System.Object)">
      <summary>
 Returns the text value of this property.
 </summary>
      <param name="value">
 The raw value type
 </param>
      <returns>
 The text string representing this property's value
 </returns>
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.SingleSelectRootGridEntry.ResetBrowsableAttributes">
      <summary>
 Reset the Browsable attributes to the default (BrowsableAttribute.Yes)
 </summary>
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.SingleSelectRootGridEntry.ShowCategories(System.Boolean)">
      <summary>
 Sets the value of this GridEntry from text
 </summary>
      <returns>
 True if the new value caused the child list to change
 </returns>
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.SingleSelectRootGridEntry.BrowsableAttributes">
      <summary>
 The set of attributes that will be used for browse filtering
 </summary>
      <returns>
 The array of attributes to filter on.  Only properties that have this
 set of attributes will be displayed.
 </returns>
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.SingleSelectRootGridEntry.HelpKeyword">
      <summary>
     Retrieves the keyword that the VS help context window will
     use when this IPE is selected.
 </summary>
      <returns>
     the help keyword for this property.
 </returns>
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.SingleSelectRootGridEntry.PropertyValue">
      <summary>
 Gets or sets the value for the property that is represented 
 by this GridEntry.
 </summary>
    </member>
    <member name="T:System.Windows.Forms.PropertyGridInternal.PropertiesTab">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertiesTab.GetDefaultProperty(System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertiesTab.GetProperties(System.Object,System.Attribute[])">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertiesTab.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.PropertiesTab.TabName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.PropertiesTab.HelpKeyword">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.PropertyGridInternal.PropertyGridCommands">
      <summary>
     This class contains the set of menu commands our Properties window
     uses.
 </summary>
    </member>
    <member name="F:System.Windows.Forms.PropertyGridInternal.PropertyGridCommands.wfcMenuGroup">
    </member>
    <member name="F:System.Windows.Forms.PropertyGridInternal.PropertyGridCommands.wfcMenuCommand">
    </member>
    <member name="F:System.Windows.Forms.PropertyGridInternal.PropertyGridCommands.Reset">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.PropertyGridInternal.PropertyGridCommands.Description">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.PropertyGridInternal.PropertyGridCommands.Hide">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.PropertyGridInternal.PropertyGridCommands.Commands">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.CloseDropDown">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.CreateAccessibilityInstance">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.DropDownControl(System.Windows.Forms.Control)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.IsInputKey(System.Windows.Forms.Keys)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.ShowDialog(System.Windows.Forms.Form)">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.ContextMenuDefaultLocation">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.SelectedPropertyName">
    </member>
    <member name="P:System.Windows.Forms.PropertyGridInternal.PropertyGridView.ServiceProvider">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewEdit.IsInputKey(System.Windows.Forms.Keys)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.GridViewEdit.IsInputChar(System.Char)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.#ctor(System.Windows.Forms.PropertyGridInternal.PropertyGridView)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.GetChild(System.Int32)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.GetChildCount">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.GetFocused">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.GetSelected">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.HitTest(System.Int32,System.Int32)">
    </member>
    <member name="M:System.Windows.Forms.PropertyGridInternal.PropertyGridView.PropertyGridViewAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.BaseCAMarshaler.#ctor(System.Windows.Forms.NativeMethods.CA_STRUCT)">
      <summary>
     Base ctor
 </summary>
      <param name="caStruct">
    The  CA_STRUCT structure
 </param>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.BaseCAMarshaler.GetItemFromAddress(System.IntPtr)">
      <summary>
     Override this member to perform marshalling of a single item
     given it's native address.
 </summary>
      <param name="addr">
   The address of the item to marshal.
  </param>
      <returns>
    The marshaled item at the given address
 </returns>
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.BaseCAMarshaler.ItemType">
      <summary>
     Returns the type of item this marshaler will
     return in the items array.
 </summary>
      <returns>
  The type of object in the Items array
 </returns>
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.BaseCAMarshaler.Count">
      <summary>
     Returns the count of items that will be or have been
     marshaled.
 </summary>
      <returns>
    The number of marshaled items.
 </returns>
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.BaseCAMarshaler.Items">
      <summary>
     The marshaled items.
 </summary>
      <returns>
    An array of marshaled items.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.#ctor(System.Int32,System.String,System.Attribute[],System.Boolean,System.Type,System.Object,System.Boolean)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.CanResetValue(System.Object)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.CreateAttributeCollection">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.GetDisplayValue(System.String)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.GetEditor(System.Type)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.GetNativeValue(System.Object)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.GetValue(System.Object)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.GetTypeConverterAndTypeEditor(System.ComponentModel.TypeConverter@,System.Type,System.Object@)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.IsCurrentValue(System.Object)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.OnCanResetValue(System.Windows.Forms.ComponentModel.Com2Interop.GetBoolValueEvent)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.OnGetDisplayName(System.Windows.Forms.ComponentModel.Com2Interop.GetNameItemEvent)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.OnGetDisplayValue(System.Windows.Forms.ComponentModel.Com2Interop.GetNameItemEvent)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.OnGetDynamicAttributes(System.Windows.Forms.ComponentModel.Com2Interop.GetAttributesEvent)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.OnGetIsReadOnly(System.Windows.Forms.ComponentModel.Com2Interop.GetBoolValueEvent)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.OnResetValue(System.EventArgs)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.OnShouldSerializeValue(System.Windows.Forms.ComponentModel.Com2Interop.GetBoolValueEvent)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.OnShouldRefresh(System.Windows.Forms.ComponentModel.Com2Interop.GetRefreshStateEvent)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.ResetValue(System.Object)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.SetValue(System.Object,System.Object)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.ShouldSerializeValue(System.Object)">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.Attributes">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.AttributesValid">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.CanShow">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.ComponentType">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.Converter">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.ConvertingNativeType">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.Data">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.DefaultValue">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.DISPID">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.DisplayName">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.DisplayNameValid">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.IsReadOnly">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.PropertyType">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.ReadOnlyValid">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor.TargetObject">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
     Indicates whether reset will change the value of the component.  If there
     is a DefaultValueAttribute, then this will return true if getValue returns
     something different than the default value.  If there is a reset method and
     a shouldPersist method, this will return what shouldPersist returns.
     If there is just a reset method, this always returns true.  If none of these
     cases apply, this returns false.
 </summary>
      <param name="component">
     The component who's property's value we should test for resetability.
 </param>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.GetEditor(System.Type)">
      <summary>
      Retrieves an editor of the requested type.
 </summary>
      <param name="editorBaseType">
      The base type of editor you would like.  A
      property can support multiple editors and this
      is used to differentiate between them.
 </param>
      <returns>
      An instance of the requested editor type, or
      null if the editor could not be found.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.GetValue(System.Object)">
      <summary>
     Retrieves the current value of the property on component,
     invoking the getXXX method.  An exception in the getXXX
     method will pass through.
 </summary>
      <param name="component">
     The component who's property's value will be retrieved.
 </param>
      <returns>
     the value of the property for the given component.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.ResetValue(System.Object)">
      <summary>
     Will reset the default value for this property on the component.  If
     there was a default value passed in as a DefaultValueAttribute, that
     value will be set as the value of the property on the component.  If
     there was no default value passed in, a ResetXXX method will be looked
     for.  If one is found, it will be invoked.  If one is not found, this
     is a nop.
 </summary>
      <param name="component">
     The component who's property's value should be reset.
 </param>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
     This will set value to be the new value of this property on the
     component by invoking the setXXX method on the component.  If the
     value specified is invalid, the component should throw an exception
     which will be passed up.  The component designer should design the
     property so that getXXX following a setXXX should return the value
     passed in if no exception was thrown in the setXXX call.
 </summary>
      <param name="component">
     The component to set the property's value on.
 </param>
      <param name="value">
     The new value for the property on the component.
 </param>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
     Indicates whether the value of this property needs to be persisted. In
     other words, it indicates whether the state of the property is distinct
     from when the component is first instantiated. If there is a default
     value specified in this PropertyDescriptor, it will be compared against the
     property's current value to determine this.  If there is't, the
     shouldPersistXXX method is looked for and invoked if found.  If both
     these routes fail, true will be returned.

     If this returns false, a tool should not persist this property's value.
 </summary>
      <param name="component">
     who's property should be examined for persistance.
 </param>
      <returns>
     whether the property should be persisted.
 </returns>
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.ComponentType">
      <summary>
     Retrieves the type of the component this PropertyDescriptor is bound to.
 </summary>
      <returns>
     the type of component.
 </returns>
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.Converter">
      <summary>
      Retrieves the type converter for this property.
 </summary>
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.IsReadOnly">
      <summary>
     Indicates whether this property is read only.
 </summary>
      <returns>
     whether this property is read only.
 </returns>
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.PropertyType">
      <summary>
     Retrieves the type of the property.
 </summary>
      <returns>
     type of property.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.AboutBoxUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
      Edits the given object value using the editor style provided by
      GetEditorStyle.  A service provider is provided so that any
      required editing services can be obtained.
 </summary>
      <param name="context">
      A type descriptor context that can be used to provide additional
      context information.
 </param>
      <param name="provider">
      A service provider object through which editing services may
      be obtained.
 </param>
      <param name="value">
      An instance of the value being edited.
 </param>
      <returns>
      The new value of the object.  If the value of the object hasn't
      changed, this should return the same object it was passed.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2AboutBoxPropertyDescriptor.AboutBoxUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
      Retrieves the editing style of the Edit method.  If the method
      is not supported, this will return None.
 </summary>
      <param name="context">
      A type descriptor context that can be used to provide additional
      context information.
 </param>
      <returns>
      An enum value indicating the provided editing style.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2DataTypeToManagedDataTypeConverter.ConvertNativeToManaged(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2DataTypeToManagedDataTypeConverter.ConvertManagedToNative(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor,System.Boolean@)">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2DataTypeToManagedDataTypeConverter.ManagedType">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ColorConverter.ConvertNativeToManaged(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ColorConverter.ConvertManagedToNative(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor,System.Boolean@)">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2ColorConverter.ManagedType">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedBrowsingHandler.SetupPropertyHandlers(System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedBrowsingHandler.SetupPropertyHandlers(System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor[])">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2ExtendedBrowsingHandler.Interface">
    </member>
    <member name="M:System.Drawing.Design.Com2ExtendedUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
    </member>
    <member name="M:System.Drawing.Design.Com2ExtendedUITypeEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:System.Drawing.Design.Com2ExtendedUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:System.Drawing.Design.Com2ExtendedUITypeEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2FontConverter.ConvertNativeToManaged(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2FontConverter.ConvertManagedToNative(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor,System.Boolean@)">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2FontConverter.ManagedType">
    </member>
    <member name="F:System.Windows.Forms.ComponentModel.Com2Interop.Com2IDispatchConverter.none">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2IDispatchConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2IDispatchConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2IDispatchConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2IDispatchConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2IPerPropertyBrowsingHandler.Com2IPerPropertyBrowsingEnum.Values">
      <summary>
 Retrieve a copy of the value array
 </summary>
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2IPerPropertyBrowsingHandler.Com2IPerPropertyBrowsingEnum.Names">
      <summary>
 Retrieve a copy of the nme array.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2IVsPerPropertyBrowsingHandler.SetupPropertyHandlers(System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor[])">
      <summary>
 Called to setup the property handlers on a given properties
 In this method, the handler will add listeners to the events that
 the Com2PropertyDescriptor surfaces that it cares about.
 </summary>
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2IVsPerPropertyBrowsingHandler.Interface">
      <summary>
 The interface that this handler managers
 such as IPerPropertyBrowsing, IProvidePropertyBuilder, etc.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PictureConverter.ConvertNativeToManaged(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PictureConverter.ConvertManagedToNative(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor,System.Boolean@)">
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2PictureConverter.ManagedType">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.#ctor(System.Object,System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyDescriptor[],System.Int32)">
      <summary>
 Default ctor.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.AddExtendedBrowsingHandlers(System.Collections.Hashtable)">
      <summary>
 Checks the source object for eache extended browsing inteface
 listed in extendedInterfaces and creates a handler from extendedInterfaceHandlerTypes
 to handle it.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.AddToHashtable(System.Collections.Hashtable)">
      <summary>
 Add ourselves to the hashtable and refresh
 the time we were accessed
 </summary>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.CheckValid">
      <summary>
 Make sure this property list is still valid.

 1) WeakRef is still alive
 2) Our timeout hasn't passed
 </summary>
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.DefaultProperty">
      <summary>
 Retrieve the default property.
 </summary>
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.TargetObject">
      <summary>
 The object that created the list of properties.  This will
 return null if the timeout has passed or the ref has died.
 </summary>
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.TicksSinceTouched">
      <summary>
 How long since these props have been queried.
 </summary>
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.Properties">
      <summary>
 Returns the list of properties
 </summary>
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Com2Properties.TooOld">
      <summary>
 Should this guy be refreshed because of old age?
 </summary>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyBuilderUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyBuilderUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.ICom2PropertyPageDisplayService">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ICom2PropertyPageDisplayService.ShowPropertyPage(System.String,System.Object,System.Int32,System.Guid,System.IntPtr)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyPageUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2PropertyPageUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2TypeInfoProcessor.BuildDropDownName(System.Object,System.String)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2TypeInfoProcessor.FindTypeInfo(System.Object,System.Boolean)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2TypeInfoProcessor.GetNameDispId(System.Windows.Forms.UnsafeNativeMethods.IDispatch)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2TypeInfoProcessor.GetProperty(System.Object,System.String)">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Com2TypeInfoProcessor.GetProperties(System.Object)">
    </member>
    <member name="T:System.Windows.Forms.ComponentModel.Com2Interop.Com2Variant">
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.IsNameDispId(System.Object,System.Int32)">
      <summary>
 Checks if the given dispid matches the dispid that the Object would like to specify
 as its identification proeprty (Name, ID, etc).
 </summary>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.GetAttributes(System.Object)">
      <summary>
 Got attributes?
 </summary>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.GetDefaultProperty(System.Object)">
      <summary>
 Default Property, please
 </summary>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary>
 Props!
 </summary>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.ComNativeDescriptor.ResolveVariantTypeConverterAndTypeEditor(System.Object,System.ComponentModel.TypeConverter@,System.Type,System.Object@)">
      <summary>
 Looks at at value's type and creates an editor based on that.  We use this to decide which editor to use
 for a generic variant.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.GuidCAMarshaler.GetItemFromAddress(System.IntPtr)">
      <summary>
     Override this member to perform marshalling of a single item
     given it's native address.
 </summary>
      <param name="addr">
   The address of the item to marshal.
  </param>
      <returns>
    The marshaled item at the given address
 </returns>
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.GuidCAMarshaler.ItemType">
      <summary>
     Returns the type of item this marshaler will
     return in the items array.  In this case, the type is Guid.
 </summary>
      <returns>
  The type of object in the Items array
 </returns>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.Int32CAMarshaler.GetItemFromAddress(System.IntPtr)">
      <summary>
     Override this member to perform marshalling of a single item
     given it's native address.
 </summary>
      <param name="addr">
   The address of the item to marshal.
  </param>
      <returns>
    The marshaled item at the given address
 </returns>
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.Int32CAMarshaler.ItemType">
      <summary>
     Returns the type of item this marshaler will
     return in the items array.  In this case, the type is int.
 </summary>
      <returns>
  The type of object in the Items array
 </returns>
    </member>
    <member name="M:System.Windows.Forms.ComponentModel.Com2Interop.OleStrCAMarshaler.GetItemFromAddress(System.IntPtr)">
      <summary>
     Override this member to perform marshalling of a single item
     given it's native address.
 </summary>
      <param name="addr">
   The address of the item to marshal.
  </param>
      <returns>
    The marshaled item at the given address
 </returns>
    </member>
    <member name="P:System.Windows.Forms.ComponentModel.Com2Interop.OleStrCAMarshaler.ItemType">
      <summary>
     Returns the type of item this marshaler will
     return in the items array.  In this case, the type is string.
 </summary>
      <returns>
  The type of object in the Items array
 </returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\tools\x86\managed\urt\v1.0.3705\xsd.xml ===
<?xml version="1.0"?>
<doc>
  <assembly>
    <name>xsd</name>
  </assembly>
  <members>
    <member name="M:Microsoft.DevApps.WebServices.XsdResources.ResDescriptionAttribute.#ctor(System.String)">
      <summary>
                Constructs a new sys description.
            </summary>
      <param name="description">
                description text.
            </param>
    </member>
    <member name="P:Microsoft.DevApps.WebServices.XsdResources.ResDescriptionAttribute.Description">
      <summary>
                Retrieves the description text.
            </summary>
      <returns>
                description
            </returns>
    </member>
    <member name="T:XsdTool.Xsd">
    </member>
    <member name="M:XsdTool.Xsd.AddImports(System.CodeDom.CodeNamespace,System.String[])">
    </member>
    <member name="M:XsdTool.Xsd.GetNamespacesForTypes(System.Type[])">
    </member>
    <member name="M:XsdTool.Xsd.GenerateDataSetClasses(System.Data.DataSet,System.String,System.IO.TextWriter,System.CodeDom.Compiler.ICodeGenerator)">
    </member>
    <member name="M:XsdTool.Xsd.Main(System.String[])">
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\tools\x86\managed\urt\v1.0.3705\wsdl.xml ===
<?xml version="1.0"?>
<doc>
  <assembly>
    <name>wsdl</name>
  </assembly>
  <members>
    <member name="M:Microsoft.DevApps.WebServices.WsdlResources.ResDescriptionAttribute.#ctor(System.String)">
      <summary>
                Constructs a new sys description.
            </summary>
      <param name="description">
                description text.
            </param>
    </member>
    <member name="P:Microsoft.DevApps.WebServices.WsdlResources.ResDescriptionAttribute.Description">
      <summary>
                Retrieves the description text.
            </summary>
      <returns>
                description
            </returns>
    </member>
    <member name="T:Microsoft.DevApps.WebServices.WebServiceUtil">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.WebServiceUtil.Main(System.String[])">
    </member>
    <member name="T:Microsoft.DevApps.WebServices.ArgumentDictionary">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.ArgumentDictionary.#ctor">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.ArgumentDictionary.#ctor(System.Int32)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.ArgumentDictionary.Add(System.String,System.Collections.Specialized.StringCollection)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.ArgumentDictionary.Add(System.String,System.String)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.ArgumentDictionary.Clear">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.ArgumentDictionary.Contains(System.String)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.ArgumentDictionary.ContainsValue(System.Collections.Specialized.StringCollection)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.ArgumentDictionary.CopyTo(System.Array,System.Int32)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.ArgumentDictionary.GetArgument(System.String,System.Int32)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.ArgumentDictionary.GetArguments(System.String)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.ArgumentDictionary.GetEnumerator">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.ArgumentDictionary.Remove(System.String)">
    </member>
    <member name="P:Microsoft.DevApps.WebServices.ArgumentDictionary.Count">
    </member>
    <member name="P:Microsoft.DevApps.WebServices.ArgumentDictionary.IsReadOnly">
    </member>
    <member name="P:Microsoft.DevApps.WebServices.ArgumentDictionary.IsFixedSize">
    </member>
    <member name="P:Microsoft.DevApps.WebServices.ArgumentDictionary.IsSynchronized">
    </member>
    <member name="P:Microsoft.DevApps.WebServices.ArgumentDictionary.Keys">
    </member>
    <member name="P:Microsoft.DevApps.WebServices.ArgumentDictionary.SyncRoot">
    </member>
    <member name="P:Microsoft.DevApps.WebServices.ArgumentDictionary.Item(System.String)">
    </member>
    <member name="P:Microsoft.DevApps.WebServices.ArgumentDictionary.Values">
    </member>
    <member name="T:Microsoft.DevApps.WebServices.AssignmentRule">
    </member>
    <member name="T:Microsoft.DevApps.WebServices.CommandRule">
    </member>
    <member name="F:Microsoft.DevApps.WebServices.CommandRule.ValueOptional">
    </member>
    <member name="F:Microsoft.DevApps.WebServices.CommandRule.ValueRequired">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandRule.#ctor">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandRule.#ctor(Microsoft.DevApps.WebServices.CommandSwitch)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandRule.#ctor(System.Text.RegularExpressions.Regex)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandRule.#ctor(System.String)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandRule.#ctor(Microsoft.DevApps.WebServices.CommandSwitch,System.String)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandRule.#ctor(Microsoft.DevApps.WebServices.CommandSwitch,System.Text.RegularExpressions.Regex)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandRule.AnyOf(System.String[])">
    </member>
    <member name="P:Microsoft.DevApps.WebServices.CommandRule.Cswitch">
    </member>
    <member name="P:Microsoft.DevApps.WebServices.CommandRule.Pattern">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.AssignmentRule.#ctor">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.AssignmentRule.#ctor(Microsoft.DevApps.WebServices.CommandSwitch)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.AssignmentRule.#ctor(System.Text.RegularExpressions.Regex)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.AssignmentRule.#ctor(System.String)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.AssignmentRule.#ctor(Microsoft.DevApps.WebServices.CommandSwitch,System.Text.RegularExpressions.Regex)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.AssignmentRule.#ctor(Microsoft.DevApps.WebServices.CommandSwitch,System.String)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.AssignmentRule.AssignDefaults(Microsoft.DevApps.WebServices.ArgumentDictionary)">
    </member>
    <member name="T:Microsoft.DevApps.WebServices.CheckingRule">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CheckingRule.#ctor">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CheckingRule.#ctor(Microsoft.DevApps.WebServices.CommandSwitch)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CheckingRule.#ctor(System.Text.RegularExpressions.Regex)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CheckingRule.#ctor(System.String)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CheckingRule.#ctor(Microsoft.DevApps.WebServices.CommandSwitch,System.Text.RegularExpressions.Regex)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CheckingRule.#ctor(Microsoft.DevApps.WebServices.CommandSwitch,System.String)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CheckingRule.#ctor(Microsoft.DevApps.WebServices.CommandSwitch,System.Text.RegularExpressions.Regex,System.Boolean)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CheckingRule.#ctor(Microsoft.DevApps.WebServices.CommandSwitch,System.String,System.Boolean)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CheckingRule.#ctor(Microsoft.DevApps.WebServices.CommandSwitch,System.Text.RegularExpressions.Regex,System.Boolean,System.Boolean)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CheckingRule.#ctor(Microsoft.DevApps.WebServices.CommandSwitch,System.String,System.Boolean,System.Boolean)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CheckingRule.CheckRule(Microsoft.DevApps.WebServices.ArgumentDictionary)">
    </member>
    <member name="P:Microsoft.DevApps.WebServices.CheckingRule.MultipleValuesAllowed">
    </member>
    <member name="P:Microsoft.DevApps.WebServices.CheckingRule.SwitchRequired">
    </member>
    <member name="T:Microsoft.DevApps.WebServices.CommandLineArgumentException">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandLineArgumentException.#ctor(System.String)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandLineArgumentException.#ctor(System.String,System.Exception)">
    </member>
    <member name="T:Microsoft.DevApps.WebServices.CommandLineException">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandLineException.#ctor(Microsoft.DevApps.WebServices.CommandRule,System.String)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandLineException.#ctor(Microsoft.DevApps.WebServices.CommandRule,System.String,System.Exception)">
    </member>
    <member name="P:Microsoft.DevApps.WebServices.CommandLineException.OffendingRule">
    </member>
    <member name="T:Microsoft.DevApps.WebServices.CommandParser">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandParser.AssignUnknowns(Microsoft.DevApps.WebServices.ArgumentDictionary,Microsoft.DevApps.WebServices.AssignmentRule[])">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandParser.CheckRules(Microsoft.DevApps.WebServices.ArgumentDictionary,Microsoft.DevApps.WebServices.CheckingRule[])">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandParser.ParseCommand(System.String[],Microsoft.DevApps.WebServices.CommandSwitch[])">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandParser.PrintHelp(Microsoft.DevApps.WebServices.CheckingRule[],Microsoft.DevApps.WebServices.CommandSwitch[],System.Boolean)">
    </member>
    <member name="T:Microsoft.DevApps.WebServices.CommandSwitch">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandSwitch.#ctor(System.String,System.String)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandSwitch.#ctor(System.String,System.String,System.String)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandSwitch.#ctor(System.String,System.String,System.String,System.String)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandSwitch.Equals(System.String)">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandSwitch.FancyName">
    </member>
    <member name="M:Microsoft.DevApps.WebServices.CommandSwitch.FindSwitch(System.String,Microsoft.DevApps.WebServices.CommandSwitch[])">
    </member>
    <member name="P:Microsoft.DevApps.WebServices.CommandSwitch.Name">
    </member>
    <member name="P:Microsoft.DevApps.WebServices.CommandSwitch.Abbreviation">
    </member>
    <member name="P:Microsoft.DevApps.WebServices.CommandSwitch.Description">
    </member>
    <member name="P:Microsoft.DevApps.WebServices.CommandSwitch.ValueName">
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\tools\x86\managed\urt\v1.0.3705\windes.xml ===
<?xml version="1.0"?>
<doc>
  <assembly>
    <name>WinDes</name>
  </assembly>
  <members>
    <member name="P:Microsoft.Tools.WinDes.Counter.Elapsed">
    </member>
    <member name="P:Microsoft.Tools.WinDes.Counter.Frequency">
    </member>
    <member name="P:Microsoft.Tools.WinDes.Counter.Value">
    </member>
    <member name="T:Microsoft.Tools.WinDes.CustomItemDialog">
    </member>
    <member name="M:Microsoft.Tools.WinDes.CustomItemDialog.#ctor">
    </member>
    <member name="P:Microsoft.Tools.WinDes.CustomItemDialog.TypeName">
    </member>
    <member name="M:Microsoft.Tools.WinDes.DebugSwitchesForm.#ctor">
    </member>
    <member name="M:Microsoft.Tools.WinDes.DebugSwitchesForm.Dispose(System.Boolean)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Document.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Document.WndProc(System.Windows.Forms.Message@)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.DocumentCollection.#ctor">
      <summary>
        <para>
                  Initializes a new instance of <see cref="T:Microsoft.Tools.WinDes.DocumentCollection" />.
               </para>
      </summary>
    </member>
    <member name="M:Microsoft.Tools.WinDes.DocumentCollection.#ctor(Microsoft.Tools.WinDes.DocumentCollection)">
      <summary>
        <para>
                  Initializes a new instance of <see cref="T:Microsoft.Tools.WinDes.DocumentCollection" /> based on another <see cref="T:Microsoft.Tools.WinDes.DocumentCollection" />.
               </para>
      </summary>
      <param name="value">
                  A <see cref="T:Microsoft.Tools.WinDes.DocumentCollection" /> from which the contents are copied
            </param>
    </member>
    <member name="M:Microsoft.Tools.WinDes.DocumentCollection.#ctor(Microsoft.Tools.WinDes.Document[])">
      <summary>
        <para>
                  Initializes a new instance of <see cref="T:Microsoft.Tools.WinDes.DocumentCollection" /> containing any array of <see cref="T:Microsoft.Tools.WinDes.Document" /> objects.
               </para>
      </summary>
      <param name="value">
                  A array of <see cref="T:Microsoft.Tools.WinDes.Document" /> objects with which to intialize the collection
            </param>
    </member>
    <member name="M:Microsoft.Tools.WinDes.DocumentCollection.Add(Microsoft.Tools.WinDes.Document)">
      <summary>
        <para>Adds a <see cref="T:Microsoft.Tools.WinDes.Document" /> with the specified value to the 
               <see cref="T:Microsoft.Tools.WinDes.DocumentCollection" /> .</para>
      </summary>
      <param name="value">The <see cref="T:Microsoft.Tools.WinDes.Document" /> to add.</param>
      <returns>
        <para>The index at which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Tools.WinDes.DocumentCollection.AddRange(Microsoft.Tools.WinDes.Document[])">
      <summary>
        <para>Copies the elements of an array to the end of the <see cref="T:Microsoft.Tools.WinDes.DocumentCollection" />.</para>
      </summary>
      <param name="value">
               An array of type <see cref="T:Microsoft.Tools.WinDes.Document" /> containing the objects to add to the collection.
            </param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Tools.WinDes.DocumentCollection.AddRange(Microsoft.Tools.WinDes.DocumentCollection)">
      <summary>
        <para>
                  Adds the contents of another <see cref="T:Microsoft.Tools.WinDes.DocumentCollection" /> to the end of the collection.
               </para>
      </summary>
      <param name="value">
               A <see cref="T:Microsoft.Tools.WinDes.DocumentCollection" /> containing the objects to add to the collection.
            </param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Tools.WinDes.DocumentCollection.Contains(Microsoft.Tools.WinDes.Document)">
      <summary>
        <para>Gets a value indicating whether the 
               <see cref="T:Microsoft.Tools.WinDes.DocumentCollection" /> contains the specified <see cref="T:Microsoft.Tools.WinDes.Document" />.</para>
      </summary>
      <param name="value">The <see cref="T:Microsoft.Tools.WinDes.Document" /> to locate.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:Microsoft.Tools.WinDes.Document" /> is contained in the collection; 
              otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Tools.WinDes.DocumentCollection.CopyTo(Microsoft.Tools.WinDes.Document[],System.Int32)">
      <summary>
        <para>Copies the <see cref="T:Microsoft.Tools.WinDes.DocumentCollection" /> values to a one-dimensional <see cref="T:System.Array" /> instance at the 
               specified index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from <see cref="T:Microsoft.Tools.WinDes.DocumentCollection" /> .</para>
      </param>
      <param name="index">The index in <paramref name="array" /> where copying begins.</param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Tools.WinDes.DocumentCollection.IndexOf(Microsoft.Tools.WinDes.Document)">
      <summary>
        <para>Returns the index of a <see cref="T:Microsoft.Tools.WinDes.Document" /> in 
                  the <see cref="T:Microsoft.Tools.WinDes.DocumentCollection" /> .</para>
      </summary>
      <param name="value">The <see cref="T:Microsoft.Tools.WinDes.Document" /> to locate.</param>
      <returns>
        <para>The index of the <see cref="T:Microsoft.Tools.WinDes.Document" /> of <paramref name="value" /> in the 
            <see cref="T:Microsoft.Tools.WinDes.DocumentCollection" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Tools.WinDes.DocumentCollection.Insert(System.Int32,Microsoft.Tools.WinDes.Document)">
      <summary>
        <para>Inserts a <see cref="T:Microsoft.Tools.WinDes.Document" /> into the <see cref="T:Microsoft.Tools.WinDes.DocumentCollection" /> at the specified index.</para>
      </summary>
      <param name="index">The zero-based index where <paramref name="value" /> should be inserted.</param>
      <param name=" value">The <see cref="T:Microsoft.Tools.WinDes.Document" /> to insert.</param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Tools.WinDes.DocumentCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through 
                  the <see cref="T:Microsoft.Tools.WinDes.DocumentCollection" /> .</para>
      </summary>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Tools.WinDes.DocumentCollection.Remove(Microsoft.Tools.WinDes.Document)">
      <summary>
        <para> Removes a specific <see cref="T:Microsoft.Tools.WinDes.Document" /> from the 
               <see cref="T:Microsoft.Tools.WinDes.DocumentCollection" /> .</para>
      </summary>
      <param name="value">The <see cref="T:Microsoft.Tools.WinDes.Document" /> to remove from the <see cref="T:Microsoft.Tools.WinDes.DocumentCollection" /> .</param>
      <returns>
        <para>None.</para>
      </returns>
    </member>
    <member name="P:Microsoft.Tools.WinDes.DocumentCollection.Item(System.Int32)">
      <summary>
        <para>Represents the entry at the specified index of the <see cref="T:Microsoft.Tools.WinDes.Document" />.</para>
      </summary>
      <param name="index">
        <para>The zero-based index of the entry to locate in the collection.</para>
      </param>
    </member>
    <member name="M:Microsoft.Tools.WinDes.FileBuffer.GetText(System.Int32,System.Int32)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.FileBuffer.RaiseTextChanged">
    </member>
    <member name="M:Microsoft.Tools.WinDes.FileBuffer.ReplaceText(System.Int32,System.Int32,System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.FileBuffer.ShowCode">
    </member>
    <member name="M:Microsoft.Tools.WinDes.FileBuffer.ShowCode(System.Int32)">
    </member>
    <member name="P:Microsoft.Tools.WinDes.FileBuffer.IsDirty">
    </member>
    <member name="P:Microsoft.Tools.WinDes.FileBuffer.Text">
    </member>
    <member name="P:Microsoft.Tools.WinDes.FileBuffer.TextLength">
    </member>
    <member name="E:Microsoft.Tools.WinDes.FileBuffer.BufferTextChanged">
    </member>
    <member name="T:Microsoft.Tools.WinDes.InheritedComponent">
    </member>
    <member name="F:Microsoft.Tools.WinDes.InheritedComponent.timer1">
    </member>
    <member name="F:Microsoft.Tools.WinDes.InheritedComponent.ToolTip2">
    </member>
    <member name="M:Microsoft.Tools.WinDes.InheritedComponent.#ctor">
    </member>
    <member name="T:Microsoft.Tools.WinDes.InheritedForm">
    </member>
    <member name="F:Microsoft.Tools.WinDes.InheritedForm.radioButton1">
    </member>
    <member name="F:Microsoft.Tools.WinDes.InheritedForm.Button2">
    </member>
    <member name="M:Microsoft.Tools.WinDes.InheritedForm.#ctor">
    </member>
    <member name="M:Microsoft.Tools.WinDes.ITestCommandService.AddCommand(System.String,Microsoft.Tools.WinDes.TestCommand,System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.ITestCommandService.RemoveCommand(System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.ITestCommandService.GetCommand(System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.ProjectItem.#ctor(Microsoft.Tools.WinDes.SelfHost.SelfDocumentManager,System.IServiceProvider,System.String,Microsoft.Tools.WinDes.FileFormat)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.ProjectItem.#ctor(Microsoft.Tools.WinDes.SelfHost.SelfDocumentManager,System.IServiceProvider,System.String,System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.ProjectItem.Dispose">
    </member>
    <member name="M:Microsoft.Tools.WinDes.ProjectItem.Save(Microsoft.Tools.WinDes.FileFormat[])">
    </member>
    <member name="M:Microsoft.Tools.WinDes.ProjectItem.SaveAs(System.String,Microsoft.Tools.WinDes.FileFormat[])">
    </member>
    <member name="M:Microsoft.Tools.WinDes.ProjectItem.SaveAs(Microsoft.Tools.WinDes.FileFormat[])">
    </member>
    <member name="P:Microsoft.Tools.WinDes.ProjectItem.Buffer">
    </member>
    <member name="P:Microsoft.Tools.WinDes.ProjectItem.Documents">
    </member>
    <member name="P:Microsoft.Tools.WinDes.ProjectItem.FileName">
    </member>
    <member name="P:Microsoft.Tools.WinDes.ProjectItem.Format">
    </member>
    <member name="P:Microsoft.Tools.WinDes.ProjectItem.Host">
    </member>
    <member name="P:Microsoft.Tools.WinDes.ProjectItem.Name">
    </member>
    <member name="P:Microsoft.Tools.WinDes.ProjectItem.ResourceName">
    </member>
    <member name="M:Microsoft.Tools.WinDes.PropertyBrowser.ProcessTabKey(System.Boolean)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.PropertyBrowser.Refresh">
    </member>
    <member name="P:Microsoft.Tools.WinDes.PropertyBrowser.PbrsSite.Component">
    </member>
    <member name="P:Microsoft.Tools.WinDes.PropertyBrowser.PbrsSite.Container">
    </member>
    <member name="P:Microsoft.Tools.WinDes.PropertyBrowser.PbrsSite.DesignMode">
    </member>
    <member name="P:Microsoft.Tools.WinDes.PropertyBrowser.PbrsSite.Name">
    </member>
    <member name="T:Microsoft.Tools.WinDes.SelfHost">
    </member>
    <member name="M:Microsoft.Tools.WinDes.SelfHost.CreateItem(System.Int32,System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.SelfHost.Dispose(System.Boolean)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.SelfHost.Main(System.String[])">
    </member>
    <member name="M:Microsoft.Tools.WinDes.SelfHost.SetRunScript(System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.SelfHost.WndProc(System.Windows.Forms.Message@)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.SelfHost.SelfDocumentManager.#ctor(Microsoft.Tools.WinDes.SelfHost,System.ComponentModel.Design.IServiceContainer)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.SelfHost.SelfDocumentManager.CanShowComponentEditor(System.Object)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.SelfHost.SelfDocumentManager.SetUIDirty">
    </member>
    <member name="M:Microsoft.Tools.WinDes.SelfHost.SelfDocumentManager.ShowComponentEditor(System.Object,System.Windows.Forms.IWin32Window)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.SelfHost.SelfDocumentManager.ShowMessage(System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.SelfHost.SelfDocumentManager.ShowMessage(System.String,System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.SelfHost.SelfDocumentManager.ShowMessage(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.SelfHost.SelfDocumentManager.ShowError(System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.SelfHost.SelfDocumentManager.ShowError(System.Exception)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.SelfHost.SelfDocumentManager.ShowError(System.Exception,System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.SelfHost.SelfDocumentManager.ShowToolWindow(System.Guid)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.SelfHost.SelfDocumentManager.UpdateActivation(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
    </member>
    <member name="P:Microsoft.Tools.WinDes.SelfHost.SelfDocumentManager.Styles">
    </member>
    <member name="T:Microsoft.Tools.WinDes.TestCommand">
    </member>
    <member name="T:Microsoft.Tools.WinDes.TestCommandScript">
    </member>
    <member name="M:Microsoft.Tools.WinDes.TestCommandScript.#ctor(Microsoft.Tools.WinDes.SelfHost,System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.TestCommandScript.AddCommand(System.String,Microsoft.Tools.WinDes.TestCommand,System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.TestCommandScript.GetCommand(System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.TestCommandScript.GetCommandMethod(System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.TestCommandScript.RemoveCommand(System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.TestCommandScript.Run">
    </member>
    <member name="T:Microsoft.Tools.WinDes.Toolbox">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.#ctor(System.IServiceProvider)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.AddCreator(System.Drawing.Design.ToolboxItemCreatorCallback,System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.AddCreator(System.Drawing.Design.ToolboxItemCreatorCallback,System.String,System.ComponentModel.Design.IDesignerHost)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.AddLinkedToolboxItem(System.Drawing.Design.ToolboxItem,System.ComponentModel.Design.IDesignerHost)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.AddLinkedToolboxItem(System.Drawing.Design.ToolboxItem,System.String,System.ComponentModel.Design.IDesignerHost)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.AddToolboxItem(System.Drawing.Design.ToolboxItem)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.AddToolboxItem(System.Drawing.Design.ToolboxItem,System.ComponentModel.Design.IDesignerHost)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.AddToolboxItem(System.Drawing.Design.ToolboxItem,System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.AddToolboxItem(System.Drawing.Design.ToolboxItem,System.String,System.ComponentModel.Design.IDesignerHost)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.GetSelectedToolboxItem">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.GetSelectedToolboxItem(System.ComponentModel.Design.IDesignerHost)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.SerializeToolboxItem(System.Drawing.Design.ToolboxItem)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.DeserializeToolboxItem(System.Object)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.DeserializeToolboxItem(System.Object,System.ComponentModel.Design.IDesignerHost)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.GetToolboxItems">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.GetToolboxItems(System.ComponentModel.Design.IDesignerHost)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.GetToolboxItems(System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.GetToolboxItems(System.String,System.ComponentModel.Design.IDesignerHost)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.IsSupported(System.Object,System.ComponentModel.Design.IDesignerHost)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.IsSupported(System.Object,System.Collections.ICollection)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.IsToolboxItem(System.Object)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.IsToolboxItem(System.Object,System.ComponentModel.Design.IDesignerHost)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.Refresh">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.RemoveCreator(System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.RemoveCreator(System.String,System.ComponentModel.Design.IDesignerHost)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.RemoveToolboxItem(System.Drawing.Design.ToolboxItem)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.RemoveToolboxItem(System.Drawing.Design.ToolboxItem,System.String)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.SetCursor">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.SetSelectedToolboxItem(System.Drawing.Design.ToolboxItem)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.AddType(System.Type)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.GetEnabledAttributes">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.SetEnabledAttributes(System.Attribute[])">
    </member>
    <member name="M:Microsoft.Tools.WinDes.Toolbox.SelectedToolboxItemUsed">
    </member>
    <member name="P:Microsoft.Tools.WinDes.Toolbox.CategoryNames">
    </member>
    <member name="P:Microsoft.Tools.WinDes.Toolbox.SelectedCategory">
    </member>
    <member name="T:Microsoft.Tools.WinDes.UndoService">
    </member>
    <member name="M:Microsoft.Tools.WinDes.UndoService.#ctor(System.IServiceProvider)">
    </member>
    <member name="T:Microsoft.Tools.WinDes.WinDesExtension">
    </member>
    <member name="M:Microsoft.Tools.WinDes.WinDesExtension.Initialize(Microsoft.Tools.WinDes.ITestCommandService,System.Windows.Forms.Control)">
    </member>
    <member name="M:Microsoft.Tools.WinDes.WinDesExtension.OnDesignerCreate(System.ComponentModel.Design.IDesignerHost)">
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\tools\x86\managed\urt\v1.0.3705\_dataperfcounters.ini ===
 
 [ i n f o ] 
 
 d r i v e r n a m e = . N E T   C L R   D a t a 
 
 s y m b o l f i l e = _ D a t a P e r f C o u n t e r s . h 
 
 
 
 [ l a n g u a g e s ] 
 
 0 0 9 = l a n g u a g e 0 0 9 
 
 
 
 [ o b j e c t s ] 
 
 O B J E C T _ 1 _ 0 0 9 _ N A M E = . N E T   C L R   D a t a 
 
 
 
 [ t e x t ] 
 
 O B J E C T _ 1 _ 0 0 9 _ N A M E = . N E T   C L R   D a t a 
 
 O B J E C T _ 1 _ 0 0 9 _ H E L P = . N e t   C L R   D a t a 
 
 
 
 D E V I C E _ C O U N T E R _ 1 _ 0 0 9 _ N A M E = S q l C l i e n t :   C u r r e n t   #   p o o l e d   a n d   n o n p o o l e d   c o n n e c t i o n s 
 
 D E V I C E _ C O U N T E R _ 1 _ 0 0 9 _ H E L P = C u r r e n t   n u m b e r   o f   c o n n e c t i o n s ,   p o o l e d   o r   n o t . 
 
 
 
 D E V I C E _ C O U N T E R _ 2 _ 0 0 9 _ N A M E = S q l C l i e n t :   C u r r e n t   #   p o o l e d   c o n n e c t i o n s 
 
 D E V I C E _ C O U N T E R _ 2 _ 0 0 9 _ H E L P = C u r r e n t   n u m b e r   o f   c o n n e c t i o n s   i n   a l l   p o o l s   a s s o c i a t e d   w i t h   t h e   p r o c e s s . 
 
 
 
 D E V I C E _ C O U N T E R _ 3 _ 0 0 9 _ N A M E = S q l C l i e n t :   C u r r e n t   #   c o n n e c t i o n   p o o l s 
 
 D E V I C E _ C O U N T E R _ 3 _ 0 0 9 _ H E L P = C u r r e n t   n u m b e r   o f   p o o l s   a s s o c i a t e d   w i t h   t h e   p r o c e s s . 
 
 
 
 D E V I C E _ C O U N T E R _ 4 _ 0 0 9 _ N A M E = S q l C l i e n t :   P e a k   #   p o o l e d   c o n n e c t i o n s 
 
 D E V I C E _ C O U N T E R _ 4 _ 0 0 9 _ H E L P = T h e   h i g h e s t   n u m b e r   o f   c o n n e c t i o n s   i n   a l l   p o o l s   s i n c e   t h e   p r o c e s s   s t a r t e d . 
 
 
 
 D E V I C E _ C O U N T E R _ 5 _ 0 0 9 _ N A M E = S q l C l i e n t :   T o t a l   #   f a i l e d   c o n n e c t s 
 
 D E V I C E _ C O U N T E R _ 5 _ 0 0 9 _ H E L P = T h e   t o t a l   n u m b e r   o f   c o n n e c t i o n   o p e n   a t t e m p t s   t h a t   h a v e   f a i l e d   f o r   a n y   r e a s o n . 
 
 
 
 D E V I C E _ C O U N T E R _ 6 _ 0 0 9 _ N A M E = S q l C l i e n t :   T o t a l   #   f a i l e d   c o m m a n d s 
 
 D E V I C E _ C O U N T E R _ 6 _ 0 0 9 _ H E L P = T h e   t o t a l   n u m b e r   o f   c o m m a n d   e x e c u t e s   t h a t   h a v e   f a i l e d   f o r   a n y   r e a s o n . 
 
 
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\tools\x86\managed\urt\v1.0.3705\mscorlib.xml ===
<?xml version="1.0"?>
<doc>
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:System.Object">
      <summary>
        <para>Supports all classes in the .NET Framework class hierarchy and provides
      low-level services to derived classes. This is the ultimate superclass
      of all classes in the .NET Framework; it is the root of the type hierarchy.</para>
      </summary>
    </member>
    <member name="M:System.Object.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Object" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Object.ToString">
      <summary>
        <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
      </returns>
    </member>
    <member name="M:System.Object.Equals(System.Object)">
      <summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
      </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the
   current <see cref="T:System.Object" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Object.Equals(System.Object,System.Object)">
      <summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</para>
      </summary>
      <param name="objA">The first <see cref="T:System.Object" /> to compare.</param>
      <param name="objB">The second <see cref="T:System.Object" /> to compare.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="objA" /> is the same instance as
   <paramref name="objB" /> or if both are null references or if <c>objA.Equals(objB)</c> returns
   <see langword="true" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
      <summary>
        <para>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</para>
      </summary>
      <param name="objA">The first <see cref="T:System.Object" /> to compare.</param>
      <param name="objB">The second <see cref="T:System.Object" /> to compare.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="objA" /> is the same instance as <paramref name="objB" /> or if both are null references; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Object.GetHashCode">
      <summary>
        <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
      </summary>
      <returns>
        <para>A hash code for the current <see cref="T:System.Object" />.</para>
      </returns>
    </member>
    <member name="M:System.Object.GetType">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
      </summary>
      <returns>
        <para> The <see cref="T:System.Type" /> instance that represents the exact runtime type of the current instance.</para>
      </returns>
    </member>
    <member name="M:System.Object.Finalize">
      <summary>
        <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
      </summary>
    </member>
    <member name="M:System.Object.MemberwiseClone">
      <summary>
        <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
      </summary>
      <returns>
        <para>A shallow copy of the current <see cref="T:System.Object" />.</para>
      </returns>
    </member>
    <member name="T:System.ICloneable">
      <summary>
        <para> Supports cloning, which creates a new instance of a class
      with the same value as
      an existing instance.
      </para>
      </summary>
    </member>
    <member name="M:System.ICloneable.Clone">
      <summary>
        <para> Creates a new object that is a copy of the current instance.
      </para>
      </summary>
      <returns>
        <para> A new object that is a copy of this instance.
      </para>
      </returns>
    </member>
    <member name="T:System.Array">
      <summary>
        <para>Provides methods for creating, manipulating, searching,
      and sorting arrays, thereby serving as the base class for all
      arrays in the common language runtime.</para>
      </summary>
    </member>
    <member name="T:System.Collections.IList">
      <summary>
        <para>Represents a collection of objects that can be individually accessed by index.</para>
      </summary>
    </member>
    <member name="T:System.Collections.ICollection">
      <summary>
        <para>Defines size, enumerators and synchronization methods for all collections.</para>
      </summary>
    </member>
    <member name="T:System.Collections.IEnumerable">
      <summary>
        <para> Exposes the enumerator, which supports a simple iteration over a collection.</para>
      </summary>
    </member>
    <member name="M:System.Collections.IEnumerable.GetEnumerator">
      <summary>
        <para> 
       Returns an enumerator that can iterate through a collection.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" />
 that can be used to iterate through the collection.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>When implemented by a class, copies the elements of
       the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="P:System.Collections.ICollection.Count">
      <summary>
        <para>When implemented by a class, gets the number of
       elements contained in the <see cref="T:System.Collections.ICollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.ICollection.SyncRoot">
      <summary>
        <para>When implemented by a class, gets an object that
 can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.ICollection.IsSynchronized">
      <summary>
        <para>When implemented by a class, gets a value
 indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized
 (thread-safe).</para>
      </summary>
    </member>
    <member name="M:System.Collections.IList.Add(System.Object)">
      <summary>
        <para>When implemented by a class, adds an item to the <see cref="T:System.Collections.IList" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</param>
      <returns>
        <para>The position into which the new element was inserted.</para>
      </returns>
    </member>
    <member name="M:System.Collections.IList.Contains(System.Object)">
      <summary>
        <para>When implemented by a class, determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Object" />
    is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.IList.Clear">
      <summary>
        <para>When implemented by a class, removes all items from the <see cref="T:System.Collections.IList" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.IList.IndexOf(System.Object)">
      <summary>
        <para>When implemented by a class, determines the index of a
       specific item in the <see cref="T:System.Collections.IList" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <returns>
        <para>The index of <paramref name="value" /> if found in the list; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
      <summary>
        <para>When implemented by a class, inserts an item to
       the <see cref="T:System.Collections.IList" /> at the
       specified position.</para>
      </summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Collections.IList.Remove(System.Object)">
      <summary>
        <para>When implemented by a class, removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
      <summary>
        <para>When implemented by a class, removes the <see cref="T:System.Collections.IList" />
 item at the specified index.</para>
      </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="P:System.Collections.IList.Item(System.Int32)">
      <summary>
        <para>When implemented by a class, gets or sets the element at the specified 
       index.</para>
      </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="P:System.Collections.IList.IsReadOnly">
      <summary>
        <para>When implemented by a class, gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.IList.IsFixedSize">
      <summary>
        <para>When implemented by a class, gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</para>
      </summary>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
      <summary>
        <para>Creates a one-dimensional <see cref="T:System.Array" /> of the
   specified <see cref="T:System.Type" /> and length, with zero-based indexing.</para>
      </summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="length">The size of the <see cref="T:System.Array" /> to create.</param>
      <returns>
        <para>A new one-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length, using zero-based indexing.</para>
      </returns>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32)">
      <summary>
        <para>Creates a two-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" />
and dimension lengths, with zero-based indexing.</para>
      </summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="length1">The size of the first dimension of the <see cref="T:System.Array" /> to create.</param>
      <param name="length2">The size of the second dimension of the <see cref="T:System.Array" /> to create.</param>
      <returns>
        <para>A new two-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length
   for each dimension, using zero-based indexing.</para>
      </returns>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Creates a three-dimensional <see cref="T:System.Array" /> of the
   specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing.</para>
      </summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="length1">The size of the first dimension of the <see cref="T:System.Array" /> to create.</param>
      <param name="length2">The size of the second dimension of the <see cref="T:System.Array" /> to create.</param>
      <param name="length3">The size of the third dimension of the <see cref="T:System.Array" /> to create.</param>
      <returns>
        <para>A new three-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length
   for each dimension, using zero-based indexing.</para>
      </returns>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
      <summary>
        <para>Creates a multidimensional <see cref="T:System.Array" /> of the
   specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing.</para>
      </summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="lengths">An array that contains the size of each dimension of the <see cref="T:System.Array" /> to create.</param>
      <returns>
        <para>A new multidimensional <see cref="T:System.Array" /> of the
   specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</para>
      </returns>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])">
      <summary>
        <para>Creates a multidimensional <see cref="T:System.Array" /> of the
   specified <see cref="T:System.Type" /> and dimension lengths, with the specified lower bounds.</para>
      </summary>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="lengths">A one-dimensional array that contains the size of each dimension of the <see cref="T:System.Array" /> to create.</param>
      <param name="lowerBounds">A one-dimensional array that contains the lower bound (starting index) of each dimension of the <see cref="T:System.Array" /> to create.</param>
      <returns>
        <para>A new multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with
   the specified length and lower bound for each dimension.</para>
      </returns>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
      <summary>
        <para> Copies a range of elements from
      an <see cref="T:System.Array" /> starting at the first element and pastes them into
      another <see cref="T:System.Array" /> starting at the first element.</para>
      </summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="length">The number of elements to copy.</param>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>
        <para> Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index
 and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.</para>
      </summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="sourceIndex">The index in the <paramref name="sourceArray" /> at which copying begins.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="destinationIndex">The index in the <paramref name="destinationArray" /> at which storing begins.</param>
      <param name="length">The number of elements to copy.</param>
    </member>
    <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
      <summary>
        <para>Sets a range of elements in the <see cref="T:System.Array" /> to zero, to <see langword="false" />, or to <see langword="null" />, depending on the element type.</para>
      </summary>
      <param name="array">The <see cref="T:System.Array" /> whose elements need to be cleared.</param>
      <param name="index">The starting index of the range of elements to clear.</param>
      <param name="length">The number of elements to clear.</param>
    </member>
    <member name="M:System.Array.GetValue(System.Int32[])">
      <summary>
        <para>Gets the value at the specified position in the multidimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="indices">A one-dimensional array of indexes that specifies the position of the <see cref="T:System.Array" /> element to get.</param>
      <returns>
        <para>The value at the specified position in the multidimensional <see cref="T:System.Array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.GetValue(System.Int32)">
      <summary>
        <para>Gets the value at the specified position in the
      one-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="index">The position of the <see cref="T:System.Array" /> element to get.</param>
      <returns>
        <para>The value at the specified position in the one-dimensional <see cref="T:System.Array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.GetValue(System.Int32,System.Int32)">
      <summary>
        <para>Gets the value at the specified position in the
      two-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="index1">The first-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <param name="index2">The second-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <returns>
        <para>The value at the specified position in the two-dimensional <see cref="T:System.Array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.GetValue(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Gets the value at the specified position in the
      three-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="index1">The first-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <param name="index2">The second-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <param name="index3">The third-dimension index of the <see cref="T:System.Array" /> element to get.</param>
      <returns>
        <para>The value at the specified position in the three-dimensional <see cref="T:System.Array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32)">
      <summary>
        <para>Sets a value to the element at the specified position in the one-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index">The position of the <see cref="T:System.Array" /> element to set.</param>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32,System.Int32)">
      <summary>
        <para>Sets a value to the element at the specified position
      in the two-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index1">The first-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <param name="index2">The second-dimension index of the <see cref="T:System.Array" /> element to set.</param>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Sets a value to the element at the specified position
      in the three-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index1">The first-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <param name="index2">The second-dimension index of the <see cref="T:System.Array" /> element to set.</param>
      <param name="index3">The third-dimension index of the <see cref="T:System.Array" /> element to set.</param>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32[])">
      <summary>
        <para>Sets a value to the element at the specified position
      in the multidimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="value">The new value for the specified element.</param>
      <param name="indices">A one-dimensional array of indexes that specifies the position of the element to set.</param>
    </member>
    <member name="M:System.Array.GetLength(System.Int32)">
      <summary>
        <para>Gets the number of elements in the specified dimension
      of the <see cref="T:System.Array" />.
      </para>
      </summary>
      <param name="dimension">A zero-based dimension of the <see cref="T:System.Array" /> whose length needs to be determined. </param>
      <returns>
        <para>The number of elements in the specified dimension.
      </para>
      </returns>
    </member>
    <member name="M:System.Array.GetUpperBound(System.Int32)">
      <summary>
        <para>Gets the upper bound of the specified dimension in the
    <see cref="T:System.Array" />.</para>
      </summary>
      <param name="dimension">A zero-based dimension of the <see cref="T:System.Array" /> whose upper bound needs to be determined.</param>
      <returns>
        <para>The upper bound of the specified dimension in the
    <see cref="T:System.Array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.GetLowerBound(System.Int32)">
      <summary>
        <para>Gets the lower bound of the specified dimension in the <see cref="T:System.Array" />.</para>
      </summary>
      <param name="dimension">A zero-based dimension of the <see cref="T:System.Array" /> whose lower bound needs to be determined.</param>
      <returns>
        <para>The lower bound of the specified dimension in the <see cref="T:System.Array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.Clone">
      <summary>
        <para>Creates a shallow copy of the <see cref="T:System.Array" />.</para>
      </summary>
      <returns>
        <para>A shallow copy of the <see cref="T:System.Array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object)">
      <summary>
        <para>Searches an entire one-dimensional sorted <see cref="T:System.Array" /> for a specific element, using
   the <see cref="T:System.IComparable" /> interface implemented by each element of
   the <see cref="T:System.Array" /> and by the specified object.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to search for.</param>
      <returns>
        <para>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found.</para>
        <para>-or-</para>
        <para> A negative number, which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />,
if <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />.</para>
        <para>-or-</para>
        <para>A negative number, which is the bitwise complement of (the index of the last element + 1),
   if <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
      <summary>
        <para>Searches a section of a one-dimensional sorted <see cref="T:System.Array" /> for a
   value, using the <see cref="T:System.IComparable" /> interface implemented by each element of
   the <see cref="T:System.Array" /> and by the specified value.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <returns>
        <para>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found.</para>
        <para>-or-</para>
        <para>A negative number, which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />,
if <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />.</para>
        <para>-or-</para>
        <para>A negative number, which is the bitwise complement of (the index of the last element + 1),
   if <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
      <summary>
        <para>Searches an entire one-dimensional sorted <see cref="T:System.Array" /> for a value, using the
   specified <see cref="T:System.Collections.IComparer" /> interface.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</para>
        <para> -or-</para>
        <para>
          <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</para>
      </param>
      <returns>
        <para>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found.</para>
        <para>-or-</para>
        <para>A negative number, which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />,
if <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />.</para>
        <para>-or-</para>
        <para>A negative number, which is the bitwise complement of (the index of the last element + 1),
   if <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>
        <para>Searches a section of a one-dimensional sorted <see cref="T:System.Array" /> for a value,
   using the specified <see cref="T:System.Collections.IComparer" /> interface.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element. </para>
      </param>
      <returns>
        <para>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found.</para>
        <para>-or-</para>
        <para>A negative number, which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />,
if <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />.</para>
        <para>-or-</para>
        <para>A negative number, which is the bitwise complement of (the index of the last element + 1),
   if <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
      <summary>
        <para> Copies all the elements of the current one-dimensional <see cref="T:System.Array" /> to the specified
   one-dimensional <see cref="T:System.Array" /> starting at the specified destination <see cref="T:System.Array" /> index.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the current <see cref="T:System.Array" />.</param>
      <param name="index">The index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="M:System.Array.GetEnumerator">
      <summary>
        <para>Returns an <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Array" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Array" />.</para>
      </returns>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object)">
      <summary>
        <para>Searches for the specified object and returns the index of the first occurrence
   within the entire one-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <returns>
        <para>The index of the first occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, the lower bound of the array - 1.</para>
      </returns>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32)">
      <summary>
        <para>Searches for the specified object and returns the index of the first occurrence
   within the section of the one-dimensional <see cref="T:System.Array" /> that extends from the specified index to the last element.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the search.</param>
      <returns>
        <para>The index of the first occurrence of <paramref name="value" /> within the section of <paramref name="array" /> that extends from <paramref name="startIndex" /> to the last element, if found; otherwise, the lower bound of the array - 1.</para>
      </returns>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>
        <para>Searches for the specified object and returns the index of the first occurrence within the section of the one-dimensional <see cref="T:System.Array" /> that starts at the specified index and contains the specified number of elements.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>
        <para>The index of the first occurrence of <paramref name="value" /> within the section of <paramref name="array" /> that starts
   at <paramref name="startIndex" /> and contains the number of elements specified in <paramref name="count" />, if found; otherwise, the lower bound of the array - 1.</para>
      </returns>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object)">
      <summary>
        <para> Searches for the specified object and returns the index of the last occurrence within the entire one-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <returns>
        <para>The index of the last occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, the lower bound of the array - 1.</para>
      </returns>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)">
      <summary>
        <para> Searches for the specified object and returns the index of the last occurrence within the section of the one-dimensional <see cref="T:System.Array" /> that extends from the first element to the specified index.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the backward search.</param>
      <returns>
        <para>The index of the last occurrence of <paramref name="value" /> within the section of <paramref name="array" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, the lower bound of the array - 1.</para>
      </returns>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>
        <para> Searches for the specified object and returns the index of the last occurrence within the section of the one-dimensional <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>
        <para>The index of the last occurrence of <paramref name="value" /> within the section of <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, the lower bound of the array - 1.</para>
      </returns>
    </member>
    <member name="M:System.Array.Reverse(System.Array)">
      <summary>
        <para>Reverses the sequence of the elements in the entire
       one-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to reverse.</param>
    </member>
    <member name="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)">
      <summary>
        <para>Reverses the sequence of the elements in a section of
       the one-dimensional <see cref="T:System.Array" />.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to reverse.</param>
      <param name="index">The starting index of the section to reverse.</param>
      <param name="length">The number of elements in the section to reverse.</param>
    </member>
    <member name="M:System.Array.Sort(System.Array)">
      <summary>
        <para>Sorts the elements in an entire one-dimensional <see cref="T:System.Array" /> using
   the <see cref="T:System.IComparable" /> interface implemented by each element of the <see cref="T:System.Array" />.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array)">
      <summary>
        <para>Sorts a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys
   and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using
   the <see cref="T:System.IComparable" /> interface implemented by each key.</para>
      </summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">
        <para>The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</para>
      </param>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32)">
      <summary>
        <para>Sorts the elements in a section of a one-dimensional <see cref="T:System.Array" /> using the
<see cref="T:System.IComparable" /> interface implemented by each element of the <see cref="T:System.Array" />.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)">
      <summary>
        <para>Sorts a section of a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the
   other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the
<see cref="T:System.IComparable" />
interface implemented by each key.</para>
      </summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />. <para>-or-</para><para><see langword="null" /> to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</para></param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Collections.IComparer)">
      <summary>
        <para>Sorts the elements in a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" /> interface.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</para>
        <para> -or-</para>
        <para>
          <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</para>
      </param>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)">
      <summary>
        <para>Sorts a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the
   other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" /> interface.</para>
      </summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">
        <para>The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</para>
      </param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</para>
      </param>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>
        <para>Sorts the elements in a section of a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" /> interface.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element. </para>
      </param>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>
        <para>Sorts a section of a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the
   other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" /> interface.</para>
      </summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">
        <para>The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</para>
      </param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element. </para>
      </param>
    </member>
    <member name="M:System.Array.Initialize">
      <summary>
        <para>Initializes every element of the value-type <see cref="T:System.Array" /> by calling the
   default constructor of the value type.</para>
      </summary>
    </member>
    <member name="P:System.Array.Length">
      <summary>
        <para>Gets the total number of elements in all the dimensions of the <see cref="T:System.Array" />.</para>
      </summary>
    </member>
    <member name="P:System.Array.Rank">
      <summary>
        <para>Gets the rank (number of dimensions) of the <see cref="T:System.Array" />.</para>
      </summary>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#Count">
      <summary>
        <para> Gets the number of elements contained in the <see cref="T:System.Array" />.</para>
      </summary>
    </member>
    <member name="P:System.Array.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to
      the <see cref="T:System.Array" />.</para>
      </summary>
    </member>
    <member name="P:System.Array.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Array" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Array.IsFixedSize">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Array" /> has a fixed size.</para>
      </summary>
    </member>
    <member name="P:System.Array.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Array" />
is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Array.System#Collections#IList#$Item$(System.Int32)">
      <summary>
        <para>Gets or sets the element at the specified index.</para>
      </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="T:System.Collections.IEnumerator">
      <summary>
        <para> Supports a simple iteration over a collection.</para>
      </summary>
    </member>
    <member name="M:System.Collections.IEnumerator.MoveNext">
      <summary>
        <para>Advances the enumerator to the next element of the collection.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the enumerator was successfully advanced to the next element;
 <see langword="false" /> if the enumerator has passed the end of the collection.</para>
      </returns>
    </member>
    <member name="M:System.Collections.IEnumerator.Reset">
      <summary>
        <para>Sets the enumerator to its initial position, which is before
 the first element in the collection.</para>
      </summary>
    </member>
    <member name="P:System.Collections.IEnumerator.Current">
      <summary>
        <para>Gets the current element in the collection.</para>
      </summary>
    </member>
    <member name="T:System.IComparable">
      <summary>
        <para>Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method.</para>
      </summary>
    </member>
    <member name="M:System.IComparable.CompareTo(System.Object)">
      <summary>
        <para> Compares the current instance with another
 object of the same type.</para>
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <para>A 32-bit signed integer that indicates the relative order of the comparands.
 The return value has these meanings:</para>
        <list type="table">
          <listheader>
            <term>Value </term>
            <description>Meaning </description>
          </listheader>
          <item>
            <term> Less than zero </term>
            <description>This
 instance is less than <paramref name="obj" />. </description>
          </item>
          <item>
            <term> Zero </term>
            <description>This
 instance is equal to <paramref name="obj" />. </description>
          </item>
          <item>
            <term> Greater than zero </term>
            <description>This
 instance is greater than <paramref name="obj" />. </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="T:System.String">
      <summary>
        <para> Represents an immutable series of characters.</para>
      </summary>
    </member>
    <member name="T:System.IConvertible">
      <summary>
        <para>Defines methods that convert the value of the implementing reference or value
      type to a common language runtime type that has an equivalent value.</para>
      </summary>
    </member>
    <member name="M:System.IConvertible.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" />
for this instance.</para>
      </summary>
      <returns>
        <para>The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or 
 value type that implements this interface.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToBoolean(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent Boolean
 value using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>A Boolean value equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToChar(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent Unicode
 character using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>A Unicode character equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToSByte(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> An 8-bit signed integer equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToByte(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 8-bit unsigned
 integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> An 8-bit unsigned integer equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToInt16(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 16-bit signed
 integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> An 16-bit signed integer equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToUInt16(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 16-bit unsigned
 integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> An 16-bit unsigned integer equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToInt32(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 32-bit signed
 integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> An 32-bit signed integer equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToUInt32(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 32-bit unsigned
 integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> An 32-bit unsigned integer equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToInt64(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 64-bit signed
 integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> An 64-bit signed integer equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToUInt64(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 64-bit unsigned
 integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> An 64-bit unsigned integer equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToSingle(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> A single-precision floating-point number equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToDouble(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> A double-precision floating-point number equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToDecimal(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 
 <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToDateTime(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 
 <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> A <see cref="T:System.DateTime" /> instance 
 equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToString(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an equivalent 
 <see cref="T:System.String" /> using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> A <see cref="T:System.String" /> instance 
 equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to an
 <see cref="T:System.Object" /> of the
 specified <see cref="T:System.Type" /> that has an equivalent value,
 using the specified culture-specific formatting information.</para>
      </summary>
      <param name=" conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para> An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</para>
      </returns>
    </member>
    <member name="F:System.String.Empty">
      <summary>
        <para> Represents the empty string. This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.String.Join(System.String,System.String[])">
      <summary>
        <para> Concatenates a specified separator <see cref="T:System.String" /> between each element of a specified 
<see cref="T:System.String" /> array, yielding
 a single concatenated string.
 </para>
      </summary>
      <param name="separator">A <see cref="T:System.String" />. </param>
      <param name="value">An array of <see cref="T:System.String" />s. </param>
      <returns>
        <para> A <see cref="T:System.String" />
consisting of the elements of <paramref name="value" /> interspersed with the
<paramref name="separator" /> 
string.</para>
      </returns>
    </member>
    <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
      <summary>
        <para>Concatenates a specified separator <see cref="T:System.String" /> between each element of a specified 
<see cref="T:System.String" /> array, yielding a single
 concatenated string. Parameters specify the first array element and number of
 elements to use.</para>
      </summary>
      <param name="separator">A <see cref="T:System.String" />. </param>
      <param name="value">An array of <see cref="T:System.String" />. </param>
      <param name="startIndex">The first array element in <paramref name="value" /> to use. </param>
      <param name="count">The number of elements of <paramref name="value" /> to use. </param>
      <returns>
        <para> A <see cref="T:System.String" />
consisting of the strings in <paramref name="value" /> joined by <paramref name="separator" />.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.String.Empty" />
if <paramref name="count" /> is zero, <paramref name="value" /> has no elements, or
<paramref name="separator" /> and all the elements of <paramref name="value" /> are 
<see cref="F:System.String.Empty" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Equals(System.Object)">
      <summary>
        <para>Determines whether this instance of <see cref="T:System.String" /> and a specified object, which must be a 
<see cref="T:System.String" />, have the
 same value.</para>
      </summary>
      <param name="obj">An <see cref="T:System.Object" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.String" />
and its value is
the same as this instance; otherwise, <see langword="false." /></para>
      </returns>
    </member>
    <member name="M:System.String.Equals(System.String)">
      <summary>
        <para>Determines whether this instance and a specified 
 <see cref="T:System.String" /> have the same value.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the value
 of <paramref name="value" /> is the same as this instance; otherwise, <see langword="false." /></para>
      </returns>
    </member>
    <member name="M:System.String.Equals(System.String,System.String)">
      <summary>
        <para> Determines whether two specified <see cref="T:System.String" /> objects have the
 same value.</para>
      </summary>
      <param name="a">A <see cref="T:System.String" /> or <see langword="null" />.</param>
      <param name="b">A <see cref="T:System.String" /> or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false." /></para>
      </returns>
    </member>
    <member name="M:System.String.op_Equality(System.String,System.String)">
      <summary>
        <para> Determines whether two specified <see cref="T:System.String" /> objects have the
 same value.</para>
      </summary>
      <param name="a">A <see cref="T:System.String" /> or <see langword="null" />.</param>
      <param name="b">A <see cref="T:System.String" /> or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false." /></para>
      </returns>
    </member>
    <member name="M:System.String.op_Inequality(System.String,System.String)">
      <summary>
        <para> Determines whether two specified <see cref="T:System.String" /> objects have
   different values.</para>
      </summary>
      <param name="a">A <see langword="String" /> or <see langword="null" />.</param>
      <param name="b">A <see langword="String" /> or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, <see langword="false." /></para>
      </returns>
    </member>
    <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Copies a specified number of characters from a specified
 position in this instance
 to a specified position in an array of Unicode characters.</para>
      </summary>
      <param name="sourceIndex">A character position in this instance.</param>
      <param name="destination">An array of Unicode characters.</param>
      <param name="destinationIndex">An array element in <paramref name="destination" />.</param>
      <param name="count">The number of characters in this instance to copy to <paramref name="destination" />.</param>
    </member>
    <member name="M:System.String.ToCharArray">
      <summary>
        <para>Copies the characters in this instance to a Unicode character array. </para>
      </summary>
      <returns>
        <para> A Unicode character array whose elements are the 
 individual characters of this instance. If this instance is an empty string, the returned array is empty
 and has a zero length.</para>
      </returns>
    </member>
    <member name="M:System.String.ToCharArray(System.Int32,System.Int32)">
      <summary>
        <para>Copies the characters in a specified substring in this instance to a Unicode character array. </para>
      </summary>
      <param name="startIndex">The starting position of a substring in this instance. </param>
      <param name="length">The length of the substring in this instance. </param>
      <returns>
        <para>A Unicode character array whose elements are
 the <paramref name="length" /> number of characters in this instance starting from
 character position <paramref name="startIndex" />.</para>
      </returns>
    </member>
    <member name="M:System.String.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.String.Split(System.Char[])">
      <summary>
        <para>Identifies the substrings in this instance that are 
 delimited by one or more characters specified in an array, then places the
 substrings into a <see cref="T:System.String" /> array.</para>
      </summary>
      <param name="separator">An array of Unicode characters that delimit the substrings in this instance, an empty array containing no delimiters, or <see langword="null" />.</param>
      <returns>
        <para>An array consisting of a single element containing this instance, if
 this instance contains none of the characters in <paramref name="separator" />.</para>
        <para>-or-</para>
        <para>An array of substrings if this instance is delimited by one or more
 of the characters in <paramref name="separator" />. </para>
        <para>-or-</para>
        <para>An array of the substrings in this instance delimited by white space
 characters if those characters occur and <paramref name="separator" /> is
 <see langword="null" />
 or contains no delimiter characters.</para>
        <para>
          <see cref="F:System.String.Empty" /> is returned for any substring where two delimiters are
adjacent, or a delimiter is found at the beginning or end of this
instance.</para>
        <para>Delimiter characters are not included in the substrings.</para>
      </returns>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32)">
      <summary>
        <para>Identifies the substrings in this instance that are
      delimited by one or more characters specified in an array, then places the
      substrings into a <see cref="T:System.String" /> array. A parameter specifies the maximum number of array elements to return. </para>
      </summary>
      <param name="separator">An array of Unicode characters that delimit the substrings in this instance, an empty array containing no delimiters, or <see langword="null" />.</param>
      <param name="count">The maximum number of array elements to return.</param>
      <returns>
        <para>An array consisting of a single element containing this instance, if this instance contains none of the characters in <paramref name="separator" />.</para>
        <para>-or-</para>
        <para>An array of substrings if this instance is delimited by one or more of the characters in <paramref name="separator" />. </para>
        <para>-or-</para>
        <para>An array of the substrings in this instance delimited by white space characters if those characters occur and <paramref name="separator" /> is <see langword="null" /> or contains no delimiter characters.</para>
        <para>
          <see cref="F:System.String.Empty" /> is returned for any substring where two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance.</para>
        <para>Delimiter characters are not included in the substrings.</para>
      </returns>
    </member>
    <member name="M:System.String.Substring(System.Int32)">
      <summary>
        <para> Retrieves a substring from this instance. The substring starts at a specified character position.</para>
      </summary>
      <param name="startIndex">The starting character position of a substring in this instance.</param>
      <returns>
        <para>A <see cref="T:System.String" />
equivalent to the substring that begins at <paramref name="startIndex" />
in this instance.</para>
        <para> -or-</para>
        <para>
          <see cref="F:System.String.Empty" /> if
<paramref name="startIndex " />is 
equal to the length of this instance.</para>
      </returns>
    </member>
    <member name="M:System.String.Substring(System.Int32,System.Int32)">
      <summary>
        <para>Retrieves a substring from this instance. The substring starts at a specified character position and has a specified
 length.</para>
      </summary>
      <param name="startIndex">The index of the start of the substring.</param>
      <param name="length">The number of characters in the substring.</param>
      <returns>
        <para>A <see cref="T:System.String" /> equivalent
 to the substring of length <paramref name="length" /> that begins at <paramref name="startIndex" /> in this instance.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.String.Empty" /> if
<paramref name="startIndex " />is equal to the length of this instance and 
<paramref name="length" /> is zero.</para>
      </returns>
    </member>
    <member name="M:System.String.Trim(System.Char[])">
      <summary>
        <para> Removes all occurrences of a set of characters specified in a Unicode character array from the beginning
 and end of this instance.</para>
      </summary>
      <param name="trimChars">An array of Unicode characters to be removed or <see langword="null" />.</param>
      <returns>
        <para>The <see cref="T:System.String" /> that
 remains after all occurrences of the characters in
<paramref name="trimChars" /> are 
 removed. If <paramref name="trimChars" /> is <see langword="null" />, white space characters
 are removed instead.</para>
      </returns>
    </member>
    <member name="M:System.String.TrimStart(System.Char[])">
      <summary>
        <para> Removes all occurrences of a set of characters specified in a Unicode character array from
 the beginning of this instance.</para>
      </summary>
      <param name="trimChars">An array of Unicode characters to be removed or <see langword="null" />.</param>
      <returns>
        <para>The <see cref="T:System.String" /> that
 remains after all occurrences of characters in
<paramref name="trimChars" /> are 
 removed. If <paramref name="trimChars" /> is <see langword="null" />, white space characters
 are removed instead.</para>
      </returns>
    </member>
    <member name="M:System.String.TrimEnd(System.Char[])">
      <summary>
        <para> Removes all occurrences of a set of characters specified in a Unicode character array from
 the end of this instance.</para>
      </summary>
      <param name="trimChars">An array of Unicode characters to be removed or <see langword="null" />.</param>
      <returns>
        <para>The <see cref="T:System.String" /> that
 remains after all occurrences of the characters in
<paramref name="trimChars" /> are 
 removed. If <paramref name="trimChars" /> is <see langword="null" />, white space characters
 are removed instead.</para>
      </returns>
    </member>
    <member name="M:System.String.#ctor(System.Char*)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters.</para>
      </summary>
      <param name="value">A pointer to a null terminated array of Unicode characters.</param>
    </member>
    <member name="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters,
 a starting character position within that array,
 and a length.</para>
      </summary>
      <param name="value">A pointer to an array of Unicode characters.</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <param name="length">The number of characters within <paramref name="value" /> to use.</param>
    </member>
    <member name="M:System.String.#ctor(System.SByte*)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a pointer to an array of 8-bit signed integers.</para>
      </summary>
      <param name="value">A pointer to a null terminated array of 8-bit signed integers.</param>
    </member>
    <member name="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of 8-bit signed integers,
 a starting character position within that array,
 and a length.</para>
      </summary>
      <param name="value">A pointer to an array of 8-bit signed integers.</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <param name="length">The number of characters within <paramref name="value" /> to use.</param>
    </member>
    <member name="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.String" /> class to the 
 value indicated by a specified pointer to an array of 8-bit signed integers, a
 starting character position within that array, a length, and an <see cref="T:System.Text.Encoding" />
 object.</para>
      </summary>
      <param name="value">A pointer to an array of 8-bit signed integers.</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <param name="length">The number of characters within <paramref name="value" /> to use.</param>
      <param name=" enc">An <see cref="T:System.Text.Encoding" /> object that specifies how the array referenced by <paramref name="value" /> is encoded.</param>
    </member>
    <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters,
 a starting character position within that array,
 and a length.</para>
      </summary>
      <param name="value">An array of Unicode characters.</param>
      <param name="startIndex">The starting position within <paramref name="value" />.</param>
      <param name="length">The number of characters within <paramref name="value" /> to use.</param>
    </member>
    <member name="M:System.String.#ctor(System.Char[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.String" />
class to the value indicated by an array of Unicode characters.</para>
      </summary>
      <param name="value">An array of Unicode characters.</param>
    </member>
    <member name="M:System.String.#ctor(System.Char,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified Unicode character
 repeated a
 specified number of times.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <param name=" count">The number of times <paramref name="c" /> occurs. </param>
    </member>
    <member name="M:System.String.Compare(System.String,System.String)">
      <summary>
        <para>Compares two specified <see cref="T:System.String" /> objects.</para>
      </summary>
      <param name="strA">The first <see cref="T:System.String" />.</param>
      <param name="strB">The second <see cref="T:System.String" />.</param>
      <returns>
        <para>A 32-bit signed integer indicating the lexical relationship between the two comparands.</para>
        <list type="table">
          <listheader>
            <term> Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>
              <paramref name="strA" /> is less than <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <paramref name="strA" /> equals <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <paramref name="strA" /> is greater than
<paramref name="strB" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Boolean)">
      <summary>
        <para> Compares two specified <see cref="T:System.String" /> objects, ignoring or honoring their
 case.</para>
      </summary>
      <param name="strA">The first <see cref="T:System.String" />.</param>
      <param name="strB">The second <see cref="T:System.String" />.</param>
      <param name="ignoreCase">A <see cref="T:System.Boolean" /> indicating a case-sensitive or insensitive comparison. (<see langword="true" /> indicates a case-insensitive comparison.)</param>
      <returns>
        <para>A 32-bit signed integer indicating the lexical relationship between the two
 comparands.</para>
        <list type="table">
          <listheader>
            <term> Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>
              <paramref name="strA" /> is less than <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <paramref name="strA" /> equals <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <paramref name="strA" /> is greater than <paramref name="strB" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>
        <para> Compares two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and honoring culture-specific information about their formatting.</para>
      </summary>
      <param name="strA">The first <see cref="T:System.String" />.</param>
      <param name="strB">The second <see cref="T:System.String" />.</param>
      <param name="ignoreCase">A <see cref="T:System.Boolean" /> indicating a case-sensitive or insensitive comparison. (<see langword="true" /> indicates a case-insensitive comparison.)</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific formatting information.</param>
      <returns>
        <para>A 32-bit signed integer indicating the lexical relationship between the two
 comparands.</para>
        <list type="table">
          <listheader>
            <term> Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>
              <paramref name="strA" /> is less than <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <paramref name="strA" /> equals <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <paramref name="strA" /> is greater than <paramref name="strB" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
        <para>Compares substrings of two specified <see cref="T:System.String" />
objects.</para>
      </summary>
      <param name="strA">The first <see cref="T:System.String" />.</param>
      <param name="indexA">The position of the substring within <paramref name="strA" />.</param>
      <param name="strB">The second <see cref="T:System.String" />.</param>
      <param name="indexB">The position of the substring within <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <returns>
        <para>A 32-bit signed integer indicating the lexical relationship between the two
 comparands.</para>
        <list type="table">
          <listheader>
            <term> Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>The substring in <paramref name="strA" /> is less than the substring
 in <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description> The substrings are equal, or <paramref name="length" /> is zero.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>The substring in
 <paramref name="strA" /> is greater than the substring in
 <paramref name="strB" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Compares substrings of two specified <see cref="T:System.String" /> objects, ignoring or honoring their case.</para>
      </summary>
      <param name="strA">The first <see cref="T:System.String" />.</param>
      <param name="indexA">The position of the substring within <paramref name="strA" />.</param>
      <param name="strB">The second <see cref="T:System.String" />.</param>
      <param name="indexB">The position of the substring within <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <param name=" ignoreCase">A <see cref="T:System.Boolean" /> indicating a case-sensitive or insensitive comparison. (<see langword="true" /> indicates a case-insensitive comparison.) </param>
      <returns>
        <para>A 32-bit signed integer indicating the lexical relationship between the two
 comparands.</para>
        <list type="table">
          <listheader>
            <term>Value Type</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>The substrings are equal, or <paramref name="length" /> is zero.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
      <summary>
        <para>Compares substrings of two specified <see cref="T:System.String" /> objects, ignoring or honoring their
 case, and honoring culture-specific information about
 their formatting.</para>
      </summary>
      <param name="strA">The first <see cref="T:System.String" />.</param>
      <param name="indexA">The position of the substring within <paramref name="strA" />.</param>
      <param name="strB">The second <see cref="T:System.String" />.</param>
      <param name="indexB">The position of the substring within the <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <param name="ignoreCase">A <see cref="T:System.Boolean" /> indicating a case-sensitive or insensitive comparison. (<see langword="true" /> indicates a case-insensitive comparison.) </param>
      <param name=" culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific formatting information.</param>
      <returns>
        <para>An integer indicating the lexical relationship between the two comparands.</para>
        <list type="table">
          <listheader>
            <term>Value Type</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>The substrings are equal, or <paramref name="length" /> is zero.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance with a specified
 <see cref="T:System.Object" />.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that evaluates to a <see langword="String" />.</param>
      <returns>
        <para>A 32-bit signed integer indicating the lexical relationship between the two
 comparands.</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This
 instance is less than <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This
 instance is equal to <paramref name="value" />.</description>
          </item>
          <item>
            <term>
              <para> Greater than zero</para>
            </term>
            <description>
              <para>This instance is greater than <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is
 <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.CompareTo(System.String)">
      <summary>
        <para>Compares this instance with a specified <see cref="T:System.String" /> object.</para>
      </summary>
      <param name="strB">A <see cref="T:System.String" />.</param>
      <returns>
        <para>A 32-bit signed integer indicating the lexical relationship between the two
 comparands.</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to <paramref name="value" />.</description>
          </item>
          <item>
            <term>
              <para>Greater than zero</para>
            </term>
            <description>
              <para>This instance is greater than <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.String)">
      <summary>
        <para>Compares two specified <see cref="T:System.String" />
objects, without considering the local
national language or culture.</para>
      </summary>
      <param name="strA">The first <see cref="T:System.String" />.</param>
      <param name="strB">The second <see cref="T:System.String" />.</param>
      <returns>
        <para>An integer indicating the lexical relationship between the two comparands.</para>
        <list type="table">
          <listheader>
            <term>Permission</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>
              <paramref name="strA" /> is less than
 <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <paramref name="strA" /> and <paramref name="strB" /> are equal.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <paramref name="strA" /> is greater than
<paramref name="strB" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
        <para> Compares substrings of two specified <see cref="T:System.String" /> objects, without considering the local
 national language or culture. Parameters
 specify
 the length and starting positions of the substrings.</para>
      </summary>
      <param name="strA">The first <see cref="T:System.String" />.</param>
      <param name="indexA">The starting index of the substring in <paramref name="strA" />.</param>
      <param name="strB">The second <see cref="T:System.String" />.</param>
      <param name="indexB">The starting index of the substring in <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <returns>
        <para>A 32-bit signed integer indicating the lexical relationship between the two comparands.</para>
        <list type="table">
          <listheader>
            <term>Value Type</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>The substrings are equal, or <paramref name="length" /> is zero.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.EndsWith(System.String)">
      <summary>
        <para>Determines whether the end of this instance matches the 
 specified <see cref="T:System.String" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the end of
 this instance matches <paramref name="value" />; otherwise, <see langword="false " />
 .</para>
      </returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char)">
      <summary>
        <para>Reports the index of the first occurrence of the
      specified Unicode character in this instance.</para>
      </summary>
      <param name="value">A Unicode character to seek.</param>
      <returns>
        <para>A positive 32-bit signed integer, the index, that is
      the character position in this instance where <paramref name="value" /> was found;
      otherwise, -1 if <paramref name="value" /> was not found.</para>
      </returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32)">
      <summary>
        <para>Reports the index of the first occurrence of the specified Unicode
      character in this instance. The search starts at a specified character position.</para>
      </summary>
      <param name="value">A Unicode character to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <returns>
        <para>A positive 32-bit signed integer, the index, indicating the character position in this instance where <paramref name="value" /> was found; otherwise, -1 if <paramref name="value" /> was not found.</para>
      </returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
      <summary>
        <para>Reports the index of the first occurrence of the specified character in this instance. The search
      starts at a specified character position and examines a specified
      number of character positions.</para>
      </summary>
      <param name="value">A Unicode character to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>
        <para>A positive 32-bit signed integer, the index, that is the character position in this instance where <paramref name="value" /> was found; otherwise, -1 if <paramref name="value" /> was not found.</para>
      </returns>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[])">
      <summary>
        <para>Reports the index of the first occurrence in this
      instance of any character in a specified array of Unicode
      characters.</para>
      </summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <returns>
        <para> The positive integer index of the first occurrence in
      this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if
      no character in <paramref name="anyOf" /> was found.</para>
      </returns>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
      <summary>
        <para>Reports the index of the first occurrence in this instance of
      any character in a specified array of
      Unicode characters. The search starts at a specified character
      position.</para>
      </summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <returns>
        <para>The positive integer index of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</para>
      </returns>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Reports the index of the first occurrence in this instance of any character in a specified
      array of Unicode characters. The search starts
      at a specified character position and examines a specified number of character positions.</para>
      </summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>
        <para>The positive integer index of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</para>
      </returns>
    </member>
    <member name="M:System.String.IndexOf(System.String)">
      <summary>
        <para>Reports the index of the first occurrence of the 
 specified <see cref="T:System.String" /> in this instance.</para>
      </summary>
      <param name="value">The <see cref="T:System.String" /> to seek.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> A
 positive
 index position.</term>
            <description>
              <paramref name="value" />
 was found.</description>
          </item>
          <item>
            <term> 
 0</term>
            <description>
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</description>
          </item>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" />
was not found.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32)">
      <summary>
        <para>Reports the index of the first occurrence of the 
 specified <see cref="T:System.String" /> in this instance. The
 search starts at a specified character position.</para>
      </summary>
      <param name="value">The <see cref="T:System.String" /> to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> A positive index position.</term>
            <description>
              <paramref name="value" /> was found.</description>
          </item>
          <item>
            <term>
              <paramref name="startIndex" />
            </term>
            <description>
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</description>
          </item>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> was not found.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Reports the index of the first occurrence of the 
 specified <see cref="T:System.String" /> in this instance. The search starts
 at a specified character position and examines a specified number of character positions.</para>
      </summary>
      <param name="value">The <see cref="T:System.String" /> to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> A positive index position.</term>
            <description>
              <paramref name="value" /> was found.</description>
          </item>
          <item>
            <term>
              <paramref name="startIndex" />
            </term>
            <description>
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</description>
          </item>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> was not found.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char)">
      <summary>
        <para>Reports the index position of the last occurrence of a specified Unicode
 character within this instance.</para>
      </summary>
      <param name="value">A Unicode character to seek. </param>
      <returns>
        <para> The index position of <paramref name="value" />
if that character
is found, or -1 if it is not.</para>
      </returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
      <summary>
        <para>Reports the index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position.</para>
      </summary>
      <param name="value">A Unicode character to seek.</param>
      <param name="startIndex">The starting position of a substring within this instance.</param>
      <returns>
        <para> The index position of <paramref name="value" /> if that character is found, or -1 if it is not.</para>
      </returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
      <summary>
        <para>Reports the index position of the last occurrence of the specified Unicode character in a
 substring within this instance. The search starts at a specified character position and examines a specified number of character positions.</para>
      </summary>
      <param name="value">A Unicode character to seek.</param>
      <param name="startIndex">The starting position of a substring within this instance.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>
        <para> The index position of <paramref name="value" /> if that character is found, or -1 if it is not.</para>
      </returns>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[])">
      <summary>
        <para>Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</para>
      </summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek. </param>
      <returns>
        <para>The positive integer index of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</para>
      </returns>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
      <summary>
        <para> Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position.</para>
      </summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <returns>
        <para>The positive integer index of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</para>
      </returns>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and examines a specified number of character positions.</para>
      </summary>
      <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>
        <para>The positive integer index of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</para>
      </returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.String)">
      <summary>
        <para>Reports the index position of the last occurrence of a 
 specified <see cref="T:System.String" /> within this instance.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> to seek.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> A positive index position.</term>
            <description>
              <paramref name="value" /> was found.</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</description>
          </item>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> was not found.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
      <summary>
        <para>Reports the index position of the last occurrence of a 
 specified <see cref="T:System.String" /> within this
 instance. The search starts at a specified character position.</para>
      </summary>
      <param name="value">The <see cref="T:System.String" /> to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> A positive index position.</term>
            <description>
              <paramref name="value" /> was found.</description>
          </item>
          <item>
            <term>
              <paramref name="startIndex" />
            </term>
            <description>
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</description>
          </item>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> was not found.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Reports the index position of the last occurrence of a 
 specified <see cref="T:System.String" /> within this instance. The
 search starts at a specified character position and examines a specified number
 of character positions.</para>
      </summary>
      <param name="value">The <see cref="T:System.String" /> to seek.</param>
      <param name="startIndex">The search starting position.</param>
      <param name="count">The number of character positions to examine.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> A positive index position.</term>
            <description>
              <paramref name="value" /> was found.</description>
          </item>
          <item>
            <term>
              <paramref name="startIndex" />
            </term>
            <description>
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</description>
          </item>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> was not found.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.String.PadLeft(System.Int32)">
      <summary>
        <para>Right-aligns the characters in this instance, padding with spaces on the left
 for a specified total length.</para>
      </summary>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</param>
      <returns>
        <para> A new <see cref="T:System.String" /> that
 is equivalent to this
 instance, but right-aligned and padded on the left with as many spaces as
 needed to create a length of <paramref name="totalWidth" />.</para>
        <para>-or-</para>
If <paramref name="totalWidth " />is less than
the length of this instance, a new <see langword="String" /> that is identical to
this instance.
</returns>
    </member>
    <member name="M:System.String.PadLeft(System.Int32,System.Char)">
      <summary>
        <para>Right-aligns the characters in this instance, padding on the left with a specified
 Unicode character for a specified total length.</para>
      </summary>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>
      <param name="paddingChar">A Unicode padding character.</param>
      <returns>
        <para>A new <see cref="T:System.String" /> that
 is
 equivalent to
 this instance, but right-aligned and padded on the left with as many
<paramref name="paddingChar" /> characters as needed to create a length of 
<paramref name="totalWidth" />.</para>
        <para>-or-</para>
If <paramref name="totalWidth " />is
less than the length of this instance, a new <see cref="T:System.String" /> that is identical to
this instance.
</returns>
    </member>
    <member name="M:System.String.PadRight(System.Int32)">
      <summary>
        <para>Left-aligns the characters in this string, padding with spaces on the right,
 for a specified total length.</para>
      </summary>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</param>
      <returns>
        <para>A new <see cref="T:System.String" /> that
 is equivalent to this
 instance, but left-aligned and padded on the right with as many spaces as
 needed to create a length of <paramref name="totalWidth" />.</para>
        <para>-or-</para>
        <para>If <paramref name="totalWidth " />is less than 
the length of this instance, a new <see cref="T:System.String" /> that is identical
to this instance.</para>
      </returns>
    </member>
    <member name="M:System.String.PadRight(System.Int32,System.Char)">
      <summary>
        <para>Left-aligns the characters in this string, padding on the right with a specified
 Unicode character, for a specified total length.</para>
      </summary>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>
      <param name="paddingChar">A Unicode padding character.</param>
      <returns>
        <para>A new <see cref="T:System.String" /> that
 is equivalent to this
 instance, but left-aligned and padded on the right with as many
<paramref name="paddingChar" /> characters as needed to create a length of 
<paramref name="totalWidth" />.</para>
        <para>-or-</para>
        <para>If <paramref name="totalWidth " />is less than 
the length of this instance, a new <see cref="T:System.String" /> that is identical
to this instance.</para>
      </returns>
    </member>
    <member name="M:System.String.StartsWith(System.String)">
      <summary>
        <para> Determines whether the beginning of this instance
      matches the specified <see cref="T:System.String" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.String" /> to seek. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> matches the
   beginning of this string or is <see cref="F:System.String.Empty" />; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.String.ToLower">
      <summary>
        <para>Returns a copy of this <see cref="T:System.String" /> in lowercase.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> in lowercase.</para>
      </returns>
    </member>
    <member name="M:System.String.ToLower(System.Globalization.CultureInfo)">
      <summary>
        <para>Returns a copy of this <see cref="T:System.String" /> in lowercase, taking into account specified culture-specific
 information.</para>
      </summary>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific formatting information.</param>
      <returns>
        <para> A <see cref="T:System.String" /> in
 lowercase.</para>
      </returns>
    </member>
    <member name="M:System.String.ToUpper">
      <summary>
        <para>Returns a copy of this <see cref="T:System.String" />
in uppercase, using default properties.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" />
in uppercase.</para>
      </returns>
    </member>
    <member name="M:System.String.ToUpper(System.Globalization.CultureInfo)">
      <summary>
        <para>Returns a copy of this <see cref="T:System.String" /> in uppercase, taking into account
 culture-specific information.</para>
      </summary>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific formatting information.</param>
      <returns>
        <para>A <see cref="T:System.String" />
in uppercase.</para>
      </returns>
    </member>
    <member name="M:System.String.ToString">
      <summary>
        <para>Returns this instance of <see cref="T:System.String" />; no
 actual conversion is performed.</para>
      </summary>
      <returns>
        <para>This <see cref="T:System.String" />.</para>
      </returns>
    </member>
    <member name="M:System.String.ToString(System.IFormatProvider)">
      <summary>
        <para>Returns this instance of <see cref="T:System.String" />; no
 actual conversion is performed.</para>
      </summary>
      <param name="provider">(Reserved) An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>This <see cref="T:System.String" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Clone">
      <summary>
        <para>Returns a reference to this instance of <see cref="T:System.String" />.</para>
      </summary>
      <returns>
        <para>This instance of <see langword="String" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Trim">
      <summary>
        <para> Removes all occurrences of white space characters from the beginning
 and end of this instance.</para>
      </summary>
      <returns>
        <para>A new <see cref="T:System.String" />
equivalent to this
instance after white space
characters are removed.</para>
      </returns>
    </member>
    <member name="M:System.String.Insert(System.Int32,System.String)">
      <summary>
        <para> Inserts a specified instance of <see cref="T:System.String" /> at a specified
 index position in this instance.
 </para>
      </summary>
      <param name="startIndex">The index position of the insertion. </param>
      <param name="value">The <see cref="T:System.String" /> to insert. </param>
      <returns>
        <para> A new <see cref="T:System.String" /> equivalent to this instance
 but with <paramref name="value" /> inserted at position <paramref name="startIndex" />.
 </para>
      </returns>
    </member>
    <member name="M:System.String.Replace(System.Char,System.Char)">
      <summary>
        <para>Replaces all occurrences of a specified Unicode character in this instance
 with another specified Unicode character. </para>
      </summary>
      <param name="oldChar">A Unicode character to be replaced. </param>
      <param name="newChar">A Unicode character to replace all occurrences of <paramref name="oldChar" />. </param>
      <returns>
        <para> A <see cref="T:System.String" /> equivalent to this instance but
 with all instances of <paramref name="oldChar" /> replaced with <paramref name="newChar" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Replace(System.String,System.String)">
      <summary>
        <para>Replaces all occurrences of a specified 
 <see cref="T:System.String" /> in this instance, 
 with another specified <see cref="T:System.String" />. </para>
      </summary>
      <param name="oldValue">A <see cref="T:System.String" /> to be replaced. </param>
      <param name="newValue">A <see cref="T:System.String" /> to replace all occurrences of <paramref name="oldValue" />. </param>
      <returns>
        <para> A <see cref="T:System.String" /> equivalent to this instance but
 with all instances of <paramref name="oldValue" /> replaced with <paramref name="newValue" />.
 </para>
      </returns>
    </member>
    <member name="M:System.String.Remove(System.Int32,System.Int32)">
      <summary>
        <para>Deletes a specified number of characters from this
 instance beginning at a specified position.</para>
      </summary>
      <param name="startIndex">The position in this instance to begin deleting characters.</param>
      <param name="count">The number of characters to delete.</param>
      <returns>
        <para> A new <see cref="T:System.String" /> that
 is equivalent to this instance less <paramref name="count" />
 number of characters.</para>
      </returns>
    </member>
    <member name="M:System.String.Format(System.String,System.Object)">
      <summary>
        <para>Replaces the format specification in a specified
   <see cref="T:System.String" /> with the textual
      equivalent of the value of a specified <see cref="T:System.Object" /> instance.</para>
      </summary>
      <param name="format">A <see cref="T:System.String" /> containing zero or more format specifications.</param>
      <param name="arg0">An <see cref="T:System.Object" /> to be formatted.</param>
      <returns>
        <para>A copy of <paramref name="format" /> in which
   the first format specification has been replaced by the <see cref="T:System.String" /> equivalent of
<paramref name="arg0" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object)">
      <summary>
        <para>Replaces the format specification in a specified
   <see cref="T:System.String" /> with the textual
      equivalent of the value of two specified <see cref="T:System.Object" /> instances.</para>
      </summary>
      <param name="format">A <see cref="T:System.String" /> containing zero or more format specifications.</param>
      <param name="arg0">The first <see cref="T:System.Object" /> to be formatted.</param>
      <param name="arg1">The second <see cref="T:System.Object" /> to be formatted.</param>
      <returns>
        <para>A copy of <paramref name="format" /> in which
   the first and second format specifications have been replaced by the
<see cref="T:System.String" /> equivalent of the <paramref name="arg0" /> and <paramref name="arg1" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <para>Replaces the format specification in a specified
      <see cref="T:System.String" /> with the textual
      equivalent of the value of three specified <see cref="T:System.Object" /> instances.</para>
      </summary>
      <param name="format">A <see cref="T:System.String" /> containing zero or more format specifications.</param>
      <param name="arg0">The first <see cref="T:System.Object" /> to be formatted.</param>
      <param name="arg1">The second <see cref="T:System.Object" /> to be formatted.</param>
      <param name="arg2">The third <see cref="T:System.Object" /> to be formatted.</param>
      <returns>
        <para>A copy of <paramref name="format" /> in which
   the first, second, and third format specifications have been replaced by the
<see cref="T:System.String" /> equivalent of the <paramref name="arg0," /><paramref name="arg1, " />and<paramref name=" arg2" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Format(System.String,System.Object[])">
      <summary>
        <para>Replaces the format specification in a specified
      <see cref="T:System.String" /> with the textual
      equivalent of the value of a corresponding <see cref="T:System.Object" /> instance in a specified array.</para>
      </summary>
      <param name="format">A <see cref="T:System.String" /> containing zero or more format specifications.</param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to be formatted.</param>
      <returns>
        <para>A copy of <paramref name="format" /> in which
   the format specifications have been replaced by the <see cref="T:System.String" /> equivalent of the corresponding
   instances of <see cref="T:System.Object" /> in <paramref name="args" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
      <summary>
        <para>Replaces the format specification in a specified <see cref="T:System.String" /> with the textual
   equivalent of the value of a corresponding <see cref="T:System.Object" />
   instance in a specified array. A specified parameter supplies culture-specific
   formatting information.</para>
      </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">A <see cref="T:System.String" /> containing zero or more format specifications.</param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to be formatted.</param>
      <returns>
        <para>A copy of <paramref name="format" /> in which
   the format specifications have been replaced by the <see cref="T:System.String" /> equivalent of the corresponding
   instances of <see cref="T:System.Object" /> in <paramref name="args" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Copy(System.String)">
      <summary>
        <para>Creates a new instance of <see cref="T:System.String" /> with the same value as
   a specified <see cref="T:System.String" />.</para>
      </summary>
      <param name="str">The <see cref="T:System.String" /> to copy.</param>
      <returns>
        <para>A new <see cref="T:System.String" /> with the same value as
<paramref name="str" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Concat(System.Object)">
      <summary>
        <para>Creates the <see cref="T:System.String" />
representation of a specified object.</para>
      </summary>
      <param name="arg0">An <see cref="T:System.Object" /> or <see langword="null" />.</param>
      <returns>
        <para>The <see cref="T:System.String" /> representation
 of the value of <paramref name="arg0" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object)">
      <summary>
        <para> Concatenates the <see cref="T:System.String" /> representations of two specified objects.</para>
      </summary>
      <param name="arg0">The first <see cref="T:System.Object" />.</param>
      <param name="arg1">The second <see cref="T:System.Object" />.</param>
      <returns>
        <para>The concatenated <see cref="T:System.String" /> representations of the values of <paramref name="arg0" /> and <paramref name="arg1" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
      <summary>
        <para>Concatenates the <see cref="T:System.String" /> representations of three specified objects.</para>
      </summary>
      <param name="arg0">The first <see cref="T:System.Object" />.</param>
      <param name="arg1">The second <see cref="T:System.Object" />.</param>
      <param name="arg2">The third <see cref="T:System.Object" />.</param>
      <returns>
        <para>The concatenated <see cref="T:System.String" /> representations of the values of
<paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object,)">
      <summary>
        <para>Concatenates the <see cref="T:System.String" /> representations of three specified objects
 and a variable-length parameter list.</para>
      </summary>
      <param name="arg0">The first <see cref="T:System.Object" />.</param>
      <param name=" arg1">The second <see cref="T:System.Object" />.</param>
      <param name=" arg2">The third <see cref="T:System.Object" />.</param>
      <param name=" arg3">The fourth <see cref="T:System.Object" />.</param>
      <returns>
        <para>The concatenated <see cref="T:System.String" /> representations of the values of <paramref name="arg0" />, <paramref name="arg1" />, <paramref name="arg2" />,
<paramref name="arg3" />, and zero or 
 more objects specified in a variable-length parameter list.</para>
      </returns>
    </member>
    <member name="M:System.String.Concat(System.Object[])">
      <summary>
        <para>Concatenates the <see cref="T:System.String" /> representations of the elements in a specified <see cref="T:System.Object" /> array.</para>
      </summary>
      <param name="args">An <see cref="T:System.Object" /> array.</param>
      <returns>
        <para>The concatenated <see cref="T:System.String" /> representations of the values of the
 elements in <paramref name="args" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Concat(System.String,System.String)">
      <summary>
        <para>Concatenates two specified instances of <see cref="T:System.String" />.</para>
      </summary>
      <param name="str0">The first <see cref="T:System.String" />.</param>
      <param name="str1">The second <see cref="T:System.String" />.</param>
      <returns>
        <para>The concatenation of <paramref name="str0" /> and
<paramref name="str1" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String)">
      <summary>
        <para>Concatenates three specified instances of 
 <see cref="T:System.String" />.</para>
      </summary>
      <param name="str0">The first <see cref="T:System.String" />.</param>
      <param name="str1">The second <see cref="T:System.String" />.</param>
      <param name="str2">The third <see cref="T:System.String" />.</param>
      <returns>
        <para>The concatenation of <paramref name="str0" />, <paramref name="str1" />, and
<paramref name="str2" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Concatenates four specified instances of <see cref="T:System.String" />.</para>
      </summary>
      <param name="str0">The first <see cref="T:System.String" />.</param>
      <param name="str1">The second <see cref="T:System.String" />.</param>
      <param name="str2">The third <see cref="T:System.String" />.</param>
      <param name=" str3">The fourth <see cref="T:System.String" />.</param>
      <returns>
        <para>The concatenation of <paramref name="str0" />, <paramref name="str1" />, <paramref name="str2" />, and <paramref name="str3" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Concat(System.String[])">
      <summary>
        <para>Concatenates the elements of a specified 
 <see cref="T:System.String" /> array.</para>
      </summary>
      <param name="values">An array of <see cref="T:System.String" /> instances.</param>
      <returns>
        <para> The concatenated elements of <paramref name="values" />.</para>
      </returns>
    </member>
    <member name="M:System.String.Intern(System.String)">
      <summary>
        <para> Retrieves the system's reference to the specified 
 <see cref="T:System.String" />.
 </para>
      </summary>
      <param name="str">A <see cref="T:System.String" />, or <see langword="null" />. </param>
      <returns>
        <para> The <see cref="T:System.String" /> reference to <paramref name="str" />.
 </para>
      </returns>
    </member>
    <member name="M:System.String.IsInterned(System.String)">
      <summary>
        <para> Retrieves a reference to a specified <see cref="T:System.String" />.
 </para>
      </summary>
      <param name="str">A <see cref="T:System.String" />. </param>
      <returns>
        <para> A <see cref="T:System.String" /> reference to <paramref name="str" /> if it is in the common language runtime "intern pool"; otherwise <see langword="null" />.
 </para>
      </returns>
    </member>
    <member name="M:System.String.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for class <see cref="T:System.String" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.String" qualify="true" />.</para>
      </returns>
    </member>
    <member name="M:System.String.GetEnumerator">
      <summary>
        <para>Retrieves an object that can iterate through the
 individual characters in this instance.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.CharEnumerator" /> object.</para>
      </returns>
    </member>
    <member name="P:System.String.Chars(System.Int32)">
      <summary>
        <para> Gets the character at a specified character position in this
 instance.</para>
      </summary>
      <param name="index">A character position in this instance.</param>
    </member>
    <member name="P:System.String.Length">
      <summary>
        <para> Gets the number of characters in this instance.</para>
      </summary>
    </member>
    <member name="T:System.Text.StringBuilder">
      <summary>
        <para> Represents a mutable
      string
      of characters. This class cannot be inherited.
      </para>
      </summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Text.StringBuilder" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Text.StringBuilder" />
class using the specified capacity.</para>
      </summary>
      <param name="capacity">The suggested starting size of this instance. </param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Text.StringBuilder" />
class using the specified string.</para>
      </summary>
      <param name="value">The string used to initialize the value of the instance. If <paramref name="value " />is <see langword="null" />, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" /> ). </param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Text.StringBuilder" />
class using the specified string and capacity.</para>
      </summary>
      <param name="value">The string used to initialize the value of the instance. If <paramref name="value " />is <see langword="null" />, the new <see cref="T:System.Text.StringBuilder" /> will contain the empty string (that is, it contains <see cref="F:System.String.Empty" /> ). </param>
      <param name="capacity">The suggested starting size of the <see cref="T:System.Text.StringBuilder" /> . </param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para> Initializes a new instance of the
   <see cref="T:System.Text.StringBuilder" />
   class from the specified substring and capacity.
   </para>
      </summary>
      <param name="value">The string that contains the substring used to initialize the value of the instance. If value is <see langword="null" />, the new StringBuilder will contain the empty string (that is, it contains <see cref="F:System.String.Empty" /> ). </param>
      <param name="startIndex">The position where the substring begins. </param>
      <param name="length">The number of characters in the substring. </param>
      <param name="capacity">The suggested starting size of the <see cref="T:System.Text.StringBuilder" /> . The maximum number of characters the current string can contain is set by <paramref name="capacity" />. </param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)">
      <summary>
        <para> Initializes a new instance of the
   <see cref="T:System.Text.StringBuilder" />
   class that starts with a specified capacity and can grow to a specified
   maximum.
   </para>
      </summary>
      <param name="capacity">The suggested starting size of the <see cref="T:System.Text.StringBuilder" /> . </param>
      <param name="maxCapacity">The maximum number of characters the current string can contain. </param>
    </member>
    <member name="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)">
      <summary>
        <para> Ensures that the capacity of this instance of <see cref="T:System.Text.StringBuilder" />
is at least the specified value.</para>
      </summary>
      <param name="capacity">The minimum capacity to ensure. </param>
      <returns>
        <para> The current capacity of this instance.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.ToString">
      <summary>
        <para> Converts this instance to a <see cref="T:System.String" />.
   </para>
      </summary>
      <returns>
        <para> A string whose value
      is the same as this instance.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)">
      <summary>
        <para> Converts a substring of the current
   <see cref="T:System.Text.StringBuilder" /> to a
   <see cref="T:System.String" />.
      </para>
      </summary>
      <param name="startIndex">The starting position of the substring. </param>
      <param name="length">The length of the substring. </param>
      <returns>
        <para> A string whose value is the same as the specified 
      substring of the value of this instance.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char,System.Int32)">
      <summary>
        <para> Appends a specified number of copies
      of the string representation of a Unicode character to the
      end of this instance.
      </para>
      </summary>
      <param name="value">The character to append. </param>
      <param name="repeatCount">The number of times to append <paramref name="value" />.</param>
      <returns>
        <para> A reference to this instance after the append operation has
      occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para> Appends the string representation of a specified subarray of Unicode characters to the end of
      this instance.
      </para>
      </summary>
      <param name="value">The array of characters to append. </param>
      <param name="startIndex">The starting position in <paramref name="value " /> . </param>
      <param name="charCount">The number of characters append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String)">
      <summary>
        <para>Appends a copy of the specified string to the end of this instance.</para>
      </summary>
      <param name="value">The <see cref="T:System.String" /> to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)">
      <summary>
        <para> Appends a copy of a specified substring
      to the end of this instance.
      </para>
      </summary>
      <param name="value">The <see cref="T:System.String" /> to append. </param>
      <param name="startIndex">The starting position in <paramref name="value " />. </param>
      <param name="count">The number of characters to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)">
      <summary>
        <para> Inserts one or more copies of a specified string into this instance
      at the specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The string to insert. </param>
      <param name="count">The number of times to insert <paramref name="value" />. </param>
      <returns>
        <para> A reference to this instance after insertion has
      occurred.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)">
      <summary>
        <para> Removes the specified range of characters from this
      instance.
      </para>
      </summary>
      <param name="startIndex">The position where removal begins. </param>
      <param name="length">The number of characters to remove. </param>
      <returns>
        <para> A reference to this instance after the excise operation
      has occurred.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Boolean)">
      <summary>
        <para> Appends the string representation of a specified Boolean value to the end of
      this instance.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.SByte)">
      <summary>
        <para> Appends the string representation of a specified 8-bit signed integer to the end of this
      instance.
      </para>
      </summary>
      <param name="value">The integer to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Byte)">
      <summary>
        <para> Appends the string representation of a specified 8-bit unsigned integer to the end of this
      instance.
      </para>
      </summary>
      <param name="value">The integer to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char)">
      <summary>
        <para> Appends the string representation of a specified Unicode character to the end of this instance.
      </para>
      </summary>
      <param name="value">The Unicode character to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int16)">
      <summary>
        <para> Appends the string representation of a specified 16-bit signed integer to the end of this
      instance.
      </para>
      </summary>
      <param name="value">The integer to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int32)">
      <summary>
        <para> Appends the string representation of a specified 32-bit signed integer to the end of this
      instance.
      </para>
      </summary>
      <param name="value">The integer to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int64)">
      <summary>
        <para> Appends the string representation of a specified 64-bit signed integer to the end of this
      instance.
      </para>
      </summary>
      <param name="value">The integer to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Single)">
      <summary>
        <para> Appends the string representation of a specified single-precision floating-point number to the
      end of this instance.
      </para>
      </summary>
      <param name="value">The number to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Double)">
      <summary>
        <para> Appends the string representation of a specified double-precision floating-point number to the
      end of this instance.
      </para>
      </summary>
      <param name="value">The number to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Decimal)">
      <summary>
        <para> Appends the string representation of a specified decimal number to the end of this instance.
      </para>
      </summary>
      <param name="value">The number to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt16)">
      <summary>
        <para> Appends the string representation of a specified 16-bit unsigned integer to the end of this
      instance.
      </para>
      </summary>
      <param name="value">The integer to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt32)">
      <summary>
        <para> Appends the string representation of a specified 32-bit unsigned integer to the end of this
      instance.
      </para>
      </summary>
      <param name="value">The integer to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt64)">
      <summary>
        <para> Appends the string representation of a specified 64-bit unsigned integer to the end of this
      instance.
      </para>
      </summary>
      <param name="value">The integer to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Object)">
      <summary>
        <para> Appends the string representation of a specified object to the end of this instance.
      </para>
      </summary>
      <param name="value">The object to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[])">
      <summary>
        <para> Appends the string representation of the Unicode characters in a specified array to the end of
      this instance.
      </para>
      </summary>
      <param name="value">A character array to append. </param>
      <returns>
        <para>A reference to this instance after the append operation has occurred.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String)">
      <summary>
        <para> Inserts a string into this instance at the specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The string to insert. </param>
      <returns>
        <para> A reference to this instance after the insert operation has occurred.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)">
      <summary>
        <para> Inserts the string representation of a Boolean value into
      this instance at the specified character
      position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)">
      <summary>
        <para> Inserts the string representation of a specified 8-bit
      signed integer into this instance at the
      specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)">
      <summary>
        <para> Inserts the string representation of a specified 8-bit
      unsigned integer into this instance at the
      specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)">
      <summary>
        <para> Inserts the string representation of a specified 16-bit
      signed integer into this instance at
      the specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char)">
      <summary>
        <para> Inserts the string representation of a specified Unicode
      character into this instance at the specified character
      position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])">
      <summary>
        <para> Inserts the string representation of a specified array of
      Unicode characters into this instance at the specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The character array to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>
        <para> Inserts the string representation of a specified subarray
      of Unicode characters into this instance
      at the specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">A character array. </param>
      <param name="startIndex">The starting index within <paramref name="value" />. </param>
      <param name="charCount">The number of characters to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)">
      <summary>
        <para> Inserts the string representation of a specified 32-bit
      signed integer into this instance at the
      specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)">
      <summary>
        <para> Inserts the string representation of a 64-bit signed
      integer into this instance at the
      specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para> A reference to this instance after the insert operation has occurred.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Single)">
      <summary>
        <para> Inserts the string representation of a single-precision floating point number into
      this instance
      at the specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Double)">
      <summary>
        <para> Inserts the string representation of a double-precision floating-point number into
      this instance
      at the specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)">
      <summary>
        <para> Inserts the string representation of a decimal number
      into this instance
      at the specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)">
      <summary>
        <para> Inserts the string representation of a 16-bit unsigned
      integer into this instance at the
      specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)">
      <summary>
        <para> Inserts the string representation of a 32-bit unsigned
      integer into this instance at the
      specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)">
      <summary>
        <para> Inserts the string representation of a 64-bit unsigned
      integer into this instance at the
      specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The value to insert. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Object)">
      <summary>
        <para> Inserts the string representation of an object into this
      instance at the specified character position.
      </para>
      </summary>
      <param name="index">The position at which to insert. </param>
      <param name="value">The object to insert or <see langword="null" />. </param>
      <returns>
        <para>A reference to this instance after the insert operation has occurred. </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)">
      <summary>
        <para>Appends a formatted string, which contains zero or more format
      specifications, to this instance. Each format specification is replaced by the
      string representation of a corresponding object argument.</para>
      </summary>
      <param name="format">A string containing zero or more format specifications.</param>
      <param name="arg0">An object to format.</param>
      <returns>
        <para>A reference to this instance with <paramref name="format" /> appended. Any format specification in
<paramref name="format" /> is
   replaced by the string representation of the
   corresponding object argument.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)">
      <summary>
        <para>Appends a formatted string, which contains zero or more format specifications, to this instance. Each format specification is replaced by the string representation of a corresponding object argument.</para>
      </summary>
      <param name="format">A string containing zero or more format specifications.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <returns>
        <para>A reference to this instance with <paramref name="format " />appended. Any format specification in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <para>Appends a formatted string, which contains zero or more format specifications, to this instance. Each format specification is replaced by the string representation of a corresponding object argument.</para>
      </summary>
      <param name="format">A string containing zero or more format specifications.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <param name="arg2">The third object to format.</param>
      <returns>
        <para>A reference to this instance with <paramref name="format " />appended. Any format specification in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])">
      <summary>
        <para>Appends a formatted string, which contains zero or more format specifications, to this instance. Each format specification is replaced by the string representation of a corresponding object argument.</para>
      </summary>
      <param name="format">A string containing zero or more format specifications.</param>
      <param name="args">An array of objects to format.</param>
      <returns>
        <para>A reference to this instance with <paramref name="format " />appended. Any format specification in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
        <para>Appends a formatted string, which contains zero or more format specifications, to this instance. Each format specification is replaced by the string representation of a corresponding object argument.</para>
      </summary>
      <param name="format">A string containing zero or more format specifications.</param>
      <param name="args">An array of objects to format.</param>
      <param name="provider">The <see cref="T:System.IFormatProvider" /> used to change the way in which formatting codes are interpreted by a type.</param>
      <returns>
        <para>A reference to this instance with <paramref name="format " />appended. Any format specification in <paramref name="format" /> is replaced by the string representation of the corresponding object argument.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String)">
      <summary>
        <para>Replaces all occurrences of a specified substring in this instance with
      another specified string. </para>
      </summary>
      <param name="oldValue">The string to replace. </param>
      <param name="newValue">The string that replaces <paramref name="oldValue" />. </param>
      <returns>
        <para> A
      reference to this instance with all
      instances of <paramref name="oldValue" /> replaced by <paramref name="newValue" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>
        <para> Replaces all occurrences of a specified string in a
      substring of this instance with another specified string. </para>
      </summary>
      <param name="oldValue">The string to replace or <see langword="null" />. </param>
      <param name="newValue">The string that replaces <paramref name="oldValue" /> or <see langword="null" />. </param>
      <param name="startIndex">The position where the substring begins. </param>
      <param name="count">The length of the substring. </param>
      <returns>
        <para> A
      reference to this instance with all
      instances of <paramref name="oldValue" /> replaced by <paramref name="newValue" /> in the range from <paramref name="startIndex" /> to <paramref name="startIndex" /> +
   <paramref name="count" /> - 1.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" sb">An object to compare with this instance or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if this instance and <paramref name="sb" />
have the same value; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char)">
      <summary>
        <para>Replaces all occurrences of a specified character in
      this instance with
      another specified character. </para>
      </summary>
      <param name="oldChar">The character to replace. </param>
      <param name="newChar">The character that replaces <paramref name="oldChar" />. </param>
      <returns>
        <para> A reference to this instance with <paramref name="oldChar" /> replaced by <paramref name="newChar." /></para>
      </returns>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)">
      <summary>
        <para>Replaces all occurrences of a specified character in a
      substring of this instance with another specified character. </para>
      </summary>
      <param name="oldChar">The character to replace. </param>
      <param name="newChar">The character that replaces <paramref name="oldChar" />. </param>
      <param name="startIndex">The position where the substring begins. </param>
      <param name="count">The length of the substring. </param>
      <returns>
        <para> A reference to this instance with <paramref name="oldChar" /> replaced by <paramref name="newChar" />
in the range <paramref name="startIndex" /> + <paramref name="count" /> -1.</para>
      </returns>
    </member>
    <member name="P:System.Text.StringBuilder.Capacity">
      <summary>
        <para> Gets or sets the maximum number of characters that can be 
      contained in the memory allocated by the current instance.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.StringBuilder.MaxCapacity">
      <summary>
        <para> Gets the maximum capacity of this instance.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.StringBuilder.Length">
      <summary>
        <para> Gets or sets the length of this instance.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.StringBuilder.Chars(System.Int32)">
      <summary>
        <para> Gets or sets the character at the specified character position in this instance.
      </para>
      </summary>
      <param name="index">The position of the character. </param>
    </member>
    <member name="T:System.Exception">
      <summary>
        <para> Represents errors that occur during application execution.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.ISerializable">
      <summary>
        <para>Allows an object to control its own serialization and deserialization.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" />
with the data needed to serialize the target object.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
    </member>
    <member name="M:System.Exception.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Exception" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Exception.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Exception" />
class with a specified error message.</para>
      </summary>
      <param name="message"> The message that describes the error.</param>
    </member>
    <member name="M:System.Exception.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Exception" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Exception" /> class with
   serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Exception.GetBaseException">
      <summary>
        <para> When overridden in a derived class, returns the <see cref="T:System.Exception" /> that is the root cause of one or more subsequent exceptions.</para>
      </summary>
      <returns>
        <para>The first exception thrown in a chain of exceptions. If
      the <see cref="P:System.Exception.InnerException" /> property of the
      current exception is a null reference (<see langword="Nothing" /> in Visual
      Basic), this property returns the current exception.</para>
      </returns>
    </member>
    <member name="M:System.Exception.ToString">
      <summary>
        <para> Creates and returns a string
      representation of the current
      exception.</para>
      </summary>
      <returns>
        <para>A string
      representation of the current exception.</para>
      </returns>
    </member>
    <member name="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
with information about the exception.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="P:System.Exception.Message">
      <summary>
        <para> Gets a message that describes the current exception.</para>
      </summary>
    </member>
    <member name="P:System.Exception.InnerException">
      <summary>
        <para> Gets the <see cref="T:System.Exception" /> instance that caused the current exception.</para>
      </summary>
    </member>
    <member name="P:System.Exception.TargetSite">
      <summary>
        <para> Gets the method that throws
      the current exception.</para>
      </summary>
    </member>
    <member name="P:System.Exception.StackTrace">
      <summary>
        <para> Gets a string representation of the frames on the call stack at the time the
      current exception was thrown.</para>
      </summary>
    </member>
    <member name="P:System.Exception.HelpLink">
      <summary>
        <para>Gets or sets a link to the help file associated with this
      exception.</para>
      </summary>
    </member>
    <member name="P:System.Exception.Source">
      <summary>
        <para> Gets or sets the name
      of the application or the object that causes the error.</para>
      </summary>
    </member>
    <member name="P:System.Exception.HResult">
      <summary>
        <para>Gets or sets HRESULT, a coded numerical value
      that is assigned to a specific exception.</para>
      </summary>
    </member>
    <member name="T:System.DateTime">
      <summary>
        <para>Represents an instant in time, typically expressed as a date and time of day.</para>
      </summary>
    </member>
    <member name="T:System.ValueType">
      <summary>
        <para>Provides the base class for value types.</para>
      </summary>
    </member>
    <member name="M:System.ValueType.Equals(System.Object)">
      <summary>
        <para>Indicates whether this instance and a specified object are equal.</para>
      </summary>
      <param name=" obj">Another object to compare to.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and
 represent the same value; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ValueType.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer that is the hash code for this instance.</para>
      </returns>
    </member>
    <member name="M:System.ValueType.ToString">
      <summary>
        <para>Returns the fully qualified type name of this instance.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" />
containing a fully qualified type name.</para>
      </returns>
    </member>
    <member name="T:System.IFormattable">
      <summary>
        <para>Provides functionality to format the value of an object into a string representation.</para>
      </summary>
    </member>
    <member name="M:System.IFormattable.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Formats the value of the current instance using the specified format.</para>
      </summary>
      <param name="format">
        <para>The <see cref="T:System.String" /> specifying the format to use.</para>
        <para> -or-</para>
        <para>
          <see langword="null" /> to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</para>
      </param>
      <param name="formatProvider">
        <para>The <see cref="T:System.IFormatProvider" /> to use to format the value.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to obtain the numeric format information from the current locale setting of the operating system.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</para>
      </returns>
    </member>
    <member name="F:System.DateTime.MinValue">
      <summary>
        <para>Represents the smallest possible value of <see cref="T:System.DateTime" />. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.DateTime.MaxValue">
      <summary>
        <para>Represents the largest possible value of <see cref="T:System.DateTime" />. This field is
   read-only.</para>
      </summary>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks.</para>
      </summary>
      <param name="ticks">A date and time expressed in 100-nanosecond units.</param>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day.</para>
      </summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day for the
   specified <see cref="T:System.Globalization.Calendar" />
   .</para>
      </summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="calendar">The <see cref="T:System.Globalization.Calendar" /> that applies to this <see cref="T:System.DateTime" />.</param>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the
   specified year, month, day, hour, minute, and second.</para>
      </summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12)</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour,
   minute, and second for the specified <see cref="T:System.Globalization.Calendar" />
   .</para>
      </summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="calendar">The <see cref="T:System.Globalization.Calendar" /> that applies to this <see cref="T:System.DateTime" />.</param>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the
   specified year, month, day, hour, minute, second, and millisecond.</para>
      </summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds.</param>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour,
   minute, second, and millisecond for the specified <see cref="T:System.Globalization.Calendar" />
   .</para>
      </summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).</param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds.</param>
      <param name="calendar">The <see cref="T:System.Globalization.Calendar" /> that applies to this <see cref="T:System.DateTime" />.</param>
    </member>
    <member name="M:System.DateTime.Add(System.TimeSpan)">
      <summary>
        <para> Adds the value of the specified <see cref="T:System.TimeSpan" />
to the value of this instance.</para>
      </summary>
      <param name="value">A <see cref="T:System.TimeSpan" /> that contains the interval to add.</param>
      <returns>
        <para> A <see cref="T:System.DateTime" /> whose value is
   the sum of the date and time represented by this instance and the time
   interval represented by <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.AddDays(System.Double)">
      <summary>
        <para>Adds the specified number of days to the value of this instance.</para>
      </summary>
      <param name="value">A number of whole and fractional days. The <paramref name="value" /> parameter can be negative or positive.</param>
      <returns>
        <para> A <see cref="T:System.DateTime" /> whose value is the sum of the date and time
   represented by this instance and the number of days represented by
<paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.AddHours(System.Double)">
      <summary>
        <para>Adds the specified number of hours to the value of this instance.</para>
      </summary>
      <param name=" value">A number of whole and fractional hours. The <paramref name="value" /> parameter can be negative or positive.</param>
      <returns>
        <para> A <see cref="T:System.DateTime" /> whose value is the sum of the date and time
   represented by this instance and the number of hours represented by <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.AddMilliseconds(System.Double)">
      <summary>
        <para>Adds the specified number of milliseconds to the value of this instance.</para>
      </summary>
      <param name=" value">A number of whole and fractional milliseconds. The <paramref name="value" /> parameter can be negative or positive.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> whose value is the sum of the date and time
   represented by this instance and the number of milliseconds represented by <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.AddMinutes(System.Double)">
      <summary>
        <para>Adds the specified number of minutes to the value of this instance.</para>
      </summary>
      <param name=" value">A number of whole and fractional minutes. The <paramref name="value" /> parameter can be negative or positive.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> whose value is the sum of the date and time
   represented by this instance and the number of minutes represented by <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.AddMonths(System.Int32)">
      <summary>
        <para>Adds the specified number of months to the value of this instance.</para>
      </summary>
      <param name=" months">A number of months. The <paramref name="months" /> parameter can be negative or positive.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> whose value is the
   sum of the date and time represented by this instance and <paramref name="months" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.AddSeconds(System.Double)">
      <summary>
        <para>Adds the specified number of seconds to the value of this instance.</para>
      </summary>
      <param name=" value">A number of whole and fractional seconds. The <paramref name="value" /> parameter can be negative or positive.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> whose value is the sum of the date and time
   represented by this instance and the number of seconds represented by <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.AddTicks(System.Int64)">
      <summary>
        <para> Adds the specified number of ticks to the value of this
      instance.</para>
      </summary>
      <param name="value">A number of 100-nanosecond ticks. The <paramref name="value" /> parameter can be positive or negative.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> whose value is the sum of the date and time
   represented by this instance and the time represented by <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.AddYears(System.Int32)">
      <summary>
        <para>Adds the specified number of years to the value of this instance.</para>
      </summary>
      <param name=" value">A number of years. The <paramref name="value" /> parameter can be negative or positive.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> whose value is the sum of the date and time
   represented by this instance and the number of years represented by
<paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.Compare(System.DateTime,System.DateTime)">
      <summary>
        <para>Compares two instances of <see cref="T:System.DateTime" /> and returns an
   indication of their relative values.</para>
      </summary>
      <param name="t1">The first <see cref="T:System.DateTime" />.</param>
      <param name="t2">The second <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>A signed number indicating the relative values of
   <paramref name="t1" /> and <paramref name="t2" />.</para>
        <list type="table">
          <listheader>
            <term>Value Type</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less than
            zero</term>
            <description>
              <paramref name="t1" /> is less than <paramref name="t2" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <paramref name="t1" /> equals <paramref name="t2" />.</description>
          </item>
          <item>
            <term> Greater than
      zero</term>
            <description>
              <paramref name="t1" /> is greater than
<paramref name="t2" />
.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.DateTime.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
      their relative values.</para>
      </summary>
      <param name=" value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
   <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
         <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
         <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>This instance is greater than
         <paramref name="value" />, or <paramref name="value" /> is
         <see langword="null" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
      <summary>
        <para> Returns the number of days in the specified month
      of the specified year.</para>
      </summary>
      <param name="year">The year.</param>
      <param name="month">The month (a number ranging from 1 to 12).</param>
      <returns>
        <para>The number of days in <paramref name="month" />
for the specified <paramref name="year" />.</para>
        <para>For example, if <paramref name="month" /> equals 2 for
February, the return value is 28 or 29 depending upon whether <paramref name="year" /> is a
leap year.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" value">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.DateTime" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime,System.DateTime)">
      <summary>
        <para>Returns a value indicating whether two instances of
   <see cref="T:System.DateTime" /> are equal.</para>
      </summary>
      <param name="t1">The first <see cref="T:System.DateTime" />.</param>
      <param name="t2">The second <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the two
<see cref="T:System.DateTime" /> values are
   equal; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.FromFileTime(System.Int64)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> equivalent
   to the specified operating system file timestamp.</para>
      </summary>
      <param name="fileTime">A Windows file time.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> value representing the date
   and time of <paramref name="fileTime" />, adjusted to local time.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.FromOADate(System.Double)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" />
equivalent to the specified OLE Automation Date.</para>
      </summary>
      <param name="d">An OLE Automation Date value.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> that represents
   the same date and time as <paramref name="d" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed
       integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.IsLeapYear(System.Int32)">
      <summary>
        <para>Returns an indication whether the specified year is a leap year.</para>
      </summary>
      <param name="year">A 4-digit year.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="year &#xD;&#xA; " /> is a leap year;
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.Parse(System.String)">
      <summary>
        <para>Converts the specified string representation of a date and time to
      its <see cref="T:System.DateTime" /> equivalent.</para>
      </summary>
      <param name="s">A string containinga date and time to convert.</param>
      <returns>
        <para> A <see cref="T:System.DateTime" />
equivalent to the date and time contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the specified string representation of a date and time to
      its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format
      information.</para>
      </summary>
      <param name="s">A string containinga date and time to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific format information about <paramref name="s" />.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> equivalent to the date and time contained in <paramref name="s" /> as
   specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>
        <para>Converts the specified string representation of a date and time to
      its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting
      style.</para>
      </summary>
      <param name="s">A string containinga date and time to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name=" styles">The combination of one or more <see cref="T:System.Globalization.DateTimeStyles" /> constants that indicate the permitted format of <paramref name="s" />.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> equivalent to the date and time contained in <paramref name="s" /> as
   specified by <paramref name="provider" /> and <paramref name="styles" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the specified string representation of a date and time to
      its <see cref="T:System.DateTime" /> equivalent using the
      specified format and culture-specific format information. The format of the
      string representation must match the specified format
      exactly.</para>
      </summary>
      <param name="s">A string containing a date and time to convert. </param>
      <param name="format">The expected format of <paramref name="s" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific format information about <paramref name="s" />. </param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> equivalent to the date and time contained in <paramref name="s" /> as
   specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>
        <para>Converts the specified string representation of a date and time to
      its <see cref="T:System.DateTime" /> equivalent using the
      specified format, culture-specific format information, and style. The format of
      the string representation must match the
      specified format exactly.</para>
      </summary>
      <param name="s">A string containing a date and time to convert. </param>
      <param name="format">The expected format of <paramref name="s " />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="style">
        <para>The combination of one or more <see cref="T:System.Globalization.DateTimeStyles" />constants that indicate the permitted format of <paramref name="s" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> equivalent to the date and time contained in <paramref name="s" /> as
   specified by <paramref name="format" />, <paramref name="provider" />, and <paramref name="style" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>
        <para>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the
   specified array of formats, culture-specific format information, and style. The
   format of the string representation must match at
   least one of the specified formats exactly.</para>
      </summary>
      <param name="s">A string containing one or more dates and times to convert. </param>
      <param name="formats">An array of expected formats of <paramref name="s " />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific format information about <paramref name="s" />. </param>
      <param name="style">
        <para>The combination of one or more <see cref="T:System.Globalization.DateTimeStyles" />constants that indicate the permitted format of <paramref name="s" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> equivalent to the date and time contained in <paramref name="s" /> as
   specified by <paramref name="formats" />, <paramref name="provider" />, and <paramref name="style" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.Subtract(System.DateTime)">
      <summary>
        <para> Subtracts the specified date
      and time from this instance.</para>
      </summary>
      <param name="value">A instance of <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> interval equal to
   the date and time represented by this instance minus the date and time
   represented by <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.Subtract(System.TimeSpan)">
      <summary>
        <para>Subtracts the specified duration from this instance.</para>
      </summary>
      <param name="value">An instance of <see cref="T:System.TimeSpan" />.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> equal to the date
   and time represented by this instance minus the time interval represented
   by <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToOADate">
      <summary>
        <para> Converts the
      value of this instance to the equivalent OLE Automation date.</para>
      </summary>
      <returns>
        <para>A double-precision floating-point number that
      contains an OLE Automation date equivalent to
      the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToFileTime">
      <summary>
        <para> Converts the value of this instance
      to the format of the local system file time.
      </para>
      </summary>
      <returns>
        <para> The value of this <see cref="T:System.DateTime" />
in the format
of the local system file time.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToLocalTime">
      <summary>
        <para> Converts the current coordinated universal time (UTC) to local time.
      </para>
      </summary>
      <returns>
        <para>The <see cref="T:System.DateTime" />
equivalent to the current UTC time,
adjusted to the local time zone and daylight saving time.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.DateTime.MaxValue" /> if the
current UTC time is too large to be represented as a <see cref="T:System.DateTime" />.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.DateTime.MinValue" /> if the
current UTC time is too small to be represented as a <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToLongDateString">
      <summary>
        <para>Converts the value of this instance to its equivalent
      long date string representation.</para>
      </summary>
      <returns>
        <para>A string
      containing
      the name of
      the day of the week, the name of the month, the numeric day of the
      month, and the year equivalent to the date value of this
      instance.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToLongTimeString">
      <summary>
        <para>Converts the value of this instance to its equivalent
      long time string representation.</para>
      </summary>
      <returns>
        <para>A string containing the name of the day of the week, the
      name of the month, the numeric day of the hours, minutes, and seconds
      equivalent to the time value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToShortDateString">
      <summary>
        <para> Converts the value of this instance to its equivalent 
 short date string representation.</para>
      </summary>
      <returns>
        <para>A string 
 containing the numeric month, the numeric day of the
 month, and the year equivalent to the date value of this
 instance.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToShortTimeString">
      <summary>
        <para>Converts the value of this instance to its equivalent 
 short time string representation.</para>
      </summary>
      <returns>
        <para>A string containing the name of the day of the week, the
 name of the month, the numeric day of the hours, minutes, and seconds
 equivalent to the time value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToString">
      <summary>
        <para>Converts the value of this instance to its equivalent string.</para>
      </summary>
      <returns>
        <para>A string
      representation of value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToString(System.String)">
      <summary>
        <para>Converts the value of this instance to its equivalent
      string representation using
      the specified format.</para>
      </summary>
      <param name="format">A format string.</param>
      <returns>
        <para>A string
      representation of value of this instance as specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the value of this instance to its equivalent
      string representation using the specified
      culture-specific format information.</para>
      </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>A string
      representation of value of this instance as specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the value of this instance to its equivalent
      string representation using the specified format and
      culture-specific format information.</para>
      </summary>
      <param name="format">A format string.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>A string
      representation of value of this instance as specified by <paramref name="format" /> and
   <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.ToUniversalTime">
      <summary>
        <para> Converts the current local time to coordinated universal time (UTC).
      </para>
      </summary>
      <returns>
        <para>The UTC <see cref="T:System.DateTime" /> equivalent to the current local
   time.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.DateTime.MaxValue" /> if the
current local time is too large to be represented as a <see cref="T:System.DateTime" />.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.DateTime.MinValue" /> if the
current local time is too small to be represented as a <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)">
      <summary>
        <para> Adds a specified time interval to a specified date and
      time, yielding a new date and time.
      </para>
      </summary>
      <param name="d">A <see cref="T:System.DateTime" />. </param>
      <param name="t">A <see cref="T:System.TimeSpan" />. </param>
      <returns>
        <para> A <see cref="T:System.DateTime" /> that
   is the sum of the values of
<paramref name="d" /> and <paramref name="t" />.
   </para>
      </returns>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)">
      <summary>
        <para> Subtracts a specified time interval from a specified
      date and time, yielding a new date and time.
      </para>
      </summary>
      <param name="d">A <see cref="T:System.DateTime" />. </param>
      <param name="t">A <see cref="T:System.TimeSpan" />. </param>
      <returns>
        <para> A <see cref="T:System.DateTime" /> whose value is the value of
<paramref name="d" /> minus the value of <paramref name="t" />
.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)">
      <summary>
        <para> Subtracts a specified date and time from another
      specified date and
      time, yielding a time interval.</para>
      </summary>
      <param name="d1">A <see cref="T:System.DateTime" /> (the minuend). </param>
      <param name="d2">A <see cref="T:System.DateTime" /> (the subtrahend). </param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" />
that is the time interval between <paramref name="d1" /> and <paramref name="d2" />; that is,
<paramref name="d1" /> minus <paramref name="d2" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)">
      <summary>
        <para> Determines whether two specified instances of <see cref="T:System.DateTime" />
are equal.</para>
      </summary>
      <param name="d1">A <see cref="T:System.DateTime" />. </param>
      <param name="d2">A <see cref="T:System.DateTime" />. </param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="d1" /> and <paramref name="d2" /> represent
   the same date and time; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)">
      <summary>
        <para> Determines whether two specified instances of <see cref="T:System.DateTime" />
are not equal.</para>
      </summary>
      <param name="d1">A <see cref="T:System.DateTime" />. </param>
      <param name="d2">A <see cref="T:System.DateTime" />. </param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="d1" /> and <paramref name="d2" /> do not represent
   the same date and time; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)">
      <summary>
        <para> Determines whether one specified <see cref="T:System.DateTime" /> is less than another specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="t1">A <see cref="T:System.DateTime" />.</param>
      <param name="t2">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="t1" /> is less than <paramref name="t2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)">
      <summary>
        <para> Determines whether one specified <see cref="T:System.DateTime" /> is less than or equal to another specified
<see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="t1">A <see cref="T:System.DateTime" />.</param>
      <param name="t2">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="t1" /> is less than or equal to <paramref name="t2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)">
      <summary>
        <para> Determines whether one specified <see cref="T:System.DateTime" /> is greater than another specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="t1">
        <para>A <see cref="T:System.DateTime" />. </para>
      </param>
      <param name="t2">
        <para>A <see cref="T:System.DateTime" />.</para>
      </param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="t1" /> is greater than <paramref name="t2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)">
      <summary>
        <para> Determines whether one specified <see cref="T:System.DateTime" /> is greater than or equal to another specified
<see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="t1">
        <para>A <see cref="T:System.DateTime" />. </para>
      </param>
      <param name="t2">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="t1" /> is greater than or equal to <paramref name="t2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats">
      <summary>
        <para>Converts the value of this instance to all the string
      representations supported by the standard <see cref="T:System.DateTime" />
      format specifiers.</para>
      </summary>
      <returns>
        <para> A string array where each element is the representation of the
      value of this instance formatted with one of the standard <see cref="T:System.DateTime" />
      formatting specifiers.
      </para>
      </returns>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)">
      <summary>
        <para>Converts the value of this instance to all the string
      representations supported by the standard <see cref="T:System.DateTime" /> format specifiers and the specified culture-specific formatting information.</para>
      </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance.</param>
      <returns>
        <para> A string array where each element is the representation of the
      value of this instance formatted with one of the standard <see cref="T:System.DateTime" />
      formatting specifiers.
      </para>
      </returns>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char)">
      <summary>
        <para>Converts the value of this instance to all the string
      representations supported by the specified standard <see cref="T:System.DateTime" />
      format specifier.</para>
      </summary>
      <param name="format">A Unicode character containing a format specifier.</param>
      <returns>
        <para> A string array
      where each element is the representation of the value of this instance formatted
      with the <paramref name="format" />
      standard <see cref="T:System.DateTime" />
      formatting specifier.
      </para>
      </returns>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)">
      <summary>
        <para>Converts the value of this instance to all the string
      representations supported by the specified standard <see cref="T:System.DateTime" />
      
      format specifier and culture-specific formatting information.</para>
      </summary>
      <param name=" format">A Unicode character containing a format specifier.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance.</param>
      <returns>
        <para> A string array where each element is the representation of the
      value of this instance formatted with one of the standard <see cref="T:System.DateTime" />
      formatting specifiers.
      </para>
      </returns>
    </member>
    <member name="M:System.DateTime.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.DateTime" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.DateTime" qualify="true" />.</para>
      </returns>
    </member>
    <member name="P:System.DateTime.Date">
      <summary>
        <para>Gets the date component of this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Day">
      <summary>
        <para>Gets the day of the month represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.DayOfWeek">
      <summary>
        <para>Gets the day of the week represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.DayOfYear">
      <summary>
        <para>Gets the day of the year represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Hour">
      <summary>
        <para> Gets the hour component of the date represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Millisecond">
      <summary>
        <para>Gets the milliseconds component of the date represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Minute">
      <summary>
        <para>Gets the minute component of the date represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Month">
      <summary>
        <para>Gets the month component of the date represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Now">
      <summary>
        <para>Gets a <see cref="T:System.DateTime" />
that is the current local date and time on this computer.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.UtcNow">
      <summary>
        <para>Gets a <see cref="T:System.DateTime" />
that is the
current local date and time
on this computer
expressed as the coordinated
universal time (UTC).</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Second">
      <summary>
        <para>Gets the seconds component of the date represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Ticks">
      <summary>
        <para>Gets the number of ticks that represent the date and time of this
      instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.TimeOfDay">
      <summary>
        <para>Gets
       the time of day for this instance.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Today">
      <summary>
        <para>Gets
      the current date.</para>
      </summary>
    </member>
    <member name="P:System.DateTime.Year">
      <summary>
        <para>Gets the year component of the date represented by this instance.</para>
      </summary>
    </member>
    <member name="T:System.SystemException">
      <summary>
        <para>Defines the base class for predefined exceptions in
      the <see cref="N:System" /> namespace.</para>
      </summary>
    </member>
    <member name="M:System.SystemException.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.SystemException" /> class.
</summary>
    </member>
    <member name="M:System.SystemException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.SystemException" /> class with a specified error message.</para>
      </summary>
      <param name="message"> The message that describes the error.</param>
    </member>
    <member name="M:System.SystemException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.SystemException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.SystemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.SystemException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.OutOfMemoryException">
      <summary>
        <para>The exception that is thrown
      when there is not enough memory to continue the execution of a program.</para>
      </summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor">
      <summary>
   Initializes a new instance of the
<see cref="T:System.OutOfMemoryException" /> class.
</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.OutOfMemoryException" /> class with
      a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.OutOfMemoryException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.StackOverflowException">
      <summary>
        <para> The exception that is thrown when the execution stack overflows by having too many pending method calls. This class cannot
      be inherited.</para>
      </summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.StackOverflowException" /> class, setting 
   the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied
   message that describes the error, such as "The requested operation caused a
   stack overflow." This message takes into account the current system culture.</para>
      </summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.StackOverflowException" /> class with
   a specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.StackOverflowException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.ExecutionEngineException">
      <summary>
        <para>The exception that is thrown when there is an internal error in the execution engine of the
      common language runtime. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.ExecutionEngineException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ExecutionEngineException" /> 
   class.</para>
      </summary>
    </member>
    <member name="M:System.ExecutionEngineException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ExecutionEngineException" />
   class with a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.ExecutionEngineException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ExecutionEngineException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Delegate">
      <summary>
        <para>Represents a delegate, which is a data structure that refers to a
      static method or to a class instance and an instance method of that class.</para>
      </summary>
    </member>
    <member name="M:System.Delegate.#ctor(System.Object,System.String)">
      <summary>
        <para>Initializes a delegate that invokes the specified instance method on the specified class instance.</para>
      </summary>
      <param name="target">The class instance on which the delegate invokes <paramref name="method" />.</param>
      <param name="method">The name of the instance method that the delegate represents.</param>
    </member>
    <member name="M:System.Delegate.#ctor(System.Type,System.String)">
      <summary>
        <para>Initializes a delegate that invokes the specified static method from the specified class.</para>
      </summary>
      <param name="target">The <see cref="T:System.Type" /> representing the class that defines <paramref name="method" />.</param>
      <param name="method">The name of the static method that the delegate represents.</param>
    </member>
    <member name="M:System.Delegate.DynamicInvoke(System.Object[])">
      <summary>
        <para>Dynamically invokes (late-bound) the method represented by the current delegate.</para>
      </summary>
      <param name="args">
        <para>An array of objects that are the arguments to pass to the method represented by the current delegate.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, if the method represented by the current delegate does not require arguments.</para>
      </param>
      <returns>
        <para>The object returned by the method represented by the delegate.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.DynamicInvokeImpl(System.Object[])">
      <summary>
        <para>Dynamically invokes (late-bound) the method represented by the current delegate.</para>
      </summary>
      <param name=" args">
        <para>An array of objects that are the arguments to pass to the method represented by the current delegate.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, if the method represented by the current delegate does not require arguments.</para>
      </param>
      <returns>
        <para>The object returned by the method represented by the delegate.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.Equals(System.Object)">
      <summary>
        <para>Determines whether the specified object and the current singlecast (noncombinable) delegate share the same target, method, and invocation list.</para>
      </summary>
      <param name="obj">The object to compare with the current singlecast (noncombinable) delegate.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> and the current delegate have the same target, method, and invocation list;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.GetHashCode">
      <summary>
        <para>Returns a hash code for the delegate.</para>
      </summary>
      <returns>
        <para>A hash code for the delegate.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
      <summary>
        <para>Concatenates the invocation lists of two multicast (combinable) delegates.</para>
      </summary>
      <param name="a">The multicast (combinable) delegate whose invocation list comes first.</param>
      <param name="b">The multicast (combinable) delegate whose invocation list comes last.</param>
      <returns>
        <para>A new multicast (combinable) delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order.</para>
        <para>-or-</para>
        <para>
          <paramref name="a" />, if <paramref name="b" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="b" />, if <paramref name="a" /> is <see langword="null" />.</para>
        <para> -or-</para>
        <para>
          <see langword="null" />, if both <paramref name="a" /> and <paramref name="b" /> are <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate[])">
      <summary>
        <para>Concatenates the invocation lists of an array of multicast (combinable) delegates.</para>
      </summary>
      <param name="delegates">The array of multicast (combinable) delegates to combine.</param>
      <returns>
        <para>A new multicast (combinable) delegate with an invocation list that concatenates the invocation lists of the delegates in the <paramref name="delegates" /> array.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, if <paramref name="delegates" /> is <see langword="null" />, if <paramref name="delegates" /> contains zero elements, or if every entry in <paramref name="delegates" /> is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.GetInvocationList">
      <summary>
        <para>Returns the invocation list of the delegate.</para>
      </summary>
      <returns>
        <para>An array of singlecast (noncombinable) delegates representing the invocation list of the current delegate.
 If the current delegate is singlecast (noncombinable), the array contains only one element, which is a reference to the current delegate.
 If the current delegate is multicast (combinable), the array contains one or more elements.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.GetMethodImpl">
      <summary>
        <para> Gets the static method represented by the current delegate.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> describing the static method represented by the current delegate.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
      <summary>
        <para>Removes the invocation list of a delegate from the invocation list of another delegate.</para>
      </summary>
      <param name="source">The delegate from which to remove the invocation list of <paramref name="value" />.</param>
      <param name="value">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />.</param>
      <returns>
        <para>A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the invocation list of <paramref name="value" />,
 if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" />, if <paramref name="value" /> is <see langword="null" />, or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" />, or if <paramref name="source" /> is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.CombineImpl(System.Delegate)">
      <summary>
        <para>Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</para>
      </summary>
      <param name="d">The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</param>
      <returns>
        <para>A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <paramref name="d" />.</para>
        <para>-or-</para>
        <para>The current multicast (combinable) delegate, if <paramref name="d" /> is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.RemoveImpl(System.Delegate)">
      <summary>
        <para>Removes the invocation list of a delegate from the invocation list of another delegate.</para>
      </summary>
      <param name="d">The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</param>
      <returns>
        <para>A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />,
   if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list.</para>
        <para>-or-</para>
        <para>The current delegate, if <paramref name="value" /> is <see langword="null" />, or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.Clone">
      <summary>
        <para>Creates a shallow copy of the delegate.</para>
      </summary>
      <returns>
        <para>A shallow copy of the delegate.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>
        <para>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="target">The class instance on which <paramref name="method" /> is invoked.</param>
      <param name="method">The name of the instance method that the delegate is to represent.</param>
      <returns>
        <para>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)">
      <summary>
        <para>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="target">The class instance on which <paramref name="method" /> is invoked.</param>
      <param name="method">The name of the instance method that the delegate is to represent.</param>
      <param name="ignoreCase">A Boolean indicating whether to ignore the case when comparing the name of the method.</param>
      <returns>
        <para>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)">
      <summary>
        <para>Creates a delegate of the specified type that represents the specified static method of the specified class.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="target">
        <para> The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</para>
      </param>
      <param name="method">The name of the static method that the delegate is to represent.</param>
      <returns>
        <para>A delegate of the specified type that represents the specified static method of the specified class.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)">
      <summary>
        <para>Creates a delegate of the specified type to represent the specified static method.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of delegate to create.</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> describing the static method for which the delegate is to be created.</param>
      <returns>
        <para>A delegate of the specified type to represent the specified static method.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)">
      <summary>
        <para>Determines whether the specified delegates are equal.</para>
      </summary>
      <param name="d1">The first delegate to compare.</param>
      <param name="d2">The second delegate to compare.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)">
      <summary>
        <para>Determines whether the specified delegates are not equal.</para>
      </summary>
      <param name="d1">The first delegate to compare.</param>
      <param name="d2">The second delegate to compare.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize the delegate.</para>
      </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> containing information required to serialize the delegate.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> containing the source and destination of the serialized stream associated with the delegate.</param>
    </member>
    <member name="P:System.Delegate.Method">
      <summary>
        <para> Gets the static method represented by the delegate.</para>
      </summary>
    </member>
    <member name="P:System.Delegate.Target">
      <summary>
        <para>Gets the class instance on which the current delegate invokes the instance method.</para>
      </summary>
    </member>
    <member name="T:System.MulticastDelegate">
      <summary>
        <para> Represents a multicast delegate;
      that is, a delegate that can have more than one element in
      its invocation list.
      </para>
      </summary>
    </member>
    <member name="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MulticastDelegate" /> class.</para>
      </summary>
      <param name="target">The object on which <paramref name="method" /> is defined.</param>
      <param name="method">The name of the method for which a delegate is created.</param>
    </member>
    <member name="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MulticastDelegate" /> class.</para>
      </summary>
      <param name="target">The type of object on which <paramref name="method" /> is defined.</param>
      <param name="method">The name of the static method for which a delegate is created.</param>
    </member>
    <member name="M:System.MulticastDelegate.DynamicInvokeImpl(System.Object[])">
      <summary>
        <para>Processes the full invocation list.</para>
      </summary>
      <param name="args"> The arguments to pass to the encapsulated method.</param>
      <returns>
        <para>An array of type <see cref="T:System.Object" /> that contains the return value of the
   encapsulated method.</para>
      </returns>
    </member>
    <member name="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with all the data
   needed to serialize this instance.</para>
      </summary>
      <param name=" info">An object that holds all the data needed to serialize or deserialize this instance.</param>
      <param name=" context"> (Reserved) The location where serialized data is stored and retrieved. </param>
    </member>
    <member name="M:System.MulticastDelegate.Equals(System.Object)">
      <summary>
        <para>Determines whether this multicast delegate and the specified
      object are equal.</para>
      </summary>
      <param name="obj">The object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> and this instance
   have the same invocation lists; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
      <summary>
        <para>Combines this <see cref="T:System.Delegate" /> with the specified <see cref="T:System.Delegate" /> to form a
   new delegate. </para>
      </summary>
      <param name="follow">The delegate to combine with this delegate.</param>
      <returns>
        <para>A <see cref="T:System.Delegate" /> that is the new 
   root of the <see cref="T:System.MulticastDelegate" />
   invocation list.</para>
      </returns>
    </member>
    <member name="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
      <summary>
        <para>Removes an element from the invocation list of this 
   <see cref="T:System.MulticastDelegate" /> 
   that is equal to the specified delegate. </para>
      </summary>
      <param name="value">The delegate to search for in the invocation list.</param>
      <returns>
        <para>If <paramref name="value" /> is found in the invocation list for
   this instance, then a new <see cref="T:System.Delegate" /> without <paramref name="value" />
   in its invocation list; otherwise, this instance
   with its original invocation list. </para>
      </returns>
    </member>
    <member name="M:System.MulticastDelegate.GetInvocationList">
      <summary>
        <para>Returns the invocation list of this multicast delegate, in
      invocation order.</para>
      </summary>
      <returns>
        <para> An array of delegates whose invocation lists
      collectively match the invocation list of this instance.</para>
      </returns>
    </member>
    <member name="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>
        <para> Determines whether two <see cref="T:System.MulticastDelegate" /> 
objects are equal.
</para>
      </summary>
      <param name="d1">The left operand. </param>
      <param name="d2">The right operand. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" />
and <paramref name="d2" /> have the same
invocation lists; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>
        <para> Determines whether two <see cref="T:System.MulticastDelegate" />
objects are not equal.</para>
      </summary>
      <param name="d1">The left operand. </param>
      <param name="d2">The right operand. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> do not have the same invocation lists; otherwise <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.MulticastDelegate.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="T:System.Enum">
      <summary>
        <para>Provides
      the base class for enumerations.</para>
      </summary>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String)">
      <summary>
        <para>Converts the string representation of the name or numeric
 value of one or more enumerated constants to an equivalent enumerated
 object.</para>
      </summary>
      <param name="enumType">The <see cref="T:System.Type" />of the enumeration. </param>
      <param name=" value">A string containingthe name or value to convert.</param>
      <returns>
        <para> An object of type <paramref name="enumType" /> whose value is
 represented by <paramref name="value" />.
 </para>
      </returns>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
      <summary>
        <para>Converts the string representation of the name or numeric value
 of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive.</para>
      </summary>
      <param name="enumType">The <see cref="T:System.Type" />of the enumeration. </param>
      <param name="value">A string containing the name or value to convert.</param>
      <param name=" ignoreCase">If <see langword="true" />, ignore case; otherwise, regard case.</param>
      <returns>
        <para>An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Enum.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an <see cref="T:System.Enum" /> with the same underlying type and value as this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Enum.GetUnderlyingType(System.Type)">
      <summary>
        <para> Returns the underlying type of the specified enumeration.
      </para>
      </summary>
      <param name="enumType">An enumeration type. </param>
      <returns>
        <para> The underlying <see cref="T:System.Type" /> of <paramref name="enumType" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Enum.GetValues(System.Type)">
      <summary>
        <para> Retrieves an array of the values of the constants in
      a specified enumeration.
      </para>
      </summary>
      <param name="enumType">An enumeration type. </param>
      <returns>
        <para> An <see cref="T:System.Array" /> of the
   values of
   the constants in <paramref name="enumType" />. The elements of the array
   are sorted by the values of the enumeration constants.
   </para>
      </returns>
    </member>
    <member name="M:System.Enum.GetName(System.Type,System.Object)">
      <summary>
        <para> Retrieves the name of the constant in
 the specified enumeration that has the
 specified value.
 </para>
      </summary>
      <param name="enumType">An enumeration. </param>
      <param name="value">The value of a particular enumerated constant in terms of its underlying type. </param>
      <returns>
        <para> A string containing the name of the
 enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />, or
 <see langword="null" /> 
 if no such constant is found.</para>
      </returns>
    </member>
    <member name="M:System.Enum.GetNames(System.Type)">
      <summary>
        <para>Retrieves an array of the names of the constants in a specified enumeration. </para>
      </summary>
      <param name="enumType">An enumeration. </param>
      <returns>
        <para>A string 
 array of the names of the constants in <paramref name="enumType" />. The elements of the array
 are sorted by the values of the enumerated constants. </para>
      </returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Object)">
      <summary>
        <para> Returns an instance of the specified enumeration set to the specified value.
 </para>
      </summary>
      <param name="enumType">An enumeration. </param>
      <param name=" value">The value. </param>
      <returns>
        <para> An enumeration object whose value is
 <paramref name="value" />.
 </para>
      </returns>
    </member>
    <member name="M:System.Enum.IsDefined(System.Type,System.Object)">
      <summary>
        <para> Returns an indication whether a constant with a specified value
      exists in a specified enumeration.
      </para>
      </summary>
      <param name="enumType">An enumeration type. </param>
      <param name=" value">The value or name of a constant in <paramref name="enumType" /> . </param>
      <returns>
        <para>
          <see langword="true" /> if a constant in
<paramref name="enumType" /> has a value equal to 
<paramref name="value" />; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Enum.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of their relative values.</para>
      </summary>
      <param name="target">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this
      instance and <paramref name="target" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less
            than
            zero</term>
            <description>The value of this instance is less than the
            value of <paramref name="target" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>The value of this instance is equal to the value of
         <paramref name="target" />.</description>
          </item>
          <item>
            <term> Greater
            than zero</term>
            <description>
              <para>The value of this instance is greater than the value of
            <paramref name="target" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="target" /> is 
         <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Enum.Format(System.Type,System.Object,System.String)">
      <summary>
        <para> Converts the specified value of a specified enumerated 
 type to its equivalent string
 representation according to the specified format. </para>
      </summary>
      <param name="enumType">The enumeration type of the value to convert. </param>
      <param name=" value">The value to convert. </param>
      <param name=" format">The output format to use. </param>
      <returns>
        <para> A string representation of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Enum.ToString(System.String)">
      <summary>
        <para> Converts the value of this instance to its equivalent 
 string representation using the specified format. </para>
      </summary>
      <param name="format">A format string.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to its equivalent 
 string representation using the specified format
 and format information. </para>
      </summary>
      <param name=" format">A format specification.</param>
      <param name=" provider">(Reserved) An <see cref="T:System.IFormatProvider" /> that supplies format information about this instance.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToString">
      <summary>
        <para> Converts the value of this instance to its equivalent 
 string
 representation. </para>
      </summary>
      <returns>
        <para>The string 
 representation of the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToString(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to 
 its equivalent string representation using the specified
 format information. </para>
      </summary>
      <param name=" provider">(Reserved) An <see cref="T:System.IFormatProvider" /> that supplies format information about this instance.</param>
      <returns>
        <para>The string 
 representation of the name of the value of this instance as
 specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.SByte)">
      <summary>
        <para> Returns an instance of the specified enumeration type set to the specified 8-bit signed integer value.
 </para>
      </summary>
      <param name="enumType">The enumeration for which to create a value. </param>
      <param name=" value">The value to set. </param>
      <returns>
        <para>An instance of the enumeration set to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Int16)">
      <summary>
        <para> Returns an instance of the specified enumeration type set to the specified 16-bit signed integer value.
 </para>
      </summary>
      <param name="enumType">The enumeration for which to create a value. </param>
      <param name=" value">The value to set. </param>
      <returns>
        <para> An instance of the enumeration set to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Int32)">
      <summary>
        <para> Returns an instance of the specified enumeration type set to the specified 32-bit signed integer value.
 </para>
      </summary>
      <param name="enumType">The enumeration for which to create a value. </param>
      <param name=" value">The value to set. </param>
      <returns>
        <para>An instance of the enumeration set to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Byte)">
      <summary>
        <para> Returns an instance of the specified enumeration type set to the specified 8-bit unsigned integer value.
 </para>
      </summary>
      <param name="enumType">The enumeration for which to create a value. </param>
      <param name=" value">The value to set. </param>
      <returns>
        <para>An instance of the enumeration set to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.UInt16)">
      <summary>
        <para> Returns an instance of the specified enumeration type set to the specified 16-bit unsigned integer value.
 </para>
      </summary>
      <param name="enumType">The enumeration for which to create a value. </param>
      <param name=" value">The value to set. </param>
      <returns>
        <para>An instance of the enumeration set to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.UInt32)">
      <summary>
        <para> Returns an instance of the specified enumeration type set to the specified 32-bit unsigned integer value.
 </para>
      </summary>
      <param name="enumType">The enumeration for which to create a value. </param>
      <param name=" value">The value to set. </param>
      <returns>
        <para>An instance of the enumeration set to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Int64)">
      <summary>
        <para> Returns an instance of the specified enumeration type set to the specified 64-bit signed integer value.
 </para>
      </summary>
      <param name="enumType">The enumeration for which to create a value. </param>
      <param name=" value">The value to set. </param>
      <returns>
        <para>An instance of the enumeration set to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.UInt64)">
      <summary>
        <para> Returns an instance of the specified enumeration type set to the specified 64-bit unsigned integer value.
 </para>
      </summary>
      <param name="enumType">The enumeration for which to create a value. </param>
      <param name=" value">The value to set. </param>
      <returns>
        <para>An instance of the enumeration set to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Enum.GetTypeCode">
      <summary>
        <para>Returns the underlying <see cref="T:System.TypeCode" /> for this instance.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.TypeCode" qualify="true" /> for this instance.</para>
      </returns>
    </member>
    <member name="T:System.MemberAccessException">
      <summary>
        <para>The exception that is thrown when an attempt to access a class
      member fails.</para>
      </summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MemberAccessException" />

class.</para>
      </summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class
   with a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MemberAccessException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class with serialized
   data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Activator">
      <summary>
        <para>Contains methods to create types of objects locally or remotely, or obtain
      references to existing remote objects.</para>
      </summary>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
        <para> Creates an instance of the specified type using the constructor
      that best matches the specified parameters.
      </para>
      </summary>
      <param name="type">The type of object to create. </param>
      <param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="type" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name=" binder">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="type" /> constructor. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name=" args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked. </param>
      <param name=" culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="type" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <returns>
        <para> A reference to the newly created object.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>
        <para> Creates an instance of the specified type using the constructor
      that best matches the specified parameters.
      </para>
      </summary>
      <param name="type">The type of object to create. </param>
      <param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="type" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name=" binder">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="type" /> constructor. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name=" args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked. </param>
      <param name=" culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="type" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <param name=" activationAttributes">An array of one or more attributes that can participate in activation.</param>
      <returns>
        <para> A reference to the newly created object.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
      <summary>
        <para> Creates an instance of the specified type using the constructor
      that best matches the specified parameters.
      </para>
      </summary>
      <param name="type">The type of object to create. </param>
      <param name=" args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked. </param>
      <returns>
        <para> A reference to the newly created object.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[],System.Object[])">
      <summary>
        <para> Creates an instance of the specified type using the constructor
      that best matches the specified parameters.
      </para>
      </summary>
      <param name="type">The type of object to create. </param>
      <param name=" args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked. </param>
      <param name=" activationAttributes">An array of one or more attributes that can participate in activation.</param>
      <returns>
        <para> A reference to the newly created object.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type)">
      <summary>
        <para>Creates an instance of the specified type using the constructor that best matches the specified parameter. </para>
      </summary>
      <param name="type">The type of object to create. </param>
      <returns>
        <para> A reference to the newly created object.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String)">
      <summary>
        <para>Creates an instance of the type whose name is specified, using the named assembly and the constructor that best matches the default constructor.</para>
      </summary>
      <param name="assemblyName">The name of the assembly where the type named <paramref name="typeName" /> is sought. If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched. </param>
      <param name=" typeName">The name of the preferred type. </param>
      <returns>
        <para> A handle that must be unwrapped to access the newly created instance.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String,System.Object[])">
      <summary>
        <para>Creates an instance of the type whose name is specified, using the named assembly and the constructor that best matches the default constructor.</para>
      </summary>
      <param name="assemblyName">The name of the assembly where the type named <paramref name="typeName" /> is sought. If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched. </param>
      <param name=" typeName">The name of the preferred type. </param>
      <param name=" activationAttributes">An array of one or more attributes that can participate in activation.</param>
      <returns>
        <para> A handle that must be unwrapped to access the newly created instance.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Boolean)">
      <summary>
        <para>Creates an instance of the specified type using the constructor that best matches the specified parameter. </para>
      </summary>
      <param name="type">The type of object to create. </param>
      <param name=" nonPublic">
        <see langword="true" /> if a matching, parameterless constructor can be public or not public; otherwise, only a public constructor can match.</param>
      <returns>
        <para> A reference to the newly created object.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String)">
      <summary>
        <para> Creates an instance of the type whose
      name is specified, using the named assembly file and default constructor.</para>
      </summary>
      <param name=" assemblyFile">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</param>
      <param name=" typeName">The name of the preferred type. </param>
      <returns>
        <para> A handle that must be unwrapped to access the newly created instance.
      </para>
        <para> -or-
      </para>
        <para>
          <see langword="null" />, if the requested type could not be created.
   </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Object[])">
      <summary>
        <para> Creates an instance of the type whose
      name is specified, using the named assembly file and default constructor.</para>
      </summary>
      <param name=" assemblyFile">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</param>
      <param name=" typeName">The name of the preferred type. </param>
      <param name=" activationAttributes">An array of one or more attributes that can participate in activation.</param>
      <returns>
        <para> A handle that must be unwrapped to access the newly created instance.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <summary>
        <para>Creates an instance of the type whose name is specified, using the named
      assembly and the constructor that best matches the specified parameters.</para>
      </summary>
      <param name="assemblyName">The name of the assembly where the type named <paramref name="typeName" /> is sought. If <paramref name="assemblyName" /> is <see langword="null" />, the executing assembly is searched. </param>
      <param name=" typeName">The name of the preferred type. </param>
      <param name=" ignoreCase">A Boolean that specifies whether the search for <paramref name="typeName" /> is case-sensitive. If <paramref name="ignoreCase" /> is <see langword="true" />, the search is not case-sensitive. </param>
      <param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name=" binder">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="typeName" /> constructor. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name=" args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked. </param>
      <param name=" culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <param name=" activationAttributes">An array of one or more attributes that can participate in activation.</param>
      <param name=" securityInfo">Information used to make security policy decisions and grant code permissions. </param>
      <returns>
        <para> A handle that must be unwrapped to access the newly created instance.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <summary>
        <para>Creates an instance of the type whose name is specified, using the named
      assembly file and the constructor that best matches the specified parameters.</para>
      </summary>
      <param name=" assemblyFile">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought.</param>
      <param name=" typeName">The name of the preferred type. </param>
      <param name=" ignoreCase">A Boolean that specifies whether the search for <paramref name="typeName" /> is case-sensitive. If <paramref name="ignoreCase" /> is <see langword="true" />, the search is not case-sensitive. </param>
      <param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name=" binder">An object that uses <paramref name="bindingAttr" /> and <paramref name="args" /> to seek and identify the <paramref name="typeName" /> constructor. If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</param>
      <param name=" args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or <see langword="null" />, the constructor that takes no parameters (the default constructor) is invoked. </param>
      <param name=" culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <param name=" activationAttributes">An array of one or more attributes that can participate in activation.</param>
      <param name=" securityInfo">Information used to make security policy decisions and grant code permissions. </param>
      <returns>
        <para> A handle that must be unwrapped to access the newly created instance.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.CreateComInstanceFrom(System.String,System.String)">
      <summary>
        <para> Creates an instance of the COM object whose name is specified, using the named assembly file and the constructor that best matches the specified parameters.</para>
      </summary>
      <param name="assemblyName">The name of a file that contains an assembly where the type named <paramref name="typeName" /> is sought. </param>
      <param name="typeName">The name of the preferred type. </param>
      <returns>
        <para>A handle that must be unwrapped to access the newly created instance. </para>
      </returns>
    </member>
    <member name="M:System.Activator.GetObject(System.Type,System.String)">
      <summary>
        <para> Creates a
      proxy for the well-known object indicated by the
      specified type and URL.</para>
      </summary>
      <param name="type">The type of the well-known object to which you want to connect. </param>
      <param name="url">The URL of the well-known object. </param>
      <returns>
        <para> A proxy that points to an endpoint served by the
      requested well-known object.
      </para>
      </returns>
    </member>
    <member name="M:System.Activator.GetObject(System.Type,System.String,System.Object)">
      <summary>
        <para> Creates a proxy for
      the well-known object indicated by the specified type,
      URL, and channel data.</para>
      </summary>
      <param name="type">The type of the well-known object to which you want to connect. </param>
      <param name="url">The URL of the well-known object. </param>
      <param name="state">Channel-specific data or <see langword="null" />. </param>
      <returns>
        <para>A proxy that points to an endpoint served by the requested well-known object. </para>
      </returns>
    </member>
    <member name="T:System.ApplicationException">
      <summary>
        <para>The exception that is thrown when a
      non-fatal application error occurs.</para>
      </summary>
    </member>
    <member name="M:System.ApplicationException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ApplicationException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.ApplicationException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ApplicationException" /> class
      with a specified error message.</para>
      </summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:System.ApplicationException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ApplicationException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.ApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ApplicationException" /> 
class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.ResolveEventArgs">
      <summary>
        <para>Provides data for the <see cref="F:System.AppDomain.TypeResolve" />,
<see cref="F:System.AppDomain.ResourceResolve" />, and <see cref="F:System.AppDomain.AssemblyResolve" /> events.</para>
      </summary>
    </member>
    <member name="T:System.EventArgs">
      <summary>
        <para>
          <see cref="T:System.EventArgs" /> is the base class
   for classes containing event data.</para>
      </summary>
    </member>
    <member name="F:System.EventArgs.Empty">
      <summary>
        <para> Represents an event with no event data.
      </para>
      </summary>
    </member>
    <member name="M:System.EventArgs.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.EventArgs" /> class.
</summary>
    </member>
    <member name="M:System.ResolveEventArgs.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ResolveEventArgs" /> class.</para>
      </summary>
      <param name="name">The name of an item to resolve.</param>
    </member>
    <member name="P:System.ResolveEventArgs.Name">
      <summary>
        <para> Gets the name of the item to resolve.</para>
      </summary>
    </member>
    <member name="T:System.AssemblyLoadEventArgs">
      <summary>
        <para>Provides data for the <see cref="F:System.AppDomain.AssemblyLoad" /> event.</para>
      </summary>
    </member>
    <member name="M:System.AssemblyLoadEventArgs.#ctor(System.Reflection.Assembly)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.AssemblyLoadEventArgs" />
class using the specified <see cref="T:System.Reflection.Assembly" />.</para>
      </summary>
      <param name="loadedAssembly">An instance that represents the currently loaded assembly.</param>
    </member>
    <member name="P:System.AssemblyLoadEventArgs.LoadedAssembly">
      <summary>
        <para>Gets an <see cref="T:System.Reflection.Assembly" /> that represents the currently loaded assembly.</para>
      </summary>
    </member>
    <member name="T:System.ResolveEventHandler">
      <summary>
        <para> Represents the method that handles the
   <see cref="F:System.AppDomain.TypeResolve" />,
   <see cref="F:System.AppDomain.ResourceResolve" />, and <see cref="F:System.AppDomain.AssemblyResolve" /> events of an <see cref="T:System.AppDomain" />.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="args">
        <para>A <see cref="T:System.ResolveEventArgs" /> that contains the event data.</para>
      </param>
    </member>
    <member name="T:System.AssemblyLoadEventHandler">
      <summary>
        <para> Represents the method that handles the <see cref="F:System.AppDomain.AssemblyLoad" />
event of an <see cref="T:System.AppDomain" />.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="args">
        <para>An <see cref="T:System.AssemblyLoadEventArgs" /> that contains the event data.</para>
      </param>
    </member>
    <member name="T:System.AppDomain">
      <summary>
        <para> Represents an application domain, which is an isolated environment
      where applications execute. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="T:System.MarshalByRefObject">
      <summary>
        <para> Enables access to objects across application
      domain boundaries
      in applications that
      support remoting.</para>
      </summary>
    </member>
    <member name="M:System.MarshalByRefObject.GetLifetimeService">
      <summary>
        <para>Retrieves the current lifetime service object that controls the
      lifetime policy for this instance.</para>
      </summary>
      <returns>
        <para> An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> used to control the lifetime policy for this instance.
   </para>
      </returns>
    </member>
    <member name="M:System.MarshalByRefObject.InitializeLifetimeService">
      <summary>
        <para> Obtains a lifetime service object to control the lifetime policy for this instance.</para>
      </summary>
      <returns>
        <para>An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> used to control the
   lifetime policy for this instance. This is the current lifetime service object for
   this instance if one exists; otherwise, a new lifetime service object initialized to the value
   of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" qualify="true" /> property. </para>
      </returns>
    </member>
    <member name="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
      <summary>
        <para>Creates an object that contains all the relevant
      information required to generate a proxy used to communicate with a remote object.</para>
      </summary>
      <param name="requestedType">The <see cref="T:System.Type" /> of the object that the new <see cref="T:System.Runtime.Remoting.ObjRef" /> will reference.</param>
      <returns>
        <para>Information required to generate a proxy.</para>
      </returns>
    </member>
    <member name="T:System._AppDomain">
      <summary>
        <para> Represents an application domain,
      which is an isolated environment where applications execute.</para>
      </summary>
    </member>
    <member name="M:System._AppDomain.ToString">
      <summary>
        <para> Obtains the <see cref="T:System.String" /> representation of this instance.
   </para>
      </summary>
      <returns>
        <para>
      The friendly name of the application domain.
      </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" other">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="other" /> is an instance of <see cref="T:System.AppDomain" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A hash code for this instance.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.GetType">
      <summary>
        <para>Gets the type of the current instance.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Type" />
object.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.InitializeLifetimeService">
      <summary>
        <para>Gives the <see cref="T:System.AppDomain" /> an infinite lifetime by preventing a lease from being created.</para>
      </summary>
      <returns>
        <para> Always <see langword="null" />.
   </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.GetLifetimeService">
      <summary>
        <para>Returns a lifetime service object that controls the lifetime policy for an 
      instance that implements this interface. </para>
      </summary>
      <returns>
        <para>An object to control the lifetime service. This is an object of type 
   <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> for the default lifetime 
      service.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary>
        <para> Defines a dynamic assembly with the specified name and access
      mode.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The access mode for the dynamic assembly.</param>
      <returns>
        <para> Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, and storage
      directory.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</param>
      <returns>
        <para> Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, and
      evidence.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="evidence">The evidence supplied for the dynamic assembly.</param>
      <returns>
        <para> Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, and
      permission requests.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="requiredPermissions">The required permissions request.</param>
      <param name="optionalPermissions">The optional permissions request.</param>
      <param name="refusedPermissions">The refused permissions request.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, storage
      directory, and evidence.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</param>
      <param name="evidence">The evidence supplied for the dynamic assembly.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, storage
      directory, and permission requests.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</param>
      <param name="requiredPermissions">The required permissions request.</param>
      <param name="optionalPermissions">The optional permissions request.</param>
      <param name="refusedPermissions">The refused permissions request.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, evidence,
      and permission requests.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="evidence">The evidence supplied for the dynamic assembly.</param>
      <param name="requiredPermissions">The required permissions request.</param>
      <param name="optionalPermissions">The optional permissions request.</param>
      <param name="refusedPermissions">The refused permissions request.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, storage
      directory, evidence, and permission requests.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</param>
      <param name="evidence">The evidence supplied for the dynamic assembly.</param>
      <param name="requiredPermissions">The required permissions request.</param>
      <param name="optionalPermissions">The optional permissions request.</param>
      <param name="refusedPermissions">The refused permissions request.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
      <summary>
        <para> Defines a dynamic assembly using the specified name,
      access mode, storage directory, evidence, permission requests, and synchronization option.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly. </param>
      <param name="access">The mode in which the dynamic assembly will be accessed. </param>
      <param name="dir">The name of the directory where the dynamic assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory. </param>
      <param name="evidence">The evidence supplied for the dynamic assembly. </param>
      <param name="requiredPermissions">The required permissions request. </param>
      <param name="optionalPermissions">The optional permissions request. </param>
      <param name="refusedPermissions">The refused permissions request. </param>
      <param name="isSynchronized">
        <para>
          <see langword="true" /> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <see langword="false" />.</para>
      </param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.CreateInstance(System.String,System.String)">
      <summary>
        <para> Creates a new instance of the specified type defined in the specified assembly.
      </para>
      </summary>
      <param name="assemblyName">The display name of the assembly. </param>
      <param name="typeName">The fully-qualified name of the requested type. </param>
      <returns>
        <para> An object that is a
      wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found.
      The return value
      needs to be
      unwrapped to access the real object.
      </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.CreateInstanceFrom(System.String,System.String)">
      <summary>
        <para>Creates a new instance of the specified type defined in the specified assembly
      file.</para>
      </summary>
      <param name="assemblyFile">The name of a file that contains an assembly that defines the requested type.</param>
      <param name="typeName">The fully-qualified name of the requested type.</param>
      <returns>
        <para>An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.CreateInstance(System.String,System.String,System.Object[])">
      <summary>
        <para>Creates a new instance of the specified type defined in
      the specified assembly. A parameter specifies an array of activation attributes. </para>
      </summary>
      <param name="assemblyName">The display name of the assembly. </param>
      <param name=" typeName">The fully-qualified name of the requested type. </param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <returns>
        <para>An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
      <summary>
        <para>Creates a new instance of the specified type defined in the specified assembly file.</para>
      </summary>
      <param name=" assemblyFile">The name of a file that contains an assembly that defines the requested type.</param>
      <param name=" typeName">The fully-qualified name of the requested type.</param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <returns>
        <para>An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <summary>
        <para> Creates a new instance of the specified type defined in the specified
      assembly. Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, activation attributes, and authorization
      to create the type.</para>
      </summary>
      <param name="assemblyName">The display name of the assembly. </param>
      <param name=" typeName">The fully-qualified name of the requested type. </param>
      <param name=" ignoreCase">A Boolean value specifying whether to perform a case-sensitive search or not. </param>
      <param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name=" binder">An object that enables the binding, coercion of argument types, invocation of members and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects using reflection. If <paramref name="binder " />is null, the default binder is used. </param>
      <param name=" args">The arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the default constructor is desired, <paramref name="args " />must be an empty array or null. </param>
      <param name=" culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <param name=" securityAttributes">Information used to authorize creation of <paramref name="typeName" />.</param>
      <returns>
        <para>An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <summary>
        <para>Creates a new instance of the specified type defined in the specified assembly file.</para>
      </summary>
      <param name="assemblyFile">The name of a file that contains an assembly that defines the requested type. </param>
      <param name=" typeName">The fully-qualified name of the requested type. </param>
      <param name=" ignoreCase">A Boolean value specifying whether to perform a case-sensitive search or not. </param>
      <param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name=" binder">An object that enables the binding, coercion of argument types, invocation of members and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection. If <paramref name="binder " />is null, the default binder is used. </param>
      <param name=" args">The arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the default constructor is desired, <paramref name="args " />must be an empty array or null. </param>
      <param name=" culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <param name=" securityAttributes">Information used to authorize creation of <paramref name="typeName" />.</param>
      <returns>
        <para>An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.Load(System.Reflection.AssemblyName)">
      <summary>
        <para>Loads an <see cref="T:System.Reflection.Assembly" />
given its <see cref="T:System.Reflection.AssemblyName" />.</para>
      </summary>
      <param name="assemblyRef">An object that describes the assembly to be loaded.</param>
      <returns>
   The loaded assembly.
</returns>
    </member>
    <member name="M:System._AppDomain.Load(System.String)">
      <summary>
        <para>Loads an <see cref="T:System.Reflection.Assembly" />
given its display name.</para>
      </summary>
      <param name="assemblyString">The display name of the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.Load(System.Byte[])">
      <summary>
        <para>Loads the <see cref="T:System.Reflection.Assembly" /> with a COFF based image
   containing an emitted <see cref="T:System.Reflection.Assembly" />.</para>
      </summary>
      <param name="rawAssembly">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.Load(System.Byte[],System.Byte[])">
      <summary>
        <para>Loads the <see cref="T:System.Reflection.Assembly" /> with a COFF based image
   containing an emitted <see cref="T:System.Reflection.Assembly" />. The raw bytes representing the symbols for
   the <see cref="T:System.Reflection.Assembly" />
   are also
   loaded.</para>
      </summary>
      <param name="rawAssembly">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</param>
      <param name="rawSymbolStore">An array of type <see langword="byte" /> containing the raw bytes representing the symbols for the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
      <summary>
        <para>Loads the <see cref="T:System.Reflection.Assembly" /> with a COFF based image
   containing an emitted <see cref="T:System.Reflection.Assembly" />. The raw bytes representing the symbols for
   the <see cref="T:System.Reflection.Assembly" />
   are also
   loaded.</para>
      </summary>
      <param name="rawAssembly">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</param>
      <param name="rawSymbolStore">An array of type <see langword="byte" /> containing the raw bytes representing the symbols for the assembly.</param>
      <param name="securityEvidence">Evidence for loading the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
      <summary>
        <para> Loads an <see cref="T:System.Reflection.Assembly" />
given its <see cref="T:System.Reflection.AssemblyName" />.</para>
      </summary>
      <param name="assemblyRef">An object that describes the assembly to be loaded. </param>
      <param name="assemblySecurity">Evidence for loading the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.Load(System.String,System.Security.Policy.Evidence)">
      <summary>
        <para>Loads an <see cref="T:System.Reflection.Assembly" />
given its display name.</para>
      </summary>
      <param name="assemblyString">The display name of the assembly.</param>
      <param name="assemblySecurity">Evidence for loading the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
      <summary>
        <para> Execute the <see cref="T:System.Reflection.Assembly" />
given its file name and supplied evidence.</para>
      </summary>
      <param name="assemblyFile">The name of the file from which the assembly is to be loaded. </param>
      <param name="assemblySecurity">Evidence for loading the assembly. </param>
      <returns>
        <para> The value returned by the entry point of
      the assembly.
      </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.ExecuteAssembly(System.String)">
      <summary>
        <para>Execute the <see cref="T:System.Reflection.Assembly" /> given its file name. The method specified in
   the .NET Framework header is called.</para>
      </summary>
      <param name="assemblyFile">The file name of the the assembly to be executed.</param>
      <returns>
        <para> The value returned by the entry point of the
      assembly.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
      <summary>
        <para>Execute the <see cref="T:System.Reflection.Assembly" /> given its file name and
   supplied <see cref="T:System.Security.Policy.Evidence" />. Optionally, the <see cref="T:System.Reflection.Assembly" />
   can be loaded into the domain-neutral code area for use by multiple AppDomains.</para>
      </summary>
      <param name="assemblyFile">The name of the file from which the assembly is to be loaded.</param>
      <param name="assemblySecurity">The supplied evidence for the assembly.</param>
      <param name="args">The arguments to the entry point of the assembly.</param>
      <returns>
        <para>The value returned by the entry point of the
      assembly.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.GetAssemblies">
      <summary>
        <para> Gets the assemblies that have been loaded into this application
      domain.
      </para>
      </summary>
      <returns>
        <para> An array of assemblies in this application domain.
      </para>
      </returns>
    </member>
    <member name="M:System._AppDomain.AppendPrivatePath(System.String)">
      <summary>
        <para>       Appends the specified name of the directory to the private path.
      </para>
      </summary>
      <param name="path">
   The name of the directory to be appended to the private path.
   </param>
    </member>
    <member name="M:System._AppDomain.ClearPrivatePath">
      <summary>
        <para>Resets the path that specifies the location of private assemblies to the empty string ("").</para>
      </summary>
    </member>
    <member name="M:System._AppDomain.SetShadowCopyPath(System.String)">
      <summary>
        <para>Establishes the specified directory path as the location of
      assemblies to be shadow copied.</para>
      </summary>
      <param name="s">A list of directory names, where each name is separated by a semicolon.</param>
    </member>
    <member name="M:System._AppDomain.ClearShadowCopyPath">
      <summary>
        <para>Resets the list of directories containing shadow copied 
      assemblies to the empty string ("").</para>
      </summary>
    </member>
    <member name="M:System._AppDomain.SetCachePath(System.String)">
      <summary>
        <para>Establishes the specified directory path as the location where assemblies are shadow copied.</para>
      </summary>
      <param name="s">The fully-qualified path to the shadow copy location.</param>
    </member>
    <member name="M:System._AppDomain.SetData(System.String,System.Object)">
      <summary>
        <para>Assigns the specified value to the specified application
      domain property.</para>
      </summary>
      <param name="name">The name of an application domain property.</param>
      <param name="data">The value to set the <paramref name="name" /> property.</param>
    </member>
    <member name="M:System._AppDomain.GetData(System.String)">
      <summary>
        <para>Gets the value stored in the current application domain for the
      specified data name.</para>
      </summary>
      <param name="name"> The name of an application domain property.</param>
      <returns>
        <para> The value of the <paramref name="name" /> property.</para>
      </returns>
    </member>
    <member name="M:System._AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Establishes the
      security policy level for this application domain.
      </para>
      </summary>
      <param name="domainPolicy">The security policy level. </param>
    </member>
    <member name="M:System._AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
      <summary>
        <para> Set the default principal object to be attached to threads if
      they attempt to bind to a principal while executing in this application domain.
      </para>
      </summary>
      <param name="principal">The principal object to be attached to threads. </param>
    </member>
    <member name="M:System._AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
      <summary>
        <para>Specifies how principal and identity objects should be attached to a thread 
      if the thread attempts to bind to a principal while executing in this
      application domain.</para>
      </summary>
      <param name="policy">The type of the principal object to be attached to threads. </param>
    </member>
    <member name="M:System._AppDomain.DoCallBack(System.CrossAppDomainDelegate)">
      <summary>
        <para> Executes the code in another application domain that is identified
      by the specified delegate.</para>
      </summary>
      <param name="theDelegate">A delegate that specifies a method to call.</param>
    </member>
    <member name="P:System._AppDomain.Evidence">
      <summary>
        <para> Gets the <see cref="T:System.Security.Policy.Evidence" /> associated with this application domain
   that is used as
   input to security policy.
   </para>
      </summary>
    </member>
    <member name="E:System._AppDomain.DomainUnload">
      <summary>
        <para> Occurs when an <see cref="T:System.AppDomain" /> is about to be unloaded.</para>
      </summary>
    </member>
    <member name="E:System._AppDomain.AssemblyLoad">
      <summary>
        <para> Occurs when an assembly is loaded.</para>
      </summary>
    </member>
    <member name="E:System._AppDomain.ProcessExit">
      <summary>
        <para> Occurs when a process is about to exit.</para>
      </summary>
    </member>
    <member name="E:System._AppDomain.TypeResolve">
      <summary>
        <para> Occurs when the resolution of a type fails.</para>
      </summary>
    </member>
    <member name="E:System._AppDomain.ResourceResolve">
      <summary>
        <para> Occurs when the resolution of a resource fails.</para>
      </summary>
    </member>
    <member name="E:System._AppDomain.AssemblyResolve">
      <summary>
        <para> Occurs when the resolution of an assembly fails.</para>
      </summary>
    </member>
    <member name="E:System._AppDomain.UnhandledException">
      <summary>
        <para> Occurs when an exception
      is not caught by an event handler.</para>
      </summary>
    </member>
    <member name="P:System._AppDomain.FriendlyName">
      <summary>
        <para> Gets the friendly name of this application domain.</para>
      </summary>
    </member>
    <member name="P:System._AppDomain.BaseDirectory">
      <summary>
        <para> Gets the base directory that the
      assembly resolver used to probe for assemblies.
      </para>
      </summary>
    </member>
    <member name="P:System._AppDomain.RelativeSearchPath">
      <summary>
        <para> Gets the path relative to the base directory where the
      assembly resolver should probe for private assemblies.
      </para>
      </summary>
    </member>
    <member name="P:System._AppDomain.ShadowCopyFiles">
      <summary>
        <para> Gets an indication whether all assemblies
      loaded in the application
      domain are shadow copied.
      </para>
      </summary>
    </member>
    <member name="P:System._AppDomain.DynamicDirectory">
      <summary>
        <para>
      Gets the directory that the assembly resolver used to probe for dynamically-created assemblies.
      </para>
      </summary>
    </member>
    <member name="T:System.Security.IEvidenceFactory">
      <summary>
        <para>Gets an object's <see cref="T:System.Security.Policy.Evidence" />.</para>
      </summary>
      <summary>
        <para>Gets an object's <see cref="T:System.Security.Policy.Evidence" />.</para>
      </summary>
    </member>
    <member name="P:System.Security.IEvidenceFactory.Evidence">
      <summary>
        <para>Gets <see cref="T:System.Security.Policy.Evidence" /> that verifies the current object's identity.</para>
      </summary>
    </member>
    <member name="M:System.AppDomain.GetType">
      <summary>
        <para>Gets the type of the current instance.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Type" />.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary>
        <para> Defines a dynamic assembly with the specified name and access
      mode.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The access mode for the dynamic assembly.</param>
      <returns>
        <para> Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, and storage
      directory.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</param>
      <returns>
        <para> Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, and
      evidence.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="evidence">The evidence supplied for the dynamic assembly.</param>
      <returns>
        <para> Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, and
      permission requests.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="requiredPermissions">The required permissions request.</param>
      <param name="optionalPermissions">The optional permissions request.</param>
      <param name="refusedPermissions">The refused permissions request.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, storage
      directory, and evidence.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</param>
      <param name="evidence">The evidence supplied for the dynamic assembly.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, storage
      directory, and permission requests.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</param>
      <param name="requiredPermissions">The required permissions request.</param>
      <param name="optionalPermissions">The optional permissions request.</param>
      <param name="refusedPermissions">The refused permissions request.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, evidence,
      and permission requests.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="evidence">The evidence supplied for the dynamic assembly.</param>
      <param name="requiredPermissions">The required permissions request.</param>
      <param name="optionalPermissions">The optional permissions request.</param>
      <param name="refusedPermissions">The refused permissions request.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>
        <para>Defines a dynamic assembly using the specified name, access mode, storage
      directory, evidence, and permission requests.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly.</param>
      <param name="access">The mode in which the dynamic assembly will be accessed.</param>
      <param name="dir">The name of the directory where the assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</param>
      <param name="evidence">The evidence supplied for the dynamic assembly.</param>
      <param name="requiredPermissions">The required permissions request.</param>
      <param name="optionalPermissions">The optional permissions request.</param>
      <param name="refusedPermissions">The refused permissions request.</param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)">
      <summary>
        <para> Defines a dynamic assembly using the specified name,
      access mode, storage directory, evidence, permission requests, and synchronization option.</para>
      </summary>
      <param name="name">The unique identity of the dynamic assembly. </param>
      <param name="access">The mode in which the dynamic assembly will be accessed. </param>
      <param name="dir">The name of the directory where the dynamic assembly will be saved. If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory. </param>
      <param name="evidence">The evidence supplied for the dynamic assembly. </param>
      <param name="requiredPermissions">The required permissions request. </param>
      <param name="optionalPermissions">The optional permissions request. </param>
      <param name="refusedPermissions">The refused permissions request. </param>
      <param name="isSynchronized">
        <para>
          <see langword="true" /> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <see langword="false" />.</para>
      </param>
      <returns>
        <para>Represents the dynamic assembly created.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String)">
      <summary>
        <para> Creates a new instance of the specified type defined in the specified assembly.
      </para>
      </summary>
      <param name="assemblyName">The display name of the assembly. </param>
      <param name="typeName">The fully-qualified name of the requested type. </param>
      <returns>
        <para>An object that is a wrapper for the new instance specified by <paramref name="typeName" />. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
      <summary>
        <para>Creates a new instance of the specified type defined in the specified assembly
      file.</para>
      </summary>
      <param name="assemblyFile">The name of a file that contains an assembly that defines the requested type.</param>
      <param name="typeName">The fully-qualified name of the requested type.</param>
      <returns>
        <para>An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)">
      <summary>
        <para> Creates a new instance of a specified COM type. Parameters specify
      the name of a file that contains an assembly containing the type and
      the name of the type.
      </para>
      </summary>
      <param name="assemblyName">The name of a file containing an assembly that defines the requested type. </param>
      <param name=" typeName">The name of the requested type. </param>
      <returns>
        <para>An object that is a wrapper for the new instance specified
      by <paramref name="typeName" />. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
      <summary>
        <para>Creates a new instance of the specified type defined in
      the specified assembly. A parameter specifies an array of activation attributes. </para>
      </summary>
      <param name="assemblyName">The display name of the assembly. </param>
      <param name=" typeName">The fully-qualified name of the requested type. </param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <returns>
        <para>An object that is a wrapper for the new instance specified by <paramref name="typeName" />. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
      <summary>
        <para>Creates a new instance of the specified type defined in the specified assembly file.</para>
      </summary>
      <param name=" assemblyFile">The name of a file that contains an assembly that defines the requested type.</param>
      <param name=" typeName">The fully-qualified name of the requested type.</param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <returns>
        <para>An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <summary>
        <para> Creates a new instance of the specified type defined in the specified
      assembly. Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, activation attributes, and authorization
      to create the type.</para>
      </summary>
      <param name="assemblyName">The display name of the assembly. </param>
      <param name=" typeName">The fully-qualified name of the requested type. </param>
      <param name=" ignoreCase">A Boolean value specifying whether to perform a case-sensitive search or not. </param>
      <param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name=" binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects using reflection. If <paramref name="binder " />is null, the default binder is used. </param>
      <param name=" args">The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <paramref name="args " />must be an empty array or null. </param>
      <param name=" culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <param name=" securityAttributes">Information used to authorize creation of <paramref name="typeName" />.</param>
      <returns>
        <para>An object that is a wrapper for the new instance specified by <paramref name="typeName" />. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <summary>
        <para>Creates a new instance of the specified type defined in the specified assembly file.</para>
      </summary>
      <param name="assemblyFile">The name of a file that contains an assembly that defines the requested type. </param>
      <param name=" typeName">The fully-qualified name of the requested type. </param>
      <param name=" ignoreCase">A Boolean value specifying whether to perform a case-sensitive search or not. </param>
      <param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name=" binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection. If <paramref name="binder " />is null, the default binder is used. </param>
      <param name=" args">The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <paramref name="args " />must be an empty array or null. </param>
      <param name=" culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <param name=" securityAttributes">Information used to authorize creation of <paramref name="typeName" />.</param>
      <returns>
        <para>An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found. The return value needs to be unwrapped to access the real object. </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
      <summary>
        <para>Loads an <see cref="T:System.Reflection.Assembly" />
given its <see cref="T:System.Reflection.AssemblyName" />.</para>
      </summary>
      <param name="assemblyRef">An object that describes the assembly to load.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.Load(System.String)">
      <summary>
        <para>Loads an <see cref="T:System.Reflection.Assembly" />
given its display name.</para>
      </summary>
      <param name="assemblyString">The display name of the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[])">
      <summary>
        <para>Loads the <see cref="T:System.Reflection.Assembly" /> with a common object file format (COFF) based image
   containing an emitted <see cref="T:System.Reflection.Assembly" />.</para>
      </summary>
      <param name="rawAssembly">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
      <summary>
        <para>Loads the <see cref="T:System.Reflection.Assembly" /> with a common object file format (COFF) based image
   containing an emitted <see cref="T:System.Reflection.Assembly" />. The raw bytes representing the symbols for
   the <see cref="T:System.Reflection.Assembly" />
   are also
   loaded.</para>
      </summary>
      <param name="rawAssembly">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</param>
      <param name="rawSymbolStore">An array of type <see langword="byte" /> containing the raw bytes representing the symbols for the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
      <summary>
        <para>Loads the <see cref="T:System.Reflection.Assembly" /> with a common object file format (COFF) based image
   containing an emitted <see cref="T:System.Reflection.Assembly" />. The raw bytes representing the symbols for
   the <see cref="T:System.Reflection.Assembly" />
   are also
   loaded.</para>
      </summary>
      <param name="rawAssembly">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</param>
      <param name="rawSymbolStore">An array of type <see langword="byte" /> containing the raw bytes representing the symbols for the assembly.</param>
      <param name="securityEvidence">Evidence for loading the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
      <summary>
        <para> Loads an <see cref="T:System.Reflection.Assembly" />
given its <see cref="T:System.Reflection.AssemblyName" />.</para>
      </summary>
      <param name="assemblyRef">An object that describes the assembly to load. </param>
      <param name="assemblySecurity">Evidence for loading the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)">
      <summary>
        <para>Loads an <see cref="T:System.Reflection.Assembly" />
given its display name.</para>
      </summary>
      <param name="assemblyString">The display name of the assembly.</param>
      <param name="assemblySecurity">Evidence for loading the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
      <summary>
        <para> Executes the assembly contained in the specified file, using the specified evidence.</para>
      </summary>
      <param name="assemblyFile">The name of the file that contains the assembly to execute. </param>
      <param name="assemblySecurity">Evidence for loading the assembly. </param>
      <returns>
        <para> The value returned by the entry point of
      the assembly.
      </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String)">
      <summary>
        <para>Executes the assembly contained in the specified file.</para>
      </summary>
      <param name="assemblyFile">The name of the file that contains the assembly to execute.</param>
      <returns>
        <para> The value returned by the entry point of the
      assembly.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
      <summary>
        <para>Executes the assembly contained in the specified file,
      using the specified evidence and arguments.</para>
      </summary>
      <param name="assemblyFile">The name of the file that contains the assembly to execute.</param>
      <param name="assemblySecurity">The supplied evidence for the assembly.</param>
      <param name="args">The arguments to the entry point of the assembly.</param>
      <returns>
        <para>The value returned by the entry point of the
      assembly.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.ToString">
      <summary>
        <para> Obtains the <see cref="T:System.String" /> representation of this instance.
   </para>
      </summary>
      <returns>
        <para> 
      The friendly name of the application domain.
      </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.GetAssemblies">
      <summary>
        <para> Gets the assemblies that have been loaded into this application
      domain.
      </para>
      </summary>
      <returns>
        <para> An array of assemblies in this application domain.
      </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.IsFinalizingForUnload">
      <summary>
        <para>Indicates whether this application domain is unloading,
      and the objects it contains are being finalized
      by the common language runtime.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if this
   application domain is unloading and the common language
   runtime has started invoking finalizers; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.AppendPrivatePath(System.String)">
      <summary>
        <para>
       Appends the specified name of the directory to the private path.
    </para>
      </summary>
      <param name="path">
    The name of the directory to be appended to the private path.
 </param>
    </member>
    <member name="M:System.AppDomain.ClearPrivatePath">
      <summary>
        <para>Resets the path that specifies the location of private 
      assemblies to the empty string ("").</para>
      </summary>
    </member>
    <member name="M:System.AppDomain.ClearShadowCopyPath">
      <summary>
        <para>Resets the list of directories containing shadow copied 
      assemblies to the empty string ("").</para>
      </summary>
    </member>
    <member name="M:System.AppDomain.SetCachePath(System.String)">
      <summary>
        <para>Establishes the specified directory path as the location where assemblies are shadow copied.</para>
      </summary>
      <param name="path">The fully-qualified path to the shadow copy location.</param>
    </member>
    <member name="M:System.AppDomain.SetData(System.String,System.Object)">
      <summary>
        <para>Assigns the specified value to the specified application
      domain property.</para>
      </summary>
      <param name="name">The name of an application domain property.</param>
      <param name="data">The value to set the <paramref name="name" /> property.</param>
    </member>
    <member name="M:System.AppDomain.GetData(System.String)">
      <summary>
        <para>Gets the value stored in the current application domain for the
      specified data name.</para>
      </summary>
      <param name="name">The name of an application domain property.</param>
      <returns>
        <para> The value of the <paramref name="name" /> property.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.GetCurrentThreadId">
      <summary>
        <para> Gets the current thread identifier.
      </para>
      </summary>
      <returns>
        <para> A 32-bit signed integer that is the identifier of the current thread.
      </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.Unload(System.AppDomain)">
      <summary>
        <para> Unloads the specified application domain.
      </para>
      </summary>
      <param name="domain"> An application domain to unload. </param>
    </member>
    <member name="M:System.AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Establishes the
      security policy level for this application domain.
      </para>
      </summary>
      <param name="domainPolicy">The security policy level. </param>
    </member>
    <member name="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
      <summary>
        <para> Sets the default principal object to be attached to threads if
      they attempt to bind to a principal while executing in this application domain.
      </para>
      </summary>
      <param name="principal">The principal object to attach to threads. </param>
    </member>
    <member name="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
      <summary>
        <para>Specifies how principal and identity objects should be attached to a thread
      if the thread attempts to bind to a principal while executing in this
      application domain.</para>
      </summary>
      <param name="policy"> The type of the principal object to attach to threads. </param>
    </member>
    <member name="M:System.AppDomain.InitializeLifetimeService">
      <summary>
        <para>Gives the <see cref="T:System.AppDomain" /> an infinite lifetime by preventing a lease from being created.</para>
      </summary>
      <returns>
        <para> Always <see langword="null" />.
 </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.DoCallBack(System.CrossAppDomainDelegate)">
      <summary>
        <para> Executes the code in another application domain that is identified
      by the specified delegate.</para>
      </summary>
      <param name="callBackDelegate">A delegate that specifies a method to call.</param>
    </member>
    <member name="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)">
      <summary>
        <para> Creates
      a
      new application domain with the given name using the supplied evidence.
      </para>
      </summary>
      <param name="friendlyName">The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see the description of <see cref="P:System.AppDomain.FriendlyName" />. </param>
      <param name="securityInfo">Evidence mapped through the security policy to establish a top-of-stack permission set. </param>
      <returns>
        <para> The newly created application domain.
      </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
      <summary>
        <para> Creates
      a new application domain with the given name, using
      evidence, application base path, relative search
      path, and a parameter that specifies whether a shadow copy of an
      assembly is to be loaded into the application domain.
      </para>
      </summary>
      <param name="friendlyName">The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see the description of <see cref="P:System.AppDomain.FriendlyName" />. </param>
      <param name="securityInfo">Evidence mapped through the security policy to establish a top-of-stack permission set. </param>
      <param name="appBasePath">The base directory that the assembly resolver uses to probe for assemblies. For more information, see the description of <see cref="P:System.AppDomain.BaseDirectory" />. </param>
      <param name="appRelativeSearchPath">The path relative to the base directory where the assembly resolver should probe for private assemblies. For more information, see the description of <see cref="P:System.AppDomain.RelativeSearchPath" />. </param>
      <param name="shadowCopyFiles">If <see langword="true" />, a shadow copy of an assembly is loaded into this application domain. </param>
      <returns>
        <para> The newly created application domain.
      </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateDomain(System.String)">
      <summary>
        <para> Creates a new application domain with the specified name.
      </para>
      </summary>
      <param name="friendlyName">The friendly name of the domain. </param>
      <returns>
        <para> The newly created application domain.
      </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
      <summary>
        <para> Creates a new application domain using
      the specified name, evidence, and application domain setup information.
      </para>
      </summary>
      <param name="friendlyName">The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see the description of <see cref="P:System.AppDomain.FriendlyName" />. </param>
      <param name="securityInfo">Evidence mapped through the security policy to establish a top-of-stack permission set. </param>
      <param name=" info">An object that contains application domain initialization information.</param>
      <returns>
        <para> The newly created application domain. </para>
      </returns>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyPath(System.String)">
      <summary>
        <para>Establishes the specified directory path as the location of
      assemblies to be shadow copied.</para>
      </summary>
      <param name="path">A list of directory names, where each name is separated by a semicolon.</param>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyFiles">
      <summary>
        <para>Turns on shadow copying.</para>
      </summary>
    </member>
    <member name="M:System.AppDomain.SetDynamicBase(System.String)">
      <summary>
        <para>Establishes the specified directory path as the location where dynamically generated
      files are stored and accessed.</para>
      </summary>
      <param name="path">The fully-qualified path to where dynamic assemblies are stored.</param>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
      <summary>
        <para> Creates a new instance of the specified type. Parameters
      specify the assembly where the type is defined, and the name of the type.
      </para>
      </summary>
      <param name="assemblyName">The display name of the assembly. </param>
      <param name="typeName">The fully-qualified name of the requested type. </param>
      <returns>
        <para> An instance of the object specified by 
   <paramref name="typeName" />.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
      <summary>
        <para>Creates a new instance of the specified type. Parameters specify the assembly where the type is defined, the name of the type, and an array of activation attributes. </para>
      </summary>
      <param name="assemblyName">The display name of the assembly. </param>
      <param name="typeName">The fully-qualified name of the requested type. </param>
      <param name="activationAttributes">An array containing one or more attributes that can participate in activation.</param>
      <returns>
        <para>An instance of the object specified by <paramref name="typeName" />.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <summary>
        <para> Creates a new instance of the specified type. Parameters specify the name of the type, and how it is found and created. </para>
      </summary>
      <param name="assemblyName">The display name of the assembly. </param>
      <param name="typeName">The fully-qualified name of the requested type. </param>
      <param name="ignoreCase">A Boolean value specifying whether to perform a case-sensitive search or not. </param>
      <param name="bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects using reflection. If <paramref name="binder " />is null, the default binder is used. </param>
      <param name="args">The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <paramref name="args " />must be an empty array or null. </param>
      <param name="culture">A culture-specific object used to govern the coercion of types. If <paramref name="culture" /> is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread is used. </param>
      <param name="activationAttributes">An array of one or more attributes that can participate in activation.</param>
      <param name=" securityAttributes">Information used to authorize creation of <paramref name="typeName" />.</param>
      <returns>
        <para>An instance of the object specified by <paramref name="typeName" />.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
      <summary>
        <para>Creates a new instance of the specified type defined in the specified assembly
      file.</para>
      </summary>
      <param name="assemblyName">The name of a file that contains an assembly that defines the requested type.</param>
      <param name="typeName">The fully-qualified name of the requested type.</param>
      <returns>
        <para> The requested object.</para>
        <para> -or-</para>
        <para>
          <see langword="null" /> if
<paramref name="typeName" />
is not found.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
      <summary>
        <para>Creates a new instance of the specified type defined in the specified assembly file.</para>
      </summary>
      <param name=" assemblyName">The name of a file that contains an assembly that defines the requested type.</param>
      <param name=" typeName">The fully-qualified name of the requested type.</param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <returns>
        <para>The requested object.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> if <paramref name="typeName" /> is not found.</para>
      </returns>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
      <summary>
        <para>Creates a new instance of the specified type defined in the specified assembly file.</para>
      </summary>
      <param name="assemblyName">The name of a file that contains an assembly that defines the requested type. </param>
      <param name=" typeName">The fully-qualified name of the requested type. </param>
      <param name=" ignoreCase">A Boolean value specifying whether to perform a case-sensitive search or not. </param>
      <param name=" bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor. If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted. </param>
      <param name=" binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection. If <paramref name="binder" /> is null, the default binder is used.</param>
      <param name=" args">The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <paramref name="args" /> must be an empty array or null.</param>
      <param name=" culture">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </param>
      <param name=" activationAttributes">One or more attributes that can participate in activation.</param>
      <param name=" securityAttributes">Information used to authorize creation of <paramref name="typeName" />.</param>
      <returns>
        <para>The requested object.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> if <paramref name="typeName" /> is not found.</para>
      </returns>
    </member>
    <member name="E:System.AppDomain.DomainUnload">
      <summary>
        <para> Occurs when an <see cref="T:System.AppDomain" /> is about to be unloaded.</para>
      </summary>
    </member>
    <member name="E:System.AppDomain.AssemblyLoad">
      <summary>
        <para> Occurs when an assembly is loaded.</para>
      </summary>
    </member>
    <member name="E:System.AppDomain.ProcessExit">
      <summary>
        <para> Occurs on the default application domain when the 
      default application domain's parent process exits.</para>
      </summary>
    </member>
    <member name="E:System.AppDomain.TypeResolve">
      <summary>
        <para> Occurs when the resolution of a type fails.</para>
      </summary>
    </member>
    <member name="E:System.AppDomain.ResourceResolve">
      <summary>
        <para> Occurs when the resolution of a resource fails.</para>
      </summary>
    </member>
    <member name="E:System.AppDomain.AssemblyResolve">
      <summary>
        <para> Occurs when the resolution of an assembly fails.</para>
      </summary>
    </member>
    <member name="E:System.AppDomain.UnhandledException">
      <summary>
        <para> Occurs when an exception
      is not caught by an event handler.</para>
      </summary>
    </member>
    <member name="P:System.AppDomain.CurrentDomain">
      <summary>
        <para> Gets the current application domain for the
      current <see cref="T:System.Threading.Thread" />.
      </para>
      </summary>
    </member>
    <member name="P:System.AppDomain.Evidence">
      <summary>
        <para> Gets the <see cref="T:System.Security.Policy.Evidence" /> associated with this application domain that
   is used as input
   to the security policy.
   </para>
      </summary>
    </member>
    <member name="P:System.AppDomain.FriendlyName">
      <summary>
        <para> Gets the friendly name of this application domain.</para>
      </summary>
    </member>
    <member name="P:System.AppDomain.BaseDirectory">
      <summary>
        <para> Gets the base directory that the
      assembly resolver used to probe for assemblies.
      </para>
      </summary>
    </member>
    <member name="P:System.AppDomain.RelativeSearchPath">
      <summary>
        <para> Gets the path relative to the base directory where the
      assembly resolver should probe for private assemblies.
      </para>
      </summary>
    </member>
    <member name="P:System.AppDomain.ShadowCopyFiles">
      <summary>
        <para> Gets an indication whether all assemblies
      loaded in the application
      domain are shadow copied.
      </para>
      </summary>
    </member>
    <member name="P:System.AppDomain.DynamicDirectory">
      <summary>
        <para> Gets the directory that the assembly resolver used to probe for dynamically-created assemblies.
      </para>
      </summary>
    </member>
    <member name="P:System.AppDomain.SetupInformation">
      <summary>
        <para>Gets the application domain configuration information
      for this instance.</para>
      </summary>
    </member>
    <member name="T:System.CrossAppDomainDelegate">
      <summary>
        <para> Used by <see cref="M:System.AppDomain.DoCallBack(System.CrossAppDomainDelegate)" />
for cross-application domain calls.</para>
      </summary>
    </member>
    <member name="T:System.IAppDomainSetup">
      <summary>
        <para>Represents assembly binding information that can be added
      to an instance of <see cref="T:System.AppDomain" />.</para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.ApplicationBase">
      <summary>
        <para>Gets or sets the name of the directory containing the
      application.</para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.ApplicationName">
      <summary>
        <para>Gets or sets the name of the application.</para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.CachePath">
      <summary>
        <para> Gets and
      sets the name of an area specific to
      the application where files are shadow copied.
      </para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.ConfigurationFile">
      <summary>
        <para> Gets and sets
      
      the name of the
      configuration file for an application domain.</para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.DynamicBase">
      <summary>
        <para> Gets or sets the directory where dynamically
      generated files are stored and accessed.</para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.LicenseFile">
      <summary>
        <para>Gets or sets the location of the license file associated with this
      domain.</para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.PrivateBinPath">
      <summary>
        <para> Gets or sets the list of directories that is combined
      with the <see cref="P:System.AppDomainSetup.ApplicationBase" />
      directory to
      probe for private assemblies.
      </para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.PrivateBinPathProbe">
      <summary>
        <para> Gets or sets the private binary directory
      path used to locate an application.</para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.ShadowCopyDirectories">
      <summary>
        <para> Gets or sets the names of the
      directories containing assemblies to be shadow copied.</para>
      </summary>
    </member>
    <member name="P:System.IAppDomainSetup.ShadowCopyFiles">
      <summary>
        <para> Gets or sets a
      
      string that indicates whether shadow
      copying is turned on or off.
      </para>
      </summary>
    </member>
    <member name="T:System.LoaderOptimization">
      <summary>
        <para> An enumeration used with the <see cref="T:System.LoaderOptimizationAttribute" /> 
class to specify loader optimizations for an executable.
</para>
      </summary>
    </member>
    <member name="F:System.LoaderOptimization.NotSpecified">
      <summary>
        <para> Indicates that no optimizations for sharing internal resources
      are specified. If the default domain or hosting interface specified an optimization, then the loader uses
      that; otherwise, the loader uses <see cref="F:System.LoaderOptimization.SingleDomain" />.</para>
      </summary>
    </member>
    <member name="F:System.LoaderOptimization.SingleDomain">
      <summary>
        <para> Indicates that the application will probably have a single
      domain, and loader must not share
      internal resources across application domains.
      </para>
      </summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomain">
      <summary>
        <para> Indicates that the application will probably have many domains
      that use the same code, and the loader must share maximal
      internal resources across application domains.
      </para>
      </summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomainHost">
      <summary>
        <para>    Indicates that the application will probably host unique code in
      multiple domains, and the loader must share resources across
      application domains for globally available (strong-named) assemblies only.
      </para>
      </summary>
    </member>
    <member name="T:System.LoaderOptimizationAttribute">
      <summary>
        <para>Used to set the default loader optimization policy for the
      main method of an executable application.</para>
      </summary>
    </member>
    <member name="T:System.Attribute">
      <summary>
        <para>Base class for custom attributes.</para>
      </summary>
    </member>
    <member name="M:System.Attribute.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Attribute" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified member
      of a class or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.MemberInfo" /> that describes a constructor, event, field, method, or property member of a class.</param>
      <param name="type">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para> An <see cref="T:System.Attribute" /> array containing the custom attributes of type <paramref name="type" />
applied to <paramref name="element." /></para>
        <para> -or-</para>
        <para> An
   empty array if no
   such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified member of a class or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.MemberInfo" /> that describes a constructor, event, field, method, or property member of a class.</param>
      <param name="type">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing the custom attributes of type <paramref name="type" /> applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>
        <para> Retrieves an array of the custom attributes applied to a specified member of a class or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.MemberInfo" /> that describes a constructor, event, field, method, or property member of a class.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing
   the custom attributes applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified member of a class or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.MemberInfo" /> that describes a constructor, event, field, method, or property member of a class.</param>
      <param name=" inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing
   the custom attributes applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified parameter of a member of a class or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.ParameterInfo" /> that describes a parameter of a member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified parameter of a member of a class or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.ParameterInfo" /> that describes a parameter of a member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified module or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Module" /> that describes a portable executable file.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified module or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Module" /> that describes a portable executable file.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified assembly or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Assembly" /> that describes a reusable, versionable, collection of modules.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified assembly or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Assembly" /> that describes a reusable, versionable, collection of modules.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified parameter of a member of a class or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.ParameterInfo" /> that describes a parameter of a member of a class.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing
   the custom attributes applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified parameter of a member of a class or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.ParameterInfo" /> that describes a parameter of a member of a class.</param>
      <param name=" inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing
   the custom attributes applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified module or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Module" /> that describes a portable executable file.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing
   the custom attributes applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified module or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Module" /> that describes a portable executable file.</param>
      <param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing
   the custom attributes applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified assembly or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Assembly" /> that describes a reusable, versionable, collection of modules.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing
   the custom attributes applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)">
      <summary>
        <para> Retrieves an array of the custom attributes of a specified type applied to a specified assembly or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Assembly" /> that describes a reusable, versionable, collection of modules.</param>
      <param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>
        <para>An <see cref="T:System.Attribute" /> array containing
   the custom attributes applied to <paramref name="element." /></para>
        <para>-or-</para>
        <para>An empty array if no such custom attributes exist.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)">
      <summary>
        <para>Determines whether any custom attributes of a specified type are applied to a specified member of
      a class or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.MemberInfo" /> that describes a constructor, event, field, method, type, or property member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>
          <see langword="true" /> if a custom attribute of type
<paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, 
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>
        <para>Determines whether any custom attributes of a specified type are applied to a specified member of a
      class or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.MemberInfo" /> that describes a constructor, event, field, method, type, or property member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>
        <para>
          <see langword="true" /> if a custom attribute of type
<paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, 
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)">
      <summary>
        <para> Determines whether any custom attributes of a specified type are applied to
      a specified parameter of a member of a class or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.ParameterInfo" /> that describes a parameter of a member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>
        <para>Determines whether any custom attributes of a specified type are applied to a
      specified parameter of a member of a class or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.ParameterInfo" /> that describes a parameter of a member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>
        <para>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)">
      <summary>
        <para> Determines whether any custom attributes of a specified type
      are applied to a specified module.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Module" /> that describes a portable executable file.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>
        <para> Determines whether any custom attributes of a specified type
      are applied to a specified module.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Module" /> that describes a portable executable file.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>
        <para>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)">
      <summary>
        <para>Determines whether any custom attributes of a specified type are applied to a
      specified assembly.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Assembly" /> that describes a reusable, versionable, collection of modules.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>
        <para>Determines whether any custom attributes of a specified type are applied to a
      specified assembly.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Assembly" /> that describes a reusable, versionable, collection of modules.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>
        <para>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
      <summary>
        <para> Retrieves a custom attribute of a specified type applied to a specified member
      of a class or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.MemberInfo" /> that describes a constructor, event, field, method, or property member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>
          <see langword="null" />, if no custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />. </para>
        <para>-or- </para>
        <para>An <see cref="T:System.Attribute" /> reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element." /></para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>
        <para> Retrieves a custom attribute of a specified type applied to a specified member of a class or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.MemberInfo" /> that describes a constructor, event, field, method, or property member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>
        <para>
          <see langword="null" />, if no custom attribute of type
<paramref name="attributeType" /> is applied to <paramref name="element" />.
   </para>
        <para>-or-
   </para>
        <para>An <see cref="T:System.Attribute" /> reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element." /></para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
      <summary>
        <para> Retrieves a custom attribute of a specified type applied to a specified parameter of a member of a class or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.ParameterInfo" /> that describes a parameter of a member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>
          <see langword="null" />, if no custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />. </para>
        <para>-or- </para>
        <para>An <see cref="T:System.Attribute" /> reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element." /></para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>
        <para> Retrieves a custom attribute of a specified type applied to a specified parameter of a member of a class or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.ParameterInfo" /> that describes a parameter of a member of a class.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">If <see langword="true" />, specifies to also search the ancestors of <paramref name="element" /> for custom attributes.</param>
      <returns>
        <para>
          <see langword="null" />, if no custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />. </para>
        <para>-or- </para>
        <para>An <see cref="T:System.Attribute" /> reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element." /></para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)">
      <summary>
        <para> Retrieves a custom attribute of a specified type applied to a specified module or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Module" /> that describes a portable executable file.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>
          <see langword="null" />, if no custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />. </para>
        <para>-or- </para>
        <para>An <see cref="T:System.Attribute" /> reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element." /></para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>
        <para> Retrieves a custom attribute of a specified type applied to a specified module or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Module" /> that describes a portable executable file.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>
        <para>
          <see langword="null" />, if no custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />. </para>
        <para>-or- </para>
        <para>An <see cref="T:System.Attribute" /> reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element." /></para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
      <summary>
        <para> Retrieves a custom attribute of a specified type applied to a specified assembly or inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Assembly" /> that describes a reusable, versionable, collection of modules.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <returns>
        <para>
          <see langword="null" />, if no custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />. </para>
        <para>-or- </para>
        <para>An <see cref="T:System.Attribute" /> reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element." /></para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>
        <para> Retrieves a custom attribute of a specified type applied to a specified assembly or optionally inherited from a base class.</para>
      </summary>
      <param name="element">An object derived from class <see cref="T:System.Reflection.Assembly" /> that describes a reusable, versionable, collection of modules.</param>
      <param name="attributeType">The <see cref="T:System.Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">This parameter is ignored, and does not affect the operation of this method.</param>
      <returns>
        <para>
          <see langword="null" />, if no custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />. </para>
        <para>-or- </para>
        <para>An <see cref="T:System.Attribute" /> reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element." /></para>
      </returns>
    </member>
    <member name="M:System.Attribute.Match(System.Object)">
      <summary>
        <para> When overridden in a 
      derived class, returns a value indicating whether this instance equals a specified object.
      </para>
      </summary>
      <param name="obj">An <see cref="T:System.Object" /> to compare with this instance of <see langword="Attribute" />. </param>
      <returns>
        <para>
          <see langword="true" /> if this 
   instance equals <paramref name="obj" />; otherwise,
<see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Attribute.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Attribute.IsDefaultAttribute">
      <summary>
        <para> When overridden in a derived class, returns an indication
      whether the value of this instance is
      the
      default value for the derived class.
      </para>
      </summary>
      <returns>
        <para>
          <see langword="true " />if this
   instance is the default
   attribute for the class; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="P:System.Attribute.TypeId">
      <summary>
        <para> When implemented in a derived class, gets a unique identifier for this <see langword="Attribute" />.</para>
      </summary>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.Byte)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.LoaderOptimizationAttribute" /> class to the specified value.</para>
      </summary>
      <param name="value">A value equivalent to a <see cref="T:System.LoaderOptimization" qualify="true" /> constant.</param>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.LoaderOptimization)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.LoaderOptimizationAttribute" /> class to the specified value.</para>
      </summary>
      <param name="value"> A <see cref="T:System.LoaderOptimization" qualify="true" /> constant.</param>
    </member>
    <member name="P:System.LoaderOptimizationAttribute.Value">
      <summary>
        <para>Gets the current <see cref="T:System.LoaderOptimization" /> value 
   for this instance.</para>
      </summary>
    </member>
    <member name="T:System.AppDomainUnloadedException">
      <summary>
        <para>The exception that is thrown when an attempt is made to
      access an unloaded application domain.</para>
      </summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.AppDomainUnloadedException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.AppDomainUnloadedException" /> class
      with a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.AppDomainUnloadedException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a <see langword="" />null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.AppDomainUnloadedException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.ArgumentException">
      <summary>
        <para> The exception that is thrown when one
      of the arguments provided to a method is not valid.</para>
      </summary>
    </member>
    <member name="M:System.ArgumentException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentException" />
class with a
specified error message, the parameter name, and a reference to the inner
exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="paramName">The name of the parameter that caused the current exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message and
   the name of the parameter that causes this
   exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="paramName">The name of the parameter that caused the current exception.</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class
   with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
object with the parameter name and additional exception information.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.ArgumentException.Message">
      <summary>
        <para> Gets the error message and the parameter name, or only the error
      message if no parameter name is set.</para>
      </summary>
    </member>
    <member name="P:System.ArgumentException.ParamName">
      <summary>
        <para> Gets the name of the parameter that causes
      this exception.</para>
      </summary>
    </member>
    <member name="T:System.ArgumentNullException">
      <summary>
        <para>The exception that is thrown when a null reference 
      (<see langword="Nothing" /> in Visual Basic) is passed to
      a method that does not accept it as a valid argument.</para>
      </summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ArgumentNullException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ArgumentNullException" /> class with the name of the parameter that causes this exception.</para>
      </summary>
      <param name="paramName">The name of the parameter that caused the exception.</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes an instance of the <see cref="T:System.ArgumentNullException" /> class
   with a specified error message and the name of the parameter that causes this
   exception.</para>
      </summary>
      <param name="paramName">The name of the parameter that caused the exception.</param>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> 
class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.ArgumentOutOfRangeException">
      <summary>
        <para>The exception that
      is thrown when the value of an argument is outside
      the allowable range of values as defined by the invoked method.</para>
      </summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> 
class.</para>
      </summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with the name of the parameter that causes this
   exception.</para>
      </summary>
      <param name="paramName">The name of the parameter that caused the exception.</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with a specified error message and
   the name of the parameter that causes this exception.</para>
      </summary>
      <param name="paramName">The name of the parameter that caused the exception.</param>
      <param name="message"> The message that describes the error.</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ArgumentOutOfRangeException" /> class
      with a specified error message, the
      parameter name, and the value of the argument.</para>
      </summary>
      <param name="paramName">The name of the parameter that caused the exception.</param>
      <param name="actualValue">The value of the argument that causes this exception.</param>
      <param name="message"> The message that describes the error.</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para> Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
object with the invalid argument value and additional exception information.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.Message">
      <summary>
        <para>Gets the error message and the string representation of 
       the invalid argument value, or only the error message if the argument value is null.</para>
      </summary>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.ActualValue">
      <summary>
        <para> Gets the argument value that causes this exception.</para>
      </summary>
    </member>
    <member name="T:System.ArgIterator">
      <summary>
        <para>Represents a variable-length argument list; that is, the parameters of a 
       function that takes a variable number of arguments.</para>
      </summary>
    </member>
    <member name="M:System.ArgIterator.#ctor(System.RuntimeArgumentHandle)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgIterator" /> class using
   the specified argument list.</para>
      </summary>
      <param name="arglist">An argument list consisting of both required and optional items.</param>
    </member>
    <member name="M:System.ArgIterator.#ctor(System.RuntimeArgumentHandle,System.Void*)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArgIterator" /> class using
   the specified argument list and a pointer to an item in the list.</para>
      </summary>
      <param name="arglist">An argument list consisting of both required and optional items. </param>
      <param name="ptr">A pointer to the item in <paramref name="arglist" /> to be accessed first.</param>
    </member>
    <member name="M:System.ArgIterator.GetNextArg">
      <summary>
        <para>Returns the next argument in a variable-length argument list.</para>
      </summary>
      <returns>
        <para>The next argument as a <see cref="T:System.TypedReference" /> object.</para>
      </returns>
    </member>
    <member name="M:System.ArgIterator.GetNextArg(System.RuntimeTypeHandle)">
      <summary>
        <para>Returns the next argument in a variable-length argument list that has a
      specified type.</para>
      </summary>
      <param name="rth">A runtime type handle that identifies the type of the argument to retrieve.</param>
      <returns>
        <para>The next argument as a <see cref="T:System.TypedReference" /> object.</para>
      </returns>
    </member>
    <member name="M:System.ArgIterator.End">
      <summary>
        <para>Moves the iterator to the end of the variable-length argument list; that is, 
       it invalidates the iterator.</para>
      </summary>
    </member>
    <member name="M:System.ArgIterator.GetRemainingCount">
      <summary>
        <para>Returns the number of arguments remaining in the argument list.</para>
      </summary>
      <returns>
        <para>The number of remaining arguments.</para>
      </returns>
    </member>
    <member name="M:System.ArgIterator.GetNextArgType">
      <summary>
        <para>Returns the type of the next argument.</para>
      </summary>
      <returns>
        <para>The type of the next argument.</para>
      </returns>
    </member>
    <member name="M:System.ArgIterator.GetHashCode">
      <summary>
        <para>Returns the hash code of this object.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.ArgIterator.Equals(System.Object)">
      <summary>
        <para>This method is not supported, and always throws <see cref="T:System.NotSupportedException" />.</para>
      </summary>
      <param name="o">An object to be compared to this instance.</param>
      <returns>
        <para>This comparison is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="T:System.ArithmeticException">
      <summary>
        <para> The exception that
      is thrown for errors in an arithmetic, casting, or conversion operation.</para>
      </summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ArithmeticException" /> 
   
   class.</para>
      </summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ArithmeticException" /> class with a specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArithmeticException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.ArrayTypeMismatchException">
      <summary>
        <para>The exception that is thrown when an attempt is made to
      store an element of the wrong type within an array.</para>
      </summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ArrayTypeMismatchException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.ArrayTypeMismatchException" />
   class with a specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.AsyncCallback">
      <summary>
        <para>References the callback method to be called when the asynchronous operation is completed.</para>
      </summary>
      <param name="ar">The result of the asynchronous operation.</param>
    </member>
    <member name="T:System.AttributeTargets">
      <summary>
        <para> Specifies the application elements on which it is valid to apply
      an attribute.</para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Assembly">
      <summary>
        <para>       Attribute can be applied to an assembly.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Module">
      <summary>
        <para> Attribute can be applied to a module.
      </para>
        <note type="note">
          <paramref name="Module" />
   
   refers to a
   portable executable file (.dll or .exe) and not a
   Visual Basic standard module.
   
</note>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Class">
      <summary>
        <para>       Attribute can be applied to a class.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Struct">
      <summary>
        <para> Attribute can be applied to a structure; that is, a value type.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Enum">
      <summary>
        <para>       Attribute can be applied to an enumeration.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Constructor">
      <summary>
        <para>       Attribute can be applied to a constructor.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Method">
      <summary>
        <para>       Attribute can be applied to a method.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Property">
      <summary>
        <para>       Attribute can be applied to a property.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Field">
      <summary>
        <para>       Attribute can be applied to a field.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Event">
      <summary>
        <para>       Attribute can be applied to an event.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Interface">
      <summary>
        <para>       Attribute can be applied to an interface.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Parameter">
      <summary>
        <para>       Attribute can be applied to a parameter.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.Delegate">
      <summary>
        <para>       Attribute can be applied to a delegate.
      </para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.ReturnValue">
      <summary>
        <para>Attribute can be applied to a return value.</para>
      </summary>
    </member>
    <member name="F:System.AttributeTargets.All">
      <summary>
        <para> Attribute can be applied to any application element.
      </para>
      </summary>
    </member>
    <member name="T:System.AttributeUsageAttribute">
      <summary>
        <para> Specifies the usage of
      another attribute class. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.AttributeUsageAttribute" /> class with the specified
   list of <see cref="T:System.AttributeTargets" />, the <see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> value, and the <see cref="P:System.AttributeUsageAttribute.Inherited" />
   value.</para>
      </summary>
      <param name="validOn">The set of values combined using a bitwise OR operation to indicate which program elements are valid.</param>
    </member>
    <member name="P:System.AttributeUsageAttribute.ValidOn">
      <summary>
        <para>Gets a set of values identifying which program elements that the indicated attribute can be applied to.</para>
      </summary>
    </member>
    <member name="P:System.AttributeUsageAttribute.AllowMultiple">
      <summary>
        <para> Gets or sets a Boolean value indicating whether more than one instances of the indicated attribute can be specified
      for a single program element.</para>
      </summary>
    </member>
    <member name="P:System.AttributeUsageAttribute.Inherited">
      <summary>
        <para> Gets or sets a Boolean value indicating whether the
      indicated attribute is inherited by derived classes or overridden members.</para>
      </summary>
    </member>
    <member name="T:System.BadImageFormatException">
      <summary>
        <para> The exception that is thrown when the file image of a
      DLL or an executable program is invalid.</para>
      </summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class.
</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.BadImageFormatException" />
class with a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.BadImageFormatException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> 
class with a specified error message and file name.</para>
      </summary>
      <param name="message">A message that describes the error.</param>
      <param name="fileName">The full name of the file with the invalid image.</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.BadImageFormatException" />
class with a specified error message and a reference to the inner exception
that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name=" fileName"> The full name of the file with the invalid image.</param>
      <param name=" inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.BadImageFormatException.ToString">
      <summary>
        <para>Returns the fully qualified name of this exception and
      possibly the error message, the name of the inner exception, and the stack trace.</para>
      </summary>
      <returns>
        <para>A string containing the fully qualified name of this
      exception and possibly the error message, the name of the inner exception, and
      the stack trace.</para>
      </returns>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class with serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.BadImageFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with
   the file name, assembly cache log, and additional exception information.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name=" context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.BadImageFormatException.Message">
      <summary>
        <para>Gets the error message and the name of the file that
      caused this exception.</para>
      </summary>
    </member>
    <member name="P:System.BadImageFormatException.FileName">
      <summary>
        <para>Gets the name of the file that causes this exception.</para>
      </summary>
    </member>
    <member name="P:System.BadImageFormatException.FusionLog">
      <summary>
        <para> Gets the log file that describes why an assembly load failed.</para>
      </summary>
    </member>
    <member name="T:System.BitConverter">
      <summary>
        <para>Converts base data types to an array of bytes, and an array of bytes to base 
       data types.</para>
      </summary>
    </member>
    <member name="F:System.BitConverter.IsLittleEndian">
      <summary>
        <para>Indicates the byte order ("endianess") in which data is stored in this 
       computer architecture.</para>
      </summary>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Boolean)">
      <summary>
        <para>Returns the specified Boolean value as an array of bytes.</para>
      </summary>
      <param name=" value">A Boolean value.</param>
      <returns>
        <para>An array of bytes with length 1.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Char)">
      <summary>
        <para>Returns the specified Unicode character value as an array of bytes.</para>
      </summary>
      <param name=" value">A character to convert.</param>
      <returns>
        <para>An array of bytes with length 2.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int16)">
      <summary>
        <para>Returns the specified 16-bit signed integer value as an array of bytes.</para>
      </summary>
      <param name=" value">The number to convert.</param>
      <returns>
        <para>An array of bytes with length 2.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int32)">
      <summary>
        <para>Returns the specified 32-bit signed integer value as an array of bytes.</para>
      </summary>
      <param name=" value">The number to convert.</param>
      <returns>
        <para>An array of bytes with length 4.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int64)">
      <summary>
        <para>Returns the specified 64-bit signed integer value as an array of bytes.</para>
      </summary>
      <param name=" value">The number to convert.</param>
      <returns>
        <para>An array of bytes with length 8.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt16)">
      <summary>
        <para>Returns the specified 16-bit unsigned integer value as an array of bytes.</para>
      </summary>
      <param name=" value">The number to convert.</param>
      <returns>
        <para>An array of bytes with length 2.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt32)">
      <summary>
        <para>Returns the specified 32-bit unsigned integer value as an array of bytes.</para>
      </summary>
      <param name=" value">The number to convert.</param>
      <returns>
        <para>An array of bytes with length 4.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt64)">
      <summary>
        <para>Returns the specified 64-bit unsigned integer value as an array of bytes.</para>
      </summary>
      <param name=" value">The number to convert.</param>
      <returns>
        <para>An array of bytes with length 8.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Single)">
      <summary>
        <para>Returns the specified single-precision floating point value as an array of 
       bytes.</para>
      </summary>
      <param name=" value">The number to convert.</param>
      <returns>
        <para>An array of bytes with length 4.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Double)">
      <summary>
        <para>Returns the specified double-precision floating point value as an array of 
       bytes.</para>
      </summary>
      <param name=" value">The number to convert.</param>
      <returns>
        <para>An array of bytes with length 8.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a Unicode character converted from two bytes at a specified position 
       in a byte array.</para>
      </summary>
      <param name=" value">An array.</param>
      <param name=" startIndex">The starting position within <paramref name="value" /> .</param>
      <returns>
        <para>A character formed by two bytes beginning at <paramref name="startIndex" />.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a 16-bit signed integer converted from two bytes at a specified 
       position in a byte array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>A 16-bit signed integer formed by two bytes beginning at 
    <paramref name="startIndex" />.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a 32-bit signed integer converted from four bytes at a specified 
       position in a byte array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>A 32-bit signed integer formed by four bytes beginning at 
    <paramref name="startIndex." /></para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a 64-bit signed integer converted from eight bytes at a specified 
       position in a byte array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>A 64-bit signed integer formed by eight bytes beginning at 
    <paramref name="startIndex" />.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a 16-bit unsigned integer converted from two bytes at a specified 
       position in a byte array.</para>
      </summary>
      <param name=" value">The array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>A 16-bit unsigned integer formed by two bytes beginning at <paramref name="startIndex" /> 
 .</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a 32-bit unsigned integer converted from four bytes at a specified 
       position in a byte array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>A 32-bit unsigned integer formed by four bytes beginning at 
    <paramref name="startIndex" />.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a 64-bit unsigned integer converted from eight bytes at a specified 
       position in a byte array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>A 64-bit unsigned integer formed by the eight bytes beginning at 
    <paramref name="startIndex" />.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a single-precision floating point number converted from four bytes at 
       a specified position in a byte array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>A single-precision floating point number formed by four bytes beginning at 
    <paramref name="startIndex" />.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a double-precision floating point number converted from eight bytes 
       at a specified position in a byte array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>A double precision floating point number formed by eight bytes beginning at 
    <paramref name="startIndex" />.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Returns a <see langword="String" /> converted from a specified number of bytes 
    at a specified position in a byte array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <param name=" length">The number of bytes to convert.</param>
      <returns>
        <para>A <see cref="T:System.String" /> of 
    hexadecimal pairs separated by hyphens, where each pair represents the
    corresponding element in <paramref name="value" />; for example, "7F-2C-4A".</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[])">
      <summary>
        <para>Returns a <see langword="String" /> converted from the elements of a byte 
    array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <returns>
        <para>A <see cref="T:System.String" /> of 
    hexadecimal pairs separated by hyphens, where each pair represents the
    corresponding element in <paramref name="value;" /> for example, "7F-2C-4A".</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a <see langword="String" /> converted from the elements of a byte array 
    starting at a specified array position.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>A <see cref="T:System.String" /> of 
    hexadecimal pairs separated by hyphens, where each pair represents the
    corresponding element in <paramref name="value" />; for example, "7F-2C-4A".</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a Boolean value converted from one byte at a specified position in a 
       byte array.</para>
      </summary>
      <param name=" value">An array of bytes.</param>
      <param name=" startIndex">The starting position within <paramref name="value" />.</param>
      <returns>
        <para>
          <see langword="true " />if the byte at <paramref name="startIndex" /> in <paramref name="value" /> is 
    nonzero; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
      <summary>
        <para>Converts the specified double-precision floating point 
      number to a 64-bit signed integer.</para>
      </summary>
      <param name="value">The number to convert.</param>
      <returns>
        <para>A 64-bit signed integer whose value is equivalent to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
      <summary>
        <para>Converts the specified 64-bit signed integer to a 
      double-precision floating point number.</para>
      </summary>
      <param name="value">The number to convert.</param>
      <returns>
        <para>A double-precision floating point number whose value is equivalent to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="T:System.Boolean">
      <summary>
        <para> Represents a Boolean value.</para>
      </summary>
    </member>
    <member name="F:System.Boolean.TrueString">
      <summary>
        <para>Represents the Boolean value <see langword="true" /> as a string. This 
 field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Boolean.FalseString">
      <summary>
        <para>Represents the Boolean value <see langword="false" /> as a string. This 
 field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.Boolean.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A hash code for the current <see cref="T:System.Boolean" />.</para>
      </returns>
    </member>
    <member name="M:System.Boolean.ToString">
      <summary>
        <para>Converts the value of this instance to its equivalent 
 string
 representation. </para>
      </summary>
      <returns>
        <para>
          <see cref="F:System.Boolean.TrueString" /> if the
 value of this instance is <see langword="true" />, or
<see cref="F:System.Boolean.FalseString" /> if the value of this instance is 
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Boolean.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the value of this instance to its equivalent 
 string representation.</para>
      </summary>
      <param name=" provider">(Reserved) An <see cref="T:System.IFormatProvider" /> object.</param>
      <returns>
        <para>
          <see cref="F:System.Boolean.TrueString" /> if the
 value of this instance is <see langword="true" />, or
<see cref="F:System.Boolean.FalseString" /> if the value of this instance is 
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Boolean.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
 object.</para>
      </summary>
      <param name=" obj">An object to compare to this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.Boolean" /> and has the
 same value as this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
 their relative values.</para>
      </summary>
      <param name=" obj">An object to compare to this instance, or <see langword="null" />.</param>
      <returns>
        <para>A signed integer that indicates the relative order of this instance and
 <paramref name="obj" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less
 than
 zero</term>
            <description>This instance is <see langword="false" /> and
 <paramref name="obj" /> is <see langword="true" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance and <paramref name="obj" /> are equal
 (either both are <see langword="true" /> or both are <see langword="false" />
 ).</description>
          </item>
          <item>
            <term> Greater
 than zero</term>
            <description>
              <para>This instance is <see langword="true" /> and <paramref name="obj" /> is
 <see langword="false" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="obj" /> is
<see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Boolean.Parse(System.String)">
      <summary>
        <para>Converts the specified string representation of a logical value to
 its <see cref="T:System.Boolean" />
 equivalent.</para>
      </summary>
      <param name=" value">A string containing the value to convert.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is equivalent to <see cref="F:System.Boolean.TrueString" />;
 otherwise,
<see langword="false." /></para>
      </returns>
    </member>
    <member name="M:System.Boolean.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Boolean" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.Boolean" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.Buffer">
      <summary>
        <para>Manipulates unmanaged memory represented as arrays of bytes.</para>
      </summary>
    </member>
    <member name="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>
        <para> Copies a specified number of bytes from a source array starting at a 
       particular offset to a destination array starting at a particular offset.</para>
      </summary>
      <param name="src">The source buffer.</param>
      <param name="srcOffset">The byte offset into <paramref name="src" />.</param>
      <param name="dst">The destination buffer.</param>
      <param name="dstOffset">The byte offset into <paramref name="dst" />.</param>
      <param name="count">The number of bytes to copy.</param>
    </member>
    <member name="M:System.Buffer.GetByte(System.Array,System.Int32)">
      <summary>
        <para>Retrieves the byte at a specified location in a specified array.</para>
      </summary>
      <param name="array">An array.</param>
      <param name="index">A location in the array.</param>
      <returns>
        <para>Returns
       the <paramref name="index" /> byte in the array.</para>
      </returns>
    </member>
    <member name="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
      <summary>
        <para>Assigns a specified value to a byte at a particular location in a specified array.</para>
      </summary>
      <param name="array">An array.</param>
      <param name="index">A location in the array.</param>
      <param name="value">A value to assign.</param>
    </member>
    <member name="M:System.Buffer.ByteLength(System.Array)">
      <summary>
        <para>Returns
       the number of bytes in the specified array.</para>
      </summary>
      <param name="array">An array.</param>
      <returns>
        <para>The
       number of bytes in the array.</para>
      </returns>
    </member>
    <member name="T:System.Byte">
      <summary>
        <para>Represents an 8-bit unsigned integer.</para>
      </summary>
    </member>
    <member name="F:System.Byte.MaxValue">
      <summary>
        <para> Represents the largest possible value of a <see cref="T:System.Byte" />. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Byte.MinValue">
      <summary>
        <para> Represents the smallest possible value of a <see cref="T:System.Byte" />. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Byte.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
 their relative values.</para>
      </summary>
      <param name=" value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed integer that indicates the relative order of this instance and
 <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
 <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Byte.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
 object.</para>
      </summary>
      <param name=" obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Byte" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Byte.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A hash code for the current <see cref="T:System.Byte" /> .</para>
      </returns>
    </member>
    <member name="M:System.Byte.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to
 its <see cref="T:System.Byte" />
 equivalent.</para>
      </summary>
      <param name=" s">A string containinga number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <returns>
        <para>The <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a
 specified style to its <see cref="T:System.Byte" />
 equivalent.</para>
      </summary>
      <param name=" s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" /> . </param>
      <param name=" style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicate the permitted format of <paramref name="s" />. If <paramref name="style" /> is <see langword="null" />, the string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style. </param>
      <returns>
        <para>The <see cref="T:System.Byte" />
value equivalent to the number contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a specified
 culture-specific format to its <see cref="T:System.Byte" />
 equivalent.</para>
      </summary>
      <param name=" s">A string containing a number to convert. The string is interpretedusing the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is <see langword="null" />, the current system culture is used.</param>
      <returns>
        <para> The <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a specified style and
 culture-specific format to its <see cref="T:System.Byte" />
 equivalent.</para>
      </summary>
      <param name=" s">A string containinga number to convert. The string is interpreted using the style specified by <paramref name="style" /> .</param>
      <param name=" style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicate the permitted format of <paramref name="s" />. If <paramref name="style" /> is <see langword="null" />, the string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is <see langword="null" />, the current system culture is used.</param>
      <returns>
        <para>The <see cref="T:System.Byte" />
value equivalent to the number contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Byte.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its
 equivalent string.</para>
      </summary>
      <returns>
        <para> The value of
 this instance.</para>
      </returns>
    </member>
    <member name="M:System.Byte.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string using the specified format. </para>
      </summary>
      <param name=" format">A string thatspecifies the return format. See <see cref="M:System.Byte.ToString(System.String,System.IFormatProvider)" /> for a list of valid values.</param>
      <returns>
        <para> The value of this instance, formatted as
 specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.Byte.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string using the specified culture-specific
 format information. </para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
      <returns>
        <para> The value of this instance, formatted as
 specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Byte.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string using the specified format and
 culture-specific format information. </para>
      </summary>
      <param name=" format">A string thatspecifies the return format.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
      <returns>
        <para>The value of this instance, formatted as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Byte.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Byte" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.Byte" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.CannotUnloadAppDomainException">
      <summary>
        <para>The exception that is thrown when an attempt to unload
      an application domain fails.</para>
      </summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException" /> class
   with a specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. </param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException" /> class from serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Char">
      <summary>
        <para> Represents a Unicode character.
      </para>
      </summary>
    </member>
    <member name="F:System.Char.MaxValue">
      <summary>
        <para>Represents the largest possible value of a <see cref="T:System.Char" />. This field is
 constant.</para>
      </summary>
    </member>
    <member name="F:System.Char.MinValue">
      <summary>
        <para> Represents the smallest possible value of a <see cref="T:System.Char" />. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Char.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Char.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" obj">An object to compare with this instance or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Char" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Char.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
      their relative values.</para>
      </summary>
      <param name=" value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
   <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
      <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
      <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
      <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Char.ToString">
      <summary>
        <para>Converts the value of this instance to its equivalent
      string
      representation. </para>
      </summary>
      <returns>
        <para>The string representation of
      the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.Char.ToString(System.IFormatProvider)">
      <summary>
        <para> Converts the value of this instance to its equivalent
      string representation using the specified culture-specific
      format information. </para>
      </summary>
      <param name=" provider">(Reserved) An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
      <returns>
        <para>The string representation of the value of this instance as
      specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Char.ToString(System.Char)">
      <summary>
        <para> Converts the specified Unicode character to its
      equivalent string
      representation. </para>
      </summary>
      <param name=" c">A Unicode character.</param>
      <returns>
        <para>The string
      representation of the value of <paramref name="c" />.</para>
      </returns>
    </member>
    <member name="M:System.Char.Parse(System.String)">
      <summary>
        <para>Converts the value of the specified string to its
      equivalent Unicode character.</para>
      </summary>
      <param name=" s">A string containinga single character or <see langword="null" />.</param>
      <returns>
        <para> A Unicode character equivalent to the sole character in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Char.IsDigit(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as a
      decimal digit.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is a decimal digit;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsLetter(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as an
      alphabetic letter.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is an alphabetic letter;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as white space.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is white space;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsUpper(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as an uppercase letter.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is an uppercase letter;
 otherwise, <see langword="false" />.
 </para>
      </returns>
    </member>
    <member name="M:System.Char.IsLower(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as a lowercase letter.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is a lowercase letter;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsPunctuation(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as a punctuation mark.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is a punctuation mark;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as an alphabetic letter or a decimal digit.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is an alphabetic letter or a decimal digit;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)">
      <summary>
        <para>Converts the value of a specified Unicode character to its uppercase
 equivalent using specified culture-specific formatting information.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" qualify="true" /> object that supplies culture-specific formatting information, or <see langword="null" />. </param>
      <returns>
        <para> The uppercase equivalent of <paramref name="c" />, formatted according to <paramref name="culture" />.</para>
        <para>-or-</para>
        <para>The unchanged value of <paramref name="c" />, if <paramref name="c" /> is
already uppercase or not alphabetic.</para>
      </returns>
    </member>
    <member name="M:System.Char.ToUpper(System.Char)">
      <summary>
        <para>Converts the value of a Unicode character to its uppercase equivalent. </para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para> The uppercase equivalent of <paramref name="c" />.</para>
        <para>-or-</para>
        <para>The unchanged value of <paramref name="c" />, if <paramref name="c" /> is
already uppercase or not alphabetic.</para>
      </returns>
    </member>
    <member name="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)">
      <summary>
        <para>Converts the value of a specified Unicode character to its lowercase
      equivalent using specified culture-specific formatting information.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" qualify="true" /> object that supplies culture-specific formatting information, or <see langword="null" />. </param>
      <returns>
        <para> The lowercase equivalent of <paramref name="c" />, formatted according to <paramref name="culture" />.</para>
        <para>-or-</para>
        <para>The unchanged value of <paramref name="c" />, if <paramref name="c" /> is
already lowercase or not alphabetic.</para>
      </returns>
    </member>
    <member name="M:System.Char.ToLower(System.Char)">
      <summary>
        <para>Converts the value of a Unicode character to its lowercase equivalent. </para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para> The lowercase equivalent of <paramref name="c" />.</para>
        <para>-or-</para>
        <para>The unchanged value of <paramref name="c" />, if <paramref name="c" /> is
already lowercase or not alphabetic.</para>
      </returns>
    </member>
    <member name="M:System.Char.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Char" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.Char" qualify="true" />.</para>
      </returns>
    </member>
    <member name="M:System.Char.IsControl(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized
      as a control character.</para>
      </summary>
      <param name="c">A Unicode character.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c" /> is a control character; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Char.IsControl(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as a control character.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is a control character;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsDigit(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as a decimal digit.</para>
      </summary>
      <param name=" s">A <see cref="T:System.String" />.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is a decimal digit;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsLetter(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as an alphabetic character.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is an alphabetic character;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as an alphabetic character or a decimal digit.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is an alphabetic character or a decimal digit;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsLower(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as a lowercase letter.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is a lowercase letter;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsNumber(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as a
      decimal digit or hexadecimal number.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is a decimal digit or hexadecimal number;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsNumber(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as a decimal digit or hexadecimal number.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is a decimal digit or hexadecimal number;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsPunctuation(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as a punctuation mark.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is a punctuation mark;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsSeparator(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as a
      separator character.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is a separator character;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsSeparator(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as a separator character.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is a separator character;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsSurrogate(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as a
      surrogate character.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is a surrogate character;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsSurrogate(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as a surrogate character.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is a surrogate character;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsSymbol(System.Char)">
      <summary>
        <para>Indicates whether the specified Unicode character is categorized as a
      symbol character.</para>
      </summary>
      <param name="c">A Unicode character. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="c " />is a symbol character;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsSymbol(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as a symbol character.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is a symbol character;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.IsUpper(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified 
 position in a specified string is categorized as an uppercase letter.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
 character at position <paramref name="index" /> in <paramref name="s " />is an uppercase letter;
 otherwise, <see langword="false" />.
 </para>
      </returns>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.String,System.Int32)">
      <summary>
        <para>Indicates whether the character at the specified
      position in a specified string is categorized as white space.</para>
      </summary>
      <param name=" s">A string.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   character at position <paramref name="index" /> in <paramref name="s " />is white space;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.Char)">
      <summary>
        <para> Categorizes a specified Unicode character into a group
      identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</para>
      </summary>
      <param name="c">A Unicode character.</param>
      <returns>
        <para>A <see cref="T:System.Globalization.UnicodeCategory" /> value
   that identifies the group that contains <paramref name="c" />.</para>
      </returns>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.String,System.Int32)">
      <summary>
        <para>Categorizes the character at the specified position in a
      specified string
      into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</para>
      </summary>
      <param name=" s">A <see cref="T:System.String" />.</param>
      <param name="index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>A <see cref="T:System.Globalization.UnicodeCategory" /> enumerated constant that identifies the
   group that contains the character at position <paramref name="index" />
   in
<paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Char.GetNumericValue(System.Char)">
      <summary>
        <para> Converts the specified numeric Unicode character to a double-precision floating
      point number.</para>
      </summary>
      <param name="c">A Unicode character.</param>
      <returns>
        <para>The numeric value of <paramref name="c" /> if that character represents a number;
   otherwise, -1.0.</para>
      </returns>
    </member>
    <member name="M:System.Char.GetNumericValue(System.String,System.Int32)">
      <summary>
        <para>Converts the numeric Unicode character at the specified
      position in a specified string to a
      double-precision floating point number.</para>
      </summary>
      <param name=" s">A <see cref="T:System.String" />.</param>
      <param name=" index">The character position in <paramref name="s" />.</param>
      <returns>
        <para>The numeric value of the character at position <paramref name="index" /> in <paramref name="s" />
if that character represents a number; otherwise, -1.</para>
      </returns>
    </member>
    <member name="T:System.CharEnumerator">
      <summary>
        <para> Supports iterating over a <see cref="T:System.String" /> and reading its individual
   characters.</para>
      </summary>
    </member>
    <member name="M:System.CharEnumerator.Clone">
      <summary>
        <para>Creates a copy of this instance.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Object" /> that is a copy of this instance.</para>
      </returns>
    </member>
    <member name="M:System.CharEnumerator.MoveNext">
      <summary>
        <para> Increments the index to the next
      character of the enumerated string.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the index is successfully incremented and within the enumerated string; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.CharEnumerator.Reset">
      <summary>
        <para> Initializes the index to a position logically before the
 first character of the enumerated string.</para>
      </summary>
    </member>
    <member name="P:System.CharEnumerator.Current">
      <summary>
        <para> Gets the character in the enumerated string currently
      indexed by this instance.</para>
      </summary>
    </member>
    <member name="T:System.CLSCompliantAttribute">
      <summary>
        <para> Indicates whether a program element is compliant with the Common Language Specification (CLS).
      This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.CLSCompliantAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Initializes an instance of the <see cref="T:System.CLSCompliantAttribute" /> class with a Boolean value 
    indicating whether the indicated program element is CLS-compliant.</para>
      </summary>
      <param name="isCompliant">
        <see langword="true" /> if CLS-compliant; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.CLSCompliantAttribute.IsCompliant">
      <summary>
        <para>Gets the Boolean value indicating whether the indicated program element is CLS-compliant.</para>
      </summary>
    </member>
    <member name="T:System.TypeUnloadedException">
      <summary>
        <para> The exception that is thrown when
      there is an attempt to access an unloaded class.</para>
      </summary>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TypeUnloadedException" /> 
class.</para>
      </summary>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TypeUnloadedException" /> class
   with a specified error message.</para>
      </summary>
      <param name="message"> The message that describes the error.</param>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TypeUnloadedException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TypeUnloadedException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Console">
      <summary>
        <para> Represents the standard input, output, and error streams for console
      applications. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Console.OpenStandardError">
      <summary>
        <para>Acquires the standard error stream.</para>
      </summary>
      <returns>
        <para> The standard error stream.</para>
      </returns>
    </member>
    <member name="M:System.Console.OpenStandardError(System.Int32)">
      <summary>
        <para>Acquires the standard error stream, set to a specified buffer size.</para>
      </summary>
      <param name=" bufferSize">The internal stream buffer size.</param>
      <returns>
        <para>The standard error stream.</para>
      </returns>
    </member>
    <member name="M:System.Console.OpenStandardInput">
      <summary>
        <para>Acquires the standard input stream.</para>
      </summary>
      <returns>
        <para> The standard input stream.</para>
      </returns>
    </member>
    <member name="M:System.Console.OpenStandardInput(System.Int32)">
      <summary>
        <para>Acquires the standard input stream, set to a specified buffer size.</para>
      </summary>
      <param name=" bufferSize">The internal stream buffer size.</param>
      <returns>
        <para>The standard input stream.</para>
      </returns>
    </member>
    <member name="M:System.Console.OpenStandardOutput">
      <summary>
        <para>Acquires the standard output stream.</para>
      </summary>
      <returns>
        <para> The standard output stream.</para>
      </returns>
    </member>
    <member name="M:System.Console.OpenStandardOutput(System.Int32)">
      <summary>
        <para>Acquires the standard output stream, set to a specified buffer size.</para>
      </summary>
      <param name=" bufferSize">The internal stream buffer size.</param>
      <returns>
        <para>The standard output stream.</para>
      </returns>
    </member>
    <member name="M:System.Console.SetIn(System.IO.TextReader)">
      <summary>
        <para> Sets the <see cref="P:System.Console.In" /> property 
   to the specified <see cref="T:System.IO.TextReader" /> .</para>
      </summary>
      <param name="newIn">A <see cref="T:System.IO.TextReader" /> stream that is the new standard input. </param>
    </member>
    <member name="M:System.Console.SetOut(System.IO.TextWriter)">
      <summary>
        <para> Sets the <see cref="P:System.Console.Out" /> property 
   to the specified <see cref="T:System.IO.TextWriter" />
   
   .</para>
      </summary>
      <param name="newOut">A <see cref="T:System.IO.TextWriter" /> stream that is the new standard output.</param>
    </member>
    <member name="M:System.Console.SetError(System.IO.TextWriter)">
      <summary>
        <para> Sets the <see cref="P:System.Console.Error" /> property to the specified <see cref="T:System.IO.TextWriter" />.</para>
      </summary>
      <param name="newError">A <see cref="T:System.IO.TextWriter" /> stream that is the new standard error output. </param>
    </member>
    <member name="M:System.Console.Read">
      <summary>
        <para> Reads the next character from the standard input
      stream.</para>
      </summary>
      <returns>
        <para>The next character
      from the input stream, or negative one (-1) if no more characters are
      available.</para>
      </returns>
    </member>
    <member name="M:System.Console.ReadLine">
      <summary>
        <para> Reads
      the next line of characters from the standard input stream.
      </para>
      </summary>
      <returns>
        <para> The next line from the input stream, or
   <see langword="null" />
   if no more characters are available.
   </para>
      </returns>
    </member>
    <member name="M:System.Console.WriteLine">
      <summary>
        <para> Writes the current line terminator to the standard output stream.
 </para>
      </summary>
    </member>
    <member name="M:System.Console.WriteLine(System.Boolean)">
      <summary>
        <para> Writes the text representation of the specified Boolean value, followed by
 the current line terminator, to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Char)">
      <summary>
        <para> Writes the specified Unicode character, followed by the
 current line terminator, value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Char[])">
      <summary>
        <para> Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream. </para>
      </summary>
      <param name="buffer">A Unicode character array. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream. </para>
      </summary>
      <param name="buffer">An array of Unicode characters. </param>
      <param name="index">The starting position in <paramref name="buffer" />. </param>
      <param name="count">The number of characters to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Decimal)">
      <summary>
        <para> Writes the text representation of the
 specified <see cref="T:System.Decimal" /> value, followed by the
 current line terminator,
 to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Double)">
      <summary>
        <para>Writes the text representation of the specified double-precision floating-point value, followed by
      the current line terminator, to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Single)">
      <summary>
        <para>Writes the text representation of the specified single-precision floating-point value, followed by
      the current line terminator, to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Int32)">
      <summary>
        <para>Writes the text representation of the specified 32-bit signed integer value, followed by
 the current line terminator, to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.UInt32)">
      <summary>
        <para>Writes the text representation of the specified 32-bit unsigned integer value, followed by
 the current line terminator, to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Int64)">
      <summary>
        <para>Writes the text representation of the specified 64-bit signed integer value, followed by
 the current line terminator, to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.UInt64)">
      <summary>
        <para>Writes the text representation of the specified 64-bit unsigned integer value, followed by
 the current line terminator, to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Object)">
      <summary>
        <para> Writes the text representation of the specified object, followed by
 the current line terminator, to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String)">
      <summary>
        <para> Writes the specified string value, followed by the current line terminator, to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object)">
      <summary>
        <para>Writes the specified object, followed by the current line terminator, to the standard output stream using the specified format
      information. </para>
      </summary>
      <param name="format">The format string. </param>
      <param name="arg0">Object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
      <summary>
        <para>Writes the specified objects, followed by the current line terminator, to the standard output stream using the specified format
      information. </para>
      </summary>
      <param name="format">The format string. </param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <para>Writes the specified objects, followed by the current line terminator, to the standard output stream using the specified format information. </para>
      </summary>
      <param name="format">The format string. </param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
      <param name="arg2">The third object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object,)">
      <summary>
        <para>Writes the specified objects and variable length parameter list, followed by the current line terminator, to the standard output stream using the specified format information. </para>
      </summary>
      <param name="format">The format string. </param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
      <param name="arg2">The third object to write using <paramref name="format" />. </param>
      <param name=" arg3">The fourth object to write using <paramref name="format" />.</param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object[])">
      <summary>
        <para>Writes the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information. </para>
      </summary>
      <param name="format">The format string. </param>
      <param name="arg">An array of objects to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object)">
      <summary>
        <para>Writes the specified object to the standard output stream using the specified format
      information. </para>
      </summary>
      <param name="format">The format string. </param>
      <param name="arg0">Object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object)">
      <summary>
        <para>Writes the specified objects to the standard output stream using the specified format
      information. </para>
      </summary>
      <param name="format">The format string. </param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <para>Writes the specified objects to the standard output stream using the specified format information. </para>
      </summary>
      <param name="format">The format string.</param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
      <param name="arg2">The third object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object,)">
      <summary>
        <para>Writes the specified objects and variable length parameter list to the standard output stream using the specified format information. </para>
      </summary>
      <param name="format">The format string. </param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
      <param name="arg2">The third object to write using <paramref name="format" />. </param>
      <param name=" arg3">The fourth object to write using <paramref name="format" />.</param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object[])">
      <summary>
        <para>Writes the specified array of objects to the standard output stream using the specified format information. </para>
      </summary>
      <param name="format">The format string. </param>
      <param name="arg">An array of objects to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.Write(System.Boolean)">
      <summary>
        <para> Writes the text representation of
 the specified Boolean value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Char)">
      <summary>
        <para> Writes the
 specified Unicode character value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Char[])">
      <summary>
        <para> Writes the specified array of Unicode characters to the standard output stream. </para>
      </summary>
      <param name="buffer">A Unicode character array. </param>
    </member>
    <member name="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Writes the specified subarray of Unicode characters to the standard output stream. </para>
      </summary>
      <param name="buffer">An array of Unicode characters. </param>
      <param name="index">The starting position in <paramref name="buffer" />. </param>
      <param name="count">The number of characters to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Double)">
      <summary>
        <para>Writes the text representation of the specified
      double-precision floating-point value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Decimal)">
      <summary>
        <para> Writes the text representation of the
 specified <see cref="T:System.Decimal" /> value
 to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Single)">
      <summary>
        <para>Writes the text representation of the specified
      single-precision floating-point value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Int32)">
      <summary>
        <para>Writes the text representation of the specified
 32-bit signed integer value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.UInt32)">
      <summary>
        <para>Writes the text representation of the specified
 32-bit unsigned integer value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Int64)">
      <summary>
        <para>Writes the text representation of the specified
 64-bit signed integer value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.UInt64)">
      <summary>
        <para>Writes the text representation of the specified
 64-bit unsigned integer value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Object)">
      <summary>
        <para> Writes the text representation
      of the specified object to the standard output stream.</para>
      </summary>
      <param name="value">The value to write, or <see langword="null" />. </param>
    </member>
    <member name="M:System.Console.Write(System.String)">
      <summary>
        <para> Writes the specified string value to the standard output stream.</para>
      </summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="P:System.Console.Error">
      <summary>
        <para>Gets the standard error output stream.</para>
      </summary>
    </member>
    <member name="P:System.Console.In">
      <summary>
   Gets the standard input stream.
</summary>
    </member>
    <member name="P:System.Console.Out">
      <summary>
        <para>Gets the standard output stream.</para>
      </summary>
    </member>
    <member name="T:System.ContextMarshalException">
      <summary>
        <para>The exception that is thrown when an attempt to
      marshal an object across a context boundary fails.</para>
      </summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor">
      <summary>
        <para>Initializes a new instance of the 
    <see cref="T:System.ContextMarshalException" /> 
    class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the 
    <see cref="T:System.ContextMarshalException" /> 
    class with a specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ContextMarshalException" /> 
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ContextMarshalException" />
class with serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Convert">
      <summary>
        <para>Converts a base data type to another base data type.</para>
      </summary>
    </member>
    <member name="F:System.Convert.DBNull">
      <summary>
        <para>A constant representing a database column absent of 
      data; that is, database null.</para>
      </summary>
    </member>
    <member name="M:System.Convert.GetTypeCode(System.Object)">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for the specified object.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface.</param>
      <returns>
        <para>The <see cref="T:System.TypeCode" qualify="true" /> for <paramref name="value" />, or <see cref="F:System.TypeCode.Empty" qualify="true" /> if <paramref name="value" />
is <see langword="null" />
.</para>
      </returns>
    </member>
    <member name="M:System.Convert.IsDBNull(System.Object)">
      <summary>
        <para>Returns an indication whether the specified object is of 
      type <see cref="F:System.TypeCode.DBNull" />.</para>
      </summary>
      <param name="value">An object.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is of type <see cref="F:System.TypeCode.DBNull" qualify="true" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
      <summary>
        <para> Returns an <see cref="T:System.Object" /> with the specified <see cref="T:System.TypeCode" /> and whose
   value is equivalent to the specified object.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface.</param>
      <param name=" typeCode">A <see cref="T:System.TypeCode" /></param>
      <returns>
        <para>An object whose underlying <see cref="T:System.TypeCode" /> is <paramref name="typeCode" /> and
   whose value is equivalent to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
      <summary>
        <para>Returns an <see cref="T:System.Object" /> with the specified <see cref="T:System.TypeCode" /> and whose value is equivalent to the specified
   object. A parameter supplies culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface.</param>
      <param name=" typeCode">A <see cref="T:System.TypeCode" />.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>An object whose underlying <see cref="T:System.TypeCode" /> is
<paramref name="typeCode" /> and whose value is equivalent to <paramref name="value" />.
   </para>
        <para>-or-</para>
        <para>
          <see langword="null" /> if <paramref name="value" /> is
<see langword="null" /> and <paramref name="typeCode" /> is <see cref="F:System.TypeCode.Empty" qualify="true" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type)">
      <summary>
        <para>Returns an <see cref="T:System.Object" /> with the specified <see cref="T:System.Type" /> and whose value is equivalent to the specified object.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface.</param>
      <param name=" conversionType">A <see cref="T:System.Type" />.</param>
      <returns>
        <para>An object whose <see cref="T:System.Type" /> is <paramref name="conversionType" />
and whose value is equivalent to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
      <summary>
        <para>Returns an <see cref="T:System.Object" /> with the specified
<see cref="T:System.Type" /> and whose value is equivalent to the specified
   object. A parameter supplies culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface.</param>
      <param name=" conversionType">A <see cref="T:System.Type" />.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> An object whose <see cref="T:System.Type" /> is
<paramref name="conversionType" /> and whose value is equivalent to <paramref name="value" />.
   </para>
        <para>-or-</para>
        <para>
          <see langword="null" />, if <paramref name="value" /> and <paramref name="conversionType" />
are <see langword="nulls" />. </para>
        <para>-or-</para>
        <para>
          <paramref name="value" />, if the <see cref="T:System.Type" /> of
<paramref name="value" /> and <paramref name="conversionType" /> are equal. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object)">
      <summary>
        <para>Converts the value of a specified <see cref="T:System.Object" /> to an equivalent Boolean
   value. </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="false" /> if <paramref name="value" /> equals <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <see langword="true" /> or <see langword="false" /> ; the result of invoking the <see langword="IConvertible.ToBoolean " /> method for the
underlying type of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to an equivalent
      Boolean value using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>
          <see langword="false" /> if <paramref name="value" /> equals <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <see langword="true" /> or <see langword="false" />; the result of invoking the <see langword="ToBoolean" /> method for the underlying type of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Boolean)">
      <summary>
        <para> Returns the specified Boolean value; no actual conversion is performed.</para>
      </summary>
      <param name="value">A Boolean.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.SByte)">
      <summary>
        <para> Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Char)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean
      value.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="value" /> is not zero; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int16)">
      <summary>
        <para>Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.</para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt32)">
      <summary>
        <para>Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int64)">
      <summary>
        <para>Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.</para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt64)">
      <summary>
        <para>Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.</para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a logical
   value to its Boolean equivalent.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> that contains the value of either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> equals <see cref="F:System.Boolean.TrueString" />, or
<see langword="false" /> if <paramref name="value" /> equals <see cref="F:System.Boolean.FalseString" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a logical value to
   its Boolean equivalent
   using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">A string that contains the value of either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</param>
      <param name=" provider">(Reserved) An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> equals <see cref="F:System.Boolean.TrueString" />, or
<see langword="false" /> if <paramref name="value" /> equals <see cref="F:System.Boolean.FalseString" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Single)">
      <summary>
        <para>Converts the value of the specified single-precision floating point number to an equivalent Boolean value.</para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an equivalent Boolean value.</para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent Boolean value.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Object)">
      <summary>
        <para>Converts the value of the specified
      <see cref="T:System.Object" /> to a Unicode character.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface.</param>
      <returns>
        <para>The Unicode character equivalent to the
      value of <paramref name="value" />.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.Char.MinValue" qualify="true" /> if <paramref name="value" /> equals <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to its equivalent Unicode
      character using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>The Unicode character equivalent to the value of <paramref name="value" />.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.Char.MinValue" qualify="true" /> if <paramref name="value" /> equals <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Boolean)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.Boolean" /> value.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Char)">
      <summary>
        <para>Returns the specified Unicode character value; no actual conversion is performed.</para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The Unicode character equivalent to the value of
      <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The Unicode character equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Int16)">
      <summary>
        <para>Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.</para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para>The Unicode character equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The Unicode character equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>The Unicode character equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt32)">
      <summary>
        <para>Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para>The Unicode character equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Int64)">
      <summary>
        <para>Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.</para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para>The Unicode character equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt64)">
      <summary>
        <para>Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.</para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para>The Unicode character equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.String)">
      <summary>
        <para> Converts the first character of a
      <see cref="T:System.String" />
   to a Unicode character.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> of length 1 or <see langword="null" />. </param>
      <returns>
        <para> The Unicode character equivalent to the first and only character in <paramref name="value." /></para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the first character of a
      <see cref="T:System.String" /> to a Unicode character using specified
      culture-specific formatting information.
      </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> of length 1 or <see langword="null" />. </param>
      <param name=" provider">(Reserved) An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> The Unicode character equivalent to the first and only character in <paramref name="value." /></para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Single)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A single-precision floating-point number.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Double)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A double-precision floating-point number.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Decimal)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToChar(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to an 8-bit signed integer.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>An 8-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to an 8-bit signed
   integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> An 8-bit signed integer equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent 8-bit signed integer.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.SByte)">
      <summary>
        <para>Returns the specified 8-bit signed integer; no actual conversion is performed.</para>
      </summary>
      <param name="value">An 8-bit signed integer.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Char)">
      <summary>
        <para>Converts the value of the specified Unicode character to the equivalent 8-bit signed integer. </para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>The 8-bit signed integer equivalent to 
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int16)">
      <summary>
        <para>Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.</para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para> The 8-bit signed integer equivalent of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt32)">
      <summary>
        <para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent 8-bit signed integer.
      </para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para> An 8-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int64)">
      <summary>
        <para> Converts the value of the specified 64-bit signed integer to an
      equivalent 8-bit signed integer.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para> An 8-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt64)">
      <summary>
        <para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent 8-bit signed integer.
      </para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para> An 8-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Single)">
      <summary>
        <para> Converts the value of the specified single-precision floating point number to an
      equivalent 8-bit signed integer.
      </para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an
      equivalent 8-bit signed integer. </para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent
   8-bit signed integer. </para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 8-bit signed integer.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>An 8-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 8-bit signed integer using
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>An 8-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to an 8-bit unsigned integer.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to an 8-bit unsigned
      integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> An 8-bit unsigned integer equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent 8-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Byte)">
      <summary>
        <para>Returns the specified 8-bit unsigned integer; no actual conversion is performed.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Char)">
      <summary>
        <para>Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer. </para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>The 8-bit unsigned integer equivalent to
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Int16)">
      <summary>
        <para>Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt32)">
      <summary>
        <para>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Int64)">
      <summary>
        <para>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt64)">
      <summary>
        <para>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the value of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Single)">
      <summary>
        <para>Converts the value of the specified single-precision floating point number to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value " />is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value " />is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Decimal)">
      <summary>
        <para>Converts the value of the specified
      <see cref="T:System.Decimal" /> number to an equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value " />is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 8-bit unsigned integer.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 8-bit signed integer using
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>An 8-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to a 16-bit signed integer.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A 16-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to a 16-bit signed
   integer using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A 16-bit signed integer equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent 16-bit signed integer.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Char)">
      <summary>
        <para>Converts the value of the specified Unicode character to the equivalent 16-bit signed integer. </para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>The 16-bit signed integer equivalent to
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The 16-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The 16-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para> The 16-bit signed integer equivalent of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt32)">
      <summary>
        <para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent 16-bit signed integer.
      </para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para> A 16-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int16)">
      <summary>
        <para>Returns the specified 16-bit signed integer; no actual conversion is performed.</para>
      </summary>
      <param name="value">A 16-bit signed integer.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int64)">
      <summary>
        <para> Converts the value of the specified 64-bit signed integer to an
      equivalent 16-bit signed integer.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para> A 16-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt64)">
      <summary>
        <para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent 16-bit signed integer.
      </para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para> A 16-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Single)">
      <summary>
        <para> Converts the value of the specified single-precision floating point number to an
      equivalent 16-bit signed integer.
      </para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 16-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an
      equivalent 16-bit signed integer. </para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 16-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent
   16-bit signed integer. </para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 16-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 16-bit signed integer.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>A 16-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 16-bit signed integer using
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A 16-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to a 16-bit unsigned integer.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to a 16-bit unsigned integer
   using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A 16-bit unsigned integer equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent 16-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Char)">
      <summary>
        <para>Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer. </para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>The 16-bit unsigned integer equivalent to
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int16)">
      <summary>
        <para>Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.</para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para>The 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para> The 16-bit unsigned integer equivalent of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt16)">
      <summary>
        <para>Returns the specified 16-bit unsigned integer; no actual conversion is performed.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt32)">
      <summary>
        <para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent 16-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para> A 16-bit unsigned integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int64)">
      <summary>
        <para> Converts the value of the specified 64-bit signed integer to an
      equivalent 16-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para> A 16-bit unsigned integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt64)">
      <summary>
        <para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent 16-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para> A 16-bit unsigned integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Single)">
      <summary>
        <para> Converts the value of the specified single-precision floating point number to an
      equivalent 16-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 16-bit unsigned integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an
      equivalent 16-bit unsigned integer. </para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 16-bit unsigned integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent
   16-bit unsigned integer. </para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 16-bit unsigned integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 16-bit unsigned integer.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 16-bit unsigned integer using
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to a 32-bit signed integer.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A 32-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to a 32-bit signed integer
   using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A 32-bit signed integer equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent 32-bit signed integer.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Char)">
      <summary>
        <para>Converts the value of the specified Unicode character to the equivalent 32-bit signed integer. </para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>The 32-bit signed integer equivalent to
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The 32-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int16)">
      <summary>
        <para> Converts the value of the specified 16-bit signed integer to an
      equivalent 32-bit signed integer.
      </para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para> A 32-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The 32-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt32)">
      <summary>
        <para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent 32-bit signed integer.
      </para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para> A 32-bit signed integer equivalent to the value of
      <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int32)">
      <summary>
        <para>Returns the specified 32-bit signed integer; no actual conversion is performed.</para>
      </summary>
      <param name="value">A 32-bit signed integer.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int64)">
      <summary>
        <para> Converts the value of the specified 64-bit signed integer to an
      equivalent 32-bit signed integer.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para> A 32-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt64)">
      <summary>
        <para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent 32-bit signed integer.
      </para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para> A 32-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Single)">
      <summary>
        <para> Converts the value of the specified single-precision floating point number to an
      equivalent 32-bit signed integer.
      </para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 32-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an
      equivalent 32-bit signed integer. </para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 32-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent
   32-bit signed integer. </para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 32-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 32-bit signed integer.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>A 32-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 32-bit signed integer using
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A 32-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to a 32-bit unsigned integer.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A 32-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to a 32-bit unsigned integer
   using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A 32-bit unsigned integer equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent 32-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Char)">
      <summary>
        <para>Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer. </para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>The 32-bit unsigned integer equivalent to
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The 32-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int16)">
      <summary>
        <para>Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>The 32-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>The 32-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para> The 32-bit unsigned integer equivalent of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt32)">
      <summary>
        <para>Returns the specified 32-bit unsigned integer; no actual conversion is performed.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int64)">
      <summary>
        <para> Converts the value of the specified 64-bit signed integer to an
      equivalent 32-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para> A 32-bit unsigned integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt64)">
      <summary>
        <para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent 32-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para> A 32-bit unsigned integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Single)">
      <summary>
        <para> Converts the value of the specified single-precision floating point number to an
      equivalent 32-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 32-bit unsigned integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an
      equivalent 32-bit unsigned integer. </para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 32-bit unsigned integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent
   32-bit unsigned integer. </para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 32-bit unsigned integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 32-bit signed integer.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>A 32-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent
   32-bit unsigned integer using the
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A 32-bit unsigned integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to a 64-bit signed integer.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A 64-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to a 64-bit signed integer
   using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A 64-bit signed integer equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent 64-bit signed integer.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Char)">
      <summary>
        <para>Converts the value of the specified Unicode character to the equivalent 64-bit signed integer. </para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>The 64-bit signed integer equivalent to
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The 64-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int16)">
      <summary>
        <para> Converts the value of the specified 16-bit signed integer to an
      equivalent 64-bit signed integer.
      </para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para> A 64-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The 64-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int32)">
      <summary>
        <para> Converts the value of the specified 32-bit signed integer to an
      equivalent 64-bit signed integer.
      </para>
      </summary>
      <param name="value">A 32-signed integer. </param>
      <returns>
        <para> The 64-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt32)">
      <summary>
        <para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent 64-bit signed integer.
      </para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para> A 64-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt64)">
      <summary>
        <para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent 64-bit signed integer.
      </para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para> A 64-bit signed integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int64)">
      <summary>
        <para>Returns the specified 64-bit signed integer; no actual conversion is performed.</para>
      </summary>
      <param name="value">A 64-bit signed integer.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Single)">
      <summary>
        <para> Converts the value of the specified single-precision floating point number to an
      equivalent 64-bit signed integer.
      </para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 64-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an
      equivalent 64-bit signed integer. </para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 64-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent
   64-bit signed integer. </para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 64-bit signed integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 64-bit signed integer.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>A 64-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent
   64-bit signed integer using the
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A 64-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to a 64-bit unsigned integer.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A 64-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to a 64-bit unsigned integer
   using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A 64-bit unsigned integer equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent 64-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Char)">
      <summary>
        <para>Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer. </para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>The 64-bit unsigned integer equivalent to
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The 64-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int16)">
      <summary>
        <para>Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.</para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para>The 64-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The 64-bit unsigned integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para> The 64-bit unsigned integer equivalent of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt32)">
      <summary>
        <para>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para> The 64-bit unsigned integer equivalent of
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int64)">
      <summary>
        <para> Converts the value of the specified 64-bit signed integer to an
      equivalent 64-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para> A 64-bit unsigned integer equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt64)">
      <summary>
        <para>Returns the specified 64-bit unsigned integer; no actual conversion is performed.</para>
      </summary>
      <param name="value">A 64-bit unsigned integer.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Single)">
      <summary>
        <para> Converts the value of the specified single-precision floating point number to an
      equivalent 64-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 64-bit unsigned integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an
      equivalent 64-bit unsigned integer. </para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 64-bit unsigned integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent
   64-bit unsigned integer. </para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>
          <paramref name="value" /> rounded to the nearest 64-bit unsigned integer. If <paramref name="value " /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent 64-bit signed integer.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>A 64-bit signed integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent
   64-bit unsigned integer using the
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A 64-bit unsigned integer equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to a single-precision floating point number.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A single-precision floating point number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to an single-precision floating point number
   using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A single-precision floating point number equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating point number.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating point number.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The single-precision floating point number equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Char)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int16)">
      <summary>
        <para> Converts the value of the specified 16-bit signed integer to an
      equivalent single-precision floating point number.
      </para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para> A single-precision floating point number equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating point number.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The single-precision floating point number equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating point number. </para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>A single-precision floating point number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt32)">
      <summary>
        <para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent single-precision floating point number.
      </para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para> A single-precision floating point number equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int64)">
      <summary>
        <para> Converts the value of the specified 64-bit signed integer to an
      equivalent single-precision floating point number.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para> A single-precision floating point number equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt64)">
      <summary>
        <para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent single-precision floating point number.
      </para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para> A single-precision floating point number equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Single)">
      <summary>
        <para>Returns the specified single-precision floating point number; no actual conversion is performed.</para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an
      equivalent single-precision floating point number. </para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>A single-precision floating point number equivalent to the value of <paramref name="value" />. </para>
        <paramref name="value " />is rounded using rounding to nearest. For example, when rounded to
two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.
</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent
   single-precision floating point number. </para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>A single-precision floating point number equivalent to the value of <paramref name="value" />.</para>
        <para>
          <paramref name="value " />is rounded using rounding to nearest. For example, when rounded
to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes
2.36.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent single-precision floating point number.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>A single-precision floating point number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent
   single-precision floating point number using the
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A single-precision floating point number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent single-precision floating point number.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to a double-precision floating point number.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A double-precision floating point number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to an double-precision floating point number
   using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A double-precision floating point number equivalent to the value of
      <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating point number.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating point number.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The double-precision floating point number equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int16)">
      <summary>
        <para> Converts the value of the specified 16-bit signed integer to an
      equivalent double-precision floating point number.
      </para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para> A double-precision floating point number equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Char)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating point number.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The double-precision floating point number equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating point number. </para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>A double-precision floating point number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt32)">
      <summary>
        <para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent double-precision floating point number.
      </para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para> A double-precision floating point number equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int64)">
      <summary>
        <para> Converts the value of the specified 64-bit signed integer to an
      equivalent double-precision floating point number.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para> A double-precision floating point number equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt64)">
      <summary>
        <para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent double-precision floating point number.
      </para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para> A double-precision floating point number equivalent to the value of
   <paramref name="value" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Single)">
      <summary>
        <para> Converts the value of the specified single-precision floating point number to an
      equivalent double-precision floating point number.
      </para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>A double-precision floating point number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Double)">
      <summary>
        <para>Returns the specified double-precision floating point number; no actual
      conversion is performed.</para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent
   double-precision floating point number. </para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>A double-precision floating point number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent double-precision floating point number.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>A double-precision floating point number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent
   double-precision floating point number using the
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A double-precision floating point number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent double-precision floating point number.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object)">
      <summary>
        <para> Converts the value of the specified
      <see cref="T:System.Object" /> to a <see cref="T:System.Decimal" /> number.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to an <see cref="T:System.Decimal" /> number
   using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A <see cref="T:System.Decimal" /> number equivalent to the value of
<paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to the equivalent <see cref="T:System.Decimal" /> number.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to the equivalent <see cref="T:System.Decimal" /> number.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Char)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int16)">
      <summary>
        <para> Converts the value of the specified 16-bit signed integer to an
      equivalent <see cref="T:System.Decimal" /> number.
      </para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para> A <see cref="T:System.Decimal" /> number equivalent to the value of
<paramref name="value" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to the equivalent <see cref="T:System.Decimal" /> number.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to an equivalent <see cref="T:System.Decimal" /> number. </para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt32)">
      <summary>
        <para> Converts the value of the specified 32-bit unsigned integer to an
      equivalent <see cref="T:System.Decimal" /> number.
      </para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para> A <see cref="T:System.Decimal" /> number equivalent to the value of
<paramref name="value" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int64)">
      <summary>
        <para> Converts the value of the specified 64-bit signed integer to an
      equivalent <see cref="T:System.Decimal" /> number.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para> A <see cref="T:System.Decimal" /> number equivalent to the value of
<paramref name="value" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt64)">
      <summary>
        <para> Converts the value of the specified 64-bit unsigned integer to an
      equivalent <see cref="T:System.Decimal" /> number.
      </para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para> A <see cref="T:System.Decimal" /> number equivalent to the value of
<paramref name="value" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Single)">
      <summary>
        <para>Converts the value of the specified single-precision floating point number to
      the equivalent <see cref="T:System.Decimal" /> number. </para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />. The <see cref="T:System.Decimal" />
contains 7 significant digits and is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to an
      equivalent <see cref="T:System.Decimal" /> number. </para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.
   The <see cref="T:System.Decimal" />
   contains 15 significant digits and is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an
   equivalent <see cref="T:System.Decimal" /> number.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent
<see cref="T:System.Decimal" /> number using the
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Decimal)">
      <summary>
        <para>Returns the specified <see cref="T:System.Decimal" /> number; no actual conversion is performed.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Boolean)">
      <summary>
        <para> Converts the value of the specified Boolean value
      to the equivalent <see cref="T:System.Decimal" /> number.
      </para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para> The number 1 if <paramref name="value" /> is <see langword="true" /> ; otherwise, 0.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.DateTime)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.DateTime)">
      <summary>
        <para>Returns the specified <see cref="T:System.DateTime" />; no actual conversion is performed.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object)">
      <summary>
        <para> Converts the value of the specified
   <see cref="T:System.Object" /> to a <see cref="T:System.DateTime" />.
      </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or <see langword="null" />. </param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of the specified <see cref="T:System.Object" /> to a <see cref="T:System.DateTime" />
using the specified culture-specific formatting information.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para> A <see cref="T:System.DateTime" /> equivalent to the value of
<paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a date and time to an
   equivalent <see cref="T:System.DateTime" />.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a date and time to convert. </param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent
<see cref="T:System.DateTime" /> using the
   specified culture-specific formatting information.
   </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> equivalent to the value of <paramref name="value" />. </para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.SByte)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Byte)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int16)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt16)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int32)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt32)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int64)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A 64-bit signed integer.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt64)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A 64-bit unsigned integer.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Boolean)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A Boolean value.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Char)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Single)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A single-precision floating point value.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Double)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A double-precision floating point value.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Decimal)">
      <summary>
        <para>Calling this method always throws <see cref="T:System.InvalidCastException" />.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> value.</param>
      <returns>
        <para>This conversion is not supported. No value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Object)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Object" /> to its
<see cref="T:System.String" /> 
representation. </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> or <see langword="null" />. </param>
      <returns>
        <para>The <see cref="T:System.String" />
representation of the value of <paramref name="value" />, or <see cref="F:System.String.Empty" qualify="true" /> if value
is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Object" /> to its equivalent <see cref="T:System.String" /> representation using the specified culture-specific formatting information. </para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> or <see langword="null" />. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>The <see cref="T:System.String" /> representation of the value of <paramref name="value" />, or <see cref="F:System.String.Empty" qualify="true" /> if <paramref name="value" /> is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean)">
      <summary>
        <para>Converts the value of the specified Boolean to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A Boolean value. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified Boolean to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A Boolean value. </param>
      <param name="provider">(Reserved) An instance of an <see cref="T:System.IFormatProvider" /> interface implementation.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Char)">
      <summary>
        <para>Converts the value of the specified Unicode character to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A Unicode character. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified Unicode character to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A Unicode character. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.SByte)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified 8-bit signed integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">An 8-bit signed integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified 8-bit unsigned integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16)">
      <summary>
        <para>Converts the value of the specified 16-bit signed integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified 16-bit signed integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified 16-bit unsigned integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified 32-bit signed integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32)">
      <summary>
        <para>Converts the value of the specified 32-bit unsigned integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified 32-bit unsigned integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64)">
      <summary>
        <para>Converts the value of the specified 64-bit signed integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified 64-bit signed integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64)">
      <summary>
        <para>Converts the value of the specified 64-bit unsigned integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified 64-bit unsigned integer to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A 64-bit unsigned integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single)">
      <summary>
        <para>Converts the value of the specified single-precision floating point number to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified single-precision floating point number to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A single-precision floating point number. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified double-precision floating point number to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A double-precision floating point number. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
        <para>
          <paramref name="provider" /> is ignored; it does not participate in this operation.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> number to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.DateTime" /> to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />. </param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.DateTime" /> to its equivalent <see cref="T:System.String" />
representation.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" />. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.String)">
      <summary>
        <para>Returns the specified instance of <see cref="T:System.String" />; no actual conversion is performed.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" />.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns the specified instance of <see cref="T:System.String" />; no actual conversion is performed.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>
        <para>Parameter <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.Int32)">
      <summary>
        <para> Converts
      the <see cref="T:System.String" /> representation of a number in a specified
      base to an equivalent 8-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to the number in
      <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
      <summary>
        <para> Converts
      the <see cref="T:System.String" /> representation of a number in a specified
      base to an equivalent 8-bit signed integer.
      </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>An 8-bit signed integer equivalent to the number in
      <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
      <summary>
        <para> Converts
      the <see cref="T:System.String" /> representation of a number in a specified
      base to an equivalent 16-bit signed integer.
      </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>A 16-bit signed integer equivalent to the number in
      <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
      <summary>
        <para> Converts
      the <see cref="T:System.String" /> representation of a number in a specified
      base to an equivalent 16-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>A 16-bit unsigned integer equivalent to the number in
      <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
      <summary>
        <para> Converts
      the <see cref="T:System.String" /> representation of a number in a specified
      base to an equivalent 32-bit signed integer.
      </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>A 32-bit signed integer equivalent to the number in
      <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
      <summary>
        <para> Converts
      the <see cref="T:System.String" /> representation of a number in a specified
      base to an equivalent 32-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>A 32-bit unsigned integer equivalent to the number in
      <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
      <summary>
        <para> Converts
      the <see cref="T:System.String" /> representation of a number in a specified
      base to an equivalent 64-bit signed integer.
      </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>A 64-bit signed integer equivalent to the number in
      <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
      <summary>
        <para> Converts
      the <see cref="T:System.String" /> representation of a number in a specified
      base to an equivalent 64-bit unsigned integer.
      </para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>A 64-bit unsigned integer equivalent to the number in
      <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
      <summary>
        <para> Converts the value of an 8-bit unsigned integer to its
      equivalent <see cref="T:System.String" /> representation in a specified base.
      </para>
      </summary>
      <param name="value">An 8-bit unsigned integer. </param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>The <see cref="T:System.String" /> representation of
<paramref name="value" /> in base <paramref name="toBase" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
      <summary>
        <para> Converts the value of a 16-bit signed integer to its
      equivalent <see cref="T:System.String" /> representation in a specified base.
      </para>
      </summary>
      <param name="value">A 16-bit signed integer. </param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>The <see cref="T:System.String" /> representation of
<paramref name="value" /> in base <paramref name="toBase" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
      <summary>
        <para> Converts the value of a 32-bit signed integer to its
      equivalent <see cref="T:System.String" /> representation in a specified base.
      </para>
      </summary>
      <param name="value">A 32-bit signed integer. </param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>The <see cref="T:System.String" /> representation of
<paramref name="value" /> in base <paramref name="toBase" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
      <summary>
        <para> Converts the value of a 64-bit signed integer to its
      equivalent <see cref="T:System.String" /> representation in a specified base.
      </para>
      </summary>
      <param name="value">A 64-bit signed integer. </param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
      <returns>
        <para>The <see cref="T:System.String" /> representation of
<paramref name="value" /> in base <paramref name="toBase" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[])">
      <summary>
        <para>Converts the value of an array of 8-bit unsigned integers to its equivalent
   <see cref="T:System.String" /> representation consisting of base 64 digits.</para>
      </summary>
      <param name="inArray">An array of 8-bit unsigned integers.</param>
      <returns>
        <para>The <see cref="T:System.String" /> representation, in base 64, of the contents of
<paramref name="inArray" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Converts the value of a subset of an array of 8-bit unsigned integers to its
      equivalent <see cref="T:System.String" />
      representation consisting of base 64 digits. Parameters specify the subset as an
      offset and number of elements in the
      array.</para>
      </summary>
      <param name="inArray">An array of 8-bit unsigned integers.</param>
      <param name=" offset">An offset in <paramref name="inArray" />.</param>
      <param name=" length">The number of elements of <paramref name="inArray" /> to convert.</param>
      <returns>
        <para>The <see cref="T:System.String" /> representation in
   base 64 of <paramref name="length" /> elements of
<paramref name="inArray" /> starting at position <paramref name="offset" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.FromBase64String(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> representation of
   a value consisting of base 64 digits to an equivalent array of 8-bit unsigned integers.</para>
      </summary>
      <param name="s">A <see cref="T:System.String" />.</param>
      <returns>
        <para>An array of 8-bit unsigned integers equivalent to
   <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>
        <para> Converts the value of a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array consisting of
      base 64 digits. Parameters specify the subsets as offsets of the input
      and output arrays and the number of elements in the input array.</para>
      </summary>
      <param name="inArray">An input array of 8-bit unsigned integers.</param>
      <param name=" offsetIn">A position within <paramref name="inArray" />.</param>
      <param name=" length">The number of elements of <paramref name="inArray" /> to convert.</param>
      <param name=" outArray">An output array of Unicode characters.</param>
      <param name=" offsetOut">A position within <paramref name="outArray" />.</param>
      <returns>
        <para>A 32-bit signed integer containing the number of bytes
      in <paramref name="outArray" />.</para>
      </returns>
    </member>
    <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para> Converts the specified subset of an array
      of Unicode characters consisting of base 64 digits to an equivalent array of 8-bit unsigned integers. Parameters specify the offset and number of elements in the input array.</para>
      </summary>
      <param name="inArray">A Unicode character array.</param>
      <param name=" offset">A position within <paramref name="inArray" />.</param>
      <param name=" length">The number of elements in <paramref name="inArray" /> to convert.</param>
      <returns>
        <para>An array of 8-bit unsigned integers equivalent to
   <paramref name="length" /> elements at position <paramref name="offset" /> in <paramref name="inArray" />.</para>
      </returns>
    </member>
    <member name="T:System.ContextBoundObject">
      <summary>
        <para>Defines the base class for all context-bound classes.</para>
      </summary>
    </member>
    <member name="T:System.ContextStaticAttribute">
      <summary>
        <para> Indicates that the value of a static field is unique for a particular context.</para>
      </summary>
    </member>
    <member name="M:System.ContextStaticAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ContextStaticAttribute" />
class.</para>
      </summary>
    </member>
    <member name="T:System.TimeZone">
      <summary>
        <para> Represents a time zone.</para>
      </summary>
    </member>
    <member name="M:System.TimeZone.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TimeZone" /> class.</para>
      </summary>
    </member>
    <member name="M:System.TimeZone.GetUtcOffset(System.DateTime)">
      <summary>
        <para> Returns the coordinated universal time (UTC) offset for the
      specified local time. </para>
      </summary>
      <param name="time">The local date and time.</param>
      <returns>
        <para> The UTC offset from <paramref name="time" />, measured in
   ticks.</para>
      </returns>
    </member>
    <member name="M:System.TimeZone.ToUniversalTime(System.DateTime)">
      <summary>
        <para>Returns the coordinated universal time (UTC) that corresponds to a specified local
      time.</para>
      </summary>
      <param name="time">The local date and time.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> instance whose value is the UTC time that corresponds to
<paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeZone.ToLocalTime(System.DateTime)">
      <summary>
        <para>Returns the local time that corresponds to a specified coordinated universal time (UTC).</para>
      </summary>
      <param name="time">A UTC time.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> instance whose value is the local time that corresponds to <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeZone.GetDaylightChanges(System.Int32)">
      <summary>
        <para> Returns the
 daylight saving time period for a particular year.</para>
      </summary>
      <param name="year">The year to which the daylight saving time period applies.</param>
      <returns>
        <para> A <see cref="T:System.Globalization.DaylightTime" />
instance containing the start and end date for daylight saving time in
<paramref name="year" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeZone.IsDaylightSavingTime(System.DateTime)">
      <summary>
        <para>Returns a value indicating whether the specified date and time is within a 
 daylight saving time period.</para>
      </summary>
      <param name="time"> A date and time.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="time" /> is in a daylight saving time
 period; <see langword="false" /> otherwise, or if <paramref name="time" /> is
<see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)">
      <summary>
        <para> Returns a value indicating whether the specified date and time is within the specified daylight saving time period.</para>
      </summary>
      <param name="time">A date and time.</param>
      <param name="daylightTimes">A daylight saving time period.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="time" /> is in <paramref name="daylightTimes" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.TimeZone.CurrentTimeZone">
      <summary>
        <para>Gets the time zone of the current computer system.</para>
      </summary>
    </member>
    <member name="P:System.TimeZone.StandardName">
      <summary>
        <para> Gets the standard time zone name.</para>
      </summary>
    </member>
    <member name="P:System.TimeZone.DaylightName">
      <summary>
        <para> Gets the daylight saving time zone name. </para>
      </summary>
    </member>
    <member name="P:System.CurrentSystemTimeZone.StandardName">
      <summary>
        <para>
       Return the standard time zone name.
    </para>
      </summary>
    </member>
    <member name="P:System.CurrentSystemTimeZone.DaylightName">
      <summary>
        <para>
       Returns the daylight saving time zone name.
    </para>
        <para>
       If daylight saving time is not used in the time zone, a null
       string will be returned.
    </para>
      </summary>
    </member>
    <member name="T:System.DayOfWeek">
      <summary>
        <para> Specifies the day of the
      week.
      </para>
      </summary>
    </member>
    <member name="F:System.DayOfWeek.Sunday">
      <summary>
        <para>Indicates Sunday.</para>
      </summary>
    </member>
    <member name="F:System.DayOfWeek.Monday">
      <summary>
        <para>Indicates Monday.</para>
      </summary>
    </member>
    <member name="F:System.DayOfWeek.Tuesday">
      <summary>
        <para>Indicates Tuesday.</para>
      </summary>
    </member>
    <member name="F:System.DayOfWeek.Wednesday">
      <summary>
        <para>Indicates Wednesday.</para>
      </summary>
    </member>
    <member name="F:System.DayOfWeek.Thursday">
      <summary>
        <para>Indicates Thursday.</para>
      </summary>
    </member>
    <member name="F:System.DayOfWeek.Friday">
      <summary>
        <para>Indicates Friday.</para>
      </summary>
    </member>
    <member name="F:System.DayOfWeek.Saturday">
      <summary>
        <para>Indicates Saturday.</para>
      </summary>
    </member>
    <member name="T:System.DBNull">
      <summary>
        <para> Represents a null value.</para>
      </summary>
    </member>
    <member name="F:System.DBNull.Value">
      <summary>
        <para> Represents the sole instance of the <see cref="T:System.DBNull" /> class.</para>
      </summary>
    </member>
    <member name="M:System.DBNull.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data
       needed to serialize the <see cref="T:System.DBNull" /> object.
    </para>
      </summary>
      <param name="info">
    A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing information required to serialize the <see cref="T:System.DBNull" /> object.
 </param>
      <param name="context">
    A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:System.DBNull" /> object.
 </param>
    </member>
    <member name="M:System.DBNull.ToString">
      <summary>
        <para>Returns an empty string (<see cref="F:System.String.Empty" qualify="true" />).</para>
      </summary>
      <returns>
        <para>An empty string (<see cref="F:System.String.Empty" qualify="true" />).</para>
      </returns>
    </member>
    <member name="M:System.DBNull.ToString(System.IFormatProvider)">
      <summary>
        <para>Returns an empty string using the specified <see cref="T:System.IFormatProvider" qualify="true" />.</para>
      </summary>
      <param name="provider">The <see cref="T:System.IFormatProvider" /> to be used to format the return value. <para>-or-</para><para><see langword="null" /> to obtain the format information from the current locale setting of the operating system.</para></param>
      <returns>
        <para>An empty string (<see cref="F:System.String.Empty" qualify="true" />).</para>
      </returns>
    </member>
    <member name="M:System.DBNull.GetTypeCode">
      <summary>
    Gets the <see cref="T:System.TypeCode" /> value for <see cref="T:System.DBNull" />.
 </summary>
      <returns>
        <para>The <see cref="T:System.TypeCode" /> value for <see cref="T:System.DBNull" />, which is <see cref="F:System.TypeCode.DBNull" qualify="true" />.
    </para>
      </returns>
    </member>
    <member name="T:System.Decimal">
      <summary>
        <para>Represents a decimal number.</para>
      </summary>
    </member>
    <member name="F:System.Decimal.Zero">
      <summary>
        <para>Represents the number zero (0).</para>
      </summary>
    </member>
    <member name="F:System.Decimal.One">
      <summary>
   Represents the number one (1).
</summary>
    </member>
    <member name="F:System.Decimal.MinusOne">
      <summary>
   Represents the number negative one (-1).
</summary>
    </member>
    <member name="F:System.Decimal.MaxValue">
      <summary>
        <para>Represents the largest possible value of <see cref="T:System.Decimal" />. This field is constant and
 read-only.</para>
      </summary>
    </member>
    <member name="F:System.Decimal.MinValue">
      <summary>
        <para> Represents the smallest possible value of <see cref="T:System.Decimal" />. This field is constant
 and read-only.</para>
      </summary>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Decimal" /> to
 the value of the specified 32-bit signed integer.</para>
      </summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt32)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Decimal" /> to
 the value of the specified 32-bit unsigned integer.</para>
      </summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int64)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Decimal" /> to
 the value of the specified 64-bit signed integer.</para>
      </summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt64)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Decimal" /> to
 the value of the specified 64-bit unsigned integer.</para>
      </summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Single)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Decimal" /> to
   the value of the specified single-precision floating-point number.</para>
      </summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Double)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Decimal" /> to
   the value of the specified double-precision floating-point number.</para>
      </summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.ToOACurrency(System.Decimal)">
      <summary>
        <para>Converts the specified <see cref="T:System.Decimal" /> value to the equivalent OLE Automation Currency
 value, which
 is contained in a 64-bit signed integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> value.</param>
      <returns>
        <para>A 64-bit signed integer that contains the OLE Automation equivalent of
 <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.FromOACurrency(System.Int64)">
      <summary>
        <para>Converts the specified 64-bit signed integer, which 
 contains an OLE Automation Currency value, to the equivalent <see cref="T:System.Decimal" /> value.</para>
      </summary>
      <param name="cy">An OLE Automation Currency value.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that contains the equivalent of <paramref name="cy" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32[])">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Decimal" /> to a decimal value represented in binary and contained in a specified array.
   </para>
      </summary>
      <param name="bits">An array of 32-bit signed integers containing a representation of a decimal value. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Decimal" /> from parameters specifying the instance's constituent
   parts.
   </para>
      </summary>
      <param name="lo">The low 32 bits of a 96-bit integer. </param>
      <param name="mid">The middle 32 bits of a 96-bit integer. </param>
      <param name="hi">The high 32 bits of a 96-bit integer. </param>
      <param name="isNegative">The sign of the number; 1 is negative, 0 is positive. </param>
      <param name="scale">A power of 10 ranging from 0 to 28. </param>
    </member>
    <member name="M:System.Decimal.Add(System.Decimal,System.Decimal)">
      <summary>
        <para>Adds two specified <see cref="T:System.Decimal" />
values.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />.</param>
      <param name="d2">A <see cref="T:System.Decimal" />.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> value that is the sum of
<paramref name="d1" /> and <paramref name="d2" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Compare(System.Decimal,System.Decimal)">
      <summary>
        <para> Compares two specified <see cref="T:System.Decimal" /> values.
 </para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para>A signed number indicating the relative values of <paramref name="d1" /> and
<paramref name="d2" />.</para>
        <list type="table">
          <listheader>
            <term> Return Value</term>
            <description> Meaning</description>
          </listheader>
          <item>
            <term> Less
 than
 zero</term>
            <description>
              <paramref name="d1" /> is less than <paramref name="d2" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <paramref name="d1" /> and <paramref name="d2" /> are equal.</description>
          </item>
          <item>
            <term> Greater than
 zero</term>
            <description>
              <paramref name="d1" /> is greater than <paramref name="d2" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Object)">
      <summary>
        <para> Compares this instance to a specified <see cref="T:System.Object" />
.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" /> or <see langword="null" />. </param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
   <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
      <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
      <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
      <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Decimal.Divide(System.Decimal,System.Decimal)">
      <summary>
        <para> Divides two specified <see cref="T:System.Decimal" />
values.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" /> (the dividend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the divisor). </param>
      <returns>
        <para> The <see cref="T:System.Decimal" /> that is the result of
   dividing <paramref name="d1" /> by <paramref name="d2" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Decimal.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance and a
      specified <see cref="T:System.Object" /> represent the same type and value.</para>
      </summary>
      <param name="value">An <see cref="T:System.Object" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is a <see cref="T:System.Decimal" /> and equal to this instance; otherwise,
<see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Decimal.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal,System.Decimal)">
      <summary>
        <para>Returns a value indicating whether two specified
      instances of <see cref="T:System.Decimal" /> represent the same value.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> are
   equal; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Decimal.Floor(System.Decimal)">
      <summary>
        <para> Rounds a specified <see cref="T:System.Decimal" /> number to the closest integer toward negative infinity.</para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para> If <paramref name="d" /> has a fractional part,
   the next whole <see cref="T:System.Decimal" /> number toward negative infinity
   that is less than <paramref name="d." /></para>
        <para>-or- </para>
        <para>If <paramref name="d " />doesn't have a fractional part, <paramref name="d" /> is returned
unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent <see cref="T:System.String" /> representation.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" />
representing the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent <see cref="T:System.String" /> representation, using the specified
      format.</para>
      </summary>
      <param name="format">A <see cref="T:System.String" /> containing a format specification.</param>
      <returns>
        <para>A <see cref="T:System.String" />
representation of the value of this instance as specified by
<paramref name="format" />
.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent <see cref="T:System.String" /> representation using the specified format and culture-specific format
      information.</para>
      </summary>
      <param name="format">A format specification.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
      <returns>
        <para>The <see cref="T:System.String" /> representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Parse(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> representation of a number to its
<see cref="T:System.Decimal" /> equivalent.</para>
      </summary>
      <param name="s">A <see cref="T:System.String" /> containing a number to convert.</param>
      <returns>
        <para>The <see cref="T:System.Decimal" /> number equivalent to the
   number contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> representation of a number in a
   specified style to its <see cref="T:System.Decimal" /> equivalent using the specified
   formatting style.</para>
      </summary>
      <param name="s">A <see cref="T:System.String" /> containing a number to convert.</param>
      <param name="style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" /> constants that indicate the permitted format of <paramref name="s" />.</param>
      <returns>
        <para>The <see cref="T:System.Decimal" />
number equivalent to the number contained in <paramref name="s" /> as specified by
<paramref name="style" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> representation of a number to its
<see cref="T:System.Decimal" /> equivalent
   using the specified culture-specific format information.</para>
      </summary>
      <param name="s">A <see cref="T:System.String" /> containing a number to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>The <see cref="T:System.Decimal" />
number equivalent to the number contained in <paramref name="s" /> as specified by
<paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> representation of a number to its
<see cref="T:System.Decimal" /> equivalent using the specified 
   style and culture-specific format.</para>
      </summary>
      <param name="s">A <see cref="T:System.String" /> containing a number to convert.</param>
      <param name="style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" /> constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>The <see cref="T:System.Decimal" />
number equivalent to the number contained in <paramref name="s" /> as specified by
<paramref name="style" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.GetBits(System.Decimal)">
      <summary>
        <para>Converts the value of a specified instance of <see cref="T:System.Decimal" />
to its equivalent binary
representation.</para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" /> value. </param>
      <returns>
        <para> A 32-bit signed integer array with four elements that contain
      the binary representation of <paramref name="d" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Decimal.Remainder(System.Decimal,System.Decimal)">
      <summary>
        <para>Computes the remainder after dividing two <see cref="T:System.Decimal" /> values.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" /> (the dividend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the divisor). </param>
      <returns>
        <para>The <see cref="T:System.Decimal" /> that is the remainder after dividing <paramref name="d1" /> by
<paramref name="d2" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Multiply(System.Decimal,System.Decimal)">
      <summary>
        <para> Multiplies two specified <see cref="T:System.Decimal" />
values.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" /> (the multiplicand). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the multiplier). </param>
      <returns>
        <para> A <see cref="T:System.Decimal" /> that is the result of
   multiplying <paramref name="d1" /> and <paramref name="d2" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Decimal.Negate(System.Decimal)">
      <summary>
        <para> Returns the result of multiplying the specified <see cref="T:System.Decimal" /> value by
   negative one.</para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para> A <see cref="T:System.Decimal" /> with the value of <paramref name="d" />,
   but the opposite sign.
   </para>
        <para> -or-
   </para>
        <para> Zero, if <paramref name="d" />
is zero.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.Int32)">
      <summary>
        <para> Rounds a <see cref="T:System.Decimal" /> value
   to a specified number of decimal places.
   </para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" /> value to round. </param>
      <param name="decimals">A value from 0 to 28 that specifies the number of decimal places to round to. </param>
      <returns>
        <para>The <see cref="T:System.Decimal" /> number equivalent to <paramref name="d" /> rounded to
<paramref name="decimals" /> 
number of decimal places.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Subtract(System.Decimal,System.Decimal)">
      <summary>
        <para> Subtracts one specified <see cref="T:System.Decimal" /> value from 
   another.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" /> (the minuend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the subtrahend). </param>
      <returns>
        <para> The <see cref="T:System.Decimal" /> result of subtracting
<paramref name="d2" /> from <paramref name="d1" /> 
.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToByte(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the
   equivalent 8-bit unsigned integer.</para>
      </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value.</param>
      <returns>
        <para>An 8-bit unsigned integer equivalent to
   <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToSByte(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 8-bit signed integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> value.</param>
      <returns>
        <para>An 8-bit signed integer equivalent to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToInt16(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 16-bit signed integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> value.</param>
      <returns>
        <para>A 16-bit signed integer equivalent to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToDouble(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent double-precision floating-point number.</para>
      </summary>
      <param name="d">The <see cref="T:System.Decimal" /> value to convert.</param>
      <returns>
        <para>A double-precision floating-point number equivalent to <paramref name="d" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToInt32(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 32-bit signed integer.</para>
      </summary>
      <param name="d">The <see cref="T:System.Decimal" /> value to convert.</param>
      <returns>
        <para>A 32-bit signed integer equivalent to the value of <paramref name="d" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToInt64(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 64-bit signed integer.</para>
      </summary>
      <param name="d">The <see cref="T:System.Decimal" /> value to convert.</param>
      <returns>
        <para>A 64-bit signed integer equivalent to the value of <paramref name="d" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToUInt16(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the
   equivalent 16-bit unsigned integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> value to convert.</param>
      <returns>
        <para> A 16-bit unsigned integer equivalent to the value
      of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToUInt32(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the
 equivalent 32-bit unsigned integer.</para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" /> value to convert.</param>
      <returns>
        <para> A 32-bit unsigned integer equivalent to the value of <paramref name="d" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToUInt64(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the
 equivalent 64-bit unsigned integer.</para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" /> value to convert.</param>
      <returns>
        <para> A 64-bit unsigned integer equivalent to the value of <paramref name="d" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToSingle(System.Decimal)">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.Decimal" /> to the
   equivalent single-precision floating-point number.</para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" /> value to convert.</param>
      <returns>
        <para> A single-precision floating-point number
      equivalent to the value of <paramref name="d" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent <see cref="T:System.String" /> representation using the specified culture-specific format
      information.</para>
      </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
      <returns>
        <para>The <see cref="T:System.String" />
representation of the value of this instance as specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.Truncate(System.Decimal)">
      <summary>
        <para>Returns the integral digits of the specified <see cref="T:System.Decimal" />; any fractional digits are discarded.</para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" /> to truncate.</param>
      <returns>
        <para>The <see cref="T:System.Decimal" /> result of <paramref name="d " />
rounded toward zero, to the nearest whole number.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Byte)~System.Decimal">
      <summary>
        <para>Converts an 8-bit unsigned integer to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">An 8-bit unsigned integer.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
 represents the converted 8-bit
 unsigned integer.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.SByte)~System.Decimal">
      <summary>
        <para>Converts an 8-bit signed integer to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">An 8-bit signed integer.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
 represents the converted 8-bit
 signed integer.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int16)~System.Decimal">
      <summary>
        <para>Converts a 16-bit signed integer to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">A 16-bit signed integer.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
 represents the converted 16-bit
 signed integer.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal">
      <summary>
        <para>Converts a 16-bit unsigned integer to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">A 16-bit unsigned integer.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
 represents the converted 16-bit
 unsigned integer.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Char)~System.Decimal">
      <summary>
        <para>Converts a Unicode character to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">A Unicode character.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" />
that represents the converted
Unicode character.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int32)~System.Decimal">
      <summary>
        <para>Converts a 32-bit signed integer to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">A 32-bit signed integer.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
 represents the converted 32-bit
 signed integer.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal">
      <summary>
        <para>Converts a 32-bit unsigned integer to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
 represents the converted 32-bit
 unsigned integer.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int64)~System.Decimal">
      <summary>
        <para>Converts a 64-bit signed integer to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">A 64-bit signed integer.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
 represents the converted 64-bit
 signed integer.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal">
      <summary>
        <para>Converts a 64-bit unsigned integer to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">A 64-bit unsigned integer.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
 represents the converted 64-bit
 unsigned integer.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Single)~System.Decimal">
      <summary>
        <para>Converts a single-precision floating-point number to a
      <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">A single-precision floating-point number.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
   represents
   the converted single-precision floating
   point number.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Double)~System.Decimal">
      <summary>
        <para>Converts a double-precision floating-point number to a
      <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">A double-precision floating-point number.</param>
      <returns>
        <para>A <see cref="T:System.Decimal" /> that
   represents
   the converted double-precision floating
   point number.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Byte">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to an 8-bit unsigned integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para>An 8-bit unsigned integer that represents the converted 
 <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.SByte">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to an 8-bit signed integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para>An 8-bit signed integer that represents the converted 
 <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Char">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to a Unicode character.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para> A Unicode character that represents the converted 
 <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int16">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to a 16-bit signed integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para>A 16-bit signed integer that represents the converted 
 <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to a 16-bit unsigned integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para>A 16-bit unsigned integer that represents the converted 
 <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int32">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to a 32-bit signed integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para>A 32-bit signed integer that represents the converted
   <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to a 32-bit unsigned integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para>A 32-bit unsigned integer that represents the converted
   <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int64">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to a 64-bit signed integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para>A 64-bit signed integer that represents the converted
      <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to a 64-bit unsigned integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para>A 64-bit unsigned integer that represents the converted
      <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Single">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to a single-precision floating-point number.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para> A single-precision floating-point number that represents
      the converted <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Double">
      <summary>
        <para>Converts a <see cref="T:System.Decimal" /> to a double-precision floating-point number.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> to convert.</param>
      <returns>
        <para> A double-precision floating-point number that represents
      the converted <see cref="T:System.Decimal" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_UnaryPlus(System.Decimal)">
      <summary>
        <para> Returns the value of the <see cref="T:System.Decimal" /> operand (the
 sign of the operand is unchanged).</para>
      </summary>
      <param name="d">The <see cref="T:System.Decimal" /> operand.</param>
      <returns>
        <para>The value of the operand, <paramref name="d" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_UnaryNegation(System.Decimal)">
      <summary>
        <para>Negates the value of the specified <see cref="T:System.Decimal" /> operand.</para>
      </summary>
      <param name="d">The <see cref="T:System.Decimal" /> operand.</param>
      <returns>
        <para>The result of <paramref name="d " />multiplied by negative one 
   (-1).</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Increment(System.Decimal)">
      <summary>
        <para>Increments the <see cref="T:System.Decimal" /> operand by 1.</para>
      </summary>
      <param name="d">The <see cref="T:System.Decimal" /> operand.</param>
      <returns>
        <para>The value of <paramref name="d" /> incremented by 1.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Decrement(System.Decimal)">
      <summary>
        <para>Decrements the <see cref="T:System.Decimal" /> operand by
   one.</para>
      </summary>
      <param name="d">The <see cref="T:System.Decimal" /> operand.</param>
      <returns>
        <para>The value of <paramref name="d" /> decremented by 1.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Addition(System.Decimal,System.Decimal)">
      <summary>
        <para> Adds two specified <see cref="T:System.Decimal" /> values.
   </para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para>The <see cref="T:System.Decimal" /> result
   of adding <paramref name="d1" /> and <paramref name="d2" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)">
      <summary>
        <para> Subtracts two specified <see cref="T:System.Decimal" />
values.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para> The <see cref="T:System.Decimal" />
result of subtracting <paramref name="d2" /> from <paramref name="d1" />
.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)">
      <summary>
        <para> Multiplies two specified <see cref="T:System.Decimal" />
values.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para> The <see cref="T:System.Decimal" /> result of multiplying
<paramref name="d1" /> by <paramref name="d2" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Division(System.Decimal,System.Decimal)">
      <summary>
        <para> Divides two specified <see cref="T:System.Decimal" /> values.
   </para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" /> (the dividend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the divisor). </param>
      <returns>
        <para> The <see cref="T:System.Decimal" /> result
   of <paramref name="d1" /> by <paramref name="d2" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)">
      <summary>
        <para> Returns the remainder resulting from dividing two
      specified <see cref="T:System.Decimal" />
      values.
      </para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" /> (the dividend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the divisor). </param>
      <returns>
        <para>The <see cref="T:System.Decimal" /> remainder resulting from
   dividing <paramref name="d1" /> by <paramref name="d2" />.</para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Equality(System.Decimal,System.Decimal)">
      <summary>
        <para>Returns a value indicating whether two instances of
 <see cref="T:System.Decimal" />
 are equal.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> are equal; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)">
      <summary>
        <para>Returns a value indicating whether two instances of
 <see cref="T:System.Decimal" />
 are not equal.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> are not equal; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)">
      <summary>
        <para> Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is less than
   another specified <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> is less than <paramref name="d2" />; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)">
      <summary>
        <para> Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is less than or 
 equal to another specified <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> is less than or equal to <paramref name="d2" />; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)">
      <summary>
        <para> Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is greater than
   another specified <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> is greater than <paramref name="d2" />; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)">
      <summary>
        <para> Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is greater than
   or equal to another specified <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d1" /> is greater than or equal to <paramref name="d2" />; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Decimal.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Decimal" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant <see cref="F:System.TypeCode.Decimal" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.Reflection.Binder">
      <summary>
        <para> Selects a member from a list of candidates,
      and performs type conversion from actual argument type to formal
      argument type.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
      <summary>
        <para>Selects a method to
      invoke from the given set of methods, based on the actual arguments.</para>
      </summary>
      <param name="bindingAttr">One of the <see cref="T:System.Reflection.BindingFlags" /> enumerators.</param>
      <param name="match">The set of methods Reflection has determined to be a possible match, typically because they have the correct member name.</param>
      <param name="args">The actual arguments passed in. Both the types and values of the arguments can be changed.</param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</param>
      <param name="culture">
        <para>An instance of <see cref="T:System.Globalization.CultureInfo" /> used to control the coercion of data types. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </para>
        <note type="note"> For example, this parameter is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, since 1000 is represented differently by different cultures.</note>
        <para>Not Yet Implemented. </para>
      </param>
      <param name="names">The method name or names.</param>
      <param name="state">A binder-provided object that keeps track of argument reordering. The <paramref name="state" /> parameter is a cookie that was passed to <see langword="BindToMethod" /> and represents an opaque object. The binder creates this object, and the binder is the sole consumer of this object. If <paramref name="state" /> is not <see langword="null" /> when <see langword="BindToMethod" /> returns, the runtime calls <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /> .</param>
      <returns>
        <para> A <see cref="T:System.Reflection.MethodBase" />
object containing
the matching method.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
      <summary>
        <para> Selects a field from
      the given set of fields, based on the specified criteria.
      </para>
      </summary>
      <param name="bindingAttr">One of the <see cref="T:System.Reflection.BindingFlags" /> enumerators. </param>
      <param name="match">The set of fields Reflection has determined to be a possible match, typically because they have the correct member name. </param>
      <param name="value">The field value used to locate a matching field. </param>
      <param name="culture">
        <para>An instance of <see cref="T:System.Globalization.CultureInfo" /> used to control the coercion of data types. If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. </para>
        <note type="note"> For example, this parameter is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, since 1000 is represented differently by different cultures.</note>
      </param>
      <returns>
        <para> A <see cref="T:System.Reflection.FieldInfo" />
object containing the
matching field.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Selects a method from
      the given set of methods, based on the argument type.</para>
      </summary>
      <param name="bindingAttr">One of the <see cref="T:System.Reflection.BindingFlags" /> enumerators.</param>
      <param name="match">The set of methods Reflection has determined to be a possible match, typically because they have the correct member name.</param>
      <param name="types">The value used to locate a matching method.</param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodBase" /> object containing the matching method, if
   found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para> Selects a property
      from the given set of properties, based on the specified criteria.
      </para>
      </summary>
      <param name="bindingAttr">One of the <see cref="T:System.Reflection.BindingFlags" /> enumerators. </param>
      <param name="match">The set of properties Reflection has determined to be a possible match, typically because they have the correct member name. </param>
      <param name="returnType">The return value the matching property must have. </param>
      <param name="indexes">The index types of the property being searched for. Used for index properties such as the indexer for a class. </param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified. </param>
      <returns>
        <para> A <see cref="T:System.Reflection.PropertyInfo" />
object containing
the matching property.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
      <summary>
        <para> Changes the
      type of the given <see langword="Object " />to the given <see langword="Type" />
      .
      </para>
      </summary>
      <param name="value">The value to change into a new <see langword="Type" /> . </param>
      <param name="type">The new <see langword="Type" /> that <paramref name="value" /> will become. </param>
      <param name="culture">
        <para>An instance of <see cref="T:System.Globalization.CultureInfo" /> used to control the coercion of data types. If <paramref name="culture" /> is <see langword="null" /> , the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</para>
        <note type="note"> For example, this parameter is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, since 1000 is represented differently by different cultures.</note>
      </param>
      <returns>
        <para> An <see langword="Object " />
containing the
given value as the new type.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
      <summary>
        <para>Upon returning from <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" /> , restores the
<paramref name="args " />argument to what it was when it came from <see langword="BindToMethod" /> .</para>
      </summary>
      <param name="args">The actual arguments passed in. Both the types and values of the arguments can be changed.</param>
      <param name=" state">A binder-provided object that keeps track of argument reordering.</param>
    </member>
    <member name="T:System.Runtime.Serialization.IObjectReference">
      <summary>
        <para>Indicates that the current interface implementer is a reference to
      another object.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Returns the real object that should be deserialized, rather than
      the object that the serialized stream specifies.</para>
      </summary>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> from which the current object is deserialized.</param>
      <returns>
        <para>Returns the actual object that is put into
      the graph.</para>
      </returns>
    </member>
    <member name="T:System.DivideByZeroException">
      <summary>
        <para> The exception that is thrown when there is an attempt to divide an integral or decimal
      value by zero.</para>
      </summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.DivideByZeroException" /> 
   class. </para>
      </summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DivideByZeroException" />
class<see langword=" " />
with a specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DivideByZeroException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DivideByZeroException" />
class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Double">
      <summary>
        <para> Represents a double-precision floating point number.</para>
      </summary>
    </member>
    <member name="F:System.Double.MinValue">
      <summary>
        <para> Represents the smallest possible value of
 a <see cref="T:System.Double" />. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Double.MaxValue">
      <summary>
        <para> Represents the largest possible value of a <see cref="T:System.Double" />. This field is 
 constant.</para>
      </summary>
    </member>
    <member name="F:System.Double.Epsilon">
      <summary>
        <para> Represents the smallest positive <see cref="T:System.Double" /> greater than 
 zero. This
 field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Double.NegativeInfinity">
      <summary>
        <para> Represents negative infinity. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Double.PositiveInfinity">
      <summary>
        <para> Represents positive infinity. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Double.NaN">
      <summary>
        <para> Represents a value that is not a number
 (<see langword="NaN" />). This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Double.IsInfinity(System.Double)">
      <summary>
        <para> Returns a value indicating whether the specified
 number evaluates to negative or positive infinity</para>
      </summary>
      <param name="d">A double-precision floating point number.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d " /> evaluates to <see cref="F:System.Double.PositiveInfinity" />
or <see cref="F:System.Double.NegativeInfinity" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.IsPositiveInfinity(System.Double)">
      <summary>
        <para> Returns a value indicating whether
 the specified number evaluates to positive infinity.</para>
      </summary>
      <param name="d">A double-precision floating point number.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.PositiveInfinity" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.IsNegativeInfinity(System.Double)">
      <summary>
        <para> Returns a value indicating whether
 the specified number evaluates to negative infinity.</para>
      </summary>
      <param name="d">A double-precision floating point number.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d" /> evaluates to <see cref="F:System.Double.NegativeInfinity" />; otherwise, <see langword="false" />
.</para>
      </returns>
    </member>
    <member name="M:System.Double.IsNaN(System.Double)">
      <summary>
        <para>Returns a value indicating whether the specified number evaluates to a value that is
 not a number (<see cref="F:System.Double.NaN" />).</para>
      </summary>
      <param name="d">A double-precision floating point number.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="d " />evaluates to <see cref="F:System.Double.NaN" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of their relative values.</para>
      </summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> A
 negative
 integer</term>
            <description>
              <para>This instance is less than <paramref name="value" />.</para>
              <para>-or-</para>
              <para>This instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a
 number.</para>
            </description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <para>This instance is equal to <paramref name="value" />.</para>
              <para>-or-</para>
              <para>This instance and value are
 both <see langword="Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" /></para>
            </description>
          </item>
          <item>
            <term> A positive integer</term>
            <description>
              <para>This instance is greater than <paramref name="value" />.</para>
              <para>-or-</para>
              <para>This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />).</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is
<see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Double.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified object.</para>
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Double" /> and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Double.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation. </para>
      </summary>
      <returns>
        <para>The string 
 representation of the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.Double.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation, using the specified format. </para>
      </summary>
      <param name="format">A format string.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified format and culture-specific format information. </para>
      </summary>
      <param name="format">A format specification.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value
 of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to its double-precision floating point number equivalent.</para>
      </summary>
      <param name="s">A string containinga number to convert.</param>
      <returns>
        <para>A double-precision floating point number equivalent to the
 numeric value or symbol specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a specified style to its double-precision floating point number equivalent.</para>
      </summary>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" /> constants that indicate the permitted format of <paramref name="s" />. </param>
      <returns>
        <para>A double-precision floating point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a specified culture-specific format to its double-precision floating point number equivalent.</para>
      </summary>
      <param name="s">A string containinga number to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A double-precision floating point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating point number equivalent.</para>
      </summary>
      <param name="s">A string containinga number to convert.</param>
      <param name="style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" /> constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <returns>
        <para>A double-precision floating point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <summary>
        <para>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating point number equivalent.</para>
      </summary>
      <param name="s">A string containing a numberto convert.</param>
      <param name="style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name=" result">A double-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />. If the return value is <see langword="false" />, <paramref name="result" /> is set to zero.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="s" /> is converted
 successfully; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified culture-specific
 format information. </para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Double.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.Double" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.DuplicateWaitObjectException">
      <summary>
        <para>The exception that is thrown when an object appears more
      than once in an array of synchronization objects.</para>
      </summary>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.DuplicateWaitObjectException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.DuplicateWaitObjectException" /> class with the name
      of the parameter that causes this exception.</para>
      </summary>
      <param name="parameterName">The name of the parameter that caused the exception.</param>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.DuplicateWaitObjectException" /> class with a
      specified error message and the name of
      the parameter that causes this exception.</para>
      </summary>
      <param name="parameterName">The name of the parameter that caused the exception.</param>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DuplicateWaitObjectException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="F:System.Empty.Value">
      <summary>
        <para>
       Represents the sole instance of the <see cref="T:System.Empty" />
       class.
    </para>
      </summary>
    </member>
    <member name="M:System.Empty.ToString">
      <summary>
        <para>
       Returns a String with zero length.
    </para>
      </summary>
      <returns>
        <para>
       An
       empty string ("").
    </para>
      </returns>
    </member>
    <member name="M:System.Empty.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>
       Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data
       needed to serialize the <see cref="T:System.Empty" /> object.
    </para>
      </summary>
      <param name="info">
    A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing information required to serialize the <see cref="T:System.Empty" /> object.
 </param>
      <param name="context">
    A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Empty" /> object.
 </param>
      <returns>
        <para>
       None.
    </para>
      </returns>
    </member>
    <member name="T:System.EntryPointNotFoundException">
      <summary>
        <para>The exception that is thrown when an attempt to load a class fails
      due to the absence of an entry method.</para>
      </summary>
    </member>
    <member name="T:System.TypeLoadException">
      <summary>
        <para>The exception that is thrown when type-loading failures occur.</para>
      </summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class with a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TypeLoadException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.TypeLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para> Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
object with the class name, method name, resource ID, and additional exception information.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.TypeLoadException.Message">
      <summary>
        <para> Gets the error message for this exception.</para>
      </summary>
    </member>
    <member name="P:System.TypeLoadException.TypeName">
      <summary>
        <para>Gets the fully qualified name of the type that causes the exception.</para>
      </summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" />
class with a specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary>
        <para> The exception that is thrown when a DLL specified in a DLL import
      cannot be found.</para>
      </summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DllNotFoundException" />
class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DllNotFoundException" />
    		class with a specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> 
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> 
class with serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name=" context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Environment">
      <summary>
        <para> Provides information about, and means to manipulate, the current environment and platform. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Environment.Exit(System.Int32)">
      <summary>
        <para>Terminates this process and gives the underlying operating system the specified exit code.</para>
      </summary>
      <param name="exitCode">Exit code to be given to the operating system.</param>
    </member>
    <member name="M:System.Environment.ExpandEnvironmentVariables(System.String)">
      <summary>
        <para>Replaces the name of each environment variable embedded
 in the specified string with the string equivalent
 of the value of the variable, then returns the resulting string.</para>
      </summary>
      <param name="name">A string containing the names of zero or more environment variables. Each environment variable is quoted with the percent sign character (%).</param>
      <returns>
        <para>A string 
 with each environment variable replaced by its value.</para>
      </returns>
    </member>
    <member name="M:System.Environment.GetCommandLineArgs">
      <summary>
        <para>Returns a string 
 array containing the command line arguments for the current
 process.</para>
      </summary>
      <returns>
        <para> An array of string where each element contains a command
 line argument. The first element is the executable file name, and the following zero or more elements
 contain the remaining command line arguments.</para>
      </returns>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String)">
      <summary>
        <para>Returns the value of
 the specified environment variable.</para>
      </summary>
      <param name="variable">A string containing the name of an environment variable.</param>
      <returns>
        <para>A string containing the value of <paramref name="variable" />, or <see langword="null" /> if <paramref name="variable" /> is not found.</para>
      </returns>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables">
      <summary>
        <para> Returns
      all environment variables and their values.</para>
      </summary>
      <returns>
        <para> An <see cref="T:System.Collections.IDictionary" />, containing all environment variables and
   their values, or <see langword="null" /> if
   the system does not
   support environment variables.</para>
      </returns>
    </member>
    <member name="M:System.Environment.GetLogicalDrives">
      <summary>
        <para>Returns an array of string containing the names of the logical drives on the current
 computer.</para>
      </summary>
      <returns>
        <para> An array of string where each element contains the
 name of a logical drive. For example, if the computer's hard drive is the
 first logical drive, the first element returned is "C:\".</para>
      </returns>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
      <summary>
        <para>Gets the path to the system special folder identified by
      the specified enumeration.</para>
      </summary>
      <param name="folder">An enumerated constant that identifies a system special folder.</param>
      <returns>
        <para>The path to the specified system special folder.</para>
      </returns>
    </member>
    <member name="P:System.Environment.TickCount">
      <summary>
        <para> Gets the number of milliseconds elapsed since the system
      started.</para>
      </summary>
    </member>
    <member name="P:System.Environment.ExitCode">
      <summary>
        <para>Gets or sets the exit code of the process.</para>
      </summary>
    </member>
    <member name="P:System.Environment.CommandLine">
      <summary>
        <para> Gets the command line for this process.</para>
      </summary>
    </member>
    <member name="P:System.Environment.CurrentDirectory">
      <summary>
        <para>Gets and sets the fully qualified path of the current directory;
 that is, the directory from which this process starts.</para>
      </summary>
    </member>
    <member name="P:System.Environment.SystemDirectory">
      <summary>
        <para>Gets the fully qualified path of the system directory.</para>
      </summary>
    </member>
    <member name="P:System.Environment.MachineName">
      <summary>
        <para>Gets the NetBIOS name of this local computer.</para>
      </summary>
    </member>
    <member name="P:System.Environment.NewLine">
      <summary>
        <para> Gets the newline string defined for this environment.</para>
      </summary>
    </member>
    <member name="P:System.Environment.Version">
      <summary>
        <para> Gets a <see cref="T:System.Version" />
object that describes the major, minor, build, and revision numbers of the
common language runtime.</para>
      </summary>
    </member>
    <member name="P:System.Environment.WorkingSet">
      <summary>
        <para> Gets the amount of physical memory mapped to
      the process context.</para>
      </summary>
    </member>
    <member name="P:System.Environment.OSVersion">
      <summary>
        <para>Gets an <see cref="T:System.OperatingSystem" /> object that contains the current platform identifier and version number.</para>
      </summary>
    </member>
    <member name="P:System.Environment.StackTrace">
      <summary>
        <para> Gets current stack trace information.</para>
      </summary>
    </member>
    <member name="P:System.Environment.HasShutdownStarted">
      <summary>
        <para> Indicates whether the common
      language runtime is shutting down.</para>
      </summary>
    </member>
    <member name="P:System.Environment.UserName">
      <summary>
   Gets the user name of the person who started the current thread.
</summary>
    </member>
    <member name="P:System.Environment.UserInteractive">
      <summary>
        <para>Gets a value indicating whether the current process is
      running in user interactive mode.</para>
      </summary>
    </member>
    <member name="P:System.Environment.UserDomainName">
      <summary>
        <para> Gets the network domain name associated with the current user.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ApplicationData">
      <summary>
        <para> The directory that serves as a
      common repository for application-specific data for the current roaming user.</para>
        <para>A roaming user works on more than one computer on a
      network. A roaming user's profile is kept on a server on the network and is
      loaded onto a system when the user logs on.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonApplicationData">
      <summary>
        <para> The directory that serves as a 
      common repository for application-specific data that is used by all users.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalApplicationData">
      <summary>
        <para> The directory that serves as
      a common repository for application-specific data that is used by the current, non-roaming user.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Cookies">
      <summary>
        <para> The directory that serves as a
 common repository for Internet cookies.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Favorites">
      <summary>
        <para> The directory that serves as a 
      common repository for the user's favorite items.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.History">
      <summary>
        <para> The directory that serves as a 
      common repository for Internet history items.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.InternetCache">
      <summary>
        <para> The directory that serves as 
      a common repository for temporary Internet files.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Programs">
      <summary>
        <para> The directory that contains the 
      user's program groups. </para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Recent">
      <summary>
        <para> The directory that contains the 
      user's most recently used documents. </para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SendTo">
      <summary>
        <para> The directory that contains the
      Send To menu items.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.StartMenu">
      <summary>
        <para> The directory that contains 
      the Start menu items.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Startup">
      <summary>
        <para> The directory that corresponds to the user's Startup program group.</para>
        <para> The system starts these programs whenever a user logs on or
      starts Windows NT or later, or starts Windows 98.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.System">
      <summary>
        <para> The System directory.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Templates">
      <summary>
        <para> The directory that serves as 
      a common repository for document templates.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.DesktopDirectory">
      <summary>
        <para> The directory
      used to physically store file objects on the desktop.</para>
        <para> Do not confuse this directory with the desktop folder itself, which
      is a virtual folder.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Personal">
      <summary>
        <para> The directory that serves as 
      a common repository for documents.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFiles">
      <summary>
        <para> The program files directory.</para>
      </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFiles">
      <summary>
        <para> The directory for components that are shared 
      across applications.</para>
      </summary>
    </member>
    <member name="T:System.EventHandler">
      <summary>
        <para>Represents the method that will handle the event that has no event data.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.FieldAccessException">
      <summary>
        <para>The exception that is thrown when there is an illegal attempt to access a private or
      protected field inside a class.</para>
      </summary>
    </member>
    <member name="M:System.FieldAccessException.#ctor">
      <summary>
   Initializes a new instance of the
<see cref="T:System.FieldAccessException" /> class.
</summary>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.FieldAccessException" />
   class with a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.FieldAccessException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.FieldAccessException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.FlagsAttribute">
      <summary>
        <para> Indicates that an enumeration can be treated as
      a bit field; that is, a set of flags.</para>
      </summary>
    </member>
    <member name="M:System.FlagsAttribute.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.FlagsAttribute" /> class.
   </para>
      </summary>
    </member>
    <member name="T:System.FormatException">
      <summary>
        <para>The exception that is thrown when the format of an argument
      does not meet the parameter specifications of the invoked method.</para>
      </summary>
    </member>
    <member name="M:System.FormatException.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.FormatException" /> class.
</summary>
    </member>
    <member name="M:System.FormatException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.FormatException" />
class with a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.FormatException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.FormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.FormatException" /> class
   with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.GC">
      <summary>
        <para>Controls the system garbage collector, a service that automatically
      reclaims unused memory.</para>
      </summary>
    </member>
    <member name="M:System.GC.GetGeneration(System.Object)">
      <summary>
        <para>Returns the current generation number of the specified object.</para>
      </summary>
      <param name=" obj">The object for which generation information is retrieved.</param>
      <returns>
        <para>The current generation number of <paramref name="obj" />.</para>
      </returns>
    </member>
    <member name="M:System.GC.Collect(System.Int32)">
      <summary>
        <para>Forces garbage collection from generation zero through a specified
      generation.</para>
      </summary>
      <param name=" generation">The maximum garbage-collected generation.</param>
    </member>
    <member name="M:System.GC.Collect">
      <summary>
        <para>Forces garbage collection of all generations.</para>
      </summary>
    </member>
    <member name="M:System.GC.KeepAlive(System.Object)">
      <summary>
        <para>References the specified object, making it ineligible for garbage collection
      from the start of the current routine to the point where this method is
      called.</para>
      </summary>
      <param name=" obj">The object to reference.</param>
    </member>
    <member name="M:System.GC.GetGeneration(System.WeakReference)">
      <summary>
        <para>Returns the current generation number of the target of a specified weak
      reference.</para>
      </summary>
      <param name=" wo">The weak reference of a target.</param>
      <returns>
        <para>The current generation number of the target of <paramref name="wo" />.</para>
      </returns>
    </member>
    <member name="M:System.GC.WaitForPendingFinalizers">
      <summary>
        <para>Suspends the current thread until the thread processing the queue of
      finalizers has emptied that queue.</para>
      </summary>
    </member>
    <member name="M:System.GC.SuppressFinalize(System.Object)">
      <summary>
        <para>Requests that the system not call the finalizer method for the specified
      object.</para>
      </summary>
      <param name="obj">The object for which a finalizer must not be called.</param>
    </member>
    <member name="M:System.GC.ReRegisterForFinalize(System.Object)">
      <summary>
        <para>Requests that the system call the finalizer method for the
      specified object, for which <see cref="M:System.GC.SuppressFinalize(System.Object)" /> has previously been called.</para>
      </summary>
      <param name=" obj">The object for which a finalizer must be called.</param>
    </member>
    <member name="M:System.GC.GetTotalMemory(System.Boolean)">
      <summary>
        <para>Retrieves the number of bytes currently thought to be
      allocated. A parameter indicates whether this method can wait a short interval before returning while the system collects garbage
      and finalizes objects.</para>
      </summary>
      <param name="forceFullCollection">A Boolean value that, if <see langword="true" />, indicates this method can wait awhile for garbage collection before returning.</param>
      <returns>
        <para>A number that is the best available approximation of the number of bytes
      currently allocated in managed memory.</para>
      </returns>
    </member>
    <member name="P:System.GC.MaxGeneration">
      <summary>
        <para>Gets the maximum number of generations the system currently supports.</para>
      </summary>
    </member>
    <member name="T:System.Guid">
      <summary>
        <para>Represents a globally unique identifier (GUID).</para>
      </summary>
    </member>
    <member name="F:System.Guid.Empty">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Guid" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Guid.#ctor(System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Guid" /> class using the specified array of bytes.</para>
      </summary>
      <param name="b">A 16 element byte array containing values with which to initialize the GUID.</param>
    </member>
    <member name="M:System.Guid.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Guid" /> class using the specified unsigned integers and bytes.</para>
      </summary>
      <param name="a">The first 4 bytes of the GUID.</param>
      <param name="b">The next 2 bytes of the GUID.</param>
      <param name="c">The next 2 bytes of the GUID.</param>
      <param name="d">The next byte of the GUID.</param>
      <param name="e">The next byte of the GUID.</param>
      <param name="f">The next byte of the GUID.</param>
      <param name="g">The next byte of the GUID.</param>
      <param name="h">The next byte of the GUID.</param>
      <param name="i">The next byte of the GUID.</param>
      <param name="j">The next byte of the GUID.</param>
      <param name="k">The next byte of the GUID.</param>
    </member>
    <member name="M:System.Guid.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Guid" /> class
   using the value represented by the specified string.</para>
      </summary>
      <param name="g">
        <para>A <see langword="String" /> that contains a GUID in the following format: hexadecimal digits are arranged in groups of 8, 4, 4, 4, and 12 digits with hyphens between the groups. The GUID can optionally be enclosed in matching braces. For example: dddddddd-dddd-dddd-dddd-dddddddddddd or {dddddddd-dddd-dddd-dddd-dddddddddddd}.</para>
        <para>Alternatively, the following format is permitted: {0xdddddddd,0xdddd, 0xdddd,{0xdd},{0xdd},{0xdd},{0xdd},{0xdd},{0xdd},{0xdd},{0xdd}}, where d is a hexadecimal digit. If this format is used, all brackets and commas indicated are required, and all numbers must be prefixed with "0x" as shown. Fewer hexadecimal digits than shown can be used, but no more. </para>
      </param>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Guid" /> class using the
   specified integers and byte array.</para>
      </summary>
      <param name=" a">The first 4 bytes of the GUID.</param>
      <param name=" b">The next 2 bytes of the GUID.</param>
      <param name=" c">The next 2 bytes of the GUID.</param>
      <param name=" d">The remaining 8 bytes of the GUID.</param>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Guid" /> class using the
   specified integers and bytes.</para>
      </summary>
      <param name=" a">The first 4 bytes of the GUID.</param>
      <param name=" b">The next 2 bytes of the GUID.</param>
      <param name=" c">The next 2 bytes of the GUID.</param>
      <param name=" d">The next byte of the GUID.</param>
      <param name=" e">The next byte of the GUID.</param>
      <param name=" f">The next byte of the GUID.</param>
      <param name=" g">The next byte of the GUID.</param>
      <param name=" h">The next byte of the GUID.</param>
      <param name=" i">The next byte of the GUID.</param>
      <param name=" j">The next byte of the GUID.</param>
      <param name=" k">The next byte of the GUID.</param>
    </member>
    <member name="M:System.Guid.ToByteArray">
      <summary>
        <para>Returns a 16-element byte array that contains the value of the GUID.</para>
      </summary>
      <returns>
        <para>A 16-element byte array.</para>
      </returns>
    </member>
    <member name="M:System.Guid.ToString">
      <summary>
        <para>Returns a <see langword="String" /> representation of the value of this 
    instance in Registry format.</para>
      </summary>
      <returns>
        <para>A <see langword="String" /> formatted in this pattern:</para>
        <para>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</para>
        <para>where the value of the GUID is represented as a series of lower-case 
    hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and separated by
    hyphens. An example of a return value is
    "382c74c3-721d-4f34-80e5-57657b6cbc27".</para>
      </returns>
    </member>
    <member name="M:System.Guid.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>The hash code for this instance.</para>
      </returns>
    </member>
    <member name="M:System.Guid.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified 
       object.</para>
      </summary>
      <param name="o">The object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="o" /> is a <see langword="Guid" /> that has the 
    same value as this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Guid.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
      their relative values.</para>
      </summary>
      <param name=" value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
   <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> A negative integer</term>
            <description>This instance is less than
      <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
      <paramref name="value" />.</description>
          </item>
          <item>
            <term> A positive integer</term>
            <description>
              <para>This instance is greater than
      <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Guid.op_Equality(System.Guid,System.Guid)">
      <summary>
        <para>Returns an indication whether the values of two specified <see langword="Guid" /> objects
   are equal.</para>
      </summary>
      <param name="a">A <see langword="Guid" /> object.</param>
      <param name=" b">A <see langword="Guid" /> object.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="a " />and <paramref name="b " />are
   equal; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Guid.op_Inequality(System.Guid,System.Guid)">
      <summary>
        <para>Returns an indication whether the values of two specified <see langword="Guid" /> objects are not equal.</para>
      </summary>
      <param name="a">A <see langword="Guid" /> object.</param>
      <param name="b">A <see langword="Guid" /> object.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="a " />and <paramref name="b " />are not equal; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Guid.NewGuid">
      <summary>
        <para>Initializes a new instance of the <see langword="Guid" /> class.</para>
      </summary>
      <returns>
        <para>A new <see langword="Guid" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Guid.ToString(System.String)">
      <summary>
        <para>Returns a <see langword="String" /> representation of the value of this 
 <see langword="Guid" /> instance, according to the provided format specifier.</para>
      </summary>
      <param name=" format">A <see langword="String" /> containing a single format specifier character indicating how the GUID value should be formatted.</param>
      <returns>
        <para>A <see cref="T:System.String" /> 
 representation of the value of this <see langword="Guid" /> instance.</para>
      </returns>
    </member>
    <member name="M:System.Guid.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns a <see langword="String" /> representation of the value of this
   instance of the <see langword="Guid" /> class, according to the provided format
   specifier and culture-specific format information.</para>
      </summary>
      <param name=" format">A <see langword="String" /> containing a single format specifier character indicating how the GUID value should be formatted.</param>
      <param name=" provider">(Reserved) An <see langword="IFormatProvider" /> reference that supplies culture-specific formatting services.</param>
      <returns>
        <para>A <see cref="T:System.String" />
representation of the value of this <see langword="Guid" /> instance.</para>
      </returns>
    </member>
    <member name="T:System.IAsyncResult">
      <summary>
        <para> Represents the status
      of an asynchronous operation.
      </para>
      </summary>
    </member>
    <member name="P:System.IAsyncResult.IsCompleted">
      <summary>
        <para> Gets an indication
 whether the asynchronous operation has completed.
 </para>
      </summary>
    </member>
    <member name="P:System.IAsyncResult.AsyncWaitHandle">
      <summary>
        <para> Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation
 to complete.</para>
      </summary>
    </member>
    <member name="P:System.IAsyncResult.AsyncState">
      <summary>
        <para> Gets a user-defined object that qualifies or contains information about
 an asynchronous operation.
 </para>
      </summary>
    </member>
    <member name="P:System.IAsyncResult.CompletedSynchronously">
      <summary>
        <para> Gets an indication of whether the asynchronous operation completed synchronously.
      </para>
      </summary>
    </member>
    <member name="T:System.ICustomFormatter">
      <summary>
        <para> Defines a method that supports custom, user-defined formatting of the value of an object.
 </para>
      </summary>
    </member>
    <member name="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
      <summary>
        <para> Converts the value of a specified object to an
 equivalent string representation
 using specified format and culture-specific formatting information.
 </para>
      </summary>
      <param name="format">A format string containing formatting specifications. </param>
      <param name="arg"> An object to format. </param>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that supplies format information about the current instance.</param>
      <returns>
        <para>The string representation of the value of <paramref name="arg" />,
 formatted as specified by
<paramref name="format" /> and <paramref name="formatProvider" />.</para>
      </returns>
    </member>
    <member name="T:System.IDisposable">
      <summary>
        <para>Defines a method to release allocated unmanaged resources.</para>
      </summary>
    </member>
    <member name="M:System.IDisposable.Dispose">
      <summary>
        <para>Performs application-defined tasks associated with freeing, releasing, or
      resetting unmanaged resources.</para>
      </summary>
    </member>
    <member name="T:System.IFormatProvider">
      <summary>
        <para>Provides a mechanism for retrieving an object to control
      formatting.</para>
      </summary>
    </member>
    <member name="M:System.IFormatProvider.GetFormat(System.Type)">
      <summary>
        <para>Gets an object that provides formatting services for the specified type.</para>
      </summary>
      <param name="formatType">An object that specifies the type of format object to get.</param>
      <returns>
        <para>A format object of type <paramref name="formatType" />.</para>
        <para>-or-</para>
        <para>A format object for the current culture if no format
   object is available or <paramref name="formatType" /> is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="T:System.IndexOutOfRangeException">
      <summary>
        <para>The exception that is thrown when an attempt is made to
      access an element of an array with an index that is outside
      the bounds of the array. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> 
class.</para>
      </summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" />
class with a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Int16">
      <summary>
        <para>Represents a 16-bit signed integer.</para>
      </summary>
    </member>
    <member name="F:System.Int16.MaxValue">
      <summary>
        <para>Represents the largest possible value of an <see cref="T:System.Int16" />. This field is
 constant.</para>
      </summary>
    </member>
    <member name="F:System.Int16.MinValue">
      <summary>
        <para>Represents the smallest possible value of <see cref="T:System.Int16" />. This field is 
 constant.</para>
      </summary>
    </member>
    <member name="M:System.Int16.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
 their relative values.</para>
      </summary>
      <param name=" value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
 <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
 <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Int16.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
 object.</para>
      </summary>
      <param name=" obj">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Int16" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Int16.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Int16.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation. </para>
      </summary>
      <returns>
        <para>The string representation of the value of this instance,
 consisting of a minus sign if the value is negative, and a sequence of digits
 ranging from 0 to 9 with no leading zeroes.</para>
      </returns>
    </member>
    <member name="M:System.Int16.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation, using the specified format. </para>
      </summary>
      <param name=" format">A format string.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.Int16.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified format and
 culture-specific format information. </para>
      </summary>
      <param name=" format">A format specification.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Int16.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to its 16-bit
 signed integer equivalent.</para>
      </summary>
      <param name=" s">A string containinga number to convert.</param>
      <returns>
        <para>A 16-bit signed integer equivalent to the number contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a
 specified style to its 16-bit signed integer equivalent.</para>
      </summary>
      <param name=" s">A string containing a number to convert. </param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicates the permitted format of <paramref name="s" />. </param>
      <returns>
        <para>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
 specified culture-specific format to its 16-bit signed integer equivalent.</para>
      </summary>
      <param name=" s">A string containinga number to convert.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
 specified style and culture-specific format to its 16-bit signed integer
 equivalent.</para>
      </summary>
      <param name=" s">A string containinga number to convert.</param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <returns>
        <para>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int16.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its
 equivalent string representation using the specified culture-specific
 format information. </para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Int16.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int16" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.Int16" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.Int32">
      <summary>
        <para> Represents a 32-bit signed integer.</para>
      </summary>
    </member>
    <member name="F:System.Int32.MaxValue">
      <summary>
        <para>Represents the largest possible value of an <see cref="T:System.Int32" />. This field is
 constant.</para>
      </summary>
    </member>
    <member name="F:System.Int32.MinValue">
      <summary>
        <para>Represents the smallest possible value of <see cref="T:System.Int32" />. This field is 
 constant.</para>
      </summary>
    </member>
    <member name="M:System.Int32.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of their relative values.</para>
      </summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
 <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
 <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Int32.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified object.</para>
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Int32" /> and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Int32.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Int32.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation. </para>
      </summary>
      <returns>
        <para>The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</para>
      </returns>
    </member>
    <member name="M:System.Int32.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation, using the specified format. </para>
      </summary>
      <param name="format">A format string.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.Int32.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified format and culture-specific format information. </para>
      </summary>
      <param name="format">A format specification.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Int32.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to its 32-bit signed integer equivalent.</para>
      </summary>
      <param name="s">A string containing a number to convert.</param>
      <returns>
        <para>A 32-bit signed integer equivalent to the number contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a specified style to its 32-bit signed integer equivalent.</para>
      </summary>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicates the permitted format of <paramref name="s" />. </param>
      <returns>
        <para>A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a specified culture-specific format to its 32-bit signed integer equivalent.</para>
      </summary>
      <param name="s">A string containing a number to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A 32-bit signed integer equivalent to the number
 specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
 specified style and culture-specific format to its 32-bit signed integer
 equivalent.</para>
      </summary>
      <param name=" s">A string containing a number to convert.</param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicates the permitted format of <paramref name="s" />.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <returns>
        <para>A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int32.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified culture-specific
 format information. </para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Int32.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int32" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.Int32" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.Int64">
      <summary>
        <para> Represents a 64-bit signed integer.</para>
      </summary>
    </member>
    <member name="F:System.Int64.MaxValue">
      <summary>
        <para> Represents the largest possible value of an <see langword="Int64" />. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Int64.MinValue">
      <summary>
        <para> Represents the smallest possible value of an <see langword="Int64" />. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Int64.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
 their relative values.</para>
      </summary>
      <param name=" value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
 <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
 <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Int64.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" obj">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of an <see cref="T:System.Int64" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Int64.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Int64.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation. </para>
      </summary>
      <returns>
        <para>The string representation of the value of this instance,
 consisting of a minus sign if the value is negative, and a sequence of digits
 ranging from 0 to 9 with no leading zeroes.</para>
      </returns>
    </member>
    <member name="M:System.Int64.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation, using the specified format. </para>
      </summary>
      <param name=" format">A format string.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.Int64.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified format and
 culture-specific format information. </para>
      </summary>
      <param name=" format">A format specification.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Int64.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to its 64-bit
 signed integer equivalent.</para>
      </summary>
      <param name=" s">A string containing a number to convert.</param>
      <returns>
        <para>A 64-bit signed integer equivalent to the number contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a
 specified style to its 64-bit signed integer equivalent.</para>
      </summary>
      <param name=" s">A string containing a number to convert. </param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />. </param>
      <returns>
        <para>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
 specified culture-specific format to its 64-bit signed integer equivalent.</para>
      </summary>
      <param name=" s">A string containing a number to convert.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
 specified style and culture-specific format to its 64-bit signed integer
 equivalent.</para>
      </summary>
      <param name=" s">A string containing a number to convert.</param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <returns>
        <para>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Int64.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified culture-specific
 format information. </para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Int64.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int64" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.Int64" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.IntPtr">
      <summary>
        <para> A platform-specific type that is used to represent
      a pointer or a handle.</para>
      </summary>
    </member>
    <member name="F:System.IntPtr.Zero">
      <summary>
        <para>A read-only field that represents a pointer or handle that has been initialized to zero.</para>
      </summary>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int32)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.IntPtr" /> using
   the specified 32-bit pointer or handle.</para>
      </summary>
      <param name="value">A pointer or handle contained in a 32-bit signed integer.</param>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int64)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified 64-bit pointer.</para>
      </summary>
      <param name="value">A pointer or handle contained in a 64-bit signed integer.</param>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Void*)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified
   pointer to an unspecified type.</para>
      </summary>
      <param name="value">A pointer to an unspecified type.</param>
    </member>
    <member name="M:System.IntPtr.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" obj">An object to compare with this instance or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.IntPtr" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.ToInt32">
      <summary>
        <para>Converts the value of this instance to a 32-bit signed integer.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer equal to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.ToInt64">
      <summary>
        <para>Converts the value of this instance to a 64-bit signed integer.</para>
      </summary>
      <returns>
        <para> A 64-bit signed integer equal to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its 
      equivalent string representation.</para>
      </summary>
      <returns>
        <para>The string 
      representation of the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
      <summary>
        <para>Converts the value of a 32-bit signed integer to an
   <see cref="T:System.IntPtr" />.</para>
      </summary>
      <param name="value">A 32-bit signed integer.</param>
      <returns>
        <para>A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
      <summary>
        <para>Converts the value of a 64-bit signed integer to an
   <see cref="T:System.IntPtr" />.</para>
      </summary>
      <param name="value">A 64-bit signed integer.</param>
      <returns>
        <para>A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
      <summary>
        <para> Converts the specified pointer to an unspecified type to an
   <see cref="T:System.IntPtr" />.</para>
      </summary>
      <param name="value">A pointer to an unspecified type.</param>
      <returns>
        <para>A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.IntPtr" /> to a pointer to an unspecified type.</para>
      </summary>
      <param name="value">An <see cref="T:System.IntPtr" />.</param>
      <returns>
        <para>The contents of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.IntPtr" /> to a 32-bit signed integer.</para>
      </summary>
      <param name="value">An <see cref="T:System.IntPtr" />.</param>
      <returns>
        <para>The contents of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.IntPtr" /> to a 64-bit signed integer.</para>
      </summary>
      <param name="value">An <see cref="T:System.IntPtr" />.</param>
      <returns>
        <para>The contents of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
      <summary>
        <para>Determines whether two specified instances of <see cref="T:System.IntPtr" /> are equal.</para>
      </summary>
      <param name="value1">An <see cref="T:System.IntPtr" />.</param>
      <param name=" value2">An <see cref="T:System.IntPtr" />.</param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="value1" /> equals <paramref name="value2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
      <summary>
        <para>Determines whether two specified instances of <see cref="T:System.IntPtr" /> are not equal.</para>
      </summary>
      <param name="value1">An <see cref="T:System.IntPtr" />.</param>
      <param name=" value2">An <see cref="T:System.IntPtr" />.</param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="value1" /> does not equal <paramref name="value2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.IntPtr.ToPointer">
      <summary>
        <para> Converts the value of this instance to a pointer to an 
      unspecified type.</para>
      </summary>
      <returns>
        <para>A pointer to <see cref="T:System.Void" />; that is, a pointer to memory containing data of an 
   unspecified type. </para>
      </returns>
    </member>
    <member name="P:System.IntPtr.Size">
      <summary>
        <para>Gets the size of this instance.</para>
      </summary>
    </member>
    <member name="T:System.InvalidCastException">
      <summary>
        <para>The exception that is thrown for invalid casting or explicit
      conversion.</para>
      </summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor">
      <summary>
   Initializes a new instance of the
<see cref="T:System.InvalidCastException" /> class.
</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.InvalidCastException" /> class with
      a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.InvalidCastException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.InvalidOperationException">
      <summary>
        <para> The exception that is thrown when a method call is invalid for the object's current
      state.</para>
      </summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor">
      <summary>
   Initializes a new instance of the
<see cref="T:System.InvalidOperationException" /> class.
</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.InvalidOperationException" /> class with
      a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.InvalidOperationException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.InvalidProgramException">
      <summary>
        <para> The exception that is thrown when a program contains invalid Microsoft intermediate
      language (MSIL) or metadata. Generally this indicates a bug in a
      compiler.</para>
      </summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.InvalidProgramException" />
   class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.InvalidProgramException" />
   class with a specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.InvalidProgramException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.IServiceProvider">
      <summary>
        <para>Defines a mechanism for retrieving a service object;
      that is, an object that provides custom support to other objects.</para>
      </summary>
    </member>
    <member name="M:System.IServiceProvider.GetService(System.Type)">
      <summary>
        <para>Gets the service object of the specified type.</para>
      </summary>
      <param name="serviceType">
        <para>An object that specifies the type of service object to get.</para>
      </param>
      <returns>
        <para>A service object of type <paramref name="serviceType" />.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> if there is no service object of type <paramref name="serviceType" />.</para>
      </returns>
    </member>
    <member name="T:System.LocalDataStoreSlot">
      <summary>
        <para>Encapsulates a memory slot to store local data. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.LocalDataStoreSlot.Finalize">
      <summary>
        <para>Releases the memory slot reserved by an object when the object no longer exists.</para>
      </summary>
    </member>
    <member name="T:System.Math">
      <summary>
        <para>Provides constants and static methods for trigonometric, logarithmic,
       and other common mathematical functions.</para>
      </summary>
    </member>
    <member name="F:System.Math.PI">
      <summary>
        <para>Represents the ratio of the circumference of a circle to its diameter, specified by the constant, (pi).</para>
      </summary>
    </member>
    <member name="F:System.Math.E">
      <summary>
        <para> Represents the natural logarithmic base, specified by the 
      constant, <see langword="e" />.</para>
      </summary>
    </member>
    <member name="M:System.Math.Acos(System.Double)">
      <summary>
        <para> 
       Returns the angle whose cosine is the specified number.</para>
      </summary>
      <param name="d">A number representing a cosine, where -1 (&lt;=) d (&lt;=) 1.</param>
      <returns>
        <para> An angle, q, measured in radians, such that 0 (&lt;=) q 
       (&lt;=
       ) (pi)</para>
        <para> -or-</para>
        <para>
          <see cref="F:System.Double.NaN" />
 if d &lt; -1 or d &gt; 1.</para>
      </returns>
    </member>
    <member name="M:System.Math.Asin(System.Double)">
      <summary>
        <para>Returns the angle whose sine is the specified number.</para>
      </summary>
      <param name="d">A number representing a sine, where -1 (&lt;=) d (&lt;=) 1.</param>
      <returns>
        <para>An angle, q, measured in radians, such that -(pi)/2 (&lt;=) q (&lt;=) 
       (pi)/2</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.Double.NaN" /> 
 if d &lt; -1 or d &gt; 1.</para>
      </returns>
    </member>
    <member name="M:System.Math.Atan(System.Double)">
      <summary>
        <para> Returns the
      angle whose tangent is the specified number.</para>
      </summary>
      <param name="d">A number representing a tangent.</param>
      <returns>
        <para>An angle, q, measured in radians, such that -(pi)/2 (&lt;=) q (&lt;= ) 
      (pi)/2.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.Double.NaN" /> if 
<paramref name="d" /> equals <see cref="F:System.Double.NaN" />, -(pi)/2 rounded to double precision (-1.5707963267949) 
   if <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, or (pi)/2 rounded to double precision
   (1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.PositiveInfinity" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Atan2(System.Double,System.Double)">
      <summary>
        <para> Returns the angle whose tangent is the quotient of two
      specified numbers.</para>
      </summary>
      <param name="y">The y coordinate of a point.</param>
      <param name="x">The x coordinate of a point.</param>
      <returns>
        <para> An angle, q, measured in radians, such that -(pi) &lt; q (&lt;=)
      (pi), and tan(q) = <paramref name="y" />/<paramref name="x" />, where
      (<paramref name="x" />,<paramref name="y" />) is a point in the Cartesian plane. Observe the following:</para>
        <list type="bullet">
          <item>
            <term>
         For (<paramref name="x" />,<paramref name="y" /> ) in quadrant 1, 0 &lt; q &lt; (pi)/2.</term>
          </item>
          <item>
            <term>
         For (<paramref name="x" />,<paramref name="y" /> ) in quadrant 2, (pi)/2 &lt; q (&lt;=) (pi).</term>
          </item>
          <item>
            <term>
         For (<paramref name="x" />,<paramref name="y" /> ) in quadrant 3, -(pi) &lt; q &lt; -(pi)/2.</term>
          </item>
          <item>
            <term>
         For (<paramref name="x" />,<paramref name="y" /> ) in quadrant 4, -(pi)/2 &lt; q &lt; 0.</term>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Math.Cos(System.Double)">
      <summary>
        <para> Returns the cosine of the specified angle.</para>
      </summary>
      <param name="d">An angle, measured in radians.</param>
      <returns>
        <para>The cosine of <paramref name="d" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Sin(System.Double)">
      <summary>
        <para> Returns the sine of the specified angle.</para>
      </summary>
      <param name="a">An angle, measured in radians.</param>
      <returns>
        <para>The sine of <paramref name="a" />. If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />,
   or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Tan(System.Double)">
      <summary>
        <para> Returns the tangent of the specified angle.</para>
      </summary>
      <param name="a">An angle, measured in radians.</param>
      <returns>
        <para>The tangent of <paramref name="a" />. If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />,
   or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Cosh(System.Double)">
      <summary>
        <para>Returns the hyperbolic cosine of the specified angle.</para>
      </summary>
      <param name="value">An angle, measured in radians.</param>
      <returns>
        <para>The hyperbolic cosine of <paramref name="value" />. If <paramref name="value" /> is equal
   to <see cref="F:System.Double.NegativeInfinity" /> or <see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> is returned. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />,
<see cref="F:System.Double.NaN" /> is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Sinh(System.Double)">
      <summary>
        <para>Returns the hyperbolic sine of the specified angle.</para>
      </summary>
      <param name=" value">An angle, measured in radians.</param>
      <returns>
        <para>The hyperbolic sine of <paramref name="value" />.
   If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />,
<see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NaN" />, this method returns a <see cref="T:System.Double" /> equal to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Tanh(System.Double)">
      <summary>
        <para>Returns the hyperbolic tangent of the specified angle.</para>
      </summary>
      <param name=" value">An angle, measured in radians.</param>
      <returns>
        <para>The hyperbolic tangent of <paramref name="value" />. If <paramref name="value" /> is equal to
<see cref="F:System.Double.NegativeInfinity" />, this method returns -1. If value is equal to <see cref="F:System.Double.PositiveInfinity" />, this method returns 1. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, this method returns 
<see cref="F:System.Double.NaN" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Round(System.Double)">
      <summary>
        <para> Returns the whole number nearest the
      specified value.</para>
      </summary>
      <param name="a">A double-precision floating-point number to be rounded.</param>
      <returns>
        <para> The
      whole number nearest <paramref name="a" />. If <paramref name="a" /> is halfway between two whole numbers, one of which by definition is even and the other odd, then the even number is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32)">
      <summary>
        <para> Returns the number with the specified precision nearest the
      specified value.</para>
      </summary>
      <param name="value">A double-precision floating-point number to be rounded.</param>
      <param name=" digits">The number of significant fractional digits (precision) in the return value.</param>
      <returns>
        <para> The number nearest <paramref name="value" />
with precision equal to <paramref name="digits" />. If <paramref name="value" /> is halfway between two numbers, one of
which is even and the other odd, then the even number is returned. If the
precision of <paramref name="value" /> is less than <paramref name="digits" />, then <paramref name="value" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Math.Round(System.Decimal)">
      <summary>
        <para> Returns the whole number nearest the
      specified value.</para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" /> number to be rounded.</param>
      <returns>
        <para> The whole number nearest parameter <paramref name="d" />. If <paramref name="d" /> is halfway between two whole numbers, one of which by definition is even and the other odd, then the even number is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32)">
      <summary>
        <para> Returns the number with the specified precision nearest the
      specified value.</para>
      </summary>
      <param name="d">A <see cref="T:System.Decimal" /> number to be rounded.</param>
      <param name=" decimals">The number of significant fractional digits (precision) in the return value.</param>
      <returns>
        <para> The number nearest <paramref name="d" />
with precision equal to <paramref name="decimals" />. If <paramref name="d" /> is halfway between two numbers, one of
which is even and the other odd, then the even number is returned. If the
precision of <paramref name="d" /> is less than <paramref name="decimals" />, then <paramref name="d" /> is returned unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Math.Ceiling(System.Double)">
      <summary>
        <para> Returns the smallest whole number greater than or equal to the specified
      number.</para>
      </summary>
      <param name="a">A number.</param>
      <returns>
        <para> The smallest whole number greater than or
      equal to <paramref name="a" />. If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />,
      or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Floor(System.Double)">
      <summary>
        <para> Returns the largest whole number less than or equal
      to the specified number.</para>
      </summary>
      <param name="d">A number.</param>
      <returns>
        <para> The largest whole number
      less than or equal to <paramref name="d" />. If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />,
      or <see cref="F:System.Double.PositiveInfinity" />, then that value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Sqrt(System.Double)">
      <summary>
        <para>Returns the square root of a specified number.</para>
      </summary>
      <param name="d">A number.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value of <paramref name="d" /></term>
            <description>Returns</description>
          </listheader>
          <item>
            <term> Zero, or positive</term>
            <description>The positive square root of <paramref name="d" />.</description>
          </item>
          <item>
            <term> Negative</term>
            <description>
              <see cref="F:System.Double.NaN" />
            </description>
          </item>
        </list>
        <para>If <paramref name="d" /> is equal
to <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Log(System.Double)">
      <summary>
        <para>Returns the natural (base <see langword="e" />
) logarithm of a specified number.</para>
      </summary>
      <param name="d">A number whose logarithm is to be found. </param>
      <returns>
        <list type="table">
          <listheader>
            <term>Sign of <paramref name="d" /></term>
            <description>Returns</description>
          </listheader>
          <item>
            <term> Positive</term>
            <description> The natural logarithm of <paramref name="d" />; that is, ln <paramref name="d," />
   or log<subscript term="e" /><paramref name="d" /></description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <see cref="F:System.Double.PositiveInfinity" />
            </description>
          </item>
          <item>
            <term> Negative</term>
            <description>
              <see cref="F:System.Double.NaN" />
            </description>
          </item>
        </list>
        <para>If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, returns <see cref="F:System.Double.NaN" />. If <paramref name="d" /> is equal to
<see cref="F:System.Double.PositiveInfinity" />, returns <see cref="F:System.Double.PositiveInfinity" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Log10(System.Double)">
      <summary>
        <para>Returns the base 10 logarithm of a specified number.</para>
      </summary>
      <param name="d">A number whose logarithm is to be found. </param>
      <returns>
        <list type="table">
          <listheader>
            <term>Sign of <paramref name="d" /></term>
            <description>Returns</description>
          </listheader>
          <item>
            <term> Positive</term>
            <description>The base 10 log of <paramref name="d" />; that is, log<subscript term="10" /><paramref name="d" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <see cref="F:System.Double.PositiveInfinity" />
            </description>
          </item>
          <item>
            <term> Negative</term>
            <description>
              <see cref="F:System.Double.NaN" />
            </description>
          </item>
        </list>
        <para>If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, thsi method returns
<see cref="F:System.Double.NaN" />. If <paramref name="d" /> is equal to <see cref="F:System.Double.PositiveInfinity" />, this method 
returns <see cref="F:System.Double.PositiveInfinity" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Exp(System.Double)">
      <summary>
        <para>Returns <see langword="e " /> raised to the
   specified power.</para>
      </summary>
      <param name="d">A number specifying a power.</param>
      <returns>
        <para> The number <see langword="e " /> raised to the power <paramref name="d" />. If <paramref name="d" /> equals <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.PositiveInfinity" />,
   that value is returned. If <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, 0 is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Pow(System.Double,System.Double)">
      <summary>
        <para>Returns a specified number raised to the specified power.</para>
      </summary>
      <param name="x">A number to be raised to a power.</param>
      <param name="y">A number that specifies a power.</param>
      <returns>
        <para> The number <paramref name="x" /> raised to the power <paramref name="y" />. The following table specifies the results if <paramref name="x" /> or <paramref name="y" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />,
   or <see cref="F:System.Double.PositiveInfinity" />.</para>
        <list type="table">
          <listheader>
            <term>Parameter Values</term>
            <description>Returns</description>
          </listheader>
          <item>
            <term>
              <paramref name="x" /> or <paramref name="y" /> is equal to Double.NaN</term>
            <description>
              <para>
                <see cref="F:System.Double.NaN" />.</para>
            </description>
          </item>
          <item>
            <term>
              <paramref name="x" /> is equal to Double.NegativeInfinity</term>
            <description>
              <see cref="F:System.Double.NegativeInfinity" /> if <paramref name="y" /> is
an odd integer; otherwise, <see cref="F:System.Double.PositiveInfinity" />.</description>
          </item>
          <item>
            <term>
              <paramref name="y" /> is equal to Double.NegativeInfinity</term>
            <description>0.</description>
          </item>
          <item>
            <term>
              <paramref name="x" /> is equal to Double.PositiveInfinity</term>
            <description>0 if <paramref name="y" /> is equal to <see cref="F:System.Double.NegativeInfinity" />; otherwise, <see cref="F:System.Double.PositiveInfinity" />
.</description>
          </item>
          <item>
            <term>
              <paramref name="y" /> is equal to Double.PositiveInfinity</term>
            <description>
              <see cref="F:System.Double.PositiveInfinity" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Math.IEEERemainder(System.Double,System.Double)">
      <summary>
        <para>Returns the remainder resulting from the division of a
      specified number by another specified number.</para>
      </summary>
      <param name="x">A dividend.</param>
      <param name="y">A divisor.</param>
      <returns>
        <para> A number equal to <paramref name="x" /> -
   (<paramref name="y" />Q), where Q is the quotient
   of <paramref name="x" />/<paramref name="y" /> rounded to the
   nearest integer (if <paramref name="x" />/<paramref name="y" /> falls
   halfway between two integers, the even
   integer is returned).</para>
        <para> If <paramref name="x" /> - (<paramref name="y" />Q) is zero, the value +0 is returned if
<paramref name="x" /> is positive, or -0 if <paramref name="x" /> is negative. </para>
        <para> If <paramref name="y" /> = 
0, <see cref="F:System.Double.NaN" /> (Not-A-Number) is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Abs(System.SByte)">
      <summary>
        <para> Returns the absolute value of an 8-bit signed
      integer.</para>
      </summary>
      <param name="value">A number in the range <see cref="F:System.SByte.MinValue" /> &lt; <paramref name="value" /> (&lt;=) <see cref="F:System.SByte.MaxValue" />.</param>
      <returns>
        <para>An 8-bit signed integer,
      x, such that 0 (&lt;=) x (&lt;=) <see cref="F:System.SByte.MaxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Abs(System.Int16)">
      <summary>
        <para> Returns the absolute value of a 16-bit signed
      integer.</para>
      </summary>
      <param name="value">A number in the range <see cref="F:System.Int16.MinValue" /> &lt; <paramref name="value" /> (&lt;=) <see cref="F:System.Int16.MaxValue" />.</param>
      <returns>
        <para>A 16-bit signed integer,
      x, such that 0 (&lt;=) x (&lt;=) <see cref="F:System.Int16.MaxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Abs(System.Int32)">
      <summary>
        <para> Returns the absolute value of a 32-bit signed
      integer.</para>
      </summary>
      <param name="value">A number in the range <see cref="F:System.Int32.MinValue" /> &lt; <paramref name="value" /> (&lt;=) <see cref="F:System.Int32.MaxValue" />.</param>
      <returns>
        <para>A 32-bit signed integer,
      x, such that 0 (&lt;=) x (&lt;=) <see cref="F:System.Int32.MaxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Abs(System.Int64)">
      <summary>
        <para> Returns the absolute value of a 64-bit signed
      integer.</para>
      </summary>
      <param name="value">A number in the range <see cref="F:System.Int64.MinValue" /> &lt; <paramref name="value" /> (&lt;=) <see cref="F:System.Int64.MaxValue" />.</param>
      <returns>
        <para>A 64-bit signed integer,
      x, such that 0 (&lt;=) x (&lt;=) <see cref="F:System.Int64.MaxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Abs(System.Single)">
      <summary>
        <para> Returns the absolute value of a single-precision floating-point
      number.</para>
      </summary>
      <param name="value">A number in the range <see cref="F:System.Single.MinValue" /> &lt; <paramref name="value" /> (&lt;=) <see cref="F:System.Single.MaxValue" />.</param>
      <returns>
        <para>A single-precision floating-point number,
      x, such that 0 (&lt;=) x (&lt;=) <see cref="F:System.Single.MaxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Abs(System.Double)">
      <summary>
        <para> Returns the absolute value of a double-precision floating-point
      number.</para>
      </summary>
      <param name="value">A number in the range <see cref="F:System.Double.MinValue" /> &lt; <paramref name="value" /> (&lt;=) <see cref="F:System.Double.MaxValue" />.</param>
      <returns>
        <para>A double-precision floating-point number,
      x, such that 0 (&lt;=) x (&lt;=) <see cref="F:System.Double.MaxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Abs(System.Decimal)">
      <summary>
        <para> Returns the absolute value of a <see cref="T:System.Decimal" /> number.</para>
      </summary>
      <param name="value">
        <para>A number in the range <see cref="F:System.Decimal.MinValue" /> (&lt;=) value (&lt;=) <see cref="F:System.Decimal.MaxValue" />. </para>
      </param>
      <returns>
        <para>A <see cref="T:System.Decimal" />, x, such that 0 (&lt;=) x (&lt;=) <see cref="F:System.Decimal.MaxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.SByte,System.SByte)">
      <summary>
        <para>Returns the larger of two 8-bit signed
      integers.</para>
      </summary>
      <param name="val1">The first of two 8-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 8-bit unsigned integers to compare.</param>
      <returns>
        <para> Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is
   larger.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.Byte,System.Byte)">
      <summary>
        <para>Returns the larger of two 8-bit unsigned
      integers.</para>
      </summary>
      <param name="val1">The first of two 8-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 8-bit unsigned integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is
   larger.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.Int16,System.Int16)">
      <summary>
        <para>Returns the larger of two 16-bit signed integers.</para>
      </summary>
      <param name=" val1">The first of two 16-bit signed integers to compare.</param>
      <param name=" val2">The second of two 16-bit signed integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is
   larger.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
      <summary>
        <para>Returns the larger of two 16-bit unsigned
      integers.</para>
      </summary>
      <param name="val1">The first of two 16-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 16-bit unsigned integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is
   larger.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.Int32,System.Int32)">
      <summary>
        <para>Returns the larger of two 32-bit signed integers.</para>
      </summary>
      <param name="val1">The first of two 32-bit signed integers to compare.</param>
      <param name="val2">The second of two 32-bit signed integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is
   larger.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
      <summary>
        <para>Returns the larger of two 32-bit unsigned integers.</para>
      </summary>
      <param name="val1">The first of two 32-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 32-bit unsigned integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is
   larger.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.Int64,System.Int64)">
      <summary>
        <para>Returns the larger of two 64-bit signed
      integers.</para>
      </summary>
      <param name="val1">The first of two 64-bit signed integers to compare.</param>
      <param name="val2">The second of two 64-bit signed integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is
   larger.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
      <summary>
        <para>Returns the larger of two 64-bit unsigned
      integers.</para>
      </summary>
      <param name="val1">The first of two 64-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 64-bit unsigned integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is
   larger.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.Single,System.Single)">
      <summary>
        <para>Returns the larger of two single-precision floating-point
      numbers.</para>
      </summary>
      <param name="val1">The first of two single-precision floating-point numbers to compare.</param>
      <param name="val2">The second of two single-precision floating-point numbers to compare.</param>
      <returns>
        <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger. If <paramref name="val1" /> or <paramref name="val2 " />exclusively is
   equal to <see cref="F:System.Single.NaN" />, the other value is returned. If both <paramref name="val1" /> and <paramref name="val2" /> are equal
   to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned. </para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.Double,System.Double)">
      <summary>
        <para>Returns the larger of two double-precision floating-point
      numbers.</para>
      </summary>
      <param name="val1">The first of two double-precision floating-point numbers to compare.</param>
      <param name="val2">The second of two double-precision floating-point numbers to compare.</param>
      <returns>
        <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger. If <paramref name="val1" /> or <paramref name="val2 " />exclusively is
   equal to <see cref="F:System.Double.NaN" />, the other value is returned. If both <paramref name="val1" /> and <paramref name="val2" /> are equal to
<see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
      <summary>
        <para>Returns the larger of two decimal
      numbers.</para>
      </summary>
      <param name="val1">The first of two <see cref="T:System.Decimal" /> numbers to compare.</param>
      <param name="val2">The second of two <see cref="T:System.Decimal" /> numbers to compare.</param>
      <returns>
        <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.SByte,System.SByte)">
      <summary>
        <para>Returns the smaller of two 8-bit signed
      integers.</para>
      </summary>
      <param name="val1">The first of two 8-bit signed integers to compare.</param>
      <param name="val2">The second of two 8-bit signed integers to compare.</param>
      <returns>
        <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.Byte,System.Byte)">
      <summary>
        <para>Returns the smaller of two 8-bit unsigned
      integers.</para>
      </summary>
      <param name="val1">The first of two 8-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 8-bit unsigned integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.Int16,System.Int16)">
      <summary>
        <para>Returns the smaller of two 16-bit signed
      integers.</para>
      </summary>
      <param name="val1">The first of two 16-bit signed integers to compare.</param>
      <param name="val2">The second of two 16-bit signed integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
      <summary>
        <para>Returns the smaller of two 16-bit unsigned
      integers.</para>
      </summary>
      <param name="val1">The first of two 16-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 16-bit unsigned integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.Int32,System.Int32)">
      <summary>
        <para>Returns the smaller of two 32-bit signed
      integers.</para>
      </summary>
      <param name="val1">The first of two 32-bit signed integers to compare.</param>
      <param name="val2">The second of two 32-bit signed integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
      <summary>
        <para>Returns the smaller of two 32-bit unsigned
      integers.</para>
      </summary>
      <param name="val1">The first of two 32-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 32-bit unsigned integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.Int64,System.Int64)">
      <summary>
        <para>Returns the smaller of two 64-bit signed
      integers.</para>
      </summary>
      <param name="val1">The first of two 64-bit signed integers to compare.</param>
      <param name="val2">The second of two 64-bit signed integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
      <summary>
        <para>Returns the smaller of two 64-bit unsigned integers.</para>
      </summary>
      <param name="val1">The first of two 64-bit unsigned integers to compare.</param>
      <param name="val2">The second of two 64-bit unsigned integers to compare.</param>
      <returns>
        <para>   Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.Single,System.Single)">
      <summary>
        <para>Returns the smaller of two single-precision floating-point
      numbers.</para>
      </summary>
      <param name="val1">The first of two single-precision floating-point numbers to compare.</param>
      <param name="val2">The second of two single-precision floating-point numbers to compare.</param>
      <returns>
        <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller. If <paramref name="val1" /> or <paramref name="val2 " />exclusively is
   equal to <see cref="F:System.Single.NaN" />, the other value is returned. If both <paramref name="val1" /> and <paramref name="val2" /> are equal
   to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned. </para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.Double,System.Double)">
      <summary>
        <para>Returns the smaller of two double-precision floating-point
      numbers.</para>
      </summary>
      <param name="val1">The first of two double-precision floating-point numbers to compare.</param>
      <param name="val2">The second of two double-precision floating-point numbers to compare.</param>
      <returns>
        <para>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller. If <paramref name="val1" /> or <paramref name="val2 " />exclusively is
   equal to <see cref="F:System.Double.NaN" />, the other value is returned. If both <paramref name="val1" /> and <paramref name="val2" /> are equal
   to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</para>
      </returns>
    </member>
    <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
      <summary>
        <para>Returns the smaller of two decimal
      numbers.</para>
      </summary>
      <param name="val1">The first of two <see cref="T:System.Decimal" /> numbers to compare.</param>
      <param name="val2">The second of two <see cref="T:System.Decimal" /> numbers to compare.</param>
      <returns>
        <para>Parameter <paramref name="val1" /> or <paramref name="val2" />,  whichever is smaller.</para>
      </returns>
    </member>
    <member name="M:System.Math.Log(System.Double,System.Double)">
      <summary>
        <para>Returns the
      logarithm of a specified number in a specified base.</para>
      </summary>
      <param name="a">A number whose logarithm is to be found.</param>
      <param name="newBase">The base of the logarithm.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Sign of <paramref name="a" /></term>
            <description>Returns</description>
          </listheader>
          <item>
            <term> Positive</term>
            <description>The logarithm of <paramref name="a" />, in base, <paramref name="newBase" />; that is, log<subscript term="newBase" /><paramref name="a" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <see cref="F:System.Double.PositiveInfinity" />
            </description>
          </item>
          <item>
            <term> Negative</term>
            <description>
              <see cref="F:System.Double.NaN" />
            </description>
          </item>
        </list>
        <para>If <paramref name="a" /> is equal
to <see cref="F:System.Double.PositiveInfinity" /> and <paramref name="newBase" /> is not equal to <see cref="F:System.Double.PositiveInfinity" />,
<see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.NaN" />, this method returns <see cref="F:System.Double.PositiveInfinity" />. If <paramref name="newBase" /> is equal 
to <see cref="F:System.Double.PositiveInfinity" /> and <paramref name="a" /> is not equal to
<see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.NaN" />, this method returns 0. If both <paramref name="a" /> and <paramref name="newBase" /> are equal to <see cref="F:System.Double.PositiveInfinity" />, or <paramref name="a" /> or <paramref name="newBase" /> is equal 
to <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.NegativeInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</para>
      </returns>
    </member>
    <member name="M:System.Math.Sign(System.SByte)">
      <summary>
        <para> Returns a value indicating the sign of an 8-bit signed integer.</para>
      </summary>
      <param name="value">A signed number.</param>
      <returns>
        <para>A number indicating the sign of <paramref name="value." /></para>
        <list type="table">
          <listheader>
            <term>Number</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> is less than 
    zero.</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="value" /> is equal to zero.</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="value" /> is greater than zero.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Math.Sign(System.Int16)">
      <summary>
        <para>Returns a value indicating the sign of a 16-bit signed integer.</para>
      </summary>
      <param name="value">A signed number.</param>
      <returns>
        <para>A number indicating the sign of <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Number</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> is less than 
    zero.</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="value" /> is equal to zero.</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="value" /> is greater than zero.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Math.Sign(System.Int32)">
      <summary>
        <para>Returns a value indicating the sign of a 32-bit signed integer.</para>
      </summary>
      <param name="value">A signed number.</param>
      <returns>
        <para>A number indicating the sign of <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Number</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> is less than 
    zero.</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="value" /> is equal to zero.</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="value" /> is greater than zero.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Math.Sign(System.Int64)">
      <summary>
        <para>Returns a value indicating the sign of a 64-bit signed integer.</para>
      </summary>
      <param name="value">A signed number.</param>
      <returns>
        <para>A number indicating the sign of <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Number</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> is less than 
    zero.</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="value" /> is equal to zero.</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="value" /> is greater than zero.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Math.Sign(System.Single)">
      <summary>
        <para> Returns a value indicating the sign of a single-precision floating-point number.</para>
      </summary>
      <param name="value">A signed number.</param>
      <returns>
        <para>A number indicating the sign of <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Number</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> is less than
      zero.</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="value" /> is equal to zero.</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="value" /> is greater than zero.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Math.Sign(System.Double)">
      <summary>
        <para> Returns a value indicating the sign of a double-precision floating-point number.</para>
      </summary>
      <param name="value">A signed number.</param>
      <returns>
        <para>A number indicating the sign of <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Number</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> is less than
      zero.</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="value" /> is equal to zero.</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="value" /> is greater than zero.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Math.Sign(System.Decimal)">
      <summary>
        <para>Returns a value indicating the sign of a
      decimal number.</para>
      </summary>
      <param name="value">A signed <see cref="T:System.Decimal" /> number.</param>
      <returns>
        <para>A number indicating the sign of <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Number</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="value" /> is less than
      zero.</description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="value" /> is equal to zero.</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="value" /> is greater than zero.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="T:System.MethodAccessException">
      <summary>
        <para>The exception that is thrown when there is an illegal attempt to access a private or protected method
      inside a class.</para>
      </summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.MethodAccessException" /> class, setting the <see cref="P:System.Exception.Message" /> 
   property of the new instance to a system-supplied message that describes the
   error, such as "Attempt to access the method failed." This message takes into
   account the current system culture.</para>
      </summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class with
   a specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MethodAccessException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MethodAccessException" />
class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.MissingFieldException">
      <summary>
        <para>The exception that is thrown when there is an attempt to dynamically access a
      field that does not exist.</para>
      </summary>
    </member>
    <member name="T:System.MissingMemberException">
      <summary>
        <para>The exception that is thrown when there is an attempt to dynamically access a class member that
      does not exist.</para>
      </summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor">
      <summary>
        <para>Initializes a new instance of the
      
   <see cref="T:System.MissingMemberException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the
      
   <see cref="T:System.MissingMemberException" />
   
   class with a specified error message.
   </para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.Exception)">
      <summary>
        <para> Initializes a new instance of the
      
   <see cref="T:System.MissingMemberException" />
   
   class
   with a specified error message and a
   reference to the inner exception that is the root cause of this exception.
   </para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">An instance of <see cref="T:System.Exception" /> that is the cause of the current <see langword="Exception" />. If <paramref name="inner" /> is not a null reference (<see langword="Nothing" /> in Visual Basic), then the current <see langword="Exception" /> is raised in a catch block handling <paramref name="inner" />.</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>
            
            Initializes a new instance of the 
            
            <see cref="T:System.MissingMemberException" />
            
            
class with serialized data.
         
         </para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name=" context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.String)">
      <summary>
        <para>
            
            Initializes a new instance of the 
            
            <see cref="T:System.MissingMemberException" />
            
             class with the specified
   class name and member name.
         
         </para>
      </summary>
      <param name="className">The name of the class in which access to a nonexistent member was attempted.</param>
      <param name=" memberName">The name of the member that cannot be accessed.</param>
    </member>
    <member name="M:System.MissingMemberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>
            
             Sets the 
            
            <see cref="T:System.Runtime.Serialization.SerializationInfo" />
            
             object
   with the class name, the member name, the
   signature of the missing member, and additional exception information.
         
         </para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="F:System.MissingMemberException.ClassName">
      <summary>
        <para>
       Holds the class name of the missing member.
    </para>
      </summary>
    </member>
    <member name="F:System.MissingMemberException.MemberName">
      <summary>
        <para>
       Holds the name of the missing member.
    </para>
      </summary>
    </member>
    <member name="F:System.MissingMemberException.Signature">
      <summary>
        <para>Holds the signature of the missing member.</para>
      </summary>
    </member>
    <member name="P:System.MissingMemberException.Message">
      <summary>
        <para>Gets the text string showing the class name, the member name, and the 
      signature of the missing member. </para>
      </summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.MissingFieldException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the
   <see cref="T:System.MissingFieldException" />
   
   class with a specified error message.
   </para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.Exception)">
      <summary>
        <para> Initializes a new instance of the
   <see cref="T:System.MissingFieldException" />
   
   class with a specified error message and a reference to the
   inner exception that is the cause of this exception.
   </para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>
            Initializes a new instance of the 
            <see cref="T:System.MissingFieldException" />
            
class with serialized data.
         </para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.String)">
      <summary>
        <para>
            Initializes a new instance of the 
            <see cref="T:System.MissingFieldException" />
             class with the specified 
   class name and field name.
         </para>
      </summary>
      <param name="className">The name of the class in which access to a nonexistent field was attempted.</param>
      <param name=" fieldName">The name of the field that cannot be accessed.</param>
    </member>
    <member name="P:System.MissingFieldException.Message">
      <summary>
        <para>Gets the text string showing the signature of the missing
      field, the class name, and the field name. This property is read-only.</para>
      </summary>
    </member>
    <member name="T:System.MissingMethodException">
      <summary>
        <para>The exception that is thrown when there is an attempt to dynamically access a
      method that does not exist.</para>
      </summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.MissingMethodException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the
   <see cref="T:System.MissingMethodException" />
   
   class with a specified error message.
   </para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.Exception)">
      <summary>
        <para> Initializes a new instance of the
   <see cref="T:System.MissingMethodException" />
   
   class with a specified error message and a reference to the
   inner exception that is the cause of this exception.
   </para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a<see langword="catch" />block that handles the inner exception.</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>
            Initializes a new instance of the 
            <see cref="T:System.MissingMethodException" />
            
class with serialized data.
         </para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.String)">
      <summary>
        <para>
            Initializes a new instance of the 
            <see cref="T:System.MissingMethodException" />
             class with the specified 
   class name and method name.
         </para>
      </summary>
      <param name="className">The name of the class in which access to a nonexistent method was attempted.</param>
      <param name=" methodName">The name of the method that cannot be accessed.</param>
    </member>
    <member name="P:System.MissingMethodException.Message">
      <summary>
        <para>Gets the text string showing the class name, the method
      name, and the signature of the missing method. This property is read-only.</para>
      </summary>
    </member>
    <member name="T:System.MulticastNotSupportedException">
      <summary>
        <para>The exception that is thrown when there is an attempt to
      combine two instances of a non-combinable delegate type unless one of the
      operands is a null reference (<see langword="Nothing" /> in Visual Basic). This class cannot be
      inherited.</para>
      </summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.MulticastNotSupportedException" /> class.
</summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MulticastNotSupportedException" /> class with
   a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MulticastNotSupportedException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.NonSerializedAttribute">
      <summary>
        <para> Indicates that a field of a serializable class should not be serialized. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.NonSerializedAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NonSerializedAttribute" />
class.</para>
      </summary>
    </member>
    <member name="T:System.NotFiniteNumberException">
      <summary>
        <para> The exception that is thrown when a floating-point value is positive infinity,
      negative infinity, or Not-a-Number (NaN).</para>
      </summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class.
</summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.Double)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" />
class with the invalid number.</para>
      </summary>
      <param name="offendingNumber">The value of the argument that caused the exception.</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with a specified error
   message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Double)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" />
class with a specified error message and the invalid number.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
      <param name="offendingNumber">The value of the argument that caused the exception.</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Double,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with a specified error message, the invalid
   number, and a reference to the inner exception that is root cause of this
   exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="offendingNumber">The value of the argument that caused the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.NotFiniteNumberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
object with the invalid number and additional exception information.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.NotFiniteNumberException.OffendingNumber">
      <summary>
        <para> Gets the invalid number that is a positive infinity, a negative infinity, or Not-a-Number (NaN).</para>
      </summary>
    </member>
    <member name="T:System.NotImplementedException">
      <summary>
        <para>The exception that is thrown when a
      requested method or operation is not implemented.</para>
      </summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotImplementedException" />
 class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotImplementedException" /> 
 class with a specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotImplementedException" /> 
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotImplementedException" />
class with serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name=" context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.NotSupportedException">
      <summary>
        <para> The exception that is thrown when an invoked method is
      not supported, or when there is an attempt to read, seek, or write to a stream that does not support
      the invoked functionality.</para>
      </summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class, setting the <see cref="P:System.Exception.Message" />
   property of the new instance to a system-supplied message that describes the
   error. This message takes into account the current system culture.
</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class with
   a specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> 
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NotSupportedException" />
class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.NullReferenceException">
      <summary>
        <para> The exception that is thrown when there is an attempt
      to dereference a null object reference.</para>
      </summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class, setting the <see cref="P:System.Exception.Message" />
   property of the new instance to a system-supplied message that describes the
   error, such as "The value 'null' was found where an instance of an object was
   required." This message takes into account the current system culture.
</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class with
   a specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> 
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.ObjectDisposedException">
      <summary>
        <para>The exception that is thrown when an operation is
      performed on a disposed object.</para>
      </summary>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with a string
   containing the name of the disposed object.</para>
      </summary>
      <param name="objectName">A string containing the name of the disposed object.</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with the specified
   object name and message.</para>
      </summary>
      <param name="objectName"> The name of the disposed object.</param>
      <param name=" message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with serialized 
   data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ObjectDisposedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Retrieves the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the parameter name and 
   additional exception information.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name=" context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.ObjectDisposedException.Message">
      <summary>
        <para>Gets the message that describes the error.</para>
      </summary>
    </member>
    <member name="P:System.ObjectDisposedException.ObjectName">
      <summary>
        <para>Gets the name of the disposed object.</para>
      </summary>
    </member>
    <member name="T:System.ObsoleteAttribute">
      <summary>
        <para> Marks the program elements that are no longer in use. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with
   default properties.</para>
      </summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with a
   specified workaround message.</para>
      </summary>
      <param name="message">The text string that describes alternative workarounds.</param>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with a workaround message and a
   Boolean value indicating whether the obsolete element usage is considered an error.</para>
      </summary>
      <param name="message">The text string that describes alternative workarounds.</param>
      <param name="error">The Boolean value that indicates whether the obsolete element usage is considered an error.</param>
    </member>
    <member name="P:System.ObsoleteAttribute.Message">
      <summary>
        <para>Gets the workaround message, including a description of the alternative program elements.</para>
      </summary>
    </member>
    <member name="P:System.ObsoleteAttribute.IsError">
      <summary>
        <para> Gets a Boolean value indicating whether the compiler will treat usage of the obsolete program
      element as an error.</para>
      </summary>
    </member>
    <member name="T:System.OperatingSystem">
      <summary>
        <para>Represents information about an operating system, such as the version and 
       platform identifier.</para>
      </summary>
    </member>
    <member name="M:System.OperatingSystem.#ctor(System.PlatformID,System.Version)">
      <summary>
        <para>Initializes a new instance of the <see langword="OperatingSystem" /> class, 
    using the specified platform identifier value and version object.</para>
      </summary>
      <param name=" platform">A <see cref="T:System.PlatformID" /> enumerated constant that indicates the operating system platform.</param>
      <param name=" version">A <see cref="T:System.Version" /> object that indicates the version of the operating system.</param>
    </member>
    <member name="M:System.OperatingSystem.Clone">
      <summary>
        <para>Returns an <see langword="OperatingSystem" /> object that is identical to this 
    instance.</para>
      </summary>
      <returns>
        <para>An <see langword="OperatingSystem" /> object that is a copy of this 
    instance.</para>
      </returns>
    </member>
    <member name="M:System.OperatingSystem.ToString">
      <summary>
        <para>Converts the value of this instance to its equivalent
   <see langword="String" /> representation. </para>
      </summary>
      <returns>
        <para>The format of the return value is:</para>
        <para>platform majorVersion.minorVersion.build.revision</para>
        <para>For example, if the operating sysem is Windows 2000, the
      return value is:</para>
        <para>"Microsoft Windows NT 5.0.2195.0".</para>
      </returns>
    </member>
    <member name="P:System.OperatingSystem.Platform">
      <summary>
        <para>Gets a <see langword="PlatformID" /> value that identifies this operating 
    system platform.</para>
      </summary>
    </member>
    <member name="P:System.OperatingSystem.Version">
      <summary>
        <para>Gets a <see langword="Version" /> object that identifies this operating 
    system.</para>
      </summary>
    </member>
    <member name="T:System.OverflowException">
      <summary>
        <para>The exception that is thrown when an arithmetic, casting, or conversion operation in a checked
      context results in an overflow.</para>
      </summary>
    </member>
    <member name="M:System.OverflowException.#ctor">
      <summary>
   Initializes a new instance of the
<see cref="T:System.OverflowException" /> class.
</summary>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.OverflowException" />
class with a specified error message.</para>
      </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.OverflowException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.OverflowException" /> 
class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.ParamArrayAttribute">
      <summary>
        <para> Indicates that the method will allow a variable number of arguments in its invocation. This class cannot be inherited. </para>
      </summary>
    </member>
    <member name="M:System.ParamArrayAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ParamArrayAttribute" /> class with default 
   properties. </para>
      </summary>
    </member>
    <member name="T:System.PlatformID">
      <summary>
        <para> 
       Describes the platforms supported by an assembly.</para>
      </summary>
    </member>
    <member name="F:System.PlatformID.Win32S">
      <summary>
        <para> The operating system is Win32s. Win32s is a layer that runs on 16-bit versions of Windows to provide access to 32-bit applications.</para>
      </summary>
    </member>
    <member name="F:System.PlatformID.Win32Windows">
      <summary>
        <para> The operating system is Windows 95 or later.</para>
      </summary>
    </member>
    <member name="F:System.PlatformID.Win32NT">
      <summary>
        <para> The operating system is Windows NT or later.</para>
      </summary>
    </member>
    <member name="T:System.PlatformNotSupportedException">
      <summary>
        <para>The exception that is thrown when a feature does not run
      on a particular platform.</para>
      </summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> 
 class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with
    a specified error message.</para>
      </summary>
      <param name="message">The text message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> 
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Random">
      <summary>
        <para> Represents
      a pseudo-random number generator, a device
      that produces a sequence of numbers that meet certain statistical requirements
      for randomness.</para>
      </summary>
    </member>
    <member name="M:System.Random.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see langword="Random" />
   class, using a time-dependent default seed
   value.</para>
      </summary>
    </member>
    <member name="M:System.Random.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.Random" /> class, using the specified
      seed value.</para>
      </summary>
      <param name="Seed">A number used to calculate a starting value for the pseudo-random number sequence.</param>
    </member>
    <member name="M:System.Random.Sample">
      <summary>
        <para> Returns a random number
      between 0.0 and 1.0.</para>
      </summary>
      <returns>
        <para> A
      double-precision floating point number greater than or equal to 0.0, and
      less than 1.0.</para>
      </returns>
    </member>
    <member name="M:System.Random.Next">
      <summary>
        <para>Returns a positive random number.</para>
      </summary>
      <returns>
        <para>A number greater than or equal to zero and less than
      <see cref="F:System.Int32.MaxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Random.Next(System.Int32,System.Int32)">
      <summary>
        <para>Returns a random number within a specified range.</para>
      </summary>
      <param name="minValue">The lower bound of the random number returned.</param>
      <param name="maxValue">The upper bound of the random number returned. <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />.</param>
      <returns>
        <para>A number greater than or equal to <paramref name="minValue" /> and
   less than <paramref name="maxValue" />. If <paramref name="minValue" /> equals <paramref name="maxValue" />,
<paramref name="minValue" />
is returned.</para>
      </returns>
    </member>
    <member name="M:System.Random.Next(System.Int32)">
      <summary>
        <para>Returns a positive random number less than the specified maximum.</para>
      </summary>
      <param name="maxValue">The upper bound of the random number to be generated. <paramref name="maxValue" /> must be greater than or equal to zero.</param>
      <returns>
        <para>A number greater than or equal to zero, and less than 
    <paramref name="maxValue" />.</para>
      </returns>
    </member>
    <member name="M:System.Random.NextDouble">
      <summary>
        <para>Returns a random number between 0.0 and 1.0.</para>
      </summary>
      <returns>
        <para>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</para>
      </returns>
    </member>
    <member name="M:System.Random.NextBytes(System.Byte[])">
      <summary>
        <para>Fills the elements of a specified array of bytes with random numbers.</para>
      </summary>
      <param name="buffer">An array of bytes to contain random numbers.</param>
    </member>
    <member name="T:System.RankException">
      <summary>
        <para> The exception that is thrown when an array with the
      wrong number of dimensions is passed to a method.</para>
      </summary>
    </member>
    <member name="M:System.RankException.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.RankException" /> class.
</summary>
    </member>
    <member name="M:System.RankException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.RankException" /> class with
   a specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error.</param>
    </member>
    <member name="M:System.RankException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.RankException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.RankException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.RankException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.RuntimeArgumentHandle">
      <summary>
        <para> References a variable-length argument
 list.
 </para>
      </summary>
    </member>
    <member name="T:System.RuntimeFieldHandle">
      <summary>
        <para> Represents a
      field using an internal metadata token.</para>
      </summary>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para> Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" />
with the data necessary to deserialize the field represented by
this instance.</para>
      </summary>
      <param name="info"> The object to populate with serialization information. </param>
      <param name=" context"> (Reserved) The place to store and retrieve serialized data. </param>
    </member>
    <member name="P:System.RuntimeFieldHandle.Value">
      <summary>
        <para> Gets the value of this instance.
      </para>
      </summary>
    </member>
    <member name="T:System.RuntimeMethodHandle">
      <summary>
        <para> The <see cref="T:System.RuntimeMethodHandle" /> is a handle to the internal metadata representation of a method.
   </para>
      </summary>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetFunctionPointer">
      <summary>
        <para>Obtains a pointer to the method represented by this instance.</para>
      </summary>
      <returns>
        <para>A pointer to the method represented by this instance.</para>
      </returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data necessary to deserialize the field represented by this instance.</para>
      </summary>
      <param name="info">The object to populate with serialization information. </param>
      <param name="context">(Reserved) The place to store and retrieve serialized data. </param>
    </member>
    <member name="P:System.RuntimeMethodHandle.Value">
      <summary>
        <para> Gets the value of this instance.
      </para>
      </summary>
    </member>
    <member name="T:System.Type">
      <summary>
        <para>Represents type declarations: class types, interface types, array
      types, value types, and enumeration types.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.MemberInfo">
      <summary>
        <para>Discovers the attributes of a member and provides access
      to member metadata.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.ICustomAttributeProvider">
      <summary>
        <para>
       Provides custom attributes for reflection objects that
       support
       them.
    </para>
      </summary>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
        <para> Returns
      an array of custom attributes defined on this member,
      identified by type, or an empty
      array if there are no custom attributes of that type.
      </para>
      </summary>
      <param name="attributeType">The type of the custom attributes. </param>
      <param name="inherit">When <see langword="true" />, look up the hierarchy chain for the inherited custom attribute. </param>
      <returns>
        <para> An array of
      Objects representing custom attributes, or an empty array.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)">
      <summary>
        <para> Returns an array of all of the custom attributes defined
      on this member, excluding
      named attributes, or an empty array if there are no custom
      attributes.
      </para>
      </summary>
      <param name="inherit">When <see langword="true" />, look up the hierarchy chain for the inherited custom attribute. </param>
      <returns>
        <para> An array of Objects representing custom attributes, or
      an empty array.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)">
      <summary>
        <para> Indicates whether one or more instance of <paramref name="attributeType" /> is
   defined on this member.
   </para>
      </summary>
      <param name="attributeType">The type of the custom attributes. </param>
      <param name="inherit">When <see langword="true" />, look up the hierarchy chain for the inherited custom attribute. </param>
      <returns>
        <para>
          <see langword="true " />if the <paramref name="attributeType " />is
   defined on this member; <see langword="false " />
   otherwise.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.MemberInfo" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
      <summary>
        <para> When overridden in a derived class, returns an array of all of the custom attributes.</para>
      </summary>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>
        <para> An array of all the custom attributes, or an array with
      zero elements if no attributes are
      defined.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
        <para>When overridden in a derived class, returns an array of custom attributes identified by
   <see cref="T:System.Type" /> 
   .</para>
      </summary>
      <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>
        <para>An array of custom attributes defined on this reflected member,
      or an array with zero (0) elements if no attributes are
      defined.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
      <summary>
        <para>When overridden in a derived class, indicates whether
      one or more instance of <paramref name="attributeType" />
      is defined
      on this member.</para>
      </summary>
      <param name="attributeType">The <see langword="Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
      <returns>
        <para>
          <see langword="true" /> if one or more instance of <paramref name="attributeType" /> is defined on this member; otherwise
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.MemberType">
      <summary>
        <para> Gets the type of this member, such as field, method, and so
      on.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MemberInfo.Name">
      <summary>
        <para>Gets the name of this member.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MemberInfo.DeclaringType">
      <summary>
        <para>Gets the class that declares this member.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MemberInfo.ReflectedType">
      <summary>
        <para>Gets the class object that was used to obtain this
      instance of <see langword="MemberInfo" />
      .</para>
      </summary>
    </member>
    <member name="T:System.Reflection.IReflect">
      <summary>
        <para>Allows objects to return <see cref="T:System.Reflection.MemberInfo" />
objects that represent an object.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Retrieves a <see langword="MethodInfo" /> object
   corresponding to a specified method, using a <see langword="Type" />
   array to choose from among overloaded
   methods.</para>
      </summary>
      <param name="name">The name of the member to find.</param>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <param name="binder">An object that implements <see cref="T:System.Reflection.Binder" /> , containing properties related to this method.</param>
      <param name="types">An array used to choose among overloaded methods.</param>
      <param name="modifiers">An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.</param>
      <returns>
        <para>The requested method that matches all the specified parameters.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Retrieves a <see cref="T:System.Reflection.MethodInfo" />
object corresponding to a specified
method under specified search constraints.</para>
      </summary>
      <param name="name">The name of the member to find.</param>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>
        <para>A <see langword="MethodInfo" /> 
object containing the method information, with the match being based on the
method name and search constraints specified in <paramref name="bindingAttr" />

.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)">
      <summary>
        <para> Retrieves an array of <see cref="T:System.Reflection.MethodInfo" />
objects with all public methods or
all methods of the current class.</para>
      </summary>
      <param name="bindingAttr">The binding attributes used to control the search. </param>
      <returns>
        <para> An array of <see langword="MethodInfo" /> objects containing all the methods
   defined for this reflection object that meet the search constraints specified in
<paramref name="bindingAttr" />
.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Returns the <see cref="T:System.Reflection.FieldInfo" /> object corresponding to the specified 
   field and <see langword="BindingFlag" />
   
   .</para>
      </summary>
      <param name="name">The name of the field to find.</param>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>
        <para>A <see langword="FieldInfo" /> object 
   containing the field information for the named object that meets the search
   constraints specified in <paramref name="bindingAttr" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)">
      <summary>
        <para>Returns an array of <see cref="T:System.Reflection.FieldInfo" />
objects corresponding to all fields of the current
class.</para>
      </summary>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>
        <para>An array of <see langword="FieldInfo" /> objects containing all the field 
   information for this reflection object that meets the search constraints
   specified in <paramref name="bindingAttr" />
   
   .</para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Retrieves a <see langword="PropertyInfo" />
object corresponding to a
specified property under specified search constraints.</para>
      </summary>
      <param name="name">The name of the property to find.</param>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>
        <para>A <see langword="PropertyInfo" /> 
object for the located property that meets the search constraints specified in
<paramref name="bindingAttr" />, or <see langword="null" /> if the property was not
located.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Retrieves a <see cref="T:System.Reflection.PropertyInfo" /> object corresponding to a specified property
   with specified search constraints.</para>
      </summary>
      <param name="name">The name of the member to find.</param>
      <param name="bindingAttr">The binding attribute used to control the search.</param>
      <param name="binder">An object that implements <see cref="T:System.Reflection.Binder" /> , containing properties related to this method.</param>
      <param name="returnType">The type of the property.</param>
      <param name="types">An array used to choose among overloaded methods with the same name.</param>
      <param name="modifiers">An array used to choose the parameter modifiers.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object for the
   located property, if a property with the specified name was located in this
   reflection object, or <see langword="null" /> if the property was not located.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)">
      <summary>
        <para>
       Retrieves an array of <see cref="T:System.Reflection.PropertyInfo" />
       objects corresponding
       to all public properties or to all properties of the current class.
    </para>
      </summary>
      <param name="bindingAttr">
    The binding attribute used to control the search.
 </param>
      <returns>
        <para>
       An array of <see langword="PropertyInfo" />
       objects
       for all the properties defined on the reflection object.
    </para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Retrieves an array of <see cref="T:System.Reflection.MemberInfo" /> objects corresponding to
   all public members or to all members that match a specified name.</para>
      </summary>
      <param name="name">The name of the member to find.</param>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>
        <para>An array of
   <see langword="MemberInfo" /> objects
      matching <paramref name="name." /></para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)">
      <summary>
        <para>Retrieves an array of <see cref="T:System.Reflection.MemberInfo" /> objects corresponding
    either to all public members or to all members of the current class.</para>
      </summary>
      <param name="bindingAttr">The binding attributes used to control the search.</param>
      <returns>
        <para>An array of <see langword="MemberInfo" />
 objects containing all the
 member information for this reflection object.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>
        <para>Invokes a specified member.</para>
      </summary>
      <param name="name">The name of the member to find.</param>
      <param name=" invokeAttr">One of the <see langword="BindingFlags" /> invocation attributes. The <paramref name="invokeAttr " />parameter may be a constructor, method, property, or field. A suitable invocation attribute must be specified. Invoke the default member of a class by passing the empty string ("") as the name of the member.</param>
      <param name=" binder">One of the <see cref="T:System.Reflection.BindingFlags" /> bit flags. Implements <see cref="T:System.Reflection.Binder" /> , containing properties related to this method.</param>
      <param name="target">The object on which to invoke the specified member. This parameter is ignored for static members.</param>
      <param name=" args">An array of objects that contains the number, order, and type of the parameters of the member to be invoked. This is an empty array if there are no parameters.</param>
      <param name=" modifiers">An array of <see langword="ParameterModifier" /> objects. This array has the same length as <paramref name="args," /> representing the invoked member's argument attributes in the metadata. A parameter can have the following attributes: <see langword="pdIn" />, <see langword="pdOut" />, <see langword="pdRetval" />, <see langword="pdOptional" />, and <see langword="pdHasDefault" /> . These represent [In], [Out], [retval], [optional], and a default parameter, respectively. These attributes are used by various interoperability services.</param>
      <param name=" culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. For example, <paramref name="culture" /> converts a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, since 1000 is represented differently by different cultures. If this parameter is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread is used.</param>
      <param name="namedParameters">A <see langword="String" /> array of parameters.</param>
      <returns>
        <para>The specified member.</para>
      </returns>
    </member>
    <member name="P:System.Reflection.IReflect.UnderlyingSystemType">
      <summary>
        <para> Gets the underlying type that represents the <see langword="IReflect" />
object.</para>
      </summary>
    </member>
    <member name="F:System.Type.FilterAttribute">
      <summary>
        <para>Represents the member filter used on attributes. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Type.FilterName">
      <summary>
        <para>Represents the case-sensitive member filter used on names. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Type.FilterNameIgnoreCase">
      <summary>
        <para>Represents the case-insensitive member filter used on names. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Type.Missing">
      <summary>
        <para> Represents a missing value in the <see cref="T:System.Type" /> information. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Type.Delimiter">
      <summary>
        <para> Separates names in the
      namespace of the <see cref="T:System.Type" />. This field is
      read-only.</para>
      </summary>
    </member>
    <member name="F:System.Type.EmptyTypes">
      <summary>
        <para> Represents an empty array of type <see cref="T:System.Type" />. This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.Type.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Type" /> class.
   </para>
      </summary>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> with
   the specified name, specifying whether to perform a case-sensitive search and whether
   to throw an exception if an error occurs while loading the <see cref="T:System.Type" />.</para>
      </summary>
      <param name="typeName">The name of the <see cref="T:System.Type" /> to get.</param>
      <param name="throwOnError">
        <para>
          <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if an error occurs while loading the <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>
          <see langword="false" /> to ignore errors while loading the <see cref="T:System.Type" />.</para>
      </param>
      <param name="ignoreCase">
        <para>
          <see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />, if <paramref name="typeName" /> has less than 128 characters.</para>
        <para>-or-</para>
        <para>
          <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:System.Type" /> with the specified name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> with the
   specified name, performing a case-sensitive search and specifying whether to throw
   an exception if an error occurs while loading the <see cref="T:System.Type" /> .</para>
      </summary>
      <param name="typeName">The name of the <see cref="T:System.Type" /> to get.</param>
      <param name="throwOnError">
        <para>
          <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if an error occurs while loading the <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>
          <see langword="false" /> to ignore errors while loading the <see cref="T:System.Type" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:System.Type" /> with the specified name, if found; otherwise, <see langword="null" /> .</para>
      </returns>
    </member>
    <member name="M:System.Type.GetType(System.String)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive
   search.</para>
      </summary>
      <param name="typeName">The name of the <see cref="T:System.Type" /> to get.</param>
      <returns>
        <para>The <see cref="T:System.Type" /> with the specified name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> associated with the specified program
   identifier (ProgID), returning null if an error is encountered while
   loading the <see cref="T:System.Type" />.</para>
      </summary>
      <param name="progID">The ProgID of the <see cref="T:System.Type" /> to get.</param>
      <returns>
        <para>The <see cref="T:System.Type" /> associated with the specified
   ProgID, if <paramref name="progID" /> is a valid entry in the registry and a type is
   associated with it; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String,System.Boolean)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> associated with the specified program
   identifier (ProgID), specifying whether to throw an exception if an error occurs
   while loading the <see cref="T:System.Type" />.</para>
      </summary>
      <param name="progID">The ProgID of the <see cref="T:System.Type" /> to get.</param>
      <param name="throwOnError">
        <para>
          <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if an error occurs while loading the <see cref="T:System.Type" /> .</para>
        <para>-or-</para>
        <para>
          <see langword="false" /> to ignore errors while loading the <see cref="T:System.Type" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:System.Type" /> associated with the specified program identifier (ProgID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String,System.String)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> associated with the specified program identifier (progID) from the
   specified server, returning null if an error is encountered while
   loading the <see cref="T:System.Type" />.</para>
      </summary>
      <param name="progID">The progID of the <see cref="T:System.Type" /> to get.</param>
      <param name="server">The server from which to load the type.</param>
      <returns>
        <para>The <see cref="T:System.Type" /> associated with the specified program identifier
   (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is
   associated with it; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> associated with the specified program
   identifier (progID) from the specified server, specifying whether to throw
   an exception if an error occurs while loading the <see cref="T:System.Type" />.</para>
      </summary>
      <param name="progID">The progID of the <see cref="T:System.Type" /> to get.</param>
      <param name="server">The server from which to load the type.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if an error occurs while loading the <see cref="T:System.Type" />. <para>-or-</para><para><see langword="false" /> to ignore errors while loading the <see cref="T:System.Type" />.</para></param>
      <returns>
        <para>The <see cref="T:System.Type" /> associated with the specified program identifier (progID), if <paramref name="progID" /> is
   a valid entry in the registry and a type is associated with it; otherwise,
<see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> associated with the specified class identifier
   (CLSID).</para>
      </summary>
      <param name="clsid">The CLSID of the <see cref="T:System.Type" /> to get.</param>
      <returns>
        <para>
          <see langword="System.__ComObject " />regardless of
   whether the CLSID is valid.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> associated with the specified class identifier
   (CLSID), specifying whether to throw an exception if an
   error occurs while loading the <see cref="T:System.Type" />.</para>
      </summary>
      <param name="clsid">The CLSID of the <see cref="T:System.Type" /> to get.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if an error occurs while loading the <see cref="T:System.Type" />. <para>-or-</para><para><see langword="false" /> to ignore errors while loading the <see cref="T:System.Type" />.</para></param>
      <returns>
        <para>
          <see langword="System.__ComObject " />regardless of whether the CLSID is valid.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.String)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> associated with the specified class identifier (CLSID) from the specified server.</para>
      </summary>
      <param name="clsid">The CLSID of the <see cref="T:System.Type" /> to get.</param>
      <param name=" server">The server from which to load the type.</param>
      <returns>
        <para>
          <see langword="System.__ComObject " />regardless of whether the CLSID is valid.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> associated with the specified class identifier
   (CLSID) from the specified server, specifying whether to throw an exception if an
   error occurs while loading the <see cref="T:System.Type" />.</para>
      </summary>
      <param name="clsid">The CLSID of the <see cref="T:System.Type" /> to get.</param>
      <param name="server">The server from which to load the type.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if an error occurs while loading the <see cref="T:System.Type" />. <para>-or-</para><para><see langword="false" /> to ignore errors while loading the <see cref="T:System.Type" />.</para></param>
      <returns>
        <para>
          <see langword="System.__ComObject " />regardless of whether the CLSID is valid.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeCode(System.Type)">
      <summary>
        <para> Gets the underlying type code of the specified <see cref="T:System.Type" />.
   </para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> whose underlying type code to get. </param>
      <returns>
        <para> The <see cref="T:System.TypeCode" /> value of the underlying type.
   </para>
      </returns>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>
        <para> When overridden in a derived class, invokes the specified member, using the specified binding constraints and
      matching the specified argument list, modifiers and culture.</para>
      </summary>
      <param name="name">
        <para>The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</para>
        <para>-or-</para>
        <para>An empty string ("") to invoke the default member.</para>
      </param>
      <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on. The type of lookup need not be specified. If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="target">The <see cref="T:System.Object" /> on which to invoke the specified member.</param>
      <param name="args">An array containing the arguments to pass to the member to invoke.</param>
      <param name="modifiers">
        <para>An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="args" /> array. A parameter's associated attributes are stored in the member's signature. The default binder does not process this parameter.</para>
      </param>
      <param name="culture">
        <para>The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</para>
      </param>
      <param name="namedParameters">An array containing the names of the parameters to which the values in the <paramref name="args" /> array are passed.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> representing the return value of the invoked
   member.</para>
      </returns>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)">
      <summary>
        <para>Invokes the specified member, using the specified binding constraints
      and matching the specified argument list and culture.</para>
      </summary>
      <param name="name">
        <para>The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</para>
        <para>-or-</para>
        <para>An empty string ("") to invoke the default member.</para>
      </param>
      <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on. The type of lookup need not be specified. If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="target">The <see cref="T:System.Object" /> on which to invoke the specified member.</param>
      <param name="args">An array containing the arguments to pass to the member to invoke.</param>
      <param name="culture">
        <para>The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</para>
      </param>
      <returns>
        <para>An <see cref="T:System.Object" /> representing the return value of the invoked member.</para>
      </returns>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])">
      <summary>
        <para>Invokes the specified member, using the specified
      binding constraints and matching the specified argument list.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke. <para>-or-</para><para>An empty string ("") to invoke the default member.</para></param>
      <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on. The type of lookup need not be specified. If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="target">The <see cref="T:System.Object" /> on which to invoke the specified member.</param>
      <param name="args">An array containing the arguments to pass to the member to invoke.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> representing the return value of the invoked member.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeHandle(System.Object)">
      <summary>
        <para>Gets the handle for the <see cref="T:System.Type" /> of a specified object.</para>
      </summary>
      <param name="o">The <see cref="T:System.Object" /> for which to get the Type handle.</param>
      <returns>
        <para>The handle for the <see cref="T:System.Type" /> of the specified <see cref="T:System.Object" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> referenced by the specified type handle.</para>
      </summary>
      <param name="handle">The <see cref="T:System.RuntimeTypeHandle" /> object that refers to the <see cref="T:System.Type" />.</param>
      <returns>
        <para>The <see cref="T:System.Type" /> referenced by the specified <see cref="T:System.RuntimeTypeHandle" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetArrayRank">
      <summary>
        <para> Gets the number of dimensions in an <see cref="T:System.Array" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Int32" /> containing the number of dimensions in the current
<see langword="Type" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Searches for a constructor whose parameters match the specified argument
      types and modifiers, using the specified binding constraints and the specified calling convention.</para>
      </summary>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that
   matches the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Searches for a constructor whose parameters match the specified argument types and modifiers,
      using the specified binding constraints.</para>
      </summary>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.Type.EmptyTypes" />.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that
   matches the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetConstructor(System.Type[])">
      <summary>
        <para>Searches for a public instance constructor whose parameters match the types in the specified array.</para>
      </summary>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> to get a constructor that takes no parameters.</para>
        <para>-or-</para>
        <para>
          <see cref="F:System.Type.EmptyTypes" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the public instance constructor whose
   parameters match the types in the parameter type array, if found; otherwise,
<see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>When overridden in a derived class, searches for a constructor whose parameters match the
      specified argument types and modifiers, using the specified binding constraints
      and the specified calling convention.</para>
      </summary>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that
   matches the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetConstructors">
      <summary>
        <para>Returns all the public constructors defined for the current <see cref="T:System.Type" />.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing
   all the public constructors defined for the current <see cref="T:System.Type" />,
   including the type initializer if it is defined.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.ConstructorInfo" />, if no public constructors are defined
for the current <see cref="T:System.Type" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetConstructors(System.Reflection.BindingFlags)">
      <summary>
        <para>When overridden in a derived class, searches for the constructors defined
      for the current <see cref="T:System.Type" />, using the specified <see langword="BindingFlags" /> .</para>
      </summary>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined
   for the current <see cref="T:System.Type" /> that match the specified binding constraints, including
   the type initializer if it is defined.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.ConstructorInfo" />, if no constructors are
defined for the current <see cref="T:System.Type" />, or if none of the defined constructors match the
binding constraints.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Searches for the specified method whose parameters match the specified
      argument types and modifiers, using the specified binding constraints and the
      specified calling convention.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get.</param>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> object
   representing the method that matches the specified requirements, if found;
   otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Searches for the specified method whose parameters match the specified argument types and modifiers, using the
      specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get.</param>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches
   the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Searches for the specified public method whose parameters match the specified argument
      types and modifiers.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public method to get.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> object
   representing the public method that matches
   the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[])">
      <summary>
        <para>Searches for the specified public method whose parameters match the specified argument types.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public method to get.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method whose
   parameters match the specified argument types, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Searches for the specified method, using the specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get.</param>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches
   the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String)">
      <summary>
        <para>Searches for the public method with the specified name.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public method to get.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> object
   representing the public method with the
   specified name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>When overridden in a derived class, searches for the specified method whose parameters match the specified
      argument types and modifiers, using the specified binding constraints and the
      specified calling convention.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get.</param>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />. If <paramref name="types" /> is <see langword="null" />, arguments are not matched.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches
   the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMethods">
      <summary>
        <para>Returns all the public methods of the current <see cref="T:System.Type" />.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public
   methods defined for the current <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods
are defined for the current <see cref="T:System.Type" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMethods(System.Reflection.BindingFlags)">
      <summary>
        <para>When overridden in a derived class,
      searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</para>
      </summary>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined
   for the current <see cref="T:System.Type" />
   that match the specified binding constraints.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are
defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the
binding constraints.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para> Searches for the specified field, using the specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the data field to get.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Reflection.FieldInfo" /> object representing the field that matches
   the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetField(System.String)">
      <summary>
        <para>Searches for the field with the specified name.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the data field to get.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.FieldInfo" /> object representing the field with the
   specified name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetFields">
      <summary>
        <para>Returns all the public fields of the current <see cref="T:System.Type" />.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields
   defined for the current <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the
current <see cref="T:System.Type" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetFields(System.Reflection.BindingFlags)">
      <summary>
        <para>When overridden in a derived class,
      searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</para>
      </summary>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for
   the current <see cref="T:System.Type" /> that match the specified binding constraints.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current
<see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetInterface(System.String)">
      <summary>
        <para> Searches for the interface with the specified name.
      </para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the interface to get. </param>
      <returns>
        <para> A <see cref="T:System.Type" /> object
   representing the interface with the specified name, implemented or inherited by
   the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Type.GetInterface(System.String,System.Boolean)">
      <summary>
        <para>When overridden in a derived class, searches for the specified interface,
      specifying whether to do a case-sensitive search.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the interface to get.</param>
      <param name="ignoreCase">
        <para>
          <see langword="true" /> to perform a case-insensitive search for <paramref name="name" />.</para>
        <para>-or-</para>
        <para>
          <see langword="false" /> to perform a case-sensitive search for <paramref name="name" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Type" /> object representing the interface with the specified name, implemented or inherited by
   the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetInterfaces">
      <summary>
        <para>When overridden in a derived class, gets all the
      interfaces implemented or inherited by the current <see cref="T:System.Type" />.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or
   inherited by the current <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the
current <see cref="T:System.Type" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)">
      <summary>
        <para>Returns an array of <see cref="T:System.Type" /> objects representing a filtered list of interfaces
   implemented or inherited by the current <see cref="T:System.Type" />.</para>
      </summary>
      <param name="filter">
        <para>The <see cref="T:System.Reflection.TypeFilter" /> delegate that compares the interfaces against <paramref name="filterCriteria" />.</para>
      </param>
      <param name="filterCriteria">The search criteria that determines whether an interface should be included in the returned array.</param>
      <returns>
        <para>An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces
   implemented or inherited by the current <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Type" />, if no interfaces matching the filter are implemented or inherited by the
current <see cref="T:System.Type" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetEvent(System.String)">
      <summary>
        <para>Returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified event.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />.</param>
      <returns>
        <para>The <see cref="T:System.Reflection.EventInfo" /> object
   representing the specified event which is declared or inherited by the current
<see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>When overridden in a derived class, returns the <see cref="T:System.Reflection.EventInfo" />
object representing the specified event, using the specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:System.Reflection.EventInfo" /> object
   representing the specified event which is declared or inherited by the current
<see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetEvents">
      <summary>
        <para>Returns all the public events that are declared or
      inherited by the current <see cref="T:System.Type" />.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public
   events which are declared or inherited by the current <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.EventInfo" />, if
the current <see cref="T:System.Type" /> does not have public events.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetEvents(System.Reflection.BindingFlags)">
      <summary>
        <para>When overridden in a derived class, searches for events
      that are declared or inherited by the current <see cref="T:System.Type" />, using the specified binding
      constraints.</para>
      </summary>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events
   which are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</para>
        <para>-or-</para>
An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current
<see cref="T:System.Type" /> does not have events, or
if none of the events match the binding constraints.
</returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Searches for the specified property whose parameters match the specified
      argument types and modifiers, using the specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the property to get.</param>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name=" returnType">The return type of the property.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches
   the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Searches for the specified public property whose parameters match the specified argument types and modifiers.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get.</param>
      <param name=" returnType">The return type of the property.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property that matches
   the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Searches for the specified property, using the specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the property to get.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches
   the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[])">
      <summary>
        <para>Searches for the specified public property whose parameters match the specified argument types.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get.</param>
      <param name=" returnType">The return type of the property.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public
   property whose parameters match the specified argument types, if found;
   otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type[])">
      <summary>
        <para>Searches for the specified public property whose parameters match the specified argument types.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public
   property whose parameters match the specified argument types, if found;
   otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type)">
      <summary>
        <para>Searches for the public property with the specified name and return type.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get.</param>
      <param name=" returnType">The return type of the property.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public
   property with the specified name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String)">
      <summary>
        <para> Searches for the public property with the specified name.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public
   property with the specified name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>When overridden in a derived class, searches for the specified property whose
      parameters match the specified argument types and modifiers, using the specified
      binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the property to get.</param>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <param name="binder">
        <para>A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</para>
      </param>
      <param name=" returnType">The return type of the property.</param>
      <param name="types">
        <para>An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</para>
        <para>-or-</para>
        <para>An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</para>
      </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches
   the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetProperties(System.Reflection.BindingFlags)">
      <summary>
        <para>When overridden in a derived class, searches for the properties of the current
      <see cref="T:System.Type" />, using the specified binding constraints.</para>
      </summary>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of
   the current <see cref="T:System.Type" /> that match the specified binding constraints.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current
<see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetProperties">
      <summary>
        <para>Returns all the public properties of the current <see cref="T:System.Type" />.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public
   properties of the current <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetNestedTypes">
      <summary>
        <para>Returns all the types nested within the current <see cref="T:System.Type" />.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Type" /> objects representing all the types nested within
   the current <see cref="T:System.Type" />.</para>
        <para>-or-</para>
An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />.
</returns>
    </member>
    <member name="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>
        <para>When overridden in a derived class, searches for the types nested within the current <see cref="T:System.Type" />,
   using the specified binding constraints.</para>
      </summary>
      <param name="bindingAttr">
        <para> A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>An array of <see cref="T:System.Type" /> objects representing all the types nested within
   the current <see cref="T:System.Type" /> that match the specified binding constraints.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of
the nested types match the binding constraints.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetNestedType(System.String)">
      <summary>
        <para>Searches for the nested type with the specified name.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the nested type to get.</param>
      <returns>
        <para>A <see cref="T:System.Type" /> object representing the nested type with the specified
   name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the nested type to get.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Type" /> object representing the nested type that
   matches the specified requirements, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMember(System.String)">
      <summary>
        <para>Searches for the members with the specified name.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public members to get.</param>
      <returns>
        <para>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with
   the specified name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Searches for the specified members, using the specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the members to get.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with
   the specified name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>
        <para> Searches for the specified members of the specified member type, using the
      specified binding constraints.</para>
      </summary>
      <param name="name">The <see cref="T:System.String" /> containing the name of the members to get.</param>
      <param name="type">The <see cref="P:System.Type.MemberType" /> to search for.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with
   the specified name, if found; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMembers">
      <summary>
        <para>Returns all the public members of the current <see cref="T:System.Type" />.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public
   members of the current <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetMembers(System.Reflection.BindingFlags)">
      <summary>
        <para>When overridden in a derived class, searches for the members defined for the current <see cref="T:System.Type" />,
   using the specified binding constraints.</para>
      </summary>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" />.</para>
      </param>
      <returns>
        <para>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for
   the current <see cref="T:System.Type" /> that match the specified binding constraints.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current
<see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetDefaultMembers">
      <summary>
        <para>Searches for the members defined for the current <see cref="T:System.Type" /> whose <see cref="T:System.Reflection.DefaultMemberAttribute" /> is set.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of
   the current <see cref="T:System.Type" />.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</para>
      </returns>
    </member>
    <member name="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)">
      <summary>
        <para>Returns a filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</para>
      </summary>
      <param name="memberType">A <see langword="MemberTypes" /> object indicating the type of member to search for.</param>
      <param name="bindingAttr">
        <para>A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. </para>
        <para>-or-</para>
        <para>Zero, to return <see langword="null" /> .</para>
      </param>
      <param name="filter">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <paramref name="filterCriteria" /> and <see langword="false" /> otherwise. You can use the <see langword="FilterAttribute" />, <see langword="FilterName" />, and <see langword="FilterNameIgnoreCase" /> delegates supplied by this class. The first uses the fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> as search criteria, and the other two delegates use <see langword="String" /> objects as the search criteria.</param>
      <param name="filterCriteria">
        <para>The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.</para>
        <para>The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class. </para>
      </param>
      <returns>
        <para>A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</para>
        <para>-or-</para>
        <para>An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type
<paramref name="memberType" /> that match the filter criteria. </para>
      </returns>
    </member>
    <member name="M:System.Type.IsValueTypeImpl">
      <summary>
        <para> Implements the <see cref="P:System.Type.IsValueType" /> property and determines whether the
<see cref="T:System.Type" /> is a value type; that is, not a class or an interface.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.GetAttributeFlagsImpl">
      <summary>
        <para>When overridden in a derived class, implements the <see cref="P:System.Type.Attributes" /> property and gets a bitmask indicating the attributes
   associated with the <see cref="T:System.Type" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Reflection.TypeAttributes" /> object
   representing the attribute set of the <see cref="T:System.Type" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.IsArrayImpl">
      <summary>
        <para>When overridden in a derived class, implements the <see cref="P:System.Type.IsArray" /> property and determines whether the <see cref="T:System.Type" /> is an array.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.IsByRefImpl">
      <summary>
        <para>When overridden in a derived class, implements the <see cref="P:System.Type.IsByRef" /> 
 property and determines whether the <see cref="T:System.Type" /> is passed by reference.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.IsPointerImpl">
      <summary>
        <para>When overridden in a derived class, implements the <see cref="P:System.Type.IsPointer" /> property and determines whether the
 <see cref="T:System.Type" /> is a pointer.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.IsPrimitiveImpl">
      <summary>
        <para>When overridden in a derived class, implements the <see cref="P:System.Type.IsPrimitive" /> property and determines whether the
<see cref="T:System.Type" /> is one of the primitive types.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.IsCOMObjectImpl">
      <summary>
        <para>When overridden in a derived class, implements the <see cref="P:System.Type.IsCOMObject" /> property and determines whether the
 <see cref="T:System.Type" /> is a COM object.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.IsContextfulImpl">
      <summary>
        <para> Implements the <see cref="P:System.Type.IsContextful" />
property and determines whether the <see cref="T:System.Type" /> can be hosted in a context.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Type.IsMarshalByRefImpl">
      <summary>
        <para> Implements the <see cref="P:System.Type.IsMarshalByRef" /> property and determines whether
   the <see cref="T:System.Type" /> is marshalled by reference.
   </para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is marshalled by reference; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Type.GetElementType">
      <summary>
        <para>When overridden in a derived class, returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current
   array, pointer or reference type.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a
pointer, or is not passed by reference.</para>
      </returns>
    </member>
    <member name="M:System.Type.HasElementTypeImpl">
      <summary>
        <para>When overridden in a derived class, implements the <see cref="P:System.Type.HasElementType" /> property and
   determines whether the current <see cref="T:System.Type" /> encompasses or
   refers to another type; that is,
   whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by
   reference.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.IsSubclassOf(System.Type)">
      <summary>
        <para>Determines whether the current <see cref="T:System.Type" /> derives from the
   specified <see langword="Type" /> .</para>
      </summary>
      <param name="c">The <see langword="Type" /> to compare with the current <see langword="Type" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see langword="Type" />
represented by the <paramref name="c" /> parameter and the current <see langword="Type" />
represent classes, and the class represented by the current
<see langword="Type" /> derives from the class represented by <paramref name="c" />; 
otherwise, <see langword="false" />. This method also returns
<see langword="false" /> if <paramref name="c" /> and the current <see langword="Type" /> 
represent the same class.</para>
      </returns>
    </member>
    <member name="M:System.Type.IsInstanceOfType(System.Object)">
      <summary>
        <para> Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.
   </para>
      </summary>
      <param name="o">The object to compare with the current <see langword="Type" />. </param>
      <returns>
        <para>
          <see langword="true" /> if the current
<see langword="Type" /> is in the inheritance hierarchy of the object represented 
   by the <paramref name="o" /> parameter, or if the current Type is an interface that
<paramref name="o" /> supports. <see langword="false" /> 
if neither of these conditions is the case, or if <paramref name="o" /> is
<see langword="null" /> .</para>
      </returns>
    </member>
    <member name="M:System.Type.IsAssignableFrom(System.Type)">
      <summary>
        <para> Determines whether an instance of the
      current <see cref="T:System.Type" /> can be assigned from an instance of the specified
   <see langword="Type" /> .
      </para>
      </summary>
      <param name="c">The <see langword="Type" /> to compare with the current <see langword="Type" /> . </param>
      <returns>
        <para>
          <see langword="true" /> if the <paramref name="c" /> parameter and
   the current <see langword="Type" /> represent the same type, or if the current
<see langword="Type" /> is in the inheritance hierarchy of <paramref name="c" />, or if the 
   current <see langword="Type" /> is an interface that <paramref name="c" /> supports.
<see langword="false" /> if none of these conditions are the case, or if 
<paramref name="c" /> is <see langword="null" />. </para>
      </returns>
    </member>
    <member name="M:System.Type.ToString">
      <summary>
        <para> Returns a <see langword="String" /> representing the name
   of the current <see langword="Type" />.
   </para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetTypeArray(System.Object[])">
      <summary>
        <para> Gets the types of the objects in the specified array.
      </para>
      </summary>
      <param name="args">An array of objects whose types to determine. </param>
      <returns>
        <para> An array of <see cref="T:System.Type" /> objects representing the types of the corresponding
   elements in <paramref name="args" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Type.Equals(System.Object)">
      <summary>
        <para>Determines if the underlying system type of the
      current <see cref="T:System.Type" /> is the same as the underlying system type of the
      specified <see cref="T:System.Object" />.</para>
      </summary>
      <param name="o">The <see cref="T:System.Object" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />. 
   This method also returns <see langword="false" /> if the object specified by the
<paramref name="o" /> parameter is not a <see langword="Type" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.Equals(System.Type)">
      <summary>
        <para>Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the
    underlying system type of the specified <see cref="T:System.Type" />.</para>
      </summary>
      <param name="o">The <see cref="T:System.Type" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same 
    as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Int32" /> containing the hash code for this instance.</para>
      </returns>
    </member>
    <member name="M:System.Type.GetInterfaceMap(System.Type)">
      <summary>
        <para> Returns an interface mapping for the
      specified interface type.</para>
      </summary>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface of which to retrieve a mapping.</param>
      <returns>
        <para>An <see cref="T:System.Reflection.InterfaceMapping" /> object representing the
   interface mapping for <paramref name="interfaceType" />.</para>
      </returns>
    </member>
    <member name="P:System.Type.MemberType">
      <summary>
        <para>Gets a bitmask indicating the member type.</para>
      </summary>
    </member>
    <member name="P:System.Type.DeclaringType">
      <summary>
        <para>Gets the class that declares this member.</para>
      </summary>
    </member>
    <member name="P:System.Type.ReflectedType">
      <summary>
        <para>Gets the class object that was used to obtain this
       member.</para>
      </summary>
    </member>
    <member name="P:System.Type.GUID">
      <summary>
        <para> Gets the GUID associated with the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.DefaultBinder">
      <summary>
        <para>Gets the default binder used by the system.</para>
      </summary>
    </member>
    <member name="P:System.Type.Module">
      <summary>
        <para>Gets the module (the DLL) in which the current <see cref="T:System.Type" /> is defined.</para>
      </summary>
    </member>
    <member name="P:System.Type.Assembly">
      <summary>
        <para>Gets the <see cref="T:System.Reflection.Assembly" /> that the type is declared in. </para>
      </summary>
    </member>
    <member name="P:System.Type.TypeHandle">
      <summary>
        <para>Gets the handle for the current <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.FullName">
      <summary>
        <para>Gets the fully qualified name of the <see cref="T:System.Type" />, including the namespace of the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.Namespace">
      <summary>
        <para>Gets the namespace of the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.AssemblyQualifiedName">
      <summary>
        <para>Gets the fully qualified name of the <see cref="T:System.Type" />,
   including the name of the assembly from which the <see cref="T:System.Type" /> was loaded.</para>
      </summary>
    </member>
    <member name="P:System.Type.BaseType">
      <summary>
        <para>Gets the type from which the current <see cref="T:System.Type" /> directly inherits.</para>
      </summary>
    </member>
    <member name="P:System.Type.TypeInitializer">
      <summary>
        <para> Gets the initializer for the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.Attributes">
      <summary>
        <para> Gets the attributes associated with the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsNotPublic">
      <summary>
        <para> Gets a value indicating whether the top-level <see cref="T:System.Type" /> is not declared public.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsPublic">
      <summary>
        <para> Gets a value indicating whether the top-level <see cref="T:System.Type" /> is declared public.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsNestedPublic">
      <summary>
        <para> Gets a value indicating whether a class is nested and declared public.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsNestedPrivate">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> is nested and declared private.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsNestedFamily">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its
   own family.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsNestedAssembly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own assembly.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsNestedFamANDAssem">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and
   its own assembly.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsNestedFamORAssem">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to either its
   own family or to its own assembly.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsAutoLayout">
      <summary>
        <para> Gets a value indicating whether the class layout
      attribute <see langword="AutoLayout" /> is selected for the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsLayoutSequential">
      <summary>
        <para> Gets a value indicating whether the class layout
      attribute <see langword="SequentialLayout" /> is selected for the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsExplicitLayout">
      <summary>
        <para> Gets a value indicating whether the class layout
      attribute <see langword="ExplicitLayout" /> is selected for the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsClass">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> is a class; that is, not a value type or interface.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsInterface">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is an interface; that is, not a class or a value type.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsValueType">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is a value type.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsAbstract">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> is abstract and must be overridden.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsSealed">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> is declared sealed.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsEnum">
      <summary>
        <para> Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsSpecialName">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> has a name that requires special handling.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsImport">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> was imported from another class.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsSerializable">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Type" /> is serializable.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsAnsiClass">
      <summary>
        <para> Gets a value indicating whether the string format
      attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsUnicodeClass">
      <summary>
        <para> Gets a value indicating whether the string format
      attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsAutoClass">
      <summary>
        <para> Gets a value indicating whether the string format
      attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsArray">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is an array.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsByRef">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is
   passed by reference.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsPointer">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsPrimitive">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsCOMObject">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</para>
      </summary>
    </member>
    <member name="P:System.Type.HasElementType">
      <summary>
        <para>Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers
   to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsContextful">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> can be hosted in a context.</para>
      </summary>
    </member>
    <member name="P:System.Type.IsMarshalByRef">
      <summary>
        <para>Gets a value indicating whether the Type is marshaled by reference.</para>
      </summary>
    </member>
    <member name="P:System.Type.UnderlyingSystemType">
      <summary>
        <para>Indicates the type provided by the common language 
      runtime that represents this type.</para>
      </summary>
    </member>
    <member name="T:System.RuntimeTypeHandle">
      <summary>
        <para>Represents a type using an internal metadata token.</para>
      </summary>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para> Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" />
with the data necessary to deserialize the field represented by
this instance.</para>
      </summary>
      <param name="info">The object to be populated with serialization information. </param>
      <param name=" context">(Reserved) The location where serialized data will be stored and retrieved. </param>
    </member>
    <member name="P:System.RuntimeTypeHandle.Value">
      <summary>
        <para> Gets the value of this instance.
      </para>
      </summary>
    </member>
    <member name="T:System.SByte">
      <summary>
        <para>Represents an 8-bit signed integer.</para>
      </summary>
    </member>
    <member name="F:System.SByte.MaxValue">
      <summary>
        <para>Represents the largest possible value of <see cref="T:System.SByte" />. This field is 
 constant.</para>
      </summary>
    </member>
    <member name="F:System.SByte.MinValue">
      <summary>
        <para>Represents the smallest possible value of <see cref="T:System.SByte" />. This field is 
 constant.</para>
      </summary>
    </member>
    <member name="M:System.SByte.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
 their relative values.</para>
      </summary>
      <param name=" obj">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
 <paramref name="obj" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
 <paramref name="obj" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
 <paramref name="obj" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
 <paramref name="obj" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="obj" /> is
 <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.SByte.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
 object.</para>
      </summary>
      <param name=" obj">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.SByte" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.SByte.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.SByte.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation. </para>
      </summary>
      <returns>
        <para>The string representation of the value of this instance,
 consisting of a negative sign if the value is negative, and a sequence of digits
 ranging from 0 to 9 with no leading zeroes.</para>
      </returns>
    </member>
    <member name="M:System.SByte.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation, using the specified format. </para>
      </summary>
      <param name=" format">A format string.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.SByte.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified format and culture-specific format information. </para>
      </summary>
      <param name="format">A format specification.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.SByte.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to its 8-bit
 signed integer equivalent.</para>
      </summary>
      <param name=" s">A string representing a number to convert.</param>
      <returns>
        <para>An 8-bit signed integer equivalent to the number contained in the <paramref name="s" /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a
 specified style to its 8-bit signed integer equivalent.</para>
      </summary>
      <param name=" s">A string containing a number to convert. </param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />. </param>
      <returns>
        <para>An 8-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
 specified culture-specific format to its 8-bit signed integer equivalent.</para>
      </summary>
      <param name="s">A string representing a number to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>An 8-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a specified style and culture-specific format to its 8-bit signed integer equivalent.</para>
      </summary>
      <param name=" s">A string representing a number to convert.</param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>An 8-bit signed integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.SByte.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified culture-specific format information. </para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string 
 representation of the value of this instance as specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.SByte.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.SByte" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.SByte" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.SerializableAttribute">
      <summary>
        <para>Indicates that a class can be serialized. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.SerializableAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.SerializableAttribute" />
class.</para>
      </summary>
    </member>
    <member name="T:System.Single">
      <summary>
        <para> Represents a single-precision floating point number.</para>
      </summary>
    </member>
    <member name="F:System.Single.MinValue">
      <summary>
        <para>Represents the smallest possible value of <see cref="T:System.Single" />. This field is 
 constant.</para>
      </summary>
    </member>
    <member name="F:System.Single.Epsilon">
      <summary>
        <para> Represents the smallest positive <see cref="T:System.Single" /> greater than
 zero. This
 field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Single.MaxValue">
      <summary>
        <para> Represents the largest possible value of <see cref="T:System.Single" />. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Single.PositiveInfinity">
      <summary>
        <para> Represents positive infinity. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Single.NegativeInfinity">
      <summary>
        <para> Represents negative infinity. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Single.NaN">
      <summary>
        <para> Represents not a number
 (<see langword="NaN" />). This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Single.IsInfinity(System.Single)">
      <summary>
        <para> Returns a value indicating whether the specified
 number evaluates to negative or positive infinity.</para>
      </summary>
      <param name="f">A single-precision floating point number.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="f " />evaluates to <see cref="F:System.Single.PositiveInfinity" /> 
or <see cref="F:System.Single.NegativeInfinity" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.IsPositiveInfinity(System.Single)">
      <summary>
        <para> Returns a value indicating whether
 the specified number evaluates to positive infinity.</para>
      </summary>
      <param name="f">A single-precision floating point number.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="f " />evaluates to <see cref="F:System.Single.PositiveInfinity" />
; otherwise, <see langword="false" />
.</para>
      </returns>
    </member>
    <member name="M:System.Single.IsNegativeInfinity(System.Single)">
      <summary>
        <para> Returns a value indicating whether
 the specified number evaluates to negative infinity.</para>
      </summary>
      <param name="f">A single-precision floating point number.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="f " />evaluates to <see cref="F:System.Single.NegativeInfinity" />
; otherwise, <see langword="false" />
.</para>
      </returns>
    </member>
    <member name="M:System.Single.IsNaN(System.Single)">
      <summary>
        <para>Returns a value indicating whether the specified number evaluates to
 not a number (<see cref="F:System.Single.NaN" />).</para>
      </summary>
      <param name="f">A single-precision floating point number.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="f " />evaluates to not a number (<see cref="F:System.Single.NaN" />); otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of their relative values.</para>
      </summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less
 than
 zero</term>
            <description>
              <para>This instance is less than <paramref name="value" />.</para>
              <para>-or-</para>
              <para>This instance is not a number (<see cref="F:System.Single.NaN" /> ) and <paramref name="value" /> is a
 number.</para>
            </description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <para>This instance is equal to <paramref name="value" />.</para>
              <para>-or-</para>
              <para>This instance and value are both not a number (<see cref="F:System.Single.NaN" />),
<see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" /> 
.</para>
            </description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than <paramref name="value" />.</para>
              <para>-or-</para>
              <para>This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />).</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is
<see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Single.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified object.</para>
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Single" /> and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Single.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation. </para>
      </summary>
      <returns>
        <para>The string 
 representation of the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.Single.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation, using the specified format. </para>
      </summary>
      <param name="format">A format string.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified format and culture-specific format information. </para>
      </summary>
      <param name="format">A format specification.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value
 of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to its single-precision floating point number equivalent.</para>
      </summary>
      <param name="s">A string representing a number to convert.</param>
      <returns>
        <para>A single-precision floating point number equivalent to the
 numeric value or symbol specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a specified style to its single-precision floating point number equivalent.</para>
      </summary>
      <param name="s">A string representing a number to convert. </param>
      <param name="style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />. </param>
      <returns>
        <para>A single-precision floating point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a specified culture-specific format to its single-precision floating point number equivalent.</para>
      </summary>
      <param name="s">A string representing a number to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A single-precision floating point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating point number equivalent.</para>
      </summary>
      <param name="s">A string representing a number to convert.</param>
      <param name="style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <returns>
        <para>A single-precision floating point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its 
 equivalent string representation using the specified culture-specific
 format information. </para>
      </summary>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as
 specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.Single.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Single" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.Single" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.TimeSpan">
      <summary>
        <para> Represents a time interval.</para>
      </summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMillisecond">
      <summary>
        <para> Represents the number of ticks in 1 millisecond. This field is
 constant.</para>
      </summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerSecond">
      <summary>
        <para> Represents the number of ticks in 1 second.</para>
      </summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMinute">
      <summary>
        <para> Represents the number of ticks in 1 minute. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerHour">
      <summary>
        <para>Represents the number of ticks in 1 hour. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerDay">
      <summary>
        <para>Represents the number of ticks in 1 day. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.TimeSpan.Zero">
      <summary>
        <para> Represents the zero <see cref="T:System.TimeSpan" /> value. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.TimeSpan.MaxValue">
      <summary>
        <para>Represents the maximum <see cref="T:System.TimeSpan" /> value. This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.TimeSpan.MinValue">
      <summary>
        <para>Represents the minimum <see cref="T:System.TimeSpan" /> value. This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int64)">
      <summary>
        <para> Initializes a new <see cref="T:System.TimeSpan" /> to the
 specified number of ticks.</para>
      </summary>
      <param name="ticks">A time period expressed in 100-nanosecond units.</param>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para> Initializes a new <see cref="T:System.TimeSpan" /> to a
 specified number of hours, minutes, and seconds.</para>
      </summary>
      <param name="hours">Number of hours.</param>
      <param name="minutes">Number of minutes.</param>
      <param name="seconds">Number of seconds.</param>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para> Initializes a new <see cref="T:System.TimeSpan" /> to a
 specified number of days, hours, minutes, and seconds.</para>
      </summary>
      <param name="days">Number of days.</param>
      <param name="hours">Number of hours.</param>
      <param name="minutes">Number of minutes.</param>
      <param name="seconds">Number of seconds.</param>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para> Initializes a new <see cref="T:System.TimeSpan" /> to a
 specified number of days, hours, minutes, seconds, and milliseconds.</para>
      </summary>
      <param name="days">Number of days.</param>
      <param name="hours">Number of hours.</param>
      <param name="minutes">Number of minutes.</param>
      <param name="seconds">Number of seconds.</param>
      <param name="milliseconds">Number of milliseconds.</param>
    </member>
    <member name="M:System.TimeSpan.Add(System.TimeSpan)">
      <summary>
        <para>Adds the specified <see cref="T:System.TimeSpan" /> to this instance.</para>
      </summary>
      <param name="ts">A <see cref="T:System.TimeSpan" />.</param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> that represents the value of this instance plus
 the value of <paramref name="ts" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Compares two <see cref="T:System.TimeSpan" /> values and returns an integer that
 indicates their relationship.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" /> .</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>
              <paramref name="t1" /> is less than
 <paramref name="t2" /></description>
          </item>
          <item>
            <term> 0</term>
            <description>
              <paramref name="t1" /> is equal to <paramref name="t2" /></description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <paramref name="t1" /> is greater than
<paramref name="t2" /></description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
 their relative values.</para>
      </summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> -1</term>
            <description>The value of this instance is less than the
 value of <paramref name="value" />.</description>
          </item>
          <item>
            <term> 0</term>
            <description>The value of this instance is equal to the
 value of <paramref name="value" />.</description>
          </item>
          <item>
            <term> 1</term>
            <description>
              <para>The value of this instance is greater than the value of
 <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is
 <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.TimeSpan.FromDays(System.Double)">
      <summary>
        <para>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of
 days, where the specification is accurate to the nearest millisecond.</para>
      </summary>
      <param name="value">A number of days, accurate to the nearest millisecond.</param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.Duration">
      <summary>
        <para>Returns a <see cref="T:System.TimeSpan" /> whose value is the absolute value of this
 instance.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> whose
 value is the value of this instance and
 converted if necessary to a positive number.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
 object.</para>
      </summary>
      <param name="value">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value " />is a <see cref="T:System.TimeSpan" /> that
 represents the same time as this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Returns a value indicating whether two specified instances
 of <see cref="T:System.TimeSpan" /> are equal.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the values of <paramref name="t1 " />and <paramref name="t2 " />are equal;
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.GetHashCode">
      <summary>
        <para>Returns a hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.FromHours(System.Double)">
      <summary>
        <para>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of
 hours, where the specification is accurate to the nearest millisecond.</para>
      </summary>
      <param name="value">
        <para>A number of hours accurate to the nearest millisecond.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.FromMilliseconds(System.Double)">
      <summary>
        <para>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of
 milliseconds.</para>
      </summary>
      <param name="value">
        <para>A number of milliseconds.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.FromMinutes(System.Double)">
      <summary>
        <para>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of
 minutes, where the specification is accurate to the nearest millisecond.</para>
      </summary>
      <param name="value">
        <para>A number of minutes, accurate to the nearest millisecond.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.Negate">
      <summary>
        <para>Returns a <see cref="T:System.TimeSpan" /> whose value is the negated value of this
 instance.</para>
      </summary>
      <returns>
        <para>The same numeric value as this instance, but with the opposite sign.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String)">
      <summary>
        <para>Constructs a <see cref="T:System.TimeSpan" />from a time indicated by a specified string.</para>
      </summary>
      <param name="s">A string.</param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> that corresponds to <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.FromSeconds(System.Double)">
      <summary>
        <para>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of
 seconds, where the specification is accurate to the nearest millisecond.</para>
      </summary>
      <param name="value">
        <para>A number of seconds, accurate to the nearest millisecond.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.Subtract(System.TimeSpan)">
      <summary>
        <para>Subtracts the specified <see cref="T:System.TimeSpan" /> from this
 instance.</para>
      </summary>
      <param name="ts">A <see cref="T:System.TimeSpan" />.</param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> whose value is the result of the value of this
 instance minus the value of <paramref name="ts" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.FromTicks(System.Int64)">
      <summary>
        <para>Returns a <see cref="T:System.TimeSpan" /> that represents a specified time, where
 the specification is in units of ticks.</para>
      </summary>
      <param name="value">A number of ticks that represent a time.</param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> with a value of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.ToString">
      <summary>
        <para>Returns the string representation of the value of this
 instance.</para>
      </summary>
      <returns>
        <para>A string 
 that
 represents the value of this instance. The format of the return value is of the
 form:</para>
        <para>[-][d.]hh:mm:ss[.ff]</para>
        <para>Items in square brackets ([ and ]) are optional, colons and periods (: and .)
 are literal characters; and the other items are as follows.</para>
        <list type="table">
          <listheader>
            <term>Item</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> "-" </term>
            <description>optional minus sign indicating a negative
 time</description>
          </item>
          <item>
            <term> "d" </term>
            <description>optional days</description>
          </item>
          <item>
            <term> "hh" </term>
            <description>hours, ranging from 0 to 23</description>
          </item>
          <item>
            <term> "mm" </term>
            <description>minutes, ranging from 0 to 59</description>
          </item>
          <item>
            <term> "ss"</term>
            <description>seconds, ranging from 0 to 59</description>
          </item>
          <item>
            <term> "ff"</term>
            <description>optional fractional seconds, from 1 to 7
 decimal digits </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)">
      <summary>
        <para>Returns a <see cref="T:System.TimeSpan" /> whose value is the negated value of the
 specified instance.</para>
      </summary>
      <param name="t">A <see cref="T:System.TimeSpan" />.</param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" />with the same numeric value as this instance, but the opposite sign.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Subtracts a specified <see cref="T:System.TimeSpan" /> from another specified
<see cref="T:System.TimeSpan" />.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" />.</param>
      <returns>
        <para>A <see langword="TimeSpan" /> whose value is the result of the value of <paramref name="t1&#xD;&#xA; " />minus the value of <paramref name="t2" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)">
      <summary>
        <para>Returns the specified instance of <see cref="T:System.TimeSpan" />.</para>
      </summary>
      <param name="t">A <see cref="T:System.TimeSpan" />.</param>
      <returns>
        <para>Returns <paramref name="t" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Adds two specified <see cref="T:System.TimeSpan" /> instances.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" />.</param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> whose value is the sum of the values of <paramref name="t1" />
and <paramref name="t2" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Indicates whether two <see cref="T:System.TimeSpan" /> instances are equal.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the values of <paramref name="t1 " />and <paramref name="t2" /> are equal;
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Indicates whether two <see cref="T:System.TimeSpan" /> instances are not equal.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the values of <paramref name="t1 " />and <paramref name="t2 " />are not equal;
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Indicates whether a specified <see cref="T:System.TimeSpan" /> is less than another specified
<see cref="T:System.TimeSpan" />.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the value of <paramref name="t1 " />is less than the value of
<paramref name="t2" /> ; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Indicates whether a specified <see cref="T:System.TimeSpan" /> is less than or equal to another
 specified <see cref="T:System.TimeSpan" />.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the value of <paramref name="t1 " />is less than or equal to the
 value of <paramref name="t2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Indicates whether a specified <see cref="T:System.TimeSpan" /> is greater than another specified
<see cref="T:System.TimeSpan" />.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the value of <paramref name="t1 " />is greater than the value of
<paramref name="t2" /> ; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Indicates whether a specified <see cref="T:System.TimeSpan" /> is greater than
 or equal to another specified <see cref="T:System.TimeSpan" />.</para>
      </summary>
      <param name="t1">A <see cref="T:System.TimeSpan" />.</param>
      <param name="t2">A <see langword="TimeSpan" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the value of <paramref name="t1 " />is greater than or equal to
 the value of <paramref name="t2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.TimeSpan.Ticks">
      <summary>
        <para>Gets the value of this instance in ticks.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.Days">
      <summary>
        <para>Gets the number of whole days represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.Hours">
      <summary>
        <para>Gets the number of whole hours represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.Milliseconds">
      <summary>
        <para>Gets the number of whole milliseconds represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.Minutes">
      <summary>
        <para>Gets the number of whole minutes represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.Seconds">
      <summary>
        <para>Gets the number of whole seconds represented by this instance.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.TotalDays">
      <summary>
        <para>Gets the value of this instance expressed in whole and fractional days.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.TotalHours">
      <summary>
        <para>Gets the value of this instance expressed in whole and fractional hours.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.TotalMilliseconds">
      <summary>
        <para>Gets the value of this instance expressed in whole and fractional milliseconds.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.TotalMinutes">
      <summary>
        <para>Gets the value of this instance expressed in whole and fractional minutes.</para>
      </summary>
    </member>
    <member name="P:System.TimeSpan.TotalSeconds">
      <summary>
        <para>Gets the value of this instance expressed in whole and fractional seconds.</para>
      </summary>
    </member>
    <member name="T:System.TypeCode">
      <summary>
        <para>Specifies the type of an object.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.Empty">
      <summary>
        <para> A null reference.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.Object">
      <summary>
        <para> A general type representing any reference or value 
      type not explicitly represented by another <see langword="TypeCode" />.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.DBNull">
      <summary>
        <para> A database null (column) value.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.Boolean">
      <summary>
        <para>A simple type representing Boolean values of
      <see langword="true" /> or <see langword="false" />.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.Char">
      <summary>
        <para>An integral type representing unsigned 16-bit integers 
       with values between 0 and 65535. The set of possible values for the <see cref="F:System.TypeCode.Char" />
       type corresponds to the Unicode character set.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.SByte">
      <summary>
    An integral type representing signed 8-bit
    integers with values between -128 and 127.
 </summary>
    </member>
    <member name="F:System.TypeCode.Byte">
      <summary>
    An integral type representing unsigned
    8-bit integers with values between 0 and 255.
 </summary>
    </member>
    <member name="F:System.TypeCode.Int16">
      <summary>
    An integral type representing signed 16-bit
    integers with values between -32768 and 32767.
 </summary>
    </member>
    <member name="F:System.TypeCode.UInt16">
      <summary>
    An integral type representing unsigned
    16-bit integers with values between 0 and 65535.
 </summary>
    </member>
    <member name="F:System.TypeCode.Int32">
      <summary>
    An integral type representing signed 32-bit
    integers with values between -2147483648 and 2147483647.
 </summary>
    </member>
    <member name="F:System.TypeCode.UInt32">
      <summary>
    An integral type representing unsigned
    32-bit integers with values between 0 and 4294967295.
 </summary>
    </member>
    <member name="F:System.TypeCode.Int64">
      <summary>
        <para>An integral type representing signed 64-bit integers 
       with values
       between -9223372036854775808 and 9223372036854775807.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.UInt64">
      <summary>
    An integral type representing unsigned
    64-bit integers with values between 0 and 18446744073709551615.
 </summary>
    </member>
    <member name="F:System.TypeCode.Single">
      <summary>
        <para>A floating point type representing values ranging from 
       approximately 1.5 x 10<superscript term="-45" /> to 3.4 x 10<superscript term="38" />
       with a precision of 7
       digits.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.Double">
      <summary>
        <para>A floating point type representing values ranging from 
       approximately 5.0 x 10<superscript term="-324" /> to 1.7 x 10<superscript term="308" />
       with a precision of
       15-16 digits.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.Decimal">
      <summary>
        <para>A simple type representing values ranging from 1.0 x 
       10<superscript term="-28" /> to approximately 7.9 x 10<superscript term="28" />
       with 28-29 significant digits.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.DateTime">
      <summary>
        <para>A type representing a date and time value.</para>
      </summary>
    </member>
    <member name="F:System.TypeCode.String">
      <summary>
    A sealed class type representing Unicode
    character strings.
 </summary>
    </member>
    <member name="T:System.TypedReference">
      <summary>
        <para>Describes objects that contain both a managed pointer to
      a location and a runtime representation of the type that may be stored at that
      location.</para>
      </summary>
    </member>
    <member name="M:System.TypedReference.MakeTypedReference(System.Object,System.Reflection.FieldInfo[])">
      <summary>
        <para> Makes a <see langword="TypedReference" /> for the specified target object using the specifying
   fields.
   </para>
      </summary>
      <param name="target">The target object that defines the type of the <see langword="TypedReference" /> . </param>
      <param name=" flds">The fields to be encapsulated. </param>
      <returns>
        <para>A <see langword="TypedReference" /> for the specified target. </para>
      </returns>
    </member>
    <member name="M:System.TypedReference.GetHashCode">
      <summary>
        <para>
       Returns the hash code of this object.
    </para>
      </summary>
      <returns>
    The hash code of this object.
 </returns>
    </member>
    <member name="M:System.TypedReference.Equals(System.Object)">
      <summary>
        <para> Checks if this object is equal to the
      specified object.
      </para>
      </summary>
      <param name="o">The object with which to compare the current object.</param>
      <returns>
        <para>
          <see langword="true " />if this object is equal to the
   specified object; otherwise, <see langword="false" />
   .</para>
      </returns>
    </member>
    <member name="M:System.TypedReference.ToObject(System.TypedReference)">
      <summary>
        <para>Converts the specified <see langword="TypedReference" /> to
   an <see langword="Object" />
   .</para>
      </summary>
      <param name="value">The <see langword="TypedReference" /> to be converted. </param>
      <returns>
        <para>An Object converted from a TypedReference.</para>
      </returns>
    </member>
    <member name="M:System.TypedReference.GetTargetType(System.TypedReference)">
      <summary>
        <para>Returns the type of the target of the specified 
   <see langword="TypedReference" /> 
   .</para>
      </summary>
      <param name="value">The value whose target's type is to be returned. </param>
      <returns>
        <para>The type of the target of the specified 
   <see langword="TypedReference" /> 
   .</para>
      </returns>
    </member>
    <member name="M:System.TypedReference.TargetTypeToken(System.TypedReference)">
      <summary>
        <para>Returns the internal metadata type handle for the 
      specified <see langword="TypedReference" />
      .</para>
      </summary>
      <param name="value">The <see langword="TypedReference" /> for which the type handle is requested. </param>
      <returns>
        <para>The internal metadata type handle for the specified 
   <see langword="TypedReference" /> 
   .</para>
      </returns>
    </member>
    <member name="M:System.TypedReference.SetTypedReference(System.TypedReference,System.Object)">
      <summary>
        <para> Converts the specified value to a 
   <see langword="TypedReference" /> 
   .
   </para>
      </summary>
      <param name="target">The target of the conversion. </param>
      <param name=" value">The value to be converted. </param>
      <returns>
   This method assigns <paramref name="value " />to <paramref name="target" />. A change type of
<paramref name="value" /> converts it to the type of the <see langword="TypedReference" />. 
   The <see cref="M:System.Convert.ChangeType(System.Object,System.TypeCode)" qualify="true" /> method does the conversion.
</returns>
    </member>
    <member name="T:System.TypeInitializationException">
      <summary>
        <para>The exception that is thrown as a wrapper around the exception thrown by the class initializer.
      This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.TypeInitializationException" /> class with the default error message, the specified type name, and a reference to the
   inner exception that is the root cause of this exception.</para>
      </summary>
      <param name="fullTypeName">The fully qualified name of the type that fails to initialize.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the type name and 
 additional exception information.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name=" context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.TypeInitializationException.TypeName">
      <summary>
        <para> Gets the fully qualified name of the type that fails to
      initialize.</para>
      </summary>
    </member>
    <member name="T:System.UInt16">
      <summary>
        <para>Represents a 16-bit unsigned integer.</para>
      </summary>
    </member>
    <member name="F:System.UInt16.MaxValue">
      <summary>
        <para> Represents the largest possible value of
   <see langword="UInt16" />. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.UInt16.MinValue">
      <summary>
        <para> Represents the smallest possible value of
   <see langword="UInt16" />. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.UInt16.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of their relative values.</para>
      </summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
 <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
 <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.UInt16.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified object.</para>
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.UInt16" /> and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation. </para>
      </summary>
      <returns>
        <para>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation using the specified format. </para>
      </summary>
      <param name="format">A format specification.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation using the specified format and
      culture-specific format information. </para>
      </summary>
      <param name=" format">A format specification.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance.</param>
      <returns>
        <para>The string representation of the value of this instance as
      specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to its 16-bit
      unsigned integer equivalent.</para>
      </summary>
      <param name="s">A string representing the number to convert.</param>
      <returns>
        <para>A 16-bit unsigned integer equivalent to the number contained in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a
      specified style to its 16-bit unsigned integer equivalent.</para>
      </summary>
      <param name=" s">A string representing the number to convert. </param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" /> constants that indicate the permitted format of <paramref name="s" />. </param>
      <returns>
        <para>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />
.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
      specified culture-specific format to its 16-bit unsigned integer equivalent.</para>
      </summary>
      <param name=" s">A string representing the number to convert.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />
.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
      specified style and culture-specific format to its 16-bit unsigned integer
      equivalent.</para>
      </summary>
      <param name=" s">A string representing the number to convert.</param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />
.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation using the specified culture-specific
      format information. </para>
      </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as
      specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt16.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" />for value type <see cref="T:System.UInt16" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.UInt16" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.UInt32">
      <summary>
        <para>Represents a 32-bit unsigned integer.</para>
      </summary>
    </member>
    <member name="F:System.UInt32.MaxValue">
      <summary>
        <para> Represents the largest possible value of
   <see langword="UInt32" />. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.UInt32.MinValue">
      <summary>
        <para> Represents the smallest possible value of
 <see langword="UInt32" />. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.UInt32.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of their relative values.</para>
      </summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
   <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
      <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
      <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
      <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.UInt32.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified object.</para>
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.UInt32" /> and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation. </para>
      </summary>
      <returns>
        <para>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation using the specified format. </para>
      </summary>
      <param name="format">A format string.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation using the specified format and
      culture-specific format information. </para>
      </summary>
      <param name=" format">A format specification.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance.</param>
      <returns>
        <para>The string representation of the value of this instance as
      specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to its 32-bit
      unsigned integer equivalent.</para>
      </summary>
      <param name="s">A string representing the number to convert.</param>
      <returns>
        <para>A 32-bit unsigned integer equivalent to the number contained in <paramref name="s" />
.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a
      specified style to its 32-bit unsigned integer equivalent.</para>
      </summary>
      <param name=" s">A string representing the number to convert. </param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" /> constants that indicate the permitted format of <paramref name="s" />. </param>
      <returns>
        <para>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />
.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
      specified culture-specific format to its 32-bit unsigned integer equivalent.</para>
      </summary>
      <param name=" s">A string representing the number to convert.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
      specified style and culture-specific format to its 32-bit unsigned integer
      equivalent.</para>
      </summary>
      <param name=" s">A string representing the number to convert.</param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />
.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation using the specified culture-specific
      format information. </para>
      </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as
      specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt32.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt32" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.UInt32" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.UInt64">
      <summary>
        <para>Represents a 64-bit unsigned integer.</para>
      </summary>
    </member>
    <member name="F:System.UInt64.MaxValue">
      <summary>
        <para> Represents the largest possible value of <see cref="T:System.UInt64" />. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.UInt64.MinValue">
      <summary>
        <para> Represents the smallest possible value of <see cref="T:System.UInt64" />. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.UInt64.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of their relative values.</para>
      </summary>
      <param name="value">An object to compare, or <see langword="null" />.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and
 <paramref name="value" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>This instance is less than
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is equal to
 <paramref name="value" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <para>This instance is greater than
 <paramref name="value" />.</para>
              <para>-or-</para>
              <para>
                <paramref name="value" /> is <see langword="null" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.UInt64.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified object.</para>
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.UInt64" /> and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation. </para>
      </summary>
      <returns>
        <para>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.ToString(System.String)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation using the specified format. </para>
      </summary>
      <param name="format">A format string.</param>
      <returns>
        <para>The string representation of the value of this instance as specified by <paramref name="format" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation using the specified format and
      culture-specific format information. </para>
      </summary>
      <param name=" format">A format specification.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance.</param>
      <returns>
        <para>The string representation of the value of this instance as
      specified by <paramref name="format" /> and <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.Parse(System.String)">
      <summary>
        <para>Converts the string representation of a number to its 64-bit
      unsigned integer equivalent.</para>
      </summary>
      <param name="s">A string representing the number to convert.</param>
      <returns>
        <para>A 64-bit unsigned integer equivalent to the number contained in <paramref name="s" />
.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
        <para>Converts the string representation of a number in a
      specified style to its 64-bit unsigned integer equivalent.</para>
      </summary>
      <param name=" s">A string representing the number to convert. </param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" /> constants that indicate the permitted format of <paramref name="s" />. </param>
      <returns>
        <para>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />
.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
      specified culture-specific format to its 64-bit unsigned integer equivalent.</para>
      </summary>
      <param name=" s">A string representing the number to convert.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
        <para>Converts the string representation of a number in a
      specified style and culture-specific format to its 64-bit unsigned integer
      equivalent.</para>
      </summary>
      <param name=" s">A string representing the number to convert.</param>
      <param name=" style">The combination of one or more <see cref="T:System.Globalization.NumberStyles" />constants that indicate the permitted format of <paramref name="s" />.</param>
      <param name=" provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <returns>
        <para>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />
.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.ToString(System.IFormatProvider)">
      <summary>
        <para>Converts the numeric value of this instance to its
      equivalent string representation using the specified culture-specific
      format information. </para>
      </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <returns>
        <para>The string representation of the value of this instance as
      specified by <paramref name="provider" />.</para>
      </returns>
    </member>
    <member name="M:System.UInt64.GetTypeCode">
      <summary>
        <para>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt64" />.</para>
      </summary>
      <returns>
        <para>The enumerated constant, <see cref="F:System.TypeCode.UInt64" qualify="true" />.</para>
      </returns>
    </member>
    <member name="T:System.UIntPtr">
      <summary>
        <para> A platform-specific type that is used to represent
      a pointer or a handle.</para>
      </summary>
    </member>
    <member name="F:System.UIntPtr.Zero">
      <summary>
        <para>A read-only field that represents a pointer or handle that has been initialized to zero.</para>
      </summary>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.UIntPtr" /> structure using
   the specified 32-bit pointer or handle.</para>
      </summary>
      <param name="value">A pointer or handle contained in a 32-bit unsigned integer.</param>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt64)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.UIntPtr" /> using
   the specified 64-bit pointer or handle.</para>
      </summary>
      <param name="value">A pointer or handle contained in a 64-bit unsigned integer.</param>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.Void*)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.UIntPtr" /> using the specified
   pointer to an unspecified type.</para>
      </summary>
      <param name="value">A pointer to an unspecified type.</param>
    </member>
    <member name="M:System.UIntPtr.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" obj">An object to compare with this instance or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.UIntPtr" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.ToUInt32">
      <summary>
        <para>Converts the value of this instance to a 32-bit unsigned integer.</para>
      </summary>
      <returns>
        <para>A 32-bit unsigned integer equal to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.ToUInt64">
      <summary>
        <para>Converts the value of this instance to a 64-bit unsigned integer.</para>
      </summary>
      <returns>
        <para> A 64-bit unsigned integer equal to the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.ToString">
      <summary>
        <para>Converts the numeric value of this instance to its 
      equivalent string representation.</para>
      </summary>
      <returns>
        <para>The string 
      representation of the value of this instance.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr">
      <summary>
        <para>Converts the value of a 32-bit unsigned integer to an
   <see cref="T:System.UIntPtr" />.</para>
      </summary>
      <param name="value">A 32-bit unsigned integer.</param>
      <returns>
        <para>A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr">
      <summary>
        <para>Converts the value of a 64-bit unsigned integer to an
   <see cref="T:System.UIntPtr" />.</para>
      </summary>
      <param name="value">A 64-bit unsigned integer.</param>
      <returns>
        <para>A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.UIntPtr" /> to a 32-bit unsigned integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.UIntPtr" />.</param>
      <returns>
        <para>The contents of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.UIntPtr" /> to a 64-bit unsigned integer.</para>
      </summary>
      <param name="value">A <see cref="T:System.UIntPtr" />.</param>
      <returns>
        <para>The contents of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr">
      <summary>
        <para> Converts the specified pointer to an unspecified type to a
   <see cref="T:System.UIntPtr" />.</para>
      </summary>
      <param name="value">A pointer to an unspecified type.</param>
      <returns>
        <para>A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*">
      <summary>
        <para>Converts the value of the specified <see cref="T:System.UIntPtr" /> to a pointer to an unspecified type.</para>
      </summary>
      <param name="value">A <see cref="T:System.UIntPtr" />.</param>
      <returns>
        <para>The contents of <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)">
      <summary>
        <para>Determines whether two specified instances of <see cref="T:System.UIntPtr" /> are equal.</para>
      </summary>
      <param name="value1">A <see cref="T:System.UIntPtr" />.</param>
      <param name=" value2">A <see cref="T:System.UIntPtr" />.</param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="value1" /> equals <paramref name="value2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)">
      <summary>
        <para>Determines whether two specified instances of <see cref="T:System.UIntPtr" /> are not equal.</para>
      </summary>
      <param name="value1">A <see cref="T:System.UIntPtr" />.</param>
      <param name=" value2">A <see cref="T:System.UIntPtr" />.</param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="value1" /> does not equal <paramref name="value2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.UIntPtr.ToPointer">
      <summary>
        <para> Converts the value of this instance to a pointer to an
      unspecified type.</para>
      </summary>
      <returns>
        <para>A pointer to <see cref="T:System.Void" />; that is, a pointer to memory containing data of an
   unspecified type. </para>
      </returns>
    </member>
    <member name="P:System.UIntPtr.Size">
      <summary>
        <para>Gets the size of this instance.</para>
      </summary>
    </member>
    <member name="T:System.UnauthorizedAccessException">
      <summary>
        <para>The exception that is thrown when the operating
      system denies access because of an I/O error or a specific
      type of security error.</para>
      </summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.UnauthorizedAccessException" /> class.</para>
      </summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the
   <see cref="T:System.UnauthorizedAccessException" />
   class with a specified error
   message.
   </para>
      </summary>
      <param name="message"> The message that describes the error.</param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String,System.Exception)">
      <summary>
        <para> Initializes a new instance of the
   <see cref="T:System.UnauthorizedAccessException" />
   
   class with a specified error message and a reference to the
   inner exception that is the cause of this exception.
   </para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a<see langword="catch" />block that handles the inner exception.</param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>
            Initializes a new instance of the 
            <see cref="T:System.UnauthorizedAccessException" />
             class with serialized
 data.
         </para>
      </summary>
      <param name="info">
         The 
         <see cref="T:System.Runtime.Serialization.SerializationInfo" />
          that holds the serialized object data about the exception being thrown.
      </param>
      <param name="context">
         The 
         <see cref="T:System.Runtime.Serialization.StreamingContext" />
          that contains contextual information about the source or destination.
      </param>
    </member>
    <member name="T:System.UnhandledExceptionEventArgs">
      <summary>
        <para>Provides data for the event that is raised when there is an exception that is not handled by the application
      domain.</para>
      </summary>
    </member>
    <member name="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.UnhandledExceptionEventArgs" /> class with the exception object and a common language runtime termination flag.</para>
      </summary>
      <param name="exception">The exception that is not handled.</param>
      <param name="isTerminating">
        <see langword="true" /> if the runtime is terminating; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.ExceptionObject">
      <summary>
        <para>Gets the unhandled exception object.</para>
      </summary>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.IsTerminating">
      <summary>
        <para> Indicates whether the common language runtime is terminating.</para>
      </summary>
    </member>
    <member name="T:System.UnhandledExceptionEventHandler">
      <summary>
        <para> Represents the method that will handle the event triggered by an exception that is
      not handled by the application domain.</para>
      </summary>
      <param name="sender">The source of the unhandled exception event.</param>
      <param name="e">An <paramref name="UnhandledExceptionEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Version">
      <summary>
        <para>Represents the version number for a common language runtime assembly. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Version" /> class with the
   specified major, minor, build, and revision numbers.</para>
      </summary>
      <param name=" major">The major version number.</param>
      <param name=" minor">The minor version number.</param>
      <param name=" build">The build number.</param>
      <param name=" revision">The revision number.</param>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Version" /> class using the
   specified major, minor, and build values.</para>
      </summary>
      <param name=" major">The major version number.</param>
      <param name=" minor">The minor version number.</param>
      <param name=" build">The build number.</param>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Version" /> class using the
   specified major and minor values.</para>
      </summary>
      <param name=" major">The major version number.</param>
      <param name=" minor">The minor version number.</param>
    </member>
    <member name="M:System.Version.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Version" /> class using the
   value represented by the specified <see cref="T:System.String" />.</para>
      </summary>
      <param name=" version">A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character ('.').</param>
    </member>
    <member name="M:System.Version.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Version" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Version.Clone">
      <summary>
        <para>Returns a new <see cref="T:System.Version" /> whose value is the same as this
   instance.</para>
      </summary>
      <returns>
        <para>A new <see cref="T:System.Object" /> whose values are a copy of this
<see cref="T:System.Version" />.</para>
      </returns>
    </member>
    <member name="M:System.Version.CompareTo(System.Object)">
      <summary>
        <para>Compares this instance to a specified object and returns an indication of
      their relative values.</para>
      </summary>
      <param name=" version">An object to compare, or <see langword="null" />.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Less
         than
         zero</term>
            <description> This instance is before
      <paramref name="version" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>This instance is the same as
      <paramref name="version" />.</description>
          </item>
          <item>
            <term> Greater than
         zero</term>
            <description>
              <para>This instance is subsequent to
         <paramref name="version" />.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Version.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" obj">An object to compare with this instance, or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true " />if this instance and <paramref name="obj" /> are both <see cref="T:System.Version" /> objects, and every component of this instance matches
   the corresponding component of <paramref name="obj" />; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Version.GetHashCode">
      <summary>
        <para>Returns a hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Version.ToString">
      <summary>
        <para>Converts the value of this instance to its equivalent
      <see cref="T:System.String" />
   representation. </para>
      </summary>
      <returns>
        <para>The <see cref="T:System.String" /> representation of the values of the major, minor, build, and revision components of this instance, as depicted in the following format. Each component is separated by a period character ('.'). Square brackets ('[' and ']') indicate a component that will not appear in the return value if the component is not defined:</para>
        <para>major.minor[.build[.revision]]</para>
        <para>For example, if you create an instance of <see cref="T:System.Version" /> using the constructor <c>Version(1,1)</c> , the returned string is "1.1". If you
create an instance of <see cref="T:System.Version" /> using the constructor <c>Version(1,3,4,2)</c>, the returned string is "1.3.4.2".</para>
      </returns>
    </member>
    <member name="M:System.Version.ToString(System.Int32)">
      <summary>
        <para>Converts the value of this instance to its equivalent
   <see cref="T:System.String" />
   representation. A specified count indicates the number of components to
   return.</para>
      </summary>
      <param name=" fieldCount">The number of components to return. The <paramref name="fieldCount" /> ranges from 0 to 4.</param>
      <returns>
        <para>The <see cref="T:System.String" /> representation of the values of the major, minor, build, and revision components of this instance, each separated by a period character ('.'). The <paramref name="fieldCount" /> parameter determines how many components are returned. </para>
        <list type="table">
          <listheader>
            <term>fieldCount</term>
            <description>Return Value</description>
          </listheader>
          <item>
            <term> 0</term>
            <description>An empty string ("").</description>
          </item>
          <item>
            <term> 1</term>
            <description>major</description>
          </item>
          <item>
            <term> 2</term>
            <description>major.minor</description>
          </item>
          <item>
            <term> 3</term>
            <description>major.minor.build</description>
          </item>
          <item>
            <term> 4</term>
            <description>major.minor.build.revision</description>
          </item>
        </list>
        <para>For example, if you create an instance of <see langword="Version" /> using the constructor <c>Version(1,3,5)</c>, <c>ToString(2)</c> returns "1.3" and <c>ToString(4)</c> throws an exception.</para>
      </returns>
    </member>
    <member name="M:System.Version.op_Equality(System.Version,System.Version)">
      <summary>
        <para> Determines whether two specified instances of <see cref="T:System.Version" />
are equal.</para>
      </summary>
      <param name="v1">The first instance of <see cref="T:System.Version" />. </param>
      <param name="v2">The second instance of <see cref="T:System.Version" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="v1 " />equals <paramref name="v2" />;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Version.op_Inequality(System.Version,System.Version)">
      <summary>
        <para>Determines whether two specified instances of
      <see cref="T:System.Version" /> are
      not equal. </para>
      </summary>
      <param name="v1">The first instance of <see cref="T:System.Version" />. </param>
      <param name="v2">The second instance of <see cref="T:System.Version" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="v1 " />does not equal
<paramref name="v2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Version.op_LessThan(System.Version,System.Version)">
      <summary>
        <para> Determines whether the first specified instance of
      <see cref="T:System.Version" /> is less than the
      second specified instance of <see cref="T:System.Version" />.
      </para>
      </summary>
      <param name="v1">The first instance of <see cref="T:System.Version" />. </param>
      <param name="v2">The second instance of <see cref="T:System.Version" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="v1" /> is less than
<paramref name="v2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Version.op_LessThanOrEqual(System.Version,System.Version)">
      <summary>
        <para> Determines whether the first specified instance of
   <see cref="T:System.Version" /> is less than or
      equal to the second instance of <see cref="T:System.Version" />.
      </para>
      </summary>
      <param name="v1">The first instance of <see cref="T:System.Version" />. </param>
      <param name="v2">The second instance of <see cref="T:System.Version" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="v1" /> is less than or equal to <paramref name="v2" />; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Version.op_GreaterThan(System.Version,System.Version)">
      <summary>
        <para> Determines whether the first specified instance of
      <see cref="T:System.Version" /> is greater than
      the second specified instance of <see cref="T:System.Version" />.
      </para>
      </summary>
      <param name="v1">The first instance of <see cref="T:System.Version" />. </param>
      <param name="v2">The second instance of <see cref="T:System.Version" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="v1" /> is greater than
<paramref name="v2" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)">
      <summary>
        <para> Determines whether the first specified instance of
      <see cref="T:System.Version" /> is greater than or
      equal to the second instance of <see cref="T:System.Version" />.
      </para>
      </summary>
      <param name="v1">The first instance of <see cref="T:System.Version" />. </param>
      <param name="v2">The second instance of <see cref="T:System.Version" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="v1" /> is greater than or
   equal to <paramref name="v2" />; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="P:System.Version.Major">
      <summary>
        <para>Gets the value of the major component of the version number for this
      instance.</para>
      </summary>
    </member>
    <member name="P:System.Version.Minor">
      <summary>
        <para>Gets the value of the minor component of the version number for this
      instance.</para>
      </summary>
    </member>
    <member name="P:System.Version.Build">
      <summary>
        <para>Gets the value of the build component of the version number for this 
       instance.</para>
      </summary>
    </member>
    <member name="P:System.Version.Revision">
      <summary>
        <para>Gets the value of the revision component of the version number for this 
       instance.</para>
      </summary>
    </member>
    <member name="T:System.Void">
      <summary>
        <para>Indicates a method that does not return a value; that is, the method has the void
 return type.</para>
      </summary>
    </member>
    <member name="T:System.WeakReference">
      <summary>
        <para>Represents a weak reference, which references an object while still
      allowing it to be garbage collected.</para>
      </summary>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.WeakReference" /> class,
   referencing the specified object.</para>
      </summary>
      <param name=" target">The object to track or <see langword="null" />.</param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.WeakReference" /> class,
   referencing the specified object and using the specified resurrection
   tracking.</para>
      </summary>
      <param name=" target">An object to track.</param>
      <param name=" trackResurrection">Indicates when to stop tracking the object. If <see langword="true" />, the object is tracked after finalization; if <see langword="false" />, the object is only tracked until finalization.</param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.WeakReference" /> class, using deserialized data
   from the specified serialization and stream objects.</para>
      </summary>
      <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
      <param name=" context">(Reserved) Describes the source and destination of the serialized stream specified by <paramref name="info" />.</param>
    </member>
    <member name="M:System.WeakReference.Finalize">
      <summary>
        <para>Frees any resources allocated by this instance.</para>
      </summary>
    </member>
    <member name="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with all the data
   needed to serialize this instance.</para>
      </summary>
      <param name=" info">An object that holds all the data needed to serialize or deserialize this instance.</param>
      <param name=" context">(Reserved) The location where serialized data will be stored and retrieved. </param>
    </member>
    <member name="P:System.WeakReference.IsAlive">
      <summary>
        <para>Gets an indication whether the object referenced by this instance has been
      garbage collected.</para>
      </summary>
    </member>
    <member name="P:System.WeakReference.TrackResurrection">
      <summary>
        <para>Gets an indication whether the object referenced by this instance is tracked 
       after it is garbage collected and finalized.</para>
      </summary>
    </member>
    <member name="P:System.WeakReference.Target">
      <summary>
        <para>Gets or sets the object (the target) referenced by this instance.</para>
      </summary>
    </member>
    <member name="T:System.Threading.ApartmentState">
      <summary>
        <para> Specifies the apartment state of a <see cref="T:System.Threading.Thread" />.
   </para>
      </summary>
    </member>
    <member name="F:System.Threading.ApartmentState.STA">
      <summary>
        <para> The <see cref="T:System.Threading.Thread" /> 
will create and enter a single-threaded apartment.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ApartmentState.MTA">
      <summary>
        <para> The <see cref="T:System.Threading.Thread" /> will
   create and enter a multithreaded apartment.
   </para>
      </summary>
    </member>
    <member name="F:System.Threading.ApartmentState.Unknown">
      <summary>
        <para> The <see cref="P:System.Threading.Thread.ApartmentState" /> property 
   has not been set.</para>
      </summary>
    </member>
    <member name="T:System.Threading.AutoResetEvent">
      <summary>
        <para>Notifies one or more waiting threads that an event has occurred. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="T:System.Threading.WaitHandle">
      <summary>
        <para>Encapsulates operating system-specific objects that wait for exclusive access
      to shared resources.</para>
      </summary>
    </member>
    <member name="F:System.Threading.WaitHandle.WaitTimeout">
      <summary>
        <para>Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation has timed out before any of the wait handles fire. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Threading.WaitHandle.InvalidHandle">
      <summary>
        <para>Represents an invalid handle that was passed to a method. 
      This field is read-only.</para>
      </summary>
    </member>
    <member name="M:System.Threading.WaitHandle.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
      <summary>
        <para>When overridden in a derived class, blocks the current
      thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using 32-bit signed
      integer to measure the time interval and specifying whether to exit the synchronization domain before the wait. </para>
      </summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait for the thread to receive a signal. </param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, <see langword="false" />. </param>
      <returns>
        <para>
          <see langword="true" /> if the current instance receives a signal; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
      <summary>
        <para>When overridden in a derived class, blocks the current thread until the current instance receives a signal, using
      a <see cref="T:System.TimeSpan" />
      to measure the time interval and specifying whether to exit the synchronization
      domain before the wait.</para>
      </summary>
      <param name="timeout">The number of milliseconds to wait for the thread to receive a signal. </param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, <see langword="false" />. </param>
      <returns>
        <para>
          <see langword="true" /> if the current instance receives a signal; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne">
      <summary>
        <para>When overridden in a derived class, blocks the current
      thread until the current <see cref="T:System.Threading.WaitHandle" />
      receives a signal.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the current instance receives a signal; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
      <summary>
        <para>Waits for all of the elements in the specified array to receive a signal,
      using an <see cref="T:System.Int32" />
      value to measure the time interval and specifying whether to exit the
      synchronization domain before the wait.</para>
      </summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait for the thread to receive a signal.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, <see langword="false" /> . </param>
      <returns>
        <para>
          <see langword="true" /> to exit the synchronization domain before the wait; 
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
      <summary>
        <para>Waits for all of the elements in the specified array to receive a signal,
      using a <see cref="T:System.TimeSpan" />
      value to measure the time interval and specifying whether to exit the
      synchronization domain before the wait.</para>
      </summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
      <param name="timeout">The number of milliseconds to wait for the thread to receive a signal.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, <see langword="false" /> . </param>
      <returns>
        <para>
          <see langword="true" /> if the 
   method exited the synchronization domain before the wait; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
      <summary>
        <para>Waits for all of the elements in the specified array to receive a signal.</para>
      </summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
      <returns>
        <para>
          <see langword="true " />when every element in <paramref name="waitHandles " />has received
   a signal. If the current thread receives a request to abort before the signals
   are received, this method returns <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
      <summary>
        <para>Waits for any of the elements in the specified array to
 receive a signal, using a 32-bit signed
 integer to measure the time interval, and specifying whether to exit the
 synchronization domain before the wait.</para>
      </summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait for the thread to receive a signal.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, <see langword="false" /> . </param>
      <returns>
        <para>The array index of the object that satisfied the wait, 
 or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no
 object satisfied the wait and a time interval equivalent to
 <paramref name="millisecondsTimeout" /> has passed.</para>
      </returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
      <summary>
        <para>Waits for any of the elements in the specified array to receive a signal,
 using a <see cref="T:System.TimeSpan" />
 to measure the time interval and specifying whether to exit the
 synchronization domain before the wait.</para>
      </summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
      <param name="timeout">The number of milliseconds to wait for the thread to receive a signal.</param>
      <param name="exitContext">
        <see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, <see langword="false" /> . </param>
      <returns>
 The array index of the object that satisfied the wait,
 or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no
 object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has
 passed.
</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
      <summary>
        <para>Waits for any of the elements in the specified array to receive a signal.</para>
      </summary>
      <param name="waitHandles">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates).</param>
      <returns>
        <para>The array index of the object that satisfied the wait.</para>
      </returns>
    </member>
    <member name="M:System.Threading.WaitHandle.Close">
      <summary>
        <para>When overridden in a derived class, releases all 
      resources held by the current <see cref="T:System.Threading.WaitHandle" />
      .
      </para>
      </summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
      <summary>
        <para>When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and
   optionally releases the managed resources.</para>
      </summary>
      <param name="explicitDisposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Threading.WaitHandle.Finalize">
      <summary>
        <para>Releases
      the resources held by the current instance.
      </para>
      </summary>
    </member>
    <member name="P:System.Threading.WaitHandle.Handle">
      <summary>
        <para> Gets or sets the native operating system handle.</para>
      </summary>
    </member>
    <member name="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value indicating whether to set the initial
 state to signaled.</para>
      </summary>
      <param name="initialState">
        <see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set the initial state to nonsignaled.</param>
    </member>
    <member name="M:System.Threading.AutoResetEvent.Reset">
      <summary>
        <para> Sets the state of the specified event to
 nonsignaled.</para>
      </summary>
      <returns>
        <para>
          <see langword="true " />if the function succeeds; otherwise,
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Threading.AutoResetEvent.Set">
      <summary>
        <para> Sets the state of the specified event to signaled.</para>
      </summary>
      <returns>
        <para>
          <see langword="true " />if the function succeeds; otherwise,
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="T:System.Threading.Interlocked">
      <summary>
        <para> 
 Provides atomic operations for variables that are shared by
 multiple threads.</para>
      </summary>
    </member>
    <member name="M:System.Threading.Interlocked.Increment(System.Int32@)">
      <summary>
        <para> Increments a specified variable and stores the result, 
 as an atomic operation.
 </para>
      </summary>
      <param name="location">The variable whose value is to be incremented. </param>
      <returns>
        <para> The incremented value.
 </para>
      </returns>
    </member>
    <member name="M:System.Threading.Interlocked.Decrement(System.Int32@)">
      <summary>
        <para> Decrements a specified variable and stores the result, as an atomic operation.
 </para>
      </summary>
      <param name="location">The variable whose value is to be decremented. </param>
      <returns>
        <para> 
 The decremented value.
 </para>
      </returns>
    </member>
    <member name="M:System.Threading.Interlocked.Increment(System.Int64@)">
      <summary>
        <para> Increments a specified variable and stores the result, 
 as an atomic operation.
 </para>
      </summary>
      <param name="location">The variable whose value is to be incremented. </param>
      <returns>
        <para> The incremented value.
 </para>
      </returns>
    </member>
    <member name="M:System.Threading.Interlocked.Decrement(System.Int64@)">
      <summary>
        <para> Decrements the specified variable and stores the result, as an atomic operation.
 </para>
      </summary>
      <param name="location">The variable whose value is to be decremented. </param>
      <returns>
        <para> The
 decremented value.
 </para>
      </returns>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)">
      <summary>
        <para> Sets a 32-bit signed integer to a specified value as an atomic
 operation, and returns the original value.
 </para>
      </summary>
      <param name="location1">The variable to set to the specified value. </param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set. </param>
      <returns>
        <para> The
 original value of <paramref name="location1" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
      <summary>
        <para> Compares two 32-bit signed integers for equality and, if they are
 equal, replaces one of the values.</para>
      </summary>
      <param name="location1">
        <para>The destination value that will be compared with the value of the <paramref name="comparand" /> parameter and will possibly be replaced.</para>
      </param>
      <param name="value">The value that will replace the destination value if the comparison results in equality. </param>
      <param name="comparand">The value to be compared to the <paramref name="location1" /> parameter. </param>
      <returns>
        <para> The original value of the <paramref name="location1" /> parameter.
 </para>
      </returns>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Single@,System.Single)">
      <summary>
        <para> Sets a single-precision floating point number to a specified value as an atomic
 operation, and returns the original value.
 </para>
      </summary>
      <param name="location1">The variable to set to the specified value. </param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set. </param>
      <returns>
        <para> The original value of <paramref name="location1" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
      <summary>
        <para>Compares two single-precision floating point numbers for equality and, 
 if they are equal, replaces one of the values.</para>
      </summary>
      <param name="location1">The destination value that will be compared with the value of the <paramref name="comparand" /> parameter and will possibly be replaced. </param>
      <param name="value">The value that will replace the destination value if the comparison results in equality. </param>
      <param name="comparand">The value to be compared to the <paramref name="location1" /> parameter.</param>
      <returns>
        <para> The original destination value.
 </para>
      </returns>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)">
      <summary>
        <para> Sets an object to a specified value as an
 atomic operation, and returns a reference to the original object.
 </para>
      </summary>
      <param name="location1">The variable to set to the specified. </param>
      <param name="value">The value to which the <paramref name="location1" /> parameter is set. </param>
      <returns>
        <para> The original value of <paramref name="location1" /> .
 </para>
      </returns>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
      <summary>
        <para> Compares two objects for equality and,
 if they are equal, replaces one of the objects.</para>
      </summary>
      <param name="location1">The destination object that will be compared with the value of the <paramref name="comparand" /> parameter and will possibly be replaced. </param>
      <param name="value">The object that will replace the destination object if the comparison results in equality.</param>
      <param name="comparand">The object to be compared to the <paramref name="location1" /> parameter. </param>
      <returns>
        <para> The original value of the <paramref name="location1" /> parameter.
 </para>
      </returns>
    </member>
    <member name="T:System.Runtime.Remoting.IObjectHandle">
      <summary>
        <para>Defines the interface for unwrapping marshal by value objects from
      indirection.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.IObjectHandle.Unwrap">
      <summary>
        <para>Unwraps the object.</para>
      </summary>
      <returns>
        <para>The unwrapped object.</para>
      </returns>
    </member>
    <member name="T:System.Threading.LockCookie">
      <summary>
        <para>
       Defines the lock that implements single-writer/multiple-reader
       semantics. This is a value type.
    </para>
      </summary>
    </member>
    <member name="T:System.Threading.ManualResetEvent">
      <summary>
        <para> Occurs when notifying one
 or more waiting threads that an event has occurred. This
 class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether
 to set the initial state to signaled.
 </para>
      </summary>
      <param name="initialState">
        <see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled. </param>
    </member>
    <member name="M:System.Threading.ManualResetEvent.Reset">
      <summary>
        <para> Sets the state of the specified event to nonsignaled.
 </para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the function succeeds;
 otherwise, <see langword="false" />.
 </para>
      </returns>
    </member>
    <member name="M:System.Threading.ManualResetEvent.Set">
      <summary>
        <para> Sets the state of the specified event to signaled.
 </para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the function succeeds; otherwise,
<see langword="false" />.
 </para>
      </returns>
    </member>
    <member name="T:System.Threading.Monitor">
      <summary>
        <para> Provides
      a mechanism that synchronizes access to objects.</para>
      </summary>
    </member>
    <member name="M:System.Threading.Monitor.Enter(System.Object)">
      <summary>
        <para> Acquires an exclusive
      lock on the specified object. </para>
      </summary>
      <param name="obj">The object on which to acquire the monitor lock.</param>
    </member>
    <member name="M:System.Threading.Monitor.Exit(System.Object)">
      <summary>
        <para>Releases an exclusive lock on the specified object. </para>
      </summary>
      <param name="obj">The object on which to release the lock.</param>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object)">
      <summary>
        <para>Attempts to acquire an exclusive lock on the specified object.</para>
      </summary>
      <param name="obj">The object on which to acquire the lock.</param>
      <returns>
        <para>
          <see langword="true " /> if the current thread acquires
   the lock; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
      <summary>
        <para>Attempts, for the specified number of milliseconds, to acquire an exclusive
      lock on the specified object.</para>
      </summary>
      <param name="obj">The object on which to acquire the lock.</param>
      <param name=" millisecondsTimeout">The number of milliseconds to wait for the lock.</param>
      <returns>
        <para>
          <see langword="true " /> if the current thread acquires
   the lock; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
      <summary>
        <para>Attempts, for the specified amount of time, to acquire an exclusive lock on the
      specified object.</para>
      </summary>
      <param name="obj">The object on which to acquire the lock.</param>
      <param name=" timeout">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock.</param>
      <returns>
        <para>
          <see langword="true " /> if the current thread acquires the lock
   without blocking; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
      <summary>
        <para>Waits for notification from an object that called the <see cref="M:System.Threading.Monitor.Pulse(System.Object)" /> or <see cref="M:System.Threading.Monitor.PulseAll(System.Object)" /> method or
   for a specified timer to elapse. This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired.</para>
      </summary>
      <param name="obj">The object on which to wait.</param>
      <param name=" millisecondsTimeout">The number of milliseconds to wait before the method returns.</param>
      <param name=" exitContext">
        <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>
          <see langword="true" /> if the wait
   succeeded or did not time out; otherwise,
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
      <summary>
        <para>Releases the lock on an object and blocks the current thread
      until it reacquires the lock, or until a specified amount of time elapses, optionally exiting
      the synchronization domain for the synchronized context before the wait and reacquiring the
      domain.</para>
      </summary>
      <param name="obj">The object on which to wait.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before this method returns.</param>
      <param name="exitContext">
        <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>
          <see langword="true" /> if the wait succeeded or did not time out; otherwise,
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
      <summary>
        <para>Releases the lock on an object and blocks the current
      thread until it reacquires the lock or a specified amount of time elapses.</para>
      </summary>
      <param name="obj">The object on which to wait.</param>
      <param name="millisecondsTimeout">The number of milliseconds to wait before this method returns.</param>
      <returns>
        <para>
          <see langword="true" /> if the lock
   was reacquired before the specified time elapsed; otherwise,
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
      <summary>
        <para>Releases the lock on an object and blocks the current
      thread until it reacquires the lock or a specified amount of time elapses.</para>
      </summary>
      <param name="obj">The object on which to wait.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before this method returns.</param>
      <returns>
        <para>
          <see langword="true" /> if the lock was reacquired before the specified time elapsed; otherwise,
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object)">
      <summary>
        <para>Releases the lock on an object and blocks the current
      thread until it reacquires the
      lock.</para>
      </summary>
      <param name="obj">The object on which to wait.</param>
      <returns>
        <para>
          <see langword="true " />if the call returned because the
   caller reacquired the lock for the specified object. This method does not return
   if the lock is not reacquired. </para>
      </returns>
    </member>
    <member name="M:System.Threading.Monitor.Pulse(System.Object)">
      <summary>
        <para>Notifies a thread in the waiting queue of a change in the locked object's state.</para>
      </summary>
      <param name="obj">The object a thread is waiting for.</param>
    </member>
    <member name="M:System.Threading.Monitor.PulseAll(System.Object)">
      <summary>
        <para> Notifies all waiting threads of a change in the object's
      state.</para>
      </summary>
      <param name="obj">The object that sends the pulse.</param>
    </member>
    <member name="T:System.Threading.Mutex">
      <summary>
        <para>A synchronization primitive than can also be used for interprocess
 synchronization.</para>
      </summary>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value indicating whether the calling thread should have initial ownership
   of the mutex, a string that is the name of the mutex, and a Boolean value that, when the
   method returns, will indicate whether the calling thread was granted initial ownership of the
   mutex.</para>
      </summary>
      <param name="initiallyOwned">
        <see langword="true" /> to give the calling thread initial ownership of the mutex; otherwise, <see langword="false" />. </param>
      <param name="name">The name of the <see cref="T:System.Threading.Mutex" />. If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed. </param>
      <param name="createdNew">When this method returns, contains a Boolean that is <see langword="true" /> if the calling thread was granted initial ownership of the mutex; otherwise, <see langword="false" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean,System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value indicating whether the calling thread should have
   initial ownership of the mutex, and a string that is the name of the
   mutex.</para>
      </summary>
      <param name="initiallyOwned">
        <see langword="true" /> to give the calling thread initial ownership of the mutex; otherwise, <see langword="false" />. </param>
      <param name="name">The name of the <see cref="T:System.Threading.Mutex" />. If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed. </param>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value indicating whether the
   calling thread should have initial ownership of the mutex.
   </para>
      </summary>
      <param name="initiallyOwned">
        <see langword="true" /> to give the calling thread initial ownership of the mutex; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Threading.Mutex.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Threading.Mutex.ReleaseMutex">
      <summary>
        <para> Releases the <see cref="T:System.Threading.Mutex" /> once.
 </para>
      </summary>
    </member>
    <member name="T:System.Threading.NativeOverlapped">
      <summary>
        <para>Provides an explicit layout that is visible from unmanaged code and that will have the
 same layout as the Win32 OVERLAPPED structure with additional reserved fields at
 the end.</para>
      </summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.InternalLow">
      <summary>
        <para>Specifies a system-dependent status. Reserved for operating system use. </para>
      </summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.InternalHigh">
      <summary>
        <para> Specifies 
      the length of the data transferred. Reserved for operating system
      use. </para>
      </summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.OffsetLow">
      <summary>
        <para>Specifies a file position at which to start the
 transfer.</para>
      </summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.OffsetHigh">
      <summary>
        <para> 
 Specifies the high word of the byte offset
 at which to start the transfer.</para>
      </summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.EventHandle">
      <summary>
        <para>Specifies the handle to an event set to the signaled state when the operation is
 complete. The calling process must set this member either to zero or to a valid
 event handle before calling any overlapped functions. </para>
      </summary>
    </member>
    <member name="M:System.Threading.Overlapped.#ctor">
      <summary>
        <para>
		  Initializes a new, empty instance of the <see langword="Overlapped" /> class.
	   </para>
      </summary>
    </member>
    <member name="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)">
      <summary>
        <para> Initializes a new instance of the <see langword="Overlapped" /> class from the constructor
   parameters.
   </para>
      </summary>
      <param name="offsetLo">The file position at which to start the transfer.</param>
      <param name="offsetHi">The high word of the byte offset at which to start the transfer.</param>
      <param name="hEvent">The handle to an event.</param>
      <param name="ar">The results of an asynchronous operation on an asynchronous delegate.</param>
    </member>
    <member name="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)">
      <summary>
        <para> Packs a managed overlapped class into a <see cref="T:System.Threading.NativeOverlapped" /> value type.
   </para>
      </summary>
      <param name="iocb">
      </param>
      <returns>
        <para> An unmanaged pointer. This unmanaged pointer can be passed to the operating
      system in overlapped I/O operations. The <see cref="T:System.Threading.NativeOverlapped" /> value type is fixed in
      physical memory until <see cref="M:System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)" /> is called.
      </para>
      </returns>
    </member>
    <member name="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
      <summary>
        <para>Unpacks an unmanaged <see cref="T:System.Threading.NativeOverlapped" /> value type into an unmanaged overlapped class.</para>
      </summary>
      <param name="iocb">
      </param>
    </member>
    <member name="M:System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)">
      <summary>
        <para> Unpacks an unmanaged <see cref="T:System.Threading.NativeOverlapped" />
value type into a managed overlapped class.</para>
      </summary>
      <param name="nativeOverlappedPtr">
      </param>
      <returns>
        <para> The <see cref="T:System.Threading.NativeOverlapped" /> value type is not freed from physical memory 
   until you call <see cref="M:System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)" />
   .
   </para>
      </returns>
    </member>
    <member name="M:System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)">
      <summary>
        <para>Frees the unmanaged memory associated with a native
      overlapped structure, allocated by <see cref="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)" />
      .</para>
      </summary>
      <param name="nativeOverlappedPtr">
      </param>
    </member>
    <member name="P:System.Threading.Overlapped.AsyncResult">
      <summary>
        <para>Gets or sets the results of an asynchronous operation on an asynchronous 
      delegate.</para>
      </summary>
    </member>
    <member name="P:System.Threading.Overlapped.OffsetLow">
      <summary>
        <para>Gets or sets the file position at which to start the transfer.</para>
      </summary>
    </member>
    <member name="P:System.Threading.Overlapped.OffsetHigh">
      <summary>
        <para>Gets or sets the high word of the byte offset at 
      which to start the transfer. </para>
      </summary>
    </member>
    <member name="P:System.Threading.Overlapped.EventHandle">
      <summary>
        <para> 
      Gets or sets the handle to an event.</para>
      </summary>
    </member>
    <member name="T:System.Threading.ReaderWriterLock">
      <summary>
        <para>Defines the lock that implements single-writer and
      multiple-reader semantics.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLock" />
 class.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)">
      <summary>
        <para>Acquires reader lock, using an <see cref="T:System.Int32" /> value for the timeout.</para>
      </summary>
      <param name="millisecondsTimeout">The timeout in milliseconds.</param>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)">
      <summary>
        <para>Acquires the reader lock, using a <see cref="T:System.TimeSpan" />value for the timeout.</para>
      </summary>
      <param name="timeout">A <see langword="TimeSpan" /> specifying the timeout period.</param>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)">
      <summary>
        <para>Acquires the writer lock, using an <see cref="T:System.Int32" /> value for the timeout.</para>
      </summary>
      <param name="millisecondsTimeout">The timeout in milliseconds.</param>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)">
      <summary>
        <para> Acquires the writer lock, using a <see cref="T:System.TimeSpan" />
value for the timeout.</para>
      </summary>
      <param name="timeout">The <see langword="TimeSpan" /> specifying the timeout period.</param>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.ReleaseReaderLock">
      <summary>
        <para>Releases the reader lock.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.ReleaseWriterLock">
      <summary>
        <para>Releases the writer lock.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)">
      <summary>
        <para>Upgrades the reader thread to a writer, using an 
   <see langword="Int32" /> value for the timeout.</para>
      </summary>
      <param name="millisecondsTimeout">The timeout in milliseconds.</param>
      <returns>
        <para>A <see cref="T:System.Threading.LockCookie" /> value.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)">
      <summary>
        <para> Upgrades the reader thread to a writer, using 
      a <see langword="TimeSpan" />
      value for the
      timeout.</para>
      </summary>
      <param name="timeout">The <see langword="TimeSpan" /> specifying the timeout period.</param>
      <returns>
        <para>A <see cref="T:System.Threading.LockCookie" /> value.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)">
      <summary>
        <para> Restores the lock status of the thread to when it calls
   <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />.</para>
      </summary>
      <param name="lockCookie">The <see cref="T:System.Threading.LockCookie" /> .</param>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.ReleaseLock">
      <summary>
        <para>Releases the lock, regardless of the number of times the thread
      acquired the lock.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Threading.LockCookie" /> value representing the released lock.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)">
      <summary>
        <para> Restores the lock status of the thread
      to what it was before calling <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</para>
      </summary>
      <param name="lockCookie">The <see cref="T:System.Threading.LockCookie" /> .</param>
    </member>
    <member name="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)">
      <summary>
        <para> Indicates whether intermediate writes have occurred since the sequence number
      was obtained.</para>
      </summary>
      <param name="seqNum">The sequence number.</param>
      <returns>
        <para>
          <see langword="true " />if intermediate writes have occurred since the sequence number was obtained;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLock.IsReaderLockHeld">
      <summary>
        <para>Gets a value indicating whether the current thread holds the reader lock.</para>
      </summary>
    </member>
    <member name="P:System.Threading.ReaderWriterLock.IsWriterLockHeld">
      <summary>
        <para>Gets a value indicating whether the
      current thread holds the writer lock.</para>
      </summary>
    </member>
    <member name="P:System.Threading.ReaderWriterLock.WriterSeqNum">
      <summary>
        <para> Gets the current sequence number.</para>
      </summary>
    </member>
    <member name="T:System.Threading.SynchronizationLockException">
      <summary>
        <para> The exception that is thrown when a
      synchronized method is invoked from an unsynchronized block of code.
      </para>
      </summary>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.SynchronizationLockException" /> class with default properties.
   </para>
      </summary>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.SynchronizationLockException" /> class with a specified error message.
   </para>
      </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.SynchronizationLockException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.SynchronizationLockException" /> class with serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Threading.Thread">
      <summary>
        <para> Creates and controls a thread, sets its priority, and gets its
      status.
      </para>
      </summary>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.Thread" />
class.</para>
      </summary>
      <param name="start">A <see cref="T:System.Threading.ThreadStart" /> delegate that references the methods to be invoked when this thread begins executing. </param>
    </member>
    <member name="M:System.Threading.Thread.Start">
      <summary>
        <para> Causes the operating system to change the state of the
      current instance to <see cref="F:System.Threading.ThreadState.Running" qualify="true" />
      . </para>
      </summary>
    </member>
    <member name="M:System.Threading.Thread.Abort(System.Object)">
      <summary>
        <para> Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the
   process of terminating the thread while also providing exception information about the thread termination. Calling this method usually terminates
   the thread.</para>
      </summary>
      <param name="stateInfo">An object that contains application-specific information, such as state, which can be used by the thread being aborted.</param>
    </member>
    <member name="M:System.Threading.Thread.Abort">
      <summary>
        <para> Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is
   invoked, to begin the process of terminating the thread. Calling this method usually terminates
   the thread.
   </para>
      </summary>
    </member>
    <member name="M:System.Threading.Thread.ResetAbort">
      <summary>
        <para> Cancels an <see cref="M:System.Threading.Thread.Abort(System.Object)" /> requested for the current
   thread.</para>
      </summary>
    </member>
    <member name="M:System.Threading.Thread.Suspend">
      <summary>
        <para> Either suspends the thread, or if the thread is already
      suspended, has no effect.
      </para>
      </summary>
    </member>
    <member name="M:System.Threading.Thread.Resume">
      <summary>
        <para> Resumes a thread that has been suspended.
      </para>
      </summary>
    </member>
    <member name="M:System.Threading.Thread.Interrupt">
      <summary>
        <para> Interrupts a thread that is in the
   <see langword="WaitSleepJoin" /> thread
      state.
      </para>
      </summary>
    </member>
    <member name="M:System.Threading.Thread.Join">
      <summary>
        <para> Blocks the calling thread until
      a thread terminates.
      </para>
      </summary>
    </member>
    <member name="M:System.Threading.Thread.Join(System.Int32)">
      <summary>
        <para> Blocks the calling thread until a thread terminates or the specified time elapses.
      </para>
      </summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait for the thread to terminate. </param>
      <returns>
        <para>
          <see langword="true " />if the thread has terminated; <see langword="false " />if the thread has
   not terminated after the amount of time
   specified by the <paramref name="millisecondsTimeout" /> parameter
   has elapsed.
   </para>
      </returns>
    </member>
    <member name="M:System.Threading.Thread.Join(System.TimeSpan)">
      <summary>
        <para> Blocks the calling thread until a thread terminates or the specified time
      elapses.
      </para>
      </summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> set to the amount of time to wait for the thread to terminate. </param>
      <returns>
        <para>
          <see langword="true" /> if the thread terminated; <see langword="false" /> if the thread has not terminated
   after the amount of time specified by the <paramref name="timeout" /> parameter
   has elapsed.</para>
      </returns>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.Int32)">
      <summary>
        <para> Suspends the current thread for a specified time.
      </para>
      </summary>
      <param name="millisecondsTimeout">The number of milliseconds for which the thread is blocked. Specify zero (0) to indicate that this thread should be suspended to allow other waiting threads to execute. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to block the thread indefinitely. </param>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
      <summary>
        <para> Blocks the current thread for a specified time. 
   </para>
      </summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> set to the amount of time for which the thread is blocked. Specify zero to indicate that this thread should be suspended to allow other waiting threads to execute. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to block the thread indefinitely. </param>
    </member>
    <member name="M:System.Threading.Thread.SpinWait(System.Int32)">
      <summary>
        <para>Causes a thread to wait the number of
      times defined by the <paramref name="iterations" /> parameter.</para>
      </summary>
      <param name="iterations">A 32-bit signed integer that defines how long a thread is to wait.</param>
    </member>
    <member name="M:System.Threading.Thread.Finalize">
      <summary>
        <para> Releases the resources held by this instance.
      </para>
      </summary>
    </member>
    <member name="M:System.Threading.Thread.AllocateDataSlot">
      <summary>
        <para> Allocates an unnamed data
      slot on all
      the threads.
      </para>
      </summary>
      <returns>
        <para>A <see cref="T:System.LocalDataStoreSlot" /> . </para>
      </returns>
    </member>
    <member name="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
      <summary>
        <para> Allocates a
      named data slot on all threads.
      </para>
      </summary>
      <param name="name">The name of the data slot to be allocated. </param>
      <returns>
        <para>A <see cref="T:System.LocalDataStoreSlot" /> .</para>
      </returns>
    </member>
    <member name="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
      <summary>
        <para> Looks up a named data slot.
      </para>
      </summary>
      <param name="name">The name of the local data slot.</param>
      <returns>
        <para>A <see cref="T:System.LocalDataStoreSlot" /> allocated for this
   thread.</para>
      </returns>
    </member>
    <member name="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
      <summary>
        <para> Frees
      a previously allocated named data slot.
      </para>
      </summary>
      <param name="name">The name of the data slot to be freed. </param>
    </member>
    <member name="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
      <summary>
        <para> Retrieves the value
      from the specified slot on the current thread, within the current thread's current domain.
      </para>
      </summary>
      <param name="slot">The <see cref="T:System.LocalDataStoreSlot" /> from which to get the value. </param>
      <returns>
        <para> The retrieved value.
      </para>
      </returns>
    </member>
    <member name="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
      <summary>
        <para> Sets the
      data in the specified slot on the currently running thread, for that thread's current domain.
      </para>
      </summary>
      <param name="slot">The <see cref="T:System.LocalDataStoreSlot" /> in which to set the value. </param>
      <param name="data">The value to be set. </param>
    </member>
    <member name="M:System.Threading.Thread.GetDomain">
      <summary>
        <para> 
      Returns the current domain
      in which the current thread is running.
   </para>
      </summary>
      <returns>
        <para>An <see cref="T:System.AppDomain" /> representing the current application domain of the
   running thread.</para>
      </returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomainID">
      <summary>
        <para>Returns a unique application domain identifier.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer uniquely identifying the application domain.</para>
      </returns>
    </member>
    <member name="P:System.Threading.Thread.Priority">
      <summary>
        <para> Gets or sets a value indicating
      the scheduling priority of a thread.
   </para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.IsAlive">
      <summary>
        <para> Gets a value
      indicating the execution status of the current thread.
      </para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.CurrentThread">
      <summary>
        <para> Gets the currently running thread.
      </para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.IsBackground">
      <summary>
        <para> Gets or sets a
      value indicating whether or not a thread is a background thread.
      </para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.ThreadState">
      <summary>
        <para> Gets a value containing the states of the
      current thread.
      </para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.ApartmentState">
      <summary>
        <para> Gets or sets
      the apartment state of this thread.
      </para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.CurrentUICulture">
      <summary>
        <para>Gets or sets the current culture used by the Resource Manager to look up 
      culture-specific resources at run time.</para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.CurrentCulture">
      <summary>
        <para>Gets or sets the culture for the
      current thread.</para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.CurrentContext">
      <summary>
        <para> Gets the current context in which the thread is executing.
      </para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.CurrentPrincipal">
      <summary>
        <para> Gets or sets the thread's current principal (for role-based
      security).
      </para>
      </summary>
    </member>
    <member name="P:System.Threading.Thread.Name">
      <summary>
        <para> Gets or
      sets the name of
      the thread.
      </para>
      </summary>
    </member>
    <member name="T:System.Threading.ThreadAbortException">
      <summary>
        <para> The exception that is thrown when a call is made to the
   <see cref="M:System.Threading.Thread.Abort(System.Object)" /> method. This
      class cannot be inherited.
      </para>
      </summary>
    </member>
    <member name="P:System.Threading.ThreadAbortException.ExceptionState">
      <summary>
        <para> Gets an object that contains application-specific
      information related to the thread abort.
      </para>
      </summary>
    </member>
    <member name="T:System.STAThreadAttribute">
      <summary>
        <para> Indicates that the default threading model for an application
      
      is single-threaded apartment (STA).
      </para>
      </summary>
    </member>
    <member name="M:System.STAThreadAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.STAThreadAttribute" /> 
class.</para>
      </summary>
    </member>
    <member name="T:System.MTAThreadAttribute">
      <summary>
        <para> Indicates that the default threading model for an
      application is multithreaded apartment (MTA). </para>
      </summary>
    </member>
    <member name="M:System.MTAThreadAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.MTAThreadAttribute" /> class.</para>
      </summary>
    </member>
    <member name="T:System.Threading.ThreadInterruptedException">
      <summary>
        <para> The exception that is thrown when a <see cref="T:System.Threading.Thread" /> is interrupted while it is in a waiting
   state.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.ThreadInterruptedException" />
class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.ThreadInterruptedException" /> class
   with a specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.ThreadInterruptedException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.ThreadInterruptedException" /> class with serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Threading.RegisteredWaitHandle">
      <summary>
        <para> Represents a handle that has been registered when
      calling <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />. This
      class cannot be inherited.
      </para>
      </summary>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
      <summary>
        <para> Cancels a registered wait operation issued by the
   <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
   
   method.
   </para>
      </summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to be signaled. </param>
      <returns>
        <para>
          <see langword="true " />if the function succeeds;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Finalize">
      <summary>
        <para>Ensures that resources are freed and other cleanup 
      operations are performed when the garbage collector reclaims the
   <see langword="RegisteredWaitHandle" /> .</para>
      </summary>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary>
        <para> Defines the callback method
      for thread pool user work items. That
      method must match this delegate.</para>
      </summary>
      <param name="state">The object passed to the delegate. </param>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
      <summary>
        <para> Receives a <see langword="Boolean " />parameter that
   determines whether the handle was signaled or the <see langword="WaitHandle" />
   timed out.
   </para>
      </summary>
      <param name="state">The object passed to the delegate. </param>
      <param name=" timedOut">
        <see langword="true" /> to indicate the handle was signaled; <see langword="false" /> to indicate the handle timed out. </param>
    </member>
    <member name="T:System.Threading.IOCompletionCallback">
      <summary>
        <para>Receives the error code, number of bytes, and overlapped value type when an
 I/O operation completes on the thread pool.</para>
      </summary>
      <param name="errorCode">The error code.</param>
      <param name=" numBytes">The number of bytes that are transferred.</param>
      <param name=" pOVERLAP">A <see cref="T:System.Threading.NativeOverlapped" /> representing an unmanaged pointer to the native overlapped value type.</param>
    </member>
    <member name="T:System.Threading.ThreadPool">
      <summary>
        <para>Provides a pool of threads that can be used to post work items,
      process asynchronous I/O, wait on behalf of other threads, and process timers.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
      <summary>
        <para> Retrieves the number of requests to the thread pool that
      can queue concurrently. All requests above that number are blocked until some
      of the queued requests finish work.</para>
      </summary>
      <param name="workerThreads">The number of worker threads.</param>
      <param name=" completionPortThreads">The number of asynchronous I/O threads.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
      <summary>
        <para>Retrieves the number of thread pool requests or work 
      items that the user can add before reaching the maximum limit defined in <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
      .</para>
      </summary>
      <param name="workerThreads">The number of worker threads.</param>
      <param name="completionPortThreads">The number of asynchronous I/O threads.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>
        <para> Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />, using a 32-bit unsigned integer for
   the time out in milliseconds.</para>
      </summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. </param>
      <param name=" callBack">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name=" state">The object passed to the delegate. </param>
      <param name=" millisecondsTimeOutInterval">The time out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is zero (0), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name=" executeOnlyOnce">
        <see langword="true" /> to indicate the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <returns>
        <para> The <see cref="T:System.Threading.RegisteredWaitHandle" /> that can be used
   to cancel the registered
   wait operation.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>
        <para>Queues the specified delegate to the thread pool.</para>
      </summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. </param>
      <param name="callBack">The delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object that is passed to the delegate. </param>
      <param name="millisecondsTimeOutInterval">The time out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is zero (0), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">
        <see langword="true" /> to indicate the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <returns>
        <para>The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>
        <para>Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />, using a 32-bit signed integer for the
   time out in
   milliseconds. </para>
      </summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. </param>
      <param name=" callBack">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name=" state">The object passed to the delegate. </param>
      <param name=" millisecondsTimeOutInterval">The time out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is zero (0), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name=" executeOnlyOnce">
        <see langword="true" /> to indicate the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <returns>
        <para>The <see cref="T:System.Threading.RegisteredWaitHandle" />
that encapsulates the
native handle.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>
        <para>Queues the specified delegate to the thread pool.</para>
      </summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. </param>
      <param name="callBack">The delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object that is passed to the delegate. </param>
      <param name="millisecondsTimeOutInterval">The time out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is zero (0), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">
        <see langword="true" /> to indicate the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <returns>
        <para>The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>
        <para>Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />, using a 32-bit unsigned integer for the
   time out in
   milliseconds. </para>
      </summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. </param>
      <param name=" callBack">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name=" state">The object passed to the delegate. </param>
      <param name=" millisecondsTimeOutInterval">The time out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is zero (0), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name=" executeOnlyOnce">
        <see langword="true" /> to indicate the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <returns>
        <para>The <see cref="T:System.Threading.RegisteredWaitHandle" />
that encapsulates the
native handle.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>
        <para>Queues the specified delegate to the thread pool.</para>
      </summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. </param>
      <param name="callBack">The delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object that is passed to the delegate. </param>
      <param name="millisecondsTimeOutInterval">The time out in milliseconds. If the <paramref name="millisecondsTimeOutInterval" /> parameter is zero (0), the function tests the object's state and returns immediately. If <paramref name="millisecondsTimeOutInterval" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">
        <see langword="true" /> to indicate the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <returns>
        <para>The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>
        <para>Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />, using a <see cref="T:System.TimeSpan" /> value 
   for the time out. </para>
      </summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. </param>
      <param name=" callBack">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name=" state">The object passed to the delegate. </param>
      <param name=" timeout">The time out represented by a <see cref="T:System.TimeSpan" /> . If <paramref name="timeout" /> is zero, the function tests the object's state and returns immediately. If <paramref name="timeout" /> is -1, the function's time-out interval never elapses. </param>
      <param name=" executeOnlyOnce">
        <see langword="true" /> to indicate the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <returns>
        <para>The <see cref="T:System.Threading.RegisteredWaitHandle" />
that encapsulates the
native handle.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>
        <para>Queues the specified delegate to the thread pool.</para>
      </summary>
      <param name="waitObject">The <see cref="T:System.Threading.WaitHandle" /> to register. </param>
      <param name="callBack">The delegate to call when the <paramref name="waitObject" /> parameter is signaled. </param>
      <param name="state">The object that is passed to the delegate. </param>
      <param name="timeout">The time out represented by a <see cref="T:System.TimeSpan" /> . If <paramref name="timeout" /> is zero, the function tests the object's state and returns immediately. If <paramref name="timeout" /> is -1, the function's time-out interval never elapses. </param>
      <param name="executeOnlyOnce">
        <see langword="true" /> to indicate the thread will no longer wait on the <paramref name="waitObject" /> parameter after the delegate has been called; <see langword="false" /> to indicate the timer is reset every time the wait operation completes until the wait is unregistered. </param>
      <returns>
        <para>The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>
        <para> Queues a user work item to the thread pool, invokes the
      specified delegate, and specifies an object to be passed to the delegate when serviced from the thread pool.
      </para>
      </summary>
      <param name="callBack">A <see cref="T:System.Threading.WaitCallback" /> representing the delegate to invoke when a thread in the thread pool picks up the work item. </param>
      <param name="state">The object that is passed to the delegate when serviced from the thread pool. </param>
      <returns>
        <para>
          <see langword="true " />if the method succeeds;
   otherwise, <see langword="false" /> .
   </para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary>
        <para> Queues a user work item to the thread pool and invokes the specified delegate.
      </para>
      </summary>
      <param name="callBack">A <see langword="WaitCallback" /> representing the delegate to invoke when the thread in the thread pool picks up the work item. </param>
      <returns>
        <para>
          <see langword="true " />if the method succeeds;
   otherwise, <see langword="false" /> .
   </para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>
        <para> 
      Queues a user work item to the thread pool.</para>
      </summary>
      <param name="callBack">A <see langword="WaitCallback" /> representing the delegate to invoke when a thread in the thread pool picks up the work item. </param>
      <param name="state">The object that is passed to the delegate when serviced from the thread pool. </param>
      <returns>
        <para>
          <see langword="true " />if the method succeeds; otherwise, <see langword="false" /> . </para>
      </returns>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
      <summary>
        <para> Binds an operating system handle to the
   <see langword="ThreadPool" /> .
      </para>
      </summary>
      <param name="osHandle">An <see cref="T:System.IntPtr" /> that holds the handle. The handle must have been opened for overlapped I/O on the unmanaged side.</param>
      <returns>
        <para>
          <see langword="true" /> to bind the handle; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="T:System.Threading.ThreadPriority">
      <summary>
        <para> Specifies the scheduling priority of a <see cref="T:System.Threading.Thread" />.
   </para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Lowest">
      <summary>
        <para>The <see cref="T:System.Threading.Thread" /> can be 
   scheduled after threads with any other priority.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.BelowNormal">
      <summary>
        <para>The <see cref="T:System.Threading.Thread" /> can be 
   scheduled after threads with <see langword="Normal" /> priority and before those
   with <see langword="Lowest" /> priority.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Normal">
      <summary>
        <para>The <see cref="T:System.Threading.Thread" /> can be
   scheduled after threads with <see langword="AboveNormal" /> priority and before
   those with <see langword="BelowNormal" />
   priority. Threads have <see langword="Normal" /> priority by
   default.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.AboveNormal">
      <summary>
        <para>The <see cref="T:System.Threading.Thread" /> can be 
   scheduled after threads with <see langword="Highest " />priority and before those
   with <see langword="Normal" /> priority.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Highest">
      <summary>
        <para>The <see cref="T:System.Threading.Thread" /> can be 
   scheduled before threads with any other priority.</para>
      </summary>
    </member>
    <member name="T:System.Threading.ThreadStart">
      <summary>
        <para> Represents the method that will handle the
   <see langword="Start" /> event of the <see cref="T:System.Threading.Thread" />
   class.</para>
      </summary>
    </member>
    <member name="T:System.Threading.ThreadState">
      <summary>
        <para>Specifies the execution states of a <see cref="T:System.Threading.Thread" />.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.Running">
      <summary>
        <para>The thread has been started, it is not blocked, and there
      is no pending <see cref="T:System.Threading.ThreadAbortException" /> .</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.StopRequested">
      <summary>
        <para>The thread is being
      requested to stop. This is for internal use only.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.SuspendRequested">
      <summary>
        <para>The thread is being
      requested to suspend.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.Background">
      <summary>
        <para>The thread is
      being executed as a background thread, as opposed to a foreground thread. This
      state is controlled by setting the <see cref="P:System.Threading.Thread.IsBackground" qualify="true" />
      property.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.Unstarted">
      <summary>
        <para>The <see cref="M:System.Threading.Thread.Start" qualify="true" /> method has not been invoked on the thread.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.Stopped">
      <summary>
        <para>The thread has
      stopped.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.WaitSleepJoin">
      <summary>
        <para>The thread is blocked as a result
      of a call to <see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />, <see cref="M:System.Threading.Thread.Sleep(System.Int32)" />, or <see cref="M:System.Threading.Thread.Join" />.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.Suspended">
      <summary>
        <para>The thread has
      been suspended.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.AbortRequested">
      <summary>
        <para>The <see cref="M:System.Threading.Thread.Abort(System.Object)" qualify="true" /> method has been invoked on 
   the thread, but the thread has not yet received the pending <see cref="T:System.Threading.ThreadAbortException" qualify="true" /> that will attempt
   to terminate it.</para>
      </summary>
    </member>
    <member name="F:System.Threading.ThreadState.Aborted">
      <summary>
        <para> The thread is in the <see langword="Stopped" /> state.</para>
      </summary>
    </member>
    <member name="T:System.Threading.ThreadStateException">
      <summary>
        <para> The exception that is thrown when a <see cref="T:System.Threading.Thread" /> is in an invalid <see cref="P:System.Threading.Thread.ThreadState" />
for the method call.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException" /> class
   with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException" /> class with
   a specified error message.</para>
      </summary>
      <param name="message"> The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Threading.ThreadStateException" /> class with serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.ThreadStaticAttribute">
      <summary>
        <para> Indicates that the value of a static field is unique for each
      thread.</para>
      </summary>
    </member>
    <member name="M:System.ThreadStaticAttribute.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.ThreadStaticAttribute" /> 
class.
</para>
      </summary>
    </member>
    <member name="T:System.Threading.Timeout">
      <summary>
        <para> Contains a constant used to specify an infinite amount of time. This class cannot be inherited.
      </para>
      </summary>
    </member>
    <member name="F:System.Threading.Timeout.Infinite">
      <summary>
        <para> A constant used to specify an infinite waiting period. This field is constant.
 </para>
      </summary>
    </member>
    <member name="T:System.Threading.TimerCallback">
      <summary>
        <para> Represents the method that will handle the state of a
 <see cref="T:System.Threading.Timer" /> .
 </para>
      </summary>
      <param name="state">The source of the event. This is an object containing application-specific information relevant to the methods invoked by this delegate, or <see langword="null" /> . </param>
    </member>
    <member name="T:System.Threading.Timer">
      <summary>
        <para> Provides a mechanism for executing methods at specified intervals. This class cannot be inherited.
 </para>
      </summary>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see langword="Timer " />class, using 32-bit signed integers to measure time intervals.</para>
      </summary>
      <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegate.</param>
      <param name="state">An object containing application-specific information relevant to the methods invoked by the <paramref name="callback" /> parameter, or <see langword="null" />.</param>
      <param name="dueTime">The amount of time to delay before <paramref name="callback" /> invokes its methods, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
      <param name="period">The time interval between invocations of the methods referenced by <paramref name="callback" />, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</param>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Initializes a new instance of the <see langword="Timer " />class, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</para>
      </summary>
      <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegate.</param>
      <param name="state">An object containing application-specific information relevant to the methods invoked by the <paramref name="callback" /> parameter, or <see langword="null" />.</param>
      <param name="dueTime">The <see cref="T:System.TimeSpan" /> representing the amount of time to delay before the <paramref name="callback" /> parameter invokes its methods, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
      <param name="period">The time interval between invocations of the methods referenced by <paramref name="callback" />, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</param>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
      <summary>
        <para> Initializes a new instance of the <see langword="Timer " />class, using 32-bit unsigned integers to measure time intervals.
 </para>
      </summary>
      <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegate.</param>
      <param name="state">An object containing application-specific information relevant to the methods invoked by <paramref name="callback" />, or <see langword="null" />.</param>
      <param name="dueTime">The amount of time to delay before <paramref name="callback" /> invokes its methods, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
      <param name="period">The time interval between invocations of the methods referenced by <paramref name="callback" />, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</param>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
      <summary>
        <para>Initializes a new instance of the <see langword="Timer " />class, using 64-bit signed integers to measure time intervals.</para>
      </summary>
      <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegate.</param>
      <param name="state">An object containing application-specific information relevant to the methods invoked by <paramref name="callback" />, or <see langword="null" />.</param>
      <param name="dueTime">The amount of time to delay before <paramref name="callback" /> invokes its methods, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
      <param name="period">The time interval between invocations of the methods referenced by <paramref name="callback" />, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</param>
    </member>
    <member name="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
      <summary>
        <para>Changes the start time and the interval between method 
 invocations for a timer, using 32-bit signed
 integers to measure
 time intervals.
 </para>
      </summary>
      <param name="dueTime">The amount of time to delay before the delegate specified at <see cref="T:System.Threading.Timer" /> construction time invokes its methods, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
      <param name="period">The time interval between invocations of the methods referenced by the delegate specified at <see cref="T:System.Threading.Timer" /> construction time, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</param>
      <returns>
        <para>
          <see langword="true " />if the
 current instance has not been disposed; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
      <summary>
        <para>Changes the start time and the
 interval between method invocations for a timer, using <see cref="T:System.TimeSpan" /> values to
 measure time intervals.
 </para>
      </summary>
      <param name="dueTime">The <see cref="T:System.TimeSpan" /> representing the amount of time to delay before the <paramref name="callback" /> parameter invokes its methods, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
      <param name="period">The time interval between invocations of the methods referenced by the delegate specified at <see cref="T:System.Threading.Timer" /> construction time, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</param>
      <returns>
        <para>
          <see langword="true " />if the current instance has not been disposed; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
      <summary>
        <para>Changes the start time and the interval between method 
 invocations for a timer, using 32-bit unsigned integers to measure
 time intervals.
 </para>
      </summary>
      <param name="dueTime">The amount of time to delay before the delegate specified at <see cref="T:System.Threading.Timer" /> construction time invokes its methods, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
      <param name="period">The time interval between invocations of the methods referenced by the delegate specified at <see cref="T:System.Threading.Timer" /> construction time, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</param>
      <returns>
        <para>
          <see langword="true " />if the current instance has not been disposed; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
      <summary>
        <para>Changes the start time and the interval between method 
 invocations for a timer, using 64-bit signed integers to measure
 time intervals.
 </para>
      </summary>
      <param name="dueTime">The amount of time to delay before the delegate specified at <see cref="T:System.Threading.Timer" /> construction time invokes its methods, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
      <param name="period">The time interval between invocations of the methods referenced by the delegate specified at <see cref="T:System.Threading.Timer" /> construction time, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</param>
      <returns>
        <para>
          <see langword="true " />if the current instance has not been disposed; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)">
      <summary>
        <para> Releases all resources used by the current instance
 of <see cref="T:System.Threading.Timer" /> and signals when the timer has been disposed of.
 </para>
      </summary>
      <param name="notifyObject">The <see cref="T:System.Threading.WaitHandle" /> to be signaled when the <see langword="Timer" /> has been disposed of. </param>
      <returns>
        <para>
          <see langword="true " />if the function succeeds;
 otherwise, <see langword="false" />
 .
 </para>
      </returns>
    </member>
    <member name="M:System.Threading.Timer.Dispose">
      <summary>
        <para>Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</para>
      </summary>
    </member>
    <member name="M:System.Threading.Timer.Finalize">
      <summary>
        <para>Releases
      the resources held by the current instance.
      </para>
      </summary>
    </member>
    <member name="T:System.Collections.ArrayList">
      <summary>
        <para>Implements the <see cref="T:System.Collections.IList" />
interface using an array whose size is dynamically increased as required.</para>
      </summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.ArrayList" /> 
 class that is empty and has the default initial capacity.</para>
      </summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.ArrayList" /> 
 class that is empty and has the specified initial capacity.</para>
      </summary>
      <param name="capacity">The number of elements that the new list is initially capable of storing.</param>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.ArrayList" /> class that contains elements copied from the specified 
    collection and that has the same initial capacity as the number of elements copied.</para>
      </summary>
      <param name="c">The <see cref="T:System.Collections.ICollection" /> whose elements are copied to the new list.</param>
    </member>
    <member name="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
      <summary>
        <para>Creates an <see cref="T:System.Collections.ArrayList" />
wrapper for a specific <see cref="T:System.Collections.IList" />.
</para>
      </summary>
      <param name="list">
   The <see cref="T:System.Collections.IList" /> to wrap.
   </param>
      <returns>
        <para>The <see cref="T:System.Collections.ArrayList" />
wrapper around the <see cref="T:System.Collections.IList" />.
</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.Add(System.Object)">
      <summary>
        <para>Adds an object to the end of the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to be added to the end of the <see cref="T:System.Collections.ArrayList" />.</param>
      <returns>
        <para>The <see cref="T:System.Collections.ArrayList" /> index at which the <paramref name="value" /> has
   been added.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
      <summary>
        <para>Adds the elements of an <see cref="T:System.Collections.ICollection" />
 to the end of the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="c">The <see cref="T:System.Collections.ICollection" /> whose elements should be added to the end of the <see cref="T:System.Collections.ArrayList" />.</param>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>
        <para>Searches a section of the sorted <see cref="T:System.Collections.ArrayList" /> for
   an element using the specified comparer and returns the zero-based index of the
   element.</para>
      </summary>
      <param name="index">The zero-based starting index of the range to search.</param>
      <param name="count">The length of the range to search.</param>
      <param name="value">The <see cref="T:System.Object" /> to locate.</param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</para>
        <para> -or-</para>
        <para>
          <see langword="null" /> to use the default comparer that is the <see cref="T:System.IComparable" /> implementation of each element.</para>
      </param>
      <returns>
        <para>The zero-based
      index of the value in the sorted <see cref="T:System.Collections.ArrayList" />,
      if value is found; otherwise, a negative number, which is the bitwise complement
      of the index of the next element.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object)">
      <summary>
        <para>Searches the entire sorted <see cref="T:System.Collections.ArrayList" /> for an element using the default comparer and
   returns the zero-based index of the element.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate.</param>
      <returns>
        <para>The zero-based index of the value in the sorted <see cref="T:System.Collections.ArrayList" />, if value is found;
   otherwise, a negative number, which is the bitwise complement of the index of
   the next element.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
      <summary>
        <para>Searches the entire sorted <see cref="T:System.Collections.ArrayList" /> for an element using the specified comparer
   and returns the zero-based index of the element.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate.</param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the default comparer that is the <see cref="T:System.IComparable" /> implementation of each element.</para>
      </param>
      <returns>
        <para>The zero-based index of the value in the sorted <see cref="T:System.Collections.ArrayList" />, if value is found;
   otherwise, a negative number, which is the bitwise complement of the index of
   the next element.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.Clear">
      <summary>
        <para>Removes all elements from the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.ArrayList.Clone">
      <summary>
        <para>Creates a shallow copy of the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <returns>
        <para>A shallow copy of the <see cref="T:System.Collections.ArrayList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.Contains(System.Object)">
      <summary>
        <para>Determines whether an element is in the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="item">
        <para>The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.ArrayList" />.The element to locate can be <see langword="null" />.</para>
      </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.ArrayList" />;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array)">
      <summary>
        <para>Copies the entire <see cref="T:System.Collections.ArrayList" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the beginning of the target array.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ArrayList" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the entire <see cref="T:System.Collections.ArrayList" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ArrayList" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>
        <para>Copies a range of elements from the <see cref="T:System.Collections.ArrayList" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</para>
      </summary>
      <param name="index">The zero-based index in the source <see cref="T:System.Collections.ArrayList" /> at which copying begins.</param>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ArrayList" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins. </param>
      <param name="count">The number of elements to copy.</param>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
      <summary>
        <para>Returns an <see cref="T:System.Collections.IList" /> wrapper with a fixed size.
    </para>
      </summary>
      <param name="list">
    The <see cref="T:System.Collections.IList" /> to wrap.
 </param>
      <returns>
        <para>An <see cref="T:System.Collections.IList" /> wrapper with a fixed size.
    </para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
      <summary>
        <para>Returns an <see cref="T:System.Collections.ArrayList" /> wrapper with a fixed size.</para>
      </summary>
      <param name="list">The <see cref="T:System.Collections.ArrayList" /> to wrap.</param>
      <returns>
        <para>An <see cref="T:System.Collections.ArrayList" /> wrapper with a fixed size.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator">
      <summary>
        <para>Returns an enumerator for the entire
    <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" />
 for the entire <see cref="T:System.Collections.ArrayList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
      <summary>
        <para>Returns an enumerator for a section of the
    <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="index">The zero-based starting index of the <see cref="T:System.Collections.ArrayList" /> section that the enumerator should refer to.</param>
      <param name="count">The number of elements in the <see cref="T:System.Collections.ArrayList" /> section that the enumerator should refer to.</param>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" />
 for the specified section of the <see cref="T:System.Collections.ArrayList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object)">
      <summary>
        <para>Searches for the specified <see cref="T:System.Object" /> and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.ArrayList" />.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" /> within the entire <see cref="T:System.Collections.ArrayList" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
      <summary>
        <para>Searches for the specified <see cref="T:System.Object" /> and returns the zero-based index of the first occurrence within the section of the <see cref="T:System.Collections.ArrayList" /> that extends from the specified index to the last element.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.ArrayList" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" /> within the section of the <see cref="T:System.Collections.ArrayList" /> that extends from <paramref name="startIndex" /> to the last element, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
      <summary>
        <para>Searches for the specified <see cref="T:System.Object" /> and returns the zero-based index of the first occurrence within the section of the <see cref="T:System.Collections.ArrayList" /> that starts at the specified index and contains the specified number of elements.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.ArrayList" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" /> within the section of the <see cref="T:System.Collections.ArrayList" /> that starts at <paramref name="startIndex" /> and contains <paramref name="count" /> number of elements, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
      <summary>
        <para>Inserts an element into the <see cref="T:System.Collections.ArrayList" />
at the specified index.</para>
      </summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">
        <para>The <see cref="T:System.Object" /> to insert.</para>
      </param>
    </member>
    <member name="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
      <summary>
        <para>Inserts the elements of a collection into
       the <see cref="T:System.Collections.ArrayList" /> at the specified index.</para>
      </summary>
      <param name="index">The zero-based index at which the new elements should be inserted.</param>
      <param name="c">The <see cref="T:System.Collections.ICollection" /> whose elements should be inserted into the <see cref="T:System.Collections.ArrayList" />.</param>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
      <summary>
        <para> Searches for the specified <see cref="T:System.Object" /> and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.ArrayList" />.</param>
      <returns>
        <para>The zero-based index of the last occurrence of <paramref name="value" /> within the entire the <see cref="T:System.Collections.ArrayList" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
      <summary>
        <para> Searches for the specified <see cref="T:System.Object" /> and returns the zero-based index of the last occurrence within the section of the <see cref="T:System.Collections.ArrayList" /> that extends from the first element to the specified index.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.ArrayList" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <returns>
        <para>The zero-based index of the last occurrence of <paramref name="value" /> within the section of the <see cref="T:System.Collections.ArrayList" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
      <summary>
        <para> Searches for the specified <see cref="T:System.Object" /> and returns the zero-based index of the last occurrence within the section of the <see cref="T:System.Collections.ArrayList" /> that contains the specified number of elements and ends at the specified index.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.ArrayList" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>
        <para>The zero-based index of the last occurrence of <paramref name="value" /> within the section of the <see cref="T:System.Collections.ArrayList" /> that contains <paramref name="count" /> number of elements and ends at <paramref name="startIndex" />, if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
      <summary>
        <para>Returns a read-only <see cref="T:System.Collections.IList" /> wrapper.</para>
      </summary>
      <param name="list">The <see cref="T:System.Collections.IList" /> to wrap.</param>
      <returns>
        <para>A read-only <see cref="T:System.Collections.IList" />
 wrapper around <paramref name="list" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
      <summary>
        <para>Returns a read-only <see cref="T:System.Collections.ArrayList" /> wrapper.</para>
      </summary>
      <param name="list">The <see cref="T:System.Collections.ArrayList" /> to wrap.</param>
      <returns>
        <para>A read-only <see cref="T:System.Collections.ArrayList" />
 wrapper around <paramref name="list" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.Remove(System.Object)">
      <summary>
        <para>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="obj">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.ArrayList" />.</param>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
      <summary>
        <para>Removes the element at the specified index
      of the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
      <summary>
        <para>Removes a range of elements from the
   <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="index">The zero-based starting index of the range of elements to remove.</param>
      <param name="count">The number of elements to remove.</param>
    </member>
    <member name="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
      <summary>
        <para>Returns an <see cref="T:System.Collections.ArrayList" />
 whose elements are copies of the specified value.</para>
      </summary>
      <param name="value">
        <para>The <see cref="T:System.Object" /> to copy multiple times in the new <see cref="T:System.Collections.ArrayList" />. The value to copy can be <see langword="null" />.</para>
      </param>
      <param name="count">The number of times <paramref name="value" /> should be copied.</param>
      <returns>
        <para>An <see cref="T:System.Collections.ArrayList" />
 with <paramref name="count" /> number of elements, all of which are copies of
 <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse">
      <summary>
        <para>Reverses the order of the elements in the
       entire <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
      <summary>
        <para>Reverses the order of the elements in the
       specified range.</para>
      </summary>
      <param name="index">The zero-based starting index of the range to reverse.</param>
      <param name="count">The number of elements in the range to reverse.</param>
    </member>
    <member name="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
      <summary>
        <para>Copies the elements of a collection over a
       range of elements in the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="index">The zero-based <see cref="T:System.Collections.ArrayList" /> index at which to start copying the elements of <paramref name="c" />.</param>
      <param name="c">The <see cref="T:System.Collections.ICollection" /> whose elements to copy to the <see cref="T:System.Collections.ArrayList" />.</param>
    </member>
    <member name="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
      <summary>
        <para>Returns an <see cref="T:System.Collections.ArrayList" /> which represents a subset of the elements in the source <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
      <param name="index">The zero-based <see cref="T:System.Collections.ArrayList" /> index at which the range starts.</param>
      <param name="count">The number of elements in the range.</param>
      <returns>
        <para> An <see cref="T:System.Collections.ArrayList" /> which
   represents a subset of the elements in the source <see cref="T:System.Collections.ArrayList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.Sort">
      <summary>
        <para>Sorts the elements in the
       entire <see cref="T:System.Collections.ArrayList" /> using the <see cref="T:System.IComparable" /> implementation of each element.</para>
      </summary>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
      <summary>
        <para>Sorts the elements in the
       entire <see cref="T:System.Collections.ArrayList" /> using the specified comparer.</para>
      </summary>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</para>
      </param>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>
        <para>Sorts the elements in a section
       of <see cref="T:System.Collections.ArrayList" /> using the specified comparer.</para>
      </summary>
      <param name="index">The zero-based starting index of the range to sort.</param>
      <param name="count">The length of the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements. <para>-or-</para><para><see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each element.</para></param>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
      <summary>
        <para>Returns an <see cref="T:System.Collections.IList" />
wrapper that is synchronized (thread-safe).</para>
      </summary>
      <param name="list">The <see cref="T:System.Collections.IList" /> to synchronize.</param>
      <returns>
        <para>An <see cref="T:System.Collections.IList" /> wrapper that is
 synchronized (thread-safe).</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
      <summary>
        <para>Returns an <see cref="T:System.Collections.ArrayList" />
wrapper that is synchronized (thread-safe).</para>
      </summary>
      <param name="list">The <see cref="T:System.Collections.ArrayList" /> to synchronize.</param>
      <returns>
        <para>An <see cref="T:System.Collections.ArrayList" /> wrapper that is
 synchronized (thread-safe).</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray">
      <summary>
        <para>Copies the elements of the <see cref="T:System.Collections.ArrayList" />
 to a new <see cref="T:System.Object" /> array.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Object" /> array containing copies of the
    elements of the <see cref="T:System.Collections.ArrayList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray(System.Type)">
      <summary>
        <para>Copies the elements of the <see cref="T:System.Collections.ArrayList" />
 to a new array of the specified type.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of array to create and copy elements to.</param>
      <returns>
        <para>An array of the specified type
       containing copies of the elements of the <see cref="T:System.Collections.ArrayList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.ArrayList.TrimToSize">
      <summary>
        <para>Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.ArrayList.Capacity">
      <summary>
        <para>Gets or sets the number of elements that
       the <see cref="T:System.Collections.ArrayList" /> can contain.</para>
      </summary>
    </member>
    <member name="P:System.Collections.ArrayList.Count">
      <summary>
        <para>Gets the number of elements actually contained in 
       the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.ArrayList.IsFixedSize">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.ArrayList" /> has a fixed size.</para>
      </summary>
    </member>
    <member name="P:System.Collections.ArrayList.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether
       the <see cref="T:System.Collections.ArrayList" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.ArrayList.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to
 the <see cref="T:System.Collections.ArrayList" /> is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Collections.ArrayList.SyncRoot">
      <summary>
        <para>Gets an object that can be used to
 synchronize access to the <see cref="T:System.Collections.ArrayList" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.ArrayList.Item(System.Int32)">
      <summary>
        <para>Gets or sets the element at the specified index.</para>
      </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="T:System.Collections.BitArray">
      <summary>
        <para>Manages a compact array of bit values,
      which are represented as Booleans, where <see langword="true" /> indicates that
      the bit is on (1) and <see langword="false" /> indicates the bit is off (0).</para>
      </summary>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> 
   class that can hold the specified number of bit values, which are initially set to <see langword="false" />.</para>
      </summary>
      <param name="length">The number of bit values in the new <see cref="T:System.Collections.BitArray" />.</param>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> 
   class that can hold the specified number of bit values, which are initially set to the specified value.</para>
      </summary>
      <param name="length">The number of bit values in the new <see cref="T:System.Collections.BitArray" />.</param>
      <param name="defaultValue">The Boolean value to assign to each bit.</param>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from 
   the specified array of bytes.</para>
      </summary>
      <param name="bytes">An array of bytes containing the values to copy, where each byte represents eight consecutive bits.</param>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Boolean[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from 
    the specified array of Booleans.</para>
      </summary>
      <param name="values">An array of Booleans to copy.</param>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from 
    the specified array of 32-bit integers.</para>
      </summary>
      <param name="values">An array of integers containing the values to copy, where each integer represents 32 consecutive bits.</param>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> 
   class that contains bit values copied from the specified <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
      <param name="bits">The <see cref="T:System.Collections.BitArray" /> to copy.</param>
    </member>
    <member name="M:System.Collections.BitArray.Get(System.Int32)">
      <summary>
        <para>Gets the value of the bit at a specific position in the <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
      <param name="index">The zero-based index of the value to get.</param>
      <returns>
        <para>The value of the bit at position <paramref name="index" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
      <summary>
        <para> Sets the bit at a specific position in the <see cref="T:System.Collections.BitArray" /> to the specified value.</para>
      </summary>
      <param name="index">The zero-based index of the bit to set.</param>
      <param name="value">The Boolean value to assign to the bit.</param>
    </member>
    <member name="M:System.Collections.BitArray.SetAll(System.Boolean)">
      <summary>
        <para> Sets all bits in the <see cref="T:System.Collections.BitArray" /> to the specified value.</para>
      </summary>
      <param name="value">The Boolean value to assign to all bits.</param>
    </member>
    <member name="M:System.Collections.BitArray.And(System.Collections.BitArray)">
      <summary>
        <para>Performs the bitwise AND operation on the elements in the
       current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the
       specified <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Collections.BitArray" /> with which to perform the bitwise AND operation.</param>
      <returns>
        <para>A <see cref="T:System.Collections.BitArray" /> containing the result of the bitwise AND
    operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding
    elements in the specified <see cref="T:System.Collections.BitArray" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
      <summary>
        <para>Performs the bitwise OR operation on the elements in the
       current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the
       specified <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Collections.BitArray" /> with which to perform the bitwise OR operation.</param>
      <returns>
        <para>A <see cref="T:System.Collections.BitArray" /> containing the result of the bitwise OR
    operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding
    elements in the specified <see cref="T:System.Collections.BitArray" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
      <summary>
        <para>Performs the bitwise eXclusive OR operation on the
       elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the
       specified <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
      <param name="value">The <see cref="T:System.Collections.BitArray" /> with which to perform the bitwise eXclusive OR operation.</param>
      <returns>
        <para>A <see cref="T:System.Collections.BitArray" /> containing the result of the bitwise
    eXclusive OR operation on the elements in the current <see cref="T:System.Collections.BitArray" />
    against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.BitArray.Not">
      <summary>
        <para>Inverts all the bit values in the current <see cref="T:System.Collections.BitArray" />,
    so that elements set to <see langword="true" /> are changed to <see langword="false" />,
    and elements set to <see langword="false" /> are changed to <see langword="true" />.</para>
      </summary>
      <returns>
        <para>The current instance with inverted bit values.</para>
      </returns>
    </member>
    <member name="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the entire <see cref="T:System.Collections.BitArray" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the
   specified index of the target array.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.BitArray" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="M:System.Collections.BitArray.Clone">
      <summary>
        <para>Creates a shallow copy of the <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
      <returns>
        <para>A shallow copy of the <see cref="T:System.Collections.BitArray" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.BitArray.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through the <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> for the entire <see cref="T:System.Collections.BitArray" />.</para>
      </returns>
    </member>
    <member name="P:System.Collections.BitArray.Item(System.Int32)">
      <summary>
        <para>Gets or sets the value of the bit at a specific position in the <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
      <param name="index">The zero-based index of the value to get or set.</param>
    </member>
    <member name="P:System.Collections.BitArray.Length">
      <summary>
        <para> Gets or sets the number of elements in the <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.BitArray.Count">
      <summary>
        <para>Gets the number of elements contained in the <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.BitArray.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.BitArray" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.BitArray.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.BitArray" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.BitArray.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Collections.BitArray" /> is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="T:System.Collections.CaseInsensitiveComparer">
      <summary>
        <para>Compares two objects for equivalence,
 ignoring the case of strings.</para>
      </summary>
    </member>
    <member name="T:System.Collections.IComparer">
      <summary>
        <para>Exposes a method that compares two objects.</para>
      </summary>
    </member>
    <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
      <summary>
        <para> Compares two objects and returns a value indicating whether one
 is less than, equal to or greater than the other.</para>
      </summary>
      <param name="x">First object to compare.</param>
      <param name="y">Second object to compare.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>
              <paramref name="x" /> is less than <paramref name="y" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <paramref name="x" /> equals <paramref name="y" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <paramref name="x" /> is greater than <paramref name="y" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Collections.CaseInsensitiveComparer.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.CaseInsensitiveComparer" /> class using
 the <see cref="P:System.Threading.Thread.CurrentCulture" qualify="true" /> of the current thread.</para>
      </summary>
    </member>
    <member name="M:System.Collections.CaseInsensitiveComparer.#ctor(System.Globalization.CultureInfo)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.CaseInsensitiveComparer" /> class using the specified <see cref="T:System.Globalization.CultureInfo" qualify="true" />.</para>
      </summary>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" qualify="true" /> to use for the new <see cref="T:System.Collections.CaseInsensitiveComparer" />.</param>
    </member>
    <member name="M:System.Collections.CaseInsensitiveComparer.Compare(System.Object,System.Object)">
      <summary>
        <para>Performs
 a case-insensitive comparison of two objects of
 the same type and returns a value indicating whether one
 is less than, equal to or greater than the other.</para>
      </summary>
      <param name="a">The first object to compare.</param>
      <param name="b">The second object to compare.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>
              <paramref name="a" /> is less than <paramref name="b" />, with casing ignored.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <paramref name="a" /> equals <paramref name="b" />, with casing ignored.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <paramref name="a" /> is greater than <paramref name="b" />, with casing ignored.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="P:System.Collections.CaseInsensitiveComparer.Default">
      <summary>
        <para>Gets an instance of <see cref="T:System.Collections.CaseInsensitiveComparer" />
that is always available.</para>
      </summary>
    </member>
    <member name="T:System.Collections.CaseInsensitiveHashCodeProvider">
      <summary>
        <para> Supplies a hash code for an object, using a
       hashing algorithm that ignores the case of strings.</para>
      </summary>
    </member>
    <member name="T:System.Collections.IHashCodeProvider">
      <summary>
        <para>Supplies a hash code for an object, using a custom hash function.</para>
      </summary>
    </member>
    <member name="M:System.Collections.IHashCodeProvider.GetHashCode(System.Object)">
      <summary>
        <para>Returns a hash code for the specified object.</para>
      </summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>
        <para>A hash code for the specified object.</para>
      </returns>
    </member>
    <member name="M:System.Collections.CaseInsensitiveHashCodeProvider.#ctor">
      <summary>
        <para>Initializes a new instance of the 
    <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" /> class using the current <see cref="T:System.Globalization.CultureInfo" qualify="true" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.CaseInsensitiveHashCodeProvider.#ctor(System.Globalization.CultureInfo)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" /> class using the current <see cref="T:System.Globalization.CultureInfo" qualify="true" />.</para>
      </summary>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" qualify="true" /> to use for the new <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />.</param>
    </member>
    <member name="M:System.Collections.CaseInsensitiveHashCodeProvider.GetHashCode(System.Object)">
      <summary>
        <para>Returns a hash code for the
       given object, using a hashing algorithm that ignores the case of strings.</para>
      </summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>
        <para>A hash code for the
       given object, using a hashing algorithm that ignores the case of strings.</para>
      </returns>
    </member>
    <member name="P:System.Collections.CaseInsensitiveHashCodeProvider.Default">
      <summary>
        <para> Gets an instance of <see cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />
that is always available.</para>
      </summary>
    </member>
    <member name="T:System.Collections.CollectionBase">
      <summary>
        <para>Provides the <see langword="abstract" /> base class for a strongly typed collection.</para>
      </summary>
    </member>
    <member name="M:System.Collections.CollectionBase.Clear">
      <summary>
        <para>Removes all objects from the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
    </member>
    <member name="M:System.Collections.CollectionBase.RemoveAt(System.Int32)">
      <summary>
        <para>Removes the element at the specified index of the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:System.Collections.CollectionBase.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </returns>
    </member>
    <member name="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
        <para> Performs additional custom processes before setting a value in the
   <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
      <param name="index">The zero-based index at which <paramref name="oldValue" /> can be found.</param>
      <param name="oldValue">The value to replace with <paramref name="newValue" />.</param>
      <param name="newValue">The new value of the element at <paramref name="index" />.</param>
    </member>
    <member name="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)">
      <summary>
        <para> Performs additional custom processes before inserting a new element into the
   <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
      <param name="index">The zero-based index at which to insert <paramref name="value" />.</param>
      <param name="value">The new value of the element at <paramref name="index" />.</param>
    </member>
    <member name="M:System.Collections.CollectionBase.OnClear">
      <summary>
        <para>Performs additional custom processes
      when clearing the contents of the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
    </member>
    <member name="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)">
      <summary>
        <para>Performs additional custom processes when removing an element from the
   <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
      <param name="index">The zero-based index at which <paramref name="value" /> can be found.</param>
      <param name="value">The value of the element to remove from <paramref name="index" />.</param>
    </member>
    <member name="M:System.Collections.CollectionBase.OnValidate(System.Object)">
      <summary>
        <para>Performs additional custom processes when validating a value.</para>
      </summary>
      <param name="value">The object to validate.</param>
    </member>
    <member name="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>
        <para> Performs additional custom processes after setting a value in the
   <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
      <param name="index">The zero-based index at which <paramref name="oldValue" /> can be found.</param>
      <param name="oldValue">The value to replace with <paramref name="newValue" />.</param>
      <param name="newValue">The new value of the element at <paramref name="index" />.</param>
    </member>
    <member name="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)">
      <summary>
        <para>Performs additional custom processes after inserting a
      new element into the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
      <param name=" index">The zero-based index at which to insert <paramref name="value" />.</param>
      <param name=" value">The new value of the element at <paramref name="index" />.</param>
    </member>
    <member name="M:System.Collections.CollectionBase.OnClearComplete">
      <summary>
        <para>Performs additional custom processes after clearing the
      contents of the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
    </member>
    <member name="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)">
      <summary>
        <para>Performs additional custom processes after removing an
      element from the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
      <param name="index">The zero-based index at which <paramref name="value" /> can be found.</param>
      <param name="value">The value of the element to remove from <paramref name="index" />.</param>
    </member>
    <member name="P:System.Collections.CollectionBase.InnerList">
      <summary>
        <para>Gets an <see cref="T:System.Collections.ArrayList" /> containing the list of elements in the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Collections.CollectionBase.List">
      <summary>
        <para>Gets an <see cref="T:System.Collections.IList" /> containing the list of elements in the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Collections.CollectionBase.Count">
      <summary>
        <para>Gets the number of elements contained in the <see cref="T:System.Collections.CollectionBase" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Collections.CollectionBase.System#Collections#IList#IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.CollectionBase" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.CollectionBase.System#Collections#IList#IsFixedSize">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.CollectionBase" /> has a fixed size.</para>
      </summary>
    </member>
    <member name="P:System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Collections.CollectionBase" /> is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.CollectionBase" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.CollectionBase.System#Collections#IList#$Item$(System.Int32)">
      <summary>
        <para>Gets or sets the element at the specified index.</para>
      </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="T:System.Collections.Comparer">
      <summary>
        <para>Compares two objects for equivalence, where string comparisons are case-sensitive.</para>
      </summary>
    </member>
    <member name="F:System.Collections.Comparer.Default">
      <summary>
        <para>Gets an instance of <see cref="T:System.Collections.Comparer" /> that is always available.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Comparer.Compare(System.Object,System.Object)">
      <summary>
        <para>Performs a case-sensitive comparison of two objects of
 the same type and returns a value indicating whether one
 is less than, equal to or greater than the other.</para>
      </summary>
      <param name="a">The first object to compare.</param>
      <param name="b">The second object to compare.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> Less than zero</term>
            <description>
              <paramref name="a" /> is less than <paramref name="b" />.</description>
          </item>
          <item>
            <term> Zero</term>
            <description>
              <paramref name="a" /> equals <paramref name="b" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <paramref name="a" /> is greater than <paramref name="b" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="T:System.Collections.DictionaryBase">
      <summary>
        <para>Provides the <see langword="abstract" /> base class for a strongly typed collection of key-and-value pairs.</para>
      </summary>
    </member>
    <member name="T:System.Collections.IDictionary">
      <summary>
        <para>Represents a collection of key-and-value pairs.</para>
      </summary>
    </member>
    <member name="M:System.Collections.IDictionary.Contains(System.Object)">
      <summary>
        <para>When implemented by a class, determines whether the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key.</para>
      </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
      <summary>
        <para>When implemented by a class, adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" />.</para>
      </summary>
      <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add.</param>
      <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add.</param>
    </member>
    <member name="M:System.Collections.IDictionary.Clear">
      <summary>
        <para>When implemented by a class, removes all elements from the <see cref="T:System.Collections.IDictionary" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.IDictionary.GetEnumerator">
      <summary>
        <para>When implemented by a class, returns an
    <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.IDictionary.Remove(System.Object)">
      <summary>
        <para>When implemented by a class, removes the element with the
       specified key from the <see cref="T:System.Collections.IDictionary" />.</para>
      </summary>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="P:System.Collections.IDictionary.Item(System.Object)">
      <summary>
        <para>When implemented by a class, gets or sets the element with the specified key.</para>
      </summary>
      <param name="key">The key of the element to get or set.</param>
    </member>
    <member name="P:System.Collections.IDictionary.Keys">
      <summary>
        <para>When implemented by a class, gets an <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.IDictionary.Values">
      <summary>
        <para>When implemented by a class, gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.IDictionary.IsReadOnly">
      <summary>
        <para>When implemented by a class, gets a value indicating whether the <see cref="T:System.Collections.IDictionary" />
is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.IDictionary.IsFixedSize">
      <summary>
        <para>When implemented by a class, gets a value indicating whether the <see cref="T:System.Collections.IDictionary" />
has a fixed size.</para>
      </summary>
    </member>
    <member name="M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the <see cref="T:System.Collections.DictionaryBase" /> elements to a one-dimensional <see cref="T:System.Array" /> at the specified index.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from the <see cref="T:System.Collections.DictionaryBase" /> instance. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="M:System.Collections.DictionaryBase.Clear">
      <summary>
        <para>Clears the contents of the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
    </member>
    <member name="M:System.Collections.DictionaryBase.GetEnumerator">
      <summary>
        <para>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that can iterate through the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </returns>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)">
      <summary>
        <para>Gets the element with the specified key and value in the
   <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
      <param name="key">The key of the element to get.</param>
      <param name="currentValue">The current value of the element associated with <paramref name="key" />.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> containing the element with the specified key and
   value.</para>
      </returns>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)">
      <summary>
        <para>Performs additional custom processes before setting a value in the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
      <param name="key">The key of the element to locate.</param>
      <param name="oldValue">The old value of the element associated with <paramref name="key" />.</param>
      <param name="newValue">The new value of the element associated with <paramref name="key" />.</param>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)">
      <summary>
        <para>Performs additional custom processes before inserting a new element into the
   <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
      <param name="key">The key of the element to insert.</param>
      <param name="value">The value of the element to insert.</param>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnClear">
      <summary>
        <para>Performs additional custom processes before clearing the contents of the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)">
      <summary>
        <para> Performs additional custom processes before removing an element from the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
      <param name="key">The key of the element to remove.</param>
      <param name="value">The value of the element to remove.</param>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)">
      <summary>
        <para>Performs additional custom processes when validating the element with the specified key and value.</para>
      </summary>
      <param name="key">The key of the element to validate.</param>
      <param name="value">The value of the element to validate.</param>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)">
      <summary>
        <para>Performs additional custom processes after setting a value in the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
      <param name="key">The key of the element to locate.</param>
      <param name="oldValue">The old value of the element associated with <paramref name="key" />.</param>
      <param name="newValue">The new value of the element associated with <paramref name="key" />.</param>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)">
      <summary>
        <para>Performs additional custom processes after inserting a
      new element into the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
      <param name="key">The key of the element to insert.</param>
      <param name="value">The value of the element to insert.</param>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnClearComplete">
      <summary>
        <para>Performs additional custom processes after clearing the contents of the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
    </member>
    <member name="M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)">
      <summary>
        <para>Performs additional custom processes after removing an
      element from the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
      <param name="key">The key of the element to remove.</param>
      <param name="value">The value of the element to remove.</param>
    </member>
    <member name="P:System.Collections.DictionaryBase.InnerHashtable">
      <summary>
        <para>Gets the list of elements contained in the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryBase.Dictionary">
      <summary>
        <para>Gets the list of elements contained in the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryBase.Count">
      <summary>
        <para>Gets the number of elements contained in the 
    <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.DictionaryBase" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.DictionaryBase" /> has a fixed size.</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Collections.DictionaryBase" /> is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Keys">
      <summary>
        <para>Gets an <see cref="T:System.Collections.ICollection" /> containing the keys in the <see cref="T:System.Collections.DictionaryBase" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.DictionaryBase" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#IDictionary#Values">
      <summary>
        <para>Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.DictionaryBase" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryBase.System#Collections#IDictionary#$Item$(System.Object)">
      <summary>
        <para>Gets or sets the value associated with the specified key.</para>
      </summary>
      <param name=" key">The key whose value to get or set.</param>
    </member>
    <member name="T:System.Collections.DictionaryEntry">
      <summary>
        <para>Defines a dictionary key-and-value pair that can be set
      or retrieved.</para>
      </summary>
    </member>
    <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
      <summary>
        <para>Initializes an instance of the <see cref="T:System.Collections.DictionaryEntry" /> class with the specified key and 
    value.</para>
      </summary>
      <param name="key">The object defined in each key-and-value pair.</param>
      <param name="value">The definition associated with <paramref name="key" />.</param>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Key">
      <summary>
        <para> Gets or sets the key in the 
       key-and-value pair.</para>
      </summary>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Value">
      <summary>
        <para> Gets or sets the value in the key-and-value pair.</para>
      </summary>
    </member>
    <member name="T:System.Collections.Hashtable">
      <summary>
        <para>Represents a collection of key-and-value pairs that are
      organized based on the hash code of the key.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.IDeserializationCallback">
      <summary>
        <para> Indicates that a class is to be notified when deserialization of the
      entire object graph has been completed.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)">
      <summary>
        <para>Runs when the entire object graph has been deserialized.</para>
      </summary>
      <param name="sender">The object that initiated the callback. The functionality for the this parameter is not currently implemented.</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor">
      <summary>
        <para> Creates an empty <see cref="T:System.Collections.Hashtable" /> 
 with the default initial capacity and using
 the default load factor, the default hash code provider and the default comparer.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32)">
      <summary>
        <para> Creates an empty <see cref="T:System.Collections.Hashtable" /> 
 with the specified initial capacity and using the default load
 factor, the default hash code provider and the default comparer.</para>
      </summary>
      <param name="capacity">The approximate number of elements that the <see cref="T:System.Collections.Hashtable" /> can initially contain. </param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single)">
      <summary>
        <para>Creates an empty <see cref="T:System.Collections.Hashtable" /> 
 with the specified initial capacity and using the specified load
 factor, the default hash code provider and the default comparer.</para>
      </summary>
      <param name="capacity">The approximate number of elements that the <see cref="T:System.Collections.Hashtable" /> can initially contain. </param>
      <param name="loadFactor">A number in the range from 0.1 through 1.0 indicating the maximum ratio of elements to buckets.</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>
        <para> Creates an empty <see cref="T:System.Collections.Hashtable" /> 
 with the specified initial capacity and using the specified load
 factor, the specified hash code provider and the specified comparer.</para>
      </summary>
      <param name="capacity">The approximate number of elements that the <see cref="T:System.Collections.Hashtable" /> can initially contain. </param>
      <param name="loadFactor">A number in the range from 0.1 through 1.0 indicating the maximum ratio of elements to buckets.</param>
      <param name="hcp">
        <para>The <see cref="T:System.Collections.IHashCodeProvider" /> that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable" />.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the default hash code provider, which is each key's implementation of <see cref="M:System.Object.GetHashCode" qualify="true" />.</para>
      </param>
      <param name="comparer">
        <para> The <see cref="T:System.Collections.IComparer" /> to use to determine whether two keys are equal.</para>
        <para> -or-</para>
        <para>
          <see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" qualify="true" />.</para>
      </param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>
        <para>Creates an empty <see cref="T:System.Collections.Hashtable" /> with 
    the default initial capacity and using the default load factor, the
    specified hash code provider and the specified comparer.</para>
      </summary>
      <param name="hcp">
        <para>The <see cref="T:System.Collections.IHashCodeProvider" /> that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable" />.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the default hash code provider, which is each key's implementation of <see cref="M:System.Object.GetHashCode" qualify="true" />.</para>
      </param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> to use to determine whether two keys are equal.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" qualify="true" />.</para>
      </param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>
        <para>Creates an empty <see cref="T:System.Collections.Hashtable" /> with 
    the specified initial capacity and using the default load factor, the
    specified hash code provider and the specified comparer.</para>
      </summary>
      <param name="capacity">The approximate number of elements that the <see cref="T:System.Collections.Hashtable" /> can initially contain. </param>
      <param name="hcp">
        <para>The <see cref="T:System.Collections.IHashCodeProvider" /> that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable" />.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the default hash code provider, which is each key's implementation of <see cref="M:System.Object.GetHashCode" qualify="true" />.</para>
      </param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> to use to determine whether two keys are equal.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" qualify="true" />.</para>
      </param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary)">
      <summary>
        <para>Copies the elements from the specified dictionary to a 
       new <see cref="T:System.Collections.Hashtable" /> with the same
       initial capacity as the number of elements copied and using the default load factor, the
       default hash code provider and the default comparer.</para>
      </summary>
      <param name="d">The <see cref="T:System.Collections.IDictionary" /> to copy to a new <see cref="T:System.Collections.Hashtable" />.</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)">
      <summary>
        <para>Copies the elements from the specified dictionary to a new <see cref="T:System.Collections.Hashtable" /> 
 with the same initial capacity as
 the number of elements copied and using the specified load factor, the
 default hash code provider and the default comparer.</para>
      </summary>
      <param name="d">The <see cref="T:System.Collections.IDictionary" /> to copy to a new <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="loadFactor">A number in the range from 0.1 through 1.0 indicating the maximum ratio of elements to buckets.</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>
        <para>Copies the elements from the specified dictionary to a new <see cref="T:System.Collections.Hashtable" /> 
 with the same initial capacity as
 the number of elements copied and using the default load factor, the
 specified hash code provider and the specified comparer.</para>
      </summary>
      <param name="d">The <see cref="T:System.Collections.IDictionary" /> to copy to a new <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="hcp">
        <para>The <see cref="T:System.Collections.IHashCodeProvider" /> that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable" />.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the default hash code provider, which is each key's implementation of <see cref="M:System.Object.GetHashCode" qualify="true" />.</para>
      </param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> to use to determine whether two keys are equal.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" qualify="true" />.</para>
      </param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>
        <para>Copies the elements from the specified dictionary to a new <see cref="T:System.Collections.Hashtable" /> 
 with the same initial capacity as
 the number of elements copied and using the specified load factor, the
 specified hash code provider and the specified comparer.</para>
      </summary>
      <param name="d">The <see cref="T:System.Collections.IDictionary" /> to copy to a new <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="loadFactor">A number in the range from 0.1 through 1.0 indicating the maximum ratio of elements to buckets.</param>
      <param name="hcp">
        <para>The <see cref="T:System.Collections.IHashCodeProvider" /> that supplies the hash codes for all keys in the <see cref="T:System.Collections.Hashtable" />.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the default hash code provider, which is each key's implementation of <see cref="M:System.Object.GetHashCode" qualify="true" />.</para>
      </param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> to use to determine whether two keys are equal.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" qualify="true" />.</para>
      </param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Creates an empty <see cref="T:System.Collections.Hashtable" /> that is serializable with the specified 
 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />.</para>
      </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Hashtable" />.</param>
    </member>
    <member name="M:System.Collections.Hashtable.Add(System.Object,System.Object)">
      <summary>
        <para>Adds an element with the specified key and value into the <see cref="T:System.Collections.Hashtable" />.</para>
      </summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
    </member>
    <member name="M:System.Collections.Hashtable.Clear">
      <summary>
        <para>Removes all elements from the <see cref="T:System.Collections.Hashtable" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Hashtable.Clone">
      <summary>
        <para>Creates a shallow copy of the <see cref="T:System.Collections.Hashtable" />.</para>
      </summary>
      <returns>
        <para>A shallow copy of the <see cref="T:System.Collections.Hashtable" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Hashtable.Contains(System.Object)">
      <summary>
        <para>Determines whether the <see cref="T:System.Collections.Hashtable" /> contains a specific key.</para>
      </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Hashtable" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Collections.Hashtable" /> contains an element with the 
    specified key; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsKey(System.Object)">
      <summary>
        <para>Determines whether the <see cref="T:System.Collections.Hashtable" /> contains a specific key.</para>
      </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Hashtable" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Collections.Hashtable" /> contains an element with the 
    specified key; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsValue(System.Object)">
      <summary>
        <para>Determines whether the <see cref="T:System.Collections.Hashtable" /> contains a specific value.</para>
      </summary>
      <param name="value">The value to locate in the <see cref="T:System.Collections.Hashtable" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Collections.Hashtable" /> contains an element with 
    the specified <paramref name="value" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the <see cref="T:System.Collections.Hashtable" /> elements to a
    one-dimensional <see cref="T:System.Array" /> instance at the specified index.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from <see cref="T:System.Collections.Hashtable" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="M:System.Collections.Hashtable.GetEnumerator">
      <summary>
        <para> Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that can iterate through the <see cref="T:System.Collections.Hashtable" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.Hashtable" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Hashtable.GetHash(System.Object)">
      <summary>
        <para>Returns the hash code for the specified key.</para>
      </summary>
      <param name="key">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>
        <para>The hash code for <paramref name="key" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Hashtable.KeyEquals(System.Object,System.Object)">
      <summary>
        <para>Compares a specific <see cref="T:System.Object" /> with a specific key in the <see cref="T:System.Collections.Hashtable" />.</para>
      </summary>
      <param name="item">The <see cref="T:System.Object" /> to compare with <paramref name="key" />.</param>
      <param name="key">The key in the <see cref="T:System.Collections.Hashtable" /> to compare with <paramref name="item" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="item" /> and <paramref name="key" /> are equal; otherwise, 
 <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Collections.Hashtable.Remove(System.Object)">
      <summary>
        <para>Removes the element with the specified key from the <see cref="T:System.Collections.Hashtable" />.</para>
      </summary>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)">
      <summary>
        <para>Returns a synchronized (thread-safe) wrapper for the <see cref="T:System.Collections.Hashtable" />.</para>
      </summary>
      <param name="table">The <see cref="T:System.Collections.Hashtable" /> to synchronize.</param>
      <returns>
        <para>A synchronized (thread-safe) wrapper for the <see cref="T:System.Collections.Hashtable" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data
    needed to serialize the <see cref="T:System.Collections.Hashtable" />.</para>
      </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Hashtable" />.</param>
    </member>
    <member name="M:System.Collections.Hashtable.OnDeserialization(System.Object)">
      <summary>
        <para>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and raises the
    deserialization event when the deserialization is complete.</para>
      </summary>
      <param name="sender">The source of the deserialization event.</param>
    </member>
    <member name="P:System.Collections.Hashtable.hcp">
      <summary>
        <para>Gets or sets the object that can dispense hash codes.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Hashtable.comparer">
      <summary>
        <para>Gets or sets the comparer to use for the <see cref="T:System.Collections.Hashtable" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Hashtable.Item(System.Object)">
      <summary>
        <para>Gets or sets the value associated with the specified key.</para>
      </summary>
      <param name="key">The key whose value to get or set.</param>
    </member>
    <member name="P:System.Collections.Hashtable.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.Hashtable" />
 is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Hashtable.IsFixedSize">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.Hashtable" />
 has a fixed size.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Hashtable.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Collections.Hashtable" />
is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Collections.Hashtable.Keys">
      <summary>
        <para>Gets an <see cref="T:System.Collections.ICollection" /> containing the keys in the <see cref="T:System.Collections.Hashtable" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Hashtable.Values">
      <summary>
        <para>Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.Hashtable" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Hashtable.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Hashtable" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Hashtable.Count">
      <summary>
        <para>Gets the number of key-and-value pairs contained in the <see cref="T:System.Collections.Hashtable" />.</para>
      </summary>
    </member>
    <member name="T:System.Collections.IDictionaryEnumerator">
      <summary>
        <para>Enumerates the elements of a dictionary.</para>
      </summary>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Key">
      <summary>
        <para>When implemented by a class, gets the key of the current dictionary entry.</para>
      </summary>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Value">
      <summary>
        <para>When implemented by a class, gets the value of the current dictionary entry.</para>
      </summary>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Entry">
      <summary>
        <para>When implemented by a class, gets both the key and the value of the current dictionary entry.</para>
      </summary>
    </member>
    <member name="T:System.Collections.Queue">
      <summary>
        <para>Represents a first-in, first-out collection of objects.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Queue.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that is empty, has the 
    default initial capacity and uses the default growth factor.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Queue.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that is empty, has 
    the specified initial capacity and uses the default growth factor.</para>
      </summary>
      <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Queue" /> can contain.</param>
    </member>
    <member name="M:System.Collections.Queue.#ctor(System.Int32,System.Single)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that is empty, has the specified 
    initial capacity and uses the specified growth factor.</para>
      </summary>
      <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Queue" /> can contain.</param>
      <param name="growFactor">The factor by which the capacity of the <see cref="T:System.Collections.Queue" /> is expanded.</param>
    </member>
    <member name="M:System.Collections.Queue.#ctor(System.Collections.ICollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that contains elements copied from 
    the specified collection, has the same initial capacity as the number of elements copied and uses the default
    growth factor.</para>
      </summary>
      <param name="col">The <see cref="T:System.Collections.ICollection" /> to copy elements from.</param>
    </member>
    <member name="M:System.Collections.Queue.Clone">
      <summary>
        <para>Creates a shallow copy of the <see cref="T:System.Collections.Queue" />.</para>
      </summary>
      <returns>
        <para>A shallow copy of the <see cref="T:System.Collections.Queue" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Queue.Clear">
      <summary>
        <para>Removes all objects from the <see cref="T:System.Collections.Queue" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Queue.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the <see cref="T:System.Collections.Queue" /> elements to an existing
    one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Queue" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="M:System.Collections.Queue.Enqueue(System.Object)">
      <summary>
        <para>Adds an object to the end of the <see cref="T:System.Collections.Queue" />.</para>
      </summary>
      <param name="obj">The object to add to the <see cref="T:System.Collections.Queue" />.</param>
    </member>
    <member name="M:System.Collections.Queue.GetEnumerator">
      <summary>
        <para> Returns an enumerator that can iterate
       through the <see cref="T:System.Collections.Queue" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.Queue" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Queue.Dequeue">
      <summary>
        <para>Removes and returns the object at the beginning of the <see cref="T:System.Collections.Queue" />.</para>
      </summary>
      <returns>
        <para>The object that is removed from the beginning of the <see cref="T:System.Collections.Queue" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Queue.Peek">
      <summary>
        <para>Returns the object at the beginning of the <see cref="T:System.Collections.Queue" />
 without removing it.</para>
      </summary>
      <returns>
        <para>The object at the beginning of the <see cref="T:System.Collections.Queue" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Queue.Synchronized(System.Collections.Queue)">
      <summary>
        <para>Returns a <see cref="T:System.Collections.Queue" /> wrapper that is synchronized (thread-safe).</para>
      </summary>
      <param name="queue">The <see cref="T:System.Collections.Queue" /> to synchronize.</param>
      <returns>
        <para>A <see cref="T:System.Collections.Queue" /> wrapper that is synchronized
 (thread-safe).</para>
      </returns>
    </member>
    <member name="M:System.Collections.Queue.Contains(System.Object)">
      <summary>
        <para>Determines whether an element is in the <see cref="T:System.Collections.Queue" />.</para>
      </summary>
      <param name="obj">
        <para>The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.Queue" />. The element to locate can be <see langword="null" />.</para>
      </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is found in the <see cref="T:System.Collections.Queue" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Queue.ToArray">
      <summary>
        <para>Copies the <see cref="T:System.Collections.Queue" /> elements to a new array.</para>
      </summary>
      <returns>
        <para>A new array containing elements copied from the <see cref="T:System.Collections.Queue" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Queue.TrimToSize">
      <summary>
        <para>Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Queue" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Queue.Count">
      <summary>
        <para>Gets the number of elements contained in the <see cref="T:System.Collections.Queue" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.Queue.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Collections.Queue" />
is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Collections.Queue.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to
 the <see cref="T:System.Collections.Queue" />.</para>
      </summary>
    </member>
    <member name="T:System.Collections.ReadOnlyCollectionBase">
      <summary>
        <para>Provides the <see langword="abstract" /> base class for
   a strongly typed read-only collection.</para>
      </summary>
    </member>
    <member name="M:System.Collections.ReadOnlyCollectionBase.GetEnumerator">
      <summary>
        <para>Returns an enumerator that can iterate through the 
    <see cref="T:System.Collections.ReadOnlyCollectionBase" /> instance.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.ReadOnlyCollectionBase" /> instance.</para>
      </returns>
    </member>
    <member name="P:System.Collections.ReadOnlyCollectionBase.InnerList">
      <summary>
        <para>Gets the list of elements contained in the <see cref="T:System.Collections.ReadOnlyCollectionBase" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Collections.ReadOnlyCollectionBase.Count">
      <summary>
        <para>Gets the number of elements contained in the 
    <see cref="T:System.Collections.ReadOnlyCollectionBase" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Collections.ReadOnlyCollectionBase" /> is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ReadOnlyCollectionBase" />.</para>
      </summary>
    </member>
    <member name="T:System.Collections.SortedList">
      <summary>
        <para> Represents a collection of key-and-value pairs that are sorted by the keys
      and are accessible by key and by index.</para>
      </summary>
    </member>
    <member name="M:System.Collections.SortedList.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the default initial
 capacity and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key
 added to the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.SortedList.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has
 the specified initial capacity and is sorted according to the <see cref="T:System.IComparable" />
 interface implemented by each key added to the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
      <param name="initialCapacity">The initial number of elements that the <see cref="T:System.Collections.SortedList" /> can contain.</param>
    </member>
    <member name="M:System.Collections.SortedList.#ctor(System.Collections.IComparer)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has
 the default initial capacity and is sorted according to the
 specified <see cref="T:System.Collections.IComparer" /> interface.</para>
      </summary>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</para>
      </param>
    </member>
    <member name="M:System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has
 the specified initial capacity and is sorted according to
 the specified <see cref="T:System.Collections.IComparer" /> interface.</para>
      </summary>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</para>
      </param>
      <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.SortedList" /> can contain.</param>
    </member>
    <member name="M:System.Collections.SortedList.#ctor(System.Collections.IDictionary)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that contains elements copied from the
 specified dictionary, has the same initial capacity as the number of elements copied and is
 sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key.</para>
      </summary>
      <param name="d">The <see cref="T:System.Collections.IDictionary" /> to copy to a new <see cref="T:System.Collections.SortedList" />.</param>
    </member>
    <member name="M:System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that contains
 elements copied from the specified dictionary, has the same initial capacity as the number of elements copied and is
 sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</para>
      </summary>
      <param name="d">The <see cref="T:System.Collections.IDictionary" /> to copy to a new <see cref="T:System.Collections.SortedList" />.</param>
      <param name="comparer">
        <para>The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</para>
      </param>
    </member>
    <member name="M:System.Collections.SortedList.Add(System.Object,System.Object)">
      <summary>
        <para>Adds an element with the specified key and value to
 the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
    </member>
    <member name="M:System.Collections.SortedList.Clear">
      <summary>
        <para>Removes all elements from the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.SortedList.Clone">
      <summary>
        <para>Creates a shallow copy of the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
      <returns>
        <para>A shallow copy of the <see cref="T:System.Collections.SortedList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.SortedList.Contains(System.Object)">
      <summary>
        <para>Determines whether the <see cref="T:System.Collections.SortedList" /> contains a specific key.</para>
      </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.SortedList" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Collections.SortedList" />
contains an element with the specified <paramref name="key" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.SortedList.ContainsKey(System.Object)">
      <summary>
        <para>Determines whether the <see cref="T:System.Collections.SortedList" /> contains a specific key.</para>
      </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.SortedList" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Collections.SortedList" />
contains an element with the specified <paramref name="key" />;
otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.SortedList.ContainsValue(System.Object)">
      <summary>
        <para>Determines whether the <see cref="T:System.Collections.SortedList" /> contains a specific value.</para>
      </summary>
      <param name="value">The value to locate in the <see cref="T:System.Collections.SortedList" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> contains an element with 
    the specified <paramref name="value" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the <see cref="T:System.Collections.SortedList" /> elements to a one-dimensional <see cref="T:System.Array" /> instance at the
 specified index.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from <see cref="T:System.Collections.SortedList" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="M:System.Collections.SortedList.GetByIndex(System.Int32)">
      <summary>
        <para>Gets the value at the specified index of the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
      <param name="index">The zero-based index of the value to get.</param>
      <returns>
        <para>The value at the specified index of the <see cref="T:System.Collections.SortedList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.SortedList.GetEnumerator">
      <summary>
        <para> Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that can iterate
   through the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.SortedList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.SortedList.GetKey(System.Int32)">
      <summary>
        <para>Gets the key at the specified index of the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
      <param name="index">The zero-based index of the key to get.</param>
      <returns>
        <para>The key at the specified index of the <see cref="T:System.Collections.SortedList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.SortedList.GetKeyList">
      <summary>
        <para>Gets the keys in the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IList" /> containing the keys in the <see cref="T:System.Collections.SortedList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.SortedList.GetValueList">
      <summary>
        <para>Gets the values in the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IList" /> containing the values in the <see cref="T:System.Collections.SortedList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.SortedList.IndexOfKey(System.Object)">
      <summary>
        <para>Returns the zero-based index of the specified key in the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.SortedList" />.</param>
      <returns>
        <para>The zero-based index of <paramref name="key" />, if
<paramref name="key" /> is found in the <see cref="T:System.Collections.SortedList" />; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Collections.SortedList.IndexOfValue(System.Object)">
      <summary>
        <para>Returns the zero-based index of the first occurrence of the specified
 value in the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
      <param name="value">The value to locate in the <see cref="T:System.Collections.SortedList" />.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" />, if <paramref name="value" /> is found in the <see cref="T:System.Collections.SortedList" />; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Collections.SortedList.RemoveAt(System.Int32)">
      <summary>
        <para>Removes the element at the specified index of <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:System.Collections.SortedList.Remove(System.Object)">
      <summary>
        <para>Removes the element with the specified key from <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)">
      <summary>
        <para>Replaces the value at a specific index in the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
      <param name="index">The zero-based index at which to save <paramref name="value" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to save into the <see cref="T:System.Collections.SortedList" />.</param>
    </member>
    <member name="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)">
      <summary>
        <para>Returns a synchronized (thread-safe) wrapper for the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
      <param name="list">The <see cref="T:System.Collections.SortedList" /> to synchronize.</param>
      <returns>
        <para>A synchronized (thread-safe) wrapper for the <see cref="T:System.Collections.SortedList" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.SortedList.TrimToSize">
      <summary>
        <para>Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.SortedList.Capacity">
      <summary>
        <para>Gets or sets the capacity of the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.SortedList.Count">
      <summary>
        <para>Gets the number of elements contained in the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.SortedList.Keys">
      <summary>
        <para>Gets the keys in the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.SortedList.Values">
      <summary>
        <para>Gets the values in the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.SortedList.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.SortedList" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Collections.SortedList.IsFixedSize">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Collections.SortedList" /> has a fixed size.</para>
      </summary>
    </member>
    <member name="P:System.Collections.SortedList.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Collections.SortedList" />
is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Collections.SortedList.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to
 the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
    </member>
    <member name="P:System.Collections.SortedList.Item(System.Object)">
      <summary>
        <para>Gets and sets the value associated with a specific key
 in the <see cref="T:System.Collections.SortedList" />.</para>
      </summary>
      <param name="key">The key associated with the value to get or set.</param>
    </member>
    <member name="T:System.Collections.Stack">
      <summary>
        <para> Represents a simple last-in-first-out collection of objects.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Stack.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Stack" /> class 
    that is empty and has the default initial capacity.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Stack.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Stack" /> class that is empty and 
    has the specified initial capacity or the default initial capacity, whichever is greater.</para>
      </summary>
      <param name="initialCapacity">The initial number of elements that the <see cref="T:System.Collections.Stack" /> can contain.</param>
    </member>
    <member name="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Collections.Stack" /> class that contains 
    elements copied from the specified collection and has the same initial
    capacity as the number of elements copied.</para>
      </summary>
      <param name="col">The <see cref="T:System.Collections.ICollection" /> to copy elements from.</param>
    </member>
    <member name="M:System.Collections.Stack.Clear">
      <summary>
        <para>Removes all objects from the <see cref="T:System.Collections.Stack" />.</para>
      </summary>
    </member>
    <member name="M:System.Collections.Stack.Clone">
      <summary>
        <para>Creates a shallow copy of the <see cref="T:System.Collections.Stack" />.</para>
      </summary>
      <returns>
        <para>A shallow copy of the <see cref="T:System.Collections.Stack" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Stack.Contains(System.Object)">
      <summary>
        <para>Determines whether an element is in the <see cref="T:System.Collections.Stack" />.</para>
      </summary>
      <param name="obj">
        <para>The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.Stack" />. The element to locate can be <see langword="null" />.</para>
      </param>
      <returns>
        <para>
          <see langword="true" /> if 
 <paramref name="obj" /> is found in the <see cref="T:System.Collections.Stack" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the <see cref="T:System.Collections.Stack" /> to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</para>
      </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Stack" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="M:System.Collections.Stack.GetEnumerator">
      <summary>
        <para>Returns an <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.Stack" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.Stack" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Stack.Peek">
      <summary>
        <para>Returns the object at the top of the <see cref="T:System.Collections.Stack" />
 without removing it.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Object" /> at the top of the <see cref="T:System.Collections.Stack" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Stack.Pop">
      <summary>
        <para>Removes and returns the object at the top of the <see cref="T:System.Collections.Stack" />.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Object" /> removed from the
    top of the <see cref="T:System.Collections.Stack" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Stack.Push(System.Object)">
      <summary>
        <para>Inserts an object at the top of the <see cref="T:System.Collections.Stack" />.</para>
      </summary>
      <param name="obj">The <see cref="T:System.Object" /> to push onto the <see cref="T:System.Collections.Stack" />.</param>
    </member>
    <member name="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
      <summary>
        <para>Returns a synchronized (thread-safe) wrapper for the <see cref="T:System.Collections.Stack" />.</para>
      </summary>
      <param name="stack">The <see cref="T:System.Collections.Stack" /> to synchronize.</param>
      <returns>
        <para>A synchronized wrapper around the <see cref="T:System.Collections.Stack" />.</para>
      </returns>
    </member>
    <member name="M:System.Collections.Stack.ToArray">
      <summary>
        <para>Copies the <see cref="T:System.Collections.Stack" /> to a new array.</para>
      </summary>
      <returns>
        <para>A new array containing copies of the elements of the <see cref="T:System.Collections.Stack" />.</para>
      </returns>
    </member>
    <member name="P:System.Collections.Stack.Count">
      <summary>
        <para>Gets the number of elements contained in the <see cref="T:System.Collections.Stack" />.
    </para>
      </summary>
    </member>
    <member name="P:System.Collections.Stack.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the <see cref="T:System.Collections.Stack" />
is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:System.Collections.Stack.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to
 the <see cref="T:System.Collections.Stack" />.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Assert.AddFilter(System.Diagnostics.AssertFilter)">
      <summary>
        <para>
       Adds a new assert filter.
    </para>
      </summary>
      <param name="filter">
    The filter to be called when an assert fails.
 </param>
    </member>
    <member name="M:System.Diagnostics.Assert.Check(System.Boolean,System.String,System.String)">
      <summary>
        <para>
       Called when an assertion is being made.
    </para>
      </summary>
      <param name="condition">
    The condition to check.
 </param>
      <param name="conditionString">
    The string describing condition.
 </param>
      <param name="message">
    The string describing the problem if the condition is false.
 </param>
    </member>
    <member name="M:System.Diagnostics.Assert.Fail(System.String,System.String)">
      <summary>
        <para>
       Called when an assertion fails.
    </para>
      </summary>
      <param name="conditionString">
    A description of the condition.
 </param>
      <param name="message">
    A description of the problem if the condition is false.
 </param>
    </member>
    <member name="M:System.Diagnostics.Assert.ShowDefaultAssertDialog(System.String,System.String)">
      <summary>
        <para>
       Called when an assertion fails.
    </para>
      </summary>
      <param name="conditionString">
    A string describing the condition.
 </param>
      <param name="message">
    A string describing the problem.
 </param>
    </member>
    <member name="T:System.Diagnostics.ConditionalAttribute">
      <summary>
        <para> Indicates to compilers that
      a method is callable if a specified preprocessing identifier is applied to the method.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.ConditionalAttribute" /> class,
   specifying the name of the attribute that enables the calling of the conditional
   method.</para>
      </summary>
      <param name="conditionString">A string that contains the preprocessing identifier that makes the target method of the current instance callable.</param>
    </member>
    <member name="P:System.Diagnostics.ConditionalAttribute.ConditionString">
      <summary>
        <para>Gets the string that contains the pre-processing identifier that makes
      the target method of the current instance callable.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.Debugger">
      <summary>
        <para> Enables communication with a debugger. This class cannot be inherited.
      </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Debugger.Break">
      <summary>
        <para> Signals a breakpoint to an attached debugger.
      </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Debugger.Launch">
      <summary>
        <para> Launches and attaches a debugger to the process.
      </para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the startup is successful or if
   the debugger is already attached; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="F:System.Diagnostics.Debugger.DefaultCategory">
      <summary>
        <para> Represents the default category of message with a constant.
 </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)">
      <summary>
        <para> Posts a message for the attached debugger.
 </para>
      </summary>
      <param name="level">A description of the importance of the message. </param>
      <param name="category">The category of the message. </param>
      <param name="message">The message to show. </param>
    </member>
    <member name="M:System.Diagnostics.Debugger.IsLogging">
      <summary>
        <para> Checks to see if logging is enabled by an attached debugger.
      </para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if a debugger is attached and
   logging is enabled; otherwise, <see langword="false. " />The attached debugger is the registered
   managed debugger in the <see langword="DbgManagedDebugger" />
   registry key. For more information on this key, see <see topic="cpconenablingjit-attachdebugging" />.</para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.Debugger.IsAttached">
      <summary>
        <para>Gets a value that indicates whether a debugger is attached to the process.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerStepThroughAttribute">
      <summary>
        <para> Specifies the <see cref="T:System.Diagnostics.DebuggerStepThroughAttribute" />. This
   class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerStepThroughAttribute.#ctor">
      <summary>
        <para> Enables the <see cref="T:System.Diagnostics.DebuggerStepThroughAttribute" />.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerHiddenAttribute">
      <summary>
        <para> Specifies the <see cref="T:System.Diagnostics.DebuggerHiddenAttribute" />. This class
   cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerHiddenAttribute.#ctor">
      <summary>
        <para> Enables the <see cref="T:System.Diagnostics.DebuggerHiddenAttribute" />.</para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute">
      <summary>
        <para>Modifies code generation for runtime just-in-time (JIT) debugging. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>
        <para>Sets the conditions to control code
      generation for runtime just-in-time (JIT) debugging.</para>
      </summary>
      <param name="isJITTrackingEnabled">
        <see langword="true" /> to enable debugging; otherwise, <see langword="false" />.</param>
      <param name=" isJITOptimizerDisabled">
        <see langword="true" /> to disable the optimizer for execution; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.Diagnostics.DebuggableAttribute.IsJITTrackingEnabled">
      <summary>
        <para>Gets a value that indicates whether the runtime will track information during code generation for the
      debugger.</para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.DebuggableAttribute.IsJITOptimizerDisabled">
      <summary>
        <para>Gets a value that indicates whether the runtime optimizer is
 disabled.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.Log.GlobalSwitch">
      <summary>
        <para>
       Uses a constant to represent the global switch.
    </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Log.AddOnLogMessage(System.Diagnostics.LogMessageEventHandler)">
      <summary>
        <para>
       Adds a LogMessageEventHandler.
    </para>
      </summary>
      <param name="handler">
    A LogMessageEventHandler.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.RemoveOnLogMessage(System.Diagnostics.LogMessageEventHandler)">
      <summary>
        <para>
       Removes a LogMessageEventHandler.
    </para>
      </summary>
      <param name="handler">
    The handler to be removed.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.AddOnLogSwitchLevel(System.Diagnostics.LogSwitchLevelHandler)">
      <summary>
        <para>
       Adds a LogSwitchLevelHandler.
    </para>
      </summary>
      <param name="handler">
    A LogSwitchLevelHandler.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.RemoveOnLogSwitchLevel(System.Diagnostics.LogSwitchLevelHandler)">
      <summary>
        <para>
       Removes a LogSwitchLevelHandler.
    </para>
      </summary>
      <param name="handler">
    A LogSwitchLevelHandler.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.AddStream(System.IO.Stream)">
      <summary>
        <para>
       Uses the specified stream to create and add a new log device.
    </para>
      </summary>
      <param name="stream">
    The stream to write relevant log messages to.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.LogMessage(System.Diagnostics.LoggingLevels,System.String)">
      <summary>
        <para>
       Generates a log message. If its switch (or a parent switch)
       allows the level for the message, it is "broadcast" to all of the log
       devices.
    </para>
      </summary>
      <param name="level">
    The level of the current message.
 </param>
      <param name="message">
    The message to log.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.LogMessage(System.Diagnostics.LoggingLevels,System.Diagnostics.LogSwitch,System.String)">
      <summary>
        <para>
       Generates a log message. If its switch (or a parent switch)
       allows the level for the message, it is "broadcast" to all of the log
       devices.
    </para>
      </summary>
      <param name="level">
    The level of the current message.
 </param>
      <param name="logswitch">
    The category of the current message.
 </param>
      <param name="message">
    The message to log.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.Trace(System.Diagnostics.LogSwitch,System.String)">
      <summary>
        <para>
       Logs a trace message.
    </para>
      </summary>
      <param name="logswitch">
    The LogSwitch object.
 </param>
      <param name="message">
    The message to be logged.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.Trace(System.String,System.String)">
      <summary>
        <para>
       Logs a trace message.
    </para>
      </summary>
      <param name="switchname">
    The name of the LogSwitch.
 </param>
      <param name="message">
    The message to be logged.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.Trace(System.String)">
      <summary>
        <para>
       Logs a trace message.
    </para>
      </summary>
      <param name="message">
    The message to be logged.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.Status(System.Diagnostics.LogSwitch,System.String)">
      <summary>
        <para>
       Logs a status message.
    </para>
      </summary>
      <param name="logswitch">
    The LogSwitch object.
 </param>
      <param name="message">
    The message to be logged.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.Status(System.String,System.String)">
      <summary>
        <para>
       Log a status message.
    </para>
      </summary>
      <param name="switchname">
    The name of the LogSwitch.
 </param>
      <param name="message">
    The message to be logged.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.Status(System.String)">
      <summary>
        <para>
       Log a status message.
    </para>
      </summary>
      <param name="message">
    The message to be logged.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.Warning(System.Diagnostics.LogSwitch,System.String)">
      <summary>
        <para>
       Logs a warning message.
    </para>
      </summary>
      <param name="logswitch">
    The LogSwitch object.
 </param>
      <param name="message">
    The message to be logged.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.Warning(System.String,System.String)">
      <summary>
        <para>
       Logs a warning message.
    </para>
      </summary>
      <param name="switchname">
    The name of the LogSwitch.
 </param>
      <param name="message">
    The message to be logged.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.Warning(System.String)">
      <summary>
        <para>
       Logs a warning message.
    </para>
      </summary>
      <param name="message">
    The message to be logged.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.Error(System.Diagnostics.LogSwitch,System.String)">
      <summary>
        <para>
       Logs an error message.
    </para>
      </summary>
      <param name="logswitch">
    The log switch for the error.
 </param>
      <param name="message">
    The message to be logged.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.Error(System.String,System.String)">
      <summary>
        <para>
       Logs an error message.
    </para>
      </summary>
      <param name="switchname">
    The name of the LogSwitch.
 </param>
      <param name="message">
    The message to be logged.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.Error(System.String)">
      <summary>
        <para>
       Logs an error message.
    </para>
      </summary>
      <param name="message">
    The message to be logged.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.Panic(System.Diagnostics.LogSwitch,System.String)">
      <summary>
        <para>
       Logs a panic message.
    </para>
      </summary>
      <param name="logswitch">
    The LogSwitch object.
 </param>
      <param name="message">
    The message to be logged.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.Panic(System.String,System.String)">
      <summary>
        <para>
       Logs a panic message.
    </para>
      </summary>
      <param name="switchname">
    The name of the LogSwitch.
 </param>
      <param name="message">
    The message to be logged.
 </param>
    </member>
    <member name="M:System.Diagnostics.Log.Panic(System.String)">
      <summary>
        <para>
       Logs a panic message.
    </para>
      </summary>
      <param name="message">
    The message to be logged.
 </param>
    </member>
    <member name="P:System.Diagnostics.Log.IsConsoleEnabled">
      <summary>
        <para>
       Returns a Boolean indicating whether the console device is
       enabled, and enables or disables the console device.
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.LoggingLevels.ErrorLevel">
      <summary>
        <para>
       Represents the logging level for error messages.
    </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.LogSwitch.#ctor(System.String,System.String,System.Diagnostics.LogSwitch)">
      <param name="name">
    The name of the switch. Switches are stored by name and can be looked up quickly by name.
 </param>
      <param name="description">
    The description of the switch. The description is for display in a user interface for manipulating switches.
 </param>
      <param name="parent">
    The parent of the current switch. If no parent is specified, the parent is the global switch.
 </param>
    </member>
    <member name="M:System.Diagnostics.LogSwitch.CheckLevel(System.Diagnostics.LoggingLevels)">
      <summary>
        <para>
       Checks to determine whether the specified level is "on"
       for this switch or one of its parents.
    </para>
      </summary>
      <param name="level">
    The level of the switch.
 </param>
      <returns>
        <para>
       true if the message at that level should
       be displayed; otherwise, false.
    </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.LogSwitch.GetAllSwitches">
      <summary>
        <para>
       Gets an enumerator for all the defined log switches.
    </para>
      </summary>
      <returns>
        <para>
       An enumerator object for all the defined log switches.
    </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.LogSwitch.GetSwitch(System.String)">
      <summary>
        <para>
       Gets the switch with the specified name, but returns null if no
       such switch exists.
    </para>
      </summary>
      <param name="name">
    The name of the switch.
 </param>
      <returns>
        <para>
       The switch object for the switch with the specified name.
    </para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.LogSwitch.Name">
      <summary>
        <para>
       Returns the name of the switch.
    </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.LogSwitch.Description">
      <summary>
        <para>
       Returns the description of the switch.
    </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.LogSwitch.Parent">
      <summary>
        <para>
       Returns the Switch object for the parent of this switch.
    </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.LogSwitch.MinimumLevel">
      <summary>
        <para>
       Returns and assigns the level of log messages that are
       "on" for the switch (independent of the parent switch settings).
    </para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary>
        <para>Acquires a stack trace.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
      <summary>
        <para> Defines the default for the number of methods to omit from the stack trace. This
      field is constant.
      </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class from the current location, in a
 caller's frame.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class from the current location, in a
 caller's frame, optionally capturing source information.</para>
      </summary>
      <param name="fNeedFileInfo">
        <see langword="true" /> to capture the file name, line number and column number; otherwise, <see langword="false" />. </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class from the current location, in a 
 caller's frame, optionally skipping the given number of frames.</para>
      </summary>
      <param name="skipFrames">The number of frames up the stack from which to start the trace. </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class from the current location, in a
 caller's frame, optionally skipping the given number of frames and capturing
 source information.</para>
      </summary>
      <param name="skipFrames">The number of frames up the stack from which to start the trace. </param>
      <param name="fNeedFileInfo">
        <see langword="true" /> to capture the file name, line number and column number; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" />class.
 </para>
      </summary>
      <param name="e">The exception object from which to construct the stack trace.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class, using the provided exception object, 
   optionally capturing source information. </para>
      </summary>
      <param name="e">The exception object from which to construct the stack trace.</param>
      <param name="fNeedFileInfo">
        <see langword="true" /> to capture the file name, line number and column number; otherwise, <see langword="false" />. </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class using the provided exception object,
   optionally skipping the given number of frames.</para>
      </summary>
      <param name="e">The exception object from which to construct the stack trace.</param>
      <param name="skipFrames">The number of frames up the stack from which to start the trace. </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class using the provided exception object,
   optionally skipping the given number of frames and capturing source information.</para>
      </summary>
      <param name="e">The exception object from which to construct the stack trace.</param>
      <param name="skipFrames">The number of frames up the stack from which to start the trace. </param>
      <param name="fNeedFileInfo">
        <see langword="true" /> to capture the file name, line number and column number; otherwise, <see langword="false" />. </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class that contains a single
   frame.
   </para>
      </summary>
      <param name="frame">The frame that the <see cref="T:System.Diagnostics.StackTrace" /> object should contain. </param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Threading.Thread,System.Boolean)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class for another thread, optionally
   capturing source information.</para>
      </summary>
      <param name="targetThread">The thread whose stack trace is requested.</param>
      <param name=" needFileInfo">
        <see langword="true" /> to capture the file name, line number and column number; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
      <summary>
        <para> Gets the specified stack frame.
      </para>
      </summary>
      <param name="index">The index of the stack frame requested. </param>
      <returns>
        <para> The specified stack frame.
      </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary>
        <para> Builds a readable representation of the stack trace.
 </para>
      </summary>
      <returns>
        <para> A readable representation of the stack trace.
 </para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.StackTrace.FrameCount">
      <summary>
        <para> Gets the number of frames in the stack trace.
 </para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.StackFrame">
      <summary>
        <para> Provides information about a <see cref="T:System.Diagnostics.StackFrame" />.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary>
        <para>Defines the value returned from <see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" /> or <see cref="M:System.Diagnostics.StackFrame.GetILOffset" /> when the native or Microsoft Intermediate Language (MSIL) offset is
 unknown. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor">
      <summary>
        <para>Initializes a new <see cref="T:System.Diagnostics.StackFrame" /> object that corresponds to the active stack 
 frame.</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new <see cref="T:System.Diagnostics.StackFrame" /> object that corresponds to the active stack frame, optionally
   capturing source information.</para>
      </summary>
      <param name="fNeedFileInfo">
        <see langword="true" /> to capture the file name, line number and column number; otherwise, <see langword="false" />. </param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32)">
      <summary>
        <para> Initializes a new <see cref="T:System.Diagnostics.StackFrame" /> object that corresponds to a
 frame above the active stack frame.</para>
      </summary>
      <param name="skipFrames">The number of frames up the stack to skip. </param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32,System.Boolean)">
      <summary>
        <para>Initializes a new <see cref="T:System.Diagnostics.StackFrame" /> object that corresponds to a frame above the active
   stack frame, optionally capturing source information. </para>
      </summary>
      <param name="skipFrames">The number of frames up the stack to skip.</param>
      <param name=" fNeedFileInfo">
        <see langword="true" /> to capture the file name, line number and column number; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Diagnostics.StackFrame" /> object and constructs a dummy stack frame 
   that only contains the given file name and line number. </para>
      </summary>
      <param name="fileName">The given file name. </param>
      <param name="lineNumber">The line number in the specified file. </param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
        <para> Initializes a new <see cref="T:System.Diagnostics.StackFrame" /> object 
   and constructs a dummy stack frame that only contains the given file name,
   line number, and column number. </para>
      </summary>
      <param name="fileName">The given file name.</param>
      <param name=" lineNumber">The line number in the specified file.</param>
      <param name=" colNumber">The column number in the specified file.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary>
        <para> Gets the method in which the frame is executing.
 </para>
      </summary>
      <returns>
        <para> The method in which the frame is executing.
 </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetNativeOffset">
      <summary>
        <para> Gets the offset from the start of the native just-in-time (JIT)-compiled code
 for the method being executed.
 </para>
      </summary>
      <returns>
        <para> The offset from the start of the JIT-compiled code for
 the method being executed.
 </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary>
        <para> Gets the offset from the start of the Microsoft Intermediate Language (MSIL) code for the method that is
      executing. This offset might be an approximation depending on whether the just-in-time (JIT)
      compiler is generating debugging code or not.
      </para>
      </summary>
      <returns>
        <para> The offset from the start of the MSIL code for the method that is
      executing.
      </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary>
        <para> Gets the file name that contains the code that is executing.
      This information is typically extracted from the debugging symbols for the
      executable.
      </para>
      </summary>
      <returns>
        <para> The file name.
      </para>
        <para>-or-</para>
        <para>
          <see langword="null" /> if the file name cannot be determined. </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary>
        <para> Gets the line number in the file that contains the code that
      is executing. This information is typically extracted from the debugging symbols for
      the executable.
      </para>
      </summary>
      <returns>
        <para> The file line number.
      </para>
        <para>-or-</para>
        <para>Zero if the file line number cannot be determined. </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary>
        <para> Gets the column number in the file that contains the
      code that is executing. This information is typically extracted from the debugging
      symbols for the executable.</para>
      </summary>
      <returns>
        <para> The file column
      number. </para>
        <para>-or-</para>
        <para> Zero if the file column number cannot be determined. </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary>
        <para>
       Builds a readable representation of the stack trace.
    </para>
      </summary>
      <returns>
        <para>
       Returns a readable representation.
    </para>
      </returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder">
      <summary>
        <para>
       Represents a symbol binder for managed code.
    </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder.GetReader(System.Int32,System.String,System.String)">
      <summary>
        <para> Gets the interface of the symbol reader for the current file.
      </para>
      </summary>
      <param name="importer">
        <para>The metadata import interface.</para>
      </param>
      <param name="filename">
        <para>The name of the file for which the reader interface is required.</para>
      </param>
      <param name=" searchPath">
        <para>The search path used to locate the symbol file.</para>
      </param>
      <returns>
        <para>The <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> interface that reads the
   debugging symbols.</para>
      </returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocument">
      <summary>
        <para> Represents a document referenced by a symbol store.
      </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetCheckSum">
      <summary>
        <para>
       Gets the checksum.
    </para>
      </summary>
      <returns>
        <para>
       The checksum.
    </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.FindClosestLine(System.Int32)">
      <summary>
        <para> Returns the closest line that is a sequence point, given a line
      in the current document that might or might not be a sequence point.
      </para>
      </summary>
      <param name="line">The specified line in the document. </param>
      <returns>
        <para> The closest line that is a sequence point.
      </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetSourceRange(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>
       Gets the embedded document source for the specified range.
    </para>
      </summary>
      <param name="startLine">
    The starting line in the current document.
 </param>
      <param name="startColumn">
    The starting column in the current document.
 </param>
      <param name="endLine">
    The ending line in the current document.
 </param>
      <param name="endColumn">
    The ending column in the current document.
 </param>
      <returns>
        <para>
       The document source for the specified range.
    </para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.URL">
      <summary>
        <para>
       Gets the URL of the current document.
    </para>
      </summary>
      <returns>
        <para>
       The URL of the current document.
    </para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.DocumentType">
      <summary>
        <para>
       Gets the type of the current document.
    </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.Language">
      <summary>
        <para>
       Gets the language of the current document.
    </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.LanguageVendor">
      <summary>
        <para>
       Gets the language vendor of the current document.
    </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.CheckSumAlgorithmId">
      <summary>
        <para> Gets the checksum algorithm identifier.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.HasEmbeddedSource">
      <summary>
        <para> Checks whether the current document is stored in the symbol
      store.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.SourceLength">
      <summary>
        <para>
       Gets the length, in bytes, of the embedded source.
    </para>
      </summary>
      <returns>
        <para>
       The source length of the current document.
    </para>
      </returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
      <summary>
        <para>
       Represents a document referenced by a symbol store.
    </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(System.Byte[])">
      <summary>
        <para> Stores the raw source for a document in the symbol store.
      </para>
      </summary>
      <param name="source">The document source represented as unsigned bytes. </param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid,System.Byte[])">
      <summary>
        <para> Sets checksum information.
 </para>
      </summary>
      <param name="algorithmId">The GUID representing the algorithm ID. </param>
      <param name="checkSum">The checksum. </param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolMethod">
      <summary>
        <para> Represents a method within a symbol reader.
      </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary>
        <para> Gets the sequence points for the current method.
      </para>
      </summary>
      <param name="offsets">The array of byte offsets from the beginning of the method for the sequence points. </param>
      <param name="documents">The array of documents in which the sequence points are located. </param>
      <param name="lines">The array of lines in the documents at which the sequence points are located. </param>
      <param name="columns">The array of columns in the documents at which the sequence points are located. </param>
      <param name="endLines">The array of lines in the documents at which the sequence points end. </param>
      <param name="endColumns">The array of columns in the documents at which the sequence points end. </param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)">
      <summary>
        <para> Returns the most enclosing lexical scope when given an offset within
      a method.
      </para>
      </summary>
      <param name="offset">The byte offset within the method of the lexical scope. </param>
      <returns>
        <para> The most enclosing lexical scope for the given byte offset within
      the method.
      </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>
        <para> Gets the Microsoft intermediate language (MSIL) offset within the method that corresponds to the specified
      position.
      </para>
      </summary>
      <param name="document">The document for which the offset is requested. </param>
      <param name="line">The document line corresponding to the offset. </param>
      <param name="column">The document column corresponding to the offset. </param>
      <returns>
        <para> The
      offset within the specified document.
      </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>
        <para> Gets an array
      of start and end offset pairs that correspond to the ranges
      of Microsoft intermediate language (MSIL) that a given position covers within this method.
      </para>
      </summary>
      <param name="document">The document for which the offset is requested. </param>
      <param name="line">The document line corresponding to the ranges. </param>
      <param name="column">The document column corresponding to the ranges. </param>
      <returns>
        <para> An array of start and end offset pairs.
      </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters">
      <summary>
        <para> Gets the parameters for the current method.
      </para>
      </summary>
      <returns>
        <para> The array of parameters for the current method.
      </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace">
      <summary>
        <para>
       Gets the namespace that the current method is defined within.
    </para>
      </summary>
      <returns>
        <para>
       The namespace that the current method is defined within.
    </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])">
      <summary>
        <para> Gets the start and end positions for the source of the current method.
      </para>
      </summary>
      <param name="docs">The starting and ending source documents. </param>
      <param name="lines">The starting and ending lines in the corresponding source documents. </param>
      <param name="columns">The starting and ending columns in the corresponding source documents. </param>
      <returns>
        <para>
          <see langword="true" /> if the positions were defined;
   otherwise, <see langword="false" /> .
   </para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.Token">
      <summary>
        <para> Gets the <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> containing the metadata for the current method.
   </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount">
      <summary>
        <para> Gets a count of the sequence points in the method.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.RootScope">
      <summary>
        <para> Gets the root lexical scope for the current method. This scope
      encloses the entire method.
      </para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolNamespace">
      <summary>
        <para>
       Represents a namespace within a symbol reader.
    </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetNamespaces">
      <summary>
        <para> Gets the child members of the current namespace.
      </para>
      </summary>
      <returns>
        <para> The child members of the current namespace.
      </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetVariables">
      <summary>
        <para>
       Gets all the variables defined at global scope within the current
       namespace.
    </para>
      </summary>
      <returns>
        <para>
       The variables defined at global scope within the current namespace.
    </para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolNamespace.Name">
      <summary>
        <para> Gets the current namespace.
      </para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolReader">
      <summary>
        <para> Represents a symbol reader for managed code.
 </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>
        <para> Gets a document specified by the language, vendor, and type.
      </para>
      </summary>
      <param name="url">The URL that identifies the document. </param>
      <param name="language">The document language. You can specify this parameter as <see langword="null" /> . </param>
      <param name="languageVendor">The identity of the vendor for the document language. You can specify this parameter as <see langword="null" /> . </param>
      <param name="documentType">The type of the document. You can specify this parameter as <see langword="null" /> . </param>
      <returns>
        <para> The specified document.
      </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocuments">
      <summary>
        <para> Gets an array of all documents defined in the symbol store.
      </para>
      </summary>
      <returns>
        <para> An array of all documents defined in the symbol store.
      </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>
        <para> Gets a symbol reader method object when given the identifier of a method.
      </para>
      </summary>
      <param name="method">The metadata token of the method. </param>
      <returns>
        <para> The symbol reader method object for the specified method identifier.
      </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)">
      <summary>
        <para> Gets a symbol reader method object when given the identifier of a
      method and its edit and continue version.
      </para>
      </summary>
      <param name="method">The metadata token of the method. </param>
      <param name="version">The edit and continue version of the method. </param>
      <returns>
        <para> The symbol reader method object for the specified method
      identifier.
      </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>
        <para> Gets the variables that are not local when given the parent.
      </para>
      </summary>
      <param name="parent">The metadata token for the type for which the variables are requested. </param>
      <returns>
        <para>An array of variables for the parent.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetGlobalVariables">
      <summary>
        <para>
       Gets all global variables in the module.
    </para>
      </summary>
      <returns>
        <para>
       An array of all variables in the module.
    </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>
        <para> Gets a symbol reader method object that contains a specified position
      in a document.
      </para>
      </summary>
      <param name="document">The document in which the method is located. </param>
      <param name="line">The position of the line within the document. The lines are numbered, beginning with 1. </param>
      <param name="column">The position of column within the document. The columns are numbered, beginning with 1. </param>
      <returns>
        <para> The reader method object for the specified position in the
      document.
      </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)">
      <summary>
        <para> Gets an attribute value when given the attribute name.
      </para>
      </summary>
      <param name="parent">The metadata token for the object for which the attribute is requested. </param>
      <param name="name">The attribute name. </param>
      <returns>
        <para> The value of the attribute.
      </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetNamespaces">
      <summary>
        <para> Gets the namespaces that are defined in the global scope within the current symbol
      store.
      </para>
      </summary>
      <returns>
        <para> The namespaces defined in the global scope within the current symbol
      store.
      </para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolReader.UserEntryPoint">
      <summary>
        <para> Gets the metadata token for the method that was specified as the
      user entry point for the module, if any.
      </para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolScope">
      <summary>
        <para> Represents a lexical scope within <see cref="T:System.Diagnostics.SymbolStore.ISymbolMethod" /> , providing access to the start and end offsets of the
   scope, as well as its child and parent scopes.
   </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetChildren">
      <summary>
        <para> Gets the child lexical scopes of the current lexical
      scope.
      </para>
      </summary>
      <returns>
        <para> The child lexical scopes that of the current lexical
      scope.
      </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetLocals">
      <summary>
        <para> Gets the local variables within the current lexical scope.
      </para>
      </summary>
      <returns>
        <para> The local variables within the current lexical scope.
      </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces">
      <summary>
        <para> Gets the namespaces that are used within the current scope.
      </para>
      </summary>
      <returns>
        <para> The namespaces that are used within the current scope.
      </para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Method">
      <summary>
        <para>
       Gets the method that contains the current lexical scope.
    </para>
      </summary>
      <returns>
        <para>
       The method that contains the current lexical scope.
    </para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Parent">
      <summary>
        <para>
       Gets the parent lexical scope of the current scope.
    </para>
      </summary>
      <returns>
        <para>
       The parent lexical scope of the current scope.
    </para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.StartOffset">
      <summary>
        <para> Gets the start offset of the current lexical scope.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.EndOffset">
      <summary>
        <para> Gets the end offset of the current lexical scope.
      </para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolVariable">
      <summary>
        <para> Represents a symbol within a symbol store.
      </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolVariable.GetSignature">
      <summary>
        <para> Gets the variable signature.
      </para>
      </summary>
      <returns>
        <para> The variable signature as an opaque blob.
      </para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Name">
      <summary>
        <para>
       Gets the name of the variable.
    </para>
      </summary>
      <returns>
        <para>
       The name of the variable.
    </para>
      </returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Attributes">
      <summary>
        <para> Gets the attributes of the variable.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressKind">
      <summary>
        <para> Gets the <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> value 
   describing the type of the address.
   </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField1">
      <summary>
        <para> Gets the first address of a variable.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField2">
      <summary>
        <para> Gets the second address of a variable.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField3">
      <summary>
        <para> Gets the third address of a variable.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.StartOffset">
      <summary>
        <para> Gets the start offset of the variable within the scope of the
      variable.
      </para>
      </summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.EndOffset">
      <summary>
        <para> Gets the end offset of a variable within the scope of the variable.
      </para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolWriter">
      <summary>
        <para> Represents a symbol writer for managed code.
      </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
      <summary>
        <para>Sets the metadata emitter interface to associate with a writer. </para>
      </summary>
      <param name="emitter">The metadata emitter interface.</param>
      <param name=" filename">The file name for which the debugging symbols are written. Some writers require a file name, while others do not. If a file name is specified for a writer that does not use file names, this parameter is ignored.</param>
      <param name=" fFullBuild">
        <see langword="true" /> indicates that this is a full rebuild; <see langword="false" />indicates an incremental compilation.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>
        <para> Defines a source document.
      </para>
      </summary>
      <param name="url">The URL that identifies the document. </param>
      <param name="language">The document language. This parameter can be <see langword="null" /> . </param>
      <param name="languageVendor">The identity of the vendor for the document language. This parameter can be <see langword="null" /> . </param>
      <param name="documentType">The type of the document. This parameter can be <see langword="null" /> . </param>
      <returns>
        <para> The <see cref="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter" /> 
object that represents the document.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>
        <para> Identifies the user-defined method as the entry
      point for the current module.
      </para>
      </summary>
      <param name="entryMethod">The metadata token for the method that is the user entry point. </param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>
        <para> Opens a method to place symbol information into.
      </para>
      </summary>
      <param name="method">The metadata token for the method to be opened. </param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod">
      <summary>
        <para> Closes the current method.
      </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary>
        <para> Defines a group of sequence points within the current method.
      </para>
      </summary>
      <param name="document">The document object for which the sequence points are being defined. </param>
      <param name="offsets">The sequence point offsets measured from the beginning of methods. </param>
      <param name="lines">The document lines for the sequence points. </param>
      <param name="columns">The document positions for the sequence points. </param>
      <param name="endLines">The document end lines for the sequence points. </param>
      <param name="endColumns">The document end positions for the sequence points. </param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
      <summary>
        <para> Opens a new lexical scope in the current method.
      </para>
      </summary>
      <param name="startOffset">The offset in bytes from the beginning of the method to the first instruction in the lexical scope. </param>
      <returns>
        <para> An opaque scope identifier that can be used with <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)" /> to define the start and end 
   offsets of a scope at a later time. In this case, the offsets passed to <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)" /> and <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)" />
   are ignored. A scope identifier is valid only in the
   current method.
   </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
      <summary>
        <para> Closes the current lexical scope.
      </para>
      </summary>
      <param name="endOffset">The points past the last instruction in the scope. </param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>
       Defines the offset range for the specified lexical scope.
    </para>
      </summary>
      <param name="scopeID">
    The identifier of the lexical scope.
 </param>
      <param name="startOffset">
    The byte offset of the beginning of the lexical scope.
 </param>
      <param name="endOffset">
    The byte offset of the end of the lexical scope.
 </param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para> Defines a single variable in the current lexical
      scope.
      </para>
      </summary>
      <param name="name">The local variable name. </param>
      <param name="attributes">The local variable attributes specified using the <see cref="T:System.Reflection.FieldAttributes" /> enumerator. </param>
      <param name="signature">The local variable signature. </param>
      <param name="addrKind">The address types for <paramref name="addr1" />, <paramref name="addr2" />, and <paramref name="addr3" /> using <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> . </param>
      <param name="addr1">The first address for the local variable specification. </param>
      <param name="addr2">The second address for the local variable specification. </param>
      <param name="addr3">The third address for the local variable specification. </param>
      <param name="startOffset">The start offset for the variable. If zero, this parameter is ignored and the variable is defined throughout the entire scope. If nonzero, it falls within the offsets of the current scope. </param>
      <param name="endOffset">The end offset for the variable. If zero, this parameter is ignored and the variable is defined throughout the entire scope. If nonzero, it falls within the offsets of the current scope. </param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para> Defines a single parameter in the current method. The type
      of each parameter is taken from its position within the signature of the method.
      </para>
      </summary>
      <param name="name">The parameter name. </param>
      <param name="attributes">The parameter attributes specified using the <see cref="T:System.Reflection.ParameterAttributes" /> enumerator. </param>
      <param name="sequence">The parameter signature. </param>
      <param name="addrKind">The address types for <paramref name="addr1" />, <paramref name="addr2" />, and <paramref name="addr3" /> using <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> . </param>
      <param name="addr1">The first address for the parameter specification. </param>
      <param name="addr2">The second address for the parameter specification. </param>
      <param name="addr3">The third address for the parameter specification. </param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para> Defines a field in a type or a global field.
      </para>
      </summary>
      <param name="parent">The metadata type or method token. </param>
      <param name="name">The field name. </param>
      <param name="attributes">The field attributes specified using the <see cref="T:System.Reflection.FieldAttributes" /> enumerator. </param>
      <param name="signature">The field signature. </param>
      <param name="addrKind">The address types for <paramref name="addr1" /> and <paramref name="addr2" /> using <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> . </param>
      <param name="addr1">The first address for the field specification. </param>
      <param name="addr2">The second address for the field specification. </param>
      <param name="addr3">The third address for the field specification. </param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para> Defines a single global variable.
      </para>
      </summary>
      <param name="name">The global variable name. </param>
      <param name="attributes">The global variable attributes specified using the <see cref="T:System.Reflection.FieldAttributes" /> enumerator. </param>
      <param name="signature">The global variable signature. </param>
      <param name="addrKind">The address types for <paramref name="addr1" />, <paramref name="addr2" />, and <paramref name="addr3" /> using <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> . </param>
      <param name="addr1">The first address for the global variable specification. </param>
      <param name="addr2">The second address for the global variable specification. </param>
      <param name="addr3">The third address for the global variable specification. </param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Close">
      <summary>
        <para> Closes <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> and
   commits the symbols to the symbol store.
   </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
      <summary>
        <para> Defines an attribute when given the attribute name and the attribute
      value.
      </para>
      </summary>
      <param name="parent">The metadata token for which the attribute is being defined. </param>
      <param name="name">The attribute name. </param>
      <param name="data">The attribute value. </param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
      <summary>
        <para> Opens a new namespace.
      </para>
      </summary>
      <param name="name">The name of the new namespace. </param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace">
      <summary>
        <para> Closes the most recent namespace.
      </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
      <summary>
        <para> Specifies that the given, fully-qualified namespace name
      is used within the open lexical scope.
      </para>
      </summary>
      <param name="fullName"> The fully-qualified name of the namespace. </param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
      <summary>
        <para>Specifies the true start and end of a method within a 
      source file. Use <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)" />
      to specify the extent of a method, independent of the sequence
      points that exist within the method.</para>
      </summary>
      <param name="startDoc">The document containing the starting position.</param>
      <param name=" startLine">The starting line number.</param>
      <param name=" startColumn">The starting column.</param>
      <param name=" endDoc">The document containing the ending position.</param>
      <param name=" endLine">The ending line number.</param>
      <param name=" endColumn">The ending column number.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
      <summary>
        <para>Sets the underlying <see langword="ISymUnmanagedWriter " />(the corresponding unmanaged API) that a managed <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" />
uses to emit symbols.</para>
      </summary>
      <param name="underlyingWriter">An <see cref="T:System.IntPtr" /> type pointer to code that is the underlying writer.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymAddressKind">
      <summary>
        <para> Specifies address types for local variables, parameters, 
      and fields in the methods <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />, <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" />, and <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" />
      .
      </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.ILOffset">
      <summary>
        <para> Specifies a Microsoft intermediate language (MSIL) offset.
      </para>
        <para> The <paramref name="addr1" /> parameter is the MSIL local variable or parameter index.
   </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRVA">
      <summary>
        <para> Specifies a native Relevant Virtual Address (RVA).
      </para>
        <para> The <paramref name="addr1 " /> parameter is the RVA in the module.
   </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegister">
      <summary>
        <para> Specifies a native register address.
      </para>
        <para> The <paramref name="addr1" /> parameter is the register in which the variable is stored.
   </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRelative">
      <summary>
        <para> Specifies a register-relative address.
      </para>
   The
<paramref name="addr1" /> parameter is the register, and the <paramref name="addr2" />

parameter is the offset.
</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeOffset">
      <summary>
        <para> Specifies a native offset.
      </para>
        <para> The <paramref name="addr1 " /> parameter is the offset from start of the parent.
   </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRegister">
      <summary>
        <para> Specifies a register-relative address.
      </para>
        <para> The <paramref name="addr1" /> parameter is the register low, and 
   the <paramref name="addr2" /> parameter is the
   register high.
   </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterStack">
      <summary>
        <para> Specifies a register-relative address.
      </para>
        <para> The <paramref name="addr1 " />parameter is the register low, the 
<paramref name="addr2" /> parameter is the register stack, and <paramref name="addr3" /> 
is the offset.</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeStackRegister">
      <summary>
        <para> Specifies a register-relative address.
      </para>
        <para> The <paramref name="addr1 " />parameter is the register stack, the 
<paramref name="addr2" /> parameter is the offset, and <paramref name="addr3" /> 
is the register high.
</para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.BitField">
      <summary>
        <para> Specifies a bit field.
      </para>
        <para> The <paramref name="addr1 " />parameter is the position where the 
   field starts. The <paramref name="addr2" />
   parameter is the field length.
   </para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymDocumentType">
      <summary>
        <para>
       Holds the public GUIDs for document types to be used with the
       symbol store.
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymDocumentType.Text">
      <summary>
        <para>
       Specifies the GUID of the document type to be used with the
       symbol store.
    </para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageType">
      <summary>
        <para>
       Holds the public GUIDs for language types to be used with the
       symbol store.
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.C">
      <summary>
        <para>
       Specifies the GUID of the C language type to be used with the
       symbol store.
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CPlusPlus">
      <summary>
        <para> Specifies the GUID of the C++ language type to be used with the
      symbol store.
      </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CSharp">
      <summary>
        <para>
       Specifies the GUID of the C# language type to be used with the
       symbol store.
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Basic">
      <summary>
        <para>
       Specifies the GUID of the Basic language type to be used with the
       symbol store.
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Java">
      <summary>
        <para>
       Specifies the GUID of the Java language type to be used with the
       symbol store.
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Cobol">
      <summary>
        <para>
       Specifies the GUID of the Cobol language type to be used with the
       symbol store.
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Pascal">
      <summary>
        <para>
       Specifies the GUID of the Pascal language type to be used with
       the symbol store.
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.ILAssembly">
      <summary>
        <para>
       Specifies the GUID of the ILAssembly language type to be used
       with the symbol store.
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.JScript">
      <summary>
        <para>
       Specifies the GUID of the JScript language type to be used with
       the symbol store.
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.SMC">
      <summary>
        <para>
       Specifies the GUID of the SMC language type to be used with the
       symbol store.
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.MCPlusPlus">
      <summary>
        <para> Specifies the GUID of the Managed Extensions for C++ language type to be used
      with the symbol store.
      </para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageVendor">
      <summary>
        <para>
       Holds the public GUIDs for language vendors to be used with the
       symbol store.
    </para>
      </summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageVendor.Microsoft">
      <summary>
        <para>
       Specifies the GUID of the Microsoft language vendor.
    </para>
      </summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymbolToken">
      <summary>
        <para>
       Provides an opaque representation of the token used and returned
       by the metadata.
    </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.#ctor(System.Int32)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> class when given a value.
   </para>
      </summary>
      <param name="val">The value to be used for the token. </param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetToken">
      <summary>
        <para> Gets the value of the current token.
 </para>
      </summary>
      <returns>
        <para> The value of the current token.
 </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetHashCode">
      <summary>
        <para>
       Generates the hash code for the current token.
    </para>
      </summary>
      <returns>
        <para>
       The hash code for the current token.
    </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Object)">
      <summary>
        <para> Determines whether <paramref name="obj" /> is
   an instance of <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />
   and is equal to
   this instance.
   </para>
      </summary>
      <param name="obj">The object to check. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />
and is equal to this instance; otherwise,
<see langword="false" /> .</para>
      </returns>
    </member>
    <member name="T:System.Reflection.AmbiguousMatchException">
      <summary>
        <para>The exception that is thrown when binding to a method results in
      more than one method matching the binding criteria.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AmbiguousMatchException" /> class
<see langword=" " />with an empty message string and the
   root cause exception set to <see langword="null" />
   .</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AmbiguousMatchException" /> class
<see langword=" " />with its message string set to the
   given message and the root cause exception set to <see langword="null" />
   .</para>
      </summary>
      <param name="message">A String indicating the reason this exception was thrown.</param>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AmbiguousMatchException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Reflection.ModuleResolveEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="F:System.Reflection.Assembly.ModuleResolve" />
event of an <see cref="T:System.Reflection.Assembly" />.</para>
      </summary>
      <param name="sender">The assembly that was the source of the event.</param>
      <param name="e">The arguments supplied by the object describing the event.</param>
    </member>
    <member name="T:System.Reflection.Assembly">
      <summary>
        <para>Defines an <see cref="T:System.Reflection.Assembly" />
, which is a reusable, versionable, and self-describing building block
of a common language runtime application.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Assembly.GetName">
      <summary>
        <para>Gets an <see cref="T:System.Reflection.AssemblyName" />
 for this assembly.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Reflection.AssemblyName" /> for
    this assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetName(System.Boolean)">
      <summary>
        <para>Gets an <see cref="T:System.Reflection.AssemblyName" />
for this
assembly, setting the codebase as specified by <paramref name="copiedName" />
.</para>
      </summary>
      <param name="copiedName">
        <see langword="true" /> to set the <see cref="P:System.Reflection.Assembly.CodeBase" /> to the location of the assembly after it was shadow copied; <see langword="false" /> to set <see cref="P:System.Reflection.Assembly.CodeBase" /> to the original location.</param>
      <returns>
        <para>An <see cref="T:System.Reflection.AssemblyName" /> for
 this assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)">
      <summary>
        <para>Creates the name of a type qualified by the display name of its
      assembly.</para>
      </summary>
      <param name="assemblyName">The display name of an assembly.</param>
      <param name="typeName">The full name of a type.</param>
      <returns>
        <para>A <see langword="String" /> that is the full name of the type qualified by the display name of the
   assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetAssembly(System.Type)">
      <summary>
        <para>Gets the assembly in
      which the specified class is defined.</para>
      </summary>
      <param name="type">A <see cref="T:System.Type" /> object representing a class in the assembly that will be returned.</param>
      <returns>
        <para>The assembly in which the specified class
      is defined.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String)">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> object with the specified name in the
   assembly instance.</para>
      </summary>
      <param name="name">The full name of the type.</param>
      <returns>
        <para>A
   <see cref="T:System.Type" />
   object that represents the specified class.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean)">
      <summary>
        <para>Gets
      the <see cref="T:System.Type" /> object with the specified
      name in the assembly instance and optionally throws an exception.</para>
      </summary>
      <param name="name">The full name of the type.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw an exception if the type is not found; otherwise, <see langword="null" /> .</param>
      <returns>
        <para>A
   <see cref="T:System.Type" />
   object that represents the specified class.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>
        <para>Gets
      the <see cref="T:System.Type" /> object with the specified name
      in the assembly instance, with the options of ignoring the case,
      and throwing an exception.</para>
      </summary>
      <param name="name">The full name of the type.</param>
      <param name="throwOnError">
        <see langword="true" /> to throw an exception if the type is not found; otherwise, <see langword="null" /> .</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore the case of the type name; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>A
   <see cref="T:System.Type" />
   object that represents the specified class.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetExportedTypes">
      <summary>
        <para>Gets the
       exported types defined in this assembly.</para>
      </summary>
      <returns>
        <para>An array of type <see langword="Type" /> containing the exported
    types defined in this assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetTypes">
      <summary>
        <para>Gets
      the types defined in this assembly.</para>
      </summary>
      <returns>
        <para>An array of type
   <see cref="T:System.Type" /> containing
      objects for all the types defined in this assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)">
      <summary>
        <para>Loads the specified
      manifest resource, scoped by the namespace of the specified type, from this
      assembly.</para>
      </summary>
      <param name="type">The type whose namespace is used to scope the manifest resource name.</param>
      <param name="name">The name of the manifest resource being requested.</param>
      <returns>
        <para>A <see cref="T:System.IO.Stream" /> representing
   this
   manifest resource.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)">
      <summary>
        <para>Loads the specified
      manifest resource from this assembly.</para>
      </summary>
      <param name="name">The name of the manifest resource being requested.</param>
      <returns>
        <para>A <see cref="T:System.IO.Stream" /> representing
   this
   manifest resource.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary>
        <para>Gets the
      satellite assembly for the specified culture.</para>
      </summary>
      <param name="culture">The specified culture.</param>
      <returns>
        <para>The
      specified satellite assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary>
        <para>Gets the specified version of the satellite assembly for
      the specified culture.</para>
      </summary>
      <param name="culture">The specified culture.</param>
      <param name=" version">The version of the satellite assembly.</param>
      <returns>
        <para>The specified satellite assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Gets serialization information with all of the data needed to reinstantiate this assembly.</para>
      </summary>
      <param name="info">The object to be populated with serialization information.</param>
      <param name=" context">The destination context of the serialization.</param>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)">
      <summary>
        <para>Gets all the
      custom attributes for this assembly.</para>
      </summary>
      <param name="inherit">This argument is ignored for objects of type <see cref="T:System.Reflection.Assembly" /> . </param>
      <returns>
        <para>An array of type <see langword="Object" />
containing the custom attributes for this assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
        <para> Gets the custom attributes for this assembly as specified by type.</para>
      </summary>
      <param name="attributeType">The <see cref="T:System.Type" /> for which the custom attributes are to be returned.</param>
      <param name="inherit">This argument is ignored for objects of type <see cref="T:System.Reflection.Assembly" /> . </param>
      <returns>
        <para>An array of type <see langword="Object" /> containing the
 custom attributes for this assembly as specified by
<paramref name="attributeType" />
.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)">
      <summary>
        <para>Indicates whether a custom attribute identified by the specified <see cref="T:System.Type" />
is defined.</para>
      </summary>
      <param name="attributeType">The <see cref="T:System.Type" /> for which the custom attributes are to be checked.</param>
      <param name=" inherit">This argument is ignored for objects of this type.</param>
      <returns>
        <para>
          <see langword="true " />if a custom attribute
   identified by the specified <see cref="T:System.Type" /> is defined; otherwise, <see langword="false" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFrom(System.String)">
      <summary>
        <para>Loads an assembly given
      its file name or path.</para>
      </summary>
      <param name="assemblyFile">The name or path of the file that contains the manifest of the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence)">
      <summary>
        <para>Loads an assembly given its file
      name or path and supplying security evidence.</para>
      </summary>
      <param name="assemblyFile">The name or path of the file that contains the manifest of the assembly.</param>
      <param name="securityEvidence">Evidence for loading the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.String)">
      <summary>
        <para> Loads
      an assembly given its display name.</para>
      </summary>
      <param name="assemblyString">The display name of the assembly.</param>
      <returns>
        <para>The
      loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.String,System.Security.Policy.Evidence)">
      <summary>
        <para> Loads an assembly given its display name, loading the
      assembly into the domain of the caller using the supplied evidence.</para>
      </summary>
      <param name="assemblyString">The display name of the assembly.</param>
      <param name="assemblySecurity">Evidence for loading the assembly.</param>
      <returns>
        <para>The
      loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)">
      <summary>
        <para>Loads
      an assembly given its <see cref="T:System.Reflection.AssemblyName" /> .</para>
      </summary>
      <param name="assemblyRef">The <see cref="T:System.Reflection.AssemblyName" /> object that describes the assembly to be loaded.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)">
      <summary>
        <para> Loads the assembly with a Common Object File Format (COFF)-based image containing an emitted assembly. The
      assembly is loaded into the domain of the caller using the supplied evidence.</para>
      </summary>
      <param name="assemblyRef">The <see cref="T:System.Reflection.AssemblyName" /> object that describes the assembly to be loaded.</param>
      <param name="assemblySecurity">Evidence for loading the assembly.</param>
      <returns>
        <para>The
      loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.LoadWithPartialName(System.String)">
      <summary>
        <para>Loads an assembly from the application directory or from
 the global assembly cache using a partial name.</para>
      </summary>
      <param name="partialName">The partial name of the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.LoadWithPartialName(System.String,System.Security.Policy.Evidence)">
      <summary>
        <para>Loads an assembly from the application directory or from 
 the global assembly cache using a partial name. The assembly is loaded into the domain of the caller using the
 supplied evidence.</para>
      </summary>
      <param name="partialName">The partial name of the assembly.</param>
      <param name="securityEvidence">
        <see cref="T:System.Security.Policy.Evidence" />for loading the assembly.</param>
      <returns>
        <para>The loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Byte[])">
      <summary>
        <para>Loads the assembly with
      a Common Object File Format (COFF)-based image containing an emitted assembly. The
      assembly is loaded into the domain of the caller.</para>
      </summary>
      <param name="rawAssembly">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</param>
      <returns>
        <para>The
      loaded
      assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[])">
      <summary>
        <para> Loads the assembly with a Common Object
      File Format (COFF)-based image containing an emitted assembly.</para>
      </summary>
      <param name="rawAssembly">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</param>
      <param name="rawSymbolStore">An array of type <see langword="byte" /> containing the raw bytes representing the symbols for the assembly.</param>
      <returns>
        <para>The
      loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)">
      <summary>
        <para>Loads the assembly with a Common Object File Format
      (COFF)-based image containing an emitted assembly.</para>
      </summary>
      <param name="rawAssembly">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly. </param>
      <param name="rawSymbolStore">An array of type <see langword="byte" /> containing the raw bytes representing the symbols for the assembly. </param>
      <param name="securityEvidence">Evidence for loading the assembly.</param>
      <returns>
        <para>The
      loaded assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[])">
      <summary>
        <para>Loads the module, internal to this assembly, with
      a Common Object File Format (COFF)-based image containing an emitted module, or a resource file.</para>
      </summary>
      <param name="moduleName">Name of the module. Must correspond to a File name in this assembly's manifest.</param>
      <param name="rawModule">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted module, or a resource. </param>
      <returns>
        <para>The
      loaded Module.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])">
      <summary>
        <para>Loads the module, internal to this assembly, with
      a Common Object File Format (COFF)-based image containing an emitted module, or a resource file.
      The raw bytes representing the symbols for the module are also loaded.</para>
      </summary>
      <param name="moduleName">Name of the module. Must correspond to a File name in this assembly's manifest.</param>
      <param name="rawModule">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted module, or a resource. </param>
      <param name="rawSymbolStore">An array of type <see langword="byte" /> containing the raw bytes representing the symbols for the module. Must be null if this is a resource file.</param>
      <returns>
        <para>The
      loaded Module.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.CreateInstance(System.String)">
      <summary>
        <para>Locates the specified type from this assembly and creates an instance of it using the
      system activator, using case-sensitive search. </para>
      </summary>
      <param name="typeName">The name of the type to locate.</param>
      <returns>
        <para>An instance of <see langword="Object" /> representing the type, with culture, 
   arguments, and binding and activation attributes set to <see langword="null" />, or <see langword="null" /> if <paramref name="typeName" /> is not found.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)">
      <summary>
        <para>Locates the specified type from this assembly and creates an instance of it using
      the system activator, with optional case-sensitive search.</para>
      </summary>
      <param name="typeName">The name of the type to locate.</param>
      <param name=" ignoreCase">
        <see langword="true" /> to ignore the case of the type name; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>An instance of <see langword="Object" /> representing the
   type, with culture, arguments, and activation attributes set to <see langword="null" />, and <see langword="BindingFlags" /> set to <see langword="NonPublic" />, or <see langword="null" /> if
<paramref name="typeName" /> is not
   found.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>
        <para>Locates the specified type from this assembly and creates
      an instance of it using the system activator, with optional case-sensitive search and having the
      specified culture, arguments, and binding and activation attributes.</para>
      </summary>
      <param name="typeName">The name of the type to locate.</param>
      <param name="ignoreCase">
        <see langword="true" /> to ignore the case of the type name; otherwise, <see langword="false" /> .</param>
      <param name=" bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of bit flags from <see cref="T:System.Reflection.BindingFlags" />. </param>
      <param name=" binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection. If <paramref name="binder" /> is <see langword="null" /> , the default binder is used.</param>
      <param name=" args">An array of type <see langword="Object" /> containing the arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the default constructor is desired, <paramref name="args" /> must be an empty array or <see langword="null" /> . </param>
      <param name=" culture">An instance of <see langword="CultureInfo" /> used to govern the coercion of types. If this is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread is used. (This is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, for example, since 1000 is represented differently by different cultures.)</param>
      <param name=" activationAttributes">
        <para>An array of type <see langword="Object" /> containing one or more activation attributes that can participate in the activation. An example of an activation attribute is:</para>
        <para>URLAttribute(http://hostname/appname/objectURI)</para>
      </param>
      <returns>
        <para>An instance of <see langword="Object" /> representing the type and matching the 
   specified criteria, or <see langword="null" /> if <paramref name="typeName" /> is not found.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetLoadedModules">
      <summary>
        <para>Gets all the
      loaded modules that are part of this assembly.</para>
      </summary>
      <returns>
        <para>An array of
      modules.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetLoadedModules(System.Boolean)">
      <summary>
        <para>Gets all the loaded modules that are part of this 
      assembly, specifying whether to include resource modules.</para>
      </summary>
      <param name="getResourceModules">
        <see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</param>
      <returns>
   An array of modules.
</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetModules">
      <summary>
        <para>Gets all the
 modules that are part of this assembly.</para>
      </summary>
      <returns>
        <para>An array of
 modules.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetModules(System.Boolean)">
      <summary>
        <para>Gets all the modules that are part of this assembly, specifying whether to
      include resource modules.</para>
      </summary>
      <param name="getResourceModules">
        <see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</param>
      <returns>
        <para>An array of modules.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetModule(System.String)">
      <summary>
        <para>Gets the
      specified module in this assembly.</para>
      </summary>
      <param name="name">The name of the module being requested.</param>
      <returns>
        <para>The <see cref="T:System.Reflection.Module" /> being
   requested.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetFile(System.String)">
      <summary>
        <para>Gets a <see cref="T:System.IO.FileStream" /> for the
   specified file in the file table of the manifest of this assembly.</para>
      </summary>
      <param name="name">The name of the specified file.</param>
      <returns>
        <para>A <see cref="T:System.IO.FileStream" /> for the specified
   file, or <see langword="null " />
   if the file is not found.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetFiles">
      <summary>
        <para> Gets the files in the file table of an assembly manifest.
      </para>
      </summary>
      <returns>
        <para> An array of <see cref="T:System.IO.FileStream" /> objects.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetFiles(System.Boolean)">
      <summary>
        <para>Gets the files in the file table of an assembly
      manifest, specifying whether to include resource modules.</para>
      </summary>
      <param name="getResourceModules">
        <see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</param>
      <returns>
        <para>An array of <see cref="T:System.IO.FileStream" /> objects.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceNames">
      <summary>
        <para>Returns the
      names of all the resources in this assembly.</para>
      </summary>
      <returns>
        <para>An array of type <see langword="String" /> containing the names of
   all the resources.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetExecutingAssembly">
      <summary>
        <para> Gets the <see cref="T:System.Reflection.Assembly" />
that the current code is running from.</para>
      </summary>
      <returns>
        <para> The assembly that the
      current code is running from.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetCallingAssembly">
      <summary>
        <para> Returns the <see cref="T:System.Reflection.Assembly" /> of the method that invoked the currently executing method.</para>
      </summary>
      <returns>
        <para> The <see langword="Assembly" />
object of the method that invoked the currently executing
method.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetEntryAssembly">
      <summary>
        <para>Gets the process executable in the default application 
      domain. In other application domains, this is the first executable that was
      executed by <see cref="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)" qualify="true" />
      .</para>
      </summary>
      <returns>
        <para>The <see langword="Assembly" /> that is the process executable in the 
   default application domain, or the first executable that was executed by <see cref="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)" qualify="true" /> .</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetReferencedAssemblies">
      <summary>
        <para>Gets the <see cref="T:System.Reflection.AssemblyName" />
 objects for all the assemblies referenced by this assembly.</para>
      </summary>
      <returns>
        <para>An array of type <see cref="T:System.Reflection.AssemblyName" /> containing all the assemblies referenced by this assembly.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)">
      <summary>
        <para>Returns information about how the given resource has been persisted.</para>
      </summary>
      <param name="resourceName">The name of the resource.</param>
      <returns>
        <para>
          <see cref="T:System.Reflection.ManifestResourceInfo" /> populated with information about
   the resource's topology, or <see langword="null" />
   if the resource is not found.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Assembly.ToString">
      <summary>
        <para>Returns the full name of the assembly, also known as the display name.</para>
      </summary>
      <returns>
        <para>The full name of the assembly, or the class name if the full name of the 
       assembly cannot be determined.</para>
      </returns>
    </member>
    <member name="E:System.Reflection.Assembly.ModuleResolve">
      <summary>
        <para>Occurs when the common language runtime class loader
      cannot resolve a reference to an internal module of an assembly through normal means.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Assembly.CodeBase">
      <summary>
        <para>Gets the location of the assembly as specified originally, for example, in an
   <see cref="T:System.Reflection.AssemblyName" /> object. </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Assembly.EscapedCodeBase">
      <summary>
        <para> Gets the URI, including escape characters, that 
      represents the codebase. </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Assembly.FullName">
      <summary>
        <para>Gets the display name of the assembly. </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Assembly.EntryPoint">
      <summary>
        <para> Gets the entry point of this
      assembly.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Assembly.Evidence">
      <summary>
        <para>Gets the
      evidence for this assembly. </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Assembly.Location">
      <summary>
        <para>Gets the location, in codebase format, of the loaded
      file that contains the manifest if not shadow-copied.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Assembly.GlobalAssemblyCache">
      <summary>
        <para>Gets a value indicating whether the assembly was 
      loaded from the global assembly cache.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.AssemblyCultureAttribute">
      <summary>
        <para>Specifies which culture the assembly supports.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyCultureAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyCultureAttribute" />
class with the culture supported by the assembly being
attributed.</para>
      </summary>
      <param name="culture">The culture supported by the attributed assembly.</param>
    </member>
    <member name="P:System.Reflection.AssemblyCultureAttribute.Culture">
      <summary>
        <para>Gets the supported culture of the attributed assembly.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.AssemblyVersionAttribute">
      <summary>
        <para> Specifies the version of the assembly being attributed.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyVersionAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="AssemblyVersionAttribute" /> 
   class with the version number of the assembly
   being attributed.</para>
      </summary>
      <param name="version">The version number of the attributed assembly.</param>
    </member>
    <member name="P:System.Reflection.AssemblyVersionAttribute.Version">
      <summary>
        <para>Gets the version number of the attributed assembly.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.AssemblyKeyFileAttribute">
      <summary>
        <para>Specifies
      the name of a file containing the key pair used to generate a shared
      name.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the
   <see langword="AssemblyKeyFileAttribute" />
   class with the name of the file containing
   the key pair to generate a strong name for the assembly being attributed.</para>
      </summary>
      <param name="keyFile">The name of the file containing the key pair.</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyFileAttribute.KeyFile">
      <summary>
        <para>Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.AssemblyKeyNameAttribute">
      <summary>
        <para>Specifies
      the name of a key container within the CSP containing the key pair used to
      generate a strong name.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyKeyNameAttribute" /> class with the name of the
   container holding the key pair used
   to generate a strong name for the assembly being attributed.</para>
      </summary>
      <param name="keyName">The name of the container containing the key pair.</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyNameAttribute.KeyName">
      <summary>
        <para>Gets the name of the container having the key pair that is used to generate
      a strong name for the attributed assembly.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.AssemblyDelaySignAttribute">
      <summary>
        <para> Specifies that the assembly is not fully signed when
      created.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyDelaySignAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyDelaySignAttribute" />
class.</para>
      </summary>
      <param name="delaySign">
        <see langword="true" /> if the feature this attribute represents is activated; otherwise, <see langword="false" /> .</param>
    </member>
    <member name="P:System.Reflection.AssemblyDelaySignAttribute.DelaySign">
      <summary>
   Gets a value indicating the state of the attribute.
</summary>
    </member>
    <member name="T:System.Reflection.AssemblyAlgorithmIdAttribute">
      <summary>
        <para> Specifies
      an algorithm to hash all files in an assembly. This class cannot
      be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyAlgorithmIdAttribute.#ctor(System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyAlgorithmIdAttribute" /> class with the
   specified hash algorithm, using one of the members of <see cref="T:System.Configuration.Assemblies.AssemblyHashAlgorithm" /> to
   represent the hash algorithm.</para>
      </summary>
      <param name="algorithmId">A member of <see langword="AssemblyHashAlgorithm" /> that represents the hash algorithm.</param>
    </member>
    <member name="M:System.Reflection.AssemblyAlgorithmIdAttribute.#ctor(System.UInt32)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Reflection.AssemblyAlgorithmIdAttribute" /> class with the 
   specified hash algorithm, using an unsigned integer to represent the hash
   algorithm.</para>
      </summary>
      <param name="algorithmId">An unsigned integer representing the hash algorithm.</param>
    </member>
    <member name="P:System.Reflection.AssemblyAlgorithmIdAttribute.AlgorithmId">
      <summary>
        <para>Gets the hash algorithm of an assembly manifest's contents.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.AssemblyFlagsAttribute">
      <summary>
        <para>Specifies whether an assembly supports side-by-side 
      execution on the same machine, in the same process, or in the same application
      domain. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.UInt32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> class with the specified side-by-side 
   execution flag.</para>
      </summary>
      <param name="flags">A value representing the kind of side-by-side execution allowed (same machine, same process, or same application domain).</param>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.Flags">
      <summary>
        <para> Gets the value representing the kind of side-by-side 
      execution allowed (same machine, same process, or same application domain).</para>
      </summary>
    </member>
    <member name="T:System.Reflection.AssemblyFileVersionAttribute">
      <summary>
        <para>Instructs a compiler to use a specific version number for the
      Win32 file version resource. The Win32 file version is not required
      to be the same as the assembly's version number.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyFileVersionAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFileVersionAttribute" /> class, specifiying the file version.</para>
      </summary>
      <param name="version">The file version.</param>
    </member>
    <member name="P:System.Reflection.AssemblyFileVersionAttribute.Version">
      <summary>
        <para>Gets the Win32 file version resource name.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.AssemblyName">
      <summary>
        <para> Fully describes an assembly's unique
      identity.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyName.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.Reflection.AssemblyName" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyName.Clone">
      <summary>
        <para>Makes a copy of this <see langword="AssemblyName" /> object.</para>
      </summary>
      <returns>
        <para>An <see langword="Object" /> that is a copy of this 
 <see langword="AssemblyName" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
      <summary>
        <para>Gets the <see langword="AssemblyName" /> for a given file.</para>
      </summary>
      <param name="assemblyFile">The assembly file for which to get the <see langword="AssemblyName" /> .</param>
      <returns>
        <para>An <see langword="AssemblyName" /> object representing the given
   file.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetPublicKey">
      <summary>
        <para>Gets the public key identifying the originator of the assembly.</para>
      </summary>
      <returns>
        <para>An array of type <see langword="byte" /> containing the public key of the assembly
   originator.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
      <summary>
        <para>Sets the public key identifying the originator of the assembly.</para>
      </summary>
      <param name="publicKey">A byte array containing the public key identifying the originator of the assembly.</param>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetPublicKeyToken">
      <summary>
        <para>Gets a strong name consisting of a public key, a given name, and version
      parts.</para>
      </summary>
      <returns>
        <para>An array of type <see langword="byte" /> containing the components of the
   strong name.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
      <summary>
        <para>Sets a strong name consisting of a public key, a given
      name, and version parts.</para>
      </summary>
      <param name="publicKeyToken">A byte array containing the strong name of the assembly.</param>
    </member>
    <member name="M:System.Reflection.AssemblyName.ToString">
      <summary>
        <para>Returns the full name of the assembly, also known as the display name.</para>
      </summary>
      <returns>
        <para>A <see langword="String" /> that is the full name of the
   assembly, or the class name if the full name of the assembly cannot be determined.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Gets serialization information with all of the data 
      needed to reinstantiate this <see langword="AssemblyName" /> .</para>
      </summary>
      <param name="info">The object to be populated with serialization information.</param>
      <param name=" context">The destination context of the serialization.</param>
    </member>
    <member name="M:System.Reflection.AssemblyName.OnDeserialization(System.Object)">
      <summary>
        <para>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and is called back by the
    deserialization event when deserialization is complete.</para>
      </summary>
      <param name="sender">The source of the deserialization event.</param>
    </member>
    <member name="M:System.Reflection.AssemblyName.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyName" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name=" context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.Reflection.AssemblyName.Name">
      <summary>
        <para> Gets or sets the simple,
      unencrypted name of the assembly.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.AssemblyName.Version">
      <summary>
        <para> Gets or sets the major, minor, revision,
      and build numbers of the assembly.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.AssemblyName.CultureInfo">
      <summary>
        <para> Gets or sets the culture supported by the
      assembly.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.AssemblyName.CodeBase">
      <summary>
        <para> Gets or sets the location
      of the assembly as a URL.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.AssemblyName.EscapedCodeBase">
      <summary>
        <para>Gets the URI, including escape characters, that represents the codebase. </para>
      </summary>
    </member>
    <member name="P:System.Reflection.AssemblyName.Flags">
      <summary>
        <para> Gets or sets the attributes of the
      assembly.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.AssemblyName.HashAlgorithm">
      <summary>
        <para> Gets or sets the hash algorithm used by the assembly manifest.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.AssemblyName.VersionCompatibility">
      <summary>
        <para>Gets or sets the information related to the assembly's
      compatibility with other assemblies.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.AssemblyName.KeyPair">
      <summary>
        <para> Gets or sets the public and private
      cryptographic key pair generated by the originator of the assembly.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.AssemblyName.FullName">
      <summary>
        <para> Gets the full name of the assembly, also known as the display name.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.AssemblyNameProxy">
      <summary>
        <para>Provides a remotable version of the 
   <see langword="AssemblyName" /> .</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)">
      <summary>
        <para>Gets the <see langword="AssemblyName" /> for a given file.</para>
      </summary>
      <param name="assemblyFile">The assembly file for which to get the <see langword="AssemblyName" /> .</param>
      <returns>
        <para>An <see langword="AssemblyName" /> object representing the given file.</para>
      </returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameFlags">
      <summary>
        <para> Provides information about an <see cref="T:System.Reflection.Assembly" /> reference.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.None">
      <summary>
        <para>Specifies that no flags are in effect.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.PublicKey">
      <summary>
        <para> Specifies that an originator is formed from the full public key rather than the token.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.AssemblyCopyrightAttribute">
      <summary>
        <para>Defines a copyright custom attribute for an assembly manifest.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyCopyrightAttribute" /> class.</para>
      </summary>
      <param name="copyright">The copyright information.</param>
    </member>
    <member name="P:System.Reflection.AssemblyCopyrightAttribute.Copyright">
      <summary>
        <para>Gets copyright information. </para>
      </summary>
    </member>
    <member name="T:System.Reflection.AssemblyTrademarkAttribute">
      <summary>
        <para>Defines a trademark custom attribute for an assembly manifest.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyTrademarkAttribute" /> class.</para>
      </summary>
      <param name="trademark">The trademark information.</param>
    </member>
    <member name="P:System.Reflection.AssemblyTrademarkAttribute.Trademark">
      <summary>
        <para>Gets trademark information. </para>
      </summary>
    </member>
    <member name="T:System.Reflection.AssemblyProductAttribute">
      <summary>
        <para>Defines a product name custom attribute for an assembly manifest.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyProductAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyProductAttribute" /> class.</para>
      </summary>
      <param name="product">The product name information.</param>
    </member>
    <member name="P:System.Reflection.AssemblyProductAttribute.Product">
      <summary>
        <para>Gets product name information. </para>
      </summary>
    </member>
    <member name="T:System.Reflection.AssemblyCompanyAttribute">
      <summary>
        <para>Defines a company name custom attribute for an assembly manifest.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> class.</para>
      </summary>
      <param name="company">The company name information.</param>
    </member>
    <member name="P:System.Reflection.AssemblyCompanyAttribute.Company">
      <summary>
        <para>Gets company name information. </para>
      </summary>
    </member>
    <member name="T:System.Reflection.AssemblyDescriptionAttribute">
      <summary>
        <para>Defines an assembly description custom attribute for an assembly manifest.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyDescriptionAttribute" /> class.</para>
      </summary>
      <param name="description">The assembly description.</param>
    </member>
    <member name="P:System.Reflection.AssemblyDescriptionAttribute.Description">
      <summary>
        <para>Gets assembly description information. </para>
      </summary>
    </member>
    <member name="T:System.Reflection.AssemblyTitleAttribute">
      <summary>
        <para>Defines an assembly title custom attribute for an assembly manifest.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyTitleAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyTitleAttribute" /> class.</para>
      </summary>
      <param name="title">The assembly title.</param>
    </member>
    <member name="P:System.Reflection.AssemblyTitleAttribute.Title">
      <summary>
        <para>Gets assembly title information. </para>
      </summary>
    </member>
    <member name="T:System.Reflection.AssemblyConfigurationAttribute">
      <summary>
        <para>Defines an assembly configuration custom attribute (such as retail or debug) for an assembly manifest.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyConfigurationAttribute" /> class.</para>
      </summary>
      <param name="configuration">The assembly configuration.</param>
    </member>
    <member name="P:System.Reflection.AssemblyConfigurationAttribute.Configuration">
      <summary>
        <para>Gets assembly configuration information. </para>
      </summary>
    </member>
    <member name="T:System.Reflection.AssemblyDefaultAliasAttribute">
      <summary>
        <para>Defines a friendly default alias for an assembly manifest.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyDefaultAliasAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyDefaultAliasAttribute" /> class.</para>
      </summary>
      <param name="defaultAlias">The assembly default alias information.</param>
    </member>
    <member name="P:System.Reflection.AssemblyDefaultAliasAttribute.DefaultAlias">
      <summary>
        <para>Gets default alias information. </para>
      </summary>
    </member>
    <member name="T:System.Reflection.AssemblyInformationalVersionAttribute">
      <summary>
        <para>Defines an assembly informational version custom attribute for an assembly manifest.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" /> class.</para>
      </summary>
      <param name="informationalVersion">The assembly version information.</param>
    </member>
    <member name="P:System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion">
      <summary>
        <para>Gets version information. </para>
      </summary>
    </member>
    <member name="T:System.Reflection.CustomAttributeFormatException">
      <summary>
        <para> The exception that is
      thrown when the binary format of a custom attribute is invalid.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeFormatException" />
 class with the default properties.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeFormatException" /> class with the specified message.</para>
      </summary>
      <param name="message">The message that indicates the reason this exception was thrown.</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeFormatException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeFormatException" /> class with the 
   specified serialization and context information.</para>
      </summary>
      <param name="info">The data for serializing or deserializing the custom attribute.</param>
      <param name=" context">The source and destination for the custom attribute.</param>
    </member>
    <member name="T:System.Reflection.BindingFlags">
      <summary>
        <para> Specifies flags that control binding and the way in
      which the search for members and types is conducted by reflection.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Default">
      <summary>
        <para>Specifies no binding flag.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreCase">
      <summary>
    Specifies that the case of the member name should not be
    considered when binding.
 </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.DeclaredOnly">
      <summary>
        <para>Specifies that only members declared at the level of the supplied type's
       hierarchy should be considered. Inherited members are not considered.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Instance">
      <summary>
        <para>
       Specifies that instance members are to be included in the search.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Static">
      <summary>
        <para>
       Specifies that static members are to be included in the search.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Public">
      <summary>
        <para>
       Specifies that public members are to be included in the search.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.NonPublic">
      <summary>
        <para>
       Specifies that non-public members are to be included in the search.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.FlattenHierarchy">
      <summary>
        <para>Specifies that static members up the hierarchy should be 
       returned. Static members include fields, methods, events, and properties. Nested types are not returned.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.InvokeMethod">
      <summary>
        <para>Specifies that a method is to be invoked. This may not be a constructor or a 
       type initializer.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.CreateInstance">
      <summary>
        <para>Specifies that Reflection should create an instance of 
       the specified type. Calls the constructor that matches the given arguments. The supplied member name is ignored. If the type of
       lookup is not specified, (Instance | Public) will apply. It is
       not possible to call a type initializer.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.GetField">
      <summary>
        <para>
       Specifies that the value of the specified field should be returned.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SetField">
      <summary>
        <para>
       Specifies that the value of the specified field should be set.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.GetProperty">
      <summary>
        <para>
       Specifies that the value of the specified property should be returned.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SetProperty">
      <summary>
        <para>Specifies that the value of the specified property should 
      be set. For COM properties, specifying this binding flag is equivalent to
      specifying <see langword="PutDispProperty" /> and
   <see langword="PutRefDispProperty" /> .</para>
      </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.PutDispProperty">
      <summary>
        <para>Specifies that the <see langword="PROPPUT" /> member on a
   COM object should be invoked. <see langword="PROPPUT " />specifies a property-setting
   function that uses a value. Use <see langword="PutDispProperty" /> if a property
   has both <see langword="PROPPUT" /> and <see langword="PROPPUTREF" /> and you need to distinguish which one is
   called.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.PutRefDispProperty">
      <summary>
        <para>Specifies that the <see langword="PROPPUTREF" /> member on
   a COM object should be invoked. <see langword="PROPPUTREF" /> specifies a
   property-setting function that uses a reference instead of a value. Use
<see langword="PutRefDispProperty" /> if a property has both 
<see langword="PROPPUT" /> and <see langword="PROPPUTREF" /> and you need to distinguish which one is 
   called. </para>
      </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.ExactBinding">
      <summary>
        <para>Specifies that types of the supplied arguments must
      exactly match the types of the corresponding formal parameters. When this flag
      is specified, <see cref="P:System.Type.DefaultBinder" qualify="true" />
      is called. Reflection throws an exception if the caller supplies a non-null
   <see langword="Binder" /> object, since that implies that the caller is supplying
   <see langword="BindToXXX " />
   
   implementations that will pick the appropriate
   method.</para>
        <para>Reflection models the accessibility rules of the common type system. For
   example, if the caller is in the same assembly, the caller does not need special
   permissions for internal members. Otherwise, the caller needs <see cref="T:System.Security.Permissions.ReflectionPermission" /> . This is consistent with lookup of
   members that are protected, private, and so on. </para>
        <para>The general principle is that <see cref="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" /> should perform only
widening coercions, which never lose data. An example of a widening coercion is
coercing a value that is a 32-bit signed integer to a value that is a 64-bit
signed integer. This is distinguished from a narrowing coercion, which may lose
data. An example of a narrowing coercion is coercing a 64-bit signed integer to
a 32-bit signed integer. </para>
        <para>The default binder ignores this flag, while custom binders can implement 
   the semantics of this flag.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SuppressChangeType">
      <summary>
   Not implemented.
</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.OptionalParamBinding">
      <summary>
        <para>Returns the set of members whose parameter count matches the number of supplied arguments.
      This binding flag is used for methods with parameters that have default
      values and methods with variable arguments (varargs). This flag should only be used with
   <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" qualify="true" />.</para>
        <para>Parameters with default values are used only in calls where trailing 
      arguments are omitted. They must be the last arguments.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreReturn">
      <summary>
        <para>Used in COM Interop to specify that the return value of
      the member can be ignored.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.CallingConventions">
      <summary>
        <para> Defines the valid calling conventions for an enumeration.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Standard">
      <summary>
        <para>Specifies the default calling convention as determined by the common language runtime.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.VarArgs">
      <summary>
        <para>
       Specifies the calling convention for methods with variable arguments.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Any">
      <summary>
        <para> Specifies that either the <see langword="Standard" /> or 
   the <see langword="VarArgs " /> calling convention may be
   used.
   </para>
      </summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.HasThis">
      <summary>
        <para> Specifies an instance or virtual method (not a
      static method). At run-time, the called method is passed a pointer to the target
      object as its first argument (the <see langword="this" />
      pointer). The signature stored in metadata does not include the type of this first
      argument, because the method is known and its owner class can be discovered from metadata.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.ExplicitThis">
      <summary>
        <para>Specifies that the signature is a function-pointer 
       signature, representing a call to an instance or virtual method (not a static
       method). If <see langword="ExplicitThis" /> is set, <see langword="HasThis" /> must
       also be set. The first argument passed to the called method is still a
    <see langword="this" /> pointer, but the type of the first argument is now 
       unknown. Therefore, a token that describes the type (or class) of the
    <see langword="this" /> 
    pointer is explicitly stored into its metadata signature.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.ConstructorInfo">
      <summary>
        <para>Discovers the attributes of a class constructor and
      provides access to constructor metadata.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.MethodBase">
      <summary>
        <para> Provides information about methods and constructors.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.MethodBase.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.MethodBase" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.MethodBase.GetParameters">
      <summary>
        <para>When overridden in a derived class, gets the parameters
      of the specified method or constructor.</para>
      </summary>
      <returns>
        <para>An array of type <see langword="ParameterInfo" />
containing information that matches the signature of the method (or constructor)
reflected by this <see langword="MethodBase" />
instance.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodImplementationFlags">
      <summary>
        <para>When overridden in a derived class, returns
      the <see cref="T:System.Reflection.MethodImplAttributes" /> flags. </para>
      </summary>
      <returns>
        <para>The <see langword="MethodImplAttributes" /> flags.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)">
      <summary>
        <para>Gets method information by using the method's internal metadata representation (handle). </para>
      </summary>
      <param name="handle">The method's handle.</param>
      <returns>
        <para>
          <see langword="MethodBase" /> information about the method.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetCurrentMethod">
      <summary>
        <para>Returns a <see langword="MethodBase" />
 object representing the currently
 executing method.</para>
      </summary>
      <returns>
        <para>A <see langword="MethodBase" />
 object representing the currently
 executing method.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])">
      <summary>
        <para>Invokes the underlying method or constructor represented
      by this <see langword="MethodInfo" /> object with the specified parameters.</para>
      </summary>
      <param name="obj">The instance that created this method.</param>
      <param name=" parameters">
        <para>An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, this should be <see langword="null" /> .</para>
        <para>If the method or constructor represented by this instance takes a ByRef parameter, there is no special attribute required for that parameter in order to invoke the method or constructor using this function. If the parameters contain an uninitialized object, it is treated as <see langword="System.Empty" />, which, with the default binder, can be widened to 0, 0.0 or <see langword="String" /> . </para>
      </param>
      <returns>
        <para> An <see langword="Object" /> containing the return value
   of the invoked method, or a re-initialized object in the case of a constructor.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
        <para> When overridden in a derived class, invokes the reflected method or constructor with
      the given parameters.</para>
      </summary>
      <param name="obj">The object on which to invoke the method or constructor. If the method or constructor is static, this argument is ignored.</param>
      <param name=" invokeAttr">A bitmask that is a combination of 0 or more bit flags from <see cref="T:System.Reflection.BindingFlags" />, such as <see langword="DefaultBinding" />, <see langword="NonPublic" /> , and so on. If <paramref name="binder" /> is <see langword="null" /> , this parameter will be assigned the value <see langword="BindingFlags.DefaultBinding" /> ; thus, whatever you pass in is ignored.</param>
      <param name=" binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection. If <paramref name="binder" /> is <see langword="null" /> , the default binder is used.</param>
      <param name=" parameters">
        <para>An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, this should be <see langword="null" /> .</para>
        <para>If the method or constructor represented by this instance takes a ByRef parameter, there is no special attribute required for that parameter in order to invoke the method or constructor using this function. If the parameters contain an uninitialized object, it is treated as <see langword="System.Empty" />, which, with the default binder, can be widened to 0, 0.0 or <see langword="String" /> . </para>
      </param>
      <param name=" culture">An instance of <see langword="CultureInfo" /> used to govern the coercion of types. If this is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread is used. (This is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, for example, since 1000 is represented differently by different cultures.)</param>
      <returns>
        <para>An <see langword="Object" /> containing the return value
   of the invoked method, or a reinitialized object in the case
   of a constructor, or <see langword="null " />if
   the method's return type is <see langword="void" />. Before calling the method or constructor,
<see langword="Invoke" />
checks to see if the user
has access permission and verify that the parameters are valid.</para>
      </returns>
    </member>
    <member name="P:System.Reflection.MethodBase.MethodHandle">
      <summary>
        <para>Gets a handle to the internal metadata representation of
      a method.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MethodBase.Attributes">
      <summary>
        <para>Gets the attributes associated with this method. </para>
      </summary>
    </member>
    <member name="P:System.Reflection.MethodBase.IsPublic">
      <summary>
        <para>Gets a value indicating whether this is a public method.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MethodBase.IsPrivate">
      <summary>
        <para> Gets a value indicating whether this member
      is private.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamily">
      <summary>
        <para> Gets a value indicating whether access to this method is restricted to members of the class and members of its
      derived classes.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAssembly">
      <summary>
        <para> Gets a 
       value indicating whether this method can be called by
       other classes in the same assembly.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamilyAndAssembly">
      <summary>
        <para>Gets a value indicating whether this method can be called by derived classes if they are in the same assembly.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamilyOrAssembly">
      <summary>
        <para>Gets a value indicating whether this method can be called by derived classes, wherever they are, and by all
      classes in the same assembly.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MethodBase.IsStatic">
      <summary>
        <para>Gets a value indicating whether the method is
   <see langword="static" /> .</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFinal">
      <summary>
        <para>Gets a value indicating whether this method is
   <see langword="final" /> .</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MethodBase.IsVirtual">
      <summary>
        <para> Gets a value indicating whether the method is
   <see langword="virtual" /> .</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MethodBase.IsHideBySig">
      <summary>
        <para> Gets a value indicating whether only a member of the same 
       kind with exactly the same signature is hidden in the derived class. </para>
      </summary>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAbstract">
      <summary>
        <para>Gets a value indicating whether the method is 
    <see langword="abstract" /> .</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSpecialName">
      <summary>
        <para>Gets a value indicating whether this method has a special name.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MethodBase.IsConstructor">
      <summary>
        <para>Gets a value indicating whether the method is a constructor.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MethodBase.CallingConvention">
      <summary>
        <para>Gets a value
       indicating the calling conventions for this method.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ConstructorInfo.ConstructorName">
      <summary>
        <para> Represents the name of the class constructor method as it is stored in metadata. This name is
      always ".ctor". This field is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ConstructorInfo.TypeConstructorName">
      <summary>
        <para> Represents the name of the type constructor method as
      it is stored in metadata. This name is always ".cctor". This property is
      read-only.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.ConstructorInfo" /> 
 class.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])">
      <summary>
        <para> Invokes the constructor reflected by the
      instance that has the specified parameters, providing default values for the parameters not commonly
      used.</para>
      </summary>
      <param name="parameters">An array of values that matches the number, order and type (under the constraints of the default binder) of the parameters for this constructor. If this constructor takes no parameters, then use either an array with zero elements or <see langword="null" /> , as in Object[] parameters = new Object[0]. If the parameters contain an uninitialized object, it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or <see langword="String" /> .</param>
      <returns>
        <para>An instance of the class associated with the constructor.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
        <para> When implemented in a derived class,
      invokes the constructor reflected by this
   <see langword="ConstructorInfo " />with the specified arguments, under the
      constraints of the specified <see langword="Binder" />
      .</para>
      </summary>
      <param name="invokeAttr">One of the <see langword="BindingFlags" /> values that specifies the type of binding.</param>
      <param name=" binder">A <see langword="Binder" /> that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If <paramref name="binder " />is <see langword="null" />, then <see langword="Binder.DefaultBinding" /> is used.</param>
      <param name=" parameters">An array of type <see langword="Object" /> used to match the number, order and type of the parameters for this constructor, under the constraints of <paramref name="binder" />. If this constructor does not require parameters, pass an array with zero elements, as in Object[] parameters = new Object[0]. If the parameters contain an uninitialized <see langword="Object" />, it is treated as empty which, with the default binder, can be widened to 0, 0.0 or <see langword="String" /> .</param>
      <param name=" culture">A <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. If this is <see langword="null" /> , the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</param>
      <returns>
        <para>An instance of the class associated with the constructor.</para>
      </returns>
    </member>
    <member name="P:System.Reflection.ConstructorInfo.MemberType">
      <summary>
        <para> Specifies the type of member that this instance reflects. This property is read-only.
      </para>
      </summary>
    </member>
    <member name="T:System.Reflection.DefaultMemberAttribute">
      <summary>
        <para>
       Defines the member of a type that is the default member
       used by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
       . The default member is a name given to a
       type.
    </para>
      </summary>
    </member>
    <member name="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.Reflection.DefaultMemberAttribute" />
       class.
    </para>
      </summary>
      <param name="memberName">
        <para> A <see langword="String" /> containing the name of the member to invoke. This may be a constructor, method, property, or field. A suitable invocation attribute must be specified. The default member of a class can be invoked by passing an empty <see langword="String" /> as the name of the member.</para>
        <para>The default member of a type is marked with the <see langword="DefaultMemberAttribute" /> custom attribute or marked in COM in the usual way. </para>
      </param>
    </member>
    <member name="P:System.Reflection.DefaultMemberAttribute.MemberName">
      <summary>
        <para>
       Gets the name from the attribute.
    </para>
      </summary>
    </member>
    <member name="T:System.Reflection.EventAttributes">
      <summary>
        <para> Specifies the attributes
      of an event.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.None">
      <summary>
        <para>
       Specifies that the event has
       no attributes.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.SpecialName">
      <summary>
        <para>
       Specifies that the event is special in a way described by the name.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.ReservedMask">
      <summary>
        <para>Specifies a reserved flag for common language runtime use only.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.RTSpecialName">
      <summary>
        <para>Specifies that the common language runtime should check name encoding.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.EventInfo">
      <summary>
        <para>Discovers the attributes of an event and
      provides access to event metadata.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.EventInfo.#ctor">
      <summary>
        <para>
       Initializes a new instance of the
    <see langword="EventInfo" />
    class.
 </para>
      </summary>
    </member>
    <member name="M:System.Reflection.EventInfo.GetAddMethod">
      <summary>
        <para> Returns the method 
      used to
      add an event handler delegate to the event
      source.</para>
      </summary>
      <returns>
        <para> A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an 
   event handler delegate to the event source.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
      <summary>
        <para> When overridden in a derived class, retrieves the
   <see langword="MethodInfo " />object for the <see langword="Add" />
   
   method of the
   event,
   specifying
   whether the method is public or nonpublic.
   </para>
      </summary>
      <param name="nonPublic">
        <see langword="true" /> if the method is not public; otherwise, <see langword="false" /> . </param>
      <returns>
        <para> A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the
   event source.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRemoveMethod">
      <summary>
        <para> Returns the method used
      to
      remove an event handler delegate from
      the event source.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove 
   an event handler
   delegate from the event source.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
      <summary>
        <para> When overridden in a derived class, retrieves the
   <see langword="MethodInfo" />
   
   object for removing a method of the
   event, specifying whether the method is public or nonpublic.
   </para>
      </summary>
      <param name="nonPublic">
        <see langword="true" /> if the method is not public; otherwise, <see langword="false" /> . </param>
      <returns>
        <para>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRaiseMethod">
      <summary>
        <para> Returns the method that is called when
      the event is raised.</para>
      </summary>
      <returns>
        <para>A <see langword="MethodInfo" />
object that you call to unsubscribe to an event.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
      <summary>
        <para> When overridden in a derived class, returns the method that is called when the event is raised, specifying whether
      the method is public or nonpublic.</para>
      </summary>
      <param name="nonPublic">
        <see langword="true" /> if the method is not public; otherwise, <see langword="false" /> . </param>
      <returns>
        <para>A <see langword="MethodInfo" />
object that was
called when the event was raised.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>
        <para> Adds an event handler to an event source.
      </para>
      </summary>
      <param name="target">The event source. </param>
      <param name="handler">Encapsulates a method or methods to be invoked when the event is raised by the target. </param>
    </member>
    <member name="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>
        <para>Removes an event handler from an event source.</para>
      </summary>
      <param name="target">The event source.</param>
      <param name="handler">Encapsulates one or more methods to be invoked when the event is raised by the target.</param>
    </member>
    <member name="P:System.Reflection.EventInfo.MemberType">
      <summary>
        <para>Gets the member type of this event.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.EventInfo.EventHandlerType">
      <summary>
        <para>Gets the <see langword="Type" />
object of the underlying event-handler delegate associated with this event.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.EventInfo.Attributes">
      <summary>
        <para>Gets the attributes for
      this event.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.EventInfo.IsSpecialName">
      <summary>
        <para> Gets a value
      indicating whether the <see langword="EventInfo" /> has a name
      with a special meaning.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.EventInfo.IsMulticast">
      <summary>
        <para> Gets a
      value indicating whether the event
      is multicast.
      </para>
      </summary>
    </member>
    <member name="T:System.Reflection.FieldAttributes">
      <summary>
        <para>Specifies flags that describe the attributes of a field.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FieldAccessMask">
      <summary>
        <para>
       Specifies the access level of a given field.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PrivateScope">
      <summary>
        <para>
       Specifies that the field cannot be referenced.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Private">
      <summary>
        <para>
       Specifies that the field is accessible only by the parent type.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamANDAssem">
      <summary>
        <para>       Specifies that the field is accessible only by subtypes in this
      assembly.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Assembly">
      <summary>
        <para>
       Specifies that the field is accessible throughout the assembly.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Family">
      <summary>
        <para> Specifies that the field is accessible only by type and subtypes.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamORAssem">
      <summary>
        <para>       Specifies that the field is accessible by subtypes anywhere, as well as
      throughout this assembly.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Public">
      <summary>
        <para>
       Specifies that the field is accessible by any member for whom this scope
       is visible.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Static">
      <summary>
        <para>
       Specifies that the field represents the defined type, or else it is
       per-instance.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.InitOnly">
      <summary>
        <para>
       Specifies that the field is initialized only, and cannot be written after
       initialization.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Literal">
      <summary>
        <para>
       Specifies that the field's value is a compile-time (static or early bound)
       constant. No set accessor.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.NotSerialized">
      <summary>
        <para>
       Specifies that the field does not have to be serialized when the type is
       remoted.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.SpecialName">
      <summary>
        <para>
       Specifies a special method, with the name describing how the method is
       special.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PinvokeImpl">
      <summary>
        <para> Reserved for future use. 
   </para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.ReservedMask">
      <summary>
        <para> Reserved.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.RTSpecialName">
      <summary>
        <para>Specifies that the common language runtime (metadata internal APIs) should check the
      name encoding.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldMarshal">
      <summary>
        <para>
       Specifies that the field has marshalling information.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasDefault">
      <summary>
        <para>
       Specifies that the field has a default value.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldRVA">
      <summary>
        <para>
       Specifies that the field has a Relative Virtual Address (RVA). The RVA is the
       location of the method body in the current image, as an address relative to the
       start of the image file in which it is located.
    </para>
      </summary>
    </member>
    <member name="T:System.Reflection.FieldInfo">
      <summary>
        <para>Discovers the attributes of a field and provides access
      to field metadata.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.FieldInfo.#ctor">
      <summary>
        <para>
       Initializes a new instance of the
    <see langword="FieldInfo" />
    class.
 </para>
      </summary>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetValue(System.Object)">
      <summary>
        <para> When overridden in a derived
      class, returns the value of a field supported by a given object.
      </para>
      </summary>
      <param name="obj">The object whose field value will be returned. </param>
      <returns>
        <para> An object containing the value of the field reflected by this
      instance.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
      <summary>
        <para> Returns the value of a field supported by a given object.
 </para>
      </summary>
      <param name="obj">A managed pointer to a location and a runtime representation of the type that might be stored at that location. </param>
      <returns>
        <para>An <see langword="Object" /> containing a field value.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
      <summary>
        <para> Sets the value of the field supported by the given object.
      </para>
      </summary>
      <param name="obj">The object whose field value will be set. </param>
      <param name=" value">The value to assign to the field. </param>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>
        <para> When overridden in a derived class, sets the value of the field
      supported by the given object.
      </para>
      </summary>
      <param name="obj">The object whose field value will be set. </param>
      <param name="value">The value to assign to the field. </param>
      <param name=" invokeAttr">A field of <see langword="Binder" /> that specifies the type of binding that is desired (for example, <see langword="Binder.CreateInstance" /> or <see langword="Binder.ExactBinding" /> ). </param>
      <param name=" binder">A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection. If <paramref name="binder " />is <see langword="null" />, then <see langword="Binder.DefaultBinding" /> is used. </param>
      <param name=" culture">The software preferences of a particular culture. </param>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
      <summary>
        <para> Sets the value of the field supported by the given object.
 </para>
      </summary>
      <param name="obj">A managed pointer to a location and a runtime representation of the type that can be stored at that location. </param>
      <param name=" value">The value to assign to the field. </param>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
      <summary>
        <para>Gets a <see langword="FieldInfo" />
containing the value of the field
reflected
by this instance.</para>
      </summary>
      <param name="handle">A handle to the internal metadata representation of a field.</param>
      <returns>
        <para>A <see langword="FieldInfo" />
containing the value of
the field reflected by this instance.</para>
      </returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.MemberType">
      <summary>
        <para>Gets the <see langword="Type" /> of property reflected by
    this <see langword="FieldInfo" />
    object. The retrieved value indicates that this member is a field.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.FieldType">
      <summary>
        <para> Gets the type of
      this field object.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.FieldHandle">
      <summary>
        <para>Gets a <see langword="RuntimeFieldHandle" />
, which is a handle to the
internal metadata representation
of
a field.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.Attributes">
      <summary>
        <para>Gets the attributes associated with this field.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPublic">
      <summary>
        <para> Gets a value indicating whether the field is public.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPrivate">
      <summary>
        <para> Gets a value indicating whether the field is private.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamily">
      <summary>
        <para>Gets a value
      indicating
      whether this field has Family level visibility.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsAssembly">
      <summary>
        <para> Gets a value
      indicating
      whether this field has Assembly level visibility.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
      <summary>
        <para> Gets a value indicating whether this field has
   <see langword="FamilyAndAssembly" />
   level visibility.
   </para>
      </summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
      <summary>
        <para> Gets a value indicating whether this field has
   <see langword="FamilyOrAssembly" />
   level visibility.
   </para>
      </summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsStatic">
      <summary>
        <para> Gets a
      value indicating whether the field is static.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsInitOnly">
      <summary>
        <para> Gets a
      value indicating whether the field can only be set in the body of the
      constructor.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsLiteral">
      <summary>
        <para> Gets a
      value
      indicating whether the value is written at compile time and cannot be changed.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsNotSerialized">
      <summary>
        <para> Gets a value indicating whether this field has the
   <see langword="NotSerialized" />
   attribute.
   </para>
      </summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSpecialName">
      <summary>
        <para> Gets a value indicating whether the corresponding
   <see langword="SpecialName" />
   attribute is set in the <see cref="T:System.Reflection.FieldAttributes" /> enumerator.
   </para>
      </summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPinvokeImpl">
      <summary>
        <para> Gets a value indicating whether the corresponding
   <see langword="PinvokeImpl" />
   attribute is set in <see cref="T:System.Reflection.FieldAttributes" />.
   </para>
      </summary>
    </member>
    <member name="T:System.Reflection.InterfaceMapping">
      <summary>
        <para>Retrieves the mapping of an interface into the actual methods
       on a class that implements that interface.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.TargetType">
      <summary>
        <para> Represents the type that implements the
      interface.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.InterfaceType">
      <summary>
        <para>
       Shows the type that represents the
       interface.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.TargetMethods">
      <summary>
        <para>Shows the methods that implement the
      interface.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.InterfaceMethods">
      <summary>
        <para>Shows the methods that are defined on the
      interface.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.InvalidFilterCriteriaException">
      <summary>
        <para>The exception that is thrown in <see cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" /> when
   the filter criteria is not valid for the type
   of filter you are using.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.InvalidFilterCriteriaException" />
class with the default properties.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Reflection.InvalidFilterCriteriaException" />
class with the given HRESULT and message string.</para>
      </summary>
      <param name="message">The message text for the exception. </param>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.InvalidFilterCriteriaException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.InvalidFilterCriteriaException" /> class with the specified serialization and 
   context information.</para>
      </summary>
      <param name="info">A <see langword="SerializationInfo" /> object that contains the information required to serialize this instance.</param>
      <param name=" context">A <see langword="StreamingContext" /> object that contains the source and destination of the serialized stream associated with this instance. </param>
    </member>
    <member name="T:System.Reflection.ManifestResourceInfo">
      <summary>
        <para>Contains manifest resource topology information.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.ReferencedAssembly">
      <summary>
        <para>Indicates the containing assembly. This property is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.FileName">
      <summary>
        <para>Indicates the name of the file containing the manifest resource, if not the same as the manifest file. This property is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.ResourceLocation">
      <summary>
        <para>Indicates the manifest resource's location. This property is read-only.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.ResourceLocation">
      <summary>
        <para>Specifies the resource location.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.Embedded">
      <summary>
        <para>Specifies an embedded (that is, non-linked) resource.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.ContainedInAnotherAssembly">
      <summary>
        <para>Specifies that the resource is contained in another assembly.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.ContainedInManifestFile">
      <summary>
        <para>Specifies that the resource is contained in the manifest file.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.MemberFilter">
      <summary>
        <para> Represents a delegate that is used to filter a list of
      members represented in an array of <see cref="T:System.Reflection.MemberInfo" />
      objects.
      </para>
      </summary>
      <param name="m">The <see cref="T:System.Reflection.MemberInfo" /> object to which the filter is applied. </param>
      <param name="filterCriteria">An arbitrary object used to filter the list. </param>
    </member>
    <member name="T:System.Reflection.MemberTypes">
      <summary>
        <para>Marks each type of member that is defined as a derived
      class of <see langword="MemberInfo" /> .</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Constructor">
      <summary>
        <para> Specifies that the member is a constructor,
      representing a <see cref="T:System.Reflection.ConstructorInfo" /> member. Hexadecimal value of 0x01.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Event">
      <summary>
        <para>Specifies that the member is an event, representing an <see cref="T:System.Reflection.EventInfo" />
member. Hexadecimal value of 0x02.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Field">
      <summary>
        <para>Specifies that the member is a field, representing a <see cref="T:System.Reflection.FieldInfo" />
member. Hexadecimal value of 0x04.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Method">
      <summary>
        <para>Specifies that the member is a method, representing a <see cref="T:System.Reflection.MethodInfo" />
member. Hexadecimal value of 0x08.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Property">
      <summary>
        <para>Specifies that the member is a property, representing a <see cref="T:System.Reflection.PropertyInfo" />
member. Hexadecimal value of 0x10.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.TypeInfo">
      <summary>
        <para>Specifies that the member is a type, representing a <see cref="F:System.Reflection.MemberTypes.TypeInfo" />
member. Hexadecimal value of 0x20.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Custom">
      <summary>
        <para>Specifies that the member is a custom member type. Hexadecimal value of 0x40.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.NestedType">
      <summary>
        <para>Specifies that the member is a nested type, extending <see cref="T:System.Reflection.MemberInfo" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.All">
      <summary>
    Specifies all member types.
 </summary>
    </member>
    <member name="T:System.Reflection.MethodAttributes">
      <summary>
        <para> Specifies flags
      for method attributes. These flags are defined in the corhdr.h file.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.MemberAccessMask">
      <summary>
        <para>
       Retrieves accessibility information.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PrivateScope">
      <summary>
        <para>
       Indicates that the member cannot be referenced.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Private">
      <summary>
        <para> Indicates that the method is accessible
      only to the current class.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamANDAssem">
      <summary>
        <para> Indicates that the method is accessible to members of this type and its derived types that are in
      this assembly only.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Assembly">
      <summary>
        <para>
       Indicates that the method is accessible to any class of this
       assembly.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Family">
      <summary>
        <para>       Indicates that the method is accessible only to members of
      this class and its derived classes.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamORAssem">
      <summary>
        <para> Indicates that the method is accessible to derived classes
      anywhere, as well as to any class in the assembly.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Public">
      <summary>
        <para>
       Indicates that the method is accessible to any object for
       which this object is in scope.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Static">
      <summary>
        <para>
       Indicates that the method is defined on the type;
       otherwise, it is defined per instance.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Final">
      <summary>
        <para> Indicates that the method cannot be overridden.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Virtual">
      <summary>
        <para>
       Indicates that the method is virtual.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HideBySig">
      <summary>
        <para>
       Indicates that the method hides by name and signature;
       otherwise, by name only.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.VtableLayoutMask">
      <summary>
        <para>
       Retrieves vtable
       attributes.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.ReuseSlot">
      <summary>
        <para>
       Indicates that the method will reuse an existing slot in
       the vtable. This is
       the default behavior.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.NewSlot">
      <summary>
        <para>
       Indicates that the method always gets a new slot in the
       vtable.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Abstract">
      <summary>
        <para>
       Indicates that the class does not provide an implementation of
       this method.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.SpecialName">
      <summary>
        <para>
       Indicates that the method is special. The name describes how this method is special.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PinvokeImpl">
      <summary>
        <para>
       Indicates that the method implementation is forwarded
       through PInvoke (Platform Invocation
       Services).
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.UnmanagedExport">
      <summary>
        <para>
       Indicates that the managed method is exported by thunk to
       unmanaged code.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RTSpecialName">
      <summary>
        <para>Indicates that the common language runtime checks the name encoding.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.ReservedMask">
      <summary>
        <para>
       Indicates a reserved flag for runtime use only.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HasSecurity">
      <summary>
        <para>
       Indicates that the
       method has security associated with it. Reserved flag for runtime use only.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RequireSecObject">
      <summary>
        <para>
       Indicates that the
       method calls another method containing security code. Reserved flag for runtime
       use only.
    </para>
      </summary>
    </member>
    <member name="T:System.Reflection.MethodImplAttributes">
      <summary>
        <para> Specifies flags for the attributes of a method
      implementation.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.CodeTypeMask">
      <summary>
        <para>Specifies flags about code type.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.IL">
      <summary>
        <para>Specifies that the method implementation is in Microsoft intermediate language (MSIL).</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Native">
      <summary>
        <para>Specifies that the method implementation is native.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Runtime">
      <summary>
        <para>Specifies that the method implementation is provided by the runtime.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.ManagedMask">
      <summary>
        <para>Specifies whether the code is managed or unmanaged.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Unmanaged">
      <summary>
        <para>Specifies that the method implementation is unmanaged, otherwise
       managed.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Managed">
      <summary>
        <para>Specifies that the method implementation is managed, otherwise unmanaged.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.ForwardRef">
      <summary>
        <para>Specifies that the method is not defined.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.PreserveSig">
      <summary>
        <para> Specifies that the method signature is
      exported exactly as declared.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.InternalCall">
      <summary>
        <para>Specifies an internal call.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Synchronized">
      <summary>
        <para>Specifies that the method is single-threaded through the 
      body. You can also use the C# <see topic="vclrfLockStatement" title="lock statement" /> or the Visual
      Basic <see topic="vastmLock" title="Lock function" /> for this purpose.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.NoInlining">
      <summary>
        <para> Specifies that the method cannot be inlined.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.MaxMethodImplVal">
      <summary>
        <para>Specifies a range check value.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.MethodInfo">
      <summary>
        <para>Discovers the attributes of a method and provides access
      to method metadata.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.MethodInfo.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.MethodInfo" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetBaseDefinition">
      <summary>
        <para>When overridden in a derived class, returns the
   <see langword="MethodInfo" /> object
      for the method on the direct or indirect superclass in which the method represented
      by this instance was first declared.</para>
      </summary>
      <returns>
        <para>A <see langword="MethodInfo" /> object for the first implementation of this
   method.</para>
      </returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.MemberType">
      <summary>
        <para> Gets a value indicating that this member is a method.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnType">
      <summary>
        <para>Gets the return type of this method.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes">
      <summary>
        <para> Gets the custom attributes for the
       return type.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.Missing">
      <summary>
        <para> Represents a missing <see cref="T:System.Object" />. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Missing.Value">
      <summary>
        <para>
       Represents the sole instance of the <see cref="T:System.Reflection.Missing" />
       class.
    </para>
      </summary>
    </member>
    <member name="T:System.Reflection.Module">
      <summary>
        <para> 
       Performs
       reflection on a module.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Module.FilterTypeName">
      <summary>
        <para>A <see langword="TypeFilter" />
object that filters the list
of types defined in this module based upon the name. This field is case-sensitive and
read-only.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Module.FilterTypeNameIgnoreCase">
      <summary>
        <para>A <see langword="TypeFilter" />
object that filters the list of
types defined in this module based upon the name. This
field is case-insensitive and read-only.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String,System.Boolean)">
      <summary>
        <para> Returns the specified class, searching the module with
      the specified case sensitivity.</para>
      </summary>
      <param name="className">The name of the class to locate. The name must be fully qualified with the namespace.</param>
      <param name="ignoreCase">
        <see langword="true" /> for case-insensitive search; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>A <see langword="Type " /> object representing the given class name, if the class is in this
   module; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String)">
      <summary>
        <para> Returns the specified class, performing a case-sensitive
      search.</para>
      </summary>
      <param name="className">The name of the class to locate. The name must be fully qualified with the namespace.</param>
      <returns>
        <para>A <see langword="Type " />object representing the given class name, if the
   class is in this module; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>
        <para>Returns the specified class, searching the module with
      the specified case sensitivity and specifying whether to throw an exception if
      an error occurs while loading the <see langword="Type" />
      .</para>
      </summary>
      <param name="className">The name of the class to locate. The name must be fully qualified with the namespace.</param>
      <param name=" throwOnError">
        <para>
          <see langword="true" /> to throw a <see langword="TypeLoadException" /> if an error occurs while loading the <see langword="Type" /> . </para>
        <para>-or-</para>
        <para>
          <see langword="false" />to ignore errors while loading the <see langword="Type" /> . </para>
      </param>
      <param name="ignoreCase">
        <see langword="true" /> for case-insensitive search; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>A <see langword="Type " />object representing the given class name, if the
   class is in this module; otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)">
      <summary>
        <para>Returns an array of classes accepted by the given filter and
      filter criteria.</para>
      </summary>
      <param name="filter">The delegate used to filter the classes.</param>
      <param name="filterCriteria">An Object used to filter the classes.</param>
      <returns>
        <para> An array of type <see langword="Type" /> containing classes that were accepted by the filter.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Module.GetTypes">
      <summary>
        <para>Returns
       all the classes defined within this module.</para>
      </summary>
      <returns>
        <para>An array of type <see langword="Type" />
 containing classes defined within the module that is reflected by this
 instance.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Module.ToString">
      <summary>
        <para>Returns the name of the module.</para>
      </summary>
      <returns>
        <para> A <see langword="String " /> representing the name of
   this module.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Module.GetSignerCertificate">
      <summary>
        <para>Returns an <see langword="X509Certificate" /> object 
   corresponding to the certificate included in the Authenticode signature of the
   assembly which this module belongs to. If the assembly has not been Authenticode
   signed, <see langword="null" /> is returned. </para>
      </summary>
      <returns>
        <para>An <see langword="X509Certificate" /> object, 
   or <see langword="null" /> if the assembly to which this module belongs
   has not been Authenticode
   signed. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Module.GetMethods">
      <summary>
        <para> Returns an array of all the global methods defined on the module.</para>
      </summary>
      <returns>
        <para>An array of type <see langword="MethodInfo" /> containing all the global
   methods defined on the module.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Returns a method having the specified name, binding
      information, calling convention, and parameter types and modifiers.</para>
      </summary>
      <param name="name">The method name.</param>
      <param name="bindingAttr">One of the <see langword="BindingFlags" /> bit flags used to control the search.</param>
      <param name="binder">An object that implements <see langword="Binder" /> , containing properties related to this method. </param>
      <param name="callConvention">The calling convention for the method.</param>
      <param name="types">The parameter types to search for.</param>
      <param name="modifiers">An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.</param>
      <returns>
        <para>A <see langword="MethodInfo" /> object in accordance with
   the
   specified criteria.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String,System.Type[])">
      <summary>
        <para>Returns a method having the specified name and
      parameter types.</para>
      </summary>
      <param name="name">The method name.</param>
      <param name="types">The parameter types to search for.</param>
      <returns>
        <para>A <see langword="MethodInfo" /> object in accordance with the
   specified criteria.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String)">
      <summary>
        <para>Returns a method having the specified name.</para>
      </summary>
      <param name="name">The method name.</param>
      <returns>
        <para>A <see langword="MethodInfo" /> object having the
    specified name.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Returns the method implementation in accordance with the
      specified criteria.</para>
      </summary>
      <param name="name">The method name.</param>
      <param name="bindingAttr">One of the <see langword="BindingFlags" /> bit flags used to control the search.</param>
      <param name="binder">An object that implements <see langword="Binder" /> , containing properties related to this method. </param>
      <param name="callConvention">The calling convention for the method.</param>
      <param name="types">The parameter types to search for.</param>
      <param name="modifiers">An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.</param>
      <returns>
        <para>A <see langword="MethodInfo" /> object containing implementation information
   as specified.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Module.GetFields">
      <summary>
        <para>Returns an array of fields implemented by a class.</para>
      </summary>
      <returns>
        <para>An array of type <see langword="FieldInfo" />
containing the fields implemented by a class.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Module.GetField(System.String)">
      <summary>
        <para>Returns a field having the specified name.</para>
      </summary>
      <param name="name">The field name.</param>
      <returns>
        <para>A <see langword="FieldInfo" /> object having the
   specified name.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Returns a field having the specified name and binding
      attributes.</para>
      </summary>
      <param name="name">The field name.</param>
      <param name="bindingAttr">One of the <see langword="BindingFlags" /> bit flags used to control the search.</param>
      <returns>
        <para>A <see langword="FieldInfo" /> object having the specified name and
   binding attributes.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Provides an <see cref="T:System.Runtime.Serialization.ISerializable" /> implementation for serialized 
    objects.</para>
      </summary>
      <param name="info">The information and data needed to serialize or deserialize an object.</param>
      <param name=" context">The context for the serialization.</param>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributes(System.Boolean)">
      <summary>
        <para>Returns all custom attributes.</para>
      </summary>
      <param name="inherit">This argument is ignored for objects of this type. </param>
      <returns>
        <para>An array of type <see langword="Object" /> containing all custom
   attributes.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
        <para>Gets custom attributes of the
      specified type.</para>
      </summary>
      <param name="attributeType">The type of attribute to get.</param>
      <param name="inherit">This argument is ignored for objects of this type. </param>
      <returns>
        <para>An array of type <see langword="Object" /> containing all custom attributes of
   the specified type.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Module.IsDefined(System.Type,System.Boolean)">
      <summary>
        <para>Determines if the specified <paramref name="attributeType" /> is defined on this module.</para>
      </summary>
      <param name="attributeType">The Type object to which the custom attribute is applied.</param>
      <param name="inherit">This argument is ignored for objects of this type.</param>
      <returns>
        <para>
          <see langword="true" />
if one or more instance of <paramref name="attributeType" /> is defined on this module; otherwise,
<see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Module.IsResource">
      <summary>
        <para>Gets a value indicating whether the object is a resource.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the object is a resource; 
   otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="P:System.Reflection.Module.ScopeName">
      <summary>
        <para>Gets a string representing the name of the module.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Module.FullyQualifiedName">
      <summary>
        <para>Gets a string representing the fully qualified name and path to this module.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Module.Name">
      <summary>
        <para>Gets a <see langword="String" /> representing the name of the module with the path removed.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Module.Assembly">
      <summary>
        <para>Gets the appropriate <see cref="T:System.Reflection.Assembly" /> for this instance of <see cref="T:System.Reflection.Module" /> .</para>
      </summary>
    </member>
    <member name="T:System.Reflection.ParameterInfo">
      <summary>
        <para>Discovers the attributes of a parameter and provides access to parameter
      metadata.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ParameterInfo.NameImpl">
      <summary>
        <para>The name of the parameter.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ParameterInfo.ClassImpl">
      <summary>
        <para>The <see langword="Type" /> of the parameter.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ParameterInfo.PositionImpl">
      <summary>
        <para>The zero-based position of the parameter in the parameter list.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ParameterInfo.AttrsImpl">
      <summary>
        <para>The attributes of the parameter.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ParameterInfo.DefaultValueImpl">
      <summary>
        <para>The default value of the parameter.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ParameterInfo.MemberImpl">
      <summary>
        <para>The member in which the field is implemented.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.ParameterInfo.#ctor">
      <summary>
        <para>Initializes a new instance of the 
    <see langword="ParameterInfo" /> 
    class.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
      <summary>
        <para>Gets all the custom attributes defined on this parameter.</para>
      </summary>
      <param name="inherit">This argument is ignored for object of this type. </param>
      <returns>
        <para>An array of type <see langword="Object" /> containing all the custom attributes
   defined on this parameter.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
        <para>Gets the custom attributes of the specified type defined on this
      parameter.</para>
      </summary>
      <param name="attributeType">The custom attributes identified by type.</param>
      <param name="inherit">This argument is ignored for objects of this type. </param>
      <returns>
        <para>An array of type <see langword="Object " /> containing the custom attributes
   of the specified type.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
      <summary>
        <para>Determines if the custom attribute of the specified type
      is defined on this member.</para>
      </summary>
      <param name="attributeType">The <see langword="Type" /> object to search for.</param>
      <param name=" inherit">This argument is ignored for objects of this type.</param>
      <returns>
        <para>
          <see langword="true" /> if one or more instance of <paramref name="attributeType" /> is defined on this member; otherwise,
<see langword="false" />
.</para>
      </returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.ParameterType">
      <summary>
        <para>Gets the <see langword="Type" /> of this parameter.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Name">
      <summary>
        <para>Gets
      the name of the parameter.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Position">
      <summary>
        <para>Gets the signature position for the parameter.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Attributes">
      <summary>
        <para>Gets
      the attributes for this parameter.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsIn">
      <summary>
        <para>Gets a value
      indicating whether this is an input parameter.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsOut">
      <summary>
        <para>Gets a value
      indicating whether this is an output parameter.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsLcid">
      <summary>
        <para>Gets a value indicating whether this parameter is a
      locale identifier (lcid).</para>
      </summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsRetval">
      <summary>
        <para>Gets a value indicating whether this is a
   <see langword="Retval" />
   parameter.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsOptional">
      <summary>
        <para>Gets a value
      indicating whether this parameter is optional.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.DefaultValue">
      <summary>
        <para>Gets a value indicating the default value
      of the parameter has a default value.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Member">
      <summary>
        <para>Gets a value indicating the member in which the
      parameter is implemented.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.ParameterAttributes">
      <summary>
    Defines the attributes that may be associated with
    a parameter. These are defined in CorHdr.h.
 </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.None">
      <summary>
        <para>Specifies that there is no parameter attribute.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.In">
      <summary>
        <para>Specifies that the parameter is an input parameter. </para>
      </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Out">
      <summary>
        <para>Specifies that the parameter is an output parameter.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Lcid">
      <summary>
        <para>Specifies that the parameter is a locale identifier (lcid).</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Retval">
      <summary>
        <para>Specifies that the parameter is a return value.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Optional">
      <summary>
        <para>Specifies that the parameter is optional.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.ReservedMask">
      <summary>
        <para>Specifies that the parameter is reserved.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasDefault">
      <summary>
        <para>Specifies that the parameter has a default value.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasFieldMarshal">
      <summary>
        <para>Specifies that the parameter has field marshaling information.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Reserved3">
      <summary>
        <para>Reserved.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Reserved4">
      <summary>
        <para>Reserved.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.ParameterModifier">
      <summary>
        <para>Attaches a modifier to parameters so that binding
       can work with parameter signatures in which the
       types have been modified.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.ParameterModifier.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.ParameterModifier" /> class with the number of parameters to 
   modify.</para>
      </summary>
      <param name="paramaterCount">The number of parameters to modify.</param>
    </member>
    <member name="P:System.Reflection.ParameterModifier.Item(System.Int32)">
      <summary>
        <para> Gets or sets the index of the parameter array.</para>
      </summary>
      <param name="index">The integer representing the index position of the parameter array.</param>
    </member>
    <member name="T:System.Reflection.Pointer">
      <summary>
        <para>Provides a wrapper class for pointers.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Pointer.Box(System.Void*,System.Type)">
      <summary>
        <para>Boxes the supplied unmanaged memory pointer and the
      type associated with that pointer into a managed <see cref="T:System.Reflection.Pointer" /> wrapper object. The value and the type are saved so they can be
      accessed from the native code during an invocation. </para>
      </summary>
      <param name="ptr">The supplied unmanaged memory pointer.</param>
      <param name=" type">The type associated with the <paramref name="ptr " />parameter.</param>
      <returns>
        <para>A pointer object.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Pointer.Unbox(System.Object)">
      <summary>
        <para>Returns the stored pointer.</para>
      </summary>
      <param name="ptr">The stored pointer.</param>
      <returns>
        <para>This method returns void.</para>
      </returns>
    </member>
    <member name="T:System.Reflection.PropertyInfo">
      <summary>
        <para>Discovers the attributes of a property and provides access to property
      metadata.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.PropertyInfo.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.PropertyInfo" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
      <summary>
        <para>Returns the value of the property with optional index values for indexed properties.</para>
      </summary>
      <param name="obj">The object whose property value will be returned.</param>
      <param name=" index">Optional index values for indexed properties. This value should be <see langword="null" /> for non-indexed properties.</param>
      <returns>
        <para>The property value for the <paramref name="obj" />
parameter.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
        <para>When overridden in a derived class, returns the value of
      a property having the specified binding, index, and
      <see langword="CultureInfo" />
   .</para>
      </summary>
      <param name="obj">The object whose property value will be returned.</param>
      <param name=" invokeAttr">The invocation attribute. This must be a bit flag from <see langword="BindingFlags" />: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />. A suitable invocation attribute must be specified. If a static member is to be invoked, the <see langword="Static" /> flag of <see langword="BindingFlags" /> must be set.</param>
      <param name=" binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection. If <paramref name="binder" /> is <see langword="null" /> , the default binder is used.</param>
      <param name=" index">Optional index values for indexed properties. This value should be <see langword="null" /> for non-indexed properties.</param>
      <param name=" culture">The <see langword="CultureInfo" /> object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the <see langword="CultureInfo.Parent" /> method will be called successively in search of a match. If this value is <see langword="null" />, the <see langword="CultureInfo" /> is obtained from the <see langword="CultureInfo.CurrentUICulture" /> property.</param>
      <returns>
        <para> The property value for <paramref name="obj" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
      <summary>
        <para>Sets the value of the property with optional index values for index
      properties.</para>
      </summary>
      <param name="obj">The object whose property value will be set.</param>
      <param name=" value">The new value for this property.</param>
      <param name=" index">Optional index values for indexed properties. This value should be <see langword="null" /> for non-indexed properties.</param>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
        <para>When overridden in a derived class, sets the property
      value for the given object to the given value.</para>
      </summary>
      <param name="obj">The object whose property value will be returned.</param>
      <param name=" value">The new value for this property.</param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />. A suitable invocation attribute must be specified. If a static member is to be invoked, the <see langword="Static" /> flag of <see langword="BindingFlags" /> must be set.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection. If <paramref name="binder" /> is <see langword="null" /> , the default binder is used.</param>
      <param name="index">Optional index values for indexed properties. This value should be <see langword="null" /> for non-indexed properties.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the <see langword="CultureInfo.Parent" /> method will be called successively in search of a match. If this value is <see langword="null" />, the <see langword="CultureInfo" /> is obtained from the <see langword="CultureInfo.CurrentUICulture" /> property.</param>
      <returns>
        <para>An array of type <see cref="T:System.Reflection.MethodInfo" /> containing the public accessors, or an empty
   array if there are no public accessors.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetAccessors">
      <summary>
        <para>Returns an array of the public <see langword="get" /> and
<see langword="set" /> 
accessors on this property, and any method associated with this property.</para>
      </summary>
      <returns>
        <para>An array of type <see langword="MethodInfo" /> containing the public
<see langword="get" /> and <see langword="set" /> 
accessors, or an empty array if public accessors do not exist on this
property.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
      <summary>
        <para>Returns an array of the public and/or non-public 
   <see langword="get" /> and <see langword="set" /> accessors on
      this property.</para>
      </summary>
      <param name="nonPublic">Indicates whether non-public methods should be returned in the <see langword="MethodInfo" /> array. <see langword="true" /> if non-public methods are to be included; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>An array of type
   <see langword="MethodInfo" /> containing the matching public or non-public
      accessors, or an empty array if matching accessors do
      not exist on this property.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetGetMethod">
      <summary>
        <para>Returns the public <see langword="get" /> accessor for this property.</para>
      </summary>
      <returns>
        <para>A
   <see langword="MethodInfo" /> object
      representing the public <see langword="get" /> accessor for this
      property, or <see langword="null" /> if the <see langword="get" /> accessor is non-public or does not
      exist.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
      <summary>
        <para>When overridden in a derived class, returns the public
      or non-public <see langword="get" /> accessor for this property.</para>
      </summary>
      <param name="nonPublic">Indicates whether non-public <see langword="get" /> accessors should be returned. <see langword="true" /> if non-public methods are to be included; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>A <see langword="MethodInfo" /> object representing the
<see langword="get" /> accessor
   for this property, if <paramref name="nonPublic " />is <see langword="true" />. Returns <see langword="null" /> if
<paramref name="nonPublic " />is <see langword="false" /> and the <see langword="get" /> accessor is non-public,
   or if <paramref name="nonPublic " />is <see langword="true" /> but no <see langword="get" /> accessors
   exist.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetSetMethod">
      <summary>
        <para>Returns the public <see langword="set" /> accessor for this property.</para>
      </summary>
      <returns>
        <para>The <see langword="MethodInfo" />
object representing the <see langword="Set" /> method for this property if the
<see langword="set" /> 
accessor is public, or
<see langword="null" /> if the <see langword="set" /> accessor is not public.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
      <summary>
        <para>When overridden in a derived class, returns the
   <see langword="set" /> accessor for this property.</para>
      </summary>
      <param name="nonPublic">Indicates whether the accessor should be returned if it is non-public. <see langword="true" /> if non-public methods are to be included; otherwise, <see langword="false" /> .</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> A
         <see cref="T:System.Reflection.MethodInfo" /> object
            representing the <see langword="Set" />
            
            method for this property.</term>
            <description>
              <para>The <see langword="set" /> accessor is public.</para>
              <para>
                <paramref name="nonPublic " />is
      <see langword="true" />
      and non-public methods can be returned.</para>
            </description>
          </item>
          <item>
            <term>
              <see langword="null" />
            </term>
            <description>
              <para>
                <paramref name="nonPublic " />is
<see langword="true" /> , but the property is read-only.</para>
              <para> -or-</para>
              <para>
                <paramref name="nonPublic " />is
<see langword="false" /> and the <see langword="set" /> accessor is
non-public.</para>
              <para> -or-</para>
              <para>There is no <see langword="set" />
accessor.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetIndexParameters">
      <summary>
        <para>When overridden in a derived class, returns an array of all the index parameters for the property.</para>
      </summary>
      <returns>
        <para>An array of type <see langword="ParameterInfo " />
containing the parameters for the indexes.</para>
      </returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.MemberType">
      <summary>
        <para>Gets the <see langword="Type" /> of property reflected by
   this <see langword="PropertyInfo" />
   object.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.PropertyInfo.PropertyType">
      <summary>
        <para>Gets the type of the field of this property.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.PropertyInfo.Attributes">
      <summary>
        <para>Gets the attributes for this property.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.PropertyInfo.IsSpecialName">
      <summary>
        <para>Gets a value
      indicating whether the property is the special name.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.PropertyInfo.CanRead">
      <summary>
        <para>Gets a value indicating whether the property can be read.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.PropertyInfo.CanWrite">
      <summary>
        <para>Gets a value indicating whether the property can be written to.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.PropertyAttributes">
      <summary>
        <para>Defines the attributes that may be associated
      with a property. These
      attribute values are defined in corhdr.h.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.None">
      <summary>
        <para>Specifies that no attributes are associated with a property.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.SpecialName">
      <summary>
        <para>Specifies that the property is special, with the name describing how the
       property is special.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.ReservedMask">
      <summary>
        <para>Specifies a flag reserved for runtime use only.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.RTSpecialName">
      <summary>
        <para>Specifies that the metadata internal APIs check the name encoding.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.HasDefault">
      <summary>
        <para>Specifies that the property has a default value.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved2">
      <summary>
        <para> Reserved.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved3">
      <summary>
        <para> Reserved.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved4">
      <summary>
        <para> Reserved.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.ReflectionTypeLoadException">
      <summary>
        <para> The exception that is thrown by the <see cref="M:System.Reflection.Module.GetTypes" qualify="true" />
method if
any of the classes in a module cannot be loaded. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.ReflectionTypeLoadException" />
class with the given classes and their associated exceptions.</para>
      </summary>
      <param name="classes">An array of type <see langword="Type" /> containing the classes that were defined in the module and loaded. This array can contain null reference (<see langword="Nothing" /> in Visual Basic) values.</param>
      <param name="exceptions">An array of type <see langword="Exception" /> containing the exceptions that were thrown by the class loader. The null reference (<see langword="Nothing" /> in Visual Basic) values in the <paramref name="classes" /> array line up with the exceptions in this <paramref name="exceptions" /> array.</param>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[],System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.ReflectionTypeLoadException" />
class with the given classes, their associated exceptions, and exception descriptions.</para>
      </summary>
      <param name="classes">An array of type <see langword="Type" /> containing the classes that were defined in the module and loaded. This array can contain null reference (<see langword="Nothing" /> in Visual Basic) values.</param>
      <param name="exceptions">An array of type <see langword="Exception" /> containing the exceptions that were thrown by the class loader. The null reference (<see langword="Nothing" /> in Visual Basic) values in the <paramref name="classes" /> array line up with the exceptions in this <paramref name="exceptions" /> array. </param>
      <param name="message">A <see langword="String" /> describing the reason the exception was thrown.</param>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Provides an <see cref="T:System.Runtime.Serialization.ISerializable" /> implementation for serialized 
    objects.</para>
      </summary>
      <param name="info">The information and data needed to serialize or deserialize an object.</param>
      <param name=" context">The context for the serialization.</param>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.Types">
      <summary>
        <para>Gets the array of classes that were defined in the module
      and loaded.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions">
      <summary>
        <para>Gets the array of exceptions thrown by the class loader.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.ResourceAttributes">
      <summary>
        <para>Specifies the attributes for a manifest
       resource.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ResourceAttributes.Public">
      <summary>
        <para>A mask used to retrieve public manifest resources.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.ResourceAttributes.Private">
      <summary>
        <para>A mask used to retrieve private manifest resources.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.StrongNameKeyPair">
      <summary>
        <para>Encapsulates access to a public or private key
      pair used to sign strong name assemblies.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.IO.FileStream)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.StrongNameKeyPair" /> class, building the key pair from a
<see langword="FileStream" />
.</para>
      </summary>
      <param name="keyPairFile">A <see langword="FileStream" /> containing the key pair.</param>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.StrongNameKeyPair" /> class, building the key pair from a
<see langword="byte" />
array.</para>
      </summary>
      <param name="keyPairArray">An array of type <see langword="byte" /> containing the key pair.</param>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.StrongNameKeyPair" /> class, building the key
   pair from a <see langword="String" />
   .</para>
      </summary>
      <param name="keyPairContainer">A string containing the key pair.</param>
    </member>
    <member name="P:System.Reflection.StrongNameKeyPair.PublicKey">
      <summary>
        <para>Gets the public part of the originator of the key pair.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.TargetException">
      <summary>
        <para> Represents the exception that is thrown when an attempt is made to
      invoke an invalid target.
      </para>
      </summary>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.TargetException" /> class
   with an empty message and the
   root cause of the exception.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.TargetException" />
class with the given message
and the root cause exception.</para>
      </summary>
      <param name="message">A <see langword="String" /> describing the reason why the exception occurred.</param>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.TargetException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.TargetException" /> class with the specified
   serialization and context information.</para>
      </summary>
      <param name="info">The data for serializing or deserializing the object.</param>
      <param name=" context">The source of and destination for the object.</param>
    </member>
    <member name="T:System.Reflection.TargetInvocationException">
      <summary>
        <para>The exception that is thrown by methods invoked through reflection. This class cannot
      be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.TargetInvocationException" />
class with a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.TargetInvocationException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Reflection.TargetParameterCountException">
      <summary>
        <para> The exception that is thrown when the number of parameters for an invocation does not match the number expected. This class
      cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.Reflection.TargetParameterCountException" /> class
      with an empty message string and the root cause of the exception.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.TargetParameterCountException" />
class with its message string set to the given message
and the root cause exception.</para>
      </summary>
      <param name="message">A <see langword="String" /> describing the reason this exception was thrown.</param>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.TargetParameterCountException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Reflection.TypeAttributes">
      <summary>
   Specifies type attributes.
</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.VisibilityMask">
      <summary>
        <para>Specifies type visibility information.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NotPublic">
      <summary>
        <para> 
       Specifies that the class is not public.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Public">
      <summary>
        <para> 
       Specifies that the class is public.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPublic">
      <summary>
        <para> Specifies
       that the class is nested with public visibility.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPrivate">
      <summary>
        <para> 
       Specifies that the class is nested with private visibility.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamily">
      <summary>
        <para>Specifies that the class is nested with family visibility, and is thus accessible
      only by methods within its own type and any subtypes.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedAssembly">
      <summary>
        <para>Specifies that the class is nested with assembly visibility, and is thus accessible
       only by methods within its assembly.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamANDAssem">
      <summary>
        <para>Specifies that the class is nested with assembly and family visibility, and is thus accessible
       only by methods lying in the intersection of its family and assembly.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamORAssem">
      <summary>
        <para>Specifies that the class is nested with family or 
       assembly visibility, and is thus accessible
       only by methods lying in the union of its family and assembly.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.LayoutMask">
      <summary>
        <para>Specifies class layout information.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoLayout">
      <summary>
        <para>Specifies that class fields are automatically laid out by the common language runtime.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SequentialLayout">
      <summary>
        <para>Specifies that class fields are laid out
       sequentially, in the order that the fields were emitted to the metadata.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ExplicitLayout">
      <summary>
        <para>Specifies that class fields are laid out at the
       specified offsets.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ClassSemanticsMask">
      <summary>
        <para>Specifies class semantics information; the current class is contextful (else agile).</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Class">
      <summary>
        <para> Specifies that the type is a class.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Interface">
      <summary>
        <para>Specifies that the type is an interface.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Abstract">
      <summary>
        <para>Specifies that the type is abstract.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Sealed">
      <summary>
        <para>Specifies that the class is concrete
       and cannot be extended.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SpecialName">
      <summary>
        <para>Specifies that the class is special in a way denoted by the
       name.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Import">
      <summary>
        <para>Specifies that the class or interface is imported from another
       module.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Serializable">
      <summary>
        <para>Specifies that the class can be serialized.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.StringFormatMask">
      <summary>
        <para>Used to retrieve string information for native interoperability.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AnsiClass">
      <summary>
        <para>LPTSTR is interpreted as ANSI.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.UnicodeClass">
      <summary>
        <para>LPTSTR is interpreted as UNICODE.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoClass">
      <summary>
        <para>LPTSTR is interpreted automatically.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.BeforeFieldInit">
      <summary>
        <para>Initialize the class any time before first static field access.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ReservedMask">
      <summary>
        <para>Attributes reserved for runtime use.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.RTSpecialName">
      <summary>
        <para>Runtime should check name encoding.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.HasSecurity">
      <summary>
        <para>Type has security associate with it.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.TypeDelegator">
      <summary>
        <para>Wraps a <see langword="Type" /> object and delegates all 
   methods to that <see langword="Type" />
   .</para>
      </summary>
    </member>
    <member name="F:System.Reflection.TypeDelegator.typeImpl">
      <summary>
        <para>A value indicating type information. </para>
      </summary>
    </member>
    <member name="M:System.Reflection.TypeDelegator.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> 
 class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.TypeDelegator.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> class specifying the encapsulating
   instance.</para>
      </summary>
      <param name="delegatingType">The instance of the class <see cref="T:System.Type" /> that encapsulates the call to the method of an object.</param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>
        <para>Invokes the specified member. The method that is to be invoked must be
      accessible and provide the most specific match with the specified argument list,
      under the constraints of the specified binder and invocation attributes.</para>
      </summary>
      <param name="name">The name of the member to invoke. This may be a constructor, method, property, or field. If an empty string ("") is passed, the default member is invoked.</param>
      <param name="invokeAttr">The invocation attribute. This must be one of the following <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />. A suitable invocation attribute must be specified. If a static member is to be invoked, the <see langword="Static" /> flag must be set.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection. If <paramref name="binder" /> is <see langword="null" />, the default binder is used. See <see cref="T:System.Reflection.Binder" /> .</param>
      <param name="target">The object on which to invoke the specified member.</param>
      <param name="args">An array of type <see langword="Object" /> that contains the number, order, and type of the parameters of the member to be invoked. If <paramref name="args" /> contains an uninitialized <see langword="Object" /> , it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or a string.</param>
      <param name="modifiers">An array of type <see langword="ParameterModifer" /> that is the same length as <paramref name="args" />, with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the member's signature. For ByRef, use <see langword="ParameterModifer.ByRef" />, and for none, use <see langword="ParameterModifer.None" />. The default binder does exact matching on these. Attributes such as <see langword="In" /> and <see langword="InOut" /> are not used in binding, and can be viewed using <see langword="ParameterInfo" /> .</param>
      <param name="culture">An instance of <see langword="CultureInfo" /> used to govern the coercion of types. This is necessary, for example, to convert a string that represents 1000 to a <see langword="Double" /> value, since 1000 is represented differently by different cultures. If <paramref name="culture" /> is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread's <see langword="CultureInfo" /> is used.</param>
      <param name="namedParameters">An array of type <see langword="String" /> containing parameter names that match up, starting at element zero, with the <paramref name="args" /> array. There must be no holes in the array. If <paramref name="args" />.<see langword="Length" /> is greater than <paramref name="namedParameters" />.<see langword="Length" /> , the remaining parameters are filled in order.</param>
      <returns>
        <para>An <see langword="Object" /> representing the return value
   of the invoked member.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Gets the constructor that implemented the 
   <see langword="TypeDelegator" /> .</para>
      </summary>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" /> .</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection. If <paramref name="binder" /> is <see langword="null" /> , the default binder is used.</param>
      <param name="callConvention">The calling conventions.</param>
      <param name="types">An array of type <see langword="Type" /> containing a list of the parameter number, order, and types. Types cannot be <see langword="null" />; use an appropriate <see langword="GetMethod" /> method or an empty array to search for a method without parameters.</param>
      <param name="modifiers">An array of type <see langword="ParameterModifier" /> having the same length as the <paramref name="types" /> array, whose elements represent the attributes associated with the parameters of the method to get.</param>
      <returns>
        <para>A <see langword="ConstructorInfo" /> object for the method
   that matches the specified criteria, or <see langword="null" />
   if a match cannot be found.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
      <summary>
        <para>Returns an array of <see langword="ConstructorInfo" /> objects representing
   constructors defined for the current class.</para>
      </summary>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" /> . </param>
      <returns>
        <para>An array of type
   <see langword="ConstructorInfo" /> containing the specified constructors
      defined for this class. If no constructors are defined, an empty array is returned. Depending on the value
      of a specified parameter, only public constructors or both public and
      non-public constructors will be returned.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>Searches for the specified method whose parameters match the specified
      argument types and modifiers, using the specified binding constraints and the
      specified calling convention.</para>
      </summary>
      <param name=" name">The method name.</param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" /> .</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection. If <paramref name="binder" /> is <see langword="null" /> , the default binder is used.</param>
      <param name="callConvention">The calling conventions.</param>
      <param name="types">An array of type <see langword="Type" /> containing a list of the parameter number, order, and types. Types cannot be <see langword="null" />; use an appropriate <see langword="GetMethod" /> method or an empty array to search for a method without parameters.</param>
      <param name="modifiers">An array of type <see langword="ParameterModifier" /> having the same length as the <paramref name="types" /> array, whose elements represent the attributes associated with the parameters of the method to get.</param>
      <returns>
        <para>A <see langword="MethodInfoInfo" /> object for the
   implementation method that matches the specified criteria, or
<see langword="null" />
if a match cannot be found.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)">
      <summary>
        <para>Returns an array of <see cref="T:System.Reflection.MethodInfo" /> objects representing specified methods of the
   current <see langword="TypeDelegator" />
   
   .</para>
      </summary>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" /> .</param>
      <returns>
        <para>An array of <see langword="MethodInfo" /> objects
   representing the methods defined on this <see langword="TypeDelegator" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Returns the <see cref="T:System.Reflection.FieldInfo" />
object representing the field with the
specified name.</para>
      </summary>
      <param name="name">The name of the field to find.</param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" /> . </param>
      <returns>
        <para>A <see langword="FieldInfo" /> object representing
   the field declared or inherited by this <see langword="TypeDelegator" /> with the
   specified name. Returns <see langword="null" />
   if no such field is found.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
      <summary>
        <para>Returns an array of <see cref="T:System.Reflection.FieldInfo" />
objects
representing the data fields defined for the current class.</para>
      </summary>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" /> . </param>
      <returns>
        <para>An array of type
   <see langword="FieldInfo" /> containing the fields declared or inherited by
      the current <see langword="TypeDelegator" />
      . An empty array is returned if there
      are no matched fields.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
      <summary>
        <para> Returns the specified interface
       implemented by the current class.</para>
      </summary>
      <param name="name">The fully qualified name of the interface implemented by the current class.</param>
      <param name="ignoreCase">
        <see langword="true" /> if the case is to be ignored; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>A <see langword="Type" /> object representing the interface implemented (directly or
    indirectly) by the current class with the fully qualified name matching the
    specified name. If no interface that matches name is found, null is returned.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterfaces">
      <summary>
        <para> Returns all the interfaces
      implemented on the current class and its base classes.</para>
      </summary>
      <returns>
        <para>An array of type <see langword="Type" /> containing all the interfaces implemented
   on the current class and its base classes. If none are defined, an
   empty array is returned.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para> Returns the specified event.</para>
      </summary>
      <param name="name">The name of the event to get.</param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" /> . </param>
      <returns>
        <para>An <see langword="EventInfo" />
object representing the event declared or inherited by this type with the
specified name. Returns <see langword="null" />
if no
such event is found.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvents">
      <summary>
        <para>Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events
   declared or inherited by the current <see langword="TypeDelegator" />
   
   .</para>
      </summary>
      <returns>
        <para>Returns an array of type
   <see langword="EventInfo" /> containing all
      the events declared or inherited by the current type. If there are no events, an
      empty array is returned.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
        <para>When overridden in a derived class, searches for the
      specified property whose parameters match the specified argument types and
      modifiers, using the specified binding constraints.</para>
      </summary>
      <param name="name">The property to get.</param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" /> . </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection. If <paramref name="binder" /> is <see langword="null" />, the default binder is used. See <see cref="T:System.Reflection.Binder" /> .</param>
      <param name=" returnType">The return type of the property.</param>
      <param name="types">A list of parameter types. The list represents the number, order, and types of the parameters. Types cannot be null; use an appropriate <see langword="GetMethod" /> method or an empty array to search for a method without parameters.</param>
      <param name="modifiers">An array of the same length as types with elements that represent the attributes associated with the parameters of the method to get.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.PropertyInfo" />
object for the property that matches the specified
criteria, or null if a match cannot be found.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)">
      <summary>
        <para>Returns an array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing properties defined on 
   this <see langword="TypeDelegator" />
   
   .</para>
      </summary>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" /> .</param>
      <returns>
        <para>An array of <see langword="PropertyInfo" /> objects
   representing properties defined on this <see langword="TypeDelegator" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)">
      <summary>
        <para>Returns the events specified in
   <paramref name="bindingAttr" /> that are declared or inherited by the current
   <see langword="TypeDelegator" />
   .</para>
      </summary>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" /> . </param>
      <returns>
        <para>An array of type
   <see langword="EventInfo" /> containing the events specified in
   <paramref name="bindingAttr" />
   . If there are no events, an empty array
   is returned.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>
        <para>Returns the nested types specified in
   <paramref name="bindingAttr" /> that are declared or inherited by the current
   <see langword="TypeDelegator" /> .</para>
      </summary>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" /> . </param>
      <returns>
        <para>An array of type <see langword="Type" /> containing
   the nested types.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>
        <para>Returns a nested type specified by <paramref name="name" /> and in
<paramref name="bindingAttr" /> that are declared or inherited by the
   current <see langword="TypeDelegator" /> .</para>
      </summary>
      <param name="name">The nested type's name.</param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" /> . </param>
      <returns>
        <para>A <see langword="Type" /> object representing the
   nested type.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>
        <para>Returns members
      (properties,
      methods, constructors, fields, events, and nested types) specified by
      the given <paramref name="name" />, <paramref name="type" />, and <paramref name="bindingAttr" />.</para>
      </summary>
      <param name="name">The name of the member to get.</param>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" /> . </param>
      <param name=" type">The type of members to get.</param>
      <returns>
        <para>An array of type
   <see langword="MemberInfo" /> containing all the members of the current class and its base class meeting the specified criteria. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
      <summary>
        <para> Returns members specified by <paramref name="bindingAttr" />.</para>
      </summary>
      <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" /> . </param>
      <returns>
        <para>An array of type
   <see langword="MemberInfo" /> containing all the members of the current
      class and its base classes that meet the <paramref name="bindingAttr" /> filter.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetAttributeFlagsImpl">
      <summary>
        <para>Gets the attributes assigned to the
   <see langword="TypeDelegator" /> .</para>
      </summary>
      <returns>
        <para>A <see langword="TypeAttributes" /> object
   representing the implementation attribute flags.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsArrayImpl">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" />is an array.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsPrimitiveImpl">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is one of the
   primitive types.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsByRefImpl">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is passed by reference.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is passed by
   reference; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsPointerImpl">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsValueTypeImpl">
      <summary>
        <para>Gets a value indicating whether the type is a value type; 
      that is, not a class or an interface.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the type is a value type; otherwise, 
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsCOMObjectImpl">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetElementType">
      <summary>
        <para>Returns the <see cref="T:System.Type" /> of the object encompassed or referred
   to by the current array, pointer or ByRef.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Type" /> of the object 
   encompassed or referred to by the current array, pointer or
<see langword="ByRef" /> 
, or
<see langword="null" /> if the current <see cref="T:System.Type" /> is not an array, a pointer 
or a <see langword="ByRef" />
.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.HasElementTypeImpl">
      <summary>
        <para>Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or
   refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer or a ByRef.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer or a ByRef; otherwise,
<see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)">
      <summary>
        <para>Returns all the custom attributes defined for
      this type, specifying whether to search the type's inheritance chain.</para>
      </summary>
      <param name="inherit">Specifies whether to search this type's inheritance chain to find the attributes.</param>
      <returns>
        <para>An array of objects containing all the custom attributes defined for this
      type. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
        <para> Returns an array of
      custom attributes identified by type.</para>
      </summary>
      <param name="inherit">Specifies whether to search this type's inheritance chain to find the attributes.</param>
      <param name=" attributeType">An array of custom attributes identified by type.</param>
      <returns>
        <para>An array of objects containing the custom attributes
      defined in this type that match the <paramref name="attributeType" />
      parameter, specifying whether to search the type's inheritance chain, or
   <see langword="null" /> if no custom attributes are defined on this type. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
      <summary>
        <para>Indicates whether a custom attribute identified
      by <paramref name="attributeType" /> is defined.</para>
      </summary>
      <param name="inherit">Specifies whether to search this type's inheritance chain to find the attributes.</param>
      <param name="attributeType">An array of custom attributes identified by type.</param>
      <returns>
        <para>
          <see langword="true" /> if a custom attribute identified by
<paramref name="attributeType" /> is defined; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)">
      <summary>
        <para>Returns an interface mapping for the specified interface type.</para>
      </summary>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface to retrieve a mapping of.</param>
      <returns>
        <para>An <see cref="T:System.Reflection.InterfaceMapping" /> object representing the interface mapping for 
 <paramref name="interfaceType" />.</para>
      </returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.GUID">
      <summary>
        <para>Gets the GUID
      (Global Unique Identifier) of the implemented type.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Module">
      <summary>
        <para>Gets the module of the implemented type.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Assembly">
      <summary>
        <para>Gets the assembly of the implemented type.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.TypeDelegator.TypeHandle">
      <summary>
        <para>Gets a handle to the internal metadata representation of an implemented type.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Name">
      <summary>
        <para>Gets the name of the implemented type, with the path
      removed.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.TypeDelegator.FullName">
      <summary>
        <para>Gets the fully qualified name of the implemented type.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Namespace">
      <summary>
        <para>Gets the namespace of the implemented type.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.TypeDelegator.AssemblyQualifiedName">
      <summary>
        <para>Gets the assembly's fully qualified name.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.TypeDelegator.BaseType">
      <summary>
        <para>Gets the base type for the current type.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.TypeDelegator.UnderlyingSystemType">
      <summary>
        <para>Gets the underlying <see cref="T:System.Type" />
that represents the implemented
type.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.TypeFilter">
      <summary>
        <para>Filters the classes represented in an array
      of <see cref="T:System.Type" />
      objects.</para>
      </summary>
      <param name="m">The <see langword="Type" /> object to which the filter is applied. </param>
      <param name=" filterCriteria">An arbitrary object used to filter the list. </param>
    </member>
    <member name="T:System.Reflection.Emit.UnmanagedMarshal">
      <summary>
        <para> 
      Represents the class that describes how to
      marshal a field from managed to unmanaged code. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
      <summary>
        <para>Specifies a given type that is to be marshaled 
       to unmanaged code.</para>
      </summary>
      <param name="unmanagedType">The unmanaged type to which the type is to be marshaled.</param>
      <returns>
        <para>An <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
      <summary>
        <para> Specifies a string in a fixed array buffer (ByValTStr) to marshal to unmanaged code.</para>
      </summary>
      <param name="elemCount">The number of elements in the fixed array buffer.</param>
      <returns>
        <para>An <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
      <summary>
        <para>Specifies a <see langword="SafeArray" /> to marshal to unmanaged code.</para>
      </summary>
      <param name="elemType">The base type or the <see langword="UnmanagedType" /> of each element of the array.</param>
      <returns>
        <para>An <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
      <summary>
        <para>Specifies a fixed-length array (ByValArray) to marshal to unmanaged code.</para>
      </summary>
      <param name="elemCount">The number of elements in the fixed-length array.</param>
      <returns>
        <para>An <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
      <summary>
        <para>Specifies an <see langword="LPArray" /> to marshal to 
   unmanaged code. The length of an <see langword="LPArray" />
   is determined at runtime by the size of the actual marshaled array. </para>
      </summary>
      <param name="elemType">The unmanaged type to which to marshal the array.</param>
      <returns>
        <para>An <see cref="T:System.Reflection.Emit.UnmanagedMarshal" /> object.</para>
      </returns>
    </member>
    <member name="P:System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType">
      <summary>
        <para>Indicates an unmanaged type. This property is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
      <summary>
        <para>Gets a GUID. This property is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount">
      <summary>
        <para>Gets a number element. This property is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.UnmanagedMarshal.BaseType">
      <summary>
        <para>Gets an unmanaged base type. This property is read-only.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.Formatter">
      <summary>
        <para>Provides base functionality for the
      common language runtime serialization formatters.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.IFormatter">
      <summary>
        <para>Provides functionality for formatting serialized objects.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatter.Deserialize(System.IO.Stream)">
      <summary>
        <para>Deserializes the data on the provided stream and reconstitutes the graph of objects.</para>
      </summary>
      <param name="serializationStream">The stream containing the data to deserialize. </param>
      <returns>
        <para>The top object of the deserialized graph.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatter.Serialize(System.IO.Stream,System.Object)">
      <summary>
        <para>Serializes an object, or graph of objects with the given
      root to the provided stream.</para>
      </summary>
      <param name="serializationStream"> The stream where the formatter puts the serialized data. This stream can reference a variety of backing stores (such as files, network, memory, and so on).</param>
      <param name="graph">The object, or root of the object graph, to serialize. All child objects of this root object are automatically serialized.</param>
    </member>
    <member name="P:System.Runtime.Serialization.IFormatter.SurrogateSelector">
      <summary>
        <para>Gets or sets the <see cref="T:System.Runtime.Serialization.SurrogateSelector" /> used 
   by the current formatter. </para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.IFormatter.Binder">
      <summary>
        <para> Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> that performs type lookups during deserialization.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.IFormatter.Context">
      <summary>
        <para> Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" />
used for serialization and deserialization.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Serialization.Formatter.m_idGenerator">
      <summary>
        <para>Contains the <see cref="T:System.Runtime.Serialization.ObjectIDGenerator" /> 
used with the current
formatter.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Serialization.Formatter.m_objectQueue">
      <summary>
        <para>Contains a <see cref="T:System.Collections.Queue" /> of the
   objects left to serialize.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Formatter" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.Deserialize(System.IO.Stream)">
      <summary>
        <para> When overridden in
 a derived class, deserializes the stream attached to the formatter
 when it was created, creating a graph of objects identical to the graph originally
 serialized into that stream.</para>
      </summary>
      <param name="serializationStream">The stream to deserialize.</param>
      <returns>
        <para>The top object of the deserialized graph of objects.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.GetNext(System.Int64@)">
      <summary>
        <para> Returns the next object to serialize, from the formatter's
      internal work queue.</para>
      </summary>
      <param name="objID">The ID assigned to the current object during serialization.</param>
      <returns>
        <para> The next object to serialize.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.Schedule(System.Object)">
      <summary>
        <para> Schedules an object for later serialization. </para>
      </summary>
      <param name="obj"> The object to schedule for serialization.</param>
      <returns>
        <para>The
      object ID assigned to the object.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.Serialize(System.IO.Stream,System.Object)">
      <summary>
        <para>When overridden in a derived class, serializes the graph
 of objects with the specified
 root to the
 stream already attached to the formatter.</para>
      </summary>
      <param name="serializationStream">The stream to which the objects are serialized.</param>
      <param name="graph">The object at the root of the graph to serialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteArray(System.Object,System.String,System.Type)">
      <summary>
        <para>When overridden in a derived class,
 writes an array to the stream already attached to the formatter.</para>
      </summary>
      <param name="obj">The array to write.</param>
      <param name="name">The name of the array.</param>
      <param name="memberType">The type of elements that the array holds.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteBoolean(System.Boolean,System.String)">
      <summary>
        <para>When
 overridden in a derived class, writes
 a Boolean value to the stream already attached to the formatter.</para>
      </summary>
      <param name="val">The value to write.</param>
      <param name="name">The name of the member.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteByte(System.Byte,System.String)">
      <summary>
        <para>When overridden
 in a derived class, writes an
 8-bit unsigned integer to the stream already attached to the formatter.</para>
      </summary>
      <param name="val">The value to write.</param>
      <param name="name">The name of the member.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteChar(System.Char,System.String)">
      <summary>
        <para>When
 overridden in a derived class, writes
 a Unicode character to the stream already attached to the
 formatter.</para>
      </summary>
      <param name="val">The value to write.</param>
      <param name="name">The name of the member.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteDateTime(System.DateTime,System.String)">
      <summary>
        <para>When overridden in a derived class,
 writes a <see cref="T:System.DateTime" />
 value to the stream already attached to the formatter.</para>
      </summary>
      <param name="val">The value to write.</param>
      <param name="name">The name of the member.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteDecimal(System.Decimal,System.String)">
      <summary>
        <para>When overridden in a derived class, writes a <see cref="T:System.Decimal" />
value to the stream already attached to the
formatter.</para>
      </summary>
      <param name="val">The value to write.</param>
      <param name="name">The name of the member.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteDouble(System.Double,System.String)">
      <summary>
        <para> When
 overridden in a derived class, writes
 a double-precision floating-point number to the stream already attached to the formatter.</para>
      </summary>
      <param name="val">The value to write.</param>
      <param name="name">The name of the member.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteInt16(System.Int16,System.String)">
      <summary>
        <para>When
 overridden in a derived class, writes
 a 16-bit signed integer to the stream already attached to the
 formatter.</para>
      </summary>
      <param name="val">The value to write.</param>
      <param name="name">The name of the member.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteInt32(System.Int32,System.String)">
      <summary>
        <para>When overridden in a
 derived class, writes a 32-bit signed integer to the stream.</para>
      </summary>
      <param name="val">The value to write.</param>
      <param name="name">The name of the member.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteInt64(System.Int64,System.String)">
      <summary>
        <para>When overridden in a derived
 class, writes a 64-bit signed integer to the stream.</para>
      </summary>
      <param name="val">The value to write.</param>
      <param name="name">The name of the member.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteObjectRef(System.Object,System.String,System.Type)">
      <summary>
        <para>When overridden in a derived class,
 writes an object reference to the stream already attached to the formatter.</para>
      </summary>
      <param name="obj">The object reference to write.</param>
      <param name="name">The name of the member.</param>
      <param name="memberType"> The type of object the reference points to.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteMember(System.String,System.Object)">
      <summary>
        <para> Inspects the type of data received, and calls the 
 appropriate <see langword="Write" />
 method to perform the write to the stream already attached to the
 formatter.
 </para>
      </summary>
      <param name="memberName">The name of the member to serialize. </param>
      <param name="data">The object to write to the stream attached to the formatter. </param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteSByte(System.SByte,System.String)">
      <summary>
        <para>When
 overridden in a derived class, writes
 an 8-bit signed integer to the stream already attached to the
 formatter.</para>
      </summary>
      <param name="val">The value to write.</param>
      <param name="name">The name of the member.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteSingle(System.Single,System.String)">
      <summary>
        <para> When overridden in a derived class,
 writes a single-precision floating-point number to the stream already
 attached to the formatter.</para>
      </summary>
      <param name="val">The value to write.</param>
      <param name="name">The name of the member.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteTimeSpan(System.TimeSpan,System.String)">
      <summary>
        <para>When overridden in a derived class,
 writes a <see cref="T:System.TimeSpan" />
 value to the stream already attached to the formatter.</para>
      </summary>
      <param name="val">The value to write.</param>
      <param name="name">The name of the member.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteUInt16(System.UInt16,System.String)">
      <summary>
        <para>When overridden in a derived class, writes a 16-bit
 unsigned integer to the stream already attached to the formatter.</para>
      </summary>
      <param name="val">The value to write.</param>
      <param name="name">The name of the member.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteUInt32(System.UInt32,System.String)">
      <summary>
        <para>When overridden in a derived class, writes a 32-bit unsigned integer to the stream already attached to the
 formatter.</para>
      </summary>
      <param name="val">The value to write.</param>
      <param name="name">The name of the member.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteUInt64(System.UInt64,System.String)">
      <summary>
        <para>When overridden in a derived class, writes a 64-bit unsigned integer to the stream already attached to the
 formatter.</para>
      </summary>
      <param name="val">The value to write.</param>
      <param name="name">The name of the member.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatter.WriteValueType(System.Object,System.String,System.Type)">
      <summary>
        <para>When overridden in a derived class, writes a value
 of the given type to the stream already attached to the
 formatter.</para>
      </summary>
      <param name="obj">The object representing the value type.</param>
      <param name="name">The name of the member.</param>
      <param name="memberType">The <see cref="T:System.Type" /> of the value type.</param>
    </member>
    <member name="P:System.Runtime.Serialization.Formatter.SurrogateSelector">
      <summary>
        <para>When overridden in a derived class, gets or sets the <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> used
   with the current formatter.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatter.Binder">
      <summary>
        <para>When overridden in a derived class, gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used
   with the current formatter.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatter.Context">
      <summary>
        <para>When overridden in a derived class, gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used 
   for the current
   serialization.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.FormatterConverter">
      <summary>
        <para>Represents a base implementation of the <see cref="T:System.Runtime.Serialization.IFormatterConverter" /> interface that 
    uses the <see cref="T:System.Convert" /> class and the <see cref="T:System.IConvertible" /> interface.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.IFormatterConverter">
      <summary>
        <para>Provides the connection between an instance of <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and 
    the formatter-provided class best suited to parse the data inside the <see cref="T:System.Runtime.Serialization.SerializationInfo" />. </para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.Convert(System.Object,System.Type)">
      <summary>
        <para>Converts a value to 
       the given <see cref="T:System.Type" /> . </para>
      </summary>
      <param name="value">The object to be converted.</param>
      <param name=" type">The <see cref="T:System.Type" /> into which <paramref name="value" /> is to be converted.</param>
      <returns>
        <para>The converted <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.Convert(System.Object,System.TypeCode)">
      <summary>
        <para> Converts a value to the given <see cref="T:System.TypeCode" /> . </para>
      </summary>
      <param name="value">The object to be converted.</param>
      <param name=" typeCode">The <see cref="T:System.TypeCode" /> into which <paramref name="value" /> is to be converted.</param>
      <returns>
        <para>The converted <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToBoolean(System.Object)">
      <summary>
        <para>Converts a value to a <see cref="T:System.Boolean" /> .</para>
      </summary>
      <param name="value">The object to be converted.</param>
      <returns>
        <para>The converted <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToChar(System.Object)">
      <summary>
        <para>Converts a value to a Unicode character.</para>
      </summary>
      <param name="value">The object to be converted.</param>
      <returns>
        <para>The converted <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToSByte(System.Object)">
      <summary>
        <para>Converts a value to an <see cref="T:System.SByte" /> .</para>
      </summary>
      <param name="value">The object to be converted.</param>
      <returns>
        <para>The converted <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToByte(System.Object)">
      <summary>
        <para>Converts a value to an 8-bit unsigned integer.</para>
      </summary>
      <param name="value">The object to be converted.</param>
      <returns>
        <para>The converted <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToInt16(System.Object)">
      <summary>
        <para>Converts a value to a 16-bit signed integer.</para>
      </summary>
      <param name="value">The object to be converted.</param>
      <returns>
        <para>The converted <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToUInt16(System.Object)">
      <summary>
        <para>Converts a value to a 16-bit unsigned integer.</para>
      </summary>
      <param name="value">The object to be converted.</param>
      <returns>
        <para>The converted <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToInt32(System.Object)">
      <summary>
        <para>Converts a value to a 32-bit signed integer.</para>
      </summary>
      <param name="value">The object to be converted.</param>
      <returns>
        <para>The converted <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToUInt32(System.Object)">
      <summary>
        <para>Converts a value to a 32-bit unsigned integer.</para>
      </summary>
      <param name="value">The object to be converted.</param>
      <returns>
        <para>The converted <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToInt64(System.Object)">
      <summary>
        <para>Converts a value to a 64-bit signed integer.</para>
      </summary>
      <param name="value">The object to be converted.</param>
      <returns>
        <para>The converted <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToUInt64(System.Object)">
      <summary>
        <para>Converts a value to a 64-bit unsigned integer.</para>
      </summary>
      <param name="value">The object to be converted.</param>
      <returns>
        <para>The converted <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToSingle(System.Object)">
      <summary>
        <para> Converts a value to a single-precision floating-point number.</para>
      </summary>
      <param name="value">The object to be converted.</param>
      <returns>
        <para>The converted <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToDouble(System.Object)">
      <summary>
        <para> Converts a value to a double-precision floating-point number.</para>
      </summary>
      <param name="value">The object to be converted.</param>
      <returns>
        <para>The converted <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToDecimal(System.Object)">
      <summary>
        <para>Converts a value to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">The object to be converted.</param>
      <returns>
        <para>The converted <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToDateTime(System.Object)">
      <summary>
        <para>Converts a value to a <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="value">The object to be converted.</param>
      <returns>
        <para>The converted <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToString(System.Object)">
      <summary>
        <para>Converts a value to a <see cref="T:System.String" />.</para>
      </summary>
      <param name="value">The object to be converted.</param>
      <returns>
        <para>The converted <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.FormatterConverter" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.Convert(System.Object,System.Type)">
      <summary>
        <para>Converts a value to
      the given <see cref="T:System.Type" />. </para>
      </summary>
      <param name="value">The object to convert.</param>
      <param name=" type">The <see cref="T:System.Type" /> into which <paramref name="value" /> is converted.</param>
      <returns>
        <para>The converted <paramref name="value" />, or <see langword="null" /> if
   the <paramref name="type" /> parameter is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.Convert(System.Object,System.TypeCode)">
      <summary>
        <para> Converts a value to the given <see cref="T:System.TypeCode" />. </para>
      </summary>
      <param name="value">The object to convert.</param>
      <param name=" typeCode">The <see cref="T:System.TypeCode" /> into which <paramref name="value" /> is converted.</param>
      <returns>
        <para>The converted <paramref name="value" />, or <see langword="null" /> if the <paramref name="type" /> parameter is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToBoolean(System.Object)">
      <summary>
        <para>Converts a value to a <see cref="T:System.Boolean" />.</para>
      </summary>
      <param name="value">The object to convert.</param>
      <returns>
        <para>The converted <paramref name="value" />, or <see langword="null" /> if the <paramref name="type" /> parameter is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToChar(System.Object)">
      <summary>
        <para>Converts a value to a Unicode character.</para>
      </summary>
      <param name="value">The object to convert.</param>
      <returns>
        <para>The converted <paramref name="value" />, or <see langword="null" /> if the <paramref name="type" /> parameter is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToSByte(System.Object)">
      <summary>
        <para>Converts a value to an <see cref="T:System.SByte" />.</para>
      </summary>
      <param name="value">The object to convert.</param>
      <returns>
        <para>The converted <paramref name="value" />, or <see langword="null" /> if the <paramref name="type" /> parameter is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToByte(System.Object)">
      <summary>
        <para>Converts a value to an 8-bit unsigned integer.</para>
      </summary>
      <param name="value">The object to convert.</param>
      <returns>
        <para>The converted <paramref name="value" />, or <see langword="null" /> if the <paramref name="type" /> parameter is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToInt16(System.Object)">
      <summary>
        <para>Converts a value to a 16-bit signed integer.</para>
      </summary>
      <param name="value">The object to convert.</param>
      <returns>
        <para>The converted <paramref name="value" />, or <see langword="null" /> if the <paramref name="type" /> parameter is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToUInt16(System.Object)">
      <summary>
        <para>Converts a value to a 16-bit unsigned integer.</para>
      </summary>
      <param name="value">The object to convert.</param>
      <returns>
        <para>The converted <paramref name="value" />, or <see langword="null" /> if the <paramref name="type" /> parameter is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToInt32(System.Object)">
      <summary>
        <para>Converts a value to a 32-bit signed integer.</para>
      </summary>
      <param name="value">The object to convert.</param>
      <returns>
        <para>The converted <paramref name="value" />, or <see langword="null" /> if the <paramref name="type" /> parameter is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToUInt32(System.Object)">
      <summary>
        <para>Converts a value to a 32-bit unsigned integer.</para>
      </summary>
      <param name="value">The object to convert.</param>
      <returns>
        <para>The converted <paramref name="value" />, or <see langword="null" /> if the <paramref name="type" /> parameter is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToInt64(System.Object)">
      <summary>
        <para>Converts a value to a 64-bit signed integer.</para>
      </summary>
      <param name="value">The object to convert.</param>
      <returns>
        <para>The converted <paramref name="value" />, or <see langword="null" /> if the <paramref name="type" /> parameter is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToUInt64(System.Object)">
      <summary>
        <para>Converts a value to a 64-bit unsigned integer.</para>
      </summary>
      <param name="value">The object to convert.</param>
      <returns>
        <para>The converted <paramref name="value" />, or <see langword="null" /> if the <paramref name="type" /> parameter is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToSingle(System.Object)">
      <summary>
        <para> Converts a value to a single-precision floating-point number.</para>
      </summary>
      <param name="value">The object to convert.</param>
      <returns>
        <para>The converted <paramref name="value" />, or <see langword="null" /> if the <paramref name="type" /> parameter is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToDouble(System.Object)">
      <summary>
        <para> Converts a value to a double-precision floating-point number.</para>
      </summary>
      <param name="value">The object to convert.</param>
      <returns>
        <para>The converted <paramref name="value" />, or <see langword="null" /> if the <paramref name="type" /> parameter is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToDecimal(System.Object)">
      <summary>
        <para>Converts a value to a <see cref="T:System.Decimal" />.</para>
      </summary>
      <param name="value">The object to convert.</param>
      <returns>
        <para>The converted <paramref name="value" />, or <see langword="null" /> if the <paramref name="type" /> parameter is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToDateTime(System.Object)">
      <summary>
        <para>Converts a value to a <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="value">The object to convert.</param>
      <returns>
        <para>The converted <paramref name="value" />, or <see langword="null" /> if the <paramref name="type" /> parameter is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterConverter.ToString(System.Object)">
      <summary>
        <para>Converts the specified object to a <see cref="T:System.String" />.</para>
      </summary>
      <param name="value">The object to convert.</param>
      <returns>
        <para>The converted <paramref name="value" />, or <see langword="null" /> if the <paramref name="type" /> parameter is <see langword="null" />.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.Serialization.FormatterServices">
      <summary>
        <para> Provides static methods to aid with the implementation of a <see cref="T:System.Runtime.Serialization.Formatter" /> for
 serialization. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterServices.GetSerializableMembers(System.Type)">
      <summary>
        <para> Gets all the serializable members for a class of the
      specified <see cref="T:System.Type" /> .</para>
      </summary>
      <param name="type">The type being serialized.</param>
      <returns>
        <para>An array of type <see cref="T:System.Reflection.MemberInfo" />
of the nontransient,
nonstatic members.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterServices.GetSerializableMembers(System.Type,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para> Gets all the serializable members for a class of the specified
      <see cref="T:System.Type" /> and in the
      provided <see cref="T:System.Runtime.Serialization.StreamingContext" /> .</para>
      </summary>
      <param name="type">The type being serialized or cloned.</param>
      <param name="context">The context where the serialization is occurring.</param>
      <returns>
        <para>An array of type <see cref="T:System.Reflection.MemberInfo" /> of the nontransient, nonstatic members.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterServices.GetUninitializedObject(System.Type)">
      <summary>
        <para>Creates a new instance of the specified object type.</para>
      </summary>
      <param name="type">The type of object to create.</param>
      <returns>
        <para>A
      zeroed object of the specified type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterServices.PopulateObjectMembers(System.Object,System.Reflection.MemberInfo[],System.Object[])">
      <summary>
        <para>Populates the specified object with values for each field drawn
      from the data array of objects.</para>
      </summary>
      <param name="obj">The object to populate.</param>
      <param name="members">An array of <see cref="T:System.Reflection.MemberInfo" /> describing which fields and properties to populate.</param>
      <param name="data">An array of <see cref="T:System.Object" /> specifying the values for each field and property to populate.</param>
      <returns>
        <para>The newly populated object.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterServices.GetObjectData(System.Object,System.Reflection.MemberInfo[])">
      <summary>
        <para>Extracts the data from the specified object and
      returns it as an array
      of objects.</para>
      </summary>
      <param name="obj">The object to write to the formatter.</param>
      <param name="members">The members to extract from the object.</param>
      <returns>
        <para>An array of <see cref="T:System.Object" /> containing data stored in <paramref name="members" /> and associated with <paramref name="obj" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.FormatterServices.GetTypeFromAssembly(System.Reflection.Assembly,System.String)">
      <summary>
        <para>Looks up the <see cref="T:System.Type" /> of the specified object in the provided <see cref="T:System.Reflection.Assembly" />.</para>
      </summary>
      <param name="assem">The assembly where you want to look up the object.</param>
      <param name=" name">The name of the object.</param>
      <returns>
        <para>The <see cref="T:System.Type" /> of the object.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.Serialization.ISerializationSurrogate">
      <summary>
        <para> Implements a serialization surrogate selector that 
      allows one object to perform serialization and deserialization of another.
      </para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.ISerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the object.</para>
      </summary>
      <param name="obj">The object to serialize.</param>
      <param name=" info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" /> ) for this serialization.</param>
    </member>
    <member name="M:System.Runtime.Serialization.ISerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
      <summary>
        <para>Populates the object using the information in
      the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> . </para>
      </summary>
      <param name="obj">The object to populate.</param>
      <param name=" info">The information to populate the object.</param>
      <param name=" context">The source from which the object is deserialized.</param>
      <param name=" selector">The surrogate selector where the search for a compatible surrogate begins.</param>
      <returns>
        <para>The populated deserialized object.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.Serialization.ISurrogateSelector">
      <summary>
        <para> Indicates a serialization surrogate selector
      class.
      </para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.ISurrogateSelector.ChainSelector(System.Runtime.Serialization.ISurrogateSelector)">
      <summary>
        <para>Specifies the next <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> for
   surrogates to examine if the current instance does not have a surrogate for
   the specified type and assembly in the specified context.</para>
      </summary>
      <param name="selector">The next surrogate selector to examine.</param>
    </member>
    <member name="M:System.Runtime.Serialization.ISurrogateSelector.GetSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector@)">
      <summary>
        <para> Finds the surrogate that represents the specified
      object's type, starting with the specified surrogate selector for the
      specified serialization context.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of object (class) that needs a surrogate.</param>
      <param name="context">The source or destination context for the current serialization.</param>
      <param name="selector">When this method returns, contains an <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> that holds a reference to the surrogate selector where the appropriate surrogate was found. This parameter is passed uninitialized.</param>
      <returns>
        <para>The appropriate surrogate for the given type in the given
      context.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.ISurrogateSelector.GetNextSelector">
      <summary>
        <para>Returns the next surrogate selector in the
      chain.</para>
      </summary>
      <returns>
        <para>The next surrogate selector in the chain, or <see langword="null" />
.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.Serialization.ObjectIDGenerator">
      <summary>
        <para>Generates IDs for objects.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectIDGenerator.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.ObjectIDGenerator" />
 class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectIDGenerator.GetId(System.Object,System.Boolean@)">
      <summary>
        <para>Returns the ID for the specified object, generating a new
      ID if the specified object has not already been identified by the <see cref="T:System.Runtime.Serialization.ObjectIDGenerator" />
      .</para>
      </summary>
      <param name="obj"> The object you want an ID for.</param>
      <param name="firstTime">
        <see langword="true" /> if <paramref name="obj" /> was not previously known to the <see cref="T:System.Runtime.Serialization.ObjectIDGenerator" />; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>The object's ID is used for serialization.
   <paramref name="firstTime" /> is set to <see langword="true" /> if this is the
      first time the object has been identified; otherwise, it is set to
   <see langword="false" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectIDGenerator.HasId(System.Object,System.Boolean@)">
      <summary>
        <para> Determines whether an object has already been assigned an
      ID.</para>
      </summary>
      <param name="obj">The object you are asking for.</param>
      <param name="firstTime">
        <see langword="true" /> if <paramref name="obj" /> was not previously known to the <see cref="T:System.Runtime.Serialization.ObjectIDGenerator" /> ; <see langword="false" /> otherwise.</param>
      <returns>
        <para>The object ID of <paramref name="obj" /> if previously known to the
<see cref="T:System.Runtime.Serialization.ObjectIDGenerator" /> , otherwise, zero.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.Serialization.ObjectManager">
      <summary>
        <para> Keeps track of objects as they are deserialized.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.#ctor(System.Runtime.Serialization.ISurrogateSelector,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.ObjectManager" />
class.</para>
      </summary>
      <param name="selector">The surrogate selector to use. The <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> determines the correct surrogate to use when deserializing objects of a given type. At deserialization time, the surrogate selector creates a new instance of the object from the information transmitted on the stream.</param>
      <param name="context">The streaming context. The <see cref="T:System.Runtime.Serialization.StreamingContext" /> is not used by the ObjectManager, but is passed as a parameter to any objects implementing <see cref="T:System.Runtime.Serialization.ISerializable" /> or having a <see cref="T:System.Runtime.Serialization.ISerializationSurrogate" />. These objects can take specific actions depending on the source of the information to deserialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.GetObject(System.Int64)">
      <summary>
        <para>Returns the object with the specified object ID.</para>
      </summary>
      <param name="objectID">The ID of the requested object.</param>
      <returns>
        <para>The object with the specified object ID if it has been 
      previously stored, or
   <see langword="null" /> if no such object has been registered.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64)">
      <summary>
        <para>Registers an object as it is deserialized, associating it with
   <paramref name="objectID" />.</para>
      </summary>
      <param name="obj"> The object to register.</param>
      <param name="objectID"> The ID of the object to register.</param>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo)">
      <summary>
        <para>Registers an object as it is deserialized, associating
      it with <paramref name="objectID" />
      , and recording the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> used with it.</para>
      </summary>
      <param name="obj">The object to register.</param>
      <param name="objectID">The ID of the object to register.</param>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> used if <paramref name="obj" /> implements<see cref="T:System.Runtime.Serialization.ISerializable" /> or has an <see cref="T:System.Runtime.Serialization.ISerializationSurrogate" />. <paramref name="info" /> will be completed with any required fixup information and then passed to the required object when that object is completed.</param>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo,System.Int64,System.Reflection.MemberInfo)">
      <summary>
        <para>Registers a member of an object as it is deserialized,
      associating it with <paramref name="objectID" /> , and
      recording the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
      .</para>
      </summary>
      <param name="obj">The object to register.</param>
      <param name="objectID">The ID of the object to register.</param>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> used if <paramref name="obj" /> implements<see cref="T:System.Runtime.Serialization.ISerializable" /> or has an <see cref="T:System.Runtime.Serialization.ISerializationSurrogate" />. <paramref name="info" /> will be completed with any required fixup information and then passed to the required object when that object is completed.</param>
      <param name="idOfContainingObj">The ID of the object that contains <paramref name="obj" />. This parameter is required only if <paramref name="obj" /> is a value type. </param>
      <param name="member">The field in the containing object where <paramref name="obj" /> exists. This parameter has meaning only if <paramref name="obj" /> is a value type.</param>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo,System.Int64,System.Reflection.MemberInfo,System.Int32[])">
      <summary>
        <para>Registers a member of an array contained in an object while
 it is deserialized, associating it with <paramref name="objectID" /> , and
 recording the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
 .</para>
      </summary>
      <param name="obj">The object to register.</param>
      <param name="objectID">The ID of the object to register.</param>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> used if <paramref name="obj" /> implements<see cref="T:System.Runtime.Serialization.ISerializable" /> or has an <see cref="T:System.Runtime.Serialization.ISerializationSurrogate" />. <paramref name="info" /> will be completed with any required fixup information and then passed to the required object when that object is completed.</param>
      <param name="idOfContainingObj">The ID of the object that contains <paramref name="obj" />. This parameter is required only if <paramref name="obj" /> is a value type. </param>
      <param name="member">The field in the containing object where <paramref name="obj" /> exists. This parameter has meaning only if <paramref name="obj" /> is a value type.</param>
      <param name="arrayIndex">If <paramref name="obj" /> is a <see cref="T:System.ValueType" /> and a member of an array, <paramref name="arrayIndex" /> contains the index within that array where <paramref name="obj" /> exists. <paramref name="arrayIndex" /> is ignored if <paramref name="obj" /> is not both a <see cref="T:System.ValueType" /> and a member of an array.</param>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.DoFixups">
      <summary>
        <para> Performs
      all the recorded fixups.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RecordFixup(System.Int64,System.Reflection.MemberInfo,System.Int64)">
      <summary>
        <para>Records a fixup for a member of an object to be executed
 later.</para>
      </summary>
      <param name="objectToBeFixed">The ID of the object that needs the reference to the <paramref name="objectRequired" /> object.</param>
      <param name="member">The member of <paramref name="objectToBeFixed" /> where the fixup will be performed.</param>
      <param name="objectRequired"> The ID of the object required by <paramref name="objectToBeFixed" /> .</param>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RecordDelayedFixup(System.Int64,System.String,System.Int64)">
      <summary>
        <para>Records a fixup for an object member to be executed
      later.</para>
      </summary>
      <param name="objectToBeFixed">The ID of the object that needs the reference to <paramref name="objectRequired" /> .</param>
      <param name="memberName"> The member name of <paramref name="objectToBeFixed" /> where the fixup will be performed.</param>
      <param name="objectRequired"> The ID of the object required by <paramref name="objectToBeFixed" /> .</param>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup(System.Int64,System.Int32,System.Int64)">
      <summary>
        <para>Records a fixup for one
      element in an array.</para>
      </summary>
      <param name="arrayToBeFixed">The ID of the array used to record a fixup.</param>
      <param name="index">The index within <paramref name="arrayFixup " /> that a fixup is requested for.</param>
      <param name="objectRequired">The ID of the object that the current array element will point to after fixup is completed.</param>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup(System.Int64,System.Int32[],System.Int64)">
      <summary>
        <para>Records fixups for the specified elements in an
      array to be executed later.</para>
      </summary>
      <param name="arrayToBeFixed">The ID of the array used to record a fixup.</param>
      <param name="indices">The indexes within the multidimensional array that a fixup is requested for.</param>
      <param name="objectRequired">The ID of the object the array element