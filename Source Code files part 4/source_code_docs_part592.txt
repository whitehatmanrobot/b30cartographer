lStudio.TestTools.UnitTesting.CollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified collection contains the specified element
            and throws an exception if the element is not in the collection.
            </summary>
            <param name="collection">
            The collection in which to search for the element.
            </param>
            <param name="element">
            The element that is expected to be in the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="element"/>
            is not in <paramref name="collection"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="element"/> is not found in
            <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object)">
            <summary>
            Tests whether the specified collection does not contain the specified
            element and throws an exception if the element is in the collection.
            </summary>
            <param name="collection">
            The collection in which to search for the element.
            </param>
            <param name="element">
            The element that is expected not to be in the collection.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="element"/> is found in
            <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String)">
            <summary>
            Tests whether the specified collection does not contain the specified
            element and throws an exception if the element is in the collection.
            </summary>
            <param name="collection">
            The collection in which to search for the element.
            </param>
            <param name="element">
            The element that is expected not to be in the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="element"/>
            is in <paramref name="collection"/>. The message is shown in test
            results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="element"/> is found in
            <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified collection does not contain the specified
            element and throws an exception if the element is in the collection.
            </summary>
            <param name="collection">
            The collection in which to search for the element.
            </param>
            <param name="element">
            The element that is expected not to be in the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="element"/>
            is in <paramref name="collection"/>. The message is shown in test
            results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="element"/> is found in
            <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection)">
            <summary>
            Tests whether all items in the specified collection are non-null and throws
            an exception if any element is null.
            </summary>
            <param name="collection">
            The collection in which to search for null elements.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if a null element is found in <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String)">
            <summary>
            Tests whether all items in the specified collection are non-null and throws
            an exception if any element is null.
            </summary>
            <param name="collection">
            The collection in which to search for null elements.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="collection"/>
            contains a null element. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if a null element is found in <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether all items in the specified collection are non-null and throws
            an exception if any element is null.
            </summary>
            <param name="collection">
            The collection in which to search for null elements.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="collection"/>
            contains a null element. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if a null element is found in <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection)">
            <summary>
            Tests whether all items in the specified collection are unique or not and
            throws if any two elements in the collection are equal.
            </summary>
            <param name="collection">
            The collection in which to search for duplicate elements.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if a two or more equal elements are found in
            <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String)">
            <summary>
            Tests whether all items in the specified collection are unique or not and
            throws if any two elements in the collection are equal.
            </summary>
            <param name="collection">
            The collection in which to search for duplicate elements.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="collection"/>
            contains at least one duplicate element. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if a two or more equal elements are found in
            <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether all items in the specified collection are unique or not and
            throws if any two elements in the collection are equal.
            </summary>
            <param name="collection">
            The collection in which to search for duplicate elements.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="collection"/>
            contains at least one duplicate element. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if a two or more equal elements are found in
            <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Tests whether one collection is a subset of another collection and
            throws an exception if any element in the subset is not also in the
            superset.
            </summary>
            <param name="subset">
            The collection expected to be a subset of <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection expected to be a superset of <paramref name="subset"/>
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if an element in <paramref name="subset"/> is not found in
            <paramref name="superset"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether one collection is a subset of another collection and
            throws an exception if any element in the subset is not also in the
            superset.
            </summary>
            <param name="subset">
            The collection expected to be a subset of <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection expected to be a superset of <paramref name="subset"/>
            </param>
            <param name="message">
            The message to include in the exception when an element in
            <paramref name="subset"/> is not found in <paramref name="superset"/>.
            The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if an element in <paramref name="subset"/> is not found in
            <paramref name="superset"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether one collection is a subset of another collection and
            throws an exception if any element in the subset is not also in the
            superset.
            </summary>
            <param name="subset">
            The collection expected to be a subset of <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection expected to be a superset of <paramref name="subset"/>
            </param>
            <param name="message">
            The message to include in the exception when an element in
            <paramref name="subset"/> is not found in <paramref name="superset"/>.
            The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if an element in <paramref name="subset"/> is not found in
            <paramref name="superset"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Tests whether one collection is not a subset of another collection and
            throws an exception if all elements in the subset are also in the
            superset.
            </summary>
            <param name="subset">
            The collection expected not to be a subset of <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection expected not to be a superset of <paramref name="subset"/>
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if every element in <paramref name="subset"/> is also found in
            <paramref name="superset"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether one collection is not a subset of another collection and
            throws an exception if all elements in the subset are also in the
            superset.
            </summary>
            <param name="subset">
            The collection expected not to be a subset of <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection expected not to be a superset of <paramref name="subset"/>
            </param>
            <param name="message">
            The message to include in the exception when every element in
            <paramref name="subset"/> is also found in <paramref name="superset"/>.
            The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if every element in <paramref name="subset"/> is also found in
            <paramref name="superset"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether one collection is not a subset of another collection and
            throws an exception if all elements in the subset are also in the
            superset.
            </summary>
            <param name="subset">
            The collection expected not to be a subset of <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection expected not to be a superset of <paramref name="subset"/>
            </param>
            <param name="message">
            The message to include in the exception when every element in
            <paramref name="subset"/> is also found in <paramref name="superset"/>.
            The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if every element in <paramref name="subset"/> is also found in
            <paramref name="superset"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Tests whether two collections contain the same elements and throws an
            exception if either collection contains an element not in the other
            collection.
            </summary>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if an element was found in one of the collections but not
            the other.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether two collections contain the same elements and throws an
            exception if either collection contains an element not in the other
            collection.
            </summary>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="message">
            The message to include in the exception when an element was found
            in one of the collections but not the other. The message is shown
            in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if an element was found in one of the collections but not
            the other.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether two collections contain the same elements and throws an
            exception if either collection contains an element not in the other
            collection.
            </summary>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="message">
            The message to include in the exception when an element was found
            in one of the collections but not the other. The message is shown
            in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if an element was found in one of the collections but not
            the other.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Tests whether two collections contain the different elements and throws an
            exception if the two collections contain identical elements without regard
            to order.
            </summary>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects to be different than the actual collection.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if the two collections contained the same elements, including
            the same number of duplicate occurrences of each element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether two collections contain the different elements and throws an
            exception if the two collections contain identical elements without regard
            to order.
            </summary>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects to be different than the actual collection.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            contains the same elements as <paramref name="expected"/>. The message
            is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if the two collections contained the same elements, including
            the same number of duplicate occurrences of each element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether two collections contain the different elements and throws an
            exception if the two collections contain identical elements without regard
            to order.
            </summary>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects to be different than the actual collection.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            contains the same elements as <paramref name="expected"/>. The message
            is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if the two collections contained the same elements, including
            the same number of duplicate occurrences of each element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type)">
            <summary>
            Tests whether all elements in the specified collection are instances
            of the expected type and throws an exception if the expected type is
            not in the inheritance hierarchy of one or more of the elements.
            </summary>
            <param name="collection">
            The collection containing elements the test expects to be of the
            specified type.
            </param>
            <param name="expectedType">
            The expected type of each element of <paramref name="collection"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if an element in <paramref name="collection"/> is null or
            <paramref name="expectedType"/> is not in the inheritance hierarchy
            of an element in <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String)">
            <summary>
            Tests whether all elements in the specified collection are instances
            of the expected type and throws an exception if the expected type is
            not in the inheritance hierarchy of one or more of the elements.
            </summary>
            <param name="collection">
            The collection containing elements the test expects to be of the
            specified type.
            </param>
            <param name="expectedType">
            The expected type of each element of <paramref name="collection"/>.
            </param>
            <param name="message">
            The message to include in the exception when an element in
            <paramref name="collection"/> is not an instance of
            <paramref name="expectedType"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if an element in <paramref name="collection"/> is null or
            <paramref name="expectedType"/> is not in the inheritance hierarchy
            of an element in <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String,System.Object[])">
            <summary>
            Tests whether all elements in the specified collection are instances
            of the expected type and throws an exception if the expected type is
            not in the inheritance hierarchy of one or more of the elements.
            </summary>
            <param name="collection">
            The collection containing elements the test expects to be of the
            specified type.
            </param>
            <param name="expectedType">
            The expected type of each element of <paramref name="collection"/>.
            </param>
            <param name="message">
            The message to include in the exception when an element in
            <paramref name="collection"/> is not an instance of
            <paramref name="expectedType"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if an element in <paramref name="collection"/> is null or
            <paramref name="expectedType"/> is not in the inheritance hierarchy
            of an element in <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Tests whether the specified collections are equal and throws an exception
            if the two collections are not equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="expected">
            The first collection to compare. This is the collection the tests expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to 
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether the specified collections are equal and throws an exception
            if the two collections are not equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="expected">
            The first collection to compare. This is the collection the tests expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to 
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether the specified collections are equal and throws an exception
            if the two collections are not equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="expected">
            The first collection to compare. This is the collection the tests expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to 
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Tests whether the specified collections are unequal and throws an exception
            if the two collections are equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="notExpected">
            The first collection to compare. This is the collection the tests expects
            not to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether the specified collections are unequal and throws an exception
            if the two collections are equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="notExpected">
            The first collection to compare. This is the collection the tests expects
            not to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether the specified collections are unequal and throws an exception
            if the two collections are equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="notExpected">
            The first collection to compare. This is the collection the tests expects
            not to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer)">
            <summary>
            Tests whether the specified collections are equal and throws an exception
            if the two collections are not equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="expected">
            The first collection to compare. This is the collection the tests expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to 
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String)">
            <summary>
            Tests whether the specified collections are equal and throws an exception
            if the two collections are not equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="expected">
            The first collection to compare. This is the collection the tests expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to 
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Tests whether the specified collections are equal and throws an exception
            if the two collections are not equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="expected">
            The first collection to compare. This is the collection the tests expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to 
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer)">
            <summary>
            Tests whether the specified collections are unequal and throws an exception
            if the two collections are equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="notExpected">
            The first collection to compare. This is the collection the tests expects
            not to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String)">
            <summary>
            Tests whether the specified collections are unequal and throws an exception
            if the two collections are equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="notExpected">
            The first collection to compare. This is the collection the tests expects
            not to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Tests whether the specified collections are unequal and throws an exception
            if the two collections are equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="notExpected">
            The first collection to compare. This is the collection the tests expects
            not to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.GetElementCounts(System.Collections.ICollection,System.Int32@)">
            <summary>
            Constructs a dictionary containing the number of occurrences of each
            element in the specified collection.
            </summary>
            <param name="collection">
            The collection to process.
            </param>
            <param name="nullCount">
            The number of null elements in the collection.
            </param>
            <returns>
            A dictionary containing the number of occurrences of each element
            in the specified collection.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOfHelper(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Determines whether the first collection is a subset of the second
            collection. If either set contains duplicate elements, the number
            of occurrences of the element in the subset must be less than or
            equal to the number of occurrences in the superset.
            </summary>
            <param name="subset">
            The collection the test expects to be contained in <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection the test expects to contain <paramref name="subset"/>.
            </param>
            <returns>
            True if <paramref name="subset"/> is a subset of
            <paramref name="superset"/>, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.FindMismatchedElement(System.Collections.ICollection,System.Collections.ICollection,System.Int32@,System.Int32@,System.Object@)">
            <summary>
            Finds a mismatched element between the two collections. A mismatched
            element is one that appears a different number of times in the
            expected collection than it does in the actual collection. The
            collections are assumed to be different non-null references with the
            same number of elements. The caller is responsible for this level of
            verification. If there is no mismatched element, the function returns
            false and the out parameters should not be used.
            </summary>
            <param name="expected">The first collection to compare.</param>
            <param name="actual">The second collection to compare.</param>
            <param name="expectedCount">
            The expected number of occurrences of
            <paramref name="mismatchedElement"/> or 0 if there is no mismatched
            element.
            </param>
            <param name="actualCount">
            The actual number of occurrences of
            <paramref name="mismatchedElement"/> or 0 if there is no mismatched
            element.
            </param>
            <param name="mismatchedElement">
            The mismatched element (may be null) or null if there is no
            mismatched element.
            </param>
            <returns>
            true if a mismatched element was found; false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.ObjectComparer">
            <summary>
            compares the objects using object.Equals
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper">
            <summary>
            This class is designed to help user doing unit testing.
            GenericParameterHelper satisfies some comment generic type constraints
            such as:
            1. public default constructor
            2. implements common interface: IComparable, IEnumerable, ICloneable
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.#ctor">
            <summary>
            public default constructor, satisfies the constraint in C# generics.
            This constructor initializes the Data property to a random value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.#ctor(System.Int32)">
            <summary>
            This constructor initializes the Data property to a user-supplied value
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Equals(System.Object)">
            <summary>
            Do the value comparison for two GenericParameterHelper object
            </summary>
            <param name="obj">object to do comparison with</param>
            <returns>true if obj has the same value as 'this' GenericParameterHelper object.
            false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.CompareTo(System.Object)">
            <summary>
            Compares to the object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.GetEnumerator">
            <summary>
            Returns an IEnumerator object whose length is derived from
            the Data property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Clone">
            <summary>
            Returns a GenericParameterHelper object that is equal to 
            'this' one.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Data">
            <summary>
            Gets or sets the Data property.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.RuntimeTypeHelper">
            <summary>
            Provides method signature discovery for generic methods.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.RuntimeTypeHelper.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            Given a set of methods that match the base criteria, select a method based
            upon an array of types.  This method should return null if no method matches
            the criteria.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert">
            <summary>
            Set of string assertions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String)">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="substring"/> is not found in
            <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="substring"/>
            is not in <paramref name="value"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="substring"/> is not found in
            <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.String,System.Object[])">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="substring"/>
            is not in <paramref name="value"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="substring"/> is not found in
            <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String)">
            <summary>
            Tests whether the specified string begins with the specified substring
            and throws an exception if the test string does not start with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> does not begin with
            <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified string begins with the specified substring
            and throws an exception if the test string does not start with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not begin with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> does not begin with
            <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Tests whether the specified string begins with the specified substring
            and throws an exception if the test string does not start with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not begin with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> does not begin with
            <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String)">
            <summary>
            Tests whether the specified string ends with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to end with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a suffix of <paramref name="value"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> does not end with
            <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified string ends with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to end with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a suffix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not end with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> does not end with
            <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Tests whether the specified string ends with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to end with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a suffix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not end with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> does not end with
            <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Matches(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Tests whether the specified string matches a regular expression and
            throws an exception if the string does not match the expression.
            </summary>
            <param name="value">
            The string that is expected to match <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to match.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> does not match
            <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Matches(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Tests whether the specified string matches a regular expression and
            throws an exception if the string does not match the expression.
            </summary>
            <param name="value">
            The string that is expected to match <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to match.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not match <paramref name="pattern"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> does not match
            <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Matches(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
            <summary>
            Tests whether the specified string matches a regular expression and
            throws an exception if the string does not match the expression.
            </summary>
            <param name="value">
            The string that is expected to match <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to match.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not match <paramref name="pattern"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> does not match
            <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Tests whether the specified string does not match a regular expression
            and throws an exception if the string matches the expression.
            </summary>
            <param name="value">
            The string that is expected not to match <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to not match.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> matches <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Tests whether the specified string does not match a regular expression
            and throws an exception if the string matches the expression.
            </summary>
            <param name="value">
            The string that is expected not to match <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to not match.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            matches <paramref name="pattern"/>. The message is shown in test
            results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> matches <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
            <summary>
            Tests whether the specified string does not match a regular expression
            and throws an exception if the string matches the expression.
            </summary>
            <param name="value">
            The string that is expected not to match <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to not match.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            matches <paramref name="pattern"/>. The message is shown in test
            results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> matches <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext">
            <summary>
            TestContext class. This class should be fully abstract and not contain any 
            members. The adapter will implement the members. Users in the framework should
            only access this via a well-defined interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.WriteLine(System.String,System.Object[])">
            <summary>
            Used to write trace messages while the test is running
            </summary>
            <param name="format">format string</param>
            <param name="args">the arguments</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.AddResultFile(System.String)">
            <summary>
            Adds a file name to the list in TestResult.ResultFileNames
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.BeginTimer(System.String)">
            <summary>
            Begins a timer with the specified name
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.EndTimer(System.String)">
            <summary>
            Ends a timer with the specified name
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.Properties">
            <summary>
            Per test properties
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.DataRow">
            <summary>
            Current data row when test is used for data driven testing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.DataConnection">
            <summary>
            Current data connection row when test is used for data driven testing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestLogsDir">
            <summary>
            Gets the test logs directory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestDir">
            <summary>
            Gets the test directory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestDeploymentDir">
            <summary>
            Gets the test deployment directory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestName">
            <summary>
            Gets the test name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.CurrentTestOutcome">
            <summary>
            Gets the CurrentTestOutcome.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome">
            <summary>
            Outcome of a test or a run.
            If a new successful state needs to be added you will need to modify 
            RunResultAndStatistics in TestRun and TestOutcomeHelper below.
            
            NOTE: the order is important and is used for computing outcome for aggregations. 
                  More important outcomes come first. See TestOutcomeHelper.GetAggregationOutcome.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Failed">
            <summary>
            Test was executed, but there were issues.
            Issues may involve exceptions or failed assertions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Inconclusive">
            <summary>
            Test has completed, but we can't say if it passed or failed.
            May be used for aborted tests...
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Passed">
            <summary>
            Test was executed w/o any issues.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.InProgress">
            <summary>
            Test is currently executing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Error">
            <summary>
            There was a system error while we were trying to execute a test.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Timeout">
            <summary>
            The test timed out.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Aborted">
            <summary>
            Test was aborted by the user. 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Unknown">
            <summary>
            Test is in an unknown state
            </summary>
        </member>
        <member name="T:System.Data.DataRow">
            <summary>
            The data row.
            </summary>
        </member>
        <member name="T:System.Data.Common.DbConnection">
            <summary>
            The database connection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute">
            <summary>
            Marks a test class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute.#ctor">
            <summary>
            Initializes a new test class attribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute">
            <summary>
            Marks a test method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor">
            <summary>
            Initializes a new TestMethodAttribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute">
            <summary>
            A method marker called before a test method runs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute.#ctor">
            <summary>
            Initializes a new TestInitializeAttribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute">
            <summary>
            A method marker called after a test method runs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute.#ctor">
            <summary>
            Initializes a new TestCleanupAttribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute">
            <summary>
            Ignores a unit test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute.#ctor">
            <summary>
            Initializes a new IgnoreAttribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute">
            <summary>
            The ExpectedExceptionAttribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.#ctor(System.Type)">
            <summary>
            Initializes the ExpectedExceptionAttribute.
            </summary>
            <param name="exceptionType">The exception type.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes the ExpectedExceptionAttribute.
            </summary>
            <param name="exceptionType">The exception type.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.ExceptionType">
            <summary>
            Gets the exception type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute">
            <summary>
            The test property attribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes the TestPropertyAttribute.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute">
            <summary>
            The ClassInitializeAttribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute.#ctor">
            <summary>
            Initializes the ClassInitializeAttribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute">
            <summary>
            The ClassCleanupAttribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.#ctor">
            <summary>
            Initializes the ClassCleanupAttribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyInitializeAttribute">
            <summary>
            The AssemblyInitializeAttribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyInitializeAttribute.#ctor">
            <summary>
            Initializes the AssemblyInitializeAttribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyCleanupAttribute">
            <summary>
            The AssemblyCleanupAttribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyCleanupAttribute.#ctor">
            <summary>
            Initializes the AssemblyCleanupAttribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute">
            <summary>
            Description of the test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes the DescriptionAttribute.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute">
            <summary>
            The OwnerAttribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute.#ctor(System.String)">
            <summary>
            Initializes the OwnerAttribute.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute.Owner">
            <summary>
            Gets the owner.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute">
            <summary>
            CSS Project Structure URI.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute.#ctor(System.String)">
            <summary>
            Initializes the CSS Project Structure URI.
            </summary>
            <param name="cssProjectStructure">The structure.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute.CssProjectStructure">
            <summary>
            Gets the property structure.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute">
            <summary>
            CSS Iteration URI
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute.#ctor(System.String)">
            <summary>
            Initializes the CssIterationAttribute.
            </summary>
            <param name="cssIteration">The parameter.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute.CssIteration">
            <summary>
            Gets the CssIteration.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute">
            <summary>
            Priority attribute; used to specify the priority of a unit test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes the PriorityAttribute.
            </summary>
            <param name="priority">The priority.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute.Priority">
            <summary>
            Gets the Priority.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute">
            <summary>
            Timeout attribute; used to specify the timeout of a unit test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.#ctor(System.Int32)">
            <summary>
            Initializes the TimeoutAttribute.
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.Timeout">
            <summary>
            Gets the Timeout.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute">
            <summary>
            WorkItem attribute; used to specify a work item associated with this test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute.#ctor(System.Int32)">
            <summary>
            Initializes the WorkItemAttribute.
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute.Id">
            <summary>
            Gets the ID.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute">
            <summary>
            HostType specifies the type of host that this unit test will
            run in.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes the host type attribute.
            </summary>
            <param name="hostType"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor of HostTypeAttribute.
            </summary>
            <param name="hostType">The type of the host.</param>
            <param name="hostData">Custom data for the host adapter.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute.m_hostData">
            The reason this is string (and not object) is that currently CMI cannot parse arbitrary instances of object and we deprioritized changing CMI.
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute.HostType">
            <summary>
            Gets the host type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute.HostData">
            <summary>
            Gets the host data.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute">
            <summary>
            Used to specify deployment item (file or directory) for per-test deployment.
            Can be specified on test class or test method.
            Can have multiple instances of the attribute to specify more than one item.
            The item path can be absolute or relative, if relative, it is relative to RunConfig.RelativePathRoot.
            </summary>
            <example>
            [DeploymentItem("file1.xml")]
            [DeploymentItem("file2.xml", "DataFiles")]
            [DeploymentItem("bin\Debug")]
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute.#ctor(System.String)">
            <summary>
            Initializes DeploymentItemAttribute.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes DeploymentItemAttribute.
            </summary>
            <param name="path">The path.</param>
            <param name="outputDirectory">The output directory.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.IVerifiable">
            <summary>
            Verifiable interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IVerifiable.IsValid">
            <summary>
            The IsValid method.
            </summary>
            <returns>Returns a value.</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Toolkit\Apr10\Bin\Microsoft.Silverlight.Testing.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Silverlight.Testing</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Test">
            <summary>
            A class containing an Assert method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.Test.IsNotNull">
            <summary>
            The MethodInfo object used to invoke Assert.IsNotNull.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.Test.AreNotSame">
            <summary>
            The MethodInfo object used to invoke Assert.AreNotSame.
            </summary>        
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.Test.AreNotEqual">
            <summary>
            The MethodInfo object used to invoke Assert.AreNotEqual.
            </summary>        
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.Test.AreSame">
            <summary>
            The MethodInfo object used to invoke Assert.AreSame.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.Test.AreEqual">
            <summary>
            The MethodInfo object used to invoke Assert.AreEqual.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.Test.IsNull">
            <summary>
            The MethodInfo object used to invoke Assert.IsNull.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.Test.IsFalse">
            <summary>
            The MethodInfo object used to invoke Assert.IsFalse.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.Test.IsTrue">
            <summary>
            The MethodInfo object used to invoke Assert.IsTrue.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.Test.FindAnonymousTypeExpressionInString">
            <summary>
            A regular expression which identifies a pattern signifying an 
            anonymous type.  This pattern is emitted by the Expression object 
            when it converts an anonymous type to a string.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.Test.FindTransparentIdentifier">
            <summary>
            A regular expression which identifies a pattern emitted by an
            Expression object when it converts an anonymous type to a
            string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Test.Assert(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
            Asserts a condition is true.
            </summary>
            <param name="predicate">The condition that must be true.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Test.Assert(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.String)">
            <summary>
            Asserts a condition is true.
            </summary>
            <param name="predicate">The condition that must be true.</param>
            <param name="message">The message to be displayed when the test fails.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Test.GetMessageExpression(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Generates an assert failure message using the code block
            responsible for the failure.
            </summary>
            <param name="expression">The predicate that fails.</param>
            <param name="message">The user-provided assertion failure message.
            </param>
            <returns>A constant expression containing the user-provided failure
            message or a description of the expression that failed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Test.CreateAssertExpressionAction(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Analyzes the expression and creates an action which calls the 
            correct assert method based on its contents.
            </summary>
            <param name="expression">The predicate expression.</param>
            <param name="message">The message to display if an assertion fails.</param>
            <returns>An action which calls the correct assert method.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Test.AssertExpression``1(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.String)">
            <summary>
            Analyzes a predicate expression and invokes the correct assert 
            method.
            </summary>
            <typeparam name="T">The type of the argument to the predicate.
            </typeparam>
            <param name="predicate">A predicate to be converted into an 
            assert statement.</param>
            <param name="message">The assertion message.</param> 
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Test.CreateBinaryExpressionAction(System.Linq.Expressions.BinaryExpression,System.String)">
            <summary>
            Creates an action from certain types of supported binary expression
            patterns.  If no supported pattern is found null is returned.  Based
            on analyzing the predicate the action invokes the correct Assert
            method.
            </summary>
            <param name="binaryExpression">A binary expression extracted from a
            predicate expression.</param>
            <param name="message">The message to display if the assertion 
            fails.</param>
            <returns>An action that invokes an Assert method.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.AsynchronousAttribute">
            <summary>
            Mark the test method as one which expects asynchronous execution. 
            It is important to call TestComplete() once it is ready or your 
            test will never continue/timeout.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.BugAttribute">
            <summary>
            An attribute that contains known bug information that can be logged 
            during a unit test run. 
            
            When applied to a test method, it will invert the result. This makes it 
            possible to perform automated runs and continuous integration while 
            validating and tracking known issues.
            
            The attribute should have the Fixed bool set to True, or be removed, 
            once the issue is resolved.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.BugAttribute.#ctor">
            <summary>
            Construct a new BugAttribute with no bug description.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.BugAttribute.#ctor(System.String)">
            <summary>
            Construct a new BugAttribute with a bug description.
            </summary>
            <param name="description">Known issue text.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.BugAttribute.ToString">
            <summary>
            Return the bug information.
            </summary>
            <returns>Known issue as a string.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.BugAttribute.Description">
            <summary>
            Gets the bug description.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.BugAttribute.Fixed">
            <summary>
            Gets or sets a value indicating whether the known issue has been 
            fixed. If it has, the attribute is ignored and will not affect 
            test results.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.AdvancedButton">
            <summary>
            Represents a control that builds on top of the standard platform Button,
            offering the ability to modify the corner radii or even use special
            button modes.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.AdvancedButton.SecondaryVisibilityProperty">
            <summary>
            Identifies the SecondaryVisibility dependency property.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.AdvancedButton.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.AdvancedButton.SecondaryVisibility">
            <summary>
            Gets or sets the visibility of a secondary set of visuals in the
            template.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.AdvancedButton.CornerRadius">
            <summary>
            Gets or sets the corner radius to use.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.BrushSelector">
            <summary>
            A color selection converter for translating a bool result into
            a color.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.BrushSelector.#ctor">
            <summary>
            Initializes a new instance of the ColorSelectorConverter type.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.BrushSelector.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a boolean value to a Color value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target parameter.</param>
            <param name="parameter">ConverterParameter is of type Visibility.</param>
            <param name="culture">The culture parameter.</param>
            <returns>Returns the object.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.BrushSelector.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Support 2-way databinding of the VisibilityConverter, converting 
            Visibility to a boolean.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target parameter.</param>
            <param name="parameter">ConverterParameter is of type Visibility.</param>
            <param name="culture">The culture parameter.</param>
            <returns>Returns the object.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.BrushSelector.TrueBrush">
            <summary>
            Gets or sets the color to use for true values.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.BrushSelector.FalseBrush">
            <summary>
            Gets or sets the color to use for false values.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.CollectionHelper">
            <summary>
            A set of extension methods for manipulating collections.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.CollectionHelper.IsReadOnly(System.Collections.IEnumerable)">
            <summary>
            Returns a value indicating whether a collection is read-only.
            </summary>
            <param name="collection">The collection to examine.</param>
            <returns>A value indicating whether a collection is read-only.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.CollectionHelper.CanInsert(System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns a value Indicating whether an item can be inserted in a 
            collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="item">The item to be inserted.</param>
            <returns>A value Indicating whether an item can be inserted in a 
            collection.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.CollectionHelper.Insert(System.Collections.IEnumerable,System.Int32,System.Object)">
            <summary>
            Inserts an item into the collection at an index.
            </summary>
            <param name="collection">The collection.</param>
            <param name="index">The index at which to insert the item.</param> 
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.CollectionHelper.Count(System.Collections.IEnumerable)">
            <summary>
            Gets the number of items in the collection.
            </summary>
            <param name="collection">The collection.</param>
            <returns>The number of items in the collection.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.CollectionHelper.Add(System.Collections.IEnumerable,System.Object)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.CollectionHelper.Remove(System.Collections.IEnumerable,System.Object)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.CollectionHelper.RemoveAt(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Removes an item at a given index from the collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="index">The index of the item to be removed.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.ColorSelectorConverter">
            <summary>
            A color selection converter for translating a bool result into
            a color.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.ColorSelectorConverter.DefaultTrueColor">
            <summary>
            The default true color.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.ColorSelectorConverter.DefaultFalseColor">
            <summary>
            The default false color.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.ColorSelectorConverter.#ctor">
            <summary>
            Initializes a new instance of the ColorSelectorConverter type.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.ColorSelectorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a boolean value to a Color value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target parameter.</param>
            <param name="parameter">ConverterParameter is of type Visibility.</param>
            <param name="culture">The culture parameter.</param>
            <returns>Returns the object.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.ColorSelectorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Support 2-way databinding of the VisibilityConverter, converting 
            Visibility to a boolean.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target parameter.</param>
            <param name="parameter">ConverterParameter is of type Visibility.</param>
            <param name="culture">The culture parameter.</param>
            <returns>Returns the object.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.ColorSelectorConverter.TrueColor">
            <summary>
            Gets or sets the color to use for true values.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.ColorSelectorConverter.FalseColor">
            <summary>
            Gets or sets the color to use for false values.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.EnumerableExtensions">
            <summary>
            A set of extension methods for the sequence class.
            </summary>;dsf
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.EnumerableExtensions.Iterate``1(``0,System.Func{``0,``0})">
            <summary>
            Produces a sequence of items using a seed value and iteration 
            method.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="value">The initial value.</param>
            <param name="next">The iteration function.</param>
            <returns>A sequence of items using a seed value and iteration 
            method.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepend an item to a sequence.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence to append the item to.</param>
            <param name="value">The item to append to the sequence.</param>
            <returns>A new sequence.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.EnumerableExtensions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Accepts two sequences and applies a function to the corresponding 
            values in the two sequences.
            </summary>
            <typeparam name="T0">The type of the first sequence.</typeparam>
            <typeparam name="T1">The type of the second sequence.</typeparam>
            <typeparam name="R">The return type of the function.</typeparam>
            <param name="enumerable0">The first sequence.</param>
            <param name="enumerable1">The second sequence.</param>
            <param name="func">The function to apply to the corresponding values
            from the two sequences.</param>
            <returns>A sequence of transformed values from both sequences.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.FontWeightConverter">
            <summary>
            A converter for modifying the font weight based on a parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.FontWeightConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a boolean value to a FontWeight value.
            </summary>
            <param name="value">The value object.</param>
            <param name="targetType">The target parameter.</param>
            <param name="parameter">ConverterParameter is of type Visibility.</param>
            <param name="culture">The culture parameter.</param>
            <returns>Returns the object.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.FontWeightConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Support 2-way databinding of the VisibilityConverter, converting 
            Visibility to a bool.
            </summary>
            <param name="value">The value object.</param>
            <param name="targetType">The target parameter.</param>
            <param name="parameter">ConverterParameter is of type Visibility.</param>
            <param name="culture">The culture parameter.</param>
            <returns>Returns the object.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.FontWeightConverter.GetFontWeightMode(System.Object)">
            <summary>
            Determine the visibility mode based on a converter parameter. This
            parameter is of type Visibility, and specifies what visibility value
            to return when the boolean value is true.
            </summary>
            <param name="parameter">The parameter object.</param>
            <returns>Returns a FontWeight value.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.FontWeightConverter.IsFontWeightInverted(System.Object)">
            <summary>
            Determine whether or not weight is inverted based on a converter
            parameter.
            </summary>
            <param name="parameter">The parameter instance.</param>
            <returns>Returns a value indicating whether the instance is 
            inverting.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.FunctionalProgramming">
            <summary>
            Collection of functions for functional programming tasks.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.FunctionalProgramming.TraverseBreadthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Traverses a tree by accepting an initial value and a function that 
            retrieves the child nodes of a node.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <param name="initialNode">The initial node.</param>
            <param name="getChildNodes">A function that retrieves the child
            nodes of a node.</param>
            <param name="traversePredicate">A predicate that evaluates a node
            and returns a value indicating whether that node and it's children
            should be traversed.</param>
            <returns>A stream of nodes.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.Header">
            <summary>
            The test results header control.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Header.#ctor">
            <summary>
            Initializes a new instance of the Header type.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Header.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.InvertedTypeNameVisibilityConverter">
            <summary>
            A value converter for collapsing or showing elements based on the bound
            object's type name. Does not walk the hierarchy - it is explicit to the
            most specific class for the value. This class,
            InvertedTypeNameVisibilityConverter, offers the opposite behavior of the
            TypeNameVisibilityConverter class.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.TypeNameVisibilityConverter">
            <summary>
            A value converter for collapsing or showing elements based on the bound
            object's type name. Does not walk the hierarchy - it is explicit to the
            most specific class for the value.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TypeNameVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a value based on CLR type to a Visibility value. Does not
            walk the type tree, however.
            </summary>
            <param name="value">The value instance.</param>
            <param name="targetType">The target parameter.</param>
            <param name="parameter">ConverterParameter is the name of the type,
            both short and full names are checked, short name first.</param>
            <param name="culture">The culture parameter.</param>
            <returns>Returns the object.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TypeNameVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back, not supported with this value converter.
            </summary>
            <param name="value">The value instance.</param>
            <param name="targetType">The target parameter.</param>
            <param name="parameter">ConverterParameter is of type Visibility.</param>
            <param name="culture">The culture parameter.</param>
            <returns>Returns the object.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TypeNameVisibilityConverter.IsInverted">
            <summary>
            Gets a value indicating whether the visibility value should be
            inverted.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.InvertedTypeNameVisibilityConverter.IsInverted">
            <summary>
            Gets a value indicating whether the visibility value should be
            inverted.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.ItemsControlExtensions">
            <summary>
            Provides useful extensions to ItemsControl instances.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlExtensions.GetItemsHost(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the Panel that contains the containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>
            The Panel that contains the containers of an ItemsControl, or null
            if the Panel could not be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlExtensions.GetScrollHost(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the ScrollViewer that contains the containers of an
            ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>
            The ScrollViewer that contains the containers of an ItemsControl, or
            null if a ScrollViewer could not be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlExtensions.GetContainers(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the item containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>The item containers of an ItemsControl.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlExtensions.GetContainers``1(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the item containers of an ItemsControl.
            </summary>
            <typeparam name="TContainer">
            The type of the item containers.
            </typeparam>
            <param name="control">The ItemsControl.</param>
            <returns>The item containers of an ItemsControl.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlExtensions.GetContainersIterator``1(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the item containers of an ItemsControl.
            </summary>
            <typeparam name="TContainer">
            The type of the item containers.
            </typeparam>
            <param name="control">The ItemsControl.</param>
            <returns>The item containers of an ItemsControl.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlExtensions.GetItemsAndContainers(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the items and item containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>The items and item containers of an ItemsControl.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlExtensions.GetItemsAndContainers``1(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the items and item containers of an ItemsControl.
            </summary>
            <typeparam name="TContainer">
            The type of the item containers.
            </typeparam>
            <param name="control">The ItemsControl.</param>
            <returns>The items and item containers of an ItemsControl.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlExtensions.GetItemsAndContainersIterator``1(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the items and item containers of an ItemsControl.
            </summary>
            <typeparam name="TContainer">
            The type of the item containers.
            </typeparam>
            <param name="control">The ItemsControl.</param>
            <returns>The items and item containers of an ItemsControl.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlExtensions.CanAddItem(System.Windows.Controls.ItemsControl,System.Object)">
            <summary>
            Returns a value indicating whether an item can be added to an
            ItemsControl.
            </summary>
            <param name="that">The ItemsControl instance.</param>
            <param name="item">The item to be added.</param>
            <returns>A value Indicating whether an item can be added to an
            ItemsControl.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlExtensions.CanRemoveItem(System.Windows.Controls.ItemsControl)">
            <summary>
            Returns a value indicating whether an item can be removed from the
            ItemsControl.
            </summary>
            <param name="that">The items control.</param>
            <returns>A value indicating whether an item can be removed from the
            ItemsControl.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlExtensions.InsertItem(System.Windows.Controls.ItemsControl,System.Int32,System.Object)">
            <summary>
            Inserts an item into an ItemsControl.
            </summary>
            <param name="that">The ItemsControl instance.</param>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlExtensions.AddItem(System.Windows.Controls.ItemsControl,System.Object)">
            <summary>
            Adds an item to an ItemsControl.
            </summary>
            <param name="that">The ItemsControl instance.</param>
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlExtensions.RemoveItem(System.Windows.Controls.ItemsControl,System.Object)">
            <summary>
            Removes an item from an ItemsControl.
            </summary>
            <param name="that">The ItemsControl instance.</param>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlExtensions.RemoveItemAtIndex(System.Windows.Controls.ItemsControl,System.Int32)">
            <summary>
            Removes an item from an ItemsControl.
            </summary>
            <param name="that">The ItemsControl instance.</param>
            <param name="index">The index of the item to be removed.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlExtensions.GetItemCount(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the number of items in an ItemsControl.
            </summary>
            <param name="that">The ItemsControl instance.</param>
            <returns>The number of items in the ItemsControl.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.LayoutTransformer">
            <summary>
            Represents a control that applies a layout transformation to its Content.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.LayoutTransformer.TransformRootName">
            <summary>
            Name of the TransformRoot template part.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.LayoutTransformer.PresenterName">
            <summary>
            Name of the Presenter template part.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.LayoutTransformer.AcceptableDelta">
            <summary>
            Acceptable difference between two doubles.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.LayoutTransformer.DecimalsAfterRound">
            <summary>
            Number of decimals to round the Matrix to.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.LayoutTransformer.LayoutTransformProperty">
            <summary>
            Identifies the LayoutTransform DependencyProperty.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.LayoutTransformer._transformRoot">
            <summary>
            Root element for performing transformations.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.LayoutTransformer._contentPresenter">
            <summary>
            ContentPresenter element for displaying the content.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.LayoutTransformer._matrixTransform">
            <summary>
            RenderTransform/MatrixTransform applied to _transformRoot.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.LayoutTransformer._transformation">
            <summary>
            Transformation matrix corresponding to _matrixTransform.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.LayoutTransformer._childActualSize">
            <summary>
            Actual DesiredSize of Child element (the value it returned from its MeasureOverride method).
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.LayoutTransformer.#ctor">
            <summary>
            Initializes a new instance of the LayoutTransformer class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.LayoutTransformer.OnApplyTemplate">
            <summary>
            Builds the visual tree for the LayoutTransformer control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.LayoutTransformer.LayoutTransformChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Transform DependencyProperty.
            </summary>
            <param name="o">Source of the change.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.LayoutTransformer.ApplyLayoutTransform">
            <summary>
            Applies the layout transform on the LayoutTransformer control content.
            </summary>
            <remarks>
            Only used in advanced scenarios (like animating the LayoutTransform). 
            Should be used to notify the LayoutTransformer control that some aspect 
            of its Transform property has changed. 
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.LayoutTransformer.ProcessTransform(System.Windows.Media.Transform)">
            <summary>
            Processes the Transform to determine the corresponding Matrix.
            </summary>
            <param name="transform">Transform to process.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.LayoutTransformer.GetTransformMatrix(System.Windows.Media.Transform)">
            <summary>
            Walks the Transform(Group) and returns the corresponding Matrix.
            </summary>
            <param name="transform">Transform(Group) to walk.</param>
            <returns>Computed Matrix.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.LayoutTransformer.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Measure" pass of layout.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.LayoutTransformer.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
            <remarks>
            Using the WPF paramater name finalSize instead of Silverlight's finalSize for clarity
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.LayoutTransformer.ComputeLargestTransformedSize(System.Windows.Size)">
            <summary>
            Compute the largest usable size (greatest area) after applying the transformation to the specified bounds.
            </summary>
            <param name="arrangeBounds">Arrange bounds.</param>
            <returns>Largest Size possible.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.LayoutTransformer.IsSizeSmaller(System.Windows.Size,System.Windows.Size)">
            <summary>
            Returns true if Size a is smaller than Size b in either dimension.
            </summary>
            <param name="a">Second Size.</param>
            <param name="b">First Size.</param>
            <returns>True if Size a is smaller than Size b in either dimension.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.LayoutTransformer.RoundMatrix(System.Windows.Media.Matrix,System.Int32)">
            <summary>
            Rounds the non-offset elements of a Matrix to avoid issues due to floating point imprecision.
            </summary>
            <param name="matrix">Matrix to round.</param>
            <param name="decimals">Number of decimal places to round to.</param>
            <returns>Rounded Matrix.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.LayoutTransformer.RectTransform(System.Windows.Rect,System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Rect.Transform on Silverlight.
            </summary>
            <param name="rect">Rect to transform.</param>
            <param name="matrix">Matrix to transform with.</param>
            <returns>Bounding box of transformed Rect.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.LayoutTransformer.MatrixMultiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Matrix.Multiply on Silverlight.
            </summary>
            <param name="matrix1">First matrix.</param>
            <param name="matrix2">Second matrix.</param>
            <returns>Multiplication result.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.LayoutTransformer.MatrixHasInverse(System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Matrix.HasInverse on Silverlight.
            </summary>
            <param name="matrix">Matrix to check for inverse.</param>
            <returns>True if the Matrix has an inverse.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.LayoutTransformer.DiagnosticWriteLine(System.String)">
            <summary>
            Outputs diagnostic info if DIAGNOSTICWRITELINE is defined.
            </summary>
            <param name="message">Diagnostic message.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.LayoutTransformer.LayoutTransform">
            <summary>
            Gets or sets the layout transform to apply on the LayoutTransformer 
            control content.
            </summary>
            <remarks>
            Corresponds to UIElement.LayoutTransform.
            </remarks>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.LayoutTransformer.Child">
            <summary>
            Gets the child element being transformed.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.MobileStartup">
            <summary>
            The TagEditor control provides a brief user interface allowing for the
            selection of a set of tests, used to filter the test run.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.MobileStartup.TagHistoryKey">
            <summary>
            Key used to lookup the TagHistory site setting.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.MobileStartup.SecondsToWait">
            <summary>
            Number of seconds to wait before running the test.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileStartup.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TagEditor type.
            </summary>
            <param name="initialTagExpression">The tag expression to use.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileStartup.#ctor">
            <summary>
            Initializes a new instance of the TagEditor type.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileStartup.OnComplete(Microsoft.Silverlight.Testing.Client.TagExpressionEventArgs)">
            <summary>
            Fires the Complete event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileStartup.OnTouchToEnterTextClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle touch of the button to display the text box.
            </summary>
            <param name="sender">Tag button.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileStartup.OnTagButtonClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle selection of a tag button.
            </summary>
            <param name="sender">Tag button.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileStartup.OnTagTouched(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle changes to the Tag text.
            </summary>
            <param name="sender">Tag TextBox.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileStartup.OnRunClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle clicks to the Run button.
            </summary>
            <param name="sender">Run Button.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileStartup.OnTimerTick(System.Object,System.EventArgs)">
            <summary>
            Handle timer ticks.
            </summary>
            <param name="sender">The timer.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileStartup.StopTimer">
            <summary>
            Stop the timer.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileStartup.RunTests">
            <summary>
            Run the unit tests.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileStartup.OnCancelClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cancels the selection of a tag expression.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileStartup.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.MobileStartup.Timer">
            <summary>
            Gets or sets the timer used to automatically run tests if no tag is
            entered.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.MobileStartup.SecondsWaited">
            <summary>
            Gets or sets the number of seconds already waited.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.MobileStartup.TagHistory">
            <summary>
            Gets or sets the tag history.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Client.MobileStartup.Complete">
            <summary>
            An event that indicates that the tag editor is complete. This can be
            in response to many actions: the user entering a tag expression, the
            time expiring and the default being selected, or the selection being
            canceled.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.MobileTestExceptionDetails">
            <summary>
            Mobile test exceptions page.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestExceptionDetails.#ctor">
            <summary>
            Initializes a new instance of the page.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestExceptionDetails.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.MobileTestMethodDetails">
            <summary>
            Mobile test method details page.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestMethodDetails.#ctor">
            <summary>
            Initializes a new instance of the page.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestMethodDetails.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.MobileTestPage">
            <summary>
            A user control designed for mobile platforms. The control should be used
            as the root visual for a Silverlight plugin if developers would like to 
            use the advanced TestSurface functionality.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.ITestPage">
            <summary>
            An interface for any test page instances to implement.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.ITestPage.TestPanel">
            <summary>
            Gets the test panel instance.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.IMobileTestPage">
            <summary>
            An interface for any test page instances to implement.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.IMobileTestPage.NavigateBack">
            <summary>
            Requests navigation back a page.
            </summary>
            <returns>A value indicating whether the operation was successful.</returns>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.MobileTestPage._slides">
            <summary>
            Contains the slide manager for the primitive user interface
            navigation system.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.MobileTestPage._harness">
            <summary>
            Backing field for the unit test harness instance.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.MobileTestPage._delayedInitializationTimer">
            <summary>
            Backing field for the startup timer.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.MobileTestPage._model">
            <summary>
            Backing field for the model manager.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestPage.#ctor">
            <summary>
            Initializes a new instance of the MobileTestPage class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestPage.#ctor(Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Initializes the MobileTestPage object.
            </summary>
            <param name="harness">The test harness instance.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestPage.OnDelayedInitializationTick(System.Object,System.EventArgs)">
            <summary>
            Waits for the Settings to become available, either by the service or
            system setting the instance property.
            </summary>
            <param name="sender">The source timer.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestPage.CreateAndInsertSlide(System.String,System.Object)">
            <summary>
            Creates a new slide and inserts it into the slide manager, plus
            visual tree.
            </summary>
            <param name="header">The text header to use.</param>
            <param name="content">The content to inside the slide.</param>
            <returns>Returns the new Slide instance.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestPage.OnTagExpressionSelected(System.Object,Microsoft.Silverlight.Testing.Client.TagExpressionEventArgs)">
            <summary>
            Handles the completion event on the tag expression editor to begin
            the test run using the user-provided settings.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestPage.StartTestRun">
            <summary>
            Starts the test run.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestPage.OnTestHarnessCompleted(System.Object,Microsoft.Silverlight.Testing.Harness.TestHarnessCompletedEventArgs)">
            <summary>
            Handles the test harness complete event, to display results.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestPage.OnMoveBackToTestAssembliesClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the movement back to the test assemblies list.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestPage.OnMoveBackToTestClassesClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the movement back to the test classes list.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestPage.OnMoveBackToTestMethodsClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the movement back to the test methods list.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestPage.OnTestAssemblySelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the selection of a test assembly.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestPage.OnTestClassSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the selection of a test class.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestPage.OnTestMethodsSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the selection of a test method.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestPage.NavigateBack">
            <summary>
            Requests navigation back a page.
            </summary>
            <returns>A value indicating whether the operation was successful.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.MobileTestPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.MobileTestPage.TestPanel">
            <summary>
            Gets the test surface, a dynamic Panel that removes its children 
            elements after each test completes.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.MobileTestPage.UnitTestHarness">
            <summary>
            Gets the unit test harness instance.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.ResultsTreeView">
            <summary>
            A derived TreeView control specific to the application needs for
            showing results in real-time.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.TreeView">
            <summary>
            Represents a control that displays hierarchical data in a tree structure
            that has items that can expand and collapse.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.IUpdateVisualState">
            <summary>
            The IUpdateVisualState interface is used to provide the
            InteractionHelper with access to the type's UpdateVisualState method.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.IUpdateVisualState.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeView._allowWrite">
            <summary>
            A value indicating whether a read-only dependency property change
            handler should allow the value to be set.  This is used to ensure
            that read-only properties cannot be changed via SetValue, etc.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeView._ignorePropertyChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedItemProperty">
            <summary>
            Identifies the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedItem" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedItem" />
            property.
            </value>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.OnSelectedItemPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedItemProperty property changed handler.
            </summary>
            <param name="d">TreeView that changed its SelectedItem.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedValueProperty">
            <summary>
            Identifies the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedValue" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedValue" />
            dependency property.
            </value>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.OnSelectedValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedValueProperty property changed handler.
            </summary>
            <param name="d">TreeView that changed its SelectedValue.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedValuePathProperty">
            <summary>
            Identifies the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedValuePath" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedValuePath" />
            dependency property.
            </value>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.OnSelectedValuePathPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedValuePathProperty property changed handler.
            </summary>
            <param name="d">TreeView that changed its SelectedValuePath.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeView.ItemContainerStyleProperty">
            <summary>
            Identifies the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeView.ItemContainerStyle" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeView.ItemContainerStyle" />
            dependency property.
            </value>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.OnItemContainerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemContainerStyleProperty property changed handler.
            </summary>
            <param name="d">
            TreeView that changed its ItemContainerStyle.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeView" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.OnCreateAutomationPeer">
            <summary>
            Returns a
            <see cref="T:System.Windows.Automation.Peers.TreeViewAutomationPeer" />
            for use by the Silverlight automation infrastructure.
            </summary>
            <returns>
            A
            <see cref="T:System.Windows.Automation.Peers.TreeViewAutomationPeer" />
            for the <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeView" /> control.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.OnApplyTemplate">
            <summary>
            Builds the visual tree for the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeView" /> control when a new
            control template is applied.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.Microsoft#Silverlight#Testing#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the TreeView.
            </summary>
            <param name="useTransitions">
            A value indicating whether to use transitions when updating the
            visual state.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.GetContainerForItemOverride">
            <summary>
            Creates a <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> to
            display content.
            </summary>
            <returns>
            A <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> to use as a
            container for content.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines whether the specified item is a
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" />, which is the
            default container for items in the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeView" /> control.
            </summary>
            <param name="item">The object to evaluate.</param>
            <returns>
            True if the item is a
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" />; otherwise,
            false.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the container element to display the specified item.
            </summary>
            <param name="element">
            The container element used to display the specified item.
            </param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Removes all templates, styles, and bindings for the object displayed
            as a <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" />.
            </summary>
            <param name="element">
            The <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> element to
            clear.
            </param>
            <param name="item">
            The item that is contained in the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" />.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Makes adjustments to the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeView" /> control when the
            value of the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.ItemsControl.Items" /> property
            changes.
            </summary>
            <param name="e">
            A
            <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />
            that contains data about the change.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.CheckForSelectedDescendents(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Select any descendents when adding new TreeViewItems to a TreeView.
            </summary>
            <param name="item">The added item.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.PropagateKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Propagate OnKeyDown messages from the root TreeViewItems to their
            TreeView.
            </summary>
            <param name="e">Event arguments.</param>
            <remarks>
            Because Silverlight's ScrollViewer swallows many useful key events
            (which it can ignore on WPF if you override HandlesScrolling or use
            an internal only variable in Silverlight), the root TreeViewItems
            explicitly propagate KeyDown events to their parent TreeView.
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.KeyDown" /> event when a key
            is pressed while the control has focus.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains
            the event data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e " />is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.HandleScrollKeys(System.Windows.Input.Key)">
            <summary>
            Handle keys related to scrolling.
            </summary>
            <param name="key">The key to handle.</param>
            <returns>A value indicating whether the key was handled.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.HandleScrollByPage(System.Boolean)">
            <summary>
            Handle scrolling a page up or down.
            </summary>
            <param name="up">
            A value indicating whether the page should be scrolled up.
            </param>
            <returns>
            A value indicating whether the scroll was handled.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyUp event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseMove event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
            event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that
            contains the event data.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonUp event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.HandleMouseButtonDown">
            <summary>
            Provides handling for mouse button events.
            </summary>
            <returns>A value indicating whether the event was handled.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.OnSelectedItemChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Raises the
            <see cref="E:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedItemChanged" />
            event when the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedItem" />
            property value changes.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.RoutedPropertyChangedEventArgs`1" />
            that contains the event data.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.ChangeSelection(System.Object,Microsoft.Silverlight.Testing.Controls.TreeViewItem,System.Boolean)">
            <summary>
            Change whether a TreeViewItem is selected.
            </summary>
            <param name="itemOrContainer">
            Item whose selection is changing.
            </param>
            <param name="container">
            Container of the item whose selection is changing.
            </param>
            <param name="selected">
            A value indicating whether the TreeViewItem is selected.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.UpdateSelectedValue(System.Object)">
            <summary>
            Update the selected value of the of the TreeView based on the value
            of the currently selected TreeViewItem and the SelectedValuePath.
            </summary>
            <param name="item">
            Value of the currently selected TreeViewItem.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.SelectFirstItem">
            <summary>
            Select the first item of the TreeView.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.FocusFirstItem">
            <summary>
            Focus the first item in the TreeView.
            </summary>
            <returns>A value indicating whether the item was focused.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeView.FocusLastItem">
            <summary>
            Focus the last item in the TreeView.
            </summary>
            <returns>A value indicating whether the item was focused.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedItem">
            <summary>
            Gets the selected item in a
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeView" />.
            </summary>
            <value>
            The currently selected item or null if no item is selected. The
            default value is null.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedValue">
            <summary>
            Gets the value of the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedItem" />
            property that is specified by the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedValuePath" />
            property.
            </summary>
            <value>
            The value of the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedItem" />
            property that is specified by the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedValuePath" />
            property, or null if no item is selected. The default value is null.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedValuePath">
            <summary>
            Gets or sets the property path that is used to get the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedValue" />
            property of the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedItem" />
            property in a <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeView" />.
            </summary>
            <value>
            The property path that is used to get the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedValue" />
            property of the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedItem" />
            property in a <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeView" />. The
            default value is <see cref="F:System.String.Empty" />.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeView.ItemContainerStyle">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> that is
            applied to the container element generated for each item.
            </summary>
            <value>
            The <see cref="T:System.Windows.Style" /> applied to the container
            element that contains each item.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedContainer">
            <summary>
            Gets the currently selected TreeViewItem container.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeView.IsSelectedContainerHookedUp">
            <summary>
            Gets a value indicating whether the currently selected TreeViewItem
            container is properly hooked up to the TreeView.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeView.IsSelectionChangeActive">
            <summary>
            Gets or sets a value indicating whether the selected item is
            currently being changed.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeView.ItemsControlHelper">
            <summary>
            Gets the ItemsControlHelper that is associated with this control.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeView.Interaction">
            <summary>
            Gets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeView.IsControlKeyDown">
            <summary>
            Gets a value indicating whether the Control key is currently
            pressed.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeView.IsShiftKeyDown">
            <summary>
            Gets a value indicating whether the Shift key is currently pressed.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedItemChanged">
            <summary>
            Occurs when the value of the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeView.SelectedItem" />
            property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.ResultsTreeView.GetContainerForItemOverride">
            <summary>
            Overrides the item to allow for simple binding to the expanded
            property on the item.
            </summary>
            <returns>Returns a new container for an item.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.ResultsTreeView.GetSharedContainer">
            <summary>
            This method returns the container with an expanded binding.
            </summary>
            <returns>Returns the container with an expanded binding.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.ResultsTreeViewItem">
            <summary>
            A derived TreeViewItem for IsExpanded binding.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem">
            <summary>
            Provides a selectable item for the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeView" /> control.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl">
            <summary>
            Represents a control that contains a collection of items and a header.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.HeaderProperty">
            <summary>
            Identifies the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.Header" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.Header" />
            dependency property.
            </value>
            <remarks>
            Note: WPF defines this property via a call to AddOwner of
            HeaderedContentControl's HeaderProperty.
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.OnHeaderPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HeaderProperty property changed handler.
            </summary>
            <param name="d">
            HeaderedItemsControl that changed its Header.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.HeaderTemplateProperty">
            <summary>
            Identifies the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.HeaderTemplate" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.HeaderTemplate" />
            dependency property.
            </value>
            <remarks>
            Note: WPF defines this property via a call to AddOwner of
            HeaderedContentControl's HeaderTemplateProperty.
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.OnHeaderTemplatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HeaderTemplateProperty property changed handler.
            </summary>
            <param name="d">
            HeaderedItemsControl that changed its HeaderTemplate.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.ItemContainerStyleProperty">
            <summary>
            Identifies the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.ItemContainerStyle" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.ItemContainerStyle" />
            dependency property.
            </value>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.OnItemContainerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemContainerStyleProperty property changed handler.
            </summary>
            <param name="d">
            HeaderedItemsControl that changed its ItemContainerStyle.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.OnHeaderChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.Header" />
            property changes.
            </summary>
            <param name="oldHeader">
            The old value of the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.Header" />
            property.
            </param>
            <param name="newHeader">
            The new value of the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.Header" />
            property.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.OnHeaderTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)">
            <summary>
            Called when the value of the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.HeaderTemplate" />
            property changes.
            </summary>
            <param name="oldHeaderTemplate">
            The old value of the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.HeaderTemplate" />
            property.
            </param>
            <param name="newHeaderTemplate">
            The new value of the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.HeaderTemplate" />
            property.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.OnApplyTemplate">
            <summary>
            Builds the visual tree for the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl" /> when a
            new template is applied.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">
            The container element used to display the specified item.
            </param>
            <param name="item">The content to display.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.PreparePrepareHeaderedItemsControlContainerForItemOverride(System.Windows.DependencyObject,System.Object,System.Windows.Controls.ItemsControl,System.Windows.Style)">
            <summary>
            Prepares the specified container to display the specified item.
            </summary>
            <param name="element">
            Container element used to display the specified item.
            </param>
            <param name="item">Specified item to display.</param>
            <param name="parent">The parent ItemsControl.</param>
            <param name="parentItemContainerStyle">
            The ItemContainerStyle for the parent ItemsControl.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.PrepareHeaderedItemsControlContainer(Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl,System.Object,System.Windows.Controls.ItemsControl,System.Windows.Style)">
            <summary>
            Prepare a PrepareHeaderedItemsControlContainer container for an
            item.
            </summary>
            <param name="control">Container to prepare.</param>
            <param name="item">Item to be placed in the container.</param>
            <param name="parentItemsControl">The parent ItemsControl.</param>
            <param name="parentItemContainerStyle">
            The ItemContainerStyle for the parent ItemsControl.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.HasDefaultValue(System.Windows.Controls.Control,System.Windows.DependencyProperty)">
            <summary>
            Check whether a control has the default value for a property.
            </summary>
            <param name="control">The control to check.</param>
            <param name="property">The property to check.</param>
            <returns>
            True if the property has the default value; false otherwise.
            </returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.HeaderIsItem">
            <summary>
            Gets or sets a value indicating whether the Header property has been
            set to the item of an ItemsControl.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.Header">
            <summary>
            Gets or sets the item that labels the control.
            </summary>
            <value>
            The item that labels the control. The default value is null.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.HeaderTemplate">
            <summary>
            Gets or sets a data template that is used to display the contents of
            the control's header.
            </summary>
            <value>
            Gets or sets a data template that is used to display the contents of
            the control's header. The default is null.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.ItemContainerStyle">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> that is
            applied to the container element generated for each item.
            </summary>
            <value>
            The <see cref="T:System.Windows.Style" /> that is applied to the
            container element generated for each item. The default is null.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl.ItemsControlHelper">
            <summary>
            Gets the ItemsControlHelper that is associated with this control.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewItem.ExpanderButtonName">
            <summary>
            The name of the ExpanderButton template part.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewItem.HeaderName">
            <summary>
            The name of the Header template part.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewItem._expanderButton">
            <summary>
            The ExpanderButton template part is used to expand and collapse the
            TreeViewItem.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewItem._headerElement">
            <summary>
            The Header template part is used to distinguish the bound Header
            content of the TreeViewItem.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewItem._expansionStateGroup">
            <summary>
            The ExpansionStates visual state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewItem._allowWrite">
            <summary>
            A value indicating whether a read-only dependency property change
            handler should allow the value to be set.  This is used to ensure
            that read-only properties cannot be changed via SetValue, etc.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewItem.HasItemsProperty">
            <summary>
            Identifies the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.HasItems" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.HasItems" />
            dependency property.
            </value>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnHasItemsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HasItemsProperty property changed handler.
            </summary>
            <param name="d">TreeViewItem that changed its HasItems.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsExpandedProperty">
            <summary>
            Identifies the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsExpanded" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsExpanded" />
            dependency property.
            </value>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnIsExpandedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsExpandedProperty property changed handler.
            </summary>
            <param name="d">TreeViewItem that changed its IsExpanded.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsSelectedProperty">
            <summary>
            Identifies the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsSelected" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsSelected" />
            dependency property.
            </value>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnIsSelectedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsSelectedProperty property changed handler.
            </summary>
            <param name="d">TreeViewItem that changed its IsSelected.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsSelectionActiveProperty">
            <summary>
            Identifies the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsSelectionActive" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsSelectionActive" />
            dependency property.
            </value>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnIsSelectionActivePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsSelectionActiveProperty property changed handler.
            </summary>
            <param name="d">TreeViewItem that changed its IsSelectionActive.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewItem._parentItemsControl">
            <summary>
            A reference to the parent ItemsControl of a TreeViewItem.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnCreateAutomationPeer">
            <summary>
            Returns a
            <see cref="T:System.Windows.Automation.Peers.TreeViewItemAutomationPeer" />
            for use by the Silverlight automation infrastructure.
            </summary>
            <returns>
            A
            <see cref="T:System.Windows.Automation.Peers.TreeViewItemAutomationPeer" />
            object for the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" />.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnApplyTemplate">
            <summary>
            Builds the visual tree for the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> control when a
            new control template is applied.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnExpansionStateGroupStateChanged(System.Object,System.Windows.VisualStateChangedEventArgs)">
            <summary>
            Provides handling for the ExpansionStates CurrentChanged event.
            </summary>
            <param name="sender">The ExpansionState VisualStateGroup.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.BringIntoView">
            <summary>
            Scroll the TreeViewItem into view.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.Microsoft#Silverlight#Testing#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.GetContainerForItemOverride">
            <summary>
            Creates a <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> to
            display content.
            </summary>
            <returns>
            A <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> to use as a
            container for content.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines whether an object is a
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" />.
            </summary>
            <param name="item">The object to evaluate.</param>
            <returns>
            True if <paramref name="item" /> is a
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" />; otherwise,
            false.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified container element to display the specified
            item.
            </summary>
            <param name="element">
            Container element used to display the specified item.
            </param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Removes all templates, styles, and bindings for the object displayed
            as a <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" />.
            </summary>
            <param name="element">
            The <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> element to
            clear.
            </param>
            <param name="item">
            The item that is contained in the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" />.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Makes adjustments to the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> when the value
            of the <see cref="P:Microsoft.Silverlight.Testing.Controls.ItemsControl.Items" />
            property changes.
            </summary>
            <param name="e">
            A
            <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />
            that contains data about the change.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.RaiseEvent(System.Windows.RoutedEventHandler,System.Windows.RoutedEventArgs)">
            <summary>
            Raise a RoutedEvent.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnExpanded(System.Windows.RoutedEventArgs)">
            <summary>
            Raises an
            <see cref="E:Microsoft.Silverlight.Testing.Controls.TreeViewItem.Expanded" /> event
            when the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsExpanded" />
            property changes from false to true.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the
            event data.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnCollapsed(System.Windows.RoutedEventArgs)">
            <summary>
            Raises a
            <see cref="E:Microsoft.Silverlight.Testing.Controls.TreeViewItem.Collapsed" />
            event when the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsExpanded" />
            property changes from true to false.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the
            event data.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.ToggleExpanded(System.Windows.RoutedEventHandler,System.Windows.RoutedEventArgs)">
            <summary>
            Handle changes to the IsExpanded property.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnSelected(System.Windows.RoutedEventArgs)">
            <summary>
            Raises the
            <see cref="E:Microsoft.Silverlight.Testing.Controls.TreeViewItem.Selected" /> event
            when the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsSelected" />
            property changes from false to true.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the
            event data.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnUnselected(System.Windows.RoutedEventArgs)">
            <summary>
            Raises the
            <see cref="E:Microsoft.Silverlight.Testing.Controls.TreeViewItem.Unselected" />
            event when the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsSelected" />
            property changes from true to false.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the
            event data.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.GotFocus" /> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the
            event data.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.LostFocus" /> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the
            event data.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnExpanderGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the ExpanderButton's GotFocus event.
            </summary>
            <param name="sender">The ExpanderButton.</param>
            <param name="e">Event Arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.MouseEnter" /> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains
            the event data.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.MouseLeave" /> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains
            the event data.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnHeaderMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the Header's MouseLeftButtonDown event.
            </summary>
            <param name="sender">The Header template part.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnExpanderClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the ExpanderButton's Click event.
            </summary>
            <param name="sender">The ExpanderButton.</param>
            <param name="e">Event Arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that
            contains the event data.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that
            contains the event data.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.KeyDown" /> event when the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> has focus.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains
            the event data.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.HandleDownKey">
            <summary>
            Try moving the focus down from the selected item.
            </summary>
            <returns>
            A value indicating whether the focus was successfully moved.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.KeyUp" /> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains
            the event data.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.HandleUpKey">
            <summary>
            Try moving the focus up from the selected item.
            </summary>
            <returns>
            A value indicating whether the focus was successfully moved.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.HandleScrollByPage(System.Boolean,System.Windows.Controls.ScrollViewer,System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            Handle scrolling a page up or down.
            </summary>
            <param name="up">
            A value indicating whether the page should be scrolled up.
            </param>
            <param name="scrollHost">The ScrollViewer being scrolled.</param>
            <param name="viewportHeight">The height of the viewport.</param>
            <param name="top">The top of item to start from.</param>
            <param name="bottom">The bottom of the item to start from.</param>
            <param name="currentDelta">The height of this item.</param>
            <returns>
            A value indicating whether the scroll was handled.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.CalculateDelta(System.Boolean,System.Windows.FrameworkElement,System.Windows.Controls.ScrollViewer,System.Double,System.Double,System.Double@)">
            <summary>
            Calculate the distance between this TreeViewItem and the item being
            paged from.
            </summary>
            <param name="up">
            A value indicating whether the page should be scrolled up.
            </param>
            <param name="element">The element being paged from.</param>
            <param name="scrollHost">The ScrollViewer being scrolled.</param>
            <param name="top">The top of item to start from.</param>
            <param name="bottom">The bottom of the item to start from.</param>
            <param name="closeEdge">
            The distance between the top/bottom of one item to the other.
            </param>
            <returns>
            A value indicating whether the scroll was handled.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.Select(System.Boolean)">
            <summary>
            Change the selected status of the TreeViewItem.
            </summary>
            <param name="selected">
            A value indicating whether the TreeViewItem is selected.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.UpdateContainsSelection(System.Boolean)">
            <summary>
            Update the ancestors of this item when it changes selection.
            </summary>
            <param name="selected">
            A value indicating whether the item is selected.
            </param>
            <remarks>
            Unselection updates need to occur before selection updates because
            the old and new selected items may share a partial path.
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.AllowKeyHandleEvent">
            <summary>
            Determine whether the TreeViewItem should be allowed to handle a key
            event.
            </summary>
            <returns>
            A value indicating whether the key event should be handled.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.FocusDown">
            <summary>
            Navigate the focus to the next TreeViewItem below this item.
            </summary>
            <returns>
            A value indicating whether the focus was navigated.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.FocusInto">
            <summary>
            Navigate the focus to the very last TreeViewItem descendent of the
            this item.
            </summary>
            <returns>
            A value indicating whether the focus was navigated.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.FindNextFocusableItem(System.Boolean)">
            <summary>
            Find the next focusable TreeViewItem below this item.
            </summary>
            <param name="recurse">
            A value indicating whether the item should recurse into its child
            items when searching for the next focusable TreeViewItem.
            </param>
            <returns>The next focusable TreeViewItem below this item.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.FindLastFocusableItem">
            <summary>
            Find the last focusable TreeViewItem contained by this item.
            </summary>
            <returns>
            The last focusable TreeViewItem contained by this item.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItem.FindPreviousFocusableItem">
            <summary>
            Find the previous focusable TreeViewItem above this item.
            </summary>
            <returns>
            The previous focusable TreeViewItem above this item.
            </returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.ExpanderButton">
            <summary>
            Gets or sets the ExpanderButton template part is used to expand and
            collapse the TreeViewItem.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.HeaderElement">
            <summary>
            Gets the Header template part that is used to distinguish the bound
            Header content of the TreeViewItem.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.ExpansionStateGroup">
            <summary>
            Gets or sets the ExpansionStates visual state group.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IgnorePropertyChange">
            <summary>
            Gets or sets a value indicating whether a dependency property change
            handler should ignore the next change notification.  This is used to
            reset the value of properties without performing any of the actions
            in their change handlers.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.HasItems">
            <summary>
            Gets a value indicating whether this
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> contains
            items.
            </summary>
            <value>
            True if this <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" />
            contains items; otherwise, false. The default is false.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.ItemsControl.Items" />
            contained by this
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> are expanded
            or collapsed.
            </summary>
            <value>
            True to indicate the contents of the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.ItemsControl.Items" />
            collection are expanded; false to indicate the items are collapsed.
            The default is false.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsSelected">
            <summary>
            Gets or sets a value indicating whether this
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> is selected.
            </summary>
            <value>
            True if this <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" />
            is selected; otherwise, false. The default is false.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsSelectionActive">
            <summary>
            Gets a value indicating whether the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> has focus.
            </summary>
            <value>
            True if this <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" />
            has focus; otherwise, false. The default is false.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.Interaction">
            <summary>
            Gets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.ContainsSelection">
            <summary>
            Gets or sets a value indicating whether the TreeView's currently
            selected item is a descendent of this TreeViewItem.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.CancelGotFocusBubble">
            <summary>
            Gets or sets a value indicating whether the TreeViewItem should
            ignore the next GotFocus event it receives because it has already
            been handled by one of its children.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.RequiresContainsSelectionUpdate">
            <summary>
            Gets or sets a value indicating whether checking ContainsSelection
            should actually perform the update notifications because the item
            was selected before it was in the visual tree.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.UserInitiatedExpansion">
            <summary>
            Gets or sets a value indicating whether a user initiated action
            caused the IsExpanded property to be set.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.ParentItemsControl">
            <summary>
            Gets or sets a reference to the parent ItemsControl of a
            TreeViewItem.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.ParentTreeViewItem">
            <summary>
            Gets a reference to the parent TreeViewItem of this TreeViewItem.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.ParentTreeView">
            <summary>
            Gets a reference to the parent TreeView of the TreeViewItem.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsRoot">
            <summary>
            Gets a value indicating whether this TreeViewItem is a root of the
            TreeView.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.CanExpandOnInput">
            <summary>
            Gets a value indicating whether the TreeViewItem can expand when it
            receives appropriate user input.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Controls.TreeViewItem.Collapsed">
            <summary>
            Occurs when the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsExpanded" />
            property changes from true to false.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Controls.TreeViewItem.Expanded">
            <summary>
            Occurs when the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsExpanded" />
            property changes from false to true.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Controls.TreeViewItem.Selected">
            <summary>
            Occurs when the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsSelected" />
            property of a <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" />
            changes from false to true.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Controls.TreeViewItem.Unselected">
            <summary>
            Occurs when the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.TreeViewItem.IsSelected" />
            property of a <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" />
            changes from true to false.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.ResultsTreeViewItem.GetContainerForItemOverride">
            <summary>
            Overrides the item to allow for simple binding to the expanded
            property on the item.
            </summary>
            <returns>Returns a new container for an item.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.ResultsTreeViewItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Overrides the key down event to allow toggling the space.
            </summary>
            <param name="e">The key event arguments data.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.Slide">
            <summary>
            A specialized content control that contains a fixed header, a standard
            header content property, plus content. It is designed specifically for
            a "slide-based" user interface for simple user interfaces.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.Slide.GroupPosition">
            <summary>
            The visual state group name for slide position.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.Slide.StatePositionLeft">
            <summary>
            The visual state name for left position.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.Slide.StatePositionRight">
            <summary>
            The visual state name for right position.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.Slide.StatePositionNormal">
            <summary>
            The normal visual state name for position.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.Slide.PartContent">
            <summary>
            The content template part name.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.Slide.PartHeader">
            <summary>
            The header template part name.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.Slide.PartFixedHeader">
            <summary>
            The fixed header template name.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.Slide._parent">
            <summary>
            The manager of the slide and its siblings.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.Slide.HeaderProperty">
            <summary>
            Identifies the Header dependency property.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.Slide.FixedHeaderProperty">
            <summary>
            Identifies the FixedHeader dependency property.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.Slide.PositionProperty">
            <summary>
            Identifies the Position dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Slide.OnPositionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PositionProperty property changed handler.
            </summary>
            <param name="d">Slide that changed its Position.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Slide.#ctor">
            <summary>
            Initializes a new instance of the Slide class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Slide.RemoveFromManager">
            <summary>
            Remove the slide from the parent manager.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Slide.OnApplyTemplate">
            <summary>
            Locate template parts and assign instances to fields during template
            application.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Slide.OnSlideChanged">
            <summary>
            Fires the slide changed event.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Slide.OnCurrentStateChanged(System.Object,System.Windows.VisualStateChangedEventArgs)">
            <summary>
            Fires the current state changed event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Slide.ToString">
            <summary>
            Helps debugging by providing information about the slide name.
            </summary>
            <returns>Returns the name of the slide.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Slide.UpdateVisualState(System.Boolean,Microsoft.Silverlight.Testing.Client.SlidePosition)">
            <summary>
            Updates the visual state.
            </summary>
            <param name="useTransitions">A value indicating whether to use
            visual transitions for the state change.</param>
            <param name="sp">The slide position to use.</param>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Client.Slide.SlideChanged">
            <summary>
            Event fired when the current slide changes.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.Slide.Header">
            <summary>
            Gets or sets the primary header content.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.Slide.FixedHeader">
            <summary>
            Gets or sets the fixed header content.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.Slide.Position">
            <summary>
            Gets or sets the position of the slide.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.Slide.SlideManager">
            <summary>
            Gets or sets the slide manager for the slide.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.SlideManager">
            <summary>
            A helper class to managing sets of slides.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.SlideManager.#ctor">
            <summary>
            Initializes a new instance of the SlideManager class.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.SlideManager._current">
            <summary>
            Stores the linked list node for the current slide.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.SlideManager._slides">
            <summary>
            Backing field for the set of slides.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.SlideManager.Add(Microsoft.Silverlight.Testing.Client.Slide[])">
            <summary>
            Adds a slide or an array of slides to the managed slide set.
            </summary>
            <param name="slides">The slides to manage.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.SlideManager.InitializePosition(Microsoft.Silverlight.Testing.Client.Slide,System.Boolean)">
            <summary>
            Initializes the position of the slide based on location.
            </summary>
            <param name="slide">The slide instance.</param>
            <param name="isFirst">A property indicating whether the slide is the
            first to be managed.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.SlideManager.InsertAfter(Microsoft.Silverlight.Testing.Client.Slide,Microsoft.Silverlight.Testing.Client.Slide)">
            <summary>
            Manages a new slide, inserting it after an existing slide node.
            </summary>
            <param name="before">The node to insert after.</param>
            <param name="newSlide">The new slide instance.</param>
            <returns>Returns the linked list node that is inserted.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.SlideManager.InsertFirst(Microsoft.Silverlight.Testing.Client.Slide)">
            <summary>
            Inserts a slide as the first in the linked list.
            </summary>
            <param name="newSlide">The new slide instance.</param>
            <returns>Returns the linked list node.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.SlideManager.InsertAfter(System.Collections.Generic.LinkedListNode{Microsoft.Silverlight.Testing.Client.Slide},Microsoft.Silverlight.Testing.Client.Slide)">
            <summary>
            Insert a slide after a provided linked list node.
            </summary>
            <param name="before">The node to insert after.</param>
            <param name="newSlide">The new slide to insert.</param>
            <returns>Returns the new linked list node.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.SlideManager.Remove(Microsoft.Silverlight.Testing.Client.Slide)">
            <summary>
            Remove a slide from management.
            </summary>
            <param name="slide">The slide instance.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.SlideManager.Previous">
            <summary>
            Move to the previous slide.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.SlideManager.Next">
            <summary>
            Move to the next slide.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.SlideManager.MoveTo(Microsoft.Silverlight.Testing.Client.Slide)">
            <summary>
            Moves to a specific slide, moving the others to the appropriate
            direction on screen.
            </summary>
            <param name="slide">The slide to move to.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.SlideManager.Move(System.Boolean)">
            <summary>
            Move in a direction.
            </summary>
            <param name="forward">A value indicating whether the direction to
            move is forward or not.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.SlideManager.Current">
            <summary>
            Gets the current slide instance.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.SlidePosition">
            <summary>
            Indicates the position that the slide should have.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.SlidePosition.Normal">
            <summary>
            Normal position, centered on the screen.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.SlidePosition.Left">
            <summary>
            To the left of the screen.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.SlidePosition.Right">
            <summary>
            To the right of the screen.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.TagEditor">
            <summary>
            The TagEditor control provides a brief user interface allowing for the
            selection of a set of tests, used to filter the test run.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TagEditor.TagHistoryKey">
            <summary>
            Key used to lookup the TagHistory site setting.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TagEditor.TagLastRunHistoryKey">
            <summary>
            Key used to lookup whether the last run used tag expressions.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TagEditor.SecondsToWait">
            <summary>
            Number of seconds to wait before running the test.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TagEditor._lastRunUsedExpressions">
            <summary>
            Backing field for the last run used value.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TagEditor.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the TagEditor type. Also includes a
            set of sample tags for display to the end user.
            </summary>
            <param name="initialTagExpression">The tag expression to use.</param>
            <param name="sampleTags">Sample tags to display.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TagEditor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TagEditor type.
            </summary>
            <param name="initialTagExpression">The tag expression to use.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TagEditor.#ctor">
            <summary>
            Initializes a new instance of the TagEditor type.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TagEditor.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the key down event.
            </summary>
            <param name="e">The key event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TagEditor.OnComplete(Microsoft.Silverlight.Testing.Client.TagExpressionEventArgs)">
            <summary>
            Fires the Complete event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TagEditor.CreateTagButton(System.String)">
            <summary>
            Creates a new button.
            </summary>
            <param name="content">The button content.</param>
            <returns>Returns a new Button instance.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TagEditor.OnTagButtonClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle selection of a tag button.
            </summary>
            <param name="sender">Tag button.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TagEditor.OnTagTouched(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle changes to the Tag text.
            </summary>
            <param name="sender">Tag TextBox.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TagEditor.OnRunClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle clicks to the Run button.
            </summary>
            <param name="sender">Run Button.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TagEditor.OnTimerTick(System.Object,System.EventArgs)">
            <summary>
            Handle timer ticks.
            </summary>
            <param name="sender">The timer.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TagEditor.StopTimer">
            <summary>
            Stop the timer.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TagEditor.RunTests">
            <summary>
            Run the unit tests.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TagEditor.OnCancelClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cancels the selection of a tag expression.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TagEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TagEditor.Timer">
            <summary>
            Gets or sets the timer used to automatically run tests if no tag is
            entered.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TagEditor.SecondsWaited">
            <summary>
            Gets or sets the number of seconds already waited.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TagEditor.TagHistory">
            <summary>
            Gets or sets the tag history.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Client.TagEditor.Complete">
            <summary>
            An event that indicates that the tag editor is complete. This can be
            in response to many actions: the user entering a tag expression, the
            time expiring and the default being selected, or the selection being
            canceled.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.TagExpressionEventArgs">
            <summary>
            A class for storing event information relating to a user's selected
            tag expression for a test run.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TagExpressionEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TagExpression event arguments
            class.
            </summary>
            <param name="tagExpression">The tag expression.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TagExpressionEventArgs.TagExpression">
            <summary>
            Gets the tag expression stored in the event arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TagExpressionEventArgs.HasTagExpression">
            <summary>
            Gets a value indicating whether a tag expression has been set.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.TestExceptionDetails">
            <summary>
            Displays information about any exceptions listed in the results.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestExceptionDetails.#ctor">
            <summary>
            Initializes a new instance of the TestExceptionDetails class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestExceptionDetails.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.TestMethodDetails">
            <summary>
            Details view for test method data.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestMethodDetails.#ctor">
            <summary>
            Initializes a new instance of the TestMethodDetails class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestMethodDetails.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.TimeHelper">
            <summary>
            A set of simple time helper methods.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TimeHelper.ElapsedReadableTime(System.DateTime,System.DateTime)">
            <summary>
            Returns a human-readable formatting of the time different between 
            two DateTime instances.
            </summary>
            <param name="start">The starting time.</param>
            <param name="finish">The finishing time.</param>
            <returns>Returns a human-readable string.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TimeHelper.ElapsedReadableTime(System.TimeSpan)">
            <summary>
            Returns a human-readable formatting of the time different between 
            two DateTime instances.
            </summary>
            <param name="ts">The time span instance.</param>
            <returns>Returns a human-readable string.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TimeHelper.Plural(System.String,System.Int32)">
            <summary>
            A plural 's' as the suffix, when not equal to one.
            </summary>
            <param name="value">The string value.</param>
            <param name="number">The number to check.</param>
            <returns>Returns an empty string or the English plural 's'.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines">
            <summary>
            Provides the necessary infrastructure to enable drawing connecting
            lines between the TreeViewItems in a TreeView.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines.GetConnectingLineInfo(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Gets the value of the ConnectingLineInfo attached property for a
            specified TreeViewItem.
            </summary>
            <param name="element">
            The TreeViewItem from which the property value is read.
            </param>
            <returns>
            The ConnectingLineInfo property value for the TreeViewItem.
            </returns>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines.ConnectingLineInfoProperty">
            <summary>
            Identifies the ConnectingLineInfo dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines.GetIsVerticalConnectingLineOf(System.Windows.Shapes.Line)">
            <summary>
            Gets the value of the IsVerticalConnectingLineOf attached property
            for a specified Line.
            </summary>
            <param name="element">The Line from which the property value is read.</param>
            <returns>The IsVerticalConnectingLineOf property value for the Line.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines.SetIsVerticalConnectingLineOf(System.Windows.Shapes.Line,Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Sets the value of the IsVerticalConnectingLineOf attached property to a specified Line.
            </summary>
            <param name="element">The Line to which the attached property is written.</param>
            <param name="value">The needed IsVerticalConnectingLineOf value.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines.IsVerticalConnectingLineOfProperty">
            <summary>
            Identifies the IsVerticalConnectingLineOf dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines.OnIsVerticalConnectingLineOfPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsVerticalConnectingLineOfProperty property changed handler.
            </summary>
            <param name="d">
            Line that changed its IsVerticalConnectingLineOf TreeViewItem.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines.GetIsHorizontalConnectingLineOf(System.Windows.Shapes.Line)">
            <summary>
            Gets the value of the IsHorizontalConnectingLineOf attached property
            for a specified Line.
            </summary>
            <param name="element">
            The Line from which the property value is read.
            </param>
            <returns>
            The IsHorizontalConnectingLineOf property value for the Line.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines.SetIsHorizontalConnectingLineOf(System.Windows.Shapes.Line,Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Sets the value of the IsHorizontalConnectingLineOf attached property
            to a specified Line.
            </summary>
            <param name="element">
            The Line to which the attached property is written.
            </param>
            <param name="value">
            The needed IsHorizontalConnectingLineOf value.
            </param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines.IsHorizontalConnectingLineOfProperty">
            <summary>
            Identifies the IsHorizontalConnectingLineOf dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines.OnIsHorizontalConnectingLineOfPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsHorizontalConnectingLineOfProperty property changed handler.
            </summary>
            <param name="d">
            Line that changed its IsHorizontalConnectingLineOf TreeViewItem.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines.GetIsExpanderButtonOf(System.Windows.Controls.Primitives.ToggleButton)">
            <summary>
            Gets the value of the IsExpanderButtonOf attached property for a
            specified ToggleButton.
            </summary>
            <param name="element">
            The ToggleButton from which the property value is read.
            </param>
            <returns>
            The IsExpanderButtonOf property value for the ToggleButton.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines.SetIsExpanderButtonOf(System.Windows.Controls.Primitives.ToggleButton,Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Sets the value of the IsExpanderButtonOf attached property to a
            specified ToggleButton.
            </summary>
            <param name="element">
            The ToggleButton to which the attached property is written.
            </param>
            <param name="value">The needed IsExpanderButtonOf value.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines.IsExpanderButtonOfProperty">
            <summary>
            Identifies the IsExpanderButtonOf dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines.OnIsExpanderButtonOfPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsExpanderButtonOfProperty property changed handler.
            </summary>
            <param name="d">
            ToggleButton that changed its IsExpanderButtonOf TreeViewItem.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines.GetIsHeaderOf(System.Windows.FrameworkElement)">
            <summary>
            Gets the value of the IsHeaderOf attached property for a specified
            FrameworkElement.
            </summary>
            <param name="element">
            The FrameworkElement from which the property value is read.
            </param>
            <returns>
            The IsHeaderOf property value for the FrameworkElement.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines.SetIsHeaderOf(System.Windows.FrameworkElement,Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Sets the value of the IsHeaderOf attached property to a specified
            FrameworkElement.
            </summary>
            <param name="element">
            The FrameworkElement to which the attached property is written.
            </param>
            <param name="value">The needed IsHeaderOf value.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines.IsHeaderOfProperty">
            <summary>
            Identifies the IsHeaderOf dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewConnectingLines.OnIsHeaderOfPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsHeaderOfProperty property changed handler.
            </summary>
            <param name="d">
            FrameworkElement that changed its IsHeaderOf TreeViewItem.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions">
            <summary>
            Provides useful extensions to TreeView and TreeViewItem instances.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetParentItemsControl(System.Windows.DependencyObject)">
            <summary>
            Get the parent ItemsControl of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The parent ItemsControl of an element, or null if not found.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetAncestorItemsControls(System.Windows.DependencyObject)">
            <summary>
            Get the ancestor ItemsControls of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The ancestor ItemsControls of an element.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetParentTreeViewItem(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Get the parent TreeViewItem of a TreeViewItem.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The parent TreeViewItem if found, otherwise null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetParentTreeView(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Get the parent TreeView of a TreeViewItem.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>The parent TreeView if found, otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetContainers(Microsoft.Silverlight.Testing.Controls.TreeView)">
            <summary>
            Get the TreeViewItem containers of a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>The TreeViewItem containers of a TreeView.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetContainers(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Get the child TreeViewItem containers of a TreeViewItem.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The child TreeViewItem containers of a TreeViewItem.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetItemsAndContainers(Microsoft.Silverlight.Testing.Controls.TreeView)">
            <summary>
            Get the items and TreeViewItem containers of a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>
            The items and TreeViewItem containers of a TreeView.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetItemsAndContainers(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Get the items and TreeViewItem containers of a TreeViewItem.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The items and TreeViewItem containers of a TreeViewItem.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetDescendantContainers(Microsoft.Silverlight.Testing.Controls.TreeView)">
            <summary>
            Get the TreeViewItem containers of a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>The TreeViewItem containers of a TreeView.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetDescendantContainers(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Get the descendant TreeViewItem containers of a TreeViewItem.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The descendant TreeViewItem containers of a TreeViewItem.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetDescendantItemsAndContainers(Microsoft.Silverlight.Testing.Controls.TreeView)">
            <summary>
            Get the descendant items and TreeViewItem containers of a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>
            The descendant items and TreeViewItem containers of a TreeView.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetDescendantItemsAndContainers(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Get the descendant items and TreeViewItem containers of a
            TreeViewItem.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The descendant items and TreeViewItem containers of a TreeViewItem.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetDescendantItemsAndContainersIterator(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the items and TreeViewItem containers of a TreeView or
            TreeViewItem.
            </summary>
            <param name="control">The TreeView or TreeViewItem.</param>
            <returns>
            The items and TreeViewItem containers of a TreeView or TreeViewItem.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetSiblingItemsAndContainers(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Get the sibling items and containers of the item.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>The sibling items and containers of the item.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetContainersFromItem(Microsoft.Silverlight.Testing.Controls.TreeView,System.Object)">
            <summary>
            Get the TreeViewItems already created that are used to represent the
            given item.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="item">The item being represented.</param>
            <returns>
            A sequence of TreeViewItems that represent the given item, or an
            empty sequence if none were found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetContainerFromItem(Microsoft.Silverlight.Testing.Controls.TreeView,System.Object)">
            <summary>
            Get the TreeViewItem already created that is used to represent the
            given item.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="item">The item being represented.</param>
            <returns>
            The TreeViewItems that represents the given item, or null if no
            container was found.
            </returns>
            <remarks>
            If multiple TreeViewItems represent the same item, the first item
            found via a breadth-first search will be used.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetPath(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Gets a path of items and TreeViewItem containers from the
            TreeViewItem to the root of the TreeView.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            A path of items and TreeViewItem containers from the TreeViewItem to
            the root of the TreeView.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetPathIterator(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Gets a path of items and TreeViewItem containers from the
            TreeViewItem to the root of the TreeView.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            A path of items and TreeViewItem containers from the TreeViewItem to
            the root of the TreeView.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetItem(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Get the item wrapped by this container.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The item wrapped by the container, or null if not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetParentItem(Microsoft.Silverlight.Testing.Controls.TreeView,System.Object)">
            <summary>
            Get the item of the parent container for a specified
            <paramref name="item" />.
            </summary>
            <param name="view">
            The TreeView containing the <paramref name="item" />.
            </param>
            <param name="item">The child item.</param>
            <returns>
            The item of the parent container for the specified
            <paramref name="item" />, or null if not found.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetIsRoot(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Gets a value indicating whether the TreeViewItem is a root of its
            TreeView.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            A value indicating whether the TreeViewItem is a root of its
            TreeView.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetIsLeaf(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Gets a value indicating whether the TreeViewItem is a leaf in its
            TreeView.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            A value indicating whether the TreeViewItem is a leaf in its
            TreeView.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetDepth(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Gets the depth of a TreeViewItem in its TreeView (using a zero-based
            index).
            </summary>
            <param name="item">The TreeViewItem.</param>
            <returns>
            The depth of a TreeViewItem in its TreeView (using a zero-based
            index).
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="item" /> is not in a TreeView.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetSelectedContainer(Microsoft.Silverlight.Testing.Controls.TreeView)">
            <summary>
            Get the selected TreeViewItem in a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>
            The selected TreeViewItem, or null if no selected item found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.SetSelectedContainer(Microsoft.Silverlight.Testing.Controls.TreeView,Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Sets the selected TreeViewItem of a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="item">The TreeViewItem to select.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.ClearSelection(Microsoft.Silverlight.Testing.Controls.TreeView)">
            <summary>
            Clear the selection of the TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.SelectItem(Microsoft.Silverlight.Testing.Controls.TreeView,System.Object)">
            <summary>
            Select an item in the TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="item">The item to select.</param>
            <returns>
            A value indicating whether the item was successfully set as the
            TreeView's SelectedItem.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetSelectedPath(Microsoft.Silverlight.Testing.Controls.TreeView)">
            <summary>
            Gets the path to the TreeView's selected item.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>The path to the TreeView's selected item.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.ExpandOrCollapseAll(Microsoft.Silverlight.Testing.Controls.TreeViewItem,System.Boolean,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Recursively expand or collapse the TreeViewItem and all of its
            descendants.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <param name="expand">
            A value indicating whether to expand or collapse.
            </param>
            <param name="depth">
            The number of levels that have already been collapsed or expanded.
            This is used in conjunction with the optional maximumDepth to only
            expand a specified number of layers.
            </param>
            <param name="maximumDepth">
            An optional depth that defines the number of layers to expand or
            collapse.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.ExpandOrCollapseAll(Microsoft.Silverlight.Testing.Controls.TreeView,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Expand or collapse all of the descendants of the TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="expand">
            A value indicating whether to expand or collapse.
            </param>
            <param name="maximumDepth">
            An optional depth that defines the number of layers to expand or
            collapse.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.ExpandAll(Microsoft.Silverlight.Testing.Controls.TreeView)">
            <summary>
            Expand all of the items in a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.CollapseAll(Microsoft.Silverlight.Testing.Controls.TreeView)">
            <summary>
            Collapse all of the items in a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.ExpandToDepth(Microsoft.Silverlight.Testing.Controls.TreeView,System.Int32)">
            <summary>
            Expand a specified number of layers in a TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="depth">The number of layers to expand.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.ExpandPathToRoot(Microsoft.Silverlight.Testing.Controls.TreeViewItem,System.Boolean)">
            <summary>
            Expand a path from the given item to the root of it's TreeView.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <param name="collapseSiblings">
            A value indicating whether to collapse siblings while expanding the
            path.  This will result in only the path from the item to the root
            being expanded.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.ExpandPath(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Expand a path from the TreeViewItem to the root of the TreeView.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.ExpandSelectedPath(Microsoft.Silverlight.Testing.Controls.TreeView)">
            <summary>
            Expand the path from the SelectedItem to the root of the TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.CollapseAllButSelectedPath(Microsoft.Silverlight.Testing.Controls.TreeView)">
            <summary>
            Collapse all TreeViewItems except those along the path from the
            TreeView's SelectedItem to the root of the TreeView.
            </summary>
            <param name="view">The TreeView.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.ExpandPath(Microsoft.Silverlight.Testing.Controls.TreeView,System.Object[])">
            <summary>
            Expand the given path of items starting from the TreeView's root.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="items">
            The sequence of items corresponding to the path to expand.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="items" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.ExpandPath``1(Microsoft.Silverlight.Testing.Controls.TreeView,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Expand the given path of items starting from the TreeView's root.
            </summary>
            <typeparam name="T">
            The type of items provided in <paramref name="items" />.
            </typeparam>
            <param name="view">The TreeView.</param>
            <param name="items">
            The sequence of items corresponding to the path to expand.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="items" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.ExpandPath``1(Microsoft.Silverlight.Testing.Controls.TreeView,System.Func{System.Object,``0},``0[])">
            <summary>
            Expand the given path of items starting from the TreeView's root.
            </summary>
            <typeparam name="T">
            The type of items provided in <paramref name="items" />.
            </typeparam>
            <param name="view">The TreeView.</param>
            <param name="comparisonSelector">
            A function that takes a TreeViewItem's item and returns a value to
            compare against elements of the given <paramref name="items" />.
            The item itself will be used if 
            <paramref name="comparisonSelector" /> is null.
            </param>
            <param name="items">
            The sequence of items corresponding to the path to expand.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="items" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.ExpandPath``1(Microsoft.Silverlight.Testing.Controls.TreeView,System.Func{System.Object,``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Expand the given path of items starting from the TreeView's root.
            </summary>
            <typeparam name="T">
            The type of items provided in <paramref name="items" />.
            </typeparam>
            <param name="view">The TreeView.</param>
            <param name="comparisonSelector">
            A function that takes a TreeViewItem's item and returns a value to
            compare against elements of the given <paramref name="items" />.
            The item itself will be used if 
            <paramref name="comparisonSelector" /> is null.
            </param>
            <param name="items">
            The sequence of items corresponding to the path to expand.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view" /> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="items" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetIsChecked(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Gets the value of the IsChecked attached property for a specified
            TreeViewItem.
            </summary>
            <param name="element">
            The TreeViewItem from which the property value is read.
            </param>
            <returns>
            The IsChecked property value for the TreeViewItem.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.SetIsChecked(Microsoft.Silverlight.Testing.Controls.TreeViewItem,System.Nullable{System.Boolean})">
            <summary>
            Sets the value of the IsChecked attached property to a specified
            TreeViewItem.
            </summary>
            <param name="element">
            The TreeViewItem to which the attached property is written.
            </param>
            <param name="value">The needed IsChecked value.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.IsCheckedProperty">
            <summary>
            Identifies the IsChecked dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.OnIsCheckedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsCheckedProperty property changed handler.
            </summary>
            <param name="d">The TreeViewItem that changed IsChecked.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetAssociatedCheckBox(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Gets the value of the AssociatedCheckBox attached property for a
            specified TreeViewItem.
            </summary>
            <param name="element">
            The TreeViewItem from which the property value is read.
            </param>
            <returns>
            The AssociatedCheckBox property value for the TreeViewItem.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.SetAssociatedCheckBox(Microsoft.Silverlight.Testing.Controls.TreeViewItem,Microsoft.Silverlight.Testing.Controls.TreeViewItemCheckBox)">
            <summary>
            Sets the value of the AssociatedCheckBox attached property to a
            specified TreeViewItem.
            </summary>
            <param name="element">
            The TreeViewItem to which the attached property is written.
            </param>
            <param name="value">The needed AssociatedCheckBox value.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.AssociatedCheckBoxProperty">
            <summary>
            Identifies the AssociatedCheckBox dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.OnAssociatedCheckBoxPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            AssociatedCheckBoxProperty property changed handler.
            </summary>
            <param name="d">
            The TreeViewItem that changed its AssociatedCheckBox.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetCheckedItemsAndContainers(Microsoft.Silverlight.Testing.Controls.TreeView)">
            <summary>
            Get the sequence of items and containers with their IsChecked
            property set to True.
            </summary>
            <param name="view">The TreeView.</param>
            <returns>
            The sequence of items and containers with their IsChecked property
            set to True.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.GetCheckedItemsAndContainers(Microsoft.Silverlight.Testing.Controls.TreeView,System.Boolean)">
            <summary>
            Get the sequence of items and containers with their IsChecked
            property set to True.
            </summary>
            <param name="view">The TreeView.</param>
            <param name="includeIndeterminate">
            A value indicating whether to include TreeViewItems with an
            indeterminate IsChecked value.
            </param>
            <returns>
            The sequence of items and containers with their IsChecked property
            set to True or also set to null if indeterminate values are
            included.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="view"/> is null.
            </exception>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.CancelIsCheckedChangedBubbling">
            <summary>
            Gets or sets a value indicating whether recursive calls to
            OnIsCheckedPropertyChanged should ignore their notifications or
            process them accordingly.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewExtensions.CancelIsCheckedChangedChildNotifications">
            <summary>
            Gets or sets a value indicating whether recursive calls to
            OnIsCheckedPropertyChanged should update their children when their
            IsChecked value has changed.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.TreeViewItemCheckBox">
            <summary>
            Represents a CheckBox whose value is associated with the
            TreeViewExtensions.IsChecked attached property of TreeViewItems.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.TreeViewItemCheckBox._parent">
            <summary>
            The parent TreeViewItem of the CheckBox.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemCheckBox.#ctor">
            <summary>
            Initializes a new instance of the TreeViewItemCheckBox class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemCheckBox.AssociateParentTreeViewItem">
            <summary>
            Associate the parent TreeViewItem with the CheckBox.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemCheckBox.OnIsCheckedChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Update the TreeViewItem's IsChecked property when this IsChecked
            property is changed.
            </summary>
            <param name="sender">The CheckBox.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItemCheckBox.ParentTreeViewItem">
            <summary>
            Gets the parent TreeViewItem of the CheckBox.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.TreeViewItemConnectingLineInfo">
            <summary>
            Represents the necessary information to draw connecting lines in a
            TreeViewItem.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemConnectingLineInfo.#ctor(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Initializes a new instance of the TreeViewItemConnectingLineInfo
            class.
            </summary>
            <param name="item">The TreeViewItem.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemConnectingLineInfo.PositionConnectingLines">
            <summary>
            Position the connecting lines in the TreeViewItem.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemConnectingLineInfo.PositionVerticalConnectingLine">
            <summary>
            Position the vertical connecting line in the TreeViewItem.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItemConnectingLineInfo.Item">
            <summary>
            Gets the TreeViewItem.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItemConnectingLineInfo.VerticalConnectingLine">
            <summary>
            Gets or sets the vertical connecting line of the TreeViewItem.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItemConnectingLineInfo.HorizontalConnectingLine">
            <summary>
            Gets or sets the horizontal connecting line of the TreeViewItem.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItemConnectingLineInfo.ExpanderButton">
            <summary>
            Gets or sets the expander button of the TreeViewItem.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItemConnectingLineInfo.Header">
            <summary>
            Gets or sets the header of the TreeViewItem.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.TreeViewItemIndentationConverter">
            <summary>
            Used to convert TreeViewItems into a value based on their depth in
            the TreeView.
            </summary>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemIndentationConverter.#ctor">
            <summary>
            Initializes a new instance of the TreeViewItemIndentationConverter
            class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemIndentationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a TreeViewItem into a value based on the depth of the item
            in the TreeView.
            </summary>
            <param name="value">The TreeViewItem.</param>
            <param name="targetType">
            The indentation type to convert to (such as Thickness or double).
            </param>
            <param name="parameter">
            The number of pixels to indent each level of the TreeView.  A
            default value of 15.0 will be used if no parameter is provided.
            </param>
            <param name="culture">
            The culture used to convert the TreeViewItem.
            </param>
            <returns>
            A value based on the depth of the item in the TreeView.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemIndentationConverter.WrapIndentation(System.Double,System.Type)">
            <summary>
            Wrap the indentation in the desired type.
            </summary>
            <param name="indentation">
            The number of pixels to indent the TreeViewItem.
            </param>
            <param name="targetType">
            The indentation type to convert to (such as Thickness or double).
            </param>
            <returns>
            A value based on the depth of the item in the TreeView.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemIndentationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert an indentation back into a TreeViewItem.  This always throws
            a NotSupportedException.
            </summary>
            <param name="value">The indentation.</param>
            <param name="targetType">The type of the indentation.</param>
            <param name="parameter">
            The number of pixels to indent each level of the TreeView.
            </param>
            <param name="culture">
            The culture used to convert the TreeViewItem.
            </param>
            <returns>Always throws a NotSupportedException.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.ValidateExtensions">
            <summary>
            A set of simple extension methods for applications.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.ValidateExtensions.IfApplicationHost(System.Windows.Application)">
            <summary>
            Checks whether the application host object is not null.
            </summary>
            <param name="app">The application instance.</param>
            <returns>Returns a value indicating whether the object is not null.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.ValidateExtensions.IfApplicationHostSource(System.Windows.Application)">
            <summary>
            Checks whether the application host and its source object is not
            null.
            </summary>
            <param name="app">The application instance.</param>
            <returns>Returns a value indicating whether the object is not null.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.VisibilityConverter">
            <summary>
            A value converter for collapsing or showing elements.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.VisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a boolean value to a Visibility value.
            </summary>
            <param name="value">The value instance.</param>
            <param name="targetType">The target parameter.</param>
            <param name="parameter">ConverterParameter is of type Visibility.</param>
            <param name="culture">The culture parameter.</param>
            <returns>Returns the object.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.VisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Support two-way databinding of the VisibilityConverter, converting 
            Visibility to a bool.
            </summary>
            <param name="value">The value instance.</param>
            <param name="targetType">The target parameter.</param>
            <param name="parameter">ConverterParameter is of type Visibility.</param>
            <param name="culture">The culture parameter.</param>
            <returns>Returns the object.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.VisibilityConverter.GetVisibilityMode(System.Object)">
            <summary>
            Determine the visibility mode based on a converter parameter. This
            parameter is of type Visibility,and specifies what visibility value
            to return when the boolean value is true.
            </summary>
            <param name="parameter">The parameter object.</param>
            <returns>Returns a Visibility value.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.VisibilityConverter.IsVisibilityInverted(System.Object)">
            <summary>
            Determine whether or not visibility is inverted based on a converter
            parameter. When the parameter is specified as Collapsed, that means
            that when the boolean value is true, we should return Collapsed,
            which is inverted.
            </summary>
            <param name="parameter">The parameter object.</param>
            <returns>Returns a value indicating whether the visibility is 
            inverted.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.VisualStates">
            <summary>
            Visual states helper code.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.VisualStates.GetImplementationRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <param name="dependencyObject">The DependencyObject.</param>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
            <returns>Returns the implementation root or null.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.VisualStates.TryGetVisualStateGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            This method tries to get the named VisualStateGroup for the 
            dependency object. The provided object's ImplementationRoot will be 
            looked up in this call.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="groupName">The visual state group's name.</param>
            <returns>Returns null or the VisualStateGroup object.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.VisualTreeExtensions">
            <summary>
            Provides useful extensions for working with the visual tree.
            </summary>
            <remarks>
            Since many of these extension methods are declared on types like
            DependencyObject high up in the class hierarchy, we've placed them in
            the Primitives namespace which is less likely to be imported for normal
            scenarios.
            </remarks>
            <QualityBand>Experimental</QualityBand>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.VisualTreeExtensions.GetVisualAncestors(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree ancestors of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree ancestors of the element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.VisualTreeExtensions.GetVisualAncestorsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree ancestors of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree ancestors of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.VisualTreeExtensions.GetVisualAncestorsAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree ancestors of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree ancestors of an element and the element itself.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.VisualTreeExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.VisualTreeExtensions.GetVisualChildrenAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.VisualTreeExtensions.GetVisualChildrenAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.VisualTreeExtensions.GetVisualDescendants(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree descendants of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree descendants of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.VisualTreeExtensions.GetVisualDescendantsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree descendants of an element and the element
            itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree descendants of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.VisualTreeExtensions.GetVisualDescendantsAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree descendants of an element and the element
            itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree descendants of an element and the element itself.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.VisualTreeExtensions.GetVisualSiblings(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree siblings of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree siblings of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.VisualTreeExtensions.GetVisualSiblingsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree siblings of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree siblings of an element and the element itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.VisualTreeExtensions.GetBoundsRelativeTo(System.Windows.FrameworkElement,System.Windows.UIElement)">
            <summary>
            Get the bounds of an element relative to another element.
            </summary>
            <param name="element">The element.</param>
            <param name="otherElement">
            The element relative to the other element.
            </param>
            <returns>
            The bounds of the element relative to another element, or null if
            the elements are not related.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="otherElement"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.VisualTreeExtensions.InvokeOnLayoutUpdated(System.Windows.FrameworkElement,System.Action)">
            <summary>
            Perform an action when the element's LayoutUpdated event fires.
            </summary>
            <param name="element">The element.</param>
            <param name="action">The action to perform.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.VisualTreeExtensions.GetLogicalChildren(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical children of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.VisualTreeExtensions.GetLogicalDescendents(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical descendents of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.CodeCoverage">
            <summary>
            The CodeCoverage class is used to collect code coverage information from
            assemblies that have been instrumented to call the Visit function at the
            beginning of every basic block.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.CodeCoverage._blocks">
            <summary>
            A bit array used to track which basic blocks have been executed.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.CodeCoverage._hitBlocks">
            <summary>
            A counter of the hit blocks.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.CodeCoverage.Visit(System.UInt32)">
            <summary>
            Record that a basic block is being executed.
            </summary>
            <param name="id">Id of the basic block.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.CodeCoverage.GetCoverageData">
            <summary>
            Get the coverage data serialized as a string for easy transport.
            </summary>
            <remarks>Previous releases of the framework used a simplistic bit
            list, this release updates the coverage reporting endpoint to an
            alternate version that ends in base 64. This maintains test runner
            compatibility with previous official releases.</remarks>
            <returns>Coverage data serialized as a string.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.CodeCoverage.HitBlockCount">
            <summary>
            Gets the current number of hit blocks.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.CodeCoverage.BlockCount">
            <summary>
            Gets the current size of the blocks counter. This is not actually 
            the number of hit blocks, but it should return 0 always except 
            when at least one block is hit.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.CustomFrameworkUnitTest">
            <summary>
            Base class for test cases that use special functionality of the 
            Microsoft.Silverlight.Testing unit test framework.
            
            Tests that derive from CustomTest in most cases will not be source- or 
            functionality- compatible with the more advanced desktop Visual Studio 
            Test Team environment and harnesses.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.CustomFrameworkUnitTest.HandleException(System.Exception)">
            <summary>
            Process an exception using the test engine logic for 
            ExpectedExceptions and logging the exception if needed.
            </summary>
            <param name="ex">Exception object.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.CustomFrameworkUnitTest.InterceptUnhandledExceptions">
            <summary>
            Gets or sets a value indicating whether global unhandled exceptions 
            should be intercepted by the test harness.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.CustomFrameworkUnitTest.UnitTestHarness">
            <summary>
            Gets or sets the unit test harness instance.  Hidden from the VS 
            browser as test developers should not need to use this property.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.CustomFrameworkUnitTest.WorkItemContainer">
            <summary>
            Gets the current test task container.
            </summary>
            <returns>The current container for the test's tasks.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.DataManager">
            <summary>
            Manages the unit test status and model by attaching to the unit test
            harness instance. Validates that all key logging can be done without
            special hooks inside of the unit test harness implementation.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.DataManager._h">
            <summary>
            The unit test harness instance.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.DataManager._d">
            <summary>
            The test run data.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.DataManager._assemblyData">
            <summary>
            Map assembly metadata to data objects.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.DataManager._classData">
            <summary>
            Map test class metadata to data objects.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.DataManager._methodData">
            <summary>
            Map test metadata to data objects.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.DataManager._lastResult">
            <summary>
            Backing field for the last result.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.DataManager._lastFailingResult">
            <summary>
            Backing field for the last failing result.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.DataManager.#ctor(Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Initializes a new instance of the DataManager type.
            </summary>
            <param name="harness">The unit test harness instance.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.DataManager.Create(Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Initializes a new instance of the DataManager.
            </summary>
            <param name="harness">The unit test harness instance.</param>
            <returns>Returns a new instance of a DataManager class.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.DataManager.Hook">
            <summary>
            Connect to unit test harness events for processing and updating the
            underlying unit test run model.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.DataManager.Unhook">
            <summary>
            Unhook from the unit test harness events.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.DataManager.OnTestRunStarting(System.Object,Microsoft.Silverlight.Testing.Harness.TestRunStartingEventArgs)">
            <summary>
            Process the starting of the test run.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.DataManager.OnTestClassStarting(System.Object,Microsoft.Silverlight.Testing.Harness.TestClassStartingEventArgs)">
            <summary>
            Process the test class starting event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.DataManager.OnTestClassCompleted(System.Object,Microsoft.Silverlight.Testing.Harness.TestClassCompletedEventArgs)">
            <summary>
            Process the test class complete event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.DataManager.OnTestMethodStarting(System.Object,Microsoft.Silverlight.Testing.Harness.TestMethodStartingEventArgs)">
            <summary>
            Process the start of a test method.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.DataManager.OnTestMethodCompleted(System.Object,Microsoft.Silverlight.Testing.Harness.TestMethodCompletedEventArgs)">
            <summary>
            Process the completion of test methods.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.DataManager.ProcessResult(Microsoft.Silverlight.Testing.Harness.ScenarioResult)">
            <summary>
            Process a result.
            </summary>
            <param name="result">The result data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.DataManager.GetAssemblyModel(Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly)">
            <summary>
            Gets or creates the data model object for an assembly.
            </summary>
            <param name="assembly">The test assembly.</param>
            <returns>Returns the data object.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.DataManager.GetClassModel(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass)">
            <summary>
            Gets or creates the data model object for a test class.
            </summary>
            <param name="testClass">The test class.</param>
            <returns>Returns the data object.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.DataManager.GetMethodModel(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod,Microsoft.Silverlight.Testing.Client.TestClassData)">
            <summary>
            Gets or creates the data model object for a test method.
            </summary>
            <param name="testMethod">The test method.</param>
            <param name="parentTestClass">The parent test class data object.</param>
            <returns>Returns the data object.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.DataManager.UnitTestHarness">
            <summary>
            Gets the unit test harness instance.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.DataManager.Data">
            <summary>
            Gets the unit test model.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.TestAssemblyData">
            <summary>
            A data object storing the hierarchical results for a test assembly in a
            test run.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.PropertyChangedBase">
            <summary>
            A base class for model objects that implement the property
            changed interface, to simplify calling the change handlers,
            and cache the underlying event argument instances.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.PropertyChangedBase._argumentInstances">
            <summary>
            A static set of change argument instances, eventually
            storing one argument instance for each property name to
            reduce churn at runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.PropertyChangedBase.NotifyPropertyChanged(System.String)">
            <summary>
            Notify any listeners that the property value has changed.
            </summary>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Client.PropertyChangedBase.PropertyChanged">
            <summary>
            The property changed event.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.IProvideResultReports">
            <summary>
            A type that provides a string result report.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.IProvideResultReports.GetResultReport">
            <summary>
            Generates a simple text result report for the metadata.
            </summary>
            <returns>Reports a text report.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestAssemblyData.#ctor(Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly)">
            <summary>
            Initializes a new instance of the TestAssemblyData type.
            </summary>
            <param name="testAssembly">The test assembly metadata.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestAssemblyData._expanded">
            <summary>
            Backing field for the expanded property.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestAssemblyData._passed">
            <summary>
            Backing field for a passed value.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestAssemblyData._classes">
            <summary>
            Backing store for the set of test class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestAssemblyData.GetResultReport">
            <summary>
            Retrieves the results report.
            </summary>
            <returns>Returns a string containing the report.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestAssemblyData.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the item is expanded in
            a hierarchical display.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestAssemblyData.IsChecked">
            <summary>
            Gets or sets the checked value. Don't think this is actually used.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestAssemblyData.Passed">
            <summary>
            Gets or sets a value indicating whether the test passed. If failed,
            will propagate to the parent metadata object.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestAssemblyData.Name">
            <summary>
            Gets the name of the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestAssemblyData.TestClasses">
            <summary>
            Gets an observable collection of test class data objects.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.TestMethodData">
            <summary>
            A data object that generates property change notifications and can
            be used for rich data binding to test results. Does keep a reference
            to all results.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestMethodData._metadata">
            <summary>
            Stores the test method metadata.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestMethodData._parent">
            <summary>
            Parent data object.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestMethodData._isRunning">
            <summary>
            A value indicating whether the test is currently executing.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestMethodData._result">
            <summary>
            The test outcome.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestMethodData._previous">
            <summary>
            Backing field for linked data.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestMethodData._next">
            <summary>
            Backing field for linked data.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestMethodData._previousFailure">
            <summary>
            Backing field for linked data.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestMethodData._nextFailure">
            <summary>
            Backing field for linked data.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestMethodData.#ctor(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod,Microsoft.Silverlight.Testing.Client.TestClassData)">
            <summary>
            Initializes a new instance of the TestMethodData type.
            </summary>
            <param name="testMethod">The test method metadata.</param>
            <param name="parent">The test class that is the parent object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestMethodData.CheckForKnownBugs">
            <summary>
            Runs through the metadata for bugs.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestMethodData._knownBugs">
            <summary>
            Backing field for known bugs.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestMethodData._fixedBugs">
            <summary>
            Backing field for bugs that are marked fixed.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestMethodData.EvaluateNotable">
            <summary>
            Calculates whether the item is considered "notable", in that it
            should have a visual cue or hint for the user.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestMethodData._isNotable">
            <summary>
            Stores a value indicating whether the result is notable.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestMethodData._checked">
            <summary>
            Backing field for the checked property.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestMethodData._expanded">
            <summary>
            Backing field for the expanded property.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestMethodData.GetResultReport">
            <summary>
            Retrieves the results report.
            </summary>
            <returns>Returns a string containing the report.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.Result">
            <summary>
            Gets or sets the result of the test method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.KnownBugs">
            <summary>
            Gets the known bugs for display in the UI.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.FixedBugs">
            <summary>
            Gets the fixed bugs for display.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.SimplifiedExpectedExceptionName">
            <summary>
            Gets the expected exception name for a negative test, if any.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.SimplifiedExceptionStackTrace">
            <summary>
            Gets a simplified exception stack trace that omits the trace below
            the invoke of the test method by the test framework.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.SimplifiedExceptionName">
            <summary>
            Gets the short, simple name of the exception type recorded in the
            test result, if any.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.HasOutcome">
            <summary>
            Gets a value indicating whether the method has results.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.Passed">
            <summary>
            Gets a value indicating whether the method has passed. Returns 
            true until there is a result.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.IsRunning">
            <summary>
            Gets or sets a value indicating whether the test method is running.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.IsNotable">
            <summary>
            Gets or sets a value indicating whether the result is notable. 
            Notable is defined as either currently running, or not having 
            passed. This can allow a user interface to react to an 
            interesting result.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.Parent">
            <summary>
            Gets the parent data object.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.Metadata">
            <summary>
            Gets an instance of the actual metadata object.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.Name">
            <summary>
            Gets the name of the test method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.HasDescriptionVisibility">
            <summary>
            Gets a visibility value to allow for easy showing or
            hiding of a user interface component that displays the
            description.
            </summary>
            <returns>Returns a visibility value.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.ReadableElapsedTime">
            <summary>
            Gets the elapsed time in a readable format.
            </summary>
            <returns>Returns a string of the readable time elapsed.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.Description">
            <summary>
            Gets the description of the test method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.IsChecked">
            <summary>
            Gets or sets a value indicating whether the item is checked in the
            user interface.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the item is expanded in
            a hierarchical display.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.PreviousResult">
            <summary>
            Gets or sets the previous result.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.NextResult">
            <summary>
            Gets or sets the next result.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.PreviousFailingResult">
            <summary>
            Gets or sets the previous failing result.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestMethodData.NextFailingResult">
            <summary>
            Gets or sets the next failing result.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.CodeCoverageProvider">
            <summary>
            A provider of code coverage information to an external process.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.ProviderBase">
            <summary>
            The base class for test service providers.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.ProviderBase.#ctor(Microsoft.Silverlight.Testing.Harness.TestServiceProvider,System.String)">
            <summary>
            Initializes a new base provider class.
            </summary>
            <param name="provider">The owning test service provider.</param>
            <param name="displayName">The display name of the service.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.ProviderBase.Initialize">
            <summary>
            Initializes the provider.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.ProviderBase.IncrementBusyServiceCounter">
            <summary>
            Increments the busy service counter.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.ProviderBase.DecrementBusyServiceCounter">
            <summary>
            Decrements the busy service counter.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.ProviderBase.InvokeMethod(System.String,System.Object[])">
            <summary>
            Invokes a method on this provider using reflection.
            </summary>
            <param name="methodName">The name of the method.</param>
            <param name="parameters">The optional parameters.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.ProviderBase.OnInitializeCompleted">
            <summary>
            Call the InitializeCompleted event.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.ProviderBase.Callback(System.Action{Microsoft.Silverlight.Testing.Service.ServiceResult},Microsoft.Silverlight.Testing.Service.ServiceResult)">
            <summary>
            Performs a callback.  Null action and/or result are permitted.
            </summary>
            <param name="action">The optional callback action.</param>
            <param name="result">The result to pass back.</param>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Service.ProviderBase.InitializeCompleted">
            <summary>
            Event fired once initialization is complete.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.ProviderBase.DisplayName">
            <summary>
            Gets the display name for the provider.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.ProviderBase.TestService">
            <summary>
            Gets the owning test service.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.ProviderBase.Initialized">
            <summary>
            Gets a value indicating whether the provider has been initialized 
            yet.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.CodeCoverageProvider.#ctor(Microsoft.Silverlight.Testing.Harness.TestServiceProvider)">
            <summary>
            Initializes a new code coverage provider.
            </summary>
            <param name="testService">The test service.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.CodeCoverageProvider.SaveCoverageData(System.String,System.Action{Microsoft.Silverlight.Testing.Service.ServiceResult})">
            <summary>
            Save string-based code coverage data.
            </summary>
            <param name="data">The code coverage data, as a string.</param>
            <param name="callback">The callback action.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.EnvironmentProvider">
            <summary>
            A provider of environment variables and environmental information that 
            uses the test service provider infrastructure.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.EnvironmentProvider.#ctor(Microsoft.Silverlight.Testing.Harness.TestServiceProvider)">
            <summary>
            Initializes a new environment provider.
            </summary>
            <param name="testService">The test service.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.EnvironmentProvider.GetEnvironmentVariable(System.String,System.Action{Microsoft.Silverlight.Testing.Service.ServiceResult})">
            <summary>
            Retrieve an environment variable from the system.
            </summary>
            <param name="name">The variable name.</param>
            <param name="callback">The callback action.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Extensions">
            <summary>
            Miscellaneous internal extension methods.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Extensions.TryGetAssemblyAttribute``1(System.Reflection.Assembly,``0@)">
            <summary>
            Attempts to retrieve a custom assembly attribute.
            </summary>
            <typeparam name="T">The type of attribute to retrieve.</typeparam>
            <param name="assembly">The assembly reference.</param>
            <param name="attribute">An out attribute reference.</param>
            <returns>Returns true if the attribute is found.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Extensions.ToTransformedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Transform the XElement into a dictionary of key/value pairs.
            </summary>
            <typeparam name="T">The type of enumeration.</typeparam>
            <typeparam name="K">The key type.</typeparam>
            <typeparam name="R">The value type.</typeparam>
            <param name="that">The root enumerable.</param>
            <param name="keySelector">The key selector.</param>
            <param name="itemSelector">The item selector.</param>
            <returns>Returns a new dictionary.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.IsolatedStorageSettingsProvider">
            <summary>
            A type that stores global settings in the isolated storage for the 
            application. An implementation of the <see cref="T:Microsoft.Silverlight.Testing.Service.SettingsProvider"/> 
            type.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.SettingsProvider">
            <summary>
            A provider of string dictionary values.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SettingsProvider.#ctor(Microsoft.Silverlight.Testing.Harness.TestServiceProvider)">
            <summary>
            Initializes a new SettingsProvider object.
            </summary>
            <param name="testService">The test service.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SettingsProvider.#ctor(Microsoft.Silverlight.Testing.Harness.TestServiceProvider,System.String)">
            <summary>
            Initializes a new SettingsProvider object.
            </summary>
            <param name="testService">The test service.</param>
            <param name="serviceName">The service name.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SettingsProvider.SaveSettings(System.Action{Microsoft.Silverlight.Testing.Service.ServiceResult})">
            <summary>
            Saves the settings.
            </summary>
            <remarks>Classes that inherit from SettingsProvider: hide this 
            function.  Do not call up through to this base method.</remarks>
            <param name="callback">The service callback.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.SettingsProvider.Settings">
            <summary>
            Gets the settings dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.SettingsProvider.IsReadOnly">
            <summary>
            Gets a value indicating whether the settings are read-only.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.SettingsProvider.SourceName">
            <summary>
            Gets the settings source for end-user display.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.IsolatedStorageSettingsProvider.TestFrameworkSettingsKeyName">
            <summary>
            The unique key used for storing the test framework's settings 
            dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.IsolatedStorageSettingsProvider._settings">
            <summary>
            The underlying settings object.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.IsolatedStorageSettingsProvider.#ctor(Microsoft.Silverlight.Testing.Harness.TestServiceProvider)">
            <summary>
            Initializes a new isolated storage settings provider.
            </summary>
            <param name="testService">The test service instance.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.IsolatedStorageSettingsProvider.Initialize">
            <summary>
            Initializes the isolated storage settings provider.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.IsolatedStorageSettingsProvider.SaveSettings(System.Action{Microsoft.Silverlight.Testing.Service.ServiceResult})">
            <summary>
            Saves the current settings values.
            </summary>
            <param name="callback">The service completion callback.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.IsolatedStorageSettingsProvider.LoadSettings">
            <summary>
            Recalls the stored settings values from isolated storage.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.IsolatedStorageSettingsProvider.InitializeSettings">
            <summary>
            Initialize the isolated storage application settings object.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.ServiceResult">
            <summary>
            Result object for asynchronous test service response.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.ServiceResult.CreateExceptionalResult(System.Exception)">
            <summary>
            Creates a new ServiceResult object for a failed result, the 
            sets the exception.
            </summary>
            <param name="except">The Exception object.</param>
            <returns>Returns a new ServiceResult with the Exception set.</returns>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.ServiceResult._result">
            <summary>
            The result LINQ element.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.ServiceResult.#ctor">
            <summary>
            Initializes a new instance of the ServiceResult class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.ServiceResult.ProcessResponse">
            <summary>
            Process the response text.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.ServiceResult.TryGetElement">
            <summary>
            Attempt to process and return the root element of a successful 
            request. Returns null if there was an Exception.
            </summary>
            <returns>The root XML element of the response.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.ServiceResult.SetResult(Microsoft.Silverlight.Testing.Service.SimpleXElement)">
            <summary>
            Sets the result.
            </summary>
            <param name="result">The LINQ element for the result.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.ServiceResult.Processed">
            <summary>
            Gets or sets a value indicating whether the result has been 
            processed.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.ServiceResult.Exception">
            <summary>
            Gets or sets the exception intercepted or generated during the 
            request or 
            processing timeframe.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.ServiceResult.Element">
            <summary>
            Gets the root XElement of the test service result.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.ServiceResult.Successful">
            <summary>
            Gets a value indicating whether the request was successful.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.ServiceType">
            <summary>
            The type of test service in use.  Used by the more advanced service 
            scenarios in SilverlightTestServiceProvider.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.ServiceType.None">
            <summary>
            No service, or unknown service type.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.ServiceType.Direct">
            <summary>
            A direct connection, be it the file system, isolated storage, or 
            similar.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.ServiceType.WebService">
            <summary>
            A web service.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.SilverlightTestService">
            <summary>
            The Silverlight test service provider is built for compilation with 
            Silverlight builds of the test framework.  Populates with the important 
            providers for web browser-hosted test runs.
            </summary>
            <summary>
            The Silverlight test service provider is built for compilation with 
            Silverlight builds of the test framework.  Populates with the important 
            providers for web browser-hosted test runs.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestServiceProvider">
            <summary>
            A system that provides test services.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestServiceProvider._services">
            <summary>
            The dictionary of services registered with this provider instance.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.#ctor">
            <summary>
            Initializes a new test service provider instance.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.Initialize">
            <summary>
            Initializes the provider and all of its test services.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.InitializeAllServices">
            <summary>
            Initialize all services and features synchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.RegisterService(Microsoft.Silverlight.Testing.Service.TestServiceFeature,Microsoft.Silverlight.Testing.Service.ProviderBase)">
            <summary>
            Register a new service that the test service should expose.
            </summary>
            <param name="feature">Known feature type.</param>
            <param name="serviceInstance">Instance of the feature's 
            <see cref="T:Microsoft.Silverlight.Testing.Service.ProviderBase"/> type.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.RegisterService(System.String,Microsoft.Silverlight.Testing.Service.ProviderBase)">
            <summary>
            Register a new service that the test service should expose.
            </summary>
            <param name="featureName">String name of the feature if the known 
            enum value does not exist.</param>
            <param name="serviceInstance">Instance of the feature's 
            <see cref="T:Microsoft.Silverlight.Testing.Service.ProviderBase"/> type.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.UnregisterService(Microsoft.Silverlight.Testing.Service.TestServiceFeature)">
            <summary>
            Unregisters a feature.
            </summary>
            <param name="feature">Known feature type.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.UnregisterService(System.String)">
            <summary>
            Unregisters a feature.
            </summary>
            <param name="featureName">Known feature type string.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.HasService(Microsoft.Silverlight.Testing.Service.TestServiceFeature)">
            <summary>
            Check if a requested feature is supported by the test service 
            provider.
            </summary>
            <param name="feature">Feature of interest.</param>
            <returns>A value indicating whether the feature exists.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.HasService(System.String)">
            <summary>
            Check if a requested feature is supported by the test service 
            provider.
            </summary>
            <param name="featureName">Feature of interest.</param>
            <returns>A value indicating whether the feature exists.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.GetService``1(Microsoft.Silverlight.Testing.Service.TestServiceFeature)">
            <summary>
            Retrieve a feature.  An exception will be thrown if the service 
            does not exist.
            </summary>
            <typeparam name="TService">Type of a service, ProviderBase.</typeparam>
            <param name="feature">The feature of interest.</param>
            <returns>Returns the feature, cast properly.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.GetService(Microsoft.Silverlight.Testing.Service.TestServiceFeature)">
            <summary>
            Retrieve a feature.
            </summary>
            <param name="feature">Feature of interest.</param>
            <returns>The feature's provider.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.GetService(System.String)">
            <summary>
            Retrieve a feature.
            </summary>
            <param name="featureName">Feature of interest.</param>
            <returns>The service or null if one was not present.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.RequireService(Microsoft.Silverlight.Testing.Harness.TestServiceProvider,System.Type)">
            <summary>
            Require a feature, or throw an exception if it isn't available.
            </summary>
            <param name="feature">Feature of interest.</param>
            <param name="requiredType">The required type.</param>
            <returns>The service or null if one was not present.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.RequireService(System.String,System.Type)">
            <summary>
            Require a feature, or throw an exception if it isn't available.
            </summary>
            <param name="featureName">Feature of interest.</param>
            <param name="requiredType">The required type.</param>
            <returns>The service or null if one was not present.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.RequireService(Microsoft.Silverlight.Testing.Service.TestServiceFeature)">
            <summary>
            Require a feature or interest.
            </summary>
            <param name="feature">Feature of interest.</param>
            <returns>The service or null if one was not present.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.RequireService(System.String)">
            <summary>
            Requires a service.
            </summary>
            <param name="featureName">Feature of interest.</param>
            <returns>The service or null if one was not present.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.RequireServiceInternal(System.Object)">
            <summary>
            Check for and required the presence of a service.  Throws an 
            InvalidOperationException message if the service is unavailable.
            </summary>
            <param name="feature">Feature of interest.</param>
            <returns>The service or null if one was not present.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.RequireServiceInternal(System.Object,System.Type)">
            <summary>
            Require a specific feature, and that it can be cast properly.
            </summary>
            <param name="feature">Feature of interest.</param>
            <param name="cast">The type to verify assignment for a cast.</param>
            <returns>The service or null if one was not present.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.GetServiceInternal(System.Object)">
            <summary>
            Looks for a specific service.
            </summary>
            <param name="feature">Feature of interest.</param>
            <returns>The service or null if one was not present.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.UniqueTestRunIdentifier">
            <summary>
            Gets or sets a unique test run identifier, if any is present.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestServiceProvider.BusyServiceReferenceCounter">
            <summary>
            Gets or sets an integer value that can be used to manage simple
            reference counting services.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.SilverlightTestService._webService">
            <summary>
            The service verifier and information.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SilverlightTestService.#ctor">
            <summary>
            Initializes a new instance of the SilverlightTestService class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SilverlightTestService.#ctor(Microsoft.Silverlight.Testing.UnitTestSettings)">
            <summary>
            Initializes a new instance of the SilverlightTestService class.
            </summary>
            <param name="settings">Unit test settings to read the service path
            and other information from.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SilverlightTestService.Initialize">
            <summary>
            Initializes the Silverlight test service.  Performs a service check 
            if needed before initializing the other providers.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SilverlightTestService.SetCustomIdentification">
            <summary>
            Sets the custom ID information for the test run, if passed into 
            the run.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SilverlightTestService.SetServicePath(Microsoft.Silverlight.Testing.UnitTestSettings)">
            <summary>
            Determine the service path to attempt to use, and prepares the 
            verification object using those parameters.
            </summary>
            <param name="settings">Unit test settings object to try and read
            settings from.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SilverlightTestService.AttemptServiceConnection">
            <summary>
            Pauses the initialization process to attempt a service connection. 
            The result will alter the underlying ServiceType being used by 
            this provider to ensure a fallback experience can be used.  
            
            This verification step will block the initialization and entire 
            test run until it continues.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SilverlightTestService.ContinueInitialization">
            <summary>
            Continues the initialization process for the test service provider.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SilverlightTestService.PopulateProviders">
            <summary>
            Populates with the standard providers for Silverlight in-browser 
            testing.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.SilverlightTestService.ServiceType">
            <summary>
            Gets the service type that is in use.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.SilverlightTestService.WebService">
            <summary>
            Gets the web service proxy.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.SilverlightTestService.ServiceVerifier">
            <summary>
            A special verification class used by SilverlightTestService.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.SilverlightTestService.ServiceVerifier.VerificationServiceName">
            <summary>
            The name of a simple 'ping' method exposed by the service.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SilverlightTestService.ServiceVerifier.Verify(System.Action,System.Action)">
            <summary>
            Attempts to verify the service connection.  Calls the proper 
            success/failure Action once a verification result is possible.
            </summary>
            <param name="success">The Action to call upon connection 
            verification.</param>
            <param name="failure">An Action to call upon failure.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.SilverlightTestService.ServiceVerifier.Hostname">
            <summary>
            Gets or sets the service hostname.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.SilverlightTestService.ServiceVerifier.Port">
            <summary>
            Gets or sets the service port.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.SilverlightTestService.ServiceVerifier.ServicePath">
            <summary>
            Gets or sets path to the simple POX service.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.SilverlightTestService.ServiceVerifier.ServiceUri">
            <summary>
            Gets the URI to the service.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.TestReportingProvider">
            <summary>
            A test service that reports test run results.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.TestReportingProvider.#ctor(Microsoft.Silverlight.Testing.Harness.TestServiceProvider)">
            <summary>
            Initializes a new reporting provider instance.
            </summary>
            <param name="testService">The test service.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.TestReportingProvider.WriteLog(System.Action{Microsoft.Silverlight.Testing.Service.ServiceResult},System.String,System.String)">
            <summary>
            Begins a call to the test service to write to the log.
            </summary>
            <param name="callback">The callback, used to read or verify results 
            from the service call.</param>
            <param name="logName">The name of the log to write.</param>
            <param name="content">The log file content.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.TestReportingProvider.ReportFinalResult(System.Action{Microsoft.Silverlight.Testing.Service.ServiceResult},System.Boolean,System.Int32,System.Int32,System.String)">
            <summary>
            Begins a call to the test service to report a test run's results.
            </summary>
            <param name="callback">The callback, used to read or verify results 
            from the service call.</param>
            <param name="failure">A value indicating whether the test run was a 
            failure.</param>
            <param name="failures">The failed scenario count.</param>
            <param name="totalScenarios">The total scenario count.</param>
            <param name="message">Any message to report along with the failure.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.TestServiceFeature">
            <summary>
            Set of known, well-defined test service features.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.TestServiceFeature.CodeCoverageReporting">
            <summary>
            Code coverage reporting.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.TestServiceFeature.RunSettings">
            <summary>
            Provides run parameters and settings.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.TestServiceFeature.TestReporting">
            <summary>
            Provides test reporting services.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.TestServiceFeature.EnvironmentServices">
            <summary>
            Provides environment information.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.WebCodeCoverageProvider">
            <summary>
            A provider of code coverage information to an external process.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.WebCodeCoverageProvider.MethodName_SaveCodeCoverage">
            <summary>
            The MethodName_SaveCodeCoverage method name.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebCodeCoverageProvider.#ctor(Microsoft.Silverlight.Testing.Harness.TestServiceProvider)">
            <summary>
            Initializes a new code coverage provider.
            </summary>
            <param name="testService">The test service.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebCodeCoverageProvider.SaveCoverageData(System.String,System.Action{Microsoft.Silverlight.Testing.Service.ServiceResult})">
            <summary>
            Save string-based code coverage data.
            </summary>
            <param name="data">The code coverage data, as a string.</param>
            <param name="callback">The callback action.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.WebEnvironmentProvider">
            <summary>
            A provider of environment variables and environmental information that 
            uses the test service provider infrastructure.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.WebEnvironmentProvider.MethodName_GetEnvironmentVariable">
            <summary>
            The MethodName_GetEnvironmentVariable method name.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebEnvironmentProvider.#ctor(Microsoft.Silverlight.Testing.Service.SilverlightTestService)">
            <summary>
            Initializes a new environment provider.
            </summary>
            <param name="testService">The web test service.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebEnvironmentProvider.GetEnvironmentVariable(System.String,System.Action{Microsoft.Silverlight.Testing.Service.ServiceResult})">
            <summary>
            Retrieve an environment variable from the system.
            </summary>
            <param name="name">The variable name.</param>
            <param name="callback">The callback action.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.WebServiceResult">
            <summary>
            Result object for asynchronous test service response that uses a simple 
            web service / POX call.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebServiceResult.#ctor(System.Net.WebRequest,System.Net.WebResponse)">
            <summary>
            Initializes a new web service result.
            </summary>
            <param name="request">The request object.</param>
            <param name="response">The response object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebServiceResult.#ctor(System.Net.WebRequest,System.Net.WebResponse,System.Object)">
            <summary>
            Initializes a new web service result.
            </summary>
            <param name="request">The request object.</param>
            <param name="response">The response object.</param>
            <param name="details">The details to associate for debugging 
            purposes.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebServiceResult.ReadHttpWebResponse">
            <summary>
            Reads the web response, if successful, and parses out the string 
            content.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebServiceResult.ProcessResponse">
            <summary>
            Process the response text.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.WebServiceResult.Request">
            <summary>
            Gets the web request associated with the service call.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.WebServiceResult.Response">
            <summary>
            Gets the web response associated with the service call.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.WebServiceResult.RequestDetails">
            <summary>
            Gets the details of the request, used for interactive debugging 
            sessions only.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.WebServiceResult.ResponseString">
            <summary>
            Gets the string retrieved from the response.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.WebSettingsProvider">
            <summary>
            A test service that reads command line settings.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.WebSettingsProvider.MethodName_GetRunParameters">
            <summary>
            Name of the method MethodName_GetRunParameters.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebSettingsProvider.#ctor(Microsoft.Silverlight.Testing.Harness.TestServiceProvider)">
            <summary>
            Initializes a new settings provider instance.
            </summary>
            <param name="testService">The test service.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebSettingsProvider.Initialize">
            <summary>
            Initialize the web settings provider.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebSettingsProvider.ReadRunParameters(Microsoft.Silverlight.Testing.Service.ServiceResult)">
            <summary>
            Read the run parameters.
            </summary>
            <param name="result">The service result.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.WebTestReportingProvider">
            <summary>
            A test service that reports test run results.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.WebTestReportingProvider.MethodName_ReportTestResults">
            <summary>
            Name of the method MethodName_ReportTestResults.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.WebTestReportingProvider.MethodName_WriteLog">
            <summary>
            Name of the method MethodName_WriteLog.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebTestReportingProvider.#ctor(Microsoft.Silverlight.Testing.Harness.TestServiceProvider)">
            <summary>
            Initializes a new reporting provider instance.
            </summary>
            <param name="testService">The test service.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebTestReportingProvider.WriteLog(System.Action{Microsoft.Silverlight.Testing.Service.ServiceResult},System.String,System.String)">
            <summary>
            Begins a call to the test service to write to the log.
            </summary>
            <param name="callback">The callback, used to read or verify results 
            from the service call.</param>
            <param name="logName">The name of the log to write.</param>
            <param name="content">The log file content.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebTestReportingProvider.ReportFinalResult(System.Action{Microsoft.Silverlight.Testing.Service.ServiceResult},System.Boolean,System.Int32,System.Int32,System.String)">
            <summary>
            Begins a call to the test service to report a test run's results.
            </summary>
            <param name="callback">The callback, used to read or verify results 
            from the service call.</param>
            <param name="failure">A value indicating whether the test run was a 
            failure.</param>
            <param name="failures">The failed scenario count.</param>
            <param name="totalScenarios">The total scenario count.</param>
            <param name="message">Any message to report along with the failure.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.WebTestService">
            <summary>
            Provides out-of-process access to operating system functions and other 
            services such as visual verification, if present.
            </summary>
            <summary>
            Provides out-of-process access to operating system functions and other 
            services such as visual verification, if present.
            </summary>
            <summary>
            Provides out-of-process access to operating system functions and other 
            services such as visual verification, if present.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.WebTestService._serviceUri">
            <summary>
            The service address.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.WebTestService._sync">
            <summary>
            The synchronization context.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebTestService.#ctor(System.Uri)">
            <summary>
            Initializes a new plain-old-XML test service.  This assumes that 
            the caller has already verifier that a service is present and 
            responding at the service address.
            </summary>
            <param name="serviceUri">The base service URI, such as 
            "scheme://hostname:port/servicePath/".</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebTestService.CreateUri(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a simple REST-style Uri given the method/service name and 
            a dictionary of key/value pairs to send as arguments.
            </summary>
            <param name="service">The method/service name.</param>
            <param name="arguments">A set of key/value pairs.</param>
            <returns>Returns a new Uri.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebTestService.CreateUri(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Creates a simple REST-style Uri given the method/service name and 
            a dictionary of key/value pairs to send as arguments.
            </summary>
            <param name="service">The method/service name.</param>
            <param name="arguments">A set of key/value pairs.</param>
            <param name="queryString">Optional query string.</param>
            <returns>Returns a new Uri.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebTestService.Dictionary(System.Object[])">
            <summary>
            Builds a simple dictionary from parameters.  The value follows the 
            key parameter.  {[key, value], } ...
            
            The ToString() method is called on every object.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Returns a key/value dictionary from the parameters.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebTestService.CallMethod(System.String,System.Action{Microsoft.Silverlight.Testing.Service.ServiceResult})">
            <summary>
            Begin a POX method call.  The callback is used with the result when 
            it becomes available.
            </summary>
            <param name="method">The method name.</param>
            <param name="callback">The callback action.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebTestService.CallMethod(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Action{Microsoft.Silverlight.Testing.Service.ServiceResult})">
            <summary>
            Begin a POX method call.  The callback is used with the result when 
            it becomes available.
            </summary>
            <param name="method">The method name.</param>
            <param name="arguments">Dictionary of key/value pairs.</param>
            <param name="callback">The callback action.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebTestService.CallMethod(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Action{Microsoft.Silverlight.Testing.Service.ServiceResult})">
            <summary>
            Begin a POX method call.  The callback is used with the result when 
            it becomes available.
            </summary>
            <param name="method">The method name.</param>
            <param name="arguments">Dictionary of key/value pairs.</param>
            <param name="postData">Optional string that will transform the 
            request to a POST request.</param>
            <param name="callback">The callback action.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebTestService.CallMethodPostContinue(System.IAsyncResult)">
            <summary>
            The intermediate step that writes the POST data and then continues 
            the web request.
            </summary>
            <param name="ar">The async result object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebTestService.ResponseCallback(System.IAsyncResult)">
            <summary>
            Process the response callback from a POX method call.
            </summary>
            <param name="ar">The async result object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebTestService.UserInterfaceThreadCallback(System.Object)">
            <summary>
            On the UI thread, invoke the callback action with the result.
            </summary>
            <param name="state">The temporary state object.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.WebTestService.CrossThreadState">
            <summary>
            A simple type to store the state information for the cross-thread 
            callback.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebTestService.CrossThreadState.#ctor(System.Action{Microsoft.Silverlight.Testing.Service.ServiceResult},Microsoft.Silverlight.Testing.Service.WebServiceResult)">
            <summary>
            Initializes a new TemporaryStateObject object.
            </summary>
            <param name="callback">The callback action.</param>
            <param name="result">The result object.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.WebTestService.CrossThreadState.Callback">
            <summary>
            Gets the callback action.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.WebTestService.CrossThreadState.Result">
            <summary>
            Gets the result object.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.WebTestService.RequestData">
            <summary>
            The request data class, stores information used in a request for 
            associating this data with the response.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebTestService.RequestData.#ctor(System.Uri,System.Net.HttpWebRequest,System.Action{Microsoft.Silverlight.Testing.Service.ServiceResult})">
            <summary>
            Initializes a new request data object.
            </summary>
            <param name="uri">The request Uri.</param>
            <param name="request">The request object.</param>
            <param name="callback">The callback action.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.WebTestService.RequestData.ConvertToResult(System.Net.WebResponse)">
            <summary>
            Converts the request data object into a web service result 
            object.
            </summary>
            <param name="response">The response object.</param>
            <returns>Returns a new WebServiceResult instance.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.WebTestService.RequestData.PostData">
            <summary>
            Gets or sets the optional post data for the request.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.WebTestService.RequestData.Request">
            <summary>
            Gets the web request.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.WebTestService.RequestData.RequestUri">
            <summary>
            Gets the request Uri.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.WebTestService.RequestData.Callback">
            <summary>
            Gets the callback action.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.FastRunDispatcher">
            <summary>
            A type which handles preparing the underlying dispatcher or timer from 
            which the test work items execute.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.RunDispatcher">
            <summary>
            Handle calling into the test framework as needed to perform the test
            run, process the internal test dispatcher queue, and keep execution
            moving forward.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.RunDispatcher._runNextStep">
            <summary>
            Delegate that returns whether more work remains and runs the next
            set of work.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.RunDispatcher._running">
            <summary>
            Backing field for a value indicaing whether the dispatcher should be
            running.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.RunDispatcher.#ctor(System.Func{System.Boolean})">
            <summary>
            Creates a new RunMethodManager, taking in a conditional delegate to
            run for each step to see if more work remains.
            </summary>
            <param name="runNextStep">
            The conditional delegate that performs work and indicates whether
            additional work remains.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.RunDispatcher.Create(System.Func{System.Boolean})">
            <summary>
            Create a new run method manager object.
            </summary>
            <param name="runNextStep">
            Conditional indicating whether more work will remain after
            performing the work.
            </param>
            <returns>
            Returns the run method manager. Typically depends on the execution 
            platform and environment.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.RunDispatcher.Create(System.Func{System.Boolean},System.Windows.Threading.Dispatcher)">
            <summary>
            Create a new run method manager object.
            </summary>
            <param name="runNextStep">
            Conditional indicating whether more work will remain after
            performing the work.
            </param>
            <param name="dispatcher">A Dispatcher instance.</param>
            <returns>
            Returns the run method manager. Typically depends on the execution 
            platform and environment.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.RunDispatcher.Run">
            <summary>
            A completely synchronous implementation, unless overridden, that
            calls RunNextStep() until the harness is finished.
            
            The default implementation will not work with a presentation-rich
            test environment.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.RunDispatcher.RunNextStep">
            <summary>
            Calls a conditional delegate, and returns whether there is more work
            to be done.
            </summary>
            <returns>
            Returns a value indicating whether there is additional work
            remaining after executing the current work.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.RunDispatcher.OnComplete">
            <summary>
            Calls the Complete event handler.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Harness.RunDispatcher.Complete">
            <summary>
            Event that is called when all work is complete.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.RunDispatcher.IsRunning">
            <summary>
            Gets or sets a value indicating whether the dispatcher should be 
            running.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.FastRunDispatcher._dispatcher">
            <summary>
            Stored Dispatcher instance.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.FastRunDispatcher.#ctor(System.Func{System.Boolean},System.Windows.Threading.Dispatcher)">
            <summary>
            Sets up a new run method manager.
            </summary>
            <param name="runNextStep">
            Conditional delegate which returns true as long as there is 
            additional work.
            </param>
            <param name="dispatcher">An instance of the dispatcher to use.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.FastRunDispatcher.Run">
            <summary>
            Begin the execution process by hooking up the underlying 
            DispatcherTimer to call into the test framework regularly and 
            perform test work items.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.TestClassData">
            <summary>
            A data object that generates property change notifications and can
            be used for rich data binding to test results. Does keep a reference
            to all results.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestClassData._parent">
            <summary>
            Parent object reference.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestClassData.#ctor(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass,Microsoft.Silverlight.Testing.Client.TestAssemblyData)">
            <summary>
            Initializes a new instance of the TestClassData type.
            </summary>
            <param name="testClass">The test class metadata.</param>
            <param name="parent">The parent test assembly data object.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestClassData._methods">
            <summary>
            Backing store for the set of test class.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestClassData._expanded">
            <summary>
            Backing field for the expanded property.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestClassData.CollapseUnlessFailures">
            <summary>
            Collapses the test class node unless there is at least one child
            test method that failed.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestClassData._passed">
            <summary>
            Backing field for a passed value.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestClassData.GetResultReport">
            <summary>
            Retrieves the results report.
            </summary>
            <returns>Returns a string containing the report.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestClassData.Parent">
            <summary>
            Gets the parent data object.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestClassData.Name">
            <summary>
            Gets the name of the test class.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestClassData.Namespace">
            <summary>
            Gets the namespace for the test class.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestClassData.TestMethods">
            <summary>
            Gets an observable collection of test class data objects.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestClassData.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the item is expanded in
            a hierarchical display.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestClassData.IsChecked">
            <summary>
            Gets or sets the checked value. Don't think this is actually used.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestClassData.Passed">
            <summary>
            Gets or sets a value indicating whether the test passed. If failed,
            will propagate to the parent metadata object.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.TestRunData">
            <summary>
            A data object that generates property change notifications and can
            be used for rich data binding to test results. Does keep a reference
            to all results.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestRunData._harness">
            <summary>
            The unit test harness instance.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestRunData._information">
            <summary>
            Backing field for information about the test application in use.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestRunData.#ctor(Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Initializes a new instance of the test run results.
            </summary>
            <param name="unitTestHarness">The unit test harness.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestRunData._assemblies">
            <summary>
            Backing store for the set of test assemblies.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestRunData._title">
            <summary>
            Title backing field.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestRunData._total">
            <summary>
            Stores the total number of expected scenarios.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestRunData._currentTestMethod">
            <summary>
            Stores the current test information.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestRunData._currentTest">
            <summary>
            Stores the current test information.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestRunData._runScenarios">
            <summary>
            Stores the number of run scenarios.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestRunData._failedScenarios">
            <summary>
            Count of failed scenarios.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestRunData._running">
            <summary>
            Backing field for whether the app is running.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestRunData.TestApplicationInformation">
            <summary>
            Gets the test application information instance.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestRunData.UnitTestHarness">
            <summary>
            Gets the unit test harness instance.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestRunData.TestAssemblies">
            <summary>
            Gets an observable collection of test assembly data objects.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestRunData.Title">
            <summary>
            Gets or sets the informational run title.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestRunData.TotalScenarios">
            <summary>
            Gets or sets the number of total scenarios.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestRunData.CurrentTestMethod">
            <summary>
            Gets or sets the current test name.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestRunData.CurrentTest">
            <summary>
            Gets or sets the current test name.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestRunData.RunScenarios">
            <summary>
            Gets or sets the number of run scenarios.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestRunData.FailedScenarios">
            <summary>
            Gets or sets the number of failed scenarios.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestRunData.PassedAndComplete">
            <summary>
            Gets a value indicating whether the run is complete and passed.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestRunData.Passed">
            <summary>
            Gets a value indicating whether all passing results have been
            processed.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestRunData.PassedScenarios">
            <summary>
            Gets the number of passed scenarios, defined as the number of
            run scenarios minus the number of failed scenarios tracked.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestRunData.IsDispatcherRunning">
            <summary>
            Gets a value indicating whether the dispatcher is currently running.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestRunData.IsRunning">
            <summary>
            Gets a value indicating whether the test run is in action.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestAssemblyCompletedEventArgs">
            <summary>
            Assembly complete event arguments.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.UnitTestHarnessEventArgs">
            <summary>
            Generic unit test harness event arguments base class that contains a
            reference to the harness.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarnessEventArgs.#ctor(Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Initializes a new instance of the UnitTestHarnessEventArgs class.
            </summary>
            <param name="harness">The test harness.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarnessEventArgs.UnitTestHarness">
            <summary>
            Gets the unit test harness reference.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestAssemblyCompletedEventArgs.#ctor(Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly,Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Initializes a new instance of the TestAssemblyCompletedEventArgs
            type.
            </summary>
            <param name="assembly">The assembly metadata.</param>
            <param name="harness">The test harness instance.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestAssemblyCompletedEventArgs.Assembly">
            <summary>
            Gets the assembly metadata.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestAssemblyStartingEventArgs">
            <summary>
            Test assembly starting event arguments.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestAssemblyStartingEventArgs.#ctor(Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly,Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Initializes a new instance of the TestAssemblyStartingEventArgs
            type.
            </summary>
            <param name="assembly">The assembly metadata.</param>
            <param name="harness">The unit test harness instance.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestAssemblyStartingEventArgs.Assembly">
            <summary>
            Gets the assembly metadata information.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestClassCompletedEventArgs">
            <summary>
            The test class completed event arguments.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestClassCompletedEventArgs.#ctor(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass,Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Initializes a new instance of the TestClassCompletedEventArgs
            class.
            </summary>
            <param name="testClass">Test class metadata.</param>
            <param name="harness">The harness instance.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestClassCompletedEventArgs.TestClass">
            <summary>
            Gets the test class metadata.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestClassStartingEventArgs">
            <summary>
            Information about the start of a test class event.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestClassStartingEventArgs.#ctor(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass,Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Initializes a new instance of the TestClassStartingEventArgs type.
            </summary>
            <param name="testClass">The test class metadata.</param>
            <param name="harness">The unit test harness reference.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestClassStartingEventArgs.TestClass">
            <summary>
            Gets the test class instance.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestMethodStartingEventArgs">
            <summary>
            Test method starting event arguments.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestMethodStartingEventArgs.#ctor(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod,Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass,Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Initializes a new instance of the TestMethodStartingEventArgs type.
            </summary>
            <param name="testMethod">The test method metadata.</param>
            <param name="testClass">The test class metadata.</param>
            <param name="harness">The test harness instance.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestMethodStartingEventArgs.TestMethod">
            <summary>
            Gets the test method metadata.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestMethodStartingEventArgs.TestClass">
            <summary>
            Gets the test class metadata.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestRunStartingEventArgs">
            <summary>
            Test method completed event arguments, contains the result.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestRunStartingEventArgs.#ctor(Microsoft.Silverlight.Testing.UnitTestSettings,Microsoft.Silverlight.Testing.Harness.TestRunFilter)">
            <summary>
            Initializes a new instance of the TestRunStartingEventArgs
            type.
            </summary>
            <param name="settings">The test run filter.</param>
            <param name="filter">The test run settings object.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestRunStartingEventArgs.Settings">
            <summary>
            Gets the unit test run settings.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestRunStartingEventArgs.TestRunFilter">
            <summary>
            Gets the test run filter.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestRunStartingEventArgs.TestHarnessName">
            <summary>
            Gets or sets the test harness name.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestRunStartingEventArgs.EnqueuedAssemblies">
            <summary>
            Gets or sets the number of valid, enqueued assemblies scheduled.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.TagAttribute">
            <summary>
            Tag attribute used to associate individual test cases with tags to
            easily test related functionality.
            </summary>
            <remarks>
            The infrastructure associated with the TagAttribute is not yet in place.
            </remarks>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.TagAttribute.ReservedWords">
            <summary>
            List of reserved words that cannot be used as tags.
            </summary>
            <remarks>
            This list should be shared with the tag parser implementation when
            available.
            </remarks>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.TagAttribute.ReservedCharacters">
            <summary>
            List of reserved characters that cannot be used in tags.
            </summary>
            <remarks>
            This list should be shared with the tag parser implementation when
            available.
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.TagAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TagAttribute class.
            </summary>
            <param name="tag">
            Tag associated with the test method or class.
            </param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.TagAttribute.Tag">
            <summary>
            Gets the tag associated with the test method or class.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.HarnessExtensions">
            <summary>
            Set of extension methods used by the harness.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.HarnessExtensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            An AddRange implementation for the generic IList interface.
            </summary>
            <typeparam name="TListType">The list type.</typeparam>
            <param name="list">The list object.</param>
            <param name="collection">The collection to copy into the list.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.HarnessExtensions.Replace``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Replace a list's contents with the items in the IEnumerable.
            </summary>
            <typeparam name="TListType">The list type.</typeparam>
            <param name="list">The list object.</param>
            <param name="sequence">The sequence to copy into the list.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.IProvideDynamicTestMethods">
            <summary>
            The IProvideDynamicTestMethods interface is used to provide additional
            test methods dynamically at runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.IProvideDynamicTestMethods.GetDynamicTestMethods">
            <summary>
            Get the dynamic test methods.
            </summary>
            <returns>Sequence of dynamic test methods.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.RetryTestRunFilter">
            <summary>
            A type filter for just a specific test.  Allows the re-running of a 
            single result again in the same process.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestRunFilter">
            <summary>
            A type to filter down complete sets of classes, tests and methods.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestRunFilter.DefaultTestRunName">
            <summary>
            The default unit test run name.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestRunFilter._settings">
            <summary>
            Unit test settings.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestRunFilter.#ctor(Microsoft.Silverlight.Testing.UnitTestSettings,Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Initializes a new test run filter using an existing settings file.
            </summary>
            <param name="settings">A unit test settings instance.</param>
            <param name="harness">The unit test harness.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestRunFilter.GetTestClasses(Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly,Microsoft.Silverlight.Testing.Harness.TestClassInstanceDictionary)">
            <summary>
            Retrieve a set of test classes from a test assembly.
            </summary>
            <param name="assembly">The test assembly metadata object.</param>
            <param name="instances">Test class instance dictionary.</param>
            <returns>Returns a new list of test class metadata objects.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestRunFilter.SortTestClasses(System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass})">
            <summary>
            Sort the test classes if the settings for alphabetical sorting are 
            present.
            </summary>
            <param name="tests">List of test classes.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestRunFilter.FilterTestClasses(System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass},Microsoft.Silverlight.Testing.Harness.TestClassInstanceDictionary)">
            <summary>
            Filter out tests based on the standard-supported methods.
            </summary>
            <param name="classes">List of test classes.</param>
            <param name="instances">Test class instance dictionary.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestRunFilter.FilterCustomTestClasses(System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass},Microsoft.Silverlight.Testing.Harness.TestClassInstanceDictionary)">
            <summary>
            Perform any custom filtering that the TestRunFilter needs.
            </summary>
            <param name="classes">List of test classes.</param>
            <param name="instances">Test class instance dictionary.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestRunFilter.FilterLegacyTestClasses(System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass},Microsoft.Silverlight.Testing.Harness.TestClassInstanceDictionary)">
            <summary>
            If specific string-contains filters are present.
            </summary>
            <param name="classes">List of test classes.</param>
            <param name="instances">Test class instance dictionary.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestRunFilter.FilterExclusiveTestClasses(System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass},Microsoft.Silverlight.Testing.Harness.TestClassInstanceDictionary)">
            <summary>
            If any exclusive classes are found, filter them.
            </summary>
            <param name="classes">List of test classes.</param>
            <param name="instances">Test class instance dictionary.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestRunFilter.GetTestMethods(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass,System.Object)">
            <summary>
            Retrieves the test methods from a test class metadata object.
            </summary>
            <param name="test">The test class metadata object.</param>
            <param name="instance">The test class instance.</param>
            <returns>Returns a list of test method metadata objects.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestRunFilter.FilterTestMethods(System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod})">
            <summary>
            Filter the test methods.
            </summary>
            <param name="methods">List of test methods.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestRunFilter.FilterCustomTestMethods(System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod})">
            <summary>
            Perform any custom filtering that the TestRunFilter needs.
            </summary>
            <param name="methods">List of test methods.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestRunFilter.FilterExclusiveTestMethods(System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod})">
            <summary>
            If any exclusive classes are found, filter them.
            </summary>
            <param name="methods">List of test methods.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestRunFilter.SortTestMethods(System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod})">
            <summary>
            Sorts the test methods, if requested.
            </summary>
            <param name="methods">List of test methods.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestRunFilter.TestRunName">
            <summary>
            Gets a friendly name for the test run.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestRunFilter.UnitTestHarness">
            <summary>
            Gets the unit test harness.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.RetryTestRunFilter._test">
            <summary>
            The test class.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.RetryTestRunFilter._method">
            <summary>
            The test method.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.RetryTestRunFilter.#ctor(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass,Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod)">
            <summary>
            Initializes a new test run filter using an existing settings file.
            </summary>
            <param name="test">The test class metadata.</param>
            <param name="method">The test method metadata.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.RetryTestRunFilter.GetTestClasses(Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly,Microsoft.Silverlight.Testing.Harness.TestClassInstanceDictionary)">
            <summary>
            Retrieve a set of test classes from a test assembly.
            </summary>
            <param name="assembly">The test assembly metadata object.</param>
            <param name="instances">Test class instance dictionary.</param>
            <returns>Returns a new list of test class metadata objects.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.RetryTestRunFilter.GetTestMethods(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass,System.Object)">
            <summary>
            Retrieves the test methods from a test class metadata object.
            </summary>
            <param name="test">The test class metadata object.</param>
            <param name="instance">The test class instance.</param>
            <returns>Returns a list of test method metadata objects.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TagManager">
            <summary>
            A helper class that manages tags and associated metadata. Tag
            expressions are evaluated at the TestClass level.
            </summary>
            <summary>
            A helper class that manages tags and associated metadata. Tag
            expressions are evaluated at the TestClass level.
            </summary>
            <summary>
            A helper class that manages tags and associated metadata. Tag
            expressions are evaluated at the TestClass level.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TagManager.PriorityTagPrefix">
            <summary>
            The prefix for any tags generated from priority values.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TagManager.TagType">
            <summary>
            A reference to the tag attribute type.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TagManager._classTags">
            <summary>
            The test tags associated with the class.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TagManager._methodTags">
            <summary>
            The test tags associated with methods.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TagManager._tagsToMethods">
            <summary>
            The ability to grab the set of methods, given a test class type, 
            and the tag of interest.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TagManager._testClass">
            <summary>
            The test class type.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.#ctor(System.Type,System.Collections.Generic.IEnumerable{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod})">
            <summary>
            Initializes a new tag manager.
            </summary>
            <param name="test">The test class type.</param>
            <param name="methods">The set of methods to run.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.CreateClassTags(System.Type)">
            <summary>
            Reflect, read and prepare the tags for the class metadata. Performs 
            the work if this is the first time the metadata has been seen.
            </summary>
            <param name="test">The reflection object for the test class.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.CreateMethodTags(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod)">
            <summary>
            Reflect, read and prepare the tags for the method metadata. Performs 
            the work if this is the first time the metadata has been seen.
            </summary>
            <param name="method">The method metadata.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.EvaluateExpression(System.String)">
            <summary>
            Get the test methods that correspond to a tag expression.
            </summary>
            <param name="tagExpression">Tag expression.</param>
            <returns>Test methods for the tag expression.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TagManager.Universe">
            <summary>
            Gets or sets the universe of all test methods for expression 
            evaluation.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator">
            <summary>
            Evaluate tag expressions.
            </summary>
            <remarks>
            Tag expressions are derived from the following EBNF grammar:
                {Expression} :=
                    {Expression} + {Term} |
                    {Expression} - {Term} |
                    {Term}
                {Term} :=
                    {Term} * {Factor} |
                    {Factor}
                {Factor} :=
                    !{Factor} |
                    ({Expression}) |
                    {Tag}
                {Tag} :=
                    All |
                    [^InvalidCharacters]+
             
            The non-terminals for {Expression} and {Term} will be left factored
            in the recursive descent parser below.
            </remarks>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator.Union">
            <summary>
            Union character.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator.Intersection">
            <summary>
            Intersection character.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator.Complement">
            <summary>
            Complement character.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator.Difference">
            <summary>
            Difference character.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator.All">
            <summary>
            The "All" string constant.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator.InvalidCharacters">
            <summary>
            Invalid characters in a tag name.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator.Evaluate(Microsoft.Silverlight.Testing.Harness.TagManager,System.String)">
            <summary>
            Evaluate a tag expression.
            </summary>
            <param name="owner">The owner object.</param>
            <param name="tagExpression">Tag expression.</param>
            <returns>Test methods associated with the tag expression.</returns>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator._owner">
            <summary>
            The owning TagManager instance.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator._tagExpression">
            <summary>
            Expression being evaluated.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator._position">
            <summary>
            Current position in the expression.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator.#ctor(Microsoft.Silverlight.Testing.Harness.TagManager,System.String)">
            <summary>
            Create an expression evaluator.
            </summary>
            <param name="owner">The owner object.</param>
            <param name="tagExpression">Expression object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator.Match(System.String)">
            <summary>
            Match a sequence of characters.
            </summary>
            <param name="expected">String to match.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator.TryMatch(System.String)">
            <summary>
            Try to match a sequence of characters.
            </summary>
            <param name="expected">String to match.</param>
            <returns>Returns a value indicating whether the match was 
            successful.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator.Evaluate">
            <summary>
            Evaluate an expression.
            </summary>
            <returns>Test methods described by the expression.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator.ReadExpression">
            <summary>
            Evaluate an expression.
            </summary>
            <returns>Test methods described by the expression.</returns>
            <remarks>
            We need to factor out left recursion, so:
                {Expression} :=
                    {Expression} + {Term} |
                    {Expression} - {Term} |
                    {Term}
            becomes:
                {Expression} :=
                	{Term}{Expression'}
                
                {Expression'} :=
                	#empty#
                	+ {Term}{Expression'}
                	- {Term}{Expression'}
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator.ReadExpression(System.Collections.Generic.IEnumerable{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod})">
            <summary>
            Evaluate an expression.
            </summary>
            <param name="term">
            Left term already read as part of the expression.
            </param>
            <returns>Test methods described by the expression.</returns>
            <remarks>
            Non-terminal created for left-factoring:
                {Expression'} :=
                	#empty#
                	+ {Term}{Expression'}
                	- {Term}{Expression'}
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator.ReadTerm">
            <summary>
            Evaluate a term.
            </summary>
            <returns>Test methods described by the expression.</returns>
            <remarks>
            We need to factor out left recursion, so:
                {Term} :=
                    {Factor} * {Term} |
                    {Factor}
            becomes:
                {Term} :=
                    {Factor}{Term'}
            
                {Term'} :=
                	#empty#
                	^ {Factor}{Term'}
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator.ReadTerm(System.Collections.Generic.IEnumerable{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod})">
            <summary>
            Evaluate a term.
            </summary>
            <param name="factor">
            Left term already read as part of the expression.
            </param>
            <returns>Test methods described by the expression.</returns>
            <remarks>
            Non-terminal created for left-factoring:
                {Term'} :=
                	#empty#
                	^ {Factor}{Term'}
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator.ReadFactor">
            <summary>
            Evaluate a factor.
            </summary>
            <returns>Test methods described by the expression.</returns>
            <remarks>
            {Factor} :=
                !{Factor} |
                ({Expression}) |
                {Tag}
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator.CreateEmptyList">
            <summary>
            Creates a new empty collection.
            </summary>
            <returns>Returns an empty collection.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.ExpressionEvaluator.ReadTag">
            <summary>
            Evaluate a tag.
            </summary>
            <returns>Test methods described by the expression.</returns>
            <remarks>
            {Tag} :=
                All |
                [^InvalidCharacters]+
            </remarks>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TagManager.Tags">
            <summary>
            A string list for storing tags. Provides an Add method that takes 
            an attribute object and, if a TagAttribute, will append its tag 
            value to the list.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.Tags.#ctor">
            <summary>
            Initializes a new Tags instance.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.Tags.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new Tags instance from an existing collection.
            </summary>
            <param name="collection">The collection to copy.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagManager.Tags.Add(System.Attribute)">
            <summary>
            Adds a TagAttribute's tag value.
            </summary>
            <param name="tag">The tag object.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TagTestRunFilter">
            <summary>
            A method and class filter that uses expressions and the TagAttribute.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TagTestRunFilter.NullTagRunName">
            <summary>
            The name to use for the test run when the tag expression is null.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagTestRunFilter.#ctor(Microsoft.Silverlight.Testing.UnitTestSettings,Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Initializes a new test run filter with the tag expression setting.
            </summary>
            <param name="settings">Unit test settings.</param>
            <param name="harness">Unit test harness.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagTestRunFilter.#ctor(Microsoft.Silverlight.Testing.UnitTestSettings,Microsoft.Silverlight.Testing.Harness.UnitTestHarness,System.String)">
            <summary>
            Initializes a new test run filter with the tag expression.
            </summary>
            <param name="settings">Unit test settings.</param>
            <param name="harness">Unit test harness.</param>
            <param name="tagExpression">The tag expression to use.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagTestRunFilter.SetTagExpression(System.String)">
            <summary>
            Sets the tag expression property.
            </summary>
            <param name="tagExpression">The tag expression to use.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TagTestRunFilter._hasLoggedWarning">
            <summary>
            A value indicating whether the warning has been logged yet.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagTestRunFilter.FilterCustomTestClasses(System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass},Microsoft.Silverlight.Testing.Harness.TestClassInstanceDictionary)">
            <summary>
            Apply tag filtering.
            </summary>
            <param name="classes">List of test classes.</param>
            <param name="instances">Test class instance dictionary.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagTestRunFilter.FilterCustomTestMethods(System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod})">
            <summary>
            Apply tag filtering.
            </summary>
            <param name="methods">List of test methods.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagTestRunFilter.ApplyExpression(Microsoft.Silverlight.Testing.Harness.TagManager,System.Collections.Generic.ICollection{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod})">
            <summary>
            Apply the tag filtering.
            </summary>
            <param name="tagManager">The tag manager instance.</param>
            <param name="methods">Set of methods.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagTestRunFilter.FilterExclusiveTestClasses(System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass},Microsoft.Silverlight.Testing.Harness.TestClassInstanceDictionary)">
            <summary>
            Exclusive attributes are not supported when also using tagging.
            </summary>
            <param name="classes">List of test classes.</param>
            <param name="instances">Test class instance dictionary.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TagTestRunFilter.FilterExclusiveTestMethods(System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod})">
            <summary>
            Exclusive attributes are not supported when also using tagging.
            </summary>
            <param name="methods">List of test methods.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TagTestRunFilter.TagExpression">
            <summary>
            Gets the tag expression in use by the run filter.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestAssemblyHelper">
            <summary>
            Helper code for TestAssembly logic.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestAssemblyHelper.HasExclusiveClasses(System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass})">
            <summary>
            Check whether [Exclusive] attribute is present on any classes.
            </summary>
            <param name="classes">Collection of class metadata objects.</param>
            <returns>Returns a value indicating whether any of the classes 
            include an [Exclusive] attribute.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestAssemblyHelper.SortTestClasses(System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass})">
            <summary>
            Sorts the test classes alphabetically by name.
            </summary>
            <param name="classes">A list of test class metadata objects.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestClassHelper">
            <summary>
            Test class helper.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestClassHelper._hasWarned">
            <summary>
            A value indicating whether the warning has been logged in this run.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestClassHelper.FilterTestsToRun(System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Filter the set of test classes by removing unused classes.
            </summary>
            <param name="classes">The input list of test class metadata objects.</param>
            <param name="classesToRun">The classes to run.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestClassHelper.FilterExclusiveClasses(System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass},Microsoft.Silverlight.Testing.Harness.LogMessageWriter)">
            <summary>
            Look through the classes for the [Exclusive] attribute. If found, 
            remove any classes where the attribute is not present.
            </summary>
            <param name="classes">The input list of classes.</param>
            <param name="logWriter">The log writer object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestClassHelper.FilterByFilterClassParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass})">
            <summary>
            Look for the /p:FilterClass parameter in the test harness settings. 
            Try to do a substring match on all filtered test classes.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="classes">List of test classes to be filtered.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestMethodCompletedEventArgs">
            <summary>
            Test method completed event arguments, contains the result.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestMethodCompletedEventArgs.#ctor(Microsoft.Silverlight.Testing.Harness.ScenarioResult)">
            <summary>
            Initializes a new instance of the TestMethodCompletedEventArgs
            type.
            </summary>
            <param name="result">The result instance.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestMethodCompletedEventArgs.#ctor(Microsoft.Silverlight.Testing.Harness.ScenarioResult,Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Initializes a new instance of the TestMethodCompletedEventArgs
            type.
            </summary>
            <param name="result">The result instance.</param>
            <param name="harness">The unit test harness.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestMethodCompletedEventArgs.Result">
            <summary>
            Gets the test method result.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestMethodHelper">
            <summary>
            Helper code for TestMethod logic.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestMethodHelper._hasWarned">
            <summary>
            A value indicating whether the warning has been logged in this run.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestMethodHelper.HasExclusiveMethods(System.Collections.Generic.ICollection{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod})">
            <summary>
            Check whether [Exclusive] is present on >= 1 of the methods.
            </summary>
            <param name="methods">The methods to search through.</param>
            <returns>True if at least one of the methods has Exclusive.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestMethodHelper.FilterExclusiveMethods(System.Collections.Generic.IList{Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod},Microsoft.Silverlight.Testing.Harness.LogMessageWriter)">
            <summary>
            Look through the methods for the [Exclusive] attribute. If found, 
            remove any methods where the attribute is not present.
            </summary>
            <param name="methods">The methods to filter.</param>
            <param name="logWriter">The log writer object.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.UnitTestHarnessEvents">
            <summary>
            A helper utility for firing events as the unit test harness from any
            component, internal or not. Enables expansion.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestHarnessEvents._harness">
            <summary>
            Stored instance of the harness.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarnessEvents.#ctor(Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Initializes a new intance of the UnitTestHarnessEvents helper.
            </summary>
            <param name="harness">The harness reference.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarnessEvents.SendTestAssemblyStarting(Microsoft.Silverlight.Testing.Harness.TestAssemblyStartingEventArgs)">
            <summary>
            Calls the test assembly starting event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarnessEvents.SendTestAssemblyCompleted(Microsoft.Silverlight.Testing.Harness.TestAssemblyCompletedEventArgs)">
            <summary>
            Calls the test assembly completed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarnessEvents.SendTestClassStarting(Microsoft.Silverlight.Testing.Harness.TestClassStartingEventArgs)">
            <summary>
            Calls the test class starting event handlers.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarnessEvents.SendTestClassCompleted(Microsoft.Silverlight.Testing.Harness.TestClassCompletedEventArgs)">
            <summary>
            Calls the test class completed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarnessEvents.SendTestMethodStarting(Microsoft.Silverlight.Testing.Harness.TestMethodStartingEventArgs)">
            <summary>
            Calls the test method starting event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarnessEvents.SendTestMethodCompleted(Microsoft.Silverlight.Testing.Harness.TestMethodCompletedEventArgs)">
            <summary>
            Calls the test method completed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarnessEvents.SendTestRunStarting(Microsoft.Silverlight.Testing.Harness.TestRunStartingEventArgs)">
            <summary>
            Calls the test run starting event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.UnitTestLogicFactory">
            <summary>
            A factory for creating the unit test objects.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestLogicFactory._harness">
            <summary>
            The unit test harness.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestLogicFactory.#ctor(Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Initializes a new unit test logic factory.
            </summary>
            <param name="harness">The unit test harness reference.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestLogicFactory.CreateAssemblyManager(Microsoft.Silverlight.Testing.UnitTesting.Metadata.IUnitTestProvider,Microsoft.Silverlight.Testing.Harness.TestRunFilter,Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly)">
            <summary>
            Creates a new AssemblyManager.
            </summary>
            <param name="provider">The unit test provider.</param>
            <param name="filter">The run filter.</param>
            <param name="assembly">The unit test assembly metadata object.</param>
            <returns>Returns a new AssemblyManager.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestLogicFactory.CreateTestClassManager(Microsoft.Silverlight.Testing.UnitTesting.Metadata.IUnitTestProvider,Microsoft.Silverlight.Testing.Harness.TestRunFilter,Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass,System.Object)">
            <summary>
            Creates a new TestClassManager.
            </summary>
            <param name="provider">The unit test provider.</param>
            <param name="filter">The run filter.</param>
            <param name="testClass">The test class metadata.</param>
            <param name="instance">The test class instance.</param>
            <returns>Returns a new TestClassManager.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestLogicFactory.CreateTestMethodManager(Microsoft.Silverlight.Testing.UnitTesting.Metadata.IUnitTestProvider,Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass,Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod,System.Object)">
            <summary>
            Creates a new TestMethodManager.
            </summary>
            <param name="provider">The unit test provider.</param>
            <param name="testClass">The test class metadata.</param>
            <param name="method">The test method metadata.</param>
            <param name="instance">The test class instance.</param>
            <returns>Returns a new TestMethodManager.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider">
            <summary>
            A log provider that outputs in a simple custom test format that Visual 
            Studio recognizes.
            </summary>
            <summary>
            A log provider that outputs in a simple custom test format that Visual 
            Studio recognizes.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.LogProvider">
            <summary>
            LogProvider interface with a single Process method that handles a
            LogMessage object.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogProvider._conditionalHandlers">
            <summary>
            A dictionary of conditional action handlers.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogProvider._definedHandlers">
            <summary>
            A dictionary of types/actions for handling specific types of log
            messages.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogProvider.Process(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Perform any needed operations to log the message.
            </summary>
            <param name="logMessage">Instance of LogMessage type.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogProvider.ProcessRemainder(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Method that processes any messages not handled any other way.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogProvider.RegisterMessageTypeHandler(Microsoft.Silverlight.Testing.Harness.LogMessageType,System.Action{Microsoft.Silverlight.Testing.Harness.LogMessage})">
            <summary>
            Registers an action for a specific message type.
            </summary>
            <param name="type">The type of interest.</param>
            <param name="action">The handler for the type.  Takes a LogMessage 
            parameter.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogProvider.RegisterConditionalHandler(System.Func{Microsoft.Silverlight.Testing.Harness.LogMessage,System.Boolean},System.Action{Microsoft.Silverlight.Testing.Harness.LogMessage})">
            <summary>
            Registers a conditional handler.  During the log message processing 
            step, all conditional callbacks will be tried.  The first positive 
            result will then call the associated processing Action for that 
            conditional method entry.
            </summary>
            <param name="condition">A conditional callback that takes a 
            LogMessage input parameter.</param>
            <param name="action">A log message processing Action that is called 
            when the condition is true.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogProvider.UnregisterConditionalHandler(System.Func{Microsoft.Silverlight.Testing.Harness.LogMessage,System.Boolean})">
            <summary>
            Removes a conditional callback.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogProvider.ClearConditionalHandlers">
            <summary>
            Clear all existing conditional handlers.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogProvider.ClearMessageTypeHandlers">
            <summary>
            Clear all existing message type handlers.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.ITestSettingsLogProvider">
            <summary>
            Interface for LogProviders that want access to external test settings.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ITestSettingsLogProvider.Initialize(Microsoft.Silverlight.Testing.UnitTestSettings)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.DefaultTestResultsFilename">
            <summary>
            The filename to use for saving test results.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.DefaultTestAdapterTypeName">
            <summary>
            The default test adapter type name.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.DefaultTestListName">
            <summary>
            The default test list name.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.DefaultComputerName">
            <summary>
            The default computer name.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.DefaultUserName">
            <summary>
            The default user name.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.DefaultTestRunConfigurationName">
            <summary>
            The default configuration name.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.DefaultTestRunConfigurationDescription">
            <summary>
            The default configuration description.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider._writer">
            <summary>
            The Visual Studio log format writer.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.#ctor">
            <summary>
            Initializes a new instance of the VisualStudioLogProvider class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.RegisterLogHandlers">
            <summary>
            Register the handler conditions of interest to this log provider.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.TestAssemblyStart(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Assembly start code.
            </summary>
            <param name="l">The log message.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.ProcessIncorrectException(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Process an Exception that was not the expected Exception type.
            </summary>
            <param name="l">The log message.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.ProcessException(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Process an Exception that is logged or stored.
            </summary>
            <param name="l">The log message object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.SetTestRunConfiguration(Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly)">
            <summary>
            Sets the test run configuration information when the test assembly 
            begins processing.
            </summary>
            <param name="assembly">The test assembly metadata object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.GenerateTestRunName(Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly)">
            <summary>
            Generate a name for the test run that will be used when 
            displaying the result in Visual Studio.
            </summary>
            <param name="assembly">The test assembly metadata object.</param>
            <returns>Returns the test run name.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.NewGuid">
            <summary>
            Generates a new Guid string value.
            </summary>
            <returns>Returns a new Guid string value.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.ProcessResult(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Process a UTF result message.
            </summary>
            <param name="logMessage">The log message object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.ProcessBug(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Process [Bug(...)].
            </summary>
            <param name="l">A KnownBugLogMessage object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.TestRunFilterSelected(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            The run filter has been selected.
            </summary>
            <param name="logMessage">The log message object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.WriteLogFile(Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Saves the log file data.
            </summary>
            <param name="harness">The unit test harness.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Initialize(Microsoft.Silverlight.Testing.UnitTestSettings)">
            <summary>
            Initializes the test harness.
            </summary>
            <param name="settings">The test harness settings.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.TestResultsFileName">
            <summary>
            Gets or sets the test results filename.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.TestAdapterTypeName">
            <summary>
            Gets or sets the test adapter type name reported in the Visual 
            Studio results log file.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.TestRunId">
            <summary>
            Gets or sets the TestRunId.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.TestListName">
            <summary>
            Gets or sets the test list name.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.ComputerName">
            <summary>
            Gets or sets the computer name that is reported in the results
            log file.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.UserName">
            <summary>
            Gets or sets the user name that is reported in the results file.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.TestRunConfigurationName">
            <summary>
            Gets or sets the TestRunConfigurationName.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.TestRunConfigurationDescription">
            <summary>
            Gets or sets the TestRunConfigurationDescription.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.TestRunNamePrefix">
            <summary>
            Gets or sets a prefix for use in the test run name.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.TestRunConfigurationId">
            <summary>
            Gets or sets the TestRunConfigurationId.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.CurrentAssemblyName">
            <summary>
            Gets the current assembly name.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer">
            <summary>
            A log provider that outputs in a simple custom test format that 
            Visual Studio recognizes. This is a simple, subset writer.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.DateTimeFormat">
            <summary>
            Date time format string representing round-trip date/time 
            pattern.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.DefaultTestTypeId">
            <summary>
            A unique ID representing the Visual Studio unit test type ID.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.ResultsXmlNamespace">
            <summary>
            The namespace for Visual Studio team test results.
            </summary>
            <remarks>Was of XNamespace type in XLinq implementation.</remarks>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer._testLists">
            <summary>
            A dictionary containing test list names and guids.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer._pendingElements">
            <summary>
            Stores temporary, pending elements for the next result.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.#ctor">
            <summary>
            Initializes a new Writer object.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.FinalizeContent">
            <summary>
            Stores property values in the respective elements, clears any 
            lookup dictionaries.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.ToDateString(System.DateTime)">
            <summary>
            Returns a string value of the DateTime object.
            </summary>
            <param name="dateTime">The DateTime object.</param>
            <returns>Returns the formatted string.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.GetXmlAsString">
            <summary>
            Returns the XML log file as a string.
            </summary>
            <returns>The XML value.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.CreateInitialDocument">
            <summary>
            Creates the initial results document and its XElements.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.CreateElement(System.String)">
            <summary>
            Creates a new XElement within the results XML namespace.
            </summary>
            <param name="name">The element name.</param>
            <returns>Returns a new named element.</returns>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer._total">
            <summary>
            The total number of scenarios.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer._outcomes">
            <summary>
            The set of outcomes and counts.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.IncrementResults(Microsoft.Silverlight.Testing.Harness.TestOutcome)">
            <summary>
            Increment the number of passing results.
            </summary>
            <param name="outcome">The test outcome.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.AddTestMethodResult(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.DateTime,Microsoft.Silverlight.Testing.Harness.TestOutcome)">
            <summary>
            Adds the result of a test method into the log.
            </summary>
            <param name="test">The test metadata.</param>
            <param name="storage">The storage value.</param>
            <param name="codeBase">The code base value.</param>
            <param name="adapterTypeName">The adapter type name.</param>
            <param name="className">The class name.</param>
            <param name="testListName">The test list name.</param>
            <param name="computerName">The computer name.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="outcome">The outcome.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.AddPendingWriteLine(System.String)">
            <summary>
            Adds a WriteLine to the next result to be processed.
            </summary>
            <param name="line">The text to output.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.AddPendingErrorMessage(System.String)">
            <summary>
            Adds an error message to the next result to be processed.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.AddPendingException(System.Exception)">
            <summary>
            Adds an Exception to the next result to be processed.
            </summary>
            <param name="e">The Exception object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.AddPendingOutput(Microsoft.Silverlight.Testing.Service.SimpleXElement)">
            <summary>
            Adds pending output for the next result.
            </summary>
            <param name="element">The element to wrap in an Output element.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.GetTestListGuid(System.String)">
            <summary>
            Returns the GUID for a test list name. The result is stored 
            in memory.
            </summary>
            <param name="testListName">The test list name.</param>
            <returns>Returns the test list name guid.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.Started">
            <summary>
            Gets or sets the time that the test run started.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.Created">
            <summary>
            Gets or sets the time that the writer object and/or test run was created.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.Finished">
            <summary>
            Gets or sets the time that the test run was finished.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.TestRun">
            <summary>
            Gets the root XML node for the test run and its results.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.UnitTestTestTypeId">
            <summary>
            Gets or sets the test type ID used for new results.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.TestRunConfiguration">
            <summary>
            Gets the TestRunConfiguration element.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.Counters">
            <summary>
            Gets the Counters element.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.TestDefinitions">
            <summary>
            Gets the TestDefinitions element.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.TestLists">
            <summary>
            Gets the TestLists element.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.TestEntries">
            <summary>
            Gets the TestEntries element.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.Times">
            <summary>
            Gets the Times element.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.ResultSummary">
            <summary>
            Gets the ResultSummary element.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.Results">
            <summary>
            Gets the Results element.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.TestRunId">
            <summary>
            Sets the TestRunId.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.TestRunName">
            <summary>
            Sets the TestRunName.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.TestRunUser">
            <summary>
            Sets the TestRunUser.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.TestRunConfigurationName">
            <summary>
            Sets the TestRunConfigurationName.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.TestRunConfigurationId">
            <summary>
            Sets the TestRunConfigurationId.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.RunOutcome">
            <summary>
            Sets the overall run outcome value.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.VisualStudioLogProvider.Writer.TestRunConfigurationDescription">
            <summary>
            Sets the TestRunConfigurationDescription.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.ClassicTestPage">
            <summary>
            A user control that should be used as the root visual for a Silverlight 
            plugin if developers would like to use the advanced TestSurface 
            functionality within Microsoft.Silverlight.Testing.
            
            The TestSurface is automatically cleared after each test scenario 
            completes, eliminating the need for many additional cleanup methods.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.ClassicTestPage.#ctor">
            <summary>
            Initializes the TestPage object.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.ClassicTestPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.ClassicTestPage.TestPanel">
            <summary>
            Gets the test surface, a dynamic Panel that removes its children 
            elements after each test completes.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TextFailuresLogProvider">
            <summary>
            A log provider that outputs failures as a string.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TextFailuresLogProvider._failures">
            <summary>
            A list of failing results.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TextFailuresLogProvider.#ctor">
            <summary>
            Initializes a new TextFailuresLogProvider instance.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TextFailuresLogProvider.GetFailuresLog">
            <summary>
            Retrieve the text log of all failures in the unit test run.
            </summary>
            <returns>Returns the log contents.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TextFailuresLogProvider.RegisterLogHandlers">
            <summary>
            Register the handler conditions of interest to this log provider.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TextFailuresLogProvider.ProcessResult(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Process a UTF result message.
            </summary>
            <param name="logMessage">The log message object.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.TestPage">
            <summary>
            A user control that should be used as the root visual for a Silverlight 
            plugin if developers would like to use the advanced TestSurface 
            functionality within Microsoft.Silverlight.Testing. The TestSurface is 
            automatically cleared after each test scenario completes, eliminating 
            the need for many additional cleanup methods.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestPage._harness">
            <summary>
            Backing field for the unit test harness instance.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestPage._model">
            <summary>
            Backing field for the model manager.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestPage._startupTimer">
            <summary>
            Backing field for the startup timer.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestPage._clipboardFeatureSupported">
            <summary>
            Backing field for a value indicating whether the clipboard feature
            is supported.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestPage.#ctor">
            <summary>
            Initializes the TestPage object.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestPage.#ctor(Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Initializes the TestPage object.
            </summary>
            <param name="harness">The test harness instance.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestPage.StartupMonitor(System.Object,System.EventArgs)">
            <summary>
            Waits for the Settings to become available, either by the service or
            system setting the instance property.
            </summary>
            <param name="sender">The source timer.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestPage.StartTestRun">
            <summary>
            Starts the test run.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestPage.OnTestAssemblyStarting(System.Object,Microsoft.Silverlight.Testing.Harness.TestAssemblyStartingEventArgs)">
            <summary>
            Handles the test assembly starting event to expand the test stage
            height.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestPage.OnTestHarnessCompleted(System.Object,Microsoft.Silverlight.Testing.Harness.TestHarnessCompletedEventArgs)">
            <summary>
            Handles the test harness complete event, to display results.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestPage.OnTestStageExpanderClick(System.Object,System.EventArgs)">
            <summary>
            Handles the click on the test stage.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestPage.ExpandCollapseTestStage(System.Boolean)">
            <summary>
            Expand and collapse the test stage.
            </summary>
            <param name="expand">A value indicating whether to expand the stage.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestPage.OnTestMethodCompleted(System.Object,Microsoft.Silverlight.Testing.Harness.TestMethodCompletedEventArgs)">
            <summary>
            Handles the completion of a test method.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestPage.OnTagExpressionSelected(System.Object,Microsoft.Silverlight.Testing.Client.TagExpressionEventArgs)">
            <summary>
            Handles the completion event on the tag expression editor to begin
            the test run using the user-provided settings.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestPage.OnResultNavigationClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles navigation back or forward.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestPage.OnInstallClick(System.Object,System.EventArgs)">
            <summary>
            Installs the application.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestPage.OnClipboardButtonClick(System.Object,System.EventArgs)">
            <summary>
            Offers clipboard interface support for copying test run results.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestPage.OnPlayPauseClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click on a play/pause button for the run dispatcher.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestPage.SetClipboardText(System.String)">
            <summary>
            Copies text into the clipboard. If the Silverlight runtime on the
            system does not support the clipboard API, then it reverts to a
            large text box that allows the user to manually copy and paste.
            </summary>
            <param name="text">The text to set.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestPage.TestPanel">
            <summary>
            Gets the test surface, a dynamic Panel that removes its children 
            elements after each test completes.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestPage.UnitTestHarness">
            <summary>
            Gets the unit test harness instance.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestPage.TreeView">
            <summary>
            Gets the tree view instance.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Properties.UnitTestMessage">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.CompositeWorkItem_Invoke_NoRemainingWorkItems">
            <summary>
              Looks up a localized string similar to There are no remaining test work items.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.LogException">
            <summary>
              Looks up a localized string similar to Exception: Type &quot;{0}&quot; Message &quot;{1}&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.LogIgnore">
            <summary>
              Looks up a localized string similar to Ignoring &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.LogIncorrectExceptionType">
            <summary>
              Looks up a localized string similar to Incorrect exception type &quot;{0}&quot; received. Was expecting a &quot;{1}&quot; type..
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.LogNoException">
            <summary>
              Looks up a localized string similar to No Exception was observed. Was expecting a &quot;{0}&quot; type exception..
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.TagAttribute_ctor_EmptyTag">
            <summary>
              Looks up a localized string similar to Tag cannot be empty!.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.TagAttribute_ctor_ReservedCharacter">
            <summary>
              Looks up a localized string similar to The tag &quot;{0}&quot; contains the invalid character &quot;{1}&quot;!.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.TagAttribute_ctor_ReservedTag">
            <summary>
              Looks up a localized string similar to Tag &quot;{0}&quot; is reserved!.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.TagManager_ExpressionEvaluator_EmptyTagExpression">
            <summary>
              Looks up a localized string similar to tagExpression cannot be empty!.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.TagManager_ExpressionEvaluator_ExpectedEndOfTagExpression">
            <summary>
              Looks up a localized string similar to Expected end of tag expression &quot;{0}&quot; at position {1}!.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.TagManager_ExpressionEvaluator_ExpectedTag">
            <summary>
              Looks up a localized string similar to Tag expected in expression &quot;{0}&quot; at position {1}!.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.TagManager_ExpressionEvaluator_InvalidTagExpression">
            <summary>
              Looks up a localized string similar to Invalid tag expression &quot;{0}&quot; (expected &quot;{1}&quot; at position {2})!.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.TagTestRunFilter_TaggingInUse">
            <summary>
              Looks up a localized string similar to Tag expression &quot;{0}&quot; is in use..
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.TestClassHelper_ExclusiveClassesInUse">
            <summary>
              Looks up a localized string similar to Exclusive classes are in use.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.TestMethodHelper_ExclusiveMethodsInUse">
            <summary>
              Looks up a localized string similar to Exclusive methods are in use.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.TestMethodManager_CompleteMethod_UnVerifiedBug">
            <summary>
              Looks up a localized string similar to The known issue could not be verified. A failure will be recorded. If this bug has been fixed, please mark the Fixed attribute value to True..
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.UnitTestCompositeWorkItem_ctor_NoTestHarness">
            <summary>
              Looks up a localized string similar to No TestHarness is available..
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.UnitTestContext_FeatureNotSupported">
            <summary>
              Looks up a localized string similar to The &quot;{0}&quot; functionality is not supported within this unit test system..
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.UnitTestHarness_Initialize_UnitTestHarnessInitialize">
            <summary>
              Looks up a localized string similar to Initialization of UnitTestHarness.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.UnitTestHarness_RunNextStep_NoCompositeWorkItemsExist">
            <summary>
              Looks up a localized string similar to No composite work items exist to be cleared..
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.UnitTestHarness_TestAssembliesNotActionable">
            <summary>
              Looks up a localized string similar to No test classes were selected to be in the test run..
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.UnitTestSystem_Run_NoTestHarnessInSettings">
            <summary>
              Looks up a localized string similar to Test harness was not specified on test harness settings object. If a test harness settings object was passed in, please verify that it contains a reference to a test harness..
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Properties.UnitTestMessage.WorkItemTest_EnqueueWorkItem_AsynchronousFeatureUnavailable">
            <summary>
              Looks up a localized string similar to Test bug: A test cannot use Test Task objects, such as callbacks and conditionals, or the PumpMessages feature, unless marked with the [Asynchronous] attribute..
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTestSystem">
            <summary>
            A central entry point for unit test projects and applications.
            </summary>
            <summary>
            A central entry point for unit test projects and applications.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTestSystem.UnitTestSystemName">
            <summary>
            Friendly unit test system name.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTestSystem.PrepareCustomLogProviders(Microsoft.Silverlight.Testing.UnitTestSettings)">
            <summary>
            A partial method for PrepareDefaultLogManager.
            </summary>
            <param name="settings">The test harness settings.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTestSystem.SetTestService(Microsoft.Silverlight.Testing.UnitTestSettings)">
            <summary>
            A partial method for setting the TestService.
            </summary>
            <param name="settings">The test harness settings.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTestSystem.CreateTestPage">
            <summary>
            Creates a new TestPage visual that in turn will setup and begin a 
            unit test run.
            </summary>
            <returns>A new RootVisual.</returns>
            <remarks>Assumes the calling assembly is a test assembly.</remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTestSystem.CreateTestPage(Microsoft.Silverlight.Testing.UnitTestSettings)">
            <summary>
            Creates a new TestPage visual that in turn will setup and begin a 
            unit test run.
            </summary>
            <param name="settings">Test harness settings to be applied.</param>
            <returns>A new RootVisual.</returns>
            <remarks>Assumes the calling assembly is a test assembly.</remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTestSystem.MergeSettingsAndParameters(Microsoft.Silverlight.Testing.Harness.TestServiceProvider,Microsoft.Silverlight.Testing.UnitTestSettings)">
            <summary>
            Merge any settings provided by a test service with the parameters 
            that were passed inside the TestHarnessSettings.
            </summary>
            <param name="testService">The test service.</param>
            <param name="inputSettings">The run settings.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTestSystem.PrepareTestService(Microsoft.Silverlight.Testing.UnitTestSettings,System.Action)">
            <summary>
            Initializes the test service and its contained providers.
            </summary>
            <param name="inputSettings">The run settings.</param>
            <param name="complete">Action to call once the test service is 
            initialized and ready to continue the run's execution.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTestSystem.RegisterUnitTestProvider(Microsoft.Silverlight.Testing.UnitTesting.Metadata.IUnitTestProvider)">
            <summary>
            Register another available unit test provider for the unit test system.
            </summary>
            <param name="provider">A unit test provider.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTestSystem._harness">
            <summary>
            Test harness instance.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTestSystem.Run(Microsoft.Silverlight.Testing.UnitTestSettings)">
            <summary>
            Start a new unit test run.
            </summary>
            <param name="settings">Unit test settings object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTestSystem.SetStandardLogProviders(Microsoft.Silverlight.Testing.UnitTestSettings)">
            <summary>
            Prepares the default log manager.
            </summary>
            <param name="settings">The test harness settings.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTestSystem.TryAddVisualStudioLogProvider(Microsoft.Silverlight.Testing.UnitTestSettings)">
            <summary>
            Tries to instantiate and initialize a VSTT provider. Requires that 
            XLinq is available and included in the application package.
            </summary>
            <param name="settings">The test harness settings object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTestSystem.CreateDefaultSettings">
            <summary>
            Creates the default settings that would be used by the UnitTestHarness
            if none were specified.
            </summary>
            <returns>A new RootVisual.</returns>
            <remarks>Assumes the calling assembly is a test assembly.</remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTestSystem.OnTestHarnessCompleted(Microsoft.Silverlight.Testing.Harness.TestHarnessCompletedEventArgs)">
            <summary>
            Call the TestHarnessCompleted event.
            </summary>
            <param name="args">The test harness completed event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTestSystem.CreateDefaultSettings(System.Reflection.Assembly)">
            <summary>
            Create a default settings object for unit testing.
            </summary>
            <param name="callingAssembly">The assembly reflection object.</param>
            <returns>A unit test settings instance.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSystem.SystemName">
            <summary>
            Gets the test system name built into the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSystem.FrameworkFileVersion">
            <summary>
            Gets a string representing the file version attribute of the main
            unit test framework assembly, if present.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.UnitTestSystem.TestHarnessCompleted">
            <summary>
            A completed test harness handler.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.WorkItemExtensions">
            <summary>
            A class contains extension methods and helpers for dealing with WorkItem
            instances and improving framework performance.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItemExtensions.EnqueueQuickWorkItem(Microsoft.Silverlight.Testing.WorkItemTest,Microsoft.Silverlight.Testing.WorkItem)">
            <summary>
            Enqueues a work item into the task queue. The work item will run
            immediately following the previous work item, and may not leave any
            time before executing the next. This is a specialized method to be
            used for performance improvements.
            </summary>
            <param name="test">The work item test.</param>
            <param name="workItem">The unit of work.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItemExtensions.EnqueueQuickCallback(Microsoft.Silverlight.Testing.WorkItemTest,System.Action)">
            <summary>
            Enqueues a method into the task queue. The method will run
            immediately following the previous work item, and may not leave any
            time before executing the next. This is a specialized method to be
            used for performance improvements.
            </summary>
            <param name="test">The work item test.</param>
            <param name="callback">The callback action or method.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItemExtensions.EnqueueQuickConditional(Microsoft.Silverlight.Testing.WorkItemTest,System.Func{System.Boolean})">
            <summary>
            Enqueues a conditional statement into the task queue. The method will
            run immediately following the previous work item, and may not leave
            any time before executing the next. This is a specialized method to
            be used for performance improvements.
            </summary>
            <param name="test">The work item test.</param>
            <param name="conditional">The conditional function or statement.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.WorkItemTest">
            <summary>
            Custom test class that provides the ability to perform semi-asynchronous 
            test tasks on the main thread.  Requires the custom unit test harness 
            that manages and invokes test work items on the thread when needed.
            
            Tests using this functionality will not be compatible with the full 
            desktop framework's Visual Studio Team Test environment.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItemTest.TestComplete">
            <summary>
            Signal that a test is complete when using Async testing.  
            
            WARNING: If you use your own methods for completing, such as an 
            HtmlTimer or other threading method, it is possible that this call 
            will occur *AFTER* the test has timed out when using Timeouts.  As 
            such, be very careful as you could complete the call to the *next* 
            test.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItemTest.EnqueueWorkItem(Microsoft.Silverlight.Testing.WorkItem)">
            <summary>
            Add a task object to the test queue.  For a test that is currently 
            executing, all tasks contained within the queue are executed to 
            completion (unless an Exception is thrown) -before- moving on to 
            the next test.
            
            The test task queue replaces the PumpMessages(...) system that 
            permitted a single callback.  This enables specialized tasks, such 
            as DOM bridge tasks, sleep tasks, and conditional continue tasks.
            </summary>
            <param name="testTaskObject">Asynchronous test task 
            instance.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItemTest.EnqueueDelay(System.TimeSpan)">
            <summary>
            Delay a minimum amount of time before continuing. Similar to a sleep
            call that is not a blocking call.
            </summary>
            <param name="delay">The minimum time span to wait before continuing.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItemTest.CreateDelay(System.TimeSpan)">
            <summary>
            Creates a delay work item instance.
            </summary>
            <param name="delay">The minimum time span to wait before continuing.</param>
            <returns>Returns a new work item.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItemTest.EnqueueDelay(System.Double)">
            <summary>
            Delay a minimum amount of time before continuing. Similar to a sleep
            call that is not a blocking call.
            </summary>
            <param name="milliseconds">The minimum number of milliseconds to wait
            until the delay is finished.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItemTest.EnqueueConditional(System.Func{System.Boolean})">
            <summary>
            Requires a bool returning delegate to be passed in. Instructs the 
            test task queue to wait until the conditional call returns True to 
            continue executing other test tasks and/or ending the test method.
            </summary>
            <param name="conditionalDelegate">Conditional method or delegate. 
            Test will halt until this condition returns True.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItemTest.CreateConditional(System.Func{System.Boolean})">
            <summary>
            Creates a conditional work item instance.
            </summary>
            <param name="conditionalDelegate">Conditional method or delegate. 
            Test will halt until this condition returns True.</param>
            <returns>Returns a new work item.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItemTest.EnqueueTestComplete">
            <summary>
            Enqueue a test task which calls the TestComplete method of 
            SilverlightTest.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItemTest.EnqueueCallback(System.Action)">
            <summary>
            Add a Callback method into the test task queue.  Similar to the 
            PumpMessages(...) call, with the difference being that there is no 
            longer a single requirement: you can enqueue several callback 
            methods and other test tasks, all of which will execute before the 
            test completes and/or the engine continues.
            </summary>
            <param name="testCallbackDelegate">Void-returning delegate, 
            anonymous delegates work fine too.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItemTest.CreateCallback(System.Action)">
            <summary>
            Creates a callback work item instance.
            </summary>
            <param name="testCallbackDelegate">Void-returning delegate, 
            anonymous delegates work fine too.</param>
            <returns>Returns a new work item.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItemTest.EnqueueCallback(System.Action[])">
            <summary>
            Adds a number of callback methods into the test task queue.
            </summary>
            <param name="actions">Set of Action instances.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItemTest.Sleep(System.Int32,System.Action)">
            <summary>
            Sleep a minimum number of milliseconds before calling a test 
            callback delegate.
            </summary>
            <param name="sleepMillisecondsMinimum">Minimum number of 
            milliseconds to sleep.  The only guarantee to the tester 
            is that the sleep will be >= this amount of ms, and NOT 
            that there is precision or an exact time.</param>
            <param name="testCallback">Callback method to 
            execute after the minimum amount of time has 
            elapsed.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItemTest.Enqueue(System.Action)">
            <summary>
            Enqueue an action.  A shortcut for the EnqueueCallback.
            </summary>
            <param name="action">The action to enqueue.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItemTest.EnqueueSleep(System.Int32)">
            <summary>
            Sleep a minimum number of milliseconds.  This is the simplified 
            overload which requires no callback.
            </summary>
            <param name="sleepMillisecondsMinimum">Minimum number of 
            milliseconds to sleep.  The only guarantee to the tester is that the
            sleep will be >= this amount of ms, and NOT that there is precision 
            or an exact time.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.ExclusiveAttribute">
            <summary>
            A special indicator attribute to enable better debugging using 
            Microsoft.Silverlight.Testing.  
            
            As there is very little parameter information available for a test run, 
            this attribute singles out specific classes to execute when found.
            
            This attribute is unique to this environment and not compatible with any 
            desktop unit test framework without using a shim if it is left in code.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.PresentationTest">
            <summary>
            Implementation of useful properties and features for presentation 
            platform tests (Silverlight and WPF).
            
            Tests using this functionality will not be compatible with the full 
            desktop framework's Visual Studio Team Test environment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.PresentationTest.TestPanel">
            <summary>
            Gets the test panel.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.SilverlightTest">
            <summary>
            Provides access to Silverlight-specific test features and 
            functionality.
            
            Tests using this functionality will not be compatible with the full 
            desktop framework's Visual Studio Team Test environment.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.WorkItem">
            <summary>
            A test work item is a task that is invoked until it is complete.  It 
            maintains its own state to be able to notify the caller when it is 
            finally complete, with no further work to be run.
            
            It is possible that some implementations of a TestWorkItem may actually 
            contain a set of sub-tasks by implementing a composite pattern.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.WorkItem._canExecuteImmediately">
            <summary>
            A value indicating whether the task can immediately execute.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItem.Invoke">
            <summary>
            Invoke the task.  Return false only when the task is complete.
            </summary>
            <returns>True if there is additional work to be completed.  False 
            when there is none.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.WorkItem.WorkItemComplete">
            <summary>
            Called by the task after the work is complete.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.WorkItem.IsComplete">
            <summary>
            Gets a value indicating whether the task's work is complete.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.WorkItem.CanExecuteImmediately">
            <summary>
            Gets or sets a value indicating whether the work item can be
            executed immediately, and does not rely on special asynchronous
            operation. Used for performance improvements. The setter is also
            public.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.UnitTestLogMessageWriter">
            <summary>
            The extended writer for the unit testing harness and consumers.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.LogMessageWriter">
            <summary>
            A utility type that writes new log messages to the test harness log
            queue.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogMessageWriter._factory">
            <summary>
            The factory used for creating new LogMessage types.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogMessageWriter._testHarness">
            <summary>
            The test harness that contains the method to post new events into
            the log message queue.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.#ctor(Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Initialize a new writer class, using the default LogMessageFactory
            to create new messages.
            </summary>
            <param name="harness">The test harness instance.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.#ctor(Microsoft.Silverlight.Testing.Harness.UnitTestHarness,Microsoft.Silverlight.Testing.Harness.LogMessageFactory)">
            <summary>
            Initialize a new writer class.
            </summary>
            <param name="harness">The test harness instance.</param>
            <param name="messageFactory">
            The factory to use when creating new messages.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.Enqueue(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Posts a log message to the test harness queue for processing.
            </summary>
            <param name="message">The log message object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.Create">
            <summary>
            Creates a new log message using the embedded factory.
            </summary>
            <returns>Returns a new LogMessage instance.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.Create(Microsoft.Silverlight.Testing.Harness.LogMessageType)">
            <summary>
            Creates a new log message using the embedded factory.
            </summary>
            <param name="messageType">The message type.</param>
            <returns>Returns a new LogMessage instance.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.Create(Microsoft.Silverlight.Testing.Harness.LogMessageType,System.String)">
            <summary>
            Creates a new log message using the embedded factory.
            </summary>
            <param name="messageType">The message type.</param>
            <param name="message">The text message.</param>
            <returns>Returns a new LogMessage instance.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.Decorate(Microsoft.Silverlight.Testing.Harness.LogMessage,System.Object,System.Object)">
            <summary>
            Decorate a log message with a value.
            </summary>
            <param name="message">The log message to decorate.</param>
            <param name="key">The key for this decoration.</param>
            <param name="value">The value of this decoration.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.DecorateException(Microsoft.Silverlight.Testing.Harness.LogMessage,System.Exception)">
            <summary>
            Decorate the log message object with an Exception object.
            </summary>
            <param name="message">The log message object.</param>
            <param name="exception">The Exception.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.DecorateNameProperty(Microsoft.Silverlight.Testing.Harness.LogMessage,System.String)">
            <summary>
            Decorate the log message object with a name.
            </summary>
            <param name="message">The log message object.</param>
            <param name="name">Name property value.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.DecorateTestStage(Microsoft.Silverlight.Testing.Harness.LogMessage,Microsoft.Silverlight.Testing.Harness.TestStage)">
            <summary>
            Decorate the log message object with a test stage value.
            </summary>
            <param name="message">The log message object.</param>
            <param name="stage">Test stage value.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.DecorateTestOutcome(Microsoft.Silverlight.Testing.Harness.LogMessage,Microsoft.Silverlight.Testing.Harness.TestOutcome)">
            <summary>
            Decorate the log message object with a test outcome object.
            </summary>
            <param name="message">The log message object.</param>
            <param name="outcome">Test outcome object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.DecorateTestGranularity(Microsoft.Silverlight.Testing.Harness.LogMessage,Microsoft.Silverlight.Testing.Harness.TestGranularity)">
            <summary>
            Decorate the log message object with a test granularity object.
            </summary>
            <param name="message">The log message object.</param>
            <param name="granularity">Test granularity object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.SetType(Microsoft.Silverlight.Testing.Harness.LogMessage,Microsoft.Silverlight.Testing.Harness.LogMessageType)">
            <summary>
            Sets the type of the log message.
            </summary>
            <param name="message">The log message object.</param>
            <param name="type">The new value to set the message type to.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.DebugWriteLine(System.String)">
            <summary>
            This writes a new line of information similar to a Debug::WriteLine
            call.
            </summary>
            <param name="text">The text to write.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.Information(System.String)">
            <summary>
            Writes information through a new log message.
            </summary>
            <param name="info">The information string.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.TestInfrastructure(System.String)">
            <summary>
            Writes a message relating to the test infrastructure.
            </summary>
            <param name="text">The text to write.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.Environment(System.String)">
            <summary>
            Writes an environment message.
            </summary>
            <param name="text">The text to write.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.TestExecution(System.String)">
            <summary>
            Writes a TestRun message.
            </summary>
            <param name="text">The text to write.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.Error(System.String,System.Exception)">
            <summary>
            Log an error message.
            </summary>
            <param name="errorMessage">The error message string.</param>
            <param name="exception">The Exception object to decorate the message
            with.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.Error(System.String)">
            <summary>
            Log an error message.
            </summary>
            <param name="errorMessage">The error message string.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.Warning(System.String,System.Exception)">
            <summary>
            Log a warning message.
            </summary>
            <param name="warningMessage">The warning message string.</param>
            <param name="exception">The Exception object to decorate the message
            with.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.Warning(System.String)">
            <summary>
            Log a warning message.
            </summary>
            <param name="warningMessage">The warning message string.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.TestResult(System.String,Microsoft.Silverlight.Testing.Harness.TestOutcome)">
            <summary>
            Record a test outcome.
            </summary>
            <param name="message">The accompanying message.</param>
            <param name="outcome">The outcome value.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.KnownIssue(System.String)">
            <summary>
            Writes information about an encountered, known issue.
            </summary>
            <param name="issue">Information about the known issue.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageWriter.GranularTestStage(System.String,System.String,Microsoft.Silverlight.Testing.Harness.TestGranularity,Microsoft.Silverlight.Testing.Harness.TestStage)">
            <summary>
            Records a log message that indicates a named, granular test stage 
            has happened.
            </summary>
            <param name="message">Any message for the log.</param>
            <param name="name">A name for the object or event.</param>
            <param name="granularity">The test granularity value.</param>
            <param name="stage">The test stage value.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestLogMessageWriter.#ctor(Microsoft.Silverlight.Testing.Harness.UnitTestHarness)">
            <summary>
            Initializes the unit test log message writer helper.
            </summary>
            <param name="harness">The test harness reference.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestLogMessageWriter.MarkUnitTestMessage(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Marks a message as a unit test system-specific message.
            </summary>
            <param name="message">The log message object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestLogMessageWriter.IncorrectException(System.Type,System.Type,Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass,Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod)">
            <summary>
            An incorrect exception type has occurred.
            </summary>
            <param name="expectedExceptionType">The expected type.</param>
            <param name="actualExceptionType">The actual exception's type.</param>
            <param name="test">The test metadata.</param>
            <param name="method">The method metadata.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestLogMessageWriter.NoExceptionWhenExpected(System.Type,Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass,Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod)">
            <summary>
            No Exception was intercepted, yet one was expected.
            </summary>
            <param name="expectedExceptionType">The expected exception type.</param>
            <param name="test">The test class metadata.</param>
            <param name="method">The test method metadata.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestLogMessageWriter.LogException(System.Exception,Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass,Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod)">
            <summary>
            Logs and Exception that was intercepted or observed.
            </summary>
            <param name="exception">The actual Exception instance.</param>
            <param name="test">The test class metadata.</param>
            <param name="method">The test method metadata.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestLogMessageWriter.Ignore(Microsoft.Silverlight.Testing.Harness.TestGranularity,System.String)">
            <summary>
            Enqueues a Ignore message.
            </summary>
            <param name="granularity">The granularity of the ignore operation.</param>
            <param name="name">The name of the test skipped.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestLogMessageWriter.TestRunFilterSelected(Microsoft.Silverlight.Testing.Harness.TestRunFilter)">
            <summary>
            Enqueues a message containing a test run filter.
            </summary>
            <param name="filter">The test run filter.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestLogMessageWriter.GranularAssemblyTestStage(Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly,Microsoft.Silverlight.Testing.Harness.TestGranularity,Microsoft.Silverlight.Testing.Harness.TestStage)">
            <summary>
            Records a log message that indicates a named, granular test stage has 
            happened.
            </summary>
            <param name="assembly">The assembly metadata object.</param>
            <param name="granularity">The test granularity value.</param>
            <param name="stage">The test stage value.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestLogMessageWriter.TestClassStage(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass,Microsoft.Silverlight.Testing.Harness.TestStage)">
            <summary>
            Log a test class's stage.
            </summary>
            <param name="test">The test class metadata object.</param>
            <param name="stage">The test stage.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestLogMessageWriter.TestResult(Microsoft.Silverlight.Testing.Harness.ScenarioResult)">
            <summary>
            Log the result of a unit test scenario.
            </summary>
            <param name="result">The result of the test.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestLogMessageWriter.TestMethodStage(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod,Microsoft.Silverlight.Testing.Harness.TestStage)">
            <summary>
            Log a test method's stage.
            </summary>
            <param name="method">The test method metadata object.</param>
            <param name="stage">The test stage.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestLogMessageWriter.UnitTestHarnessStage(Microsoft.Silverlight.Testing.Harness.UnitTestHarness,System.String,Microsoft.Silverlight.Testing.Harness.TestStage)">
            <summary>
            Records a harness state for the unit test harness.
            </summary>
            <param name="harness">The unit test harness.</param>
            <param name="name">The harness name.</param>
            <param name="stage">The test stage.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.UnitTestHarness">
            <summary>
            A test harness for interacting with unit test providers such as Visual 
            Studio Team Test's metadata.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.HarnessName">
            <summary>
            Display name for this harness.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestHarness._globalExceptions">
            <summary>
            Manages the attachment state of a global exception handler.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestHarness._harnessTasks">
            <summary>
            Container of all work items for the test harness.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestHarness._dispatcherStack">
            <summary>
            Manager of the stack of dispatchers, so that the appropriate parent 
            container handles exceptions and completion events.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestHarness._validTestAssemblies">
            <summary>
            Number of valid test assemblies encountered.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestHarness._knownTestMethods">
            <summary>
            The current run's known number of test methods.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestHarness._events">
            <summary>
            Backing field for the event firing helper.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.#ctor">
            <summary>
            Initiate unit test harness.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestHarness._queuedLogMessages">
            <summary>
            Queue of log messages awaiting processing.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.AddLogProvider(Microsoft.Silverlight.Testing.Harness.LogProvider)">
            <summary>
            Adds a log provider to the listening log providers group.
            </summary>
            <param name="provider">Log provider object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.QueueLogMessage(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Enqueue a log message object for processing by the log providers.
            </summary>
            <param name="message">The log message object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.Run">
            <summary>
            Begin running the test harness.
            </summary>
            <remarks>
            Make sure to subscribe to the Complete event before calling this 
            method, in some harnesses this may be a synchronous Run followed 
            immediately by the Complete event being fired.
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.RunDispatcherComplete(System.Object,System.EventArgs)">
            <summary>
            Complete event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.WriteLogFile(System.String,System.String)">
            <summary>
            Stores a log file for the test run. Depending on the execution 
            environment, this call may not successful.
            </summary>
            <param name="logName">The name of the log file.</param>
            <param name="fileContent">The log file content as a string.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.PublishFinalResult">
            <summary>
            If supported by any attached test service, this publishes the final
            test results. Typical harness implementations may immediately close
            the web browser channel upon receiving the message, so any other
            reporting should be done first.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.ProcessLogMessages">
            <summary>
            Process all queued log messages.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.InitializeSettings(Microsoft.Silverlight.Testing.UnitTestSettings)">
            <summary>
            Fill member variables with any non-null settings of the same type.
            </summary>
            <param name="settings">Settings container class.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.InitializeLogProviders">
            <summary>
            Initializes all log providers.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.OnTestHarnessCompleted">
            <summary>
            Call the TestHarnessCompleted event.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.OnPublishing(System.EventArgs)">
            <summary>
            Call the Publishing event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.PublishResults">
            <summary>
            Overrides the PublishResults method so that final reporting is only
            done once all other logging is finished.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.PublishFinalResults">
            <summary>
            Publish final results. If not yet ready, will keep waiting around
            as a work item until it is done.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestHarness._dispatcher">
            <summary>
            Stored dispatcher instance.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.IsReportingTestServiceConnected">
            <summary>
            Checks if a reporting provider is connected to the test service.
            </summary>
            <returns>Returns true if a reporting provider is connected to the
            test service.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.SetOverallStatus(System.String)">
            <summary>
            Immediately sets the overall status using a log message and
            processes the message queue.
            </summary>
            <param name="message">The message to set.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.PrepareCustomTestInstance(Microsoft.Silverlight.Testing.CustomFrameworkUnitTest)">
            <summary>
            Sets the unit test harness property for a test case that inherits 
            from the abstract base type 'CustomTest'.
            </summary>
            <param name="customTest">A CustomText instance.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.Initialize">
            <summary>
            Initialize the harness with a set of test assemblies.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.RestartRunDispatcher">
            <summary>
            Restarts the run dispatcher.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.TrackScenarioResult(Microsoft.Silverlight.Testing.Harness.ScenarioResult)">
            <summary>
            Track the results for our execution and also track the fail state.
            </summary>
            <param name="result">Scenario result to process.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.OnTestAssemblyStarting(Microsoft.Silverlight.Testing.Harness.TestAssemblyStartingEventArgs)">
            <summary>
            Fires the test assembly starting event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.OnIsDispatcherRunningChanged(System.EventArgs)">
            <summary>
            Fires the play pause event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.OnTestAssemblyCompleted(Microsoft.Silverlight.Testing.Harness.TestAssemblyCompletedEventArgs)">
            <summary>
            Fires the test assembly completed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.OnTestClassStarting(Microsoft.Silverlight.Testing.Harness.TestClassStartingEventArgs)">
            <summary>
            Fires the test class starting event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.OnTestClassCompleted(Microsoft.Silverlight.Testing.Harness.TestClassCompletedEventArgs)">
            <summary>
            Fires the test class completed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.OnTestMethodStarting(Microsoft.Silverlight.Testing.Harness.TestMethodStartingEventArgs)">
            <summary>
            Fires the test method starting event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.OnTestMethodCompleted(Microsoft.Silverlight.Testing.Harness.TestMethodCompletedEventArgs)">
            <summary>
            Notifies observers that a test method has been completed. Also
            clears the test panel's visual tree.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.OnTestRunStarting(Microsoft.Silverlight.Testing.Harness.TestRunStartingEventArgs)">
            <summary>
            Notifies observers that a test run has been started.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestHarness._testPage">
            <summary>
            Reference to the test page object.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.ReportCodeCoverage(Microsoft.Silverlight.Testing.Harness.TestServiceProvider)">
            <summary>
            Attempts to report the code coverage information using the test 
            service provider. If there is no available coverage reporting 
            service, this is a silent failure. Only reports if >= 1 blocks 
            are hit.
            </summary>
            <param name="testService">The test service.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.EnqueueTestAssembly(System.Reflection.Assembly,Microsoft.Silverlight.Testing.Harness.TestRunFilter)">
            <summary>
            Enqueue a test assembly from a simple Assembly reference.
            </summary>
            <param name="assembly">The test assembly.</param>
            <param name="runFilter">The run filter settings for the test assembly's run.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.EnqueueTestAssembly(Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly,Microsoft.Silverlight.Testing.Harness.TestRunFilter)">
            <summary>
            Enqueues a test assembly.
            </summary>
            <param name="testAssembly">The test assembly metadata.</param>
            <param name="runFilter">The run filter settings for the test assembly's run.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.RunNextStep">
            <summary>
            Flush the current log manager and then perform the next invoke.
            </summary>
            <returns>Returns true if work remains.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.CreateTestRunFilter(Microsoft.Silverlight.Testing.UnitTestSettings)">
            <summary>
            Creates the test run filter for the initial run.
            </summary>
            <param name="settings">The unit test settings.</param>
            <returns>Returns a new TestRunFilter instance.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.PrepareTestAssemblyTasks">
            <summary>
            Determine what test assemblies need to be executed. Enqueue tasks 
            for the unit test assembly providers to run the tests.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.CalculateTotalMethods(Microsoft.Silverlight.Testing.Harness.AssemblyManager,Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly,Microsoft.Silverlight.Testing.Harness.TestRunFilter)">
            <summary>
            Calculates the number of methods for a run.
            </summary>
            <param name="assemblyManager">The assembly manager.</param>
            <param name="assembly">The test assembly.</param>
            <param name="filter">The test run filter.</param>
            <returns>Returns the number of known methods returned.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.HarnessComplete(System.Object,System.EventArgs)">
            <summary>
            Event fired at the completion of the harness' work.
            </summary>
            <param name="sender">Sender object instance.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.GlobalUnhandledExceptionListener(System.Object,System.EventArgs)">
            <summary>
            Listener event for any unhandled exceptions.
            </summary>
            <param name="sender">Sender object instance.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.CreateHarnessTasks">
            <summary>
            Creates the set of harness tasks to run and hooks up to the Complete event.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.Results">
            <summary>
            Gets the list of results.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.LogWriter">
            <summary>
            Gets the log message writer instance.  This can be used to easily 
            post informative messages to the log message queue and providers.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.LogicFactory">
            <summary>
            Gets or sets the logic factory used for instantiating the 
            unit test logic and management objects.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.State">
            <summary>
            Gets or sets the overall harness state - overloaded types can be 
            used to store additional information.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.LogProviders">
            <summary>
            Gets the log providers list.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.RunDispatcher">
            <summary>
            Gets or sets the wrapper that handles calling the next Run step 
            method until complete; allows for a virtual Run method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.Parameters">
            <summary>
            Gets the dictionary of Parameters passed into the test harness.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.Settings">
            <summary>
            Gets or sets the settings used to initialize the test harness.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.Events">
            <summary>
            Gets a set of events that can be fired for test results and other
            important test runtime events.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.Publishing">
            <summary>
            The test harness is publishing results.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.TestService">
            <summary>
            Gets the TestService referenced by the test harness settings. The 
            test service provides advanced, optional functionality that is 
            useful to harness and test case developers. A typical test service 
            operates outside the process or security boundary.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.TestHarnessCompleted">
            <summary>
            Complete event fired when the test harness has finished its test 
            run.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.Dispatcher">
            <summary>
            Gets a dispatcher instance.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.RootCompositeWorkItem">
            <summary>
            Gets the root container for test work to be completed.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.TestMethodCount">
            <summary>
            Gets the known number of test methods in the current test run.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.InterceptAllExceptions">
            <summary>
            Gets or sets a value indicating whether to intercept exceptions at 
            the app domain level and funnel into the current container or not.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.DispatcherStack">
            <summary>
            Gets the internal DispatcherStack being used by the test harness.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.TestAssemblyStarting">
            <summary>
            The test assembly starting event.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.IsDispatcherRunningChanged">
            <summary>
            On the play or pause change of the dispatcher.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.IsDispatcherRunning">
            <summary>
            Gets or sets a value indicating whether the dispatcher is currently
            running.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.TestAssemblyCompleted">
            <summary>
            Test assembly completed event.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.TestClassStarting">
            <summary>
            Test class starting event.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.TestClassCompleted">
            <summary>
            The test class completed event.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.TestMethodStarting">
            <summary>
            The test method starting event.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.TestMethodCompleted">
            <summary>
            An event that is fired whenever a test method completes.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.TestRunStarting">
            <summary>
            An event that is fired when the test run is starting.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.TestPage">
            <summary>
            Gets or sets the test page.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestHarness.TestPanelManager">
            <summary>
            Gets the test panel manager instance.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.UnitTestLogDecorator">
            <summary>
            Well-known keys that can be used to mark decorator instances in log 
            message objects.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestLogDecorator.IsUnitTestMessage">
            <summary>
            Indicates that the message is specific to the unit test system.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestLogDecorator.UnitTestHarness">
            <summary>
            The unit test harness reference.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestLogDecorator.TestAssemblyMetadata">
            <summary>
            The metadata interfacing object for a test assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestLogDecorator.TestClassMetadata">
            <summary>
            The metadata interfacing object for a test class.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestLogDecorator.TestMethodMetadata">
            <summary>
            The metadata interfacing object for a test method.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestLogDecorator.IncorrectExceptionMessage">
            <summary>
            Indicates that the incorrect exception was intercepted.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestLogDecorator.IgnoreMessage">
            <summary>
            Indicates that the message indicates a skipped/ignored item.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestLogDecorator.ExpectedExceptionType">
            <summary>
            The type of the expected exception.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestLogDecorator.ActualExceptionType">
            <summary>
            The type of the actual exception.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestLogDecorator.ActualException">
            <summary>
            The actual exception.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestLogDecorator.TestRunFilter">
            <summary>
            A TestRunFilter object.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestLogDecorator.ScenarioResult">
            <summary>
            A ScenarioResult object.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.UnitTestMessageConditional">
            <summary>
            Helper conditional methods for unit test-specific log messages.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestMessageConditional.IsUnitTestEndMessage(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Determines whether a log message meets a specific condition or set 
            of conditions.
            </summary>
            <param name="message">The log message object.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestMessageConditional.IsUnitTestStartMessage(Microsoft.Silverlight.Testing.Harness.UnitTestLogDecorator)">
            <summary>
            Determines whether a log message meets a specific condition or set 
            of conditions.
            </summary>
            <param name="decorator">The unit test decorator of interest.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestMessageConditional.IsUnitTestMessage(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Returns a value indicating whether the message is marked as a unit
            test system message.
            </summary>
            <param name="message">The message.</param>
            <returns>Returns true if the message is a unit test system-marked 
            message.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestMessageConditional.HasUnitTestOutcome(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Determines whether a log message meets a specific condition or set 
            of conditions.
            </summary>
            <param name="message">The log message object.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestMessageConditional.IsIgnoreMessage(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Determines whether a log message meets a specific condition or set 
            of conditions.
            </summary>
            <param name="message">The log message object.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestMessageConditional.IsTestRunFilterMessage(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Determines whether a log message has an attached TestRunFilter.
            </summary>
            <param name="message">The log message object.</param>
            <returns>Returns a value indicating whether the condition is met.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestMessageConditional.IsExceptionLogMessage(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Determines whether a log message meets a specific condition or set 
            of conditions.
            </summary>
            <param name="message">The log message object.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestMessageConditional.IsIncorrectExceptionLogMessage(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Determines whether a log message meets a specific condition or set 
            of conditions.
            </summary>
            <param name="message">The log message object.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestMessageConditional.IsKnownBug(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Determines whether a log message meets a specific condition or set 
            of conditions.
            </summary>
            <param name="message">The log message object.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.LazyAssemblyMethodInfo">
            <summary>
            A lazy method type.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.LazyMethodInfo">
            <summary>
            A class that does a lazy lookup when needed using reflection.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LazyMethodInfo._attributeType">
            <summary>
            Attribute Type instance.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LazyMethodInfo._searchType">
            <summary>
            The Type to search with.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LazyMethodInfo._hasSearched">
            <summary>
            Whether the search has happened.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LazyMethodInfo._methodInfo">
            <summary>
            The method reflection object.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LazyMethodInfo.#ctor(System.Type)">
            <summary>
            Construct a new lazy method wrapper.
            </summary>
            <param name="attributeType">The attribute type.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LazyMethodInfo.#ctor(System.Type,System.Type)">
            <summary>
            Construct a new lazy method wrapper.
            </summary>
            <param name="searchType">Type to search.</param>
            <param name="attributeType">Attribute type.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LazyMethodInfo.GetMethodInfo">
            <summary>
            Does a search and retrieves the method information.
            </summary>
            <returns>The method reflection object.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LazyMethodInfo.HasMethodInfo">
            <summary>
            Whether the type has a method info.
            </summary>
            <returns>A value indicating whether the method information has 
            been found.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LazyMethodInfo.Search">
            <summary>
            Perform a search on the type.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.LazyMethodInfo.AttributeType">
            <summary>
            Gets the type of attribute the lazy method is searching for.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.LazyMethodInfo.SearchType">
            <summary>
            Gets the underlying type that is searched.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.LazyMethodInfo.HasSearched">
            <summary>
            Gets or sets a value indicating whether a lookup has already been attempted.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.LazyMethodInfo.MethodInfo">
            <summary>
            Gets or sets the underlying MethodInfo from reflection.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LazyAssemblyMethodInfo._assembly">
            <summary>
            Underlying Assembly reflection object.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LazyAssemblyMethodInfo.#ctor(System.Reflection.Assembly,System.Type)">
            <summary>
            Create a new lazy method from a MethodInfo instance.
            </summary>
            <param name="assembly">Assembly reflection object.</param>
            <param name="attributeType">Attribute Type instance.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LazyAssemblyMethodInfo.Search">
            <summary>
            Performs a search on the MethodInfo for the attributes needed.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly">
            <summary>
            Test assembly metadata interface.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly.GetTestClasses">
            <summary>
            Gets a collection of test class metadata objects.
            </summary>
            <returns>Returns a collection of metadata objects.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly.AssemblyInitializeMethod">
            <summary>
            Gets the initialization method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly.AssemblyCleanupMethod">
            <summary>
            Gets the cleanup method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly.Provider">
            <summary>
            Gets a reference to the unit test provider.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly.Name">
            <summary>
            Gets the name of the test assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly.TestHarness">
            <summary>
            Gets the test harness used to initialize the assembly.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IExpectedException">
            <summary>
            An expected exception marker for a test method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IExpectedException.ExceptionType">
            <summary>
            Gets the expected exception type.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IExpectedException.Message">
            <summary>
            Gets any message associated with the expected exception object.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IHostType">
            <summary>
            Represents the host type information for a test.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IHostType.HostType">
            <summary>
            Gets the Host type.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IHostType.HostData">
            <summary>
            Gets the host data.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IPriority">
            <summary>
            A representation of a test's priority.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass">
            <summary>
            Metadata representing a test class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass.GetTestMethods">
            <summary>
            Retrieve a collection of the test method metadata objects setup by 
            the unit test provider.
            </summary>
            <returns>A collection of test method interfaces.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass.Type">
            <summary>
            Gets the test class Type instance.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass.Ignore">
            <summary>
            Gets a value indicating whether the test class should be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass.TestInitializeMethod">
            <summary>
            Gets the per-test initialization method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass.TestCleanupMethod">
            <summary>
            Gets the per-test cleanup method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass.ClassInitializeMethod">
            <summary>
            Gets the one-time class initialization method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass.ClassCleanupMethod">
            <summary>
            Gets the one-time class cleanup method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass.Name">
            <summary>
            Gets the name of the test class.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass.Assembly">
            <summary>
            Gets a reference to the parent test assembly metadata 
            instance.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod">
            <summary>
            Test method metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod.DecorateInstance(System.Object)">
            <summary>
            Used for decorating with unit test provider-specific capabilities, 
            such as the TestContext concept.
            </summary>
            <param name="instance">Instance to decorate.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod.GetDynamicAttributes">
            <summary>
            Get any attribute on the test method that are provided dynamically.
            </summary>
            <returns>
            Dynamically provided attributes on the test method.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod.Invoke(System.Object)">
            <summary>
            Invoke the test method.
            </summary>
            <param name="instance">Instance of the test class.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod.Method">
            <summary>
            Gets the test method reflection object.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod.WriteLine">
            <summary>
            Hooks up to any unit test provider-enabled WriteLine capability 
            for unit tests.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod.Ignore">
            <summary>
            Gets a value indicating whether the test is marked to be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod.Description">
            <summary>
            Gets any description for the method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod.Name">
            <summary>
            Gets a name for the method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod.Category">
            <summary>
            Gets any category information for the method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod.Owner">
            <summary>
            Gets any test owner information.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod.ExpectedException">
            <summary>
            Gets any expected exception attribute .
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod.Timeout">
            <summary>
            Gets any timeout information.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod.Properties">
            <summary>
            Gets a collection of any test properties.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod.WorkItems">
            <summary>
            Gets a collection of any test work items.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod.Priority">
            <summary>
            Gets any priority information.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestProperty">
            <summary>
            A property for a test method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestProperty.Name">
            <summary>
            Gets the test property name.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestProperty.Value">
            <summary>
            Gets the test property value.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IUnitTestProvider">
            <summary>
            Provider model for a unit test system that uses reflection and metadata 
            to enable a unit test run.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IUnitTestProvider.GetUnitTestAssembly(Microsoft.Silverlight.Testing.Harness.UnitTestHarness,System.Reflection.Assembly)">
            <summary>
            Retrieve the metadata instance for a test assembly given a 
            reflection Assembly instance.
            </summary>
            <param name="testHarness">The test harness using the provider.</param>
            <param name="assemblyReference">Reflected test assembly.</param>
            <returns>Unit test provider-specific metadata instance for 
            the test assembly.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IUnitTestProvider.HasCapability(Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviderCapabilities)">
            <summary>
            Gets a value indicating whether a specific capability or set of 
            capabilities are supported by the unit test provider.
            </summary>
            <param name="capability">Capability of interest.</param>
            <returns>Gets a value indicating whether the capability is 
            supported.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IUnitTestProvider.IsFailedAssert(System.Exception)">
            <summary>
            Checks if an Exception actually represents an assertion that failed 
            to improve the logging experience.
            </summary>
            <param name="exception">Exception object.</param>
            <returns>Returns true if the Exception is an assertion exception 
            type.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IUnitTestProvider.Name">
            <summary>
            Gets the name of the unit test provider.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IUnitTestProvider.Capabilities">
            <summary>
            Gets the capabilities that the unit test provider implements.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IWorkItemMetadata">
            <summary>
            Work item for a test.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.IWorkItemMetadata.Data">
            <summary>
            Gets the associated information from the work item.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.StringEventArgs">
            <summary>
            Event arguments that pass along a string value.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.StringEventArgs.#ctor">
            <summary>
            Create a new event argument instance.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.StringEventArgs.#ctor(System.String)">
            <summary>
            Create a new event argument instance that stores a string value.
            </summary>
            <param name="value">String value to pass along.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.StringEventArgs._value">
            <summary>
            String value stored in the event arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.StringEventArgs.Value">
            <summary>
            Gets the stored string value.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviderCapabilities">
            <summary>
            A set of capabilities that a unit test provider may chose to implement 
            through the metadata interfaces.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviderCapabilities.None">
            <summary>
            No defined capabilities.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviderCapabilities.AssemblySupportsInitializeMethod">
            <summary>
            Support for attribute [AssemblyInitialize].
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviderCapabilities.AssemblySupportsCleanupMethod">
            <summary>
            Support for attribute [AssemblyCleanup].
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviderCapabilities.ClassCanIgnore">
            <summary>
            Support for attribute [Ignore] for classes.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviderCapabilities.MethodCanIgnore">
            <summary>
            Support for attribute [Ignore] for methods.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviderCapabilities.MethodCanDescribe">
            <summary>
            Support for attribute [Description] on methods.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviderCapabilities.MethodCanCategorize">
            <summary>
            Support for attribute [Category] on methods.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviderCapabilities.MethodCanHaveOwner">
            <summary>
            Support for attribute [Owner] on method.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviderCapabilities.MethodCanHavePriority">
            <summary>
            Support for attribute [Priority] on method.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviderCapabilities.MethodCanHaveProperties">
            <summary>
            Support for attribute [TestProperty](...) on methods.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviderCapabilities.MethodCanHaveTimeout">
            <summary>
            Support for attribute [Timeout] on methods.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviderCapabilities.MethodCanHaveWorkItems">
            <summary>
            Support for attribute [WorkItem(...)]('s) on methods.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.SleepWorkItem">
            <summary>
            Test work item type that does not complete until the sleep time has 
            elapsed.  This is NOT a blocking Sleep.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.SleepWorkItem._delay">
            <summary>
            The amount of time to delay for.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.SleepWorkItem._expires">
            <summary>
            The DateTime that marks the point in time the task is complete.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.SleepWorkItem.#ctor(System.TimeSpan)">
            <summary>
            Create a new Sleep work item, including the number of 
            milliseconds to wait until continuing.
            </summary>
            <param name="delay">Amount of time to wait/delay.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.SleepWorkItem.Invoke">
            <summary>
            On the first time, will calculate the final DateTime.  Otherwise, 
            null operation (returns) until that time.
            </summary>
            <returns>Returns a value indicating whether there is more work to be
            done.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ExpectedException">
            <summary>
            Expected exception metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ExpectedException.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ExpectedException.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute)">
            <summary>
            Creates a new expected exception metadata wrapper.
            </summary>
            <param name="expectedExceptionAttribute">Attribute value.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ExpectedException._exp">
            <summary>
            The expected exception attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ExpectedException.ExceptionType">
            <summary>
            Gets the type of the expected exception.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ExpectedException.Message">
            <summary>
            Gets any message to include in a failure.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.Priority">
            <summary>
            A simple wrapper for a priority integer value that overrides the 
            ToString method.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.Priority.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Priority class.
            </summary>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.Priority.ToString">
            <summary>
            Gets the priority as string.
            </summary>
            <returns>Returns the priority.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.Priority.Value">
            <summary>
            Gets the priority value.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ProviderAttributes">
            <summary>
            The set of provider attributes.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ProviderAttributes.#cctor">
            <summary>
            Initializes the VSTT metadata provider.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ProviderAttributes.TestClass">
            <summary>
            Gets VSTT [TestClass] attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ProviderAttributes.IgnoreAttribute">
            <summary>
            Gets VSTT [Ignore] attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ProviderAttributes.ClassInitialize">
            <summary>
            Gets VSTT [ClassInitialize] attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ProviderAttributes.Priority">
            <summary>
            Gets VSTT [Priority] attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ProviderAttributes.ClassCleanup">
            <summary>
            Gets VSTT [ClassCleanup] attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ProviderAttributes.TestInitialize">
            <summary>
            Gets VSTT [TestInitialize] attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ProviderAttributes.TestCleanup">
            <summary>
            Gets VSTT [TestCleanup] attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ProviderAttributes.DescriptionAttribute">
            <summary>
            Gets VSTT [Description] attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ProviderAttributes.TimeoutAttribute">
            <summary>
            Gets VSTT [Timeout] attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ProviderAttributes.OwnerAttribute">
            <summary>
            Gets VSTT [Owner] attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ProviderAttributes.ExpectedExceptionAttribute">
            <summary>
            Gets VSTT [ExpectedException] attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ProviderAttributes.AssemblyInitialize">
            <summary>
            Gets VSTT [AssemblyInitialize] attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ProviderAttributes.AssemblyCleanup">
            <summary>
            Gets VSTT [AssemblyCleanup] attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ProviderAttributes.TestMethod">
            <summary>
            Gets VSTT [TestMethod] attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.ProviderAttributes.TestProperty">
            <summary>
            Gets VSTT [TestProperty] attribute.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass">
            <summary>
            Test class wrapper.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass.#ctor(Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly)">
            <summary>
            Construct a new test class metadata interface.
            </summary>
            <param name="assembly">Assembly metadata interface object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass.#ctor(Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly,System.Type)">
            <summary>
            Creates a new test class wrapper.
            </summary>
            <param name="assembly">Assembly metadata object.</param>
            <param name="testClassType">Type of the class.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass._type">
            <summary>
            Test Type.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass._tests">
            <summary>
            Collection of test method interface objects.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass._testsLoaded">
            <summary>
            A value indicating whether tests are loaded.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass._m">
            <summary>
            A dictionary of method types and method interface objects.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass.GetTestMethods">
            <summary>
            Gets a collection of test method  wrapper instances.
            </summary>
            <returns>A collection of test method interface objects.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass.ToString">
            <summary>
            Exposes the name of the test class.
            </summary>
            <returns>Returns the name of the test class.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass.Assembly">
            <summary>
            Gets the test assembly metadata.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass.Type">
            <summary>
            Gets the underlying Type of the test class.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass.Name">
            <summary>
            Gets the name of the test class.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass.Ignore">
            <summary>
            Gets a value indicating whether an Ignore attribute present 
            on the class.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass.TestInitializeMethod">
            <summary>
            Gets any test initialize method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass.TestCleanupMethod">
            <summary>
            Gets any test cleanup method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass.ClassInitializeMethod">
            <summary>
            Gets any class initialize method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass.ClassCleanupMethod">
            <summary>
            Gets any class cleanup method.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass.Methods">
            <summary>
            Methods enum.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass.Methods.ClassInitialize">
            <summary>
            Initialize method.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass.Methods.ClassCleanup">
            <summary>
            Cleanup method.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass.Methods.TestInitialize">
            <summary>
            Test init method.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestClass.Methods.TestCleanup">
            <summary>
            Test cleanup method.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod">
            <summary>
            A provider wrapper for a test method.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.ContextPropertyName">
            <summary>
            Property name for the TestContext.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.DefaultPriority">
            <summary>
            Default value for methods when no priority attribute is defined.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.None">
            <summary>
            An empty object array.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod._methodInfo">
            <summary>
            Method reflection object.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.#ctor">
            <summary>
            Private constructor, the constructor requires the method reflection object.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a new test method wrapper object.
            </summary>
            <param name="methodInfo">The reflected method.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.OnWriteLine(System.String)">
            <summary>
            Call the WriteLine method.
            </summary>
            <param name="s">String to WriteLine.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.DecorateInstance(System.Object)">
            <summary>
            Decorates a test class instance with the unit test framework's 
            specific test context capability, if supported.
            </summary>
            <param name="instance">Instance to decorate.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.GetDynamicAttributes">
            <summary>
            Get any attribute on the test method that are provided dynamically.
            </summary>
            <returns>
            Dynamically provided attributes on the test method.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.Invoke(System.Object)">
            <summary>
            Invoke the test method.
            </summary>
            <param name="instance">Instance of the test class.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.ToString">
            <summary>
            Exposes the name of the test method as a string.
            </summary>
            <returns>Returns the name of the test method.</returns>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.WriteLine">
            <summary>
            Allows the test to perform a string WriteLine.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.Method">
            <summary>
            Gets the underlying reflected method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.Ignore">
            <summary>
            Gets a value indicating whether there is an Ignore attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.Description">
            <summary>
            Gets any description marked on the test method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.Name">
            <summary>
            Gets the name of the method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.Category">
            <summary>
            Gets the Category.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.Owner">
            <summary>
            Gets the owner name of the test.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.ExpectedException">
            <summary>
            Gets any expected exception attribute information for the test method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.Timeout">
            <summary>
            Gets any timeout.  A Nullable property.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.Properties">
            <summary>
            Gets a Collection of test properties.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.WorkItems">
            <summary>
            Gets a collection of test work items.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod.Priority">
            <summary>
            Gets Priority information.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestProperty">
            <summary>
            Represents a simple test property with a key/value string pair.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestProperty.#ctor">
            <summary>
            Initializes a new instance of the TestProperty class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestProperty.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the TestProperty class.
            </summary>
            <param name="name">The initial property name.</param>
            <param name="value">The initial property value.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestProperty.Name">
            <summary>
            Gets or sets the property name.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestContext">
            <summary>
            A wrapper for the unit test context capability of Visual Studio Team 
            Test's unit test framework.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestContext.#ctor(Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.TestMethod)">
            <summary>
            Create a new unit test context wrapper for the test method.
            </summary>
            <param name="testMethod">Test method.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestContext.#ctor">
            <summary>
            Constructor of a new unit test context.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestContext._tm">
            <summary>
            Test method.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestContext.WriteLine(System.String,System.Object[])">
            <summary>
            Used to write trace messages while the test is running.
            </summary>
            <param name="format">Format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestContext.NotSupportedException(System.String)">
            <summary>
            Throw a not supported exception.
            </summary>
            <param name="functionality">Functionality that is not supported (string).</param>
            <returns>A new NotSupportedException.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestContext.AddResultFile(System.String)">
            <summary>
            Adds a file name to the list in TestResult.ResultFileNames.
            </summary>
            <param name="fileName">Filename to add as a result.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestContext.BeginTimer(System.String)">
            <summary>
            Begins a timer with the specified name.
            </summary>
            <param name="timerName">The name of the timer to create.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestContext.EndTimer(System.String)">
            <summary>
            Ends a timer with the specified name.
            </summary>
            <param name="timerName">Name of the timer.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestContext._propertyCache">
            <summary>
            Cache of properties.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestContext.Properties">
            <summary>
            Gets test properties.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestContext.DataRow">
            <summary>
            Gets current data row when test is used for data driven testing.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestContext.DataConnection">
            <summary>
            Gets current data connection row when test is used for data driven testing.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestContext.TestName">
            <summary>
            Gets the name of the test method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestContext.CurrentTestOutcome">
            <summary>
            Gets the current enum outcome - passed, failed, or inconclusive.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestFrameworkAssembly">
            <summary>
            Assembly metadata for the Visual Studio Team Test unit test framework.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestFrameworkAssembly._assembly">
            <summary>
            Assembly reflection object.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestFrameworkAssembly._init">
            <summary>
            Assembly initialization method information.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestFrameworkAssembly._cleanup">
            <summary>
            Assembly cleanup method information.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestFrameworkAssembly._provider">
            <summary>
            Unit test provider used for the assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestFrameworkAssembly._harness">
            <summary>
            The unit test harness.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestFrameworkAssembly.#ctor(Microsoft.Silverlight.Testing.UnitTesting.Metadata.IUnitTestProvider,Microsoft.Silverlight.Testing.Harness.UnitTestHarness,System.Reflection.Assembly)">
            <summary>
            Creates a new unit test assembly wrapper.
            </summary>
            <param name="provider">Unit test metadata provider.</param>
            <param name="unitTestHarness">A reference to the unit test harness.</param>
            <param name="assembly">Assembly reflection object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestFrameworkAssembly.GetTestClasses">
            <summary>
            Reflect and retrieve the test class metadata wrappers for 
            the test assembly.
            </summary>
            <returns>Returns a collection of test class metadata 
            interface objects.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestFrameworkAssembly.Name">
            <summary>
            Gets the name of the test assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestFrameworkAssembly.Provider">
            <summary>
            Gets the unit test provider instance.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestFrameworkAssembly.AssemblyInitializeMethod">
            <summary>
            Gets any assembly initialize method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestFrameworkAssembly.AssemblyCleanupMethod">
            <summary>
            Gets any assembly cleanup method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestFrameworkAssembly.TestHarness">
            <summary>
            Gets the test harness used to initialize the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.UnitTestFrameworkAssembly.UnitTestHarness">
            <summary>
            Gets the test harness as a unit test harness.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.VsttProvider">
            <summary>
            Provider for the Visual Studio Team Test unit test (UT) framework 
            metadata.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.VsttProvider.ProviderName">
            <summary>
            Name of this provider.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.VsttProvider.MyCapabilities">
            <summary>
            The capabilities of the VSTT UTF provider.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.VsttProvider.HasCapability(Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviderCapabilities)">
            <summary>
            Whether the capability is supported by this provider.
            </summary>
            <param name="capability">Capability type.</param>
            <returns>A value indicating whether the capability is available.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.VsttProvider.#ctor">
            <summary>
            Create a new Visual Studio Team Test unit test framework provider 
            instance.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.VsttProvider._assemblyCache">
            <summary>
            Cache of assemblies and assembly unit test interface objects.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.VsttProvider.GetUnitTestAssembly(Microsoft.Silverlight.Testing.Harness.UnitTestHarness,System.Reflection.Assembly)">
            <summary>
            VSTT unit test provider constructor; takes an assembly reference to 
            perform reflection on to retrieve all test class types. In this 
            implementation of an engine for the VSTT metadata, only a single 
            test Assembly can be utilized at a time for simplicity.
            </summary>
            <param name="testHarness">The unit test harness.</param>
            <param name="assemblyReference">Assembly reflection object.</param>
            <returns>Returns the assembly metadata interface.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.VsttProvider.IsFailedAssert(System.Exception)">
            <summary>
            Check if the Exception is actually a failed assertion.
            </summary>
            <param name="exception">Exception object to check.</param>
            <returns>True if the exception is actually an assert failure.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.VsttProvider.Name">
            <summary>
            Gets the name of the provider.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.VisualStudio.VsttProvider.Capabilities">
            <summary>
            Gets the specialized capability descriptor.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTestSettings">
            <summary>
            Settings for the unit test system.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTestSettings.TagExpressionKey">
            <summary>
            The tag expression key name.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTestSettings.DefaultSortTestMethods">
            <summary>
            By default test methods are sorted.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTestSettings.DefaultSortTestClasses">
            <summary>
            By default test classes are sorted.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTestSettings.#ctor">
            <summary>
            Settings for the unit test system.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSettings.Parameters">
            <summary>
            Gets the parameters from the response file.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSettings.Components">
            <summary>
            Gets the components initialized by the entry-point assembly. These
            are the dynamically loaded objects that may be needed by the
            TestHarness.
            </summary>
            <value>The components.</value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSettings.LogProviders">
            <summary>
            Gets the log providers.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSettings.SampleTags">
            <summary>
            Gets or sets a set of sample tags for use in a tag editor screen.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSettings.TestAssemblies">
            <summary>
            Gets the list of test assemblies.
            </summary>
            <value>The test assembly.</value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSettings.TestService">
            <summary>
            Gets or sets the test service provider.  The test service lights up 
            advanced out-of-process communication, reporting, logging, and 
            other valuable services.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSettings.TestHarness">
            <summary>
            Gets or sets the test harness.
            </summary>
            <value>The test harness.</value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSettings.TestServiceHostname">
            <summary>
            Gets or sets the test service hostname to try using. Defaults to
            localhost.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSettings.TestServicePort">
            <summary>
            Gets or sets the test service port to try using. Defaults to 8000.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSettings.TestServicePath">
            <summary>
            Gets or sets the test service path to try using. Defaults to
            /externalInterface/.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSettings.StartRunImmediately">
            <summary>
            Gets or sets a value indicating whether to start the run
            immediately when the test system is run. Defaults to false to enable
            the test service to load and information to be provided in the
            user interface.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSettings.TestPanelType">
            <summary>
            Gets or sets the type of the TestPanel to create. The type must
            derive from Microsoft.Silverlight.Testing.ITestPanel.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSettings.SortTestMethods">
            <summary>
            Gets or sets a value indicating whether test methods are sorted 
            alphabetically. By default this value is true.
            </summary>
            <remarks>
            It is worth understanding that the order of unit test 
            execution should not affect the results of a test run.  Any expected
            ordering and verification from multiple test methods should be 
            refactored into a single unit test.
            </remarks>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSettings.SortTestClasses">
            <summary>
            Gets or sets a value indicating whether test classes are sorted 
            alphabetically. This setting is True by default.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSettings.ShowTagExpressionEditor">
            <summary>
            Gets or sets a value indicating whether to show the tag expression
            editor user interface before starting the test run.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSettings.TagExpression">
            <summary>
            Gets or sets the tag expression used for selecting tests to run. 
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTestSettings.TestClassesToRun">
            <summary>
            Gets a list of test classes to run. Enables filtering.
            </summary>
            <remarks>This property should be considered obsolete.</remarks>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestPanelManager">
            <summary>
            A manager for the underlying TestSurface Panel.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestPanelManager.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestPanelManager._testPage">
            <summary>
            The test page object.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestPanelManager._dirty">
            <summary>
            A value indicating whether the panel is dirty.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestPanelManager.ClearUsedChildren">
            <summary>
            Remove the children from the test surface, if it has 
            been used.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestPanelManager.ClearChildren">
            <summary>
            Remove the children from the test surface.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestPanelManager.TestPage">
            <summary>
            Gets or sets the Reference to the TestPage user control.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestPanelManager.TestPanel">
            <summary>
            Gets the TestSurface Panel, and tracks the use for the 
            current test method.  When the test completes, the panel children 
            will be cleared automatically.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.ScenarioResult">
            <summary>
            A result from a test scenario.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ScenarioResult.#ctor(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod,Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass,Microsoft.Silverlight.Testing.Harness.TestOutcome,System.Exception)">
            <summary>
            Creates a result record.
            </summary>
            <param name="method">Test method metadata object.</param>
            <param name="testClass">Test class metadata object.</param>
            <param name="result">Test result object.</param>
            <param name="exception">Exception instance, if any.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ScenarioResult.ToString">
            <summary>
            The string representation of the ScenarioResult.
            </summary>
            <returns>Returns a verbose string representation of the result.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.ScenarioResult.Started">
            <summary>
            Gets or sets the scenario's started time.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.ScenarioResult.Finished">
            <summary>
            Gets or sets the scenario's finishing time.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.ScenarioResult.TestMethod">
            <summary>
            Gets the test method metadata.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.ScenarioResult.TestClass">
            <summary>
            Gets the test class metadata.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.ScenarioResult.Result">
            <summary>
            Gets or sets the Result object.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.ScenarioResult.Exception">
            <summary>
            Gets the Exception instance, if any.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.AssemblyManager">
            <summary>
            Container and manager type which handles an entire test assembly; contains sub work 
            items that represent all actions needed to execute its tests.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.UnitTestCompositeWorkItem">
            <summary>
            A container that stores instances of the unit test harness and provider.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem">
            <summary>
            TestWorkItem which can contain sub-tasks; the underlying work item is 
            not marked complete until the Children have completed or an Exception 
            is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem._children">
            <summary>
            Store the underlying tasks.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem._finishWhenEmpty">
            <summary>
            Whether the TestTaskContainer::IsComplete should be set to true 
            after all children have been de-queued.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem._invoked">
            <summary>
            Whether the first invoke has happened yet or not.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.#ctor">
            <summary>
            Constructor for the TestTaskContainer type.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.FirstInvoke">
            <summary>
            Optional method to call on the first invoke.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.Invoke">
            <summary>
            Invoke the test container; in turn will execute child work items 
            as needed. Supports executing multiple items immediately for
            performance reasons.
            </summary>
            <returns>True if additional work remains, False once IsComplete 
            is set to true.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.Invoke(Microsoft.Silverlight.Testing.WorkItem@)">
            <summary>
            Invoke the test container; in turn will execute child work items 
            as needed.
            </summary>
            <param name="usedWorkItem">The work item used for the invoke.</param>
            <returns>True if additional work remains, False once IsComplete 
            is set to true.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.ClearChildren">
            <summary>
            Clear the children.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.Dequeue">
            <summary>
            Dequeue a work item.
            </summary>
            <returns>A work item.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.Enqueue(Microsoft.Silverlight.Testing.WorkItem)">
            <summary>
            Add a new work item to the container to schedule it for invocation.
            </summary>
            <param name="item">New test work item to enqueue.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.EnqueueQuick(Microsoft.Silverlight.Testing.WorkItem)">
            <summary>
            Adds a new work item that will execute more quickly.
            </summary>
            <param name="item">The item of work.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.EnqueueQuick(System.Action)">
            <summary>
            Enqueues a callback or action that will quickly execute.
            </summary>
            <param name="action">The action or method.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.Enqueue(System.Action)">
            <summary>
            Add a new callback action and schedule it for invocation.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.Peek">
            <summary>
            Return the top work item, if any, from this container.
            </summary>
            <returns>Peek into any test work item.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.WorkItemComplete">
            <summary>
            Work items must call this method to indicate completion of the work 
            item; in turn fires the Complete event delegates.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.WorkItemCompleteInternal">
            <summary>
            Internal-only version which can be called during a test completion 
            through the relation - not necessarily the best design; events 
            may make more sense long-term.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.WorkItemException(System.Exception)">
            <summary>
            Call when an exception occurs inside a work item.
            </summary>
            <param name="e">Exception object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.OnComplete(System.EventArgs)">
            <summary>
            Fire the Complete event.
            </summary>
            <param name="e">Empty event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.OnUnhandledException(System.Exception)">
            <summary>
            Fire the unhandled exception event.
            </summary>
            <param name="exception">Exception object.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.FinishWhenEmpty">
            <summary>
            Gets a value indicating whether the container is marked Complete 
            when all children have executed or not.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.RemainingWork">
            <summary>
            Gets a value indicating whether sub tasks remain.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.Complete">
            <summary>
            Complete event is fired when the underlying WorkItemComplete method 
            is called by the work item.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.UnhandledException">
            <summary>
            Event fired when an exception is thrown and unhandled within the 
            underlying Invoke sequence.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.CompositeWorkItem.CanExecuteImmediately">
            <summary>
            Gets or sets a value indicating whether the task can execute
            immediately.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestCompositeWorkItem._provider">
            <summary>
            The unit test provider.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestCompositeWorkItem.#ctor(Microsoft.Silverlight.Testing.Harness.UnitTestHarness,Microsoft.Silverlight.Testing.UnitTesting.Metadata.IUnitTestProvider)">
            <summary>
            Initializes a new unit test work item container.
            </summary>
            <param name="testHarness">The unit test harness.</param>
            <param name="unitTestProvider">The unit test metadata provider.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestCompositeWorkItem.LogMessage(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Logs a new message.
            </summary>
            <param name="message">Message object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestCompositeWorkItem.LogMessage(System.String)">
            <summary>
            Logs a message about the harness.
            </summary>
            <param name="harnessInformation">Information about the harness.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestCompositeWorkItem.LogWriter">
            <summary>
            Gets the log message writer for the unit test system.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestCompositeWorkItem.TestHarness">
            <summary>
            Gets the test harness instance.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.UnitTestCompositeWorkItem.Provider">
            <summary>
            Gets the unit test provider instance.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.AssemblyManager._filter">
            <summary>
            The test run filter object.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.AssemblyManager._assembly">
            <summary>
            Unit test provider-agnostic assembly metadata.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.AssemblyManager._testClasses">
            <summary>
            Container of work items for running test classes.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.AssemblyManager.#ctor(Microsoft.Silverlight.Testing.Harness.TestRunFilter,Microsoft.Silverlight.Testing.Harness.UnitTestHarness,Microsoft.Silverlight.Testing.UnitTesting.Metadata.IUnitTestProvider,Microsoft.Silverlight.Testing.UnitTesting.Metadata.IAssembly)">
            <summary>
            Create a new assembly manager, takes in the harness, provider 
            reference and actual IAssembly object.
            </summary>
            <param name="runFilter">The test run filter object.</param>
            <param name="testHarness">Harness object.</param>
            <param name="provider">The unit test metadata provider.</param>
            <param name="testAssembly">The test assembly metadata object.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.AssemblyManager.FirstInvoke">
            <summary>
            When the test run is ready to test the underlying test assembly that
            this class manages, perform reflection and enqueue work items to run
            the tests.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.AssemblyManager.EnqueueAssemblyInitialize">
            <summary>
            The assembly initialize method.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.AssemblyManager.EnqueueAssemblyCleanup">
            <summary>
            The assembly cleanup method.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.AssemblyManager.EnqueueTestClasses">
            <summary>
            Reflect over all test classes in the assembly and add any which are not 
            filtered out into the test work item queue.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.AssemblyManager.EnqueueMethodDispatcher(System.Reflection.MethodInfo)">
            <summary>
            Helper to enqueue a new method dispatcher.
            </summary>
            <param name="method">The method reflection object.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.AssemblyManager.ClassInstances">
            <summary>
            Gets the collection of all the instances of the assembly's test
            classes, used to keep a single reference of the type.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.MethodContainer">
            <summary>
            A method container.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.MethodContainer._timeout">
            <summary>
            The timeout time.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.MethodContainer._method">
            <summary>
            The test method metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.MethodContainer.#ctor">
            <summary>
            Constructs a new method container.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.MethodContainer.#ctor(System.Object,System.Reflection.MethodInfo,Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod)">
            <summary>
            Constructs a new method container.
            </summary>
            <param name="instance">An instance of the method's type.</param>
            <param name="method">The method reflection object.</param>
            <param name="testMethod">The test method.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.MethodContainer._methodTask">
            <summary>
            The task that involves the method, and contains its own internal 
            test queue, if needed for asynchronous tasks.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.MethodContainer._methodInfo">
            <summary>
            The reflection object for the method.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.MethodContainer.Invoke">
            <summary>
            Invoke into the method.
            </summary>
            <returns>Returns the condition of any remaining work.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.MethodContainer.FirstInvoke">
            <summary>
            On the first invoke, make sure there's a task to call the method.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.MethodContainer.MethodInfo">
            <summary>
            Gets the method's reflection object.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestClassInstanceDictionary">
            <summary>
            A dictionary that manages single instances of types for use across the 
            unit test system.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestClassInstanceDictionary.GetInstance(System.Type)">
            <summary>
            Returns the instance for a Type; if there is not an instance yet, 
            this will use Activator.CreateInstance to create it.
            </summary>
            <param name="type">The Type instance to retrieve.</param>
            <returns>Returns an instance of the Type.  Returns a new instance 
            if the Type has not yet been used.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestClassInstanceDictionary.ClearInstance(System.Type)">
            <summary>
            Remove any instance for the type.
            </summary>
            <param name="type">The Type of instance to remove.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestClassManager">
            <summary>
            Test class manager.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestClassManager._filter">
            <summary>
            Test run filter object.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestClassManager._testClass">
            <summary>
            Reference to the class and its metadata.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestClassManager._testExecutionQueue">
            <summary>
            Queue of any tests to run.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestClassManager._instance">
            <summary>
            Class instance.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestClassManager.#ctor(Microsoft.Silverlight.Testing.Harness.TestRunFilter,Microsoft.Silverlight.Testing.Harness.UnitTestHarness,Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass,System.Object,Microsoft.Silverlight.Testing.UnitTesting.Metadata.IUnitTestProvider)">
            <summary>
            A container type that handles an entire test class throughout the 
            test run.
            </summary>
            <param name="filter">Test run filter object.</param>
            <param name="testHarness">The unit test harness.</param>
            <param name="testClass">The test class metadata interface.</param>
            <param name="instance">The object instance.</param>
            <param name="provider">The unit test provider.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestClassManager.FirstInvoke">
            <summary>
            Code run the first time this container is invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestClassManager.PrepareInstance">
            <summary>
            Custom tests need to be prepared before use.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestClassManager.EnqueueTestClassInitialize">
            <summary>
            The test initialize method.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestClassManager.EnqueueTestClassCleanup">
            <summary>
            The test cleanup method.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestClassManager.PopulateTestMethods">
            <summary>
            Reflect through the class to find any test methods, and add them to 
            the list of queued methods.  Also, sorts the methods if appropriate 
            based on the settings file.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestClassManager.EnqueueMethodDispatcher(System.Reflection.MethodInfo)">
            <summary>
            Add a new method dispatcher to the test work item queue.  This is a 
            work item container which is able to manage its own internal test 
            work item queue.
            </summary>
            <param name="method">The method reflection object.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.WorkItemsManager">
            <summary>
            A special type dedicated to keeping a running stack of the dispatch 
            managers that are actually enabled for "work item" use.  The current 
            dispatcher is used by the test work item queue.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.WorkItemsManager._stack">
            <summary>
            Dispatcher stack; a stack of work item containers.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.WorkItemsManager.#ctor">
            <summary>
            Creates a new empty stack for work item containers.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.WorkItemsManager.Push(Microsoft.Silverlight.Testing.Harness.CompositeWorkItem)">
            <summary>
            Push a new dispatcher onto the stack.
            </summary>
            <param name="composite">The composite work item to push.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.WorkItemsManager.Pop">
            <summary>
            Pop a dispatcher off the stack.
            </summary>
            <returns>Returns the top-most container.  Throws an 
            InvalidOperationException if none is available.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.WorkItemsManager.CurrentCompositeWorkItem">
            <summary>
            Gets the current test work item dispatcher, which is the dispatcher 
            on the top of the stack.  Returns null if there is none.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestMethodManager">
            <summary>
            Manager for planning, processing, and reporting the result of a single 
            test method for a unit test provider.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestMethodManager._testClass">
            <summary>
            Underlying test class object.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestMethodManager._testMethod">
            <summary>
            Underlying test method object.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestMethodManager._instance">
            <summary>
            Reference to an instance of the test class.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestMethodManager._result">
            <summary>
            Scenario result of the test method.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestMethodManager._started">
            <summary>
            The started time of execution.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestMethodManager._output">
            <summary>
            Stores a collection of written lines.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestMethodManager._bugAttributePresent">
            <summary>
            A value indicating whether the bug attribute was present on this 
            method.  If it is, the result will be inverted at completion.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestMethodManager._mainTestMethodContainer">
            <summary>
            Contains the main test contents.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestMethodManager.#ctor(Microsoft.Silverlight.Testing.Harness.UnitTestHarness,Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestClass,Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod,System.Object,Microsoft.Silverlight.Testing.UnitTesting.Metadata.IUnitTestProvider)">
            <summary>
            Constructor for a test method manager, which handles executing a single test method 
            for a unit test provider.
            </summary>
            <param name="testHarness">The unit test harness object.</param>
            <param name="testClass">The test class metadata object.</param>
            <param name="testMethod">The test method metadata object.</param>
            <param name="instance">The test class instance.</param>
            <param name="provider">The unit test provider.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestMethodManager.LogStartMessage">
            <summary>
            Log a start message.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestMethodManager.LogEndMessage">
            <summary>
            Log an end message.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestMethodManager.OnWriteLine(Microsoft.Silverlight.Testing.UnitTesting.Metadata.StringEventArgs)">
            <summary>
            Handles the write line event for the test method.
            </summary>
            <param name="e">The string event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestMethodManager.FirstInvoke">
            <summary>
            First invoke, plan for the method's execution.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestMethodManager.SetResultTimes">
            <summary>
            Sets the start and finish times on the ScenarioResult object.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestMethodManager.CreateNewResult(Microsoft.Silverlight.Testing.Harness.TestOutcome)">
            <summary>
            Creates the ScenarioResult instance for this test method.
            </summary>
            <param name="outcome">The initial test outcome value.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestMethodManager.CompleteMethod(System.Object,System.EventArgs)">
            <summary>
            Process the result.
            </summary>
            <param name="sender">Source object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestMethodManager.UnhandledMethodException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Process an unhandled exception for the method.
            </summary>
            <param name="sender">Source object.</param>
            <param name="e">Unhandled exception event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestMethodManager.EnqueueMethodDispatcher(System.Reflection.MethodInfo)">
            <summary>
            Create a new method container to enclose a reflected method for execution.
            </summary>
            <param name="method">The method reflection object.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestMethodManager.BugAttributeProcessed">
            <summary>
            Gets or sets a value indicating whether the bug attribute's logic
            has already been processed.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestMethodManager.WriteLineOutput">
            <summary>
            Gets the write line output list.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.UnitTestMethodContainer">
            <summary>
            A container which is able to attach to the underlying test dispatcher 
            stack to enable advanced asynchronous functionality, when supported.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestMethodContainer._harness">
            <summary>
            The unit test harness.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestMethodContainer._granularity">
            <summary>
            The granularity of the contained item.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.UnitTestMethodContainer._testMethod">
            <summary>
            The test method metadata object.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestMethodContainer.#ctor(Microsoft.Silverlight.Testing.Harness.UnitTestHarness,System.Object,System.Reflection.MethodInfo,Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod,Microsoft.Silverlight.Testing.Harness.TestGranularity)">
            <summary>
            Initializes dispatcher-stack attaching method container work item.
            </summary>
            <param name="testHarness">Test harness.</param>
            <param name="instance">Test instance.</param>
            <param name="method">Method reflection object.</param>
            <param name="testMethod">Test method metadata.</param>
            <param name="granularity">Granularity of test.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestMethodContainer.FirstInvoke">
            <summary>
            Connect to dispatcher stack for advanced functions, if supported.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.UnitTestMethodContainer.SupportsWorkItemQueue">
            <summary>
            Check a MethodInfo for the advanced async attribute.
            </summary>
            <returns>True if the work item queue is supported.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.CallbackWorkItem">
            <summary>
            A work item for tests to use which will call the delegate when the work 
            item is executed.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.CallbackWorkItem._action">
            <summary>
            Stored void delegate.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.CallbackWorkItem.#ctor(System.Action)">
            <summary>
            Create a new Callback work item.
            </summary>
            <param name="callback">Action to execute on Invoke.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.CallbackWorkItem.Invoke">
            <summary>
            Execute the callback.
            </summary>
            <returns>Whether the work item is complete.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.ConditionalWorkItem">
            <summary>
            A test work item that is complete once the condition is asserted.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.ConditionalWorkItem._delegate">
            <summary>
            The conditional delegate.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ConditionalWorkItem.#ctor(System.Func{System.Boolean})">
            <summary>
            Construct a new conditional work item.
            </summary>
            <param name="conditionalMethod">Conditional delegate.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ConditionalWorkItem.Invoke">
            <summary>
            Invoke the condition, will continue invoking until 
            the condition is false.
            </summary>
            <returns>Completes the invocation once the condition is true.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.MethodInvokeWorkItem">
            <summary>
            A simple work item that invokes a method through the reflection 
            MethodInfo instance.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.MethodInvokeWorkItem.None">
            <summary>
            An empty object array.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.MethodInvokeWorkItem._instance">
            <summary>
            An object instance.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.MethodInvokeWorkItem._method">
            <summary>
            Method reflection object.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.MethodInvokeWorkItem._testMethod">
            <summary>
            The test method to invoke.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.MethodInvokeWorkItem.#ctor(System.Object,System.Reflection.MethodInfo,Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod)">
            <summary>
            Creates a new method invoke work item for a MethodInfo instance.
            </summary>
            <param name="instance">The type instance.</param>
            <param name="method">The method on the type to invoke when the 
            work item is executed.</param>
            <param name="testMethod">The test method metadata.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.MethodInvokeWorkItem.Invoke">
            <summary>
            Invokes the underlying method on the instance and marks the 
            test work item as complete.
            </summary>
            <returns>False, noting the completion of the work item.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviders">
            <summary>
            Unit test providers.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviders._providers">
            <summary>
            List of unit test providers.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviders.#cctor">
            <summary>
            Static constructor that initializes the built-in unit test metadata providers.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviders.GetAssemblyProvider(Microsoft.Silverlight.Testing.Harness.UnitTestHarness,System.Reflection.Assembly)">
            <summary>
            Gets the unit test provider for an assembly.  The framework only 
            currently supports a single provider per test assembly, so if more 
            than one registered provider can handle the assembly, at runtime an 
            InvalidOperationException is thrown.
            </summary>
            <param name="harness">The test harness making the request.</param>
            <param name="testAssembly">Assembly reflection object.</param>
            <returns>The unit test provider for the test assembly.  Throws if 
            more than one can process the assembly.  Returns null if there is 
            not a provider for the assembly.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviders.GetAssemblyWrapper(Microsoft.Silverlight.Testing.Harness.UnitTestHarness,System.Reflection.Assembly)">
            <summary>
            Returns the IAssembly provider for an assembly.
            </summary>
            <param name="harness">Test harness object.</param>
            <param name="testAssembly">Assembly reflection object.</param>
            <returns>Returns null or an IAssembly instance.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.UnitTesting.Metadata.UnitTestProviders.Providers">
            <summary>
            Gets the list of Unit Test providers.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.DecoratorDictionary">
            <summary>
            A dictionary that can store just about any kind of object, keyed off any
            object.  As a Hashtable, it permits using keys of 
            - enums
            - objects
            - types
            
            This makes it ideal for use in decorating and adorning special types in
            the system, such as log messages.
            
            A strongly-typed decorator key could come from an enum value, while a
            prototype extension to the test system could simply use a string key for
            organizing.  
            
            In all instances, the resulting object needs to be cast appropriately.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.DecoratorDictionary.HasDecorator(System.Object)">
            <summary>
            Check if a decorator exists.
            </summary>
            <param name="decoratorKey">The decorator key object.</param>
            <returns>
            Returns a value indicating whether the decorator key exists.  Even
            if the key exists, the instance value for the key could be set to
            null, yielding a null instance.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.DecoratorDictionary.HasDecorators(System.Object[])">
            <summary>
            Check if a set of decorators exists.
            </summary>
            <param name="decorators">The set of decorator(s) of interest.</param>
            <returns>
            Returns a value indicating whether the decorators of interest were
            present.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.DecoratorDictionary.GetDecorator(System.Object)">
            <summary>
            Retrieves the decorator instance if it exists.  If not, this method
            returns null.
            </summary>
            <param name="decoratorKey">The decorator key object.</param>
            <returns>
            Returns the instance or null if it does not exist.  No exceptions
            are thrown in this method.
            </returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.ResourceUtility">
            <summary>
            Helper functionality for dealing with embedded resources in an assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ResourceUtility.GetAllText(System.Object,System.String)">
            <summary>
            Get a string containing the text of an embedded resource in an
            assembly.
            </summary>
            <param name="instance">
            An instance whose assembly can be retrieved through reflection.
            </param>
            <param name="fullEmbeddedResourceName">
            Complete embedded resource name.
            </param>
            <returns>
            A string containing the embedded resource's string contents.
            </returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.LogMessageFactory">
            <summary>
            A simple factory used for creating new log messages.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageFactory.Create">
            <summary>
            Create a new LogMessage instance.
            </summary>
            <returns>Returns a new LogMessage instance.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessageFactory.Create(Microsoft.Silverlight.Testing.Harness.LogMessageType)">
            <summary>
            Create a new LogMessage instance.
            </summary>
            <param name="messageType">The type of message to create.</param>
            <returns>Returns a new LogMessage instance.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.LogMessageFactory.DefaultLogMessageType">
            <summary>
            Gets or sets the default log message type used for the creation of
            unspecific log message types.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.LogDecorator">
            <summary>
            Well-known keys that can be used to mark decorator instances in log 
            message objects.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogDecorator.ExceptionObject">
            <summary>
            Key for a decorator that is a simple Exception object.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogDecorator.NameProperty">
            <summary>
            Key for a decorator that is a simple Name string property.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogDecorator.TestOutcome">
            <summary>
            An associated TestOutcome value.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogDecorator.TestStage">
            <summary>
            The stage of a message or event.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogDecorator.TestGranularity">
            <summary>
            The granularity of a message or event.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestOutcome">
            <summary>
            A number of possible test outcomes or results.  For compatibility, this 
            information resembles that of the desktop test framework, although many 
            of the states may not apply or be valid for an in-browser test harness.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestOutcome.Error">
            <summary>
            A test outcome of Error.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestOutcome.Failed">
            <summary>
            A test outcome of Failed.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestOutcome.Timeout">
            <summary>
            A test outcome of Timeout.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestOutcome.Aborted">
            <summary>
            A test outcome of Aborted.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestOutcome.Inconclusive">
            <summary>
            A test outcome of Inconclusive.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestOutcome.PassedButRunAborted">
            <summary>
            A test outcome of a run that was aborted, but passed.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestOutcome.NotRunnable">
            <summary>
            A test outcome of NotRunnable.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestOutcome.NotExecuted">
            <summary>
            A test outcome of NotExecuted.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestOutcome.Disconnected">
            <summary>
            A test outcome of Disconnected.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestOutcome.Warning">
            <summary>
            A test outcome of Warning.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestOutcome.Passed">
            <summary>
            A test outcome of Passed.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestOutcome.Completed">
            <summary>
            A test outcome of Completed.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestOutcome.InProgress">
            <summary>
            A test outcome of InProgress.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestOutcome.Pending">
            <summary>
            A test outcome of Pending.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestStage">
            <summary>
            The stage of a test scenario, case or system running.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestStage.Starting">
            <summary>
            In the process of starting.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestStage.Running">
            <summary>
            Currently running.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestStage.Finishing">
            <summary>
            Finishing up.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestStage.Canceling">
            <summary>
            The test is canceling.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.GlobalExceptionHandler">
            <summary>
            Provides a property that will attach and detach a known event handler
            delegate when the bit is flipped.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.GlobalExceptionHandler._eventHandler">
            <summary>
            The event to fire when attached.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.GlobalExceptionHandler._attached">
            <summary>
            Whether the event handler is attached as a global unhandled
            exception handler.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.GlobalExceptionHandler.#ctor(System.EventHandler)">
            <summary>
            Creates a new exception handler "manager" with the provided
            EventHandler.
            </summary>
            <param name="eventHandler">The event handler to manage.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.GlobalExceptionHandler.ChangeExceptionBubbling(System.EventArgs,System.Boolean)">
            <summary>
            Mark the Handled property in the event args as True to stop any 
            event bubbling.
            </summary>
            <param name="e">Event arguments.</param>
            <param name="exceptionHandled">
            Value indicating whether the Exception should be marked as handled.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.GlobalExceptionHandler.GetExceptionObject(System.EventArgs)">
            <summary>
            Return the Exception property from the EventArgs.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            Returns the Exception object that the event arguments stores.
            </returns>
            <remarks>
            This method is compatible with the full desktop framework as well as
            Silverlight.
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.GlobalExceptionHandler.OnGlobalException(System.Object,System.Windows.ApplicationUnhandledExceptionEventArgs)">
            <summary>
            Internal event that is hooked up to the global exception handler.
            </summary>
            <param name="sender">Source object of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.GlobalExceptionHandler.UpdateAttachment">
            <summary>
            Called after a change to the attachment field value.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.GlobalExceptionHandler.AttachHandler">
            <summary>
            Attach the handler globally.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.GlobalExceptionHandler.DetachHandler">
            <summary>
            Detach the handler globally.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.GlobalExceptionHandler.AttachGlobalHandler">
            <summary>
            Gets or sets a value indicating whether the handler is currently 
            attached to the global exception handler.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.LogMessage">
            <summary>
            A log message.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogMessage.DefaultLogMessageType">
            <summary>
            The default log message used during initialization.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessage.#ctor">
            <summary>
            Initializes a new log message of the default message type.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessage.#ctor(Microsoft.Silverlight.Testing.Harness.LogMessageType)">
            <summary>
            Initializes a new log message.
            </summary>
            <param name="messageType">The message type.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessage.ToString">
            <summary>
            Converts to string representation.
            </summary>
            <returns>A string version of the LogMessage.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessage.HasDecorator(System.Object)">
            <summary>
            Check if a decorator is present on the LogMessage.
            </summary>
            <param name="decorator">The decorator of interest.</param>
            <returns>
            Returns a value indicating whether the decorator is present in the
            DecoratorDictionary.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.LogMessage.HasDecorators(System.Object[])">
            <summary>
            Check if a set of decorators are present.
            </summary>
            <param name="decorators">The decorator(s) of interest.</param>
            <returns>
            Returns a value indicating whether the decorator(s) of interest are
            present.
            </returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.LogMessage.Decorators">
            <summary>
            Gets the set of decorator instances attached to the log message.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.LogMessage.MessageType">
            <summary>
            Gets or sets the type of message.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.LogMessage.Message">
            <summary>
            Gets or sets the log's message.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.LogMessage.Item(System.Object)">
            <summary>
            Gets or sets the decorator type for the message.
            </summary>
            <param name="decorator">
            The type of decorator.  Only one explicit Type is permitted,
            although multiple types within the same type hierarchy are
            legitimate.
            </param>
            <returns>Returns the instance of the decorator, if any.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestGranularity">
            <summary>
            The hierarchy of test execution represented in more generic terms, this
            allows for more robust and useful actions by log providers.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestGranularity.Harness">
            <summary>
            Harness-level granularity.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestGranularity.TestGroup">
            <summary>
            Group of test-level granularity.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestGranularity.Test">
            <summary>
            Test-level granularity.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.TestGranularity.TestScenario">
            <summary>
            Scenario-level granularity.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.DebugOutputProvider">
            <summary>
            The most verbose log provider, this calls .ToString() on each and every 
            LogMessage that it processes.  The output will appear in an attached 
            debugger's "Output" window.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.DebugOutputProvider.#ctor">
            <summary>
            Initializes a new instance of the DebugOutputProvider class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.DebugOutputProvider.Process(Microsoft.Silverlight.Testing.Harness.LogMessage)">
            <summary>
            Display a LogMessage in the debug output window.
            </summary>
            <param name="logMessage">Message object.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.DebugOutputProvider.ShowAllFailures">
            <summary>
            Gets or sets a value indicating whether any TestResult failures will 
            be reported, regardless of whether the TestResult type is being 
            monitored for debug output.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.DebugOutputProvider.ShowEverything">
            <summary>
            Gets or sets a value indicating whether all messages appear in the 
            debug output.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.LogMessageType">
            <summary>
            Set of defined types of log messages to allow for some level of 
            filtering and selective processing of log messages.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogMessageType.TestResult">
            <summary>
            Pass, fail, etc.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogMessageType.Debug">
            <summary>
            Debug::WriteLine or tracing.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogMessageType.Warning">
            <summary>
            Non-fatal log message.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogMessageType.Error">
            <summary>
            Fatal error message.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogMessageType.KnownIssue">
            <summary>
            Information about a known defect.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogMessageType.Information">
            <summary>
            General information similar to a Console::WriteLine.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogMessageType.Environment">
            <summary>
            Operating system setting or platform values.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogMessageType.TestExecution">
            <summary>
            New unit of test or test run note.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.LogMessageType.TestInfrastructure">
            <summary>
            Related test systems or out-of-process communication information.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestHarnessCompletedEventArgs">
            <summary>
            Event information marking the completion of a test run.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestHarnessCompletedEventArgs.#ctor(Microsoft.Silverlight.Testing.Harness.TestHarnessState)">
            <summary>
            Creates a new TestHarnessCompletedEventArgs.
            </summary>
            <param name="testHarnessState">The final test harness state.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestHarnessCompletedEventArgs.State">
            <summary>
            Gets the final test harness state.
            
            This contains the final pass versus fail result at a minimum.
            Specific harnesses may extend the type to contain additional
            information, logs, scenario counts, or anything else.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.WebBrowserTick">
            <summary>
            A type which handles preparing the underlying dispatcher or timer from 
            which the test work items execute.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.WebBrowserTick.DefaultTickInterval">
            <summary>
            Millisecond interval to use for the interval between DispatcherTimer
            ticks.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Harness.WebBrowserTick._timer">
            <summary>
            Dispatcher timer.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.WebBrowserTick.#ctor(System.Func{System.Boolean})">
            <summary>
            Creates a new run method manager using the default value for the 
            timer's millisecond interval.
            </summary>
            <param name="runNextStep">
            Conditional delegate which returns true as long as there is 
            additional work.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.WebBrowserTick.#ctor(System.Func{System.Boolean},System.Int32)">
            <summary>
            Sets up a new run method manager.
            </summary>
            <param name="runNextStep">
            Conditional delegate which returns true as long as there is 
            additional work.
            </param>
            <param name="millisecondInterval">Milliseconds between ticks, at a 
            minimum.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.WebBrowserTick.Run">
            <summary>
            Begin the execution process by hooking up the underlying 
            DispatcherTimer to call into the test framework regularly and 
            perform test work items.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.WebBrowserTick.Timer_Tick(System.Object,System.EventArgs)">
            <summary>
            Call into the underlying work item queue, if the method manager is 
            still set to run.
            </summary>
            <param name="sender">Sending object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.TestHarnessState">
            <summary>
            Base class representing the overall state of a test run.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestHarnessState.IncrementFailures">
            <summary>
            Increment the failures counter.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.TestHarnessState.IncrementTotalScenarios">
            <summary>
            Increments the total scenarios counter.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestHarnessState.Failures">
            <summary>
            Gets the count of failing scenarios.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestHarnessState.TotalScenarios">
            <summary>
            Gets the total count of scenarios run.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Harness.TestHarnessState.Failed">
            <summary>
            Gets a value indicating whether the status recorded indicates a
            failure.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Harness.ReflectionUtility">
            <summary>
            A set of helper methods for interacting with methods and types that are
            marked with attributes.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ReflectionUtility.GetTypesWithAttribute(System.Reflection.Assembly,System.Type)">
            <summary>
            Retrieve all types in an assembly that are decorated with a specific
            attribute.
            </summary>
            <param name="assembly">Assembly to search.</param>
            <param name="decoratingAttribute">
            Instance of the Type of attribute that marks interesting methods.
            </param>
            <returns>
            A collection of types from the assembly.  An empty collection is
            returned if no types were found matching the constraints.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ReflectionUtility.GetAttributes(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Given a MethodInfo type, returns the attributes (if any) that are of 
            the decoratingAttribute parameter's type.
            </summary>
            <param name="member">MemberInfo instance.</param>
            <param name="decoratingAttribute">Attribute of interest.</param>
            <returns>
            A collection populated with the Attribute instances.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ReflectionUtility.GetAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Given a MethodInfo type, returns the attributes (if any) that are of 
            the decoratingAttribute parameter's type.
            </summary>
            <param name="member">MemberInfo instance.</param>
            <param name="decoratingAttribute">Attribute of interest.</param>
            <param name="inherit">A value indicating whether to look for 
            inheriting custom attributes.</param>
            <returns>
            A collection populated with the Attribute instances.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ReflectionUtility.GetAttributes(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod,System.Type,System.Boolean)">
            <summary>
            Given a test method, returns the attributes (if any) that are of 
            the decoratingAttribute parameter's type.
            </summary>
            <param name="method">ITestMethod instance.</param>
            <param name="decoratingAttribute">Attribute of interest.</param>
            <param name="inherit">Whether to inherit attributes.</param>
            <returns>
            A collection populated with the Attribute instances.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ReflectionUtility.GetAssembliesFromInstances(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Retrieve a list of Reflection.Assembly types from a set of 
            instances and/or types.
            </summary>
            <param name="objects">Set of instances or types.</param>
            <returns>A set of Assembly instances from the instances or types.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ReflectionUtility.GetAssemblies(System.Type[])">
            <summary>
            Returns a list of unique assemblies from a set of types.
            </summary>
            <param name="types">Set of types.</param>
            <returns>
            A list of unique Assembly instances from the input types.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ReflectionUtility.GetAttribute(System.Collections.Generic.ICollection{System.Attribute})">
            <summary>
            Given a list of attributes, retrieves a single Attribute instance.
            Will throw an exception if multiple attributes exist on the method.
            </summary>
            <param name="attributes">List of attributes.</param>
            <returns>
            The attribute instance, or null if it does not exist.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ReflectionUtility.GetAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Given a method and a decorative attribute of interest, retrieves a
            single Attribute instance.  Will throw an exception if multiple
            attributes exist on the method.
            </summary>
            <param name="member">MemberInfo instance.</param>
            <param name="decoratingAttribute">
            Attribute type of interest.
            </param>
            <returns>
            The attribute instance, or null if it does not exist.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ReflectionUtility.GetAttribute(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod,System.Type)">
            <summary>
            Given a test method and a decorative attribute of interest,
            retrieves a single Attribute instance.  Will throw an exception if
            multiple attributes exist on the method.
            </summary>
            <param name="method">ITestMethod instance.</param>
            <param name="decoratingAttribute">
            Attribute type of interest.
            </param>
            <returns>
            The attribute instance, or null if it does not exist.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ReflectionUtility.GetAttribute(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod,System.Type,System.Boolean)">
            <summary>
            Given a test method and a decorative attribute of interest,
            retrieves a single Attribute instance.  Will throw an exception if
            multiple attributes exist on the method.
            </summary>
            <param name="method">ITestMethod instance.</param>
            <param name="decoratingAttribute">
            Attribute type of interest.
            </param>
            <param name="inherit">A value indicating whether to look for custom 
            inherited attributes.</param>
            <returns>
            The attribute instance, or null if it does not exist.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ReflectionUtility.HasAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Returns a value indicating whether a method has the attribute.
            </summary>
            <param name="member">MemberInfo instance.</param>
            <param name="decoratingAttribute">Attribute of interest.</param>
            <returns>
            A value indicating whether the type has the decorating attribute or
            not.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ReflectionUtility.HasAttribute(Microsoft.Silverlight.Testing.UnitTesting.Metadata.ITestMethod,System.Type)">
            <summary>
            Returns a value indicating whether a method has the attribute.
            </summary>
            <param name="method">ITestMethod instance.</param>
            <param name="decoratingAttribute">Attribute of interest.</param>
            <returns>
            A value indicating whether the type has the decorating attribute or
            not.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ReflectionUtility.GetMethodsWithAttribute(System.Type,System.Type)">
            <summary>
            Return a collection of MethodInfo instances given a type to look
            through  and the attribute of interest.
            </summary>
            <param name="type">Type to look through for methods.</param>
            <param name="decoratingAttribute">Attribute of interest.</param>
            <returns>
            A collection of the method reflection objects, if any, with the
            marked attribute present.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Harness.ReflectionUtility.GetOneMethodWithAttribute(System.Type,System.Type)">
            <summary>
            Retrieve a MethodInfo from a single decorated method inside a type,
            if any.  Throws an Exception if there are > 1 methods that are
            decorated with the attribute.
            </summary>
            <param name="type">Type of interest.</param>
            <param name="decoratingAttribute">Attribute of interest.</param>
            <returns>
            MethodInfo reflection object.  Null if none are found.
            </returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.ClipboardHelper">
            <summary>
            Exposes clipboard functionality within Silverlight 3 applications when a
            Silverlight 4 runtime is in use.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.ClipboardHelper.EmptyObjectArray">
            <summary>
            An empty array of object type.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.ClipboardHelper._setText">
            <summary>
            Backing field for set text.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.ClipboardHelper._getText">
            <summary>
            Backing field for get text.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.ClipboardHelper._containsText">
            <summary>
            Backing field for the contains text method.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.ClipboardHelper._clipboardFeatureSupported">
            <summary>
            A value indicating whether the clipboard feature is present. This
            assumes that all 3 methods are present, in their current form for a
            more recent runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.ClipboardHelper.SetText(System.String)">
            <summary>
            Sets Unicode text data to store on the clipboard, for later access 
            with System.Windows.Clipboard.GetText().
            </summary>
            <param name="text">A string that contains the Unicode text data to 
            store on the clipboard.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.ClipboardHelper.GetText">
            <summary>
            Retrieves Unicode text data from the system clipboard, if Unicode 
            text data exists.
            </summary>
            <returns>If Unicode text data is present on the system clipboard, 
            returns a string that contains the Unicode text data. Otherwise, 
            returns an empty string.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.ClipboardHelper.ContainsText">
            <summary>
            Queries the clipboard for the presence of data in the Unicode text 
            format.
            </summary>
            <returns>True if the system clipboard contains Unicode text data; 
            otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.ClipboardHelper.RequireClipboardFeature">
            <summary>
            Prepares to use the System.Windows.Clipboard type and throws an
            exception if the feature cannot be completely located.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.ClipboardHelper.PrepareClipboardInstance">
            <summary>
            Prepares the type and reflects for new Silverlight features.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.ClipboardHelper.IsClipboardFeatureSupported">
            <summary>
            Gets a value indicating whether the clipboard feature is available
            and supported.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.BindingEvaluator`1">
            <summary>
            A framework element that permits a binding to be evaluated in a new data
            context leaf node.
            </summary>
            <typeparam name="T">The type of dynamic binding to return.</typeparam>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.BindingEvaluator`1._binding">
            <summary>
            Gets or sets the string value binding used by the control.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.BindingEvaluator`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.BindingEvaluator`1.#ctor">
            <summary>
            Initializes a new instance of the BindingEvaluator class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.BindingEvaluator`1.#ctor(System.Windows.Data.Binding)">
            <summary>
            Initializes a new instance of the BindingEvaluator class,
            setting the initial binding to the provided parameter.
            </summary>
            <param name="binding">The initial string value binding.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.BindingEvaluator`1.ClearDataContext">
            <summary>
            Clears the data context so that the control does not keep a
            reference to the last-looked up item.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.BindingEvaluator`1.GetDynamicValue(System.Object,System.Boolean)">
            <summary>
            Updates the data context of the framework element and returns the 
            updated binding value.
            </summary>
            <param name="o">The object to use as the data context.</param>
            <param name="clearDataContext">If set to true, this parameter will
            clear the data context immediately after retrieving the value.</param>
            <returns>Returns the evaluated T value of the bound dependency
            property.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.BindingEvaluator`1.GetDynamicValue(System.Object)">
            <summary>
            Updates the data context of the framework element and returns the 
            updated binding value.
            </summary>
            <param name="o">The object to use as the data context.</param>
            <returns>Returns the evaluated T value of the bound dependency
            property.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.BindingEvaluator`1.Value">
            <summary>
            Gets or sets the data item string value.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.BindingEvaluator`1.ValueBinding">
            <summary>
            Gets or sets the value binding.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.Dock">
            <summary>
            Specifies values that control the behavior of a control positioned
            inside another control.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.Dock.Left">
            <summary>
            Specifies that the control should be positioned on the left of the
            control.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.Dock.Top">
            <summary>
            Specifies that the control should be positioned on top of the
            control.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.Dock.Right">
            <summary>
            Specifies that the control should be positioned on the right of the
            control.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.Dock.Bottom">
            <summary>
            Specifies that the control should be positioned at the bottom of 
            control.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.InteractionHelper">
            <summary>
            The InteractionHelper provides controls with support for all of the
            common interactions like mouse movement, mouse clicks, key presses,
            etc., and also incorporates proper event semantics when the control is
            disabled.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.InteractionHelper.SequentialClickThresholdInMilliseconds">
            <summary>
            The threshold used to determine whether two clicks are temporally
            local and considered a double click (or triple, quadruple, etc.).
            500 milliseconds is the default double click value on Windows.
            This value would ideally be pulled form the system settings.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.InteractionHelper.SequentialClickThresholdInPixelsSquared">
            <summary>
            The threshold used to determine whether two clicks are spatially
            local and considered a double click (or triple, quadruple, etc.)
            in pixels squared.  We use pixels squared so that we can compare to
            the distance delta without taking a square root.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.InteractionHelper._updateVisualState">
            <summary>
            Reference used to call UpdateVisualState on the base class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the InteractionHelper class.
            </summary>
            <param name="control">Control receiving interaction.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
            <remarks>
            UpdateVisualState works differently than the rest of the injected
            functionality.  Most of the other events are overridden by the
            calling class which calls Allow, does what it wants, and then calls
            Base.  UpdateVisualState is the opposite because a number of the
            methods in InteractionHelper need to trigger it in the calling
            class.  We do this using the IUpdateVisualState internal interface.
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.UpdateVisualStateBase(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the control's Loaded event.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the control's IsEnabled property.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.OnIsReadOnlyChanged(System.Boolean)">
            <summary>
            Handles changes to the control's IsReadOnly property.
            </summary>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.OnApplyTemplateBase">
            <summary>
            Update the visual state of the control when its template is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.AllowGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's GotFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.OnGotFocusBase">
            <summary>
            Base implementation of the virtual GotFocus event handler.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.AllowLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's LostFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.OnLostFocusBase">
            <summary>
            Base implementation of the virtual LostFocus event handler.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.AllowMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseEnter event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.OnMouseEnterBase">
            <summary>
            Base implementation of the virtual MouseEnter event handler.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.AllowMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseLeave event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.OnMouseLeaveBase">
            <summary>
            Base implementation of the virtual MouseLeave event handler.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.AllowMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.OnMouseLeftButtonDownBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonDown event
            handler.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.AllowMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.OnMouseLeftButtonUpBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonUp event handler.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.AllowKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.InteractionHelper.AllowKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.InteractionHelper.Control">
            <summary>
            Gets the control the InteractionHelper is targeting.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.InteractionHelper.IsFocused">
            <summary>
            Gets a value indicating whether the control has focus.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.InteractionHelper.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary> 
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.InteractionHelper.IsReadOnly">
            <summary>
            Gets a value indicating whether the read-only property is set.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.InteractionHelper.IsPressed">
            <summary>
            Gets a value indicating whether the mouse button is pressed down
            over the control.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.InteractionHelper.LastClickTime">
            <summary>
            Gets or sets the last time the control was clicked.
            </summary>
            <remarks>
            The value is stored as Utc time because it is slightly more
            performant than converting to local time.
            </remarks>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.InteractionHelper.LastClickPosition">
            <summary>
            Gets or sets the mouse position of the last click.
            </summary>
            <remarks>The value is relative to the control.</remarks>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.InteractionHelper.ClickCount">
            <summary>
            Gets the number of times the control was clicked.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.ItemsControlHelper">
            <summary>
            The ItemContainerGenerator provides useful utilities for ItemsControls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.ItemsControlHelper._itemsHost">
            <summary>
            A Panel that is used as the ItemsHost of the ItemsControl.  This
            property will only be valid when the ItemsControl is live in the
            tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.ItemsControlHelper._scrollHost">
            <summary>
            A ScrollViewer that is used to scroll the items in the ItemsHost.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlHelper.#ctor(System.Windows.Controls.ItemsControl)">
            <summary>
            Initializes a new instance of the ItemContainerGenerator.
            </summary>
            <param name="control">
            The ItemsControl being tracked by the ItemContainerGenerator.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlHelper.OnApplyTemplate">
            <summary>
            Apply a control template to the ItemsControl.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlHelper.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>
            Prepares the specified container to display the specified item.
            </summary>
            <param name="element">
            Container element used to display the specified item.
            </param>
            <param name="parentItemContainerStyle">
            The ItemContainerStyle for the parent ItemsControl.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlHelper.UpdateItemContainerStyle(System.Windows.Style)">
            <summary>
            Update the style of any generated items when the ItemContainerStyle
            has been changed.
            </summary>
            <param name="itemContainerStyle">The ItemContainerStyle.</param>
            <remarks>
            Silverlight does not support setting a Style multiple times, so we
            only attempt to set styles on elements whose style hasn't already
            been set.
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ItemsControlHelper.ScrollIntoView(System.Windows.FrameworkElement)">
            <summary>
            Scroll the desired element into the ScrollHost's viewport.
            </summary>
            <param name="element">Element to scroll into view.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.ItemsControlHelper.ItemsControl">
            <summary>
            Gets or sets the ItemsControl being tracked by the
            ItemContainerGenerator.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.ItemsControlHelper.ItemsHost">
            <summary>
            Gets a Panel that is used as the ItemsHost of the ItemsControl.
            This property will only be valid when the ItemsControl is live in
            the tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.ItemsControlHelper.ScrollHost">
            <summary>
            Gets a ScrollViewer that is used to scroll the items in the
            ItemsHost.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.NumericExtensions">
            <summary>
            Numeric utility methods used by controls.  These methods are similar in
            scope to the WPF DoubleUtil class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.NumericExtensions.IsZero(System.Double)">
            <summary>
            Check if a number is zero.
            </summary>
            <param name="value">The number to check.</param>
            <returns>True if the number is zero, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.NumericExtensions.IsNaN(System.Double)">
            <summary>
            Check if a number isn't really a number.
            </summary>
            <param name="value">The number to check.</param>
            <returns>
            True if the number is not a number, false if it is a number.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.NumericExtensions.IsGreaterThan(System.Double,System.Double)">
            <summary>
            Determine if one number is greater than another.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is greater than the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.NumericExtensions.IsLessThanOrClose(System.Double,System.Double)">
            <summary>
            Determine if one number is less than or close to another.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is less than or close to the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.NumericExtensions.AreClose(System.Double,System.Double)">
            <summary>
            Determine if two numbers are close in value.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is close in value to the second, false
            otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.NumericExtensions.NanUnion">
            <summary>
            NanUnion is a C++ style type union used for efficiently converting
            a double into an unsigned long, whose bits can be easily
            manipulated.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.NumericExtensions.NanUnion.FloatingValue">
            <summary>
            Floating point representation of the union.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.NumericExtensions.NanUnion.IntegerValue">
            <summary>
            Integer representation of the union.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.RoutedPropertyChangingEventArgs`1">
            <summary>
            Provides event data for various routed events that track property values
            changing.  Typically the events denote a cancellable action.
            </summary>
            <typeparam name="T">
            The type of the value for the dependency property that is changing.
            </typeparam>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.RoutedPropertyChangingEventArgs`1._cancel">
            <summary>
            Private member variable for Cancel property.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.RoutedPropertyChangingEventArgs`1.#ctor(System.Windows.DependencyProperty,`0,`0,System.Boolean)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.RoutedPropertyChangingEventArgs`1" />
            class.
            </summary>
            <param name="property">
            The <see cref="T:System.Windows.DependencyProperty" /> identifier
            for the property that is changing.
            </param>
            <param name="oldValue">The previous value of the property.</param>
            <param name="newValue">
            The new value of the property, assuming that the property change is
            not cancelled.
            </param>
            <param name="isCancelable">
            True if the property change is cancellable by setting
            <see cref="P:Microsoft.Silverlight.Testing.Controls.RoutedPropertyChangingEventArgs`1.Cancel" />
            to true in event handling. false if the property change is not
            cancellable.
            </param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.RoutedPropertyChangingEventArgs`1.Property">
            <summary>
            Gets the <see cref="T:System.Windows.DependencyProperty" />
            identifier for the property that is changing.
            </summary>
            <value>
            The <see cref="T:System.Windows.DependencyProperty" /> identifier
            for the property that is changing.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.RoutedPropertyChangingEventArgs`1.OldValue">
            <summary>
            Gets a value that reports the previous value of the changing
            property.
            </summary>
            <value>
            The previous value of the changing property.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.RoutedPropertyChangingEventArgs`1.NewValue">
            <summary>
            Gets or sets a value that reports the new value of the changing
            property, assuming that the property change is not cancelled.
            </summary>
            <value>
            The new value of the changing property.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.RoutedPropertyChangingEventArgs`1.IsCancelable">
            <summary>
            Gets a value indicating whether the property change that originated
            the RoutedPropertyChanging event is cancellable.
            </summary>
            <value>
            True if the property change is cancellable. false if the property
            change is not cancellable.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.RoutedPropertyChangingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether the property change that
            originated the RoutedPropertyChanging event should be cancelled.
            </summary>
            <value>
            True to cancel the property change; this resets the property to
            <see cref="P:Microsoft.Silverlight.Testing.Controls.RoutedPropertyChangingEventArgs`1.OldValue" />.
            false to not cancel the property change; the value changes to
            <see cref="P:Microsoft.Silverlight.Testing.Controls.RoutedPropertyChangingEventArgs`1.NewValue" />.
            </value>
            <exception cref="T:System.InvalidOperationException">
            Attempted to cancel in an instance where
            <see cref="P:Microsoft.Silverlight.Testing.Controls.RoutedPropertyChangingEventArgs`1.IsCancelable" />
            is false.
            </exception>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.RoutedPropertyChangingEventArgs`1.InCoercion">
            <summary>
            Gets or sets a value indicating whether internal value coercion is
            acting on the property change that originated the
            RoutedPropertyChanging event.
            </summary>
            <value>
            True if coercion is active. false if coercion is not active.
            </value>
            <remarks>
            This is a total hack to work around the class hierarchy for Value
            coercion in NumericUpDown.
            </remarks>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.RoutedPropertyChangingEventHandler`1">
            <summary>
            Represents methods that handle various routed events that track property
            values changing.  Typically the events denote a cancellable action.
            </summary>
            <typeparam name="T">
            The type of the value for the dependency property that is changing.
            </typeparam>
            <param name="sender">
            The object where the initiating property is changing.
            </param>
            <param name="e">Event data for the event.</param>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.ScrollExtensions">
            <summary>
            The ScrollExtensions class provides utility methods for scrolling items
            ScrollViewers.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.ScrollExtensions.LineChange">
            <summary>
            The amount to scroll a ScrollViewer for a line change.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ScrollExtensions.ScrollByVerticalOffset(System.Windows.Controls.ScrollViewer,System.Double)">
            <summary>
            Scroll a ScrollViewer vertically by a given offset.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="offset">The vertical offset to scroll.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ScrollExtensions.ScrollByHorizontalOffset(System.Windows.Controls.ScrollViewer,System.Double)">
            <summary>
            Scroll a ScrollViewer horizontally by a given offset.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="offset">The horizontal offset to scroll.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ScrollExtensions.LineUp(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer up by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ScrollExtensions.LineDown(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer down by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ScrollExtensions.LineLeft(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer left by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ScrollExtensions.LineRight(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer right by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ScrollExtensions.PageUp(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer up by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ScrollExtensions.PageDown(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer down by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ScrollExtensions.PageLeft(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer left by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ScrollExtensions.PageRight(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer right by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ScrollExtensions.ScrollToTop(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer to the top.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ScrollExtensions.ScrollToBottom(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer to the bottom.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.ScrollExtensions.GetTopAndBottom(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Double@,System.Double@)">
            <summary>
            Get the top and bottom of an element with respect to its parent.
            </summary>
            <param name="element">The element to get the position of.</param>
            <param name="parent">The parent of the element.</param>
            <param name="top">Vertical offset to the top of the element.</param>
            <param name="bottom">
            Vertical offset to the bottom of the element.
            </param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.TypeConverters">
            <summary>
            Common TypeConverter functionality.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TypeConverters.CanConvertFrom``1(System.Type)">
            <summary>
            Returns a value indicating whether this converter can convert an
            object of the given type to an instance of the expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="sourceType">
            The type of the source that is being evaluated for conversion.
            </param>
            <returns>
            A value indicating whether the converter can convert the provided
            type.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TypeConverters.ConvertFrom``1(System.ComponentModel.TypeConverter,System.Object)">
            <summary>
            Attempts to convert a specified object to an instance of the
            expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <returns>
            The instance of the expected type created from the converted object.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TypeConverters.CanConvertTo``1(System.Type)">
            <summary>
            Determines whether conversion is possible to a specified type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="destinationType">
            Identifies the data type to evaluate for conversion.
            </param>
            <returns>
            A value indicating whether conversion is possible.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TypeConverters.ConvertTo(System.ComponentModel.TypeConverter,System.Object,System.Type)">
            <summary>
            Attempts to convert a specified object to an instance of the
            desired type.
            </summary>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.VisualStates">
            <summary>
            Names and helpers for visual states in the controls.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.GroupCommon">
            <summary>
            Common state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateNormal">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateReadOnly">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateMouseOver">
            <summary>
            MouseOver state of the Common state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StatePressed">
            <summary>
            Pressed state of the Common state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateDisabled">
            <summary>
            Disabled state of the Common state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.GroupFocus">
            <summary>
            Focus state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateUnfocused">
            <summary>
            Unfocused state of the Focus state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateFocused">
            <summary>
            Focused state of the Focus state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.GroupSelection">
            <summary>
            Selection state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateSelected">
            <summary>
            Selected state of the Selection state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateUnselected">
            <summary>
            Unselected state of the Selection state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateSelectedInactive">
            <summary>
            Selected inactive state of the Selection state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.GroupExpansion">
            <summary>
            Expansion state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateExpanded">
            <summary>
            Expanded state of the Expansion state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateCollapsed">
            <summary>
            Collapsed state of the Expansion state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.GroupPopup">
            <summary>
            Popup state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StatePopupOpened">
            <summary>
            Opened state of the Popup state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StatePopupClosed">
            <summary>
            Closed state of the Popup state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.GroupValidation">
            <summary>
            ValidationStates state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateValid">
            <summary>
            The valid state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateInvalidFocused">
            <summary>
            Invalid, focused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateInvalidUnfocused">
            <summary>
            Invalid, unfocused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.GroupExpandDirection">
            <summary>
            ExpandDirection state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateExpandDown">
            <summary>
            Down expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateExpandUp">
            <summary>
            Up expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateExpandLeft">
            <summary>
            Left expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateExpandRight">
            <summary>
            Right expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.GroupHasItems">
            <summary>
            HasItems state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateHasItems">
            <summary>
            HasItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateNoItems">
            <summary>
            NoItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.GroupIncrease">
            <summary>
            Increment state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateIncreaseEnabled">
            <summary>
            State enabled for increment group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateIncreaseDisabled">
            <summary>
            State disabled for increment group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.GroupDecrease">
            <summary>
            Decrement state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateDecreaseEnabled">
            <summary>
            State enabled for decrement group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateDecreaseDisabled">
            <summary>
            State disabled for decrement group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.GroupInteractionMode">
            <summary>
            InteractionMode state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateEdit">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateDisplay">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.GroupLocked">
            <summary>
            DisplayMode state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateLocked">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateUnlocked">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateActive">
            <summary>
            Active state.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateInactive">
            <summary>
            Inactive state.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.GroupActive">
            <summary>
            Active state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateUnwatermarked">
            <summary>
            Non-watermarked state.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateWatermarked">
            <summary>
            Watermarked state.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.GroupWatermark">
            <summary>
            Watermark state group.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateCalendarButtonUnfocused">
            <summary>
            Unfocused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.StateCalendarButtonFocused">
            <summary>
            Focused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.VisualStates.GroupCalendarButtonFocus">
            <summary>
            CalendarButtons Focus state group.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.VisualStates.GoToState(System.Windows.Controls.Control,System.Boolean,System.String[])">
            <summary>
            Use VisualStateManager to change the visual state of the control.
            </summary>
            <param name="control">
            Control whose visual state is being changed.
            </param>
            <param name="useTransitions">
            A value indicating whether to use transitions when updating the
            visual state, or to snap directly to the new visual state.
            </param>
            <param name="stateNames">
            Ordered list of state names and fallback states to transition into.
            Only the first state to be found will be used.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.VisualStates.GetImplementationRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <param name="dependencyObject">The DependencyObject.</param>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
            <returns>Returns the implementation root or null.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.VisualStates.TryGetVisualStateGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            This method tries to get the named VisualStateGroup for the 
            dependency object. The provided object's ImplementationRoot will be 
            looked up in this call.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="groupName">The visual state group's name.</param>
            <returns>Returns null or the VisualStateGroup object.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.HierarchicalDataTemplate">
            <summary>
            Represents a <see cref="T:System.Windows.DataTemplate" /> that supports
            <see cref="T:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl" /> objects,
            such as <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" />.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.HierarchicalDataTemplate._itemTemplate">
            <summary>
            The DataTemplate to apply to the ItemTemplate property on a
            generated HeaderedItemsControl (such as a MenuItem or a
            TreeViewItem), to indicate how to display items from the next level
            in the data hierarchy.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.HierarchicalDataTemplate._itemContainerStyle">
            <summary>
            The Style to apply to the ItemContainerStyle property on a generated
            HeaderedItemsControl (such as a MenuItem or a TreeViewItem), to
            indicate how to style items from the next level in the data
            hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.HierarchicalDataTemplate.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.HierarchicalDataTemplate" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.HierarchicalDataTemplate.ItemsSource">
            <summary>
            Gets or sets the collection that is used to generate content for the
            next sublevel in the data hierarchy.
            </summary>
            <value>
            The collection that is used to generate content for the next
            sublevel in the data hierarchy.  The default value is null.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.HierarchicalDataTemplate.IsItemTemplateSet">
            <summary>
            Gets a value indicating whether the ItemTemplate property was set on
            the template.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.HierarchicalDataTemplate.ItemTemplate">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> to
            apply to the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.ItemsControl.ItemTemplate" />
            property on a generated
            <see cref="T:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl" />, such
            as a <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" />, to
            indicate how to display items from the next sublevel in the data
            hierarchy.
            </summary>
            <value>
            The <see cref="T:System.Windows.DataTemplate" /> to apply to the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.ItemsControl.ItemTemplate" />
            property on a generated
            <see cref="T:Microsoft.Silverlight.Testing.Controls.HeaderedItemsControl" />, such
            as a <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" />, to
            indicate how to display items from the next sublevel in the data
            hierarchy.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.HierarchicalDataTemplate.IsItemContainerStyleSet">
            <summary>
            Gets a value indicating whether the ItemContainerStyle property was
            set on the template.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.HierarchicalDataTemplate.ItemContainerStyle">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> that is
            applied to the item container for each child item.
            </summary>
            <value>
            The style that is applied to the item container for each child item.
            </value>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.DragValidator">
            <summary>
            Class to encapsulate drag behavior for a UIElement.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.DragValidator._targetElement">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.DragValidator._start">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.DragValidator._draggingActive">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.DragValidator.#ctor(System.Windows.UIElement)">
            <summary>
            Create an instance of the DragValidator class.
            </summary>
            <param name="targetElement">
            UIElement that represents the source of the drag operation.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.DragValidator.TargetElement_MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handle the MouseMove event for the UIElement to update the drag
            operation.
            </summary>
            <param name="sender">Inherited code: Requires comment.</param>
            <param name="e">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.DragValidator.TargetElement_MouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handle the MouseLeftButtonUp event for the UIElement to complete the
            drag operation.
            </summary>
            <param name="sender">Inherited code: Requires comment.</param>
            <param name="e">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.DragValidator.TargetElement_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handle the MouseLeftButtonDown event for the UIElement to start a
            drag operation.
            </summary>
            <param name="sender">Inherited code: Requires comment.</param>
            <param name="e">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.DragValidator.OnDragStarted">
            <summary>
            Invoke the DragStartedEvent handlers.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.DragValidator.OnDragDelta(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoke the DragDeltaEvent handlers.
            </summary>
            <param name="e">Inherited code: Requires comment.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.DragValidator.OnDragCompleted(System.Windows.Input.MouseEventArgs,System.Boolean)">
            <summary>
            Invoke the DragCompletedEvent handlers.
            </summary>
            <param name="e">Inherited code: Requires comment.</param>
            <param name="canceled">Inherited code: Requires comment 1.</param>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Controls.DragValidator.DragStartedEvent">
            <summary>
            Occurs when a drag operation has started.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Controls.DragValidator.DragCompletedEvent">
            <summary>
            Occurs when a drag operation has completed.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Controls.DragValidator.DragDeltaEvent">
            <summary>
            Occurs when a drag operation has progressed.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.GridSplitter">
            <summary>
            Represents a control that redistributes space between the rows of
            columns of a <see cref="T:Microsoft.Silverlight.Testing.Controls.Grid" /> control.
            </summary>
            <QualityBand>Mature</QualityBand>
            <summary>
            Represents the control that redistributes space between columns or rows
            of a Grid control.
            </summary>
            <QualityBand>Mature</QualityBand>
            <summary>
            Represents the control that redistributes space between columns or rows
            of a Grid control.
            </summary>
            <QualityBand>Mature</QualityBand>
            <summary>
            Represents the control that redistributes space between columns or rows
            of a Grid control.
            </summary>
            <QualityBand>Mature</QualityBand>
            <summary>
            Represents the control that redistributes space between columns or rows
            of a Grid control.
            </summary>
            <QualityBand>Mature</QualityBand>
            <summary>
            Represents the control that redistributes space between columns or rows
            of a Grid control.
            </summary>
            <QualityBand>Mature</QualityBand>
            <summary>
            Represents the control that redistributes space between columns or rows
            of a Grid control.
            </summary>
            <QualityBand>Mature</QualityBand>
            <summary>
            Represents the control that redistributes space between columns or rows
            of a Grid control.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.ElementHorizontalTemplateName">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.ElementVerticalTemplateName">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.DragIncrement">
            <summary>
            Default increment parameter.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.KeyboardIncrement">
            <summary>
            Default increment parameter.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.ShowsPreviewProperty">
            <summary>
            Identifies the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ShowsPreview" />
            dependency property.
            </summary>
            <value>
            An identifier for the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ShowsPreview" />
            dependency property.
            </value>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.PreviewStyleProperty">
            <summary>
            Identifies the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.PreviewStyle" />
            dependency property.
            </summary>
            <value>
            An identifier for the
            <see cref="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.PreviewStyle" />
            dependency property.
            </value>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the IsEnabled property changes.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Property changed args.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter._previewLayer">
            <summary>
            Is Null until a resize operation is initiated with ShowsPreview ==
            True, then it persists for the life of the GridSplitter.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter._dragValidator">
            <summary>
            Is initialized in the constructor.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter._currentGridResizeDirection">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter._isMouseOver">
            <summary>
            Holds the state for whether the mouse is over the control or not.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.GridSplitter" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.OnApplyTemplate">
            <summary>
            Builds the visual tree for the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.GridSplitter" />
            control when a new template is applied.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.OnCreateAutomationPeer">
            <summary>
            Returns a
            <see cref="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer" />
            for use by the Silverlight automation infrastructure.
            </summary>
            <returns>
            A
            <see cref="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer" />
            for the <see cref="T:Microsoft.Silverlight.Testing.Controls.GridSplitter" />
            object.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.ChangeVisualState">
            <summary>
            Method to change the visual state of the control.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.ChangeVisualState(System.Boolean)">
            <summary>
            Change to the correct visual state for the GridSplitter.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.DragValidator_DragCompletedEvent(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            Handle the drag completed event to commit or cancel the resize
            operation in progress.
            </summary>
            <param name="sender">Inherited code: Requires comment.</param>
            <param name="e">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.DragValidator_DragDeltaEvent(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Handle the drag delta event to update the UI for the resize
            operation in progress.
            </summary>
            <param name="sender">Inherited code: Requires comment.</param>
            <param name="e">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.DragValidator_DragStartedEvent(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            Handle the drag started event to start a resize operation if the
            control is enabled.
            </summary>
            <param name="sender">Inherited code: Requires comment.</param>
            <param name="e">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.GridSplitter_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handle the key down event to allow keyboard resizing or canceling a
            resize operation.
            </summary>
            <param name="sender">Inherited code: Requires comment.</param>
            <param name="e">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.InitializeAndMoveSplitter(System.Double,System.Double)">
            <summary>
            Initialize the resize data and move the splitter by the specified
            amount.
            </summary>
            <param name="horizontalChange">
            Horizontal amount to move the splitter.
            </param>
            <param name="verticalChange">
            Vertical amount to move the splitter.
            </param>
            <returns>Inherited code: Requires comment.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.KeyboardMoveSplitter(System.Double,System.Double)">
            <summary>
            Called by keyboard event handler to move the splitter if allowed.
            </summary>
            <param name="horizontalChange">
            Horizontal amount to move the splitter.
            </param>
            <param name="verticalChange">
            Vertical amount to move the splitter.
            </param>
            <returns>Inherited code: Requires comment.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.CreatePreviewLayer(System.Windows.Controls.Grid)">
            <summary>
            Creates the preview layer and adds it to the parent grid.
            </summary>
            <param name="parentGrid">Grid to add the preview layer to.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.SetupPreview">
            <summary>
            Add the preview layer to the Grid if it is not there already and
            then show the preview control.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.RemovePreviewControl">
            <summary>
            Remove the preview control from the preview layer if it exists.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.InitializeData(System.Boolean)">
            <summary>
            Initialize the resizeData object to hold the information for the
            resize operation in progress.
            </summary>
            <param name="showsPreview">
            Whether or not the preview should be shown.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.MoveSplitter(System.Double,System.Double)">
            <summary>
            Move the splitter and resize the affected columns or rows.
            </summary>
            <param name="horizontalChange">
            Amount to resize horizontally.
            </param>
            <param name="verticalChange">
            Amount to resize vertically.
            </param>
            <remarks>
            Only one of horizontalChange or verticalChange will be non-zero.
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.SetupDefinitionsToResize">
            <summary>
            Determine which adjacent column or row definitions need to be
            included in the resize operation and set up resizeData accordingly.
            </summary>
            <returns>True if it is a valid resize operation.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.CancelResize">
            <summary>
            Cancel the resize operation in progress.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.GetActualLength(Microsoft.Silverlight.Testing.Controls.GridSplitter.DefinitionAbstraction)">
            <summary>
            Get the actual length of the given definition.
            </summary>
            <param name="definition">
            Row or column definition to get the actual length for.
            </param>
            <returns>
            Height of a row definition or width of a column definition.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.GetDeltaConstraints">
            <summary>
            Determine the max and min that the two definitions can be resized.
            </summary>
            <returns>Inherited code: Requires comment.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.GetEffectiveResizeBehavior(Microsoft.Silverlight.Testing.Controls.GridSplitter.GridResizeDirection)">
            <summary>
            Determine the resize behavior based on the given direction and
            alignment.
            </summary>
            <param name="direction">Inherited code: Requires comment.</param>
            <returns>Inherited code: Requires comment 1.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.GetEffectiveResizeDirection">
            <summary>
            Determine the resize direction based on the horizontal and vertical
            alignments.
            </summary>
            <returns>Inherited code: Requires comment.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.GetGridDefinition(System.Windows.Controls.Grid,System.Int32,Microsoft.Silverlight.Testing.Controls.GridSplitter.GridResizeDirection)">
            <summary>
            Create a DefinitionAbstraction instance for the given row or column
            index in the grid.
            </summary>
            <param name="grid">Inherited code: Requires comment.</param>
            <param name="index">Inherited code: Requires comment 1.</param>
            <param name="direction">Inherited code: Requires comment 2.</param>
            <returns>Inherited code: Requires comment 3.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.SetLengths(System.Double,System.Double)">
            <summary>
            Set the lengths of the two definitions depending on the split
            behavior.
            </summary>
            <param name="definition1Pixels">
            Inherited code: Requires comment.
            </param>
            <param name="definition2Pixels">
            Inherited code: Requires comment 1.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.SetDefinitionLength(Microsoft.Silverlight.Testing.Controls.GridSplitter.DefinitionAbstraction,System.Windows.GridLength)">
            <summary>
            Set the height/width of the given row/column.
            </summary>
            <param name="definition">Inherited code: Requires comment.</param>
            <param name="length">Inherited code: Requires comment 1.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.IsStar(Microsoft.Silverlight.Testing.Controls.GridSplitter.DefinitionAbstraction)">
            <summary>
            Determine if the given definition has its size set to the "*" value.
            </summary>
            <param name="definition">Inherited code: Requires comment.</param>
            <returns>Inherited code: Requires comment 1.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.UpdateTemplateOrientation">
            <summary>
            This code will run whenever the effective resize direction changes,
            to update the template being used to display this control.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter._testHook">
            <summary>
            Exposes test hooks to unit tests with internal access.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ElementHorizontalTemplateFrameworkElement">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ElementVerticalTemplateFrameworkElement">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeDataInternal">
            <summary>
            Gets or sets the resize data.  This is null unless a resize
            operation is in progress.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ShowsPreview">
            <summary>
            Gets or sets a value indicating whether the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.GridSplitter" /> displays a
            preview.
            </summary>
            <value>
            True if a preview is displayed; otherwise, false.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.PreviewStyle">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> that is used
            for previewing changes.
            </summary>
            <value>
            The style that is used to preview changes.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.HasKeyboardFocus">
            <summary>
            Gets a value indicating whether or not the control has keyboard
            focus.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.TestHook">
            <summary>
            Gets a test hook for unit tests with internal access.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.GridSplitter.DefinitionAbstraction">
            <summary>
            Pretends to be the base class for RowDefinition and ClassDefinition
            types so that objects of either type can be treated as one.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.DefinitionAbstraction.#ctor(System.Windows.DependencyObject)">
            <summary>
            Creates an instance of the DefinitionAbstraction class based on
            the given row or column definition.
            </summary>
            <param name="definition">
            RowDefinition or ColumnDefinition instance.
            </param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.DefinitionAbstraction.AsRowDefinition">
            <summary>
            Gets the stored definition cast as a row definition.
            </summary>
            <value>Null if not a RowDefinition.</value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.DefinitionAbstraction.AsColumnDefinition">
            <summary>
            Gets the stored definition cast as a column definition.
            </summary>
            <value>Null if not a ColumnDefinition.</value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.DefinitionAbstraction.MaxSize">
            <summary>
            Gets the MaxHeight/MaxWidth for the row/column.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.DefinitionAbstraction.MinSize">
            <summary>
            Gets the MinHeight/MinWidth for the row/column.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.DefinitionAbstraction.Size">
            <summary>
            Gets the Height/Width for the row/column.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.GridSplitter.DoubleUtil">
            <summary>
            A collection of helper methods for working with double data types.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.DoubleUtil.Epsilon">
            <summary>
            Epsilon is the smallest value such that 1.0+epsilon != 1.0.  It
            can be used to determine the acceptable tolerance for rounding
            errors.
            </summary>
            <remarks>
            Epsilon is normally 2.2204460492503131E-16, but Silverlight 2
            uses floats so the effective epsilon is really 1.192093E-07.
            </remarks>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.DoubleUtil.ScalarAdjustment">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.DoubleUtil.AreClose(System.Double,System.Double)">
            <summary>
            Determine if the two doubles are effectively equal within
            tolerances.
            </summary>
            <param name="value1">Inherited code: Requires comment.</param>
            <param name="value2">Inherited code: Requires comment 1.</param>
            <returns>Inherited code: Requires comment 2.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.GridSplitter.GridResizeBehavior">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.GridResizeBehavior.BasedOnAlignment">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.GridResizeBehavior.CurrentAndNext">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.GridResizeBehavior.PreviousAndCurrent">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.GridResizeBehavior.PreviousAndNext">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.GridSplitter.GridResizeDirection">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.GridResizeDirection.Auto">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.GridResizeDirection.Columns">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.GridResizeDirection.Rows">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData">
            <summary>
            Type to hold the data for the resize operation in progress.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData.PreviewControl">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData.Definition1">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData.Definition1Index">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData.Definition2">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData.Definition2Index">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData.Grid">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData.MaxChange">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData.MinChange">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData.OriginalDefinition1ActualLength">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData.OriginalDefinition1Length">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData.OriginalDefinition2ActualLength">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData.OriginalDefinition2Length">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData.ResizeBehavior">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData.ResizeDirection">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData.ShowsPreview">
            <summary>
            Gets or sets a value indicating whether Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData.SplitBehavior">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData.SplitterIndex">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.ResizeData.SplitterLength">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.GridSplitter.SplitBehavior">
            <summary>
            Inherited code: Requires comment.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.SplitBehavior.Split">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.SplitBehavior.ResizeDefinition1">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.SplitBehavior.ResizeDefinition2">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.GridSplitter.InternalTestHook">
            <summary>
            Expose test hooks for internal and private members of the
            GridSplitter.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.GridSplitter.InternalTestHook._gridSplitter">
            <summary>
            Reference to the outer 'parent' GridSplitter.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.InternalTestHook.#ctor(Microsoft.Silverlight.Testing.Controls.GridSplitter)">
            <summary>
            Initializes a new instance of the InternalTestHook class.
            </summary>
            <param name="gridSplitter">The grid splitter to hook.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.InternalTestHook.DragValidator_DragCompletedEvent(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            Simulate the DragValidator's DragCompleted event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.InternalTestHook.DragValidator_DragDeltaEvent(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Simulate the DragValidator's DragDelta event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.InternalTestHook.DragValidator_DragStartedEvent(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            Simulate the DragValidator's DragStarted event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitter.InternalTestHook.KeyboardMoveSplitter(System.Double,System.Double)">
            <summary>
            Simulate using the keyboard to move the splitter.
            </summary>
            <param name="horizontalChange">Horizontal change.</param>
            <param name="verticalChange">Vertical change.</param>
            <returns>
            A value indicating whether the splitter was moved.
            </returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.InternalTestHook.GridResizeDirection">
            <summary>
            Gets the GridSplitter's GridResizeDirection.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.InternalTestHook.PreviewLayer">
            <summary>
            Gets the GridSplitter's PreviewLayer.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitter.InternalTestHook.ResizeData">
            <summary>
            Gets the GridSplitter's ResizeData.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.GridSplitterAutomationPeer">
            <summary>
            Exposes <see cref="T:Microsoft.Silverlight.Testing.Controls.GridSplitter" /> types to
            UI automation.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitterAutomationPeer.#ctor(Microsoft.Silverlight.Testing.Controls.GridSplitter)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer" />
            class.
            </summary>
            <param name="owner">
            The <see cref="T:Microsoft.Silverlight.Testing.Controls.GridSplitter" /> to
            associate with the
            <see cref="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer" />.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitterAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the element that is associated with the UI
            Automation peer.
            </summary>
            <returns>The control type.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitterAutomationPeer.GetClassNameCore">
            <summary>
            Called by GetClassName that gets a human readable name that, in
            addition to AutomationControlType,  differentiates the control
            represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitterAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.GridSplitter" /> that is
            associated with this
            <see cref="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer" />.
            </summary>
            <param name="patternInterface">
            One of the enumeration values.
            </param>
            <returns>
            The object that implements the pattern interface, or null if the
            specified pattern interface is not implemented by this peer.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitterAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#Move(System.Double,System.Double)">
            <summary>
            Moves the control.
            </summary>
            <param name="x">
            Absolute screen coordinates of the left side of the control.
            </param>
            <param name="y">
            Absolute screen coordinates of the top of the control.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitterAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#Resize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="width">The new width of the window, in pixels.</param>
            <param name="height">
            The new height of the window, in pixels.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.GridSplitterAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#Rotate(System.Double)">
            <summary>
            Rotates the control.
            </summary>
            <param name="degrees">
            The number of degrees to rotate the control. A positive number
            rotates clockwise; a negative number rotates counterclockwise.
            </param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitterAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#CanMove">
            <summary>
            Gets a value indicating whether the control can be moved.
            </summary>
            <value>
            True if the element can be moved; otherwise, false.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitterAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#CanResize">
            <summary>
            Gets a value indicating whether the UI automation element can be
            resized.
            </summary>
            <value>
            True if the element can be resized; otherwise, false.
            </value>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.GridSplitterAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#CanRotate">
            <summary>
            Gets a value indicating whether the control can be rotated.
            </summary>
            <value>
            True if the element can be rotated; otherwise, false.
            </value>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.PreviewControl">
            <summary>
            Represents the control that shows a preview of the GridSplitter's
            redistribution of space between columns or rows of a Grid control.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.PreviewControl.ElementHorizontalTemplateName">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.PreviewControl.ElementVerticalTemplateName">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.PreviewControl._currentGridResizeDirection">
            <summary>
            Is Null until the PreviewControl is bound to a GridSplitter.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Controls.PreviewControl._gridSplitterOrigin">
            <summary>
            Tracks the bound GridSplitter's location for calculating the
            PreviewControl's offset.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.PreviewControl.#ctor">
            <summary>
            Instantiate the PreviewControl.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.PreviewControl.OnApplyTemplate">
            <summary>
            Called when template should be applied to the control.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.PreviewControl.Bind(Microsoft.Silverlight.Testing.Controls.GridSplitter)">
            <summary>
            Bind the the dimensions of the preview control to the associated
            grid splitter.
            </summary>
            <param name="gridSplitter">GridSplitter instance to target.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.PreviewControl.ElementHorizontalTemplateFrameworkElement">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.PreviewControl.ElementVerticalTemplateFrameworkElement">
            <summary>
            Gets or sets Inherited code: Requires comment.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.PreviewControl.OffsetX">
            <summary>
            Gets or sets the x-axis offset for the underlying render transform.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.PreviewControl.OffsetY">
            <summary>
            Gets or sets the y-axis offset for the underlying render transform.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.TreeViewAutomationPeer">
            <summary>
            Exposes <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeView" /> types to UI
            automation.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewAutomationPeer.#ctor(Microsoft.Silverlight.Testing.Controls.TreeView)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Automation.Peers.TreeViewAutomationPeer" />
            class.
            </summary>
            <param name="owner">
            The <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeView" /> to associate
            with the
            <see cref="T:System.Windows.Automation.Peers.TreeViewAutomationPeer" />.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeView" /> that is associated
            with this
            <see cref="T:System.Windows.Automation.Peers.TreeViewAutomationPeer" />.
            This method is called by
            <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
            </summary>
            <returns>
            The
            <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Tree" />
            enumeration value.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeView" /> that is associated
            with 
            <see cref="T:System.Windows.Automation.Peers.TreeViewAutomationPeer" />.
            This method is called by
            <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
            </summary>
            <returns>A string that contains TreeView.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets a control pattern for the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeView" /> that is associated
            with this
            <see cref="T:System.Windows.Automation.Peers.TreeViewAutomationPeer" />.
            </summary>
            <param name="patternInterface">
            One of the enumeration values that indicates the control pattern.
            </param>
            <returns>
            The object that implements the pattern interface, or null if the
            specified pattern interface is not implemented by this peer.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewAutomationPeer.GetChildrenCore">
            <summary>
            Gets the collection of child elements of the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeView" /> that is associated
            with this
            <see cref="T:System.Windows.Automation.Peers.TreeViewAutomationPeer" />.
            </summary>
            <returns>The collection of child elements.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
            <summary>
            Retrieves a UI automation provider for each child element that is
            selected.
            </summary>
            <returns>An array of UI automation providers.</returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewAutomationPeer.OwnerTreeView">
            <summary>
            Gets the TreeView that owns this TreeViewAutomationPeer.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
            <summary>
            Gets a value indicating whether the UI automation provider
            allows more than one child element to be selected at the same time.
            </summary>
            <value>
            True if multiple selection is allowed; otherwise, false.
            </value>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
            <summary>
            Gets a value indicating whether the UI automation provider
            requires at least one child element to be selected.
            </summary>
            <value>
            True if selection is required; otherwise, false.
            </value>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Controls.TreeViewItemAutomationPeer">
            <summary>
            Exposes the items in
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> types to UI
            automation.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemAutomationPeer.#ctor(Microsoft.Silverlight.Testing.Controls.TreeViewItem)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Automation.Peers.TreeViewItemAutomationPeer" />
            class.
            </summary>
            <param name="owner">
            The <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> instance
            to associate with this
            <see cref="T:System.Windows.Automation.Peers.TreeViewItemAutomationPeer" />.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> that is
            associated with this
            <see cref="T:System.Windows.Automation.Peers.TreeViewItemAutomationPeer" />.
            This method is called by
            <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
            </summary>
            <returns>
            The
            <see cref="F:System.Windows.Automation.Peers.AutomationControlType.TreeItem" />
            enumeration value.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> that is
            associated with this
            <see cref="T:System.Windows.Automation.Peers.TreeViewItemAutomationPeer" />.
            This method is called by
            <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
            </summary>
            <returns>A string that contains TreeViewItem.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the
            <see cref="T:Microsoft.Silverlight.Testing.Controls.TreeViewItem" /> that is
            associated with this
            <see cref="T:System.Windows.Automation.Peers.TreeViewItemAutomationPeer" />.
            </summary>
            <param name="patternInterface">
            One of the enumeration values.
            </param>
            <returns>
            The object that implements the pattern interface, or null if the
            specified pattern interface is not implemented by this peer.
            </returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemAutomationPeer.RaiseAutomationIsSelectedChanged(System.Boolean)">
            <summary>
            Raise the IsSelected property changed event.
            </summary>
            <param name="isSelected">
            A value indicating whether the TreeViewItem is selected.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemAutomationPeer.RaiseExpandCollapseAutomationEvent(System.Boolean,System.Boolean)">
            <summary>
            Raise an automation event when a TreeViewItem is expanded or
            collapsed.
            </summary>
            <param name="oldValue">
            A value indicating whether the TreeViewItem was expanded.
            </param>
            <param name="newValue">
            A value indicating whether the TreeViewItem is expanded.
            </param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
            <summary>
            Displays all child nodes, controls, or content of the control.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
            <summary>
            Hides all nodes, controls, or content that are descendants of the
            control.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
            <summary>
            Adds the current element to the collection of selected items.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
            <summary>
            Clears any selection and then selects the current element.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
            <summary>
            Removes the current element from the collection of selected items.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Controls.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#IScrollItemProvider#ScrollIntoView">
            <summary>
            Scrolls the content area of a container object in order to display
            the control within the visible region (viewport) of the container.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItemAutomationPeer.OwnerTreeViewItem">
            <summary>
            Gets the TreeViewItem that owns this TreeViewItemAutomationPeer.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
            <summary>
            Gets the state (expanded or collapsed) of the control.
            </summary>
            <value>
            The state (expanded or collapsed) of the control.
            </value>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
            <summary>
            Gets a value indicating whether an item is selected.
            </summary>
            <value>True if an item is selected; otherwise, false.</value>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Controls.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
            <summary>
            Gets the UI automation provider that implements
            <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />
            and acts as the container for the calling object.
            </summary>
            <value>The UI automation provider.</value>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.DataTemplateSelector">
            <summary>
            A specialized data template selector.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.DataTemplateSelector.#ctor">
            <summary>
            Initializes a new instance of the DataTemplateSelector type.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.DataTemplateSelector.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a value to a data template.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target parameter.</param>
            <param name="parameter">ConverterParameter value.</param>
            <param name="culture">The culture parameter.</param>
            <returns>Returns the object.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.DataTemplateSelector.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            No 2-way databinding support.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target parameter.</param>
            <param name="parameter">ConverterParameter value.</param>
            <param name="culture">The culture parameter.</param>
            <returns>Returns the object.</returns>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.DataTemplateSelector.DefaultDataTemplate">
            <summary>
            Gets or sets the default data template.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.DataTemplateSelector.TestMethodTemplate">
            <summary>
            Gets or sets the test method template.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.DataTemplateSelector.TestClassTemplate">
            <summary>
            Gets or sets the test class template.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.InvertValueConverter">
            <summary>
            A specialized bool inversion selector.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.InvertValueConverter.#ctor">
            <summary>
            Initializes a new instance of the InvertValueConverter class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.InvertValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a value to its opposite. Defines that null value will also
            return false.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target parameter.</param>
            <param name="parameter">ConverterParameter value.</param>
            <param name="culture">The culture parameter.</param>
            <returns>Returns the object.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.InvertValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            No 2-way databinding support.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target parameter.</param>
            <param name="parameter">ConverterParameter value.</param>
            <param name="culture">The culture parameter.</param>
            <returns>Returns the object.</returns>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.Notification">
            <summary>
            A notification type for use in the Notifications ItemsControl.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.Notification.CloseButtonName">
            <summary>
            Name of the template part.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.Notification.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.Notification.CloseButtonVisibilityProperty">
            <summary>
            Identifies the CloseButtonVisibility dependency property.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.Notification._close">
            <summary>
            Backing field for the close button.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Notification.#ctor">
            <summary>
            Initializes a new instance of the Notification class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Notification.OnClosed(System.Windows.RoutedEventArgs)">
            <summary>
            Fires the Closed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Notification.OnApplyTemplate">
            <summary>
            Overrides the on apply template method.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Notification.OnCloseClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Connects to the Click event of the Close button.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.Notification.Title">
            <summary>
            Gets or sets the title of the notification.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.Notification.CloseButtonVisibility">
            <summary>
            Gets or sets the visibility of the close button.
            </summary>
        </member>
        <member name="E:Microsoft.Silverlight.Testing.Client.Notification.Closed">
            <summary>
            Closed event that connects to the close button of the notification.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.Notifications">
            <summary>
            A class that contains notification information.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Notifications.#ctor">
            <summary>
            Initialize a new intance of the Notifications type.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Notifications.OnApplyTemplate">
            <summary>
            Overrides the on apply template method.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Notifications.AddNotification(Microsoft.Silverlight.Testing.Client.Notification)">
            <summary>
            Adds a notification object to the set of notifications. Connects the
            close button handler to automatically remove the notification from
            the visual tree.
            </summary>
            <param name="notification">A notification instance.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.Notifications.OnNotificationClosed(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Closed event from the notification and removes the
            child.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Client.TestApplicationInformation">
            <summary>
            This class contains information about the test application and its
            deployment settings.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestApplicationInformation.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Client.TestApplicationInformation.OnInstallStateChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the install state changed event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Client.TestApplicationInformation._installed">
            <summary>
            Backing field for an installed property.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestApplicationInformation.OutOfBrowserApplicationInstalled">
            <summary>
            Gets a value indicating whether the test application is currently
            installed out of browser.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestApplicationInformation.InstallationStateText">
            <summary>
            Gets the text to show the user the state of the out of browser test
            application.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestApplicationInformation.SupportsOutOfBrowserAndNotInstalled">
            <summary>
            Gets a value indicating whether out of browser is both supported and
            not currently installed.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Client.TestApplicationInformation.SupportsOutOfBrowser">
            <summary>
            Gets a value indicating whether out of browser is supported by this
            test application.
            </summary>
        </member>
        <member name="T:Microsoft.Silverlight.Testing.Service.SimpleXElement">
            <summary>
            A simple implementation similar to XElement.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.SimpleXElement._children">
            <summary>
            Backing field for child elements.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.SimpleXElement._attributes">
            <summary>
            Backing field for attributes.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.SimpleXElement._name">
            <summary>
            Backing field for the element name.
            </summary>
        </member>
        <member name="F:Microsoft.Silverlight.Testing.Service.SimpleXElement._namespace">
            <summary>
            Backing field for optional XML namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the element.
            </summary>
            <param name="elementName">The name of the element.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the element.
            </summary>
            <param name="elementName">The name of the element.</param>
            <param name="ns">The XML namespace of the element.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.#ctor(System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the class using the reader as the
            current root of the element.
            </summary>
            <param name="newElementReader">The XmlReader instance.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.SetElementValue(System.String,System.String)">
            <summary>
            Sets the value of a new child element.
            </summary>
            <param name="elementName">The element name.</param>
            <param name="value">The value of the new element.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.SetElementValue(System.String,System.String,System.String)">
            <summary>
            Sets the value of a new child element with an XML namespace value.
            </summary>
            <param name="elementName">The element name.</param>
            <param name="value">The value of the new element.</param>
            <param name="xmlNamespace">The XML namespace.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the value of an attribute.
            </summary>
            <param name="attribute">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.SetValue(System.String)">
            <summary>
            Sets the value of the element.
            </summary>
            <param name="value">The new string value.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.Attribute(System.String)">
            <summary>
            Gets an attribute value.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>Returns an instance of the attribute value.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.Add(Microsoft.Silverlight.Testing.Service.SimpleXElement)">
            <summary>
            Adds a child element to the simple element instance.
            </summary>
            <param name="child">The child element instance.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.Descendants(System.String)">
            <summary>
            Returns descendants.
            </summary>
            <param name="elementName">The element name to look for.</param>
            <returns>Returns an enumeration of elements.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.Parse(System.String)">
            <summary>
            Creates a new SimpleXElement.
            </summary>
            <param name="xml">XML content.</param>
            <returns>Returns a new instance of the element and children.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.ParseInternal(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Parses the current level with the XmlReader instance.
            </summary>
            <param name="reader">The reader instance.</param>
            <param name="isFirst">A value indicating whether this is the first
            parse. Actually this will always be true for now.</param>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.ToString">
            <summary>
            Generates the string representation of the element and its tree.
            </summary>
            <returns>Returns the string representation of the element.</returns>
        </member>
        <member name="M:Microsoft.Silverlight.Testing.Service.SimpleXElement.WriteElement(System.Xml.XmlWriter)">
            <summary>
            Writes to the XML writer without document start and ends.
            </summary>
            <param name="w">The writer instance.</param>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.SimpleXElement.Name">
            <summary>
            Gets the element name.
            </summary>
        </member>
        <member name="P:Microsoft.Silverlight.Testing.Service.SimpleXElement.Value">
            <summary>
            Gets or sets the element text, if any.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\ReferenceAssemblies\system.windows.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Internal.IManagedFrameworkInternalHelper">
      <summary>This type is not intended to be used or implemented by your code. </summary>
    </member>
    <member name="M:Microsoft.Internal.IManagedFrameworkInternalHelper.SetContextEx(System.IntPtr)">
      <summary>[SECURITY CRITICAL] This method is not intended to be used or implemented by your code. </summary>
      <param name="context">Do not use.</param>
    </member>
    <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
      <summary>Represents a dynamic data collection that provides notifications when items get added, removed, or when the entire list is refreshed.</summary>
      <typeparam name="T">The type of items in the collection.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
      <summary>Initializes a new, empty instance of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> class.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> class and populates it with items copied from the specified collection.</summary>
      <param name="collection">The collection from which the items are copied.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> class and populates it with items copied from the specified list.</summary>
      <param name="list">The list from which the items are copied.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
      <summary>Occurs when an item in the collection changes, or the entire collection changes.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary>Inserts an item into the collection at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> event with the provided event data.</summary>
      <param name="e">The event data to report in the event.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> event with the provided arguments.</summary>
      <param name="e">The event data to report in the event.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
      <summary>Occurs when a property on an individual item in the collection changes.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
      <summary>Removes the item at the specified index from the collection.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
      <summary>Replaces the item at the specified index.</summary>
      <param name="index">The zero-based index of the item to replace.</param>
      <param name="item">The new value for the item at the specified index.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
      <summary>Represents a read-only <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.</summary>
      <typeparam name="T">The type of objects that the collection holds.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> class that serves as a wrapper for the specified <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.</summary>
      <param name="list">The collection to wrap.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
      <summary>Occurs when an item is added or removed.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged" /> event. </summary>
      <param name="args">The event data.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged" /> event. </summary>
      <param name="args">The event data.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>For a description of this member, see <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>For a description of this member, see <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
    </member>
    <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
      <summary>Notifies listeners of dynamic changes to a collection, such as when items are added and removed, or the entire collection object is reset.</summary>
    </member>
    <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
      <summary>Occurs when the items list of the collection has changed, or the collection is reset.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
      <summary>Describes the action that caused a <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event. </summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
      <summary>One or more items were added to the collection.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
      <summary>One or more items were removed from the collection.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
      <summary>One or more items were replaced in the collection.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
      <summary>The content of the collection changed dramatically.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
      <summary>Provides event data for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event.</summary>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> class, specifying the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction" /> value.</summary>
      <param name="action">The action value, as a value of the enumeration. This should always be <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />; see Remarks.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" /> is not <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> class that describes an <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> change.</summary>
      <param name="action">The action value, as a value of the enumeration. This should be <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />; see Remarks.</param>
      <param name="changedItem">The item that is affected by the change.</param>
      <param name="index">The index where the change occurred.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" /> is not <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> class that describes a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> change.</summary>
      <param name="action">The action value, as a value of the enumeration. This should be <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />; see Remarks.</param>
      <param name="newItem">The new item that is replacing the original item.</param>
      <param name="oldItem">The original item that is replaced.</param>
      <param name="index">The index of the item being replaced.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" /> is not <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</exception>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
      <summary>Gets the description of the action that caused the event. </summary>
      <returns>The description of the action that caused the event, as a value of the enumeration.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
      <summary>Gets the items affected by an action.</summary>
      <returns>The list of items affected by an action. The default is null.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
      <summary>Gets the index at which the change occurred.</summary>
      <returns>The index at which the change occurred.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
      <summary>Gets the item affected by a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> action.</summary>
      <returns>The list of items affected by a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> action.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
      <summary>Gets the index at which the change occurred for a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> action.</summary>
      <returns>The index at which the change occurred for a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> action.</returns>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
      <summary>Represents the method that handles events that implement the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.ComponentModel.AlternateContentPropertyAttribute">
      <summary>Indicates whether a non-content property should be displayed in the the object tree.</summary>
    </member>
    <member name="M:System.ComponentModel.AlternateContentPropertyAttribute.#ctor"></member>
    <member name="T:System.ComponentModel.ClosingEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Window.Closing" /> event. </summary>
    </member>
    <member name="M:System.ComponentModel.ClosingEventArgs.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ClosingEventArgs" /> class. </summary>
      <param name="isCancelable">Initializes the <see cref="P:System.ComponentModel.ClosingEventArgs.IsCancelable" /> property.</param>
    </member>
    <member name="P:System.ComponentModel.ClosingEventArgs.IsCancelable">
      <summary>Gets a value that indicates whether you can cancel the <see cref="E:System.Windows.Window.Closing" /> event.</summary>
      <returns>true if you can cancel the event; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> class and sets the <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> property to true.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> class and sets the <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> property to the specified value.</summary>
      <param name="isCancelable">true to disable the ability to cancel a <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> change; false to enable cancellation.</param>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.Cancel">
      <summary>Gets or sets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> change should be canceled. </summary>
      <returns>true if the event should be canceled; otherwise, false. The default is false.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> property value is false.</exception>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable">
      <summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> change can be canceled. </summary>
      <returns>true if the event can be canceled; false if the event cannot be canceled.</returns>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventHandler">
      <summary>Represents a method that can handle the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event of an <see cref="T:System.ComponentModel.ICollectionView" /> implementation. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.ComponentModel.DataErrorsChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> event.</summary>
    </member>
    <member name="M:System.ComponentModel.DataErrorsChangedEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs" /> class. </summary>
      <param name="propertyName">The name of the property for which the errors changed, or null or <see cref="F:System.String.Empty" /> if the errors affect multiple properties.</param>
    </member>
    <member name="P:System.ComponentModel.DataErrorsChangedEventArgs.PropertyName">
      <summary>Gets the name of the property for which the errors changed, or null or <see cref="F:System.String.Empty" /> if the errors affect multiple properties.</summary>
      <returns>The name of the affected property, or null or <see cref="F:System.String.Empty" /> if the errors affect multiple properties.</returns>
    </member>
    <member name="T:System.ComponentModel.DesignerProperties">
      <summary>Provides attached properties that can be used to communicate with a designer.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerProperties.GetIsInDesignMode(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.ComponentModel.DesignerProperties.IsInDesignMode" /> attached property for the specified <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>The <see cref="P:System.ComponentModel.DesignerProperties.IsInDesignMode" /> property value for the element.</returns>
      <param name="element">The element from which the property value is read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.ComponentModel.DesignerProperties.IsInDesignMode">
      <summary>Gets or sets whether a <see cref="T:System.Windows.DependencyObject" /> is running in the context of a designer.</summary>
      <returns>A <see cref="T:System.Boolean" /> that indicates whether a <see cref="T:System.Windows.DependencyObject" /> is running in the context of a designer.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignerProperties.IsInDesignModeProperty">
      <summary>Identifies the <see cref="P:System.ComponentModel.DesignerProperties.IsInDesignMode" /> attached property.</summary>
    </member>
    <member name="P:System.ComponentModel.DesignerProperties.IsInDesignTool">
      <summary>Gets a value that indicates whether the element is running in the context of a designer. </summary>
      <returns>true if the element is running in the context of a designer; otherwise, false. </returns>
    </member>
    <member name="M:System.ComponentModel.DesignerProperties.SetIsInDesignMode(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets the value of the <see cref="P:System.ComponentModel.DesignerProperties.IsInDesignMode" /> attached property to a specified element. </summary>
      <param name="element">The element to which the attached property is written.</param>
      <param name="value">The needed <see cref="T:System.Boolean" /> value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="T:System.ComponentModel.GroupDescription">
      <summary>Provides a base class for defining how to divide the items in a collection into groups.</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.GroupDescription" /> class. </summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
      <summary>Returns the group name or names for the specified item.</summary>
      <returns>An object that represents the group name or names.</returns>
      <param name="item">The item to return the group name for.</param>
      <param name="level">The level of the group within the grouping hierarchy.</param>
      <param name="culture">The culture information that affects grouping.</param>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.GroupNames">
      <summary>Gets the collection of group names.</summary>
      <returns>The collection of group names. </returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.NamesMatch(System.Object,System.Object)">
      <summary>Indicates whether the specified item belongs in the specified group.</summary>
      <returns>true if the item belongs in the group; otherwise, false.</returns>
      <param name="groupName">The name of the group to check.</param>
      <param name="itemName">The name of the item to check.</param>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:System.ComponentModel.GroupDescription.PropertyChanged" /> event. </summary>
      <param name="e">The event data.</param>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.PropertyChanged">
      <summary>Occurs when a property value has changed.</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeGroupNames">
      <summary>Indicates whether the group names should be serialized.</summary>
      <returns>true if the group names should be serialized; otherwise, false.</returns>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>For a description of this member, see <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
    </member>
    <member name="T:System.ComponentModel.ICollectionView">
      <summary>Enables collections to have the functionalities of current record management, custom sorting, filtering, and grouping.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanFilter">
      <summary>Gets a value that indicates whether this view supports filtering by way of the <see cref="P:System.ComponentModel.ICollectionView.Filter" /> property.</summary>
      <returns>true if this view supports filtering; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanGroup">
      <summary>Gets a value that indicates whether this view supports grouping by way of the <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions" /> property.</summary>
      <returns>true if this view supports grouping; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanSort">
      <summary>Gets a value that indicates whether this view supports sorting by way of the <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions" /> property.</summary>
      <returns>true if this view supports sorting; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Contains(System.Object)">
      <summary>Indicates whether the specified item belongs to this collection view. </summary>
      <returns>true if the item belongs to this collection view; otherwise, false.</returns>
      <param name="item">The object to check. </param>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Culture">
      <summary>Gets or sets the cultural information for any operations of the view that may differ by culture, such as sorting.</summary>
      <returns>The culture information to use during culture-sensitive operations. </returns>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanged">
      <summary>Occurs after the current item has been changed.</summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanging">
      <summary>Occurs before the current item changes.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentItem">
      <summary>Gets the current item in the view.</summary>
      <returns>The current item in the view or null if there is no current item.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentPosition">
      <summary>Gets the ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view.</summary>
      <returns>The ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.DeferRefresh">
      <summary>Enters a defer cycle that you can use to merge changes to the view and delay automatic refresh. </summary>
      <returns>The typical usage is to create a using scope with an implementation of this method and then include multiple view-changing calls within the scope. The implementation should delay automatic refresh until after the using scope exits. </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Filter">
      <summary>Gets or sets a callback that is used to determine whether an item is appropriate for inclusion in the view. </summary>
      <returns>A method that is used to determine whether an item is appropriate for inclusion in the view.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.GroupDescriptions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.GroupDescription" /> objects that describe how the items in the collection are grouped in the view. </summary>
      <returns>A collection of objects that describe how the items in the collection are grouped in the view. </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Groups">
      <summary>Gets the top-level groups.</summary>
      <returns>A read-only collection of the top-level groups or null if there are no groups.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentAfterLast">
      <summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the end of the collection.</summary>
      <returns>true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the end of the collection; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentBeforeFirst">
      <summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the start of the collection.</summary>
      <returns>true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the start of the collection; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsEmpty">
      <summary>Gets a value that indicates whether the view is empty.</summary>
      <returns>true if the view is empty; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)">
      <summary>Sets the specified item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.</returns>
      <param name="item">The item to set as the current item.</param>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToFirst">
      <summary>Sets the first item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToLast">
      <summary>Sets the last item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToNext">
      <summary>Sets the item after the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)">
      <summary>Sets the item at the specified index to be the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.</returns>
      <param name="position">The index to set the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> to.</param>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPrevious">
      <summary>Sets the item before the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view to the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Refresh">
      <summary>Recreates the view.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SortDescriptions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.SortDescription" /> instances that describe how the items in the collection are sorted in the view.</summary>
      <returns>A collection of values that describe how the items in the collection are sorted in the view.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SourceCollection">
      <summary>Gets the underlying collection.</summary>
      <returns>The underlying collection.</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewFactory">
      <summary>Defines a method that enables a collection to provide a custom view for specialized sorting, filtering, grouping, and currency.</summary>
    </member>
    <member name="M:System.ComponentModel.ICollectionViewFactory.CreateView">
      <summary>Returns a custom view for specialized sorting, filtering, grouping, and currency.</summary>
      <returns>A custom view for specialized sorting, filtering, grouping, and currency.</returns>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionView">
      <summary>Defines methods and properties that a collection view implements to provide editing capabilities to a collection.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.AddNew">
      <summary>Adds a new item to the underlying collection.</summary>
      <returns>The new item that is added to the collection.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanAddNew">
      <summary>Gets a value that indicates whether a new item can be added to the collection.</summary>
      <returns>true if a new item can be added to the collection; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanCancelEdit">
      <summary>Gets a value that indicates whether the collection view can discard pending changes and restore the original values of an edited object.</summary>
      <returns>true if the collection view can discard pending changes and restore the original values of an edited object; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelEdit">
      <summary>Ends the edit transaction and, if possible, restores the original value of the item.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelNew">
      <summary>Ends the add transaction and discards the pending new item.</summary>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanRemove">
      <summary>Gets a value that indicates whether an item can be removed from the collection.</summary>
      <returns>true if an item can be removed from the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitEdit">
      <summary>Ends the edit transaction and saves the pending changes.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitNew">
      <summary>Ends the add transaction and saves the pending new item.</summary>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentAddItem">
      <summary>Gets the item that is being added during the current add transaction.</summary>
      <returns>The item that is being added if <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" /> is true; otherwise, null.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentEditItem">
      <summary>Gets the item in the collection that is being edited.</summary>
      <returns>The item that is being edited if <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" /> is true; otherwise, null.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)">
      <summary>Begins an edit transaction on the specified item.</summary>
      <param name="item">The item to edit.</param>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsAddingNew">
      <summary>Gets a value that indicates whether an add transaction is in progress.</summary>
      <returns>true if an add transaction is in progress; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsEditingItem">
      <summary>Gets a value that indicates whether an edit transaction is in progress.</summary>
      <returns>true if an edit transaction is in progress; otherwise, false.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition">
      <summary>Gets or sets the position of the new item placeholder in the collection view.</summary>
      <returns>An enumeration value that specifies the position of the new item placeholder in the collection view.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)">
      <summary>Removes the specified item from the collection.</summary>
      <param name="item">The item to remove.</param>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)">
      <summary>Removes the item at the specified position from the collection.</summary>
      <param name="index">Index of item to remove.</param>
    </member>
    <member name="T:System.ComponentModel.INotifyDataErrorInfo">
      <summary>Defines members that data entity classes can implement to provide custom, asynchronous validation support.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged">
      <summary>Occurs when the validation errors have changed for a property or for the entire object. </summary>
    </member>
    <member name="M:System.ComponentModel.INotifyDataErrorInfo.GetErrors(System.String)">
      <summary>Gets the validation errors for a specified property or for the entire object.</summary>
      <returns>The validation errors for the property or object.</returns>
      <param name="propertyName">The name of the property to retrieve validation errors for, or null or <see cref="F:System.String.Empty" /> to retrieve errors for the entire object.</param>
    </member>
    <member name="P:System.ComponentModel.INotifyDataErrorInfo.HasErrors">
      <summary>Gets a value that indicates whether the object has validation errors. </summary>
      <returns>true if the object currently has validation errors; otherwise, false.</returns>
    </member>
    <member name="T:System.ComponentModel.NewItemPlaceholderPosition">
      <summary>Specifies the position of the new item placeholder in an <see cref="T:System.ComponentModel.IEditableCollectionView" />.</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.None">
      <summary>Do not include a placeholder.</summary>
    </member>
    <member name="T:System.ComponentModel.SortDescription">
      <summary>Defines the direction and the property name that will be used as the criteria for sorting a collection.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescription.#ctor(System.String,System.ComponentModel.ListSortDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.SortDescription" /> structure. </summary>
      <param name="propertyName">The name of the property to sort the list by.</param>
      <param name="direction">The sort order.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="propertyName" /> parameter is empty.-or-The <paramref name="direction" /> parameter does not specify a valid value.</exception>
    </member>
    <member name="P:System.ComponentModel.SortDescription.Direction">
      <summary>Gets or sets a value that indicates whether to sort in ascending or descending order.</summary>
      <returns>A value that indicates the sort direction. </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.SortDescription.IsSealed" /> is true.</exception>
      <exception cref="T:System.ArgumentException">The specified value is not a valid sort direction.</exception>
    </member>
    <member name="M:System.ComponentModel.SortDescription.Equals(System.Object)">
      <summary>Compares the specified instance and the current instance of <see cref="T:System.ComponentModel.SortDescription" /> for value equality.</summary>
      <returns>true if <paramref name="obj" /> and this <see cref="T:System.ComponentModel.SortDescription" /> instance have the same <see cref="P:System.ComponentModel.SortDescription.PropertyName" /> and <see cref="P:System.ComponentModel.SortDescription.Direction" /> values; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.ComponentModel.SortDescription" /> instance to compare.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescription.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>The hash code for the current instance.</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.IsSealed">
      <summary>Gets a value that indicates whether this structure is in an immutable state. </summary>
      <returns>true if this object is being used; otherwise, false.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Equality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>Compares two <see cref="T:System.ComponentModel.SortDescription" /> instances for value equality. </summary>
      <returns>true if the two <see cref="T:System.ComponentModel.SortDescription" /> instances have the same <see cref="P:System.ComponentModel.SortDescription.PropertyName" /> and <see cref="P:System.ComponentModel.SortDescription.Direction" /> values; otherwise, false.</returns>
      <param name="sd1">The first <see cref="T:System.ComponentModel.SortDescription" /> instance to compare.</param>
      <param name="sd2">The second <see cref="T:System.ComponentModel.SortDescription" /> instance to compare.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Inequality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>Compares two <see cref="T:System.ComponentModel.SortDescription" /> instances for value inequality. </summary>
      <returns>true if the two <see cref="T:System.ComponentModel.SortDescription" /> instances do not have the same <see cref="P:System.ComponentModel.SortDescription.PropertyName" /> and <see cref="P:System.ComponentModel.SortDescription.Direction" /> values; otherwise, false.</returns>
      <param name="sd1">The first <see cref="T:System.ComponentModel.SortDescription" /> instance to compare.</param>
      <param name="sd2">The second <see cref="T:System.ComponentModel.SortDescription" /> instance to compare.</param>
    </member>
    <member name="P:System.ComponentModel.SortDescription.PropertyName">
      <summary>Gets or sets the property name being used as the sorting criteria.</summary>
      <returns>The name of the property to sort by.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.SortDescription.IsSealed" /> is true.</exception>
    </member>
    <member name="T:System.ComponentModel.SortDescriptionCollection">
      <summary>Represents a collection of <see cref="T:System.ComponentModel.SortDescription" /> instances.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.SortDescriptionCollection" /> class.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.ClearItems">
      <summary>Removes all <see cref="T:System.ComponentModel.SortDescription" /> instances from the collection.</summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.CollectionChanged">
      <summary>Occurs when a <see cref="T:System.ComponentModel.SortDescription" /> is added or removed.</summary>
    </member>
    <member name="F:System.ComponentModel.SortDescriptionCollection.Empty">
      <summary>Gets an empty and non-modifiable <see cref="T:System.ComponentModel.SortDescriptionCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.InsertItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>Inserts a <see cref="T:System.ComponentModel.SortDescription" /> into the collection at the specified index.</summary>
      <param name="index">The zero-based index where the <see cref="T:System.ComponentModel.SortDescription" /> is inserted.</param>
      <param name="item">The <see cref="T:System.ComponentModel.SortDescription" /> to insert.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.RemoveItem(System.Int32)">
      <summary>Removes the <see cref="T:System.ComponentModel.SortDescription" /> at the specified index in the collection.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.ComponentModel.SortDescription" /> to remove. </param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.SetItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>Replaces the <see cref="T:System.ComponentModel.SortDescription" /> at the specified index.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.ComponentModel.SortDescription" /> to replace.</param>
      <param name="item">The new value for the <see cref="T:System.ComponentModel.SortDescription" /> at the specified index.</param>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>For a description of this member, see <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageSettings">
      <summary>Provides a <see cref="T:System.Collections.Generic.Dictionary`2" /> that stores key-value pairs in isolated storage. </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. This exception is thrown when you attempt to reference an instance of the class by using an indexer and the variable you pass in for the key value is null.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.Add(System.String,System.Object)">
      <summary>Adds an entry to the dictionary for the key-value pair.</summary>
      <param name="key">The key for the entry to be stored.</param>
      <param name="value">The value to be stored.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> already exists in the dictionary.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.ApplicationSettings">
      <summary>Gets an instance of <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> that contains the contents of the application's <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />, scoped at the application level, or creates a new instance of <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> if one does not exist.</summary>
      <returns>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> object that contains the contents of the application's <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />, scoped at the application level. If an instance does not already exist, a new instance is created.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.Clear">
      <summary>Resets the count of items stored in <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> to zero and releases all references to elements in the collection.</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.Contains(System.String)">
      <summary>Determines if the application settings dictionary contains the specified key.</summary>
      <returns>true if the dictionary contains the specified key; otherwise, false.</returns>
      <param name="key">The key for the entry to be located.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.Count">
      <summary>Gets the number of key-value pairs that are stored in the dictionary.</summary>
      <returns>The number of key-value pairs that are stored in the dictionary.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.Item(System.String)">
      <summary>Gets or sets the value associated with the specified key.</summary>
      <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException" />, and a set operation creates a new element that has the specified key.</returns>
      <param name="key">The key of the item to get or set.</param>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.Keys">
      <summary>Gets a collection that contains the keys in the dictionary.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> that contains the keys in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.Remove(System.String)">
      <summary>Removes the entry with the specified key.</summary>
      <returns>true if the specified key was removed; otherwise, false.</returns>
      <param name="key">The key for the entry to be deleted.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.Save">
      <summary>Saves data written to the current <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> object.</summary>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> does not have enough available free space.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.SiteSettings">
      <summary>Gets an instance of <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> that contains the contents of the application's <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />, scoped at the domain level, or creates a new instance of <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> if one does not exist.</summary>
      <returns>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageSettings" /> object that contains the contents of the application's <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />, scoped at the domain level. If an instance does not already exist, a new instance is created.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)" />.</summary>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to be added.</param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#ICollection{T}#Clear">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Clear" />.</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)" />.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
      <param name="item">The key-value pair for the entry to be located.</param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only; otherwise, false. In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns false.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)" />.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">The key for the entry to be deleted.</param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(System.String)">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified <paramref name="key" />; otherwise, false.</returns>
      <param name="key">The key for the entry to be located.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.IDictionary`2.Keys" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(System.String,System.Object@)">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" />.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified <paramref name="key" />; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.IDictionary`2.Values" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#ICollection#Count">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.Count" />.</summary>
      <returns>The number of elements that are contained in the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false. In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns false.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />.</summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#Clear">
      <summary>For a description of this member, see <see cref="M:System.Collections.IDictionary.Clear" />.</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IDictionary.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified <paramref name="key" />; otherwise, false. </returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IDictionary.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#IsFixedSize">
      <summary>For a description of this member, see <see cref="P:System.Collections.IDictionary.IsFixedSize" />.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> has a fixed size; otherwise, false. In the default implementation of <see cref="T:System.Collections.IDictionary" />, this property always returns false.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.IDictionary.IsReadOnly" />.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> is read-only; otherwise, false. In the default implementation of <see cref="T:System.Collections.IDictionary" />, this property always returns false.</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#Item(System.Object)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IDictionary.Item(System.Object)" />.</summary>
      <returns>The value associated with the specified <paramref name="key" />.</returns>
      <param name="key">The key of the value to get or set.</param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IDictionary#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IDictionary.Remove(System.Object)" />.</summary>
      <param name="key">The key for the entry to be deleted.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageSettings.TryGetValue``1(System.String,``0@)">
      <summary>Gets a value for the specified key.</summary>
      <returns>true if the specified key is found; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> of the <paramref name="value" /> parameter.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageSettings.Values">
      <summary>Gets a collection that contains the values in the dictionary.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> that contains the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="T:System.Net.HttpUtility">
      <summary>Provides methods for encoding and decoding HTML and URL strings.</summary>
    </member>
    <member name="M:System.Net.HttpUtility.HtmlDecode(System.String)">
      <summary>Converts a string that has been HTML-encoded (for HTTP transmission) into a decoded string.</summary>
      <returns>A decoded string.</returns>
      <param name="html">An HTML-encoded string to decode.</param>
    </member>
    <member name="M:System.Net.HttpUtility.HtmlEncode(System.String)">
      <summary>Converts a text string into an HTML-encoded string.</summary>
      <returns>An HTML-encoded string.</returns>
      <param name="html">The text to HTML-encode.</param>
    </member>
    <member name="M:System.Net.HttpUtility.UrlDecode(System.String)">
      <summary>Converts a string that has been encoded for transmission in a URL into a decoded string.</summary>
      <returns>A decoded string.</returns>
      <param name="url">A URL-encoded string to decode.</param>
    </member>
    <member name="M:System.Net.HttpUtility.UrlEncode(System.String)">
      <summary>Converts a text string into a URL-encoded string.</summary>
      <returns>A URL-encoded string.</returns>
      <param name="url">The text to URL-encode.</param>
    </member>
    <member name="T:System.Net.Browser.WebRequestCreator">
      <summary>Provides objects for specifying whether the browser or the client handles HTTP requests and responses. </summary>
    </member>
    <member name="P:System.Net.Browser.WebRequestCreator.BrowserHttp">
      <summary>Gets an object that specifies browser HTTP handling for Web requests and responses.</summary>
      <returns>An <see cref="T:System.Net.IWebRequestCreate" /> object that specifies browser handling for Web requests and responses.</returns>
    </member>
    <member name="P:System.Net.Browser.WebRequestCreator.ClientHttp">
      <summary>Gets an object that specifies client HTTP handling for Web requests and responses.</summary>
      <returns>An <see cref="T:System.Net.IWebRequestCreate" /> object for use with Silverlight-based application that runs outside of a Web browser. </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Automation.AutomationEvent">
      <summary>Represents an Automation event. </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Automation.AutomationEvent.AddEventHandler(System.Delegate)">
      <summary>Attaches the specified delegate to the Automation event. </summary>
      <param name="handler">The delegate to attach to the event. </param>
    </member>
    <member name="E:System.Runtime.InteropServices.Automation.AutomationEvent.EventRaised">
      <summary>Occurs when the Automation event occurs.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Automation.AutomationEvent.RemoveEventHandler(System.Delegate)">
      <summary>Detaches the specified delegate from the Automation event. </summary>
      <param name="handler">The delegate to detach from the event.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.Automation.AutomationEventArgs">
      <summary>Provides data for the <see cref="E:System.Runtime.InteropServices.Automation.AutomationEvent.EventRaised" /> event.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Automation.AutomationEventArgs.Arguments">
      <summary>Gets the event arguments from the Automation event. </summary>
      <returns>The event arguments from the Automation event.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Automation.AutomationFactory">
      <summary>Provides access to registered Automation servers. </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Automation.AutomationFactory.CreateObject``1">
      <summary>Not yet implemented.</summary>
      <returns>null.</returns>
      <typeparam name="T">The type of object to create. </typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Automation.AutomationFactory.CreateObject(System.String)">
      <summary>Activates and returns a reference to the registered Automation server with the specified programmatic identifier (ProgID).</summary>
      <returns>A late-bound reference to the specified automation server.</returns>
      <param name="progID">The ProgID of the registered automation server to activate.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Automation.AutomationFactory.GetEvent(System.Object,System.String)">
      <summary>Gets an object that represents the specified event of the specified Automation server.</summary>
      <returns>An object that represents the specified event.</returns>
      <param name="automationObject">A reference to the Automation server to retrieve an event for.</param>
      <param name="eventName">The name of the event to retrieve.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Automation.AutomationFactory.GetObject(System.String)">
      <summary>Gets a reference to previously activated and currently running Automation server with the specified programmatic identifier (ProgID). </summary>
      <returns>A late-bound reference to the specified automation server. </returns>
      <param name="progID">The ProgID of the registered automation server to retrieve a reference to.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.Automation.AutomationFactory.IsAvailable">
      <summary>Gets a value that indicates whether the Automation feature in Silverlight is available to the application.</summary>
      <returns>true if the Automation feature in Silverlight is available to the application; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Analytics">
      <summary>Exposes read-only data about how an application is performing.</summary>
    </member>
    <member name="M:System.Windows.Analytics.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Analytics" /> class.</summary>
    </member>
    <member name="P:System.Windows.Analytics.AverageProcessLoad">
      <summary>Gets a factor that reports the total load on the CPU that this process is using, determined across all cores averaged together.</summary>
      <returns>A value between 0 and 1 that reports CPU load associated with this process, with the factor determined by examining all cores of a multi-core system averaged together. 0 maps to 0% load while 1 maps to 100% load.</returns>
    </member>
    <member name="P:System.Windows.Analytics.AverageProcessorLoad">
      <summary>Gets a factor that reports the total load on the CPU by all processes, determined across all cores averaged together.</summary>
      <returns>A value between 0 and 1 that reports CPU load by all processes, with the factor determined by examining all cores of a multi-core system averaged together. 0 maps to 0% load while 1 maps to 100% load.</returns>
    </member>
    <member name="M:System.Windows.Analytics.Finalize">
      <summary>Frees resources used by the <see cref="T:System.Windows.Analytics" /> class.</summary>
    </member>
    <member name="P:System.Windows.Analytics.GpuCollection">
      <summary>Gets a collection of <see cref="T:System.Windows.GpuInformation" /> objects which each include details taken from a video driver. </summary>
      <returns>A collection of <see cref="T:System.Windows.GpuInformation" /> objects which each include details taken from a video driver. </returns>
    </member>
    <member name="T:System.Windows.Application">
      <summary>Encapsulates a Silverlight application.</summary>
    </member>
    <member name="M:System.Windows.Application.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Application" /> class.</summary>
    </member>
    <member name="P:System.Windows.Application.ApplicationLifetimeObjects">
      <summary>Gets the application extension services that have been registered for this application.</summary>
      <returns>The registered services. </returns>
    </member>
    <member name="M:System.Windows.Application.CheckAndDownloadUpdateAsync">
      <summary>Launches an asynchronous process to check for and download an updated version of the application.</summary>
    </member>
    <member name="E:System.Windows.Application.CheckAndDownloadUpdateCompleted">
      <summary>Occurs when the application has finished checking for updates in response to a <see cref="M:System.Windows.Application.CheckAndDownloadUpdateAsync" /> method call.</summary>
    </member>
    <member name="P:System.Windows.Application.Current">
      <summary>Gets the <see cref="T:System.Windows.Application" /> object for the current application.</summary>
      <returns>The <see cref="T:System.Windows.Application" /> object for the current application.</returns>
    </member>
    <member name="E:System.Windows.Application.Exit">
      <summary>Occurs just before an application shuts down and cannot be canceled.</summary>
    </member>
    <member name="M:System.Windows.Application.GetResourceStream(System.Uri)">
      <summary>Returns a resource file from a location in the application package.</summary>
      <returns>A <see cref="T:System.Windows.Resources.StreamResourceInfo" /> that contains the stream for the desired resource file.</returns>
      <param name="uriResource">A relative URI that identifies the resource file to be loaded. The URI is relative to the application package and does not need a leading forward slash. </param>
      <exception cref="T:System.ArgumentException">The application class is not initialized.-or-<paramref name="uriResource" /> is an absolute URI.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriResource" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Application.GetResourceStream(System.Windows.Resources.StreamResourceInfo,System.Uri)">
      <summary>Returns a resource file from a location in the specified zip package.</summary>
      <returns>A <see cref="T:System.Windows.Resources.StreamResourceInfo" /> that contains the stream for the desired resource file.</returns>
      <param name="zipPackageStreamResourceInfo">A <see cref="T:System.Windows.Resources.StreamResourceInfo" /> that contains the zip package stream with the desired resource file.</param>
      <param name="uriResource">A relative URI that identifies the resource file to be extracted from the zip package. The URI is relative to the application package and does not need a leading forward slash. </param>
      <exception cref="T:System.ArgumentException">The application class is not initialized.-or-<paramref name="uriResource" /> is an absolute URI.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="zipPackageStreamResourceInfo" /> is null.-or-<paramref name="uriResource" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Application.HasElevatedPermissions">
      <summary>Gets a value that indicates whether the application is running outside the browser with elevated permissions.</summary>
      <returns>true if the application is running outside the browser with elevated permissions; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Application.Host">
      <summary>Gets various details about the Silverlight application's host.</summary>
      <returns>A <see cref="T:System.Windows.Interop.SilverlightHost" /> that provides various details about the Silverlight host application.</returns>
    </member>
    <member name="M:System.Windows.Application.Install">
      <summary>Attempts to install the application so that it can run outside the browser. </summary>
      <returns>true if the user gave consent to install the application or the application requires elevated trust; otherwise, false. See Remarks for more information. </returns>
      <exception cref="T:System.InvalidOperationException">The application is already installed.-or-The application is hosted at a URI with a scheme other than http, https, or file.</exception>
    </member>
    <member name="P:System.Windows.Application.InstallState">
      <summary>Gets the current out-of-browser installation state of the application.</summary>
      <returns>The out-of-browser installation state of the application.</returns>
    </member>
    <member name="E:System.Windows.Application.InstallStateChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Application.InstallState" /> property value changes. </summary>
    </member>
    <member name="P:System.Windows.Application.IsRunningOutOfBrowser">
      <summary>Gets a value that indicates whether the application was launched from the out-of-browser state.</summary>
      <returns>true if the application was launched from the out-of-browser state; false if the application was launched from within its host Web page. </returns>
    </member>
    <member name="M:System.Windows.Application.LoadComponent(System.Object,System.Uri)">
      <summary>Loads a XAML file that is located at the specified Uniform Resource Identifier (URI) and converts it to an instance of the object that is specified by the root element of the XAML file.</summary>
      <param name="component">An object of the same type as the root element of the XAML file to be loaded.</param>
      <param name="resourceLocator">A relative URI that identifies the XAML file to be loaded.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="resourceLocator" /> is an absolute URI.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> is null.-or-<paramref name="resourceLocator" /> is null.</exception>
      <exception cref="T:System.Windows.Markup.XamlParseException">An error occurred while parsing the XAML file.</exception>
    </member>
    <member name="P:System.Windows.Application.MainWindow">
      <summary>Gets the out-of-browser application window.</summary>
      <returns>The out-of-browser application window.</returns>
      <exception cref="T:System.UnauthorizedAccessException">The current thread is not the UI thread.</exception>
    </member>
    <member name="P:System.Windows.Application.Resources">
      <summary>Gets a collection of application-scoped resources, such as styles, templates, and brushes.</summary>
      <returns>A <see cref="T:System.Windows.ResourceDictionary" /> object that contains zero or more application-scoped resources.</returns>
    </member>
    <member name="P:System.Windows.Application.RootVisual">
      <summary>Gets or sets the main application UI.</summary>
      <returns>A <see cref="T:System.Windows.UIElement" /> that is the main application UI.</returns>
      <exception cref="T:System.InvalidOperationException">When setting this property, the specified value is not an instance of a class that derives from <see cref="T:System.Windows.UIElement" />.</exception>
    </member>
    <member name="E:System.Windows.Application.Startup">
      <summary>Occurs when an application is started.</summary>
    </member>
    <member name="E:System.Windows.Application.UnhandledException">
      <summary>Occurs when an exception that is raised by Silverlight is not handled.</summary>
    </member>
    <member name="T:System.Windows.ApplicationServiceContext">
      <summary>Represents the initial state of a Silverlight application when application extension services are started. </summary>
    </member>
    <member name="P:System.Windows.ApplicationServiceContext.ApplicationInitParams">
      <summary>Gets the initialization parameters specified by the host Web page when embedding the Silverlight plug-in. </summary>
      <returns>The initialization parameters as a dictionary of key/value pairs. </returns>
    </member>
    <member name="T:System.Windows.ApplicationUnhandledExceptionEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Application.UnhandledException" /> event.</summary>
    </member>
    <member name="M:System.Windows.ApplicationUnhandledExceptionEventArgs.#ctor(System.Exception,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.ApplicationUnhandledExceptionEventArgs" /> class.</summary>
      <param name="ex">The exception that is being thrown as unhandled.</param>
      <param name="handled">A value that indicates whether the exception has been handled and should not be processed further.</param>
    </member>
    <member name="P:System.Windows.ApplicationUnhandledExceptionEventArgs.ExceptionObject">
      <summary>Gets or sets the unhandled exception.</summary>
      <returns>The unhandled exception.</returns>
    </member>
    <member name="P:System.Windows.ApplicationUnhandledExceptionEventArgs.Handled">
      <summary>Gets or sets a value that indicates whether the exception is handled.</summary>
      <returns>true to mark the exception as handled, which indicates that Silverlight should not process it further; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.AssemblyPart">
      <summary>An assembly part is an assembly that is to be included in a Silverlight-based application package (.xap).</summary>
    </member>
    <member name="M:System.Windows.AssemblyPart.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.AssemblyPart" /> class.</summary>
    </member>
    <member name="M:System.Windows.AssemblyPart.Load(System.IO.Stream)">
      <summary>Converts a <see cref="T:System.IO.Stream" /> to an <see cref="T:System.Reflection.Assembly" /> that is subsequently loaded into the current application domain.</summary>
      <returns>The <see cref="T:System.Reflection.Assembly" /> that is subsequently loaded into the current application domain.</returns>
      <param name="assemblyStream">The <see cref="T:System.IO.Stream" /> to load into the current application domain.</param>
    </member>
    <member name="P:System.Windows.AssemblyPart.Source">
      <summary>Gets the <see cref="T:System.Uri" /> that identifies an assembly as an assembly part.</summary>
      <returns>A <see cref="T:System.String" /> that is the assembly, which is identified as an assembly part.</returns>
    </member>
    <member name="F:System.Windows.AssemblyPart.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.AssemblyPart.Source" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.AssemblyPart.Source" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.AssemblyPartCollection">
      <summary>Stores a collection of <see cref="T:System.Windows.AssemblyPart" /> objects. Provides collection support for the <see cref="P:System.Windows.Deployment.Parts" /> property.</summary>
    </member>
    <member name="M:System.Windows.AssemblyPartCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.AssemblyPartCollection" /> class.</summary>
    </member>
    <member name="T:System.Windows.CheckAndDownloadUpdateCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Application.CheckAndDownloadUpdateCompleted" /> event. </summary>
    </member>
    <member name="P:System.Windows.CheckAndDownloadUpdateCompletedEventArgs.Error">
      <summary>Gets an exception that represents an error that occurred when attempting to download an update. </summary>
      <returns>An exception that represents the error, or null if no error occurred.</returns>
    </member>
    <member name="P:System.Windows.CheckAndDownloadUpdateCompletedEventArgs.UpdateAvailable">
      <summary>Gets a value that indicates whether a new version of the application was successfully downloaded and will be used on the next application launch. </summary>
      <returns>true if an update is available; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.CheckAndDownloadUpdateCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Application.CheckAndDownloadUpdateCompleted" /> event. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Clipboard">
      <summary>Provides static methods that facilitate transferring data to and from the system clipboard. In Silverlight 4 RC, this access is limited to Unicode text strings.</summary>
    </member>
    <member name="M:System.Windows.Clipboard.ContainsText">
      <summary>Queries the clipboard for the presence of data in the UnicodeText format.</summary>
      <returns>true if the system clipboard contains Unicode text data; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.GetText">
      <summary>Retrieves Unicode text data from the system clipboard, if Unicode text data exists.</summary>
      <returns>If Unicode text data is present on the system clipboard, returns a string that contains the Unicode text data. Otherwise, returns an empty string.</returns>
      <exception cref="T:System.Security.SecurityException">Invoked this method from outside a user-initiated context.-or-Clipboard access user dialog box was not confirmed.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.SetText(System.String)">
      <summary>Sets Unicode text data to store on the clipboard, for later access with <see cref="M:System.Windows.Clipboard.GetText" />.</summary>
      <param name="text">A string that contains the Unicode text data to store on the clipboard.</param>
      <exception cref="T:System.Security.SecurityException">Invoked this method from outside a user-initiated context.-or-Clipboard access user dialog box was not confirmed.</exception>
    </member>
    <member name="T:System.Windows.CornerRadius">
      <summary>Describes the characteristics of a rounded corner, such as can be applied to a <see cref="T:System.Windows.Controls.Border" />.</summary>
    </member>
    <member name="M:System.Windows.CornerRadius.#ctor(System.Double)">
      <summary>Initializes a new <see cref="T:System.Windows.CornerRadius" /> structure, applying the same uniform radius to all its corners.</summary>
      <param name="uniformRadius">A uniform radius applied to all four <see cref="T:System.Windows.CornerRadius" /> properties (<see cref="P:System.Windows.CornerRadius.TopLeft" />, <see cref="P:System.Windows.CornerRadius.TopRight" />, <see cref="P:System.Windows.CornerRadius.BottomRight" />, <see cref="P:System.Windows.CornerRadius.BottomLeft" />).</param>
    </member>
    <member name="M:System.Windows.CornerRadius.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.CornerRadius" /> structure, applying specific radius values to its corners.</summary>
      <param name="topLeft">Sets the initial <see cref="P:System.Windows.CornerRadius.TopLeft" />.</param>
      <param name="topRight">Sets the initial <see cref="P:System.Windows.CornerRadius.TopRight" />.</param>
      <param name="bottomRight">Sets the initial <see cref="P:System.Windows.CornerRadius.BottomLeft" />.</param>
      <param name="bottomLeft">Sets the initial <see cref="P:System.Windows.CornerRadius.BottomRight" />.</param>
    </member>
    <member name="P:System.Windows.CornerRadius.BottomLeft">
      <summary>Gets or sets the radius of rounding, in pixels, of the bottom left corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the radius of rounding, in pixels, of the bottom left corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied. The default is 0.</returns>
    </member>
    <member name="P:System.Windows.CornerRadius.BottomRight">
      <summary>Gets or sets the radius of rounding, in pixels, of the bottom right corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the radius of rounding, in pixels, of the bottom right corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied. The default is 0.</returns>
    </member>
    <member name="M:System.Windows.CornerRadius.Equals(System.Object)">
      <summary>Compares this <see cref="T:System.Windows.CornerRadius" /> structure to another object for equality.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Windows.CornerRadius.Equals(System.Windows.CornerRadius)">
      <summary>Compares this <see cref="T:System.Windows.CornerRadius" /> structure to another <see cref="T:System.Windows.CornerRadius" /> structure for equality.</summary>
      <returns>true if the two instances of <see cref="T:System.Windows.CornerRadius" />  are equal; otherwise, false.</returns>
      <param name="cornerRadius">An instance of <see cref="T:System.Windows.CornerRadius" /> to compare for equality.</param>
    </member>
    <member name="M:System.Windows.CornerRadius.GetHashCode">
      <summary>Returns the hash code of the structure.</summary>
      <returns>A hash code for this <see cref="T:System.Windows.CornerRadius" />.</returns>
    </member>
    <member name="M:System.Windows.CornerRadius.op_Equality(System.Windows.CornerRadius,System.Windows.CornerRadius)">
      <summary>Compares the value of two <see cref="T:System.Windows.CornerRadius" /> structures for equality.</summary>
      <returns>true if the two instances of <see cref="T:System.Windows.CornerRadius" /> are equal; otherwise, false.</returns>
      <param name="cr1">The first structure to compare.</param>
      <param name="cr2">The other structure to compare.</param>
    </member>
    <member name="M:System.Windows.CornerRadius.op_Inequality(System.Windows.CornerRadius,System.Windows.CornerRadius)">
      <summary>Compares two <see cref="T:System.Windows.CornerRadius" /> structures for inequality. </summary>
      <returns>true if the two instances of <see cref="T:System.Windows.CornerRadius" /> are not equal; otherwise, false.</returns>
      <param name="cr1">The first structure to compare.</param>
      <param name="cr2">The other structure to compare.</param>
    </member>
    <member name="P:System.Windows.CornerRadius.TopLeft">
      <summary>Gets or sets the radius of rounding, in pixels, of the top left corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the radius of rounding, in pixels, of the top left corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied. The default is 0.</returns>
    </member>
    <member name="P:System.Windows.CornerRadius.TopRight">
      <summary>Gets or sets the radius of rounding, in pixels, of the top right corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the radius of rounding, in pixels, of the top right corner of the object where a <see cref="T:System.Windows.CornerRadius" /> is applied. The default is 0.</returns>
    </member>
    <member name="M:System.Windows.CornerRadius.ToString">
      <summary>Returns the string representation of the <see cref="T:System.Windows.CornerRadius" /> structure.</summary>
      <returns>A <see cref="T:System.String" /> that represents the <see cref="T:System.Windows.CornerRadius" /> value.</returns>
    </member>
    <member name="T:System.Windows.CrossDomainAccess">
      <summary>Defines values that specify the access that cross-domain callers have to a Silverlight-based application.</summary>
    </member>
    <member name="F:System.Windows.CrossDomainAccess.NoAccess">
      <summary>Cross-domain callers have no access to the Silverlight application.</summary>
    </member>
    <member name="F:System.Windows.CrossDomainAccess.ScriptableOnly">
      <summary>Cross-domain callers have script access to the Silverlight application.</summary>
    </member>
    <member name="T:System.Windows.DataFormats">
      <summary>Provides static, predefined format names for data objects. Use the named constants to identify the format of the data that you request from an <see cref="T:System.Windows.IDataObject" /> object.</summary>
    </member>
    <member name="F:System.Windows.DataFormats.FileDrop">
      <summary>Specifies the Microsoft Windows file drop format.</summary>
      <returns>The string specifying the Microsoft Windows file drop format.</returns>
    </member>
    <member name="T:System.Windows.DataObject">
      <summary>Provides a basic implementation of the <see cref="T:System.Windows.IDataObject" /> interface, which defines a format-independent mechanism for transferring data.</summary>
    </member>
    <member name="M:System.Windows.DataObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DataObject" /> class. </summary>
    </member>
    <member name="M:System.Windows.DataObject.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DataObject" /> class, with specified initial data. </summary>
      <param name="data">An object that represents the data to store in this data object.</param>
      <exception cref="T:System.NotImplementedException">Not implemented.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetData(System.String)">
      <summary>Retrieves a data object in a specified format; the data format is specified by a string.</summary>
      <returns>A data object that has the data in the specified format, or null if the data is not available in the specified format.</returns>
      <param name="format">A string that specifies what format to retrieve the data as. Use the constant <see cref="F:System.Windows.DataFormats.FileDrop" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="format" /> is not equivalent to <see cref="F:System.Windows.DataFormats.FileDrop" />.</exception>
      <exception cref="T:System.Security.SecurityException">Attempted access in a mode other than Drop.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetData(System.String,System.Boolean)">
      <summary>Retrieves a data object in a specified format, optionally converting the data to the specified format. Always throws an exception.</summary>
      <returns>Always throws an exception.</returns>
      <param name="format">A string that specifies the format in which to retrieve the data. </param>
      <param name="autoConvert">true to attempt to automatically convert the data to the specified format; false for no data format conversion.</param>
      <exception cref="T:System.NotImplementedException">Not implemented.</exception>
      <exception cref="T:System.Security.SecurityException">Attempted access in a mode other than Drop.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetData(System.Type)">
      <summary>Retrieves a data object in a specified format; the data format is specified by a <see cref="T:System.Type" /> object. Always throws an exception.</summary>
      <returns>Always throws an exception.</returns>
      <param name="format">A <see cref="T:System.Type" /> object that specifies the format in which to retrieve the data. </param>
      <exception cref="T:System.NotImplementedException">Not implemented.</exception>
      <exception cref="T:System.Security.SecurityException">Attempted access in a mode other than Drop.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetDataPresent(System.String)">
      <summary>Checks to see whether the data is available in, or can be converted to, a specified format; the data format is specified by a string.</summary>
      <returns>true if the data is in the specified format, and is not null. false if <paramref name="format" /> is not equivalent to <see cref="F:System.Windows.DataFormats.FileDrop" />, or if the data is null.</returns>
      <param name="format">A string that specifies the format to check for. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
      <exception cref="T:System.Security.SecurityException">Attempted access in a mode other than Drop.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetDataPresent(System.String,System.Boolean)">
      <summary>Checks whether the data is available in, or can be converted to, a specified format. A Boolean flag indicates whether to check if the data can be converted to the specified format, if it is not available in that format. Always throws an exception.</summary>
      <returns>Always throws an exception.</returns>
      <param name="format">A string that specifies the format to check for. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
      <param name="autoConvert">false to only check for the specified format; true to also check whether data stored in this data object can be converted to the specified format.</param>
      <exception cref="T:System.NotImplementedException">Not implemented.</exception>
      <exception cref="T:System.Security.SecurityException">Attempted access in a mode other than Drop.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetDataPresent(System.Type)">
      <summary>Checks whether the data is available in, or can be converted to, a specified format. The data format is specified by a <see cref="T:System.Type" /> object. Always throws an exception.</summary>
      <returns>Always throws an exception.</returns>
      <param name="format">A <see cref="T:System.Type" /> that specifies the format to check for.</param>
      <exception cref="T:System.NotImplementedException">Not implemented.</exception>
      <exception cref="T:System.Security.SecurityException">Attempted access in a mode other than Drop.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetFormats">
      <summary>Returns a list of all formats that the data in this data object is stored in, or can be converted to.</summary>
      <returns>An array of strings, with each string specifying the name of a format supported by this data object.</returns>
      <exception cref="T:System.Security.SecurityException">Attempted access in a mode other than Drop.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetFormats(System.Boolean)">
      <summary>Returns a list of all formats that the data in this data object is stored in. A Boolean flag indicates whether to also include formats that the data can be automatically converted to. Always throws an exception.</summary>
      <returns>Always throws an exception.</returns>
      <param name="autoConvert">true to retrieve all formats that data in this data object is stored in, or converted to; false to retrieve only formats that data stored in this data object is stored in (excluding formats that the data is not stored in, but can be automatically converted to).</param>
      <exception cref="T:System.NotImplementedException">Not implemented.</exception>
      <exception cref="T:System.Security.SecurityException">Attempted access in a mode other than Drop.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetData(System.Object)">
      <summary>Stores the specified data in this data object and automatically converts the data format from the source object type. Always throws an exception.</summary>
      <param name="data">The data to store in this data object.</param>
      <exception cref="T:System.NotImplementedException">Not implemented.</exception>
      <exception cref="T:System.Security.SecurityException">Attempted access in a mode other than Drop.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetData(System.String,System.Object)">
      <summary>Stores the specified data in this data object, along with one or more specified data formats. The data format is specified by a string. Always throws an exception.</summary>
      <param name="format">A string that specifies what format to store the data in. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
      <param name="data">The data to store in this data object.</param>
      <exception cref="T:System.NotImplementedException">Not implemented.</exception>
      <exception cref="T:System.Security.SecurityException">Attempted access in a mode other than Drop.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetData(System.String,System.Object,System.Boolean)">
      <summary>Stores the specified data in this data object, together with one or more specified data formats. This overload includes a Boolean flag to indicate whether the data may be converted to another format on retrieval. Always throws an exception.</summary>
      <param name="format">A string that specifies the format in which to store the data. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
      <param name="data">The data to store in this data object.</param>
      <param name="autoConvert">true to allow the data to be converted to another format on retrieval; false to prohibit the data from being converted to another format on retrieval.</param>
      <exception cref="T:System.NotImplementedException">Not implemented.</exception>
      <exception cref="T:System.Security.SecurityException">Attempted access in a mode other than Drop.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetData(System.Type,System.Object)">
      <summary>Stores the specified data in this data object, together with one or more specified data formats. The data format is specified by a <see cref="T:System.Type" /> class. Always throws an exception.</summary>
      <param name="format">A <see cref="T:System.Type" /> that specifies the format in which to store the data.</param>
      <param name="data">The data to store in this data object.</param>
      <exception cref="T:System.NotImplementedException">Not implemented.</exception>
      <exception cref="T:System.Security.SecurityException">Attempted access in a mode other than Drop.</exception>
    </member>
    <member name="T:System.Windows.DataTemplate">
      <summary>Describes the visual structure of a data object.</summary>
    </member>
    <member name="M:System.Windows.DataTemplate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DataTemplate" /> class.</summary>
    </member>
    <member name="M:System.Windows.DataTemplate.LoadContent">
      <summary>Creates the <see cref="T:System.Windows.UIElement" /> objects in the <see cref="T:System.Windows.DataTemplate" />. </summary>
      <returns>The root <see cref="T:System.Windows.UIElement" /> of the <see cref="T:System.Windows.DataTemplate" />.</returns>
    </member>
    <member name="T:System.Windows.DependencyObject">
      <summary>Represents an object that participates in the Silverlight dependency property system. <see cref="T:System.Windows.DependencyObject" /> is the immediate base class of several other important Silverlight classes, such as <see cref="T:System.Windows.UIElement" />, <see cref="T:System.Windows.Media.Geometry" />, <see cref="T:System.Windows.FrameworkTemplate" />, <see cref="T:System.Windows.Style" />, and <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class.</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.CheckAccess">
      <summary>Determines whether the calling thread has access to this object.</summary>
      <returns>true if the calling thread has access to this object; otherwise, false. </returns>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
      <summary>Clears the local value of a dependency property. </summary>
      <param name="dp">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to clear the value for.</param>
    </member>
    <member name="P:System.Windows.DependencyObject.Dispatcher">
      <summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> this object is associated with. </summary>
      <returns>The <see cref="T:System.Windows.Threading.Dispatcher" /> this object is associated with. </returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetAnimationBaseValue(System.Windows.DependencyProperty)">
      <summary>Returns any base value established for a Silverlight dependency property, which would apply in cases where an animation is not active.</summary>
      <returns>The returned base value.</returns>
      <param name="dp">The identifier for the desired dependency property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dp" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
      <summary>Returns the current effective value of a dependency property from a <see cref="T:System.Windows.DependencyObject" />. </summary>
      <returns>Returns the current effective value.</returns>
      <param name="dp">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dp" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
      <summary>Returns the local value of a dependency property, if a local value is set. </summary>
      <returns>Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.</returns>
      <param name="dp">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the local value for.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
      <summary>Sets the local value of a dependency property on a <see cref="T:System.Windows.DependencyObject" />. </summary>
      <param name="dp">The identifier of the dependency property to set.</param>
      <param name="value">The new local value.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</exception>
    </member>
    <member name="T:System.Windows.DependencyObjectCollection`1">
      <summary>Represents a collection of <see cref="T:System.Windows.DependencyObject" /> instances of a specified type.</summary>
      <typeparam name="T">The type of items in the collection.</typeparam>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DependencyObjectCollection`1" /> class. </summary>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.Add(`0)">
      <summary>Adds the specified object to the end of the collection.</summary>
      <param name="item">The object to add to the collection.</param>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.Clear">
      <summary>Removes all objects from the collection.</summary>
    </member>
    <member name="E:System.Windows.DependencyObjectCollection`1.CollectionChanged">
      <summary>Occurs when items in the collection are added, removed, or replaced.</summary>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.Contains(`0)">
      <summary>Gets a value that indicates whether the specified object is in the collection.</summary>
      <returns>true if the object is in the collection; otherwise, false.</returns>
      <param name="item">The object to check for in the collection.</param>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the objects in the collection to the specified array, starting at the specified index.</summary>
      <param name="array">The destination array.</param>
      <param name="arrayIndex">The index of the first object to copy.</param>
    </member>
    <member name="P:System.Windows.DependencyObjectCollection`1.Count">
      <summary>Gets the number of objects in the collection.</summary>
      <returns>The number of objects in the collection.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.GetEnumerator">
      <summary>Gets an enumerator that iterates through the collection.</summary>
      <returns>An enumerator for the collection.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.IndexOf(`0)">
      <summary>Gets the index of the specified object within the collection, or -1 if the object is not in the collection.</summary>
      <returns>The index of the first occurrence of <paramref name="item" /> within the collection, or -1 if <paramref name="item" /> is not in the collection.</returns>
      <param name="item">The object to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.Insert(System.Int32,`0)">
      <summary>Adds the specified object to the collection at the specified index.</summary>
      <param name="index">The index at which to add the object.</param>
      <param name="item">The object to add.</param>
    </member>
    <member name="P:System.Windows.DependencyObjectCollection`1.IsReadOnly">
      <summary>Gets a value that indicates whether the collection can be modified.</summary>
      <returns>true if the collection can be modified; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectCollection`1.Item(System.Int32)">
      <summary>Gets or sets the object at the specified index.</summary>
      <returns>The object at the specified index.</returns>
      <param name="index">The index of the object to get or set.</param>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.Remove(`0)">
      <summary>Removes the specified object from the collection.</summary>
      <returns>true if the object was removed; false if the object was not found in the collection.</returns>
      <param name="item">The object to remove.</param>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.RemoveAt(System.Int32)">
      <summary>Removes the object at the specified index from the collection.</summary>
      <param name="index">The index of the object to remove.</param>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the objects in the collection to the specified array, starting at the specified index.</summary>
      <param name="array">The destination array.</param>
      <param name="index">The index of the first object to copy.</param>
    </member>
    <member name="P:System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#Count">
      <summary>Gets the number of objects in the collection.</summary>
      <returns>The number of objects in the collection.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized (thread safe). </summary>
      <returns>true if access to the collection is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets an enumerator that iterates through the collection.</summary>
      <returns>An enumerator for the collection.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>Adds the specified object to the end of the collection.</summary>
      <returns>The index at which the object was added.</returns>
      <param name="value">The object to add to the collection.</param>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.System#Collections#IList#Clear">
      <summary>Removes all objects from the collection.</summary>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>Gets a value that indicates whether the specified object is in the collection.</summary>
      <returns>true if the object is in the collection; otherwise, false.</returns>
      <param name="value">The object to check for in the collection.</param>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Gets the index of the specified object within the collection, or -1 if the object is not in the collection.</summary>
      <returns>The index of the first occurrence of <paramref name="item" /> within the collection, or -1 if <paramref name="item" /> is not in the collection.</returns>
      <param name="value">The object to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Adds the specified object to the collection at the specified index.</summary>
      <param name="index">The index at which to add the object.</param>
      <param name="value">The object to add.</param>
    </member>
    <member name="P:System.Windows.DependencyObjectCollection`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value that indicates whether the collection allows the addition or removal of objects after creation.</summary>
      <returns>true if the collection has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectCollection`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value that indicates whether the collection can be modified.</summary>
      <returns>true if the collection can be modified; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the object at the specified index.</summary>
      <returns>The object at the specified index.</returns>
      <param name="index">The index of the object to get or set.</param>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the specified object from the collection.</summary>
      <param name="value">The object to remove.</param>
    </member>
    <member name="M:System.Windows.DependencyObjectCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes the object at the specified index from the collection.</summary>
      <param name="index">The index of the object to remove.</param>
    </member>
    <member name="T:System.Windows.DependencyProperty">
      <summary>Represents a dependency property that is registered with the Silverlight dependency property system. Dependency properties provide support for value expressions, data binding, animation, and property change notification.</summary>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Type)">
      <summary>Retrieves the property metadata value for the dependency property as registered to the specified <see cref="T:System.Type" />.</summary>
      <returns>A property metadata object.</returns>
      <param name="forType">The specific type from which to retrieve the dependency property metadata.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registers a dependency property with the specified property name, property type, owner type, and property metadata for the property. </summary>
      <returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. The identifier is then used both by your own code and any third-party user code to reference the dependency property later, for operations such as setting its value programmatically, or attaching a <see cref="T:System.Windows.Data.Binding" /> in code.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="typeMetadata">A property metadata instance. This can contain a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter was null (check the exception for the name of the missing parameter).</exception>
      <exception cref="T:System.ArgumentException">A parameter was out of range, for instance <paramref name="name" /> was an empty string.-or-Attempted to register with a <paramref name="propertyType" /> that does not match a default value specified in the <paramref name="typeMetadata" />.</exception>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registers an attached dependency property with the specified property name, property type, owner type, and property metadata for the property. </summary>
      <returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the attached property later, for operations such as setting its value programmatically, or attaching a  <see cref="T:System.Windows.Data.Binding" />.</returns>
      <param name="name">The name of the dependency property to register.</param>
      <param name="propertyType">The type of the property.</param>
      <param name="ownerType">The owner type that is registering the dependency property.</param>
      <param name="defaultMetadata">A property metadata instance. This can contain a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference.</param>
    </member>
    <member name="F:System.Windows.DependencyProperty.UnsetValue">
      <summary>Specifies a static value that is used by the property system rather than null to indicate that the property exists, but does not have its value set by the property system.</summary>
      <returns>The sentinel value for an unset value.</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventArgs">
      <summary>Provides data for a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation.</summary>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
      <summary>Gets the value of the property after the change.</summary>
      <returns>The property value after the change.</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
      <summary>Gets the value of the property before the change.</summary>
      <returns>The property value before the change.</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
      <summary>Gets the identifier for the dependency property where the value change occurred.</summary>
      <returns>The identifier field of the dependency property where the value change occurred.</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventHandler">
      <summary>Represents the method that will handle events raised when a <see cref="T:System.Windows.DependencyProperty" /> is changed on a particular <see cref="T:System.Windows.DependencyObject" /> implementation. </summary>
      <param name="sender">The source of the event (typically the object where the property changed).</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Deployment">
      <summary>Provides application part and localization information in the application manifest when deploying a Silverlight-based application.</summary>
    </member>
    <member name="M:System.Windows.Deployment.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Deployment" /> class.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Deployment.Current" /> property has already been initialized. </exception>
    </member>
    <member name="P:System.Windows.Deployment.Current">
      <summary>Gets the current <see cref="T:System.Windows.Deployment" /> object. </summary>
      <returns>The current <see cref="T:System.Windows.Deployment" /> object.</returns>
    </member>
    <member name="P:System.Windows.Deployment.EntryPointAssembly">
      <summary>Gets a string name that identifies which part in the <see cref="T:System.Windows.Deployment" /> is the entry point assembly.</summary>
      <returns>A string that names the assembly that should be used as the entry point assembly. This is expected to be the name of one of the assemblies you specified as an <see cref="T:System.Windows.AssemblyPart" />.</returns>
    </member>
    <member name="F:System.Windows.Deployment.EntryPointAssemblyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Deployment.EntryPointAssembly" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Deployment.EntryPointAssembly" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Deployment.EntryPointType">
      <summary>Gets a string that identifies the namespace and type name of the class that contains the <see cref="T:System.Windows.Application" /> entry point for your application.</summary>
      <returns>The namespace and type name of the class that contains the <see cref="T:System.Windows.Application" /> entry point.</returns>
    </member>
    <member name="F:System.Windows.Deployment.EntryPointTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Deployment.EntryPointType" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Deployment.EntryPointType" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Deployment.ExternalCallersFromCrossDomain">
      <summary>Gets a value that indicates the level of access that cross-domain callers have to the Silverlight-based application in this deployment.</summary>
      <returns>A value that indicates the access level of cross-domain callers.</returns>
    </member>
    <member name="F:System.Windows.Deployment.ExternalCallersFromCrossDomainProperty">
      <summary>Identifies the <see cref="P:System.Windows.Deployment.ExternalCallersFromCrossDomain" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Deployment.ExternalCallersFromCrossDomain" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Deployment.ExternalParts">
      <summary>Gets a collection of <see cref="T:System.Windows.ExternalPart" /> instances that represent the external assemblies required by the application.</summary>
      <returns>The collection of external assembly parts. The default is an empty collection.</returns>
    </member>
    <member name="F:System.Windows.Deployment.ExternalPartsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Deployment.ExternalParts" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Deployment.ExternalParts" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Deployment.GetAppIdForUri(System.Uri,System.String@)">
      <summary>[SECURITY CRITICAL] Gets a value that represents a unique ID for an out-of-browser application.</summary>
      <returns>A unique ID for the out-of-browser application. </returns>
      <param name="AppUri">The absolute URI of the application's .xap file on its host server.</param>
      <param name="xapLocationStr">When this method returns, contains the local path to the .xap file in the offline application cache. This parameter is passed uninitialized. </param>
    </member>
    <member name="P:System.Windows.Deployment.OutOfBrowserSettings">
      <summary>Gets an object that contains information about the application that is used for out-of-browser support. </summary>
      <returns>Information about the application that is used for out-of-browser support. </returns>
    </member>
    <member name="F:System.Windows.Deployment.OutOfBrowserSettingsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Deployment.OutOfBrowserSettings" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Deployment.OutOfBrowserSettings" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Deployment.Parts">
      <summary>Gets a collection of assembly parts that are included in the deployment.</summary>
      <returns>The collection of assembly parts. The default is an empty collection.</returns>
    </member>
    <member name="F:System.Windows.Deployment.PartsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Deployment.Parts" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Deployment.Parts" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Deployment.RegisterAssembly(System.Reflection.Assembly)">
      <summary>[SECURITY CRITICAL] Enables a native Silverlight host, such as Expression Blend or Visual Studio, to instruct Silverlight to register an assembly that the Silverlight host has separately loaded into the host-managed application domain in which a Silverlight application is running.</summary>
      <param name="assembly">The assembly that the Silverlight host has separately loaded.</param>
    </member>
    <member name="P:System.Windows.Deployment.RuntimeVersion">
      <summary>Gets the Silverlight runtime version that this deployment supports.</summary>
      <returns>The Silverlight runtime version that this deployment supports.</returns>
    </member>
    <member name="F:System.Windows.Deployment.RuntimeVersionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Deployment.RuntimeVersion" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Deployment.RuntimeVersion" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Deployment.SetCurrentApplication(System.Windows.Application)">
      <summary>[SECURITY CRITICAL] Allows a native host of the Silverlight plug-in to specify the current <see cref="T:System.Windows.Application" /> object of the running Silverlight application.</summary>
      <param name="application">The <see cref="T:System.Windows.Application" /> object that the native host is setting as the current <see cref="T:System.Windows.Application" />.</param>
    </member>
    <member name="T:System.Windows.DragEventArgs">
      <summary>Provides data for drag-and-drop events in Silverlight. </summary>
    </member>
    <member name="P:System.Windows.DragEventArgs.Data">
      <summary>Gets a data object (implements <see cref="T:System.Windows.IDataObject" />) that contains the data associated with the corresponding drag event. This value is not useful in all event cases; see Remarks.</summary>
      <returns>The data object that contains the data that is associated with the corresponding drag event.</returns>
    </member>
    <member name="M:System.Windows.DragEventArgs.GetPosition(System.Windows.UIElement)">
      <summary>Returns a drop point that is relative to a specified <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>A drop point that is relative to the element specified in <paramref name="relativeTo" />.</returns>
      <param name="relativeTo">The <see cref="T:System.Windows.UIElement" /> for which to get a relative drop point.</param>
    </member>
    <member name="P:System.Windows.DragEventArgs.Handled">
      <summary>Gets or sets a value that indicates the present state of the event handling for a routed event as it travels the route.</summary>
      <returns>true if the event is marked handled; otherwise, false. The default value is false.</returns>
    </member>
    <member name="T:System.Windows.DragEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.UIElement.DragEnter" />, <see cref="E:System.Windows.UIElement.DragLeave" />, <see cref="E:System.Windows.UIElement.DragOver" />, and <see cref="E:System.Windows.UIElement.Drop" /> events of a <see cref="T:System.Windows.UIElement" />. </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Duration">
      <summary>Represents the duration of time that a <see cref="T:System.Windows.Media.Animation.Timeline" /> is active.</summary>
    </member>
    <member name="M:System.Windows.Duration.#ctor(System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Duration" /> structure with the supplied <see cref="T:System.TimeSpan" /> value.</summary>
      <param name="timeSpan">Represents the initial time interval of this duration.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeSpan" /> evaluates as less than <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:System.Windows.Duration.Add(System.Windows.Duration)">
      <summary>Adds the value of the specified <see cref="T:System.Windows.Duration" /> to this <see cref="T:System.Windows.Duration" />.</summary>
      <returns>If each involved <see cref="T:System.Windows.Duration" /> has values, a <see cref="T:System.Windows.Duration" /> that represents the combined values. Otherwise this method returns null.</returns>
      <param name="duration">An instance of <see cref="T:System.Windows.Duration" /> that represents the value of the current instance plus <paramref name="duration" />.</param>
    </member>
    <member name="P:System.Windows.Duration.Automatic">
      <summary>Gets a <see cref="T:System.Windows.Duration" /> value that is automatically determined.</summary>
      <returns>A <see cref="T:System.Windows.Duration" /> initialized to an automatic value.</returns>
    </member>
    <member name="M:System.Windows.Duration.Compare(System.Windows.Duration,System.Windows.Duration)">
      <summary>Compares one <see cref="T:System.Windows.Duration" /> value to another.</summary>
      <returns>If <paramref name="t1" /> is less than <paramref name="t2" />, a negative value that represents the difference. If <paramref name="t1" /> is equal to <paramref name="t2" />, a value of 0. If <paramref name="t1" /> is greater than <paramref name="t2" />, a positive value that represents the difference.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.Equals(System.Object)">
      <summary>Determines whether a specified object is equal to a <see cref="T:System.Windows.Duration" />.</summary>
      <returns>true if value is equal to this <see cref="T:System.Windows.Duration" />; otherwise, false.</returns>
      <param name="value">Object to check for equality.</param>
    </member>
    <member name="M:System.Windows.Duration.Equals(System.Windows.Duration)">
      <summary>Determines whether a specified <see cref="T:System.Windows.Duration" /> is equal to this <see cref="T:System.Windows.Duration" />.</summary>
      <returns>true if <paramref name="duration" /> is equal to this <see cref="T:System.Windows.Duration" />; otherwise, false.</returns>
      <param name="duration">The <see cref="T:System.Windows.Duration" /> to check for equality.</param>
    </member>
    <member name="M:System.Windows.Duration.Equals(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines whether two <see cref="T:System.Windows.Duration" /> values are equal.</summary>
      <returns>true if <paramref name="t1" /> is equal to <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">First <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">Second <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="P:System.Windows.Duration.Forever">
      <summary>Gets a <see cref="T:System.Windows.Duration" /> value that represents an infinite interval.</summary>
      <returns>A <see cref="T:System.Windows.Duration" /> initialized to a forever value.</returns>
    </member>
    <member name="M:System.Windows.Duration.GetHashCode">
      <summary>Gets a hash code for this object.</summary>
      <returns>The hash code identifier.</returns>
    </member>
    <member name="P:System.Windows.Duration.HasTimeSpan">
      <summary>Gets a value that indicates if this <see cref="T:System.Windows.Duration" /> represents a <see cref="T:System.TimeSpan" /> value.</summary>
      <returns>true if this <see cref="T:System.Windows.Duration" /> is a <see cref="T:System.TimeSpan" /> value; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Duration.op_Addition(System.Windows.Duration,System.Windows.Duration)">
      <summary>Adds two <see cref="T:System.Windows.Duration" /> values together.</summary>
      <returns>If both <see cref="T:System.Windows.Duration" /> values have <see cref="T:System.TimeSpan" /> values, this method returns the sum of those two values. If either value is set to <see cref="P:System.Windows.Duration.Automatic" />, the method returns <see cref="P:System.Windows.Duration.Automatic" />. If either value is set to <see cref="P:System.Windows.Duration.Forever" />, the method returns <see cref="P:System.Windows.Duration.Forever" />.If either <paramref name="t1" /> or <paramref name="t2" /> has no value, this method returns null.</returns>
      <param name="t1">The first <see cref="T:System.Windows.Duration" /> to add.</param>
      <param name="t2">The second <see cref="T:System.Windows.Duration" /> to add.</param>
    </member>
    <member name="M:System.Windows.Duration.op_Equality(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines whether two <see cref="T:System.Windows.Duration" /> cases are equal.</summary>
      <returns>true if both <see cref="T:System.Windows.Duration" /> values have equal property values, or if all <see cref="T:System.Windows.Duration" /> values are null. Otherwise, this method returns false.</returns>
      <param name="t1">The first <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_GreaterThan(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines if one <see cref="T:System.Windows.Duration" /> is greater than another.</summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is greater than <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The <see cref="T:System.Windows.Duration" /> value to compare.</param>
      <param name="t2">The second <see cref="T:System.Windows.Duration" /> value to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_GreaterThanOrEqual(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines whether a <see cref="T:System.Windows.Duration" /> is greater than or equal to another.</summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is greater than or equal to <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_Implicit(System.TimeSpan)~System.Windows.Duration">
      <summary>Implicitly creates a <see cref="T:System.Windows.Duration" /> from a given <see cref="T:System.TimeSpan" />.</summary>
      <returns>A created <see cref="T:System.Windows.Duration" />.</returns>
      <param name="timeSpan">
        <see cref="T:System.TimeSpan" /> from which a <see cref="T:System.Windows.Duration" /> is implicitly created.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeSpan" /> evaluates as less than <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:System.Windows.Duration.op_Inequality(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines if two <see cref="T:System.Windows.Duration" /> cases are not equal.</summary>
      <returns>true if exactly one of <paramref name="t1" /> or <paramref name="t2" /> represent a value, or if they both represent values that are not equal; otherwise, false.</returns>
      <param name="t1">The first <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_LessThan(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines if a <see cref="T:System.Windows.Duration" /> is less than the value of another instance.</summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is less than <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_LessThanOrEqual(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines if a <see cref="T:System.Windows.Duration" /> is less than or equal to another.</summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is less than or equal to <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_Subtraction(System.Windows.Duration,System.Windows.Duration)">
      <summary>Subtracts the value of one <see cref="T:System.Windows.Duration" /> from another.</summary>
      <returns>If each <see cref="T:System.Windows.Duration" /> has values, a <see cref="T:System.Windows.Duration" /> that represents the value of <paramref name="t1" /> minus <paramref name="t2" />. If <paramref name="t1" /> has a value of <see cref="P:System.Windows.Duration.Forever" /> and <paramref name="t2" /> has a value of <see cref="P:System.Windows.Duration.TimeSpan" />, this method returns <see cref="P:System.Windows.Duration.Forever" />. Otherwise this method returns null.</returns>
      <param name="t1">The first <see cref="T:System.Windows.Duration" />.</param>
      <param name="t2">The <see cref="T:System.Windows.Duration" /> to subtract.</param>
    </member>
    <member name="M:System.Windows.Duration.op_UnaryPlus(System.Windows.Duration)">
      <summary>Returns the specified <see cref="T:System.Windows.Duration" />.</summary>
      <returns>A <see cref="T:System.Windows.Duration" />.</returns>
      <param name="duration">The <see cref="T:System.Windows.Duration" /> to get.</param>
    </member>
    <member name="M:System.Windows.Duration.Plus(System.Windows.Duration)">
      <summary>Adds one <see cref="T:System.Windows.Duration" /> to this <see cref="T:System.Windows.Duration" />.</summary>
      <returns>The summed <see cref="T:System.Windows.Duration" />.</returns>
      <param name="duration">The <see cref="T:System.Windows.Duration" /> to add.</param>
    </member>
    <member name="M:System.Windows.Duration.Subtract(System.Windows.Duration)">
      <summary>Subtracts the specified <see cref="T:System.Windows.Duration" /> from this <see cref="T:System.Windows.Duration" />.</summary>
      <returns>The subtracted <see cref="T:System.Windows.Duration" />.</returns>
      <param name="duration">The <see cref="T:System.Windows.Duration" /> to subtract from this <see cref="T:System.Windows.Duration" />.</param>
    </member>
    <member name="P:System.Windows.Duration.TimeSpan">
      <summary>Gets the <see cref="T:System.TimeSpan" /> value that this <see cref="T:System.Windows.Duration" /> represents.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> value that this <see cref="T:System.Windows.Duration" /> represents.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Duration" /> does not represent a <see cref="T:System.TimeSpan" />.</exception>
    </member>
    <member name="M:System.Windows.Duration.ToString">
      <summary>Converts a <see cref="T:System.Windows.Duration" /> to a <see cref="T:System.String" /> representation.</summary>
      <returns>A <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Duration" />.</returns>
    </member>
    <member name="T:System.Windows.DurationConverter">
      <summary>Provides type conversion support for the <see cref="T:System.Windows.Duration" /> structure. </summary>
    </member>
    <member name="M:System.Windows.DurationConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DurationConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.DurationConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert an object of one type to the <see cref="T:System.Windows.Duration" /> type.</summary>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from. </param>
    </member>
    <member name="M:System.Windows.DurationConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given value to the <see cref="T:System.Windows.Duration" /> type.</summary>
      <returns>The returned <see cref="T:System.Windows.Duration" />.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. </param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="T:System.Windows.ElevatedPermissions">
      <summary>Defines constants that indicate whether elevated permissions are required for an out-of-browser application. </summary>
    </member>
    <member name="F:System.Windows.ElevatedPermissions.NotRequired">
      <summary>Elevated permissions are not required to run the application outside the browser.</summary>
    </member>
    <member name="F:System.Windows.ElevatedPermissions.Required">
      <summary>Elevated permissions are required to run the application outside the browser.</summary>
    </member>
    <member name="T:System.Windows.EventTrigger">
      <summary>Represents a trigger that applies a set of actions (animation storyboards) in response to an event.</summary>
    </member>
    <member name="M:System.Windows.EventTrigger.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.EventTrigger" /> class.</summary>
    </member>
    <member name="P:System.Windows.EventTrigger.Actions">
      <summary>Gets the collection of <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> objects that this <see cref="T:System.Windows.EventTrigger" /> maintains.</summary>
      <returns>The existing <see cref="T:System.Windows.TriggerActionCollection" />.</returns>
    </member>
    <member name="P:System.Windows.EventTrigger.RoutedEvent">
      <summary>Gets or sets the name of the event that initiates the trigger.</summary>
      <returns>The name or identifier of the event. See Remarks.</returns>
    </member>
    <member name="T:System.Windows.ExceptionRoutedEventArgs">
      <summary>Provides event data for exceptions that are raised as events by asynchronous operations, such as <see cref="E:System.Windows.Controls.MediaElement.MediaFailed" /> or <see cref="E:System.Windows.Controls.MultiScaleImage.ImageFailed" />.</summary>
    </member>
    <member name="P:System.Windows.ExceptionRoutedEventArgs.ErrorException">
      <summary>Gets the underlying exception or native-level error reported by the event.</summary>
      <returns>The exception being reported.</returns>
    </member>
    <member name="T:System.Windows.ExceptionRoutedEventHandler">
      <summary>Represents the method that will handle certain events that report exceptions. These exceptions generally come from asynchronous operations where holding up the UI thread for exception checking is not an option.</summary>
      <param name="sender">The object where the handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Expression">
      <summary>This type is not intended to be used from your code or to be derived from.</summary>
    </member>
    <member name="T:System.Windows.ExtensionPart">
      <summary>Represents a zip file containing assemblies used by application library caching.</summary>
    </member>
    <member name="M:System.Windows.ExtensionPart.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.ExtensionPart" /> class. </summary>
    </member>
    <member name="P:System.Windows.ExtensionPart.Source">
      <summary>Gets or sets the file name or URI of the external library package.</summary>
      <returns>The file name or URI of the external library package.</returns>
    </member>
    <member name="F:System.Windows.ExtensionPart.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.ExtensionPart.Source" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ExtensionPart.Source" /> dependency property. </returns>
    </member>
    <member name="T:System.Windows.ExternalPart">
      <summary>Defines a base class for specifying parts of a Silverlight application that are external to the application package (.xap file). </summary>
    </member>
    <member name="M:System.Windows.ExternalPart.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.ExternalPart" /> class. </summary>
    </member>
    <member name="P:System.Windows.ExternalPart.Source">
      <summary>Gets or sets the URI of the external part.</summary>
      <returns>The URI of the external part. </returns>
    </member>
    <member name="T:System.Windows.ExternalPartCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.ExternalPart" /> instances that indicate parts of a Silverlight application that are external to the application package (.xap file). </summary>
    </member>
    <member name="M:System.Windows.ExternalPartCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.ExternalPartCollection" /> class. </summary>
    </member>
    <member name="T:System.Windows.FlowDirection">
      <summary>Defines constants that specify the content flow direction for text and UI elements.</summary>
    </member>
    <member name="F:System.Windows.FlowDirection.LeftToRight">
      <summary>Indicates that content should flow from left to right.</summary>
    </member>
    <member name="F:System.Windows.FlowDirection.RightToLeft">
      <summary>Indicates that content should flow from right to left.</summary>
    </member>
    <member name="T:System.Windows.FontStretch">
      <summary>Describes the degree to which a font has been stretched, compared to the normal aspect ratio of that font.</summary>
    </member>
    <member name="M:System.Windows.FontStretch.Equals(System.Object)">
      <summary>Compares an object with the current <see cref="T:System.Windows.FontStretch" /> object.</summary>
      <returns>true if two instances are equal; otherwise, false.</returns>
      <param name="obj">The instance of the object to compare for equality.</param>
    </member>
    <member name="M:System.Windows.FontStretch.GetHashCode">
      <summary>Retrieves the hash code for this object.</summary>
      <returns>An integer hash value.</returns>
    </member>
    <member name="M:System.Windows.FontStretch.op_Equality(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>Compares two instances of <see cref="T:System.Windows.FontStretch" /> for equality.</summary>
      <returns>true when the specified <see cref="T:System.Windows.FontStretch" /> objects are equal; otherwise, false.</returns>
      <param name="left">First instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
      <param name="right">Second instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStretch.op_Inequality(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontStretch" /> to determine inequality.</summary>
      <returns>false if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, true.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStretch.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of the current <see cref="T:System.Windows.FontStretch" /> object.</summary>
      <returns>A <see cref="T:System.String" /> value representation of the object.</returns>
    </member>
    <member name="T:System.Windows.FontStretches">
      <summary>Provides a set of predefined font stretches as static property values.</summary>
    </member>
    <member name="P:System.Windows.FontStretches.Condensed">
      <summary>Specifies a condensed font stretch.</summary>
      <returns>A value that represents a condensed font stretch.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.Expanded">
      <summary>Specifies an expanded font stretch.</summary>
      <returns>A value that represents an expanded font stretch.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.ExtraCondensed">
      <summary>Specifies an extra-condensed font stretch.</summary>
      <returns>A value that represents an extra-condensed font stretch.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.ExtraExpanded">
      <summary>Specifies an extra-expanded font stretch.</summary>
      <returns>A value that represents an extra-expanded font stretch.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.Normal">
      <summary>Specifies a normal font stretch.</summary>
      <returns>A value that represents a normal font stretch.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.SemiCondensed">
      <summary>Specifies a semi-condensed font stretch.</summary>
      <returns>A value that represents a semi-condensed font stretch.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.SemiExpanded">
      <summary>Specifies a semi-expanded font stretch.</summary>
      <returns>A value that represents a semi-expanded font stretch.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.UltraCondensed">
      <summary>Specifies an ultra-condensed font stretch.</summary>
      <returns>A value that represents an ultra-condensed font stretch.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.UltraExpanded">
      <summary>Specifies an ultra-expanded font stretch.</summary>
      <returns>A value that represents an ultra-expanded font stretch.</returns>
    </member>
    <member name="T:System.Windows.FontStyle">
      <summary>Represents the style of a font face (for instance, as normal or italic).</summary>
    </member>
    <member name="M:System.Windows.FontStyle.Equals(System.Object)">
      <summary>Compares an object with the current <see cref="T:System.Windows.FontStyle" /> instance for equality.</summary>
      <returns>true to show the two instances are equal; otherwise, false.</returns>
      <param name="obj">An object that represents the <see cref="T:System.Windows.FontStyle" /> to compare for equality.</param>
    </member>
    <member name="M:System.Windows.FontStyle.GetHashCode">
      <summary>Retrieves the hash code for this object. </summary>
      <returns>An integer hash value.</returns>
    </member>
    <member name="M:System.Windows.FontStyle.op_Equality(System.Windows.FontStyle,System.Windows.FontStyle)">
      <summary>Compares two instances of <see cref="T:System.Windows.FontStyle" /> for equality.</summary>
      <returns>true if the specified <see cref="T:System.Windows.FontStyle" /> objects are equal; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontStyle" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontStyle" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStyle.op_Inequality(System.Windows.FontStyle,System.Windows.FontStyle)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontStyle" /> to determine inequality.</summary>
      <returns>false to show <paramref name="left" /> is equal to <paramref name="right" />; otherwise, true.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontStyle" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontStyle" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStyle.ToString">
      <summary>Creates a string that represents the current <see cref="T:System.Windows.FontStyle" /> object.</summary>
      <returns>A string that represents the value of the <see cref="T:System.Windows.FontStyle" /> object.</returns>
    </member>
    <member name="T:System.Windows.FontStyles">
      <summary>Provides a set of predefined font styles as static property values.</summary>
    </member>
    <member name="P:System.Windows.FontStyles.Italic">
      <summary>Specifies an italic font style.</summary>
      <returns>A font style that represents an italic font style.</returns>
    </member>
    <member name="P:System.Windows.FontStyles.Normal">
      <summary>Specifies a normal, or roman, font style.</summary>
      <returns>A font style that represents a normal, or roman, font style.</returns>
    </member>
    <member name="T:System.Windows.FontWeight">
      <summary>Refers to the density of a typeface, in terms of the lightness or heaviness of the strokes.</summary>
    </member>
    <member name="M:System.Windows.FontWeight.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Windows.FontWeight" /> object is equal to a specified object.</summary>
      <returns>true if the values are equal; otherwise, false.</returns>
      <param name="obj">The object to compare for equality.</param>
    </member>
    <member name="M:System.Windows.FontWeight.GetHashCode">
      <summary>Retrieves the hash code for this object.</summary>
      <returns>An integer hash value.</returns>
    </member>
    <member name="M:System.Windows.FontWeight.op_Equality(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>Compares two instances of <see cref="T:System.Windows.FontWeight" /> for equality.</summary>
      <returns>true if the values of <see cref="T:System.Windows.FontWeight" /> are equal; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontWeight.op_Inequality(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontWeight" /> to determine inequality.</summary>
      <returns>false if values of <paramref name="left" /> are equal to <paramref name="right" />; otherwise, true.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontWeight.ToString">
      <summary>Returns a text string that represents the value of the <see cref="T:System.Windows.FontWeight" /> object.</summary>
      <returns>A string that represents the value of the <see cref="T:System.Windows.FontWeight" /> object, such as "Light" or "Normal".</returns>
    </member>
    <member name="T:System.Windows.FontWeights">
      <summary>Provides a set of predefined font weights as static property values.</summary>
    </member>
    <member name="P:System.Windows.FontWeights.Black">
      <summary>Specifies a "Black" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents a "Black" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Bold">
      <summary>Specifies a "Bold" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents a "Bold" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.ExtraBlack">
      <summary>Specifies an "ExtraBlack" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents an "ExtraBlack" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.ExtraBold">
      <summary>Specifies an "ExtraBold" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents an "ExtraBlack" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.ExtraLight">
      <summary>Specifies an "ExtraLight" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents an "ExtraLight" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Light">
      <summary>Specifies a "Light" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents a "Light" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Medium">
      <summary>Specifies a "Medium" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents a "Medium" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Normal">
      <summary>Specifies a "Normal" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents a "Normal" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.SemiBold">
      <summary>Specifies a "SemiBold" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents a "SemiBold" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Thin">
      <summary>Specifies a "Thin" font weight.</summary>
      <returns>A <see cref="T:System.Windows.FontWeight" /> value that represents a "Thin" font weight.</returns>
    </member>
    <member name="T:System.Windows.FrameworkElement">
      <summary>Provides a framework of common APIs for objects that participate in Silverlight layout. <see cref="T:System.Windows.FrameworkElement" /> also defines APIs related to data binding, object tree, and object lifetime feature areas in Silverlight.</summary>
    </member>
    <member name="M:System.Windows.FrameworkElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.FrameworkElement" /> class.</summary>
    </member>
    <member name="P:System.Windows.FrameworkElement.ActualHeight">
      <summary>Gets the rendered height of a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The height, in pixels, of the object. The default is 0. The default might be encountered if the object has not been loaded and undergone a layout pass.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.ActualHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.ActualWidth">
      <summary>Gets the rendered width of a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The width, in pixels, of the object. The default is 0. The default might be encountered if the object has not been loaded and undergone a layout pass.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.ActualWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)">
      <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
      <returns>The actual size that is used after the element is arranged in layout.</returns>
      <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
    </member>
    <member name="E:System.Windows.FrameworkElement.BindingValidationError">
      <summary>Occurs when a data validation error is reported by a binding source.</summary>
    </member>
    <member name="P:System.Windows.FrameworkElement.Cursor">
      <summary>Gets or sets the cursor that displays while the mouse pointer is over a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The cursor to display. The default is defined as null for code access. However, the appearance of the cursor in UI at run time will come from a variety of factors.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.CursorProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Cursor" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.Cursor" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.DataContext">
      <summary>Gets or sets the data context for a <see cref="T:System.Windows.FrameworkElement" /> when it participates in data binding.</summary>
      <returns>The object to use as data context.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.DataContextProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.DataContext" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.FrameworkElement.DataContext" /> dependency property identifier.</returns>
    </member>
    <member name="M:System.Windows.FrameworkElement.FindName(System.String)">
      <summary>Retrieves an object that has the specified identifier name. </summary>
      <returns>The requested object. This can be null if no matching object was found in the current XAML namescope.</returns>
      <param name="name">The name of the requested object.</param>
    </member>
    <member name="P:System.Windows.FrameworkElement.FlowDirection">
      <summary>Gets or sets the direction that text and other user interface elements flow within any parent element that controls their layout.</summary>
      <returns>The direction that text and other UI elements flow within their parent element, as a value of the enumeration. The default value is <see cref="F:System.Windows.FlowDirection.LeftToRight" />.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.FlowDirectionProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> dependency property identifier.</returns>
    </member>
    <member name="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)">
      <summary>Retrieves the <see cref="T:System.Windows.Data.BindingExpression" /> for a dependency property where a binding is established.</summary>
      <returns>A <see cref="T:System.Windows.Data.BindingExpression" /> for the binding, if the local value represented a data-bound value. May return null if the property is not a data-bound value.</returns>
      <param name="dp">The dependency property identifier for the specific property on this <see cref="T:System.Windows.FrameworkElement" /> where you want to obtain the <see cref="T:System.Windows.Data.BindingExpression" />.</param>
    </member>
    <member name="P:System.Windows.FrameworkElement.Height">
      <summary>Gets or sets the suggested height of a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The height, in pixels, of the object. The default is <see cref="F:System.Double.NaN" />. Except for the special <see cref="F:System.Double.NaN" /> value, this value must be equal to or greater than 0. See Remarks for upper-bound information.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.HeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Height" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.Height" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.HorizontalAlignment">
      <summary>Gets or sets the horizontal alignment characteristics that are applied to a <see cref="T:System.Windows.FrameworkElement" /> when it is composed in a layout parent, such as a panel or items control.</summary>
      <returns>A horizontal alignment setting, as a value of the enumeration. The default is <see cref="F:System.Windows.HorizontalAlignment.Stretch" />.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.HorizontalAlignmentProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Language">
      <summary>Gets or sets localization/globalization language information that applies to a <see cref="T:System.Windows.FrameworkElement" />. </summary>
      <returns>The language information for this object. The default is an <see cref="T:System.Windows.Markup.XmlLanguage" /> object that has its <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> value set to the string "en-US".</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.LanguageProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Language" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.FrameworkElement.Language" /> dependency property identifier.</returns>
    </member>
    <member name="E:System.Windows.FrameworkElement.LayoutUpdated">
      <summary>Occurs when the layout of the Silverlight visual tree changes. </summary>
    </member>
    <member name="E:System.Windows.FrameworkElement.Loaded">
      <summary>Occurs when a <see cref="T:System.Windows.FrameworkElement" /> has been constructed and added to the object tree. </summary>
    </member>
    <member name="F:System.Windows.FrameworkElement.LoadedEvent">
      <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.Loaded" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.FrameworkElement.Loaded" /> routed event.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Margin">
      <summary>Gets or sets the outer margin of a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>Provides margin values for the object. The default value is a default <see cref="T:System.Windows.Thickness" /> with all properties (dimensions) equal to 0.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.MarginProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Margin" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.FrameworkElement.Margin" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.MaxHeight">
      <summary>Gets or sets the maximum height constraint of a <see cref="T:System.Windows.FrameworkElement" />. </summary>
      <returns>The maximum height of the object, in pixels. The default value is <see cref="F:System.Double.PositiveInfinity" />. This value can be any value equal to or greater than 0. <see cref="F:System.Double.PositiveInfinity" /> is also valid.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.MaxHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MaxHeight" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.MaxHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.MaxWidth">
      <summary>Gets or sets the maximum width constraint of a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The maximum width of the object, in pixels. The default is <see cref="F:System.Double.PositiveInfinity" />. This value can be any value equal to or greater than 0. <see cref="F:System.Double.PositiveInfinity" /> is also valid.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.MaxWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MaxWidth" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.MaxWidth" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)">
      <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
      <returns>The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.</returns>
      <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
    </member>
    <member name="P:System.Windows.FrameworkElement.MinHeight">
      <summary>Gets or sets the minimum height constraint of a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The minimum height of the object, in pixels. The default is 0. This value can be any value equal to or greater than 0. However, <see cref="F:System.Double.PositiveInfinity" /> is not valid.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.MinHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MinHeight" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.MinHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.MinWidth">
      <summary>Gets or sets the minimum width constraint of a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The minimum width of the object, in pixels. The default is 0. This value can be any value equal to or greater than 0. However, <see cref="F:System.Double.PositiveInfinity" /> is not valid.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.MinWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MinWidth" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.MinWidth" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Name">
      <summary>Gets (or sets, but see Remarks) the identifying name of the object. The name provides a reference that is initially markup-compiled. After a XAML processor creates the object tree from markup, run-time code can refer to a markup element by this name.</summary>
      <returns>The name of the object, which must be a string that is valid in the XamlName Grammar. The default is an empty string.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.NameProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Name" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.Name" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.FrameworkElement.OnApplyTemplate">
      <summary>When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />. In simplest terms, this means the method is called just before a UI element displays in an application. For more information, see Remarks.</summary>
    </member>
    <member name="P:System.Windows.FrameworkElement.Parent">
      <summary>Gets the parent object of this <see cref="T:System.Windows.FrameworkElement" /> in the object tree. </summary>
      <returns>The parent object of this object in the object tree.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Resources">
      <summary>Gets the locally defined resource dictionary. In XAML, you can establish resource items as child object elements of a frameworkElement.Resources property element, through XAML implicit collection syntax.</summary>
      <returns>The current locally defined dictionary of resources, where each resource can be accessed by its key.</returns>
    </member>
    <member name="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.Binding)">
      <summary>Attaches a binding to a <see cref="T:System.Windows.FrameworkElement" />, using the provided binding object, and returns a <see cref="T:System.Windows.Data.BindingExpressionBase" /> for possible later use.</summary>
      <returns>A <see cref="T:System.Windows.Data.BindingExpressionBase" /> object. See Remarks.</returns>
      <param name="dp">The dependency property identifier of the property that is data bound.</param>
      <param name="binding">The binding to use for the property.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binding" /> is specified as <see cref="F:System.Windows.Data.BindingMode.TwoWay" />, but has an empty <see cref="P:System.Windows.Data.Binding.Path" />.-or-<paramref name="dp" /> or <paramref name="binding" /> parameters are null.</exception>
    </member>
    <member name="E:System.Windows.FrameworkElement.SizeChanged">
      <summary>Occurs when either the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> or the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> properties change value on a <see cref="T:System.Windows.FrameworkElement" />. </summary>
    </member>
    <member name="P:System.Windows.FrameworkElement.Style">
      <summary>Gets or sets an instance <see cref="T:System.Windows.Style" /> that is applied for this object during rendering.</summary>
      <returns>The applied style for the object, if present; otherwise, null. The default for a default-constructed <see cref="T:System.Windows.FrameworkElement" /> is null.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.StyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Style" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.Style" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Tag">
      <summary>Gets or sets an arbitrary object value that can be used to store custom information about this object.</summary>
      <returns>The intended value. This property has no default value.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.TagProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Tag" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.Tag" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Triggers">
      <summary>Gets the collection of triggers for animations that are defined for a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The collection of triggers for animations that are defined for this object.</returns>
    </member>
    <member name="E:System.Windows.FrameworkElement.Unloaded">
      <summary>Occurs when this object is no longer connected to the main object tree.</summary>
    </member>
    <member name="P:System.Windows.FrameworkElement.VerticalAlignment">
      <summary>Gets or sets the vertical alignment characteristics that are applied to a <see cref="T:System.Windows.FrameworkElement" /> when it is composed in a parent object such as a panel or items control.</summary>
      <returns>A vertical alignment setting. The default is <see cref="F:System.Windows.VerticalAlignment.Stretch" />.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.VerticalAlignmentProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.FrameworkElement.Width">
      <summary>Gets or sets the width of a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The width of the object, in pixels. The default is <see cref="F:System.Double.NaN" />. Except for the special <see cref="F:System.Double.NaN" /> value, this value must be equal to or greater than 0. See Remarks for upper bound information.</returns>
    </member>
    <member name="F:System.Windows.FrameworkElement.WidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Width" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.FrameworkElement.Width" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.FrameworkTemplate">
      <summary>Creates an element tree of elements.</summary>
    </member>
    <member name="M:System.Windows.FrameworkTemplate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.FrameworkTemplate" /> class.</summary>
    </member>
    <member name="T:System.Windows.GpuInformation">
      <summary>Represents details for graphics processor unit (GPU) information as reported by the system of the local computer.</summary>
    </member>
    <member name="P:System.Windows.GpuInformation.DeviceId">
      <summary>Gets the device ID of the GPU.</summary>
      <returns>The device ID for the GPU.</returns>
    </member>
    <member name="P:System.Windows.GpuInformation.DriverVersion">
      <summary>Gets the driver version of the GPU.</summary>
      <returns>The driver version of the GPU.</returns>
    </member>
    <member name="P:System.Windows.GpuInformation.VendorId">
      <summary>Gets the vendor ID of the GPU.</summary>
      <returns>The vendor ID of the GPU.</returns>
    </member>
    <member name="T:System.Windows.GridLength">
      <summary>Represents the length of elements that explicitly support <see cref="F:System.Windows.GridUnitType.Star" /> unit types. </summary>
    </member>
    <member name="M:System.Windows.GridLength.#ctor(System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.GridLength" /> structure using the specified absolute value in pixels. </summary>
      <param name="pixels">The absolute count of pixels to establish as the value.</param>
    </member>
    <member name="M:System.Windows.GridLength.#ctor(System.Double,System.Windows.GridUnitType)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.GridLength" /> structure and specifies what kind of value it holds. </summary>
      <param name="value">The initial value of this instance of <see cref="T:System.Windows.GridLength" />.</param>
      <param name="type">The <see cref="T:System.Windows.GridUnitType" /> held by this instance of <see cref="T:System.Windows.GridLength" />.</param>
      <exception cref="T:System.ArgumentException">value is less than 0 or is not a number.- or -type is not a valid <see cref="T:System.Windows.GridUnitType" />.</exception>
    </member>
    <member name="P:System.Windows.GridLength.Auto">
      <summary>Gets an instance of <see cref="T:System.Windows.GridLength" /> that holds a value whose size is determined by the size properties of the content object.</summary>
      <returns>A instance of <see cref="T:System.Windows.GridLength" /> whose <see cref="P:System.Windows.GridLength.GridUnitType" /> property is set to <see cref="F:System.Windows.GridUnitType.Auto" />. </returns>
    </member>
    <member name="M:System.Windows.GridLength.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current <see cref="T:System.Windows.GridLength" /> instance. </summary>
      <returns>true if the specified object has the same value and <see cref="T:System.Windows.GridUnitType" /> as the current instance; otherwise, false.</returns>
      <param name="oCompare">The object to compare with the current instance.</param>
    </member>
    <member name="M:System.Windows.GridLength.Equals(System.Windows.GridLength)">
      <summary>Determines whether the specified <see cref="T:System.Windows.GridLength" /> is equal to the current <see cref="T:System.Windows.GridLength" />.</summary>
      <returns>true if the specified <see cref="T:System.Windows.GridLength" /> has the same value and <see cref="P:System.Windows.GridLength.GridUnitType" /> as the current instance; otherwise, false.</returns>
      <param name="gridLength">The <see cref="T:System.Windows.GridLength" /> structure to compare with the current instance.</param>
    </member>
    <member name="M:System.Windows.GridLength.GetHashCode">
      <summary>Gets a hash code for the <see cref="T:System.Windows.GridLength" />. </summary>
      <returns>A hash code for the <see cref="T:System.Windows.GridLength" />. </returns>
    </member>
    <member name="P:System.Windows.GridLength.GridUnitType">
      <summary>Gets the associated <see cref="T:System.Windows.GridUnitType" /> for the <see cref="T:System.Windows.GridLength" />. </summary>
      <returns>One of the <see cref="T:System.Windows.GridUnitType" /> values. The default is <see cref="F:System.Windows.GridUnitType.Auto" />.</returns>
    </member>
    <member name="P:System.Windows.GridLength.IsAbsolute">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.GridLength" /> holds a value that is expressed in pixels. </summary>
      <returns>true if the <see cref="P:System.Windows.GridLength.GridUnitType" /> property is <see cref="F:System.Windows.GridUnitType.Pixel" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.GridLength.IsAuto">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.GridLength" /> holds a value whose size is determined by the size properties of the content object. </summary>
      <returns>true if the <see cref="P:System.Windows.GridLength.GridUnitType" /> property is <see cref="F:System.Windows.GridUnitType.Auto" />; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.GridLength.IsStar">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.GridLength" /> holds a value that is expressed as a weighted proportion of available space. </summary>
      <returns>true if the <see cref="P:System.Windows.GridLength.GridUnitType" /> property is <see cref="F:System.Windows.GridUnitType.Star" />; otherwise, false. </returns>
    </member>
    <member name="M:System.Windows.GridLength.op_Equality(System.Windows.GridLength,System.Windows.GridLength)">
      <summary>Compares two <see cref="T:System.Windows.GridLength" /> structures for equality.</summary>
      <returns>true if the two instances of <see cref="T:System.Windows.GridLength" /> have the same value and <see cref="T:System.Windows.GridUnitType" />; otherwise, false.</returns>
      <param name="gl1">The first instance of <see cref="T:System.Windows.GridLength" /> to compare.</param>
      <param name="gl2">The second instance of <see cref="T:System.Windows.GridLength" /> to compare.</param>
    </member>
    <member name="M:System.Windows.GridLength.op_Inequality(System.Windows.GridLength,System.Windows.GridLength)">
      <summary>Compares two <see cref="T:System.Windows.GridLength" /> structures to determine if they are not equal.</summary>
      <returns>true if the two instances of <see cref="T:System.Windows.GridLength" /> do not have the same value and <see cref="T:System.Windows.GridUnitType" />; otherwise, false.</returns>
      <param name="gl1">The first instance of <see cref="T:System.Windows.GridLength" /> to compare.</param>
      <param name="gl2">The second instance of <see cref="T:System.Windows.GridLength" /> to compare.</param>
    </member>
    <member name="M:System.Windows.GridLength.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the <see cref="T:System.Windows.GridLength" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the current <see cref="T:System.Windows.GridLength" /> structure.</returns>
    </member>
    <member name="P:System.Windows.GridLength.Value">
      <summary>Gets a <see cref="T:System.Double" /> that represents the value of the <see cref="T:System.Windows.GridLength" />.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the value of the current instance. </returns>
    </member>
    <member name="T:System.Windows.GridUnitType">
      <summary>Describes the kind of value that a <see cref="T:System.Windows.GridLength" /> object is holding. </summary>
    </member>
    <member name="F:System.Windows.GridUnitType.Auto">
      <summary>The size is determined by the size properties of the content object. </summary>
    </member>
    <member name="F:System.Windows.GridUnitType.Pixel">
      <summary>The value is expressed in pixels. </summary>
    </member>
    <member name="F:System.Windows.GridUnitType.Star">
      <summary>The value is expressed as a weighted proportion of available space. </summary>
    </member>
    <member name="T:System.Windows.HorizontalAlignment">
      <summary>Indicates where an element should be displayed on the horizontal axis relative to the allocated layout slot of the parent element. </summary>
    </member>
    <member name="F:System.Windows.HorizontalAlignment.Left">
      <summary>An element aligned to the left of the layout slot for the parent element. </summary>
    </member>
    <member name="F:System.Windows.HorizontalAlignment.Center">
      <summary>An element aligned to the center of the layout slot for the parent element. </summary>
    </member>
    <member name="F:System.Windows.HorizontalAlignment.Right">
      <summary>An element aligned to the right of the layout slot for the parent element.</summary>
    </member>
    <member name="F:System.Windows.HorizontalAlignment.Stretch">
      <summary>An element stretched to fill the entire layout slot of the parent element.</summary>
    </member>
    <member name="T:System.Windows.IApplicationLifetimeAware">
      <summary>Defines methods that application extension services can optionally implement in order to respond to application lifetime events. </summary>
    </member>
    <member name="M:System.Windows.IApplicationLifetimeAware.Exited">
      <summary>Called by an application immediately after the <see cref="E:System.Windows.Application.Exit" /> event occurs. </summary>
    </member>
    <member name="M:System.Windows.IApplicationLifetimeAware.Exiting">
      <summary>Called by an application immediately before the <see cref="E:System.Windows.Application.Exit" /> event occurs. </summary>
    </member>
    <member name="M:System.Windows.IApplicationLifetimeAware.Started">
      <summary>Called by an application immediately after the <see cref="E:System.Windows.Application.Startup" /> event occurs.</summary>
    </member>
    <member name="M:System.Windows.IApplicationLifetimeAware.Starting">
      <summary>Called by an application immediately before the <see cref="E:System.Windows.Application.Startup" /> event occurs.</summary>
    </member>
    <member name="T:System.Windows.IApplicationService">
      <summary>Defines methods that application extension services must implement in order to enable an application to start and stop the service. </summary>
    </member>
    <member name="M:System.Windows.IApplicationService.StartService(System.Windows.ApplicationServiceContext)">
      <summary>Called by an application in order to initialize the application extension service.</summary>
      <param name="context">Provides information about the application state. </param>
    </member>
    <member name="M:System.Windows.IApplicationService.StopService">
      <summary>Called by an application in order to stop the application extension service. </summary>
    </member>
    <member name="T:System.Windows.Icon">
      <summary>Represents an icon that is used to identify an offline application.</summary>
    </member>
    <member name="M:System.Windows.Icon.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Icon" /> class. </summary>
    </member>
    <member name="P:System.Windows.Icon.Size">
      <summary>Gets the icon size. </summary>
      <returns>The icon size.</returns>
    </member>
    <member name="F:System.Windows.Icon.SizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Icon.Size" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Icon.Size" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Icon.Source">
      <summary>Gets the path and file name to the PNG source file of the icon. </summary>
      <returns>The path to the PNG source file of the icon. </returns>
    </member>
    <member name="F:System.Windows.Icon.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Icon.Source" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Icon.Source" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.IconCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Icon" /> instances.</summary>
    </member>
    <member name="M:System.Windows.IconCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.IconCollection" /> class. </summary>
    </member>
    <member name="T:System.Windows.IDataObject">
      <summary>Provides a format-independent mechanism for transferring data.</summary>
    </member>
    <member name="M:System.Windows.IDataObject.GetData(System.String)">
      <summary>Retrieves a data object in a specified format; the data format is specified by a string.</summary>
      <returns>A data object that has the data in the specified format; or null, if the data is not available in the specified format.</returns>
      <param name="format">A string that specifies the format in which to retrieve the data. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
    </member>
    <member name="M:System.Windows.IDataObject.GetData(System.String,System.Boolean)">
      <summary>Retrieves a data object in a specified format, and optionally, converts the data to the specified format.</summary>
      <returns>A data object that has the data in the specified format; or null, if the data is not available in the specified format.</returns>
      <param name="format">A string that specifies the format in which to retrieve the data. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
      <param name="autoConvert">true to attempt to automatically convert the data to the specified format; false to perform no data format conversion.If this parameter is false, the method returns data in the specified format if it is available; or returns null if the data is not available in the specified format.</param>
    </member>
    <member name="M:System.Windows.IDataObject.GetData(System.Type)">
      <summary>Retrieves a data object in a specified format; the data format is specified by a <see cref="T:System.Type" /> object.</summary>
      <returns>A data object that has the data in the specified format; or null, if the data is not available in the specified format.</returns>
      <param name="format">A <see cref="T:System.Type" /> object that specifies the format in which to retrieve the data. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
    </member>
    <member name="M:System.Windows.IDataObject.GetDataPresent(System.String)">
      <summary>Checks whether the data is available in, or can be converted to, a specified format; the data format is specified by a string.</summary>
      <returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
      <param name="format">A string that specifies the format to check for. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
    </member>
    <member name="M:System.Windows.IDataObject.GetDataPresent(System.String,System.Boolean)">
      <summary>Checks whether the data is available in, or can be converted to, a specified format. If the data is not already available in the specified format, a Boolean flag indicates whether to check if the data can be converted to the specified format.</summary>
      <returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
      <param name="format">A string that specifies the format to check for. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
      <param name="autoConvert">false to only check for the specified format; true to also check whether the data that is stored in this data object can be converted to the specified format.</param>
    </member>
    <member name="M:System.Windows.IDataObject.GetDataPresent(System.Type)">
      <summary>Checks to see whether the data is available in, or can be converted to, a specified format. The data format is specified by a <see cref="T:System.Type" /> object.</summary>
      <returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
      <param name="format">A <see cref="T:System.Type" /> that specifies the format to check for.</param>
    </member>
    <member name="M:System.Windows.IDataObject.GetFormats">
      <summary>Returns a list of all formats that the data in this data object is stored in, or can be converted to.</summary>
      <returns>An array of strings, with each string specifying the name of a format that is supported by this data object.</returns>
    </member>
    <member name="M:System.Windows.IDataObject.GetFormats(System.Boolean)">
      <summary>Returns a list of all formats that the data in this data object is stored in. A Boolean flag indicates whether to also include formats that the data can be automatically converted to.</summary>
      <returns>An array of strings, with each string specifying the name of a format that is supported by this data object.</returns>
      <param name="autoConvert">true to retrieve all formats that the data in this data object is stored in, or can be converted to; false to retrieve only the formats in which the data in this data object is stored (excludes formats that the data is not stored in, but can be automatically converted to).</param>
    </member>
    <member name="M:System.Windows.IDataObject.SetData(System.Object)">
      <summary>Stores the specified data in this data object, and automatically converts the data format from the source object type.</summary>
      <param name="data">The data to store in this data object.</param>
    </member>
    <member name="M:System.Windows.IDataObject.SetData(System.String,System.Object)">
      <summary>Stores the specified data in this data object, using one or more specified data formats. The data format is specified by a string.</summary>
      <param name="format">A string that specifies the format in which to store the data. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
      <param name="data">The data to store in this data object.</param>
    </member>
    <member name="M:System.Windows.IDataObject.SetData(System.String,System.Object,System.Boolean)">
      <summary>Stores the specified data in this data object, using one or more specified data formats. This overload includes a Boolean flag to indicate whether the data may be converted to another format on retrieval.</summary>
      <param name="format">A string that specifies the format in which to store the data. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
      <param name="data">The data to store in this data object.</param>
      <param name="autoConvert">true to allow the data to be converted to another format on retrieval; false to prohibit the data from being converted to another format on retrieval.</param>
    </member>
    <member name="M:System.Windows.IDataObject.SetData(System.Type,System.Object)">
      <summary>Stores the specified data in this data object, using one or more specified data formats. The data format is specified by a <see cref="T:System.Type" /> class.</summary>
      <param name="format">A <see cref="T:System.Type" /> that specifies the format in which to store the data.</param>
      <param name="data">The data to store in this data object.</param>
    </member>
    <member name="T:System.Windows.InstallState">
      <summary>Defines constants that indicate the installation state of an application that is configured to run outside the browser.</summary>
    </member>
    <member name="F:System.Windows.InstallState.NotInstalled">
      <summary>The application has not been installed to run outside the browser.</summary>
    </member>
    <member name="F:System.Windows.InstallState.Installing">
      <summary>The application is in the process of being installed to run outside the browser. </summary>
    </member>
    <member name="F:System.Windows.InstallState.Installed">
      <summary>The application has been installed to run outside the browser.</summary>
    </member>
    <member name="F:System.Windows.InstallState.InstallFailed">
      <summary>The application could not be installed to run outside the browser. </summary>
    </member>
    <member name="T:System.Windows.LayoutCycleException">
      <summary>An exception that is thrown by the layout cycle.</summary>
    </member>
    <member name="T:System.Windows.LineStackingStrategy">
      <summary>Describes the mechanism by which a line box is determined for each line. </summary>
    </member>
    <member name="F:System.Windows.LineStackingStrategy.MaxHeight">
      <summary>The stack height is the smallest value that contains the extended block progression dimension of all the inline elements on that line when those elements are properly aligned. This is the default.</summary>
    </member>
    <member name="F:System.Windows.LineStackingStrategy.BlockLineHeight">
      <summary>The stack height is determined by the block element line-height property value.</summary>
    </member>
    <member name="T:System.Windows.MessageBox">
      <summary>Displays a message to the user and optionally prompts for a response. </summary>
    </member>
    <member name="M:System.Windows.MessageBox.Show(System.String)">
      <summary>Displays a message box that contains the specified text and an OK button.</summary>
      <returns>
        <see cref="F:System.Windows.MessageBoxResult.OK" /> in all cases.</returns>
      <param name="messageBoxText">The message to display.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageBoxText" /> is null.</exception>
    </member>
    <member name="M:System.Windows.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton)">
      <summary>Displays a message box that contains the specified text, title bar caption, and response buttons. </summary>
      <returns>A value that indicates the user's response to the message. </returns>
      <param name="messageBoxText">The message to display.</param>
      <param name="caption">The title of the message box. </param>
      <param name="button">A value that indicates the button or buttons to display. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageBoxText" /> is null.-or-<paramref name="caption" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="button" /> is not a valid <see cref="T:System.Windows.MessageBoxButton" /> value.</exception>
    </member>
    <member name="T:System.Windows.MessageBoxButton">
      <summary>Specifies the buttons to include when you display a message box.</summary>
    </member>
    <member name="F:System.Windows.MessageBoxButton.OK">
      <summary>Displays only the OK button.</summary>
    </member>
    <member name="F:System.Windows.MessageBoxButton.OKCancel">
      <summary>Displays both the OK and Cancel buttons.</summary>
    </member>
    <member name="T:System.Windows.MessageBoxResult">
      <summary>Represents a user's response to a message box.</summary>
    </member>
    <member name="F:System.Windows.MessageBoxResult.None">
      <summary>This value is not currently used. </summary>
    </member>
    <member name="F:System.Windows.MessageBoxResult.OK">
      <summary>The user clicked the OK button. </summary>
    </member>
    <member name="F:System.Windows.MessageBoxResult.Cancel">
      <summary>The user clicked the Cancel button or pressed ESC.</summary>
    </member>
    <member name="F:System.Windows.MessageBoxResult.Yes">
      <summary>This value is not currently used. </summary>
    </member>
    <member name="F:System.Windows.MessageBoxResult.No">
      <summary>This value is not currently used. </summary>
    </member>
    <member name="T:System.Windows.NotificationWindow">
      <summary>Represents a notification area that is displayed in the system area. Notifications can only be enabled for an out-of-browser application; browser-hosted applications cannot access this notification area.</summary>
    </member>
    <member name="M:System.Windows.NotificationWindow.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.NotificationWindow" /> class. </summary>
    </member>
    <member name="M:System.Windows.NotificationWindow.Close">
      <summary>Immediately closes the notification window.</summary>
    </member>
    <member name="E:System.Windows.NotificationWindow.Closed">
      <summary>Occurs when <see cref="M:System.Windows.NotificationWindow.Close" /> is called, or when the notification window times out and has finished its fadeout animation.</summary>
    </member>
    <member name="P:System.Windows.NotificationWindow.Content">
      <summary>Gets or sets the root of visual elements that define the visual look of the notification.</summary>
      <returns>A single <see cref="T:System.Windows.FrameworkElement" /> that includes the root of a visual tree. The visual tree defines the visual look of the notification.</returns>
    </member>
    <member name="F:System.Windows.NotificationWindow.ContentProperty">
      <summary>Identifies the <see cref="P:System.Windows.NotificationWindow.Content" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.NotificationWindow.Content" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.NotificationWindow.Height">
      <summary>Gets or sets the height, in pixels, of this notification window. See Remarks.</summary>
      <returns>The height, in pixels, of this notification window when it is displayed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set value greater than 100, or less than 0.</exception>
      <exception cref="T:System.InvalidOperationException">Attempted to set value while notification window is visible.</exception>
    </member>
    <member name="F:System.Windows.NotificationWindow.HeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.NotificationWindow.Height" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.NotificationWindow.Height" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.NotificationWindow.Show(System.Int32)">
      <summary>Displays the notification window for the specified number of milliseconds before it times out.</summary>
      <param name="durationInMilliseconds">The duration that the notification window should remain displayed in the system area, specified in milliseconds.</param>
      <exception cref="T:System.InvalidOperationException">A different notification window instance is still visible.</exception>
    </member>
    <member name="P:System.Windows.NotificationWindow.Visibility">
      <summary>Gets a value that determines whether this notification is currently being displayed.</summary>
      <returns>true if the notification is currently displayed; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.NotificationWindow.Width">
      <summary>Gets or sets the width, in pixels, of this notification window. See Remarks.</summary>
      <returns>The width, in pixels, of this notification window when it is displayed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set value greater than 400, or less than 0.</exception>
      <exception cref="T:System.InvalidOperationException">Attempted to set value while notification window is visible.</exception>
    </member>
    <member name="F:System.Windows.NotificationWindow.WidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.NotificationWindow.Width" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.NotificationWindow.Width" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.NullableBoolConverter">
      <summary>Converts <see cref="T:System.Nullable`1" /> types (using the <see cref="T:System.Boolean" /> type constraint on the generic)  from strings.</summary>
    </member>
    <member name="M:System.Windows.NullableBoolConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.NullableBoolConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.NullableBoolConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether this converter can convert an object of the specified type to the <see cref="T:System.Nullable`1" /> type (using the <see cref="T:System.Boolean" /> type constraint on the generic).</summary>
      <returns>true if <paramref name="sourceType" /> is a <see cref="T:System.String" />, <see cref="T:System.Boolean" />, or a <see cref="T:System.Nullable`1" /> type (using the <see cref="T:System.Boolean" /> type constraint on the generic) that can be assigned from <paramref name="sourceType" />; otherwise, false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="sourceType">The type that you want to convert from.</param>
    </member>
    <member name="M:System.Windows.NullableBoolConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to a <see cref="T:System.Nullable`1" /> type (using the <see cref="T:System.Boolean" /> type constraint on the generic).</summary>
      <returns>A <see cref="T:System.Nullable`1" /> type (using the <see cref="T:System.Boolean" /> type constraint on the generic) that represents the converted object.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. </param>
      <param name="value">The object to convert to a <see cref="T:System.Nullable`1" /> type (using the <see cref="T:System.Boolean" /> type constraint on the generic).</param>
      <exception cref="T:System.NotSupportedException">The conversion attempt failed. <paramref name="value" /> is not a <see cref="T:System.String" />, <see cref="T:System.Boolean" />, or <see cref="T:System.Nullable`1" /> (using the <see cref="T:System.Boolean" /> type constraint on the generic) type.</exception>
    </member>
    <member name="T:System.Windows.OutOfBrowserSettings">
      <summary>Represents information about an application that is configured for out-of-browser support. </summary>
    </member>
    <member name="M:System.Windows.OutOfBrowserSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.OutOfBrowserSettings" /> class. </summary>
    </member>
    <member name="P:System.Windows.OutOfBrowserSettings.Blurb">
      <summary>Gets a short description of the application.</summary>
      <returns>A short description of the application.</returns>
    </member>
    <member name="F:System.Windows.OutOfBrowserSettings.BlurbProperty">
      <summary>Identifies the <see cref="P:System.Windows.OutOfBrowserSettings.Blurb" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.OutOfBrowserSettings.Blurb" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.OutOfBrowserSettings.EnableGPUAcceleration">
      <summary>Gets a value that indicates whether to use graphics processor unit hardware acceleration for cached compositions, which potentially results in graphics optimization. </summary>
      <returns>true if GPU acceleration is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.OutOfBrowserSettings.EnableGPUAccelerationProperty">
      <summary>Identifies the <see cref="P:System.Windows.OutOfBrowserSettings.EnableGPUAcceleration" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.OutOfBrowserSettings.EnableGPUAcceleration" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.OutOfBrowserSettings.Icons">
      <summary>Gets a collection of <see cref="T:System.Windows.Icon" /> instances associated with the application.</summary>
      <returns>The icons associated with the application.</returns>
    </member>
    <member name="F:System.Windows.OutOfBrowserSettings.IconsProperty">
      <summary>Identifies the <see cref="P:System.Windows.OutOfBrowserSettings.Icons" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.OutOfBrowserSettings.Icons" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.OutOfBrowserSettings.SecuritySettings">
      <summary>Gets the security settings applied to the out-of-browser application.</summary>
      <returns>The security settings applied to the out-of-browser application.</returns>
    </member>
    <member name="F:System.Windows.OutOfBrowserSettings.SecuritySettingsProperty">
      <summary>Identifies the <see cref="P:System.Windows.OutOfBrowserSettings.SecuritySettings" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.OutOfBrowserSettings.SecuritySettings" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.OutOfBrowserSettings.ShortName">
      <summary>Gets the short version of the application title. </summary>
      <returns>The short version of the application title. </returns>
    </member>
    <member name="F:System.Windows.OutOfBrowserSettings.ShortNameProperty">
      <summary>Identifies the <see cref="P:System.Windows.OutOfBrowserSettings.ShortName" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.OutOfBrowserSettings.ShortName" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.OutOfBrowserSettings.ShowInstallMenuItem">
      <summary>Gets a value that indicates whether the application right-click menu includes an install option.</summary>
      <returns>true if the right-click menu includes an install option; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:System.Windows.OutOfBrowserSettings.ShowInstallMenuItemProperty">
      <summary>Identifies the <see cref="P:System.Windows.OutOfBrowserSettings.ShowInstallMenuItem" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.OutOfBrowserSettings.ShowInstallMenuItem" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.OutOfBrowserSettings.WindowSettings">
      <summary>Gets the settings applied to the application window.</summary>
      <returns>The settings applied to the application window.</returns>
    </member>
    <member name="F:System.Windows.OutOfBrowserSettings.WindowSettingsProperty">
      <summary>Identifies the <see cref="P:System.Windows.OutOfBrowserSettings.WindowSettings" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.OutOfBrowserSettings.WindowSettings" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Point">
      <summary>Represents an x- and y-coordinate pair in two-dimensional space. Can also represent a logical point for certain property usages.</summary>
    </member>
    <member name="M:System.Windows.Point.#ctor(System.Double,System.Double)">
      <summary>Initializes a <see cref="T:System.Windows.Point" /> structure that contains the specified values. </summary>
      <param name="x">The x-coordinate value of the <see cref="T:System.Windows.Point" /> structure. </param>
      <param name="y">The y-coordinate value of the <see cref="T:System.Windows.Point" /> structure. </param>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Object)">
      <summary>Determines whether the specified object is a <see cref="T:System.Windows.Point" /> and whether it contains the same values as this <see cref="T:System.Windows.Point" />. </summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.Windows.Point" /> and contains the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values as this <see cref="T:System.Windows.Point" />; otherwise, false.</returns>
      <param name="o">The object to compare.</param>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point)">
      <summary>Compares two <see cref="T:System.Windows.Point" /> structures for equality.</summary>
      <returns>true if both <see cref="T:System.Windows.Point" /> structures contain the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values; otherwise, false.</returns>
      <param name="value">The point to compare to this instance.</param>
    </member>
    <member name="M:System.Windows.Point.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.Point" />.</summary>
      <returns>The hash code for this <see cref="T:System.Windows.Point" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)">
      <summary>Compares two <see cref="T:System.Windows.Point" /> structures for equality.</summary>
      <returns>true if both the <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values of <paramref name="point1" /> and <paramref name="point2" /> are equal; otherwise, false.</returns>
      <param name="point1">The first <see cref="T:System.Windows.Point" /> structure to compare.</param>
      <param name="point2">The second <see cref="T:System.Windows.Point" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)">
      <summary>Compares two <see cref="T:System.Windows.Point" /> structures for inequality</summary>
      <returns>true if <paramref name="point1" /> and <paramref name="point2" /> have different <see cref="P:System.Windows.Point.X" /> or <see cref="P:System.Windows.Point.Y" /> values; false if <paramref name="point1" /> and <paramref name="point2" /> have the same <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values.</returns>
      <param name="point1">The first point to compare.</param>
      <param name="point2">The second point to compare.</param>
    </member>
    <member name="M:System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A string containing the value of the current instance in the specified format.</returns>
      <param name="format">The string specifying the format to use. -or- null to use the default format defined for the type of the IFormattable implementation. </param>
      <param name="provider">The IFormatProvider to use to format the value. -or- null to obtain the numeric format information from the current locale setting of the operating system. </param>
    </member>
    <member name="M:System.Windows.Point.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Point" />. </summary>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values of this <see cref="T:System.Windows.Point" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Point.ToString(System.IFormatProvider)">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Point" />. </summary>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Point.X" /> and <see cref="P:System.Windows.Point.Y" /> values of this <see cref="T:System.Windows.Point" /> structure.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="P:System.Windows.Point.X">
      <summary>Gets or sets the <see cref="P:System.Windows.Point.X" />-coordinate value of this <see cref="T:System.Windows.Point" /> structure. </summary>
      <returns>The <see cref="P:System.Windows.Point.X" />-coordinate value of this <see cref="T:System.Windows.Point" /> structure. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Point.Y">
      <summary>Gets or sets the <see cref="P:System.Windows.Point.Y" />-coordinate value of this <see cref="T:System.Windows.Point" />. </summary>
      <returns>The <see cref="P:System.Windows.Point.Y" />-coordinate value of this <see cref="T:System.Windows.Point" /> structure.  The default value is 0.</returns>
    </member>
    <member name="T:System.Windows.PresentationFrameworkCollection`1">
      <summary>Provides a common collection class for Silverlight collections.</summary>
      <typeparam name="T">Type constraint for type safety of the constrained collection implementation.</typeparam>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</summary>
      <param name="value">The object to add.</param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.Clear">
      <summary>Removes all items from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</summary>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> contains a specific value.</summary>
      <returns>true if the object is found in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />; otherwise, false.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</returns>
    </member>
    <member name="F:System.Windows.PresentationFrameworkCollection`1.CountProperty">
      <summary>Identifies the <see cref="P:System.Windows.PresentationFrameworkCollection`1.Count" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.PresentationFrameworkCollection`1.Count" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.IndexOf(`0)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />. </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.Insert(System.Int32,`0)">
      <summary>Inserts an item to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted. </param>
      <param name="value">The object to insert into the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />. </param>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</summary>
      <returns>true if an object was removed; otherwise, false.</returns>
      <param name="value">The object to remove from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.RemoveAt(System.Int32)">
      <summary>Removes the item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove. </param>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> .</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</returns>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</summary>
      <returns>The position into which the new element was inserted. </returns>
      <param name="value">The object to add.</param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> contains a specific value.</summary>
      <returns>true if the object is found in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />; otherwise, false.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />. </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Windows.PresentationFrameworkCollection`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted. </param>
      <param name="value">The object to insert into the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />. </param>
    </member>
    <member name="P:System.Windows.PresentationFrameworkCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.PresentationFrameworkCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Windows.PresentationFrameworkCollection`1" />.</param>
    </member>
    <member name="T:System.Windows.PropertyChangedCallback">
      <summary>Represents the callback that is invoked when the effective property value of a dependency property changes.</summary>
      <param name="d">The <see cref="T:System.Windows.DependencyObject" /> on which the property has changed value.</param>
      <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
    </member>
    <member name="T:System.Windows.PropertyMetadata">
      <summary>Defines certain behavior aspects of a dependency property, including conditions it was registered with. </summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class, using a provided property default value.</summary>
      <param name="defaultValue">A default value for the property where this <see cref="T:System.Windows.PropertyMetadata" /> is applied.</param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class, using a provided property default value and property changed callback reference.</summary>
      <param name="defaultValue">A default value for the property where this <see cref="T:System.Windows.PropertyMetadata" /> is applied.</param>
      <param name="propertyChangedCallback">A reference to the callback to call for property changed behavior.</param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class, using the supplied property changed callback reference.</summary>
      <param name="propertyChangedCallback">A reference to the callback to call for property changed behavior.</param>
    </member>
    <member name="P:System.Windows.PropertyMetadata.DefaultValue">
      <summary>Gets the default value for the dependency property. </summary>
      <returns>The default value for the dependency property.</returns>
    </member>
    <member name="T:System.Windows.PropertyPath">
      <summary>Implements a data structure for describing a property as a path below another property, or below an owning type. Property paths are used in data binding to objects, and in storyboards and timelines for animations.</summary>
    </member>
    <member name="M:System.Windows.PropertyPath.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class.</summary>
      <param name="parameter">A dependency property identifier, or a property path string.</param>
    </member>
    <member name="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class.</summary>
      <param name="path">The path string for this <see cref="T:System.Windows.PropertyPath" />.</param>
      <param name="pathParameters">Do not use. See Remarks.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Provided an array of length greater than zero for <paramref name="pathParameters" />.</exception>
    </member>
    <member name="P:System.Windows.PropertyPath.Path">
      <summary>Gets the path value held by this <see cref="T:System.Windows.PropertyPath" />.</summary>
      <returns>The path value held by this <see cref="T:System.Windows.PropertyPath" />.</returns>
    </member>
    <member name="T:System.Windows.PropertyPathConverter">
      <summary>Provides type conversion support for the <see cref="T:System.Windows.PropertyPath" /> type. </summary>
    </member>
    <member name="M:System.Windows.PropertyPathConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyPathConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.PropertyPathConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert an object of one type to the <see cref="T:System.Windows.PropertyPath" /> type.</summary>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from. </param>
    </member>
    <member name="M:System.Windows.PropertyPathConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given value to the <see cref="T:System.Windows.PropertyPath" /> type.</summary>
      <returns>The returned <see cref="T:System.Windows.PropertyPath" />.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. </param>
      <param name="value">The object to convert.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is not a string and is not an existing <see cref="T:System.Windows.PropertyPath" />.</exception>
    </member>
    <member name="T:System.Windows.Rect">
      <summary>Describes the width, height, and point origin of a rectangle. </summary>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a <see cref="T:System.Windows.Rect" /> structure that has the specified x-coordinate, y-coordinate, width, and height. </summary>
      <param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
      <param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <exception cref="T:System.ArgumentException">width or height are less than 0.</exception>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)">
      <summary>Initializes a <see cref="T:System.Windows.Rect" /> structure that is exactly large enough to contain the two specified points. </summary>
      <param name="point1">The first point that the new rectangle must contain.</param>
      <param name="point2">The second point that the new rectangle must contain.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)">
      <summary>Initializes a <see cref="T:System.Windows.Rect" /> structure based on an origin and size. </summary>
      <param name="location">The origin of the new <see cref="T:System.Windows.Rect" />.</param>
      <param name="size">The size of the new <see cref="T:System.Windows.Rect" />.</param>
    </member>
    <member name="P:System.Windows.Rect.Bottom">
      <summary>Gets the y-axis value of the bottom of the rectangle. </summary>
      <returns>The y-axis value of the bottom of the rectangle. If the rectangle is empty, the value is <see cref="F:System.Double.NegativeInfinity" /> .</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Point)">
      <summary>Indicates whether the rectangle described by the <see cref="T:System.Windows.Rect" /> contains the specified point.</summary>
      <returns>true if the rectangle described by the <see cref="T:System.Windows.Rect" /> contains the specified point; otherwise, false.</returns>
      <param name="point">The point to check.</param>
    </member>
    <member name="P:System.Windows.Rect.Empty">
      <summary>Gets a special value that represents a rectangle with no position or area. </summary>
      <returns>The empty rectangle, which has <see cref="P:System.Windows.Rect.X" /> and <see cref="P:System.Windows.Rect.Y" /> property values of <see cref="F:System.Double.PositiveInfinity" />, and has <see cref="P:System.Windows.Rect.Width" /> and <see cref="P:System.Windows.Rect.Height" /> property values of <see cref="F:System.Double.NegativeInfinity" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Object)">
      <summary>Indicates whether the specified object is equal to the current <see cref="T:System.Windows.Rect" />.</summary>
      <returns>true if <paramref name="o" /> is a <see cref="T:System.Windows.Rect" /> and has the same x,y,width,height values as the current <see cref="T:System.Windows.Rect" />; otherwise, false.</returns>
      <param name="o">The object to compare to the current rectangle.</param>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect)">
      <summary>Indicates whether the specified <see cref="T:System.Windows.Rect" /> is equal to the current <see cref="T:System.Windows.Rect" />. </summary>
      <returns>true if the specified <see cref="T:System.Windows.Rect" /> has the same x,y,width,height property values as the current <see cref="T:System.Windows.Rect" />; otherwise, false.</returns>
      <param name="value">The rectangle to compare to the current rectangle.</param>
    </member>
    <member name="M:System.Windows.Rect.GetHashCode">
      <summary>Creates a hash code for the <see cref="T:System.Windows.Rect" />. </summary>
      <returns>A hash code for the current <see cref="T:System.Windows.Rect" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Rect.Height">
      <summary>Gets or sets the height of the rectangle. </summary>
      <returns>A value that represents the height of the rectangle. The default is 0.</returns>
      <exception cref="T:System.ArgumentException">Specified a value less than 0.</exception>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect)">
      <summary>Finds the intersection of the rectangle represented by the current <see cref="T:System.Windows.Rect" /> and the rectangle represented by the specified <see cref="T:System.Windows.Rect" />, and stores the result as the current <see cref="T:System.Windows.Rect" />. </summary>
      <param name="rect">The rectangle to intersect with the current rectangle.</param>
    </member>
    <member name="P:System.Windows.Rect.IsEmpty">
      <summary>Gets a value that indicates whether the rectangle is the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</summary>
      <returns>true if the rectangle is the <see cref="P:System.Windows.Rect.Empty" /> rectangle; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Rect.Left">
      <summary>Gets the x-axis value of the left side of the rectangle. </summary>
      <returns>The x-axis value of the left side of the rectangle.</returns>
    </member>
    <member name="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)">
      <summary>Compares two <see cref="T:System.Windows.Rect" /> structures for equality.</summary>
      <returns>true if the <see cref="T:System.Windows.Rect" /> structures have the same x,y,width,height property values; otherwise, false.</returns>
      <param name="rect1">The first rectangle to compare.</param>
      <param name="rect2">The second rectangle to compare.</param>
    </member>
    <member name="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)">
      <summary>Compares two <see cref="T:System.Windows.Rect" /> structures for inequality.  </summary>
      <returns>true if the <see cref="T:System.Windows.Rect" /> structures do not have the same x,y,width,height property values; otherwise, false.</returns>
      <param name="rect1">The first rectangle to compare.</param>
      <param name="rect2">The second rectangle to compare.</param>
    </member>
    <member name="P:System.Windows.Rect.Right">
      <summary>Gets the x-axis value of the right side of the rectangle.  </summary>
      <returns>The x-axis value of the right side of the rectangle.</returns>
    </member>
    <member name="M:System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A string containing the value of the current instance in the specified format.</returns>
      <param name="format">The string specifying the format to use. -or- null to use the default format defined for the type of the IFormattable implementation. </param>
      <param name="provider">The IFormatProvider to use to format the value. -or- null to obtain the numeric format information from the current locale setting of the operating system. </param>
    </member>
    <member name="P:System.Windows.Rect.Top">
      <summary>Gets the y-axis position of the top of the rectangle. </summary>
      <returns>The y-axis position of the top of the rectangle.</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString">
      <summary>Returns a string representation of the <see cref="T:System.Windows.Rect" /> structure. </summary>
      <returns>A string representation of the current <see cref="T:System.Windows.Rect" /> structure. The string has the following form: "<see cref="P:System.Windows.Rect.X" />,<see cref="P:System.Windows.Rect.Y" />,<see cref="P:System.Windows.Rect.Width" />,<see cref="P:System.Windows.Rect.Height" />".</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString(System.IFormatProvider)">
      <summary>Returns a string representation of the rectangle by using the specified format provider. </summary>
      <returns>A string representation of the current rectangle that is determined by the specified format provider.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Point)">
      <summary>Expands the rectangle represented by the current <see cref="T:System.Windows.Rect" /> exactly enough to contain the specified point. </summary>
      <param name="point">The point to include.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect)">
      <summary>Expands the rectangle represented by the current <see cref="T:System.Windows.Rect" /> exactly enough to contain the specified rectangle. </summary>
      <param name="rect">The rectangle to include.</param>
    </member>
    <member name="P:System.Windows.Rect.Width">
      <summary>Gets or sets the width of the rectangle.  </summary>
      <returns>A value that represents the width of the rectangle in pixels. The default is 0.</returns>
      <exception cref="T:System.ArgumentException">Specified a value less than 0.</exception>
    </member>
    <member name="P:System.Windows.Rect.X">
      <summary>Gets or sets the x-axis value of the left side of the rectangle. </summary>
      <returns>The x-axis value of the left side of the rectangle. This value is interpreted as pixels within the coordinate space.</returns>
    </member>
    <member name="P:System.Windows.Rect.Y">
      <summary>Gets or sets the y-axis value of the top side of the rectangle. </summary>
      <returns>The y-axis value of the top side of the rectangle. This value is interpreted as pixels within the coordinate space..</returns>
    </member>
    <member name="T:System.Windows.ResourceDictionary">
      <summary>Provides a dictionary that contains keyed resources used by components of a Silverlight-based application. </summary>
    </member>
    <member name="M:System.Windows.ResourceDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.ResourceDictionary" /> class. </summary>
    </member>
    <member name="M:System.Windows.ResourceDictionary.Add(System.Object,System.Object)">
      <summary>Adds an item to the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
      <param name="key">The string key of the item to add.</param>
      <param name="value">The item value to add. </param>
      <exception cref="T:System.NotSupportedException">Attempted to add null as a value.</exception>
      <exception cref="T:System.ArgumentException">Attempted to add an item with a <paramref name="key" /> that already exists in this <see cref="T:System.Windows.ResourceDictionary" />.-or-Attempted to use a <paramref name="key" /> that is not a string.</exception>
    </member>
    <member name="M:System.Windows.ResourceDictionary.Add(System.String,System.Object)">
      <summary>Adds an item to the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
      <param name="key">The string key of the item to add.</param>
      <param name="value">The item value to add. </param>
      <exception cref="T:System.NotSupportedException">Attempted to add null as a value.</exception>
      <exception cref="T:System.ArgumentException">Attempted to add an item with a <paramref name="key" /> that already exists in this <see cref="T:System.Windows.ResourceDictionary" />.</exception>
    </member>
    <member name="M:System.Windows.ResourceDictionary.Clear">
      <summary>Removes all items from this <see cref="T:System.Windows.ResourceDictionary" />.</summary>
    </member>
    <member name="M:System.Windows.ResourceDictionary.Contains(System.Object)">
      <summary>Returns a value that indicates whether a specified key exists in the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
      <returns>true if an item with that key exists in the <see cref="T:System.Windows.ResourceDictionary" />; otherwise, false.</returns>
      <param name="key">The key to check for in the <see cref="T:System.Windows.ResourceDictionary" />.</param>
    </member>
    <member name="M:System.Windows.ResourceDictionary.CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Windows.ResourceDictionary" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Windows.ResourceDictionary" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Windows.ResourceDictionary.Count">
      <summary>Gets the number of elements contained in the collection.</summary>
      <returns>The number of elements contained in the collection.</returns>
    </member>
    <member name="M:System.Windows.ResourceDictionary.GetEnumerator">
      <summary>Exposes the enumerator, which supports a simple iteration over a non-generic collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Windows.ResourceDictionary.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Windows.ResourceDictionary" /> has a fixed size.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="P:System.Windows.ResourceDictionary.IsReadOnly">
      <summary>Gets a value indicating whether the collection is read-only.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="P:System.Windows.ResourceDictionary.Item(System.Object)">
      <summary>Gets the element at the specified index.</summary>
      <returns>The object if it exists; otherwise, null.</returns>
      <param name="key">The key of the element to get. </param>
      <exception cref="T:System.NotImplementedException">Attempted to set a value using the indexer. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is not a string.</exception>
    </member>
    <member name="P:System.Windows.ResourceDictionary.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
      <returns>The <see cref="T:System.Collections.ICollection" /> of all keys in this <see cref="T:System.Windows.ResourceDictionary" />.</returns>
    </member>
    <member name="P:System.Windows.ResourceDictionary.MergedDictionaries">
      <summary>Gets a collection of the <see cref="T:System.Windows.ResourceDictionary" /> dictionaries that constitute the various resource dictionaries in the merged dictionaries.</summary>
      <returns>A collection of the <see cref="T:System.Windows.ResourceDictionary" /> dictionaries that constitute the various resource dictionaries in the merged dictionaries. </returns>
    </member>
    <member name="M:System.Windows.ResourceDictionary.Remove(System.Object)">
      <summary>Removes a specific item from the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
      <param name="key">The string key of the item to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Attempted to use a <paramref name="key" /> that is not a string.</exception>
    </member>
    <member name="M:System.Windows.ResourceDictionary.Remove(System.String)">
      <summary>Removes a specific item from the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
      <param name="key">The string key of the item to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Windows.ResourceDictionary.Source">
      <summary>Gets or sets a URI that provides the source location of a merged resource dictionary.</summary>
      <returns>A URI that provides the source location of a merged resource dictionary. This is typically a path within the XAP for an application, or a relative reference to a loose XAML file.</returns>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.Object,System.Object})">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)" />.</summary>
      <param name="item">The object to add to the collection.</param>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#Clear">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Clear" />.</summary>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.Object,System.Object})">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)" />.</summary>
      <returns>true if <paramref name="item" /> is found in the collection; otherwise, false.</returns>
      <param name="item">The object to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.Object,System.Object}[],System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" />.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing. </param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins. </param>
      <exception cref="T:System.NotImplementedException">Thrown in all cases by this implementation.</exception>
    </member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#Count">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</summary>
      <returns>The number of elements contained in the collection.</returns>
      <exception cref="T:System.NotImplementedException">Thrown in all cases by this implementation.</exception>
    </member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.Object,System.Object})">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)" />.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the collection; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original collection. </returns>
      <param name="item">The object to remove from the collection.</param>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#Add(System.Object,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />.</summary>
      <param name="key">The object to use as the key for the element to add.</param>
      <param name="value">The object to use as the value for the element to add.</param>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />.</summary>
      <returns>true if the dictionary contains an element with the key; otherwise, false.</returns>
      <param name="key">The key to locate in the dictionary.</param>
    </member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#Item(System.Object)">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />.</summary>
      <returns>The element with the specified key. </returns>
      <param name="key">The key of the element to get or set.</param>
    </member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.IDictionary`2.Keys" />.</summary>
      <returns>A collection that contains the keys of the elements in the dictionary.</returns>
      <exception cref="T:System.NotImplementedException">Thrown in all cases.</exception>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IDictionary`2.Remove(`0)" />.</summary>
      <returns>true if the element was successfully removed from the collection; otherwise, false. This method also returns false if <paramref name="key" /> is not found in the original collection. </returns>
      <param name="key">The key of the element to remove. </param>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(System.Object,System.Object@)">
      <summary>For a description of this member, see  <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" />.</summary>
      <returns>true if the dictionary contains an object with the specified key; otherwise, false.</returns>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. </param>
    </member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.IDictionary`2.Values" />.</summary>
      <returns>A collection that contains the values of the elements in the dictionary.</returns>
      <exception cref="T:System.NotImplementedException">Thrown in all cases.</exception>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
      <exception cref="T:System.NotImplementedException">Thrown in all cases.</exception>
    </member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="P:System.Windows.ResourceDictionary.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>Always null. <see cref="T:System.Windows.ResourceDictionary" /> is not synchronized.</returns>
      <exception cref="T:System.NotImplementedException">Thrown in all cases.</exception>
    </member>
    <member name="M:System.Windows.ResourceDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An enumerator that can be used to iterate through the collection. </returns>
    </member>
    <member name="P:System.Windows.ResourceDictionary.Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the values of the <see cref="T:System.Windows.ResourceDictionary" />.</summary>
      <returns>The <see cref="T:System.Collections.ICollection" /> of all values in this <see cref="T:System.Windows.ResourceDictionary" />.</returns>
    </member>
    <member name="T:System.Windows.RoutedEvent">
      <summary>Represents a routed event to the Silverlight event system.</summary>
    </member>
    <member name="M:System.Windows.RoutedEvent.ToString">
      <summary>Returns the string representation of the routed event.</summary>
      <returns>The name of the routed event.</returns>
    </member>
    <member name="T:System.Windows.RoutedEventArgs">
      <summary>Contains state information and event data associated with a routed event. </summary>
    </member>
    <member name="M:System.Windows.RoutedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.RoutedEventArgs" /> class. </summary>
    </member>
    <member name="P:System.Windows.RoutedEventArgs.OriginalSource">
      <summary>Gets a reference to the object that raised the event. </summary>
      <returns>The object that raised the event.</returns>
    </member>
    <member name="T:System.Windows.RoutedEventHandler">
      <summary>Represents the method that will handle routed events.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data. </param>
    </member>
    <member name="T:System.Windows.RoutedPropertyChangedEventArgs`1">
      <summary>Provides data about a change in value to a dependency property as reported by particular routed events, including the previous and current value of the property that changed. </summary>
      <typeparam name="T">The type of the dependency property that has changed.</typeparam>
    </member>
    <member name="M:System.Windows.RoutedPropertyChangedEventArgs`1.#ctor(`0,`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.RoutedPropertyChangedEventArgs`1" /> class, with provided old and new values.</summary>
      <param name="oldValue">The previous value of the property, before the event was raised.</param>
      <param name="newValue">The current value of the property at the time of the event.</param>
    </member>
    <member name="P:System.Windows.RoutedPropertyChangedEventArgs`1.NewValue">
      <summary>Gets the new value of a property as reported by a property-changed event. </summary>
      <returns>The generic value. In a practical implementation of the <see cref="T:System.Windows.RoutedPropertyChangedEventArgs`1" />, the generic type of this property is replaced with the constrained type of the implementation.</returns>
    </member>
    <member name="P:System.Windows.RoutedPropertyChangedEventArgs`1.OldValue">
      <summary>Gets the previous value of the property as reported by a property-changed event. </summary>
      <returns>The generic value. In a practical implementation of the <see cref="T:System.Windows.RoutedPropertyChangedEventArgs`1" />, the generic type of this property is replaced with the constrained type of the implementation.</returns>
    </member>
    <member name="T:System.Windows.RoutedPropertyChangedEventHandler`1">
      <summary>Represents methods that will handle various routed events that track property value changes.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data. Specific event definitions will constrain <see cref="T:System.Windows.RoutedPropertyChangedEventArgs`1" /> to a type, with the type parameter of the constraint matching the type parameter constraint of a delegate implementation.</param>
      <typeparam name="T">The type of the property value where changes in value are reported.</typeparam>
    </member>
    <member name="T:System.Windows.SecuritySettings">
      <summary>Represents the security configuration of an out-of-browser application. </summary>
    </member>
    <member name="M:System.Windows.SecuritySettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.SecuritySettings" /> class. </summary>
    </member>
    <member name="P:System.Windows.SecuritySettings.ElevatedPermissions">
      <summary>Gets a value that indicates whether the out-of-browser application requires elevated permissions. </summary>
      <returns>A value that indicates whether the out-of-browser application requires elevated permissions.</returns>
    </member>
    <member name="F:System.Windows.SecuritySettings.ElevatedPermissionsProperty">
      <summary>Identifies the <see cref="P:System.Windows.SecuritySettings.ElevatedPermissions" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.SecuritySettings.ElevatedPermissions" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Setter">
      <summary>Applies a value to a property in a <see cref="T:System.Windows.Style" />.</summary>
    </member>
    <member name="M:System.Windows.Setter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Setter" /> class. </summary>
    </member>
    <member name="M:System.Windows.Setter.#ctor(System.Windows.DependencyProperty,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Setter" /> class with the specified property and value.</summary>
      <param name="property">The dependency property to apply the value to.</param>
      <param name="value">The value to apply to the property.</param>
    </member>
    <member name="P:System.Windows.Setter.Property">
      <summary>Gets or sets the property to apply the <see cref="P:System.Windows.Setter.Value" /> to.</summary>
      <returns>A <see cref="T:System.Windows.DependencyProperty" /> to which the <see cref="P:System.Windows.Setter.Value" /> will be applied. The default is null.</returns>
    </member>
    <member name="P:System.Windows.Setter.Value">
      <summary>Gets or sets the value to apply to the property that is specified by the <see cref="T:System.Windows.Setter" />.</summary>
      <returns>The value to apply to the property that is specified by the <see cref="T:System.Windows.Setter" />.</returns>
    </member>
    <member name="T:System.Windows.SetterBase">
      <summary>Represents the base class for value setters. </summary>
    </member>
    <member name="P:System.Windows.SetterBase.IsSealed">
      <summary>Gets a value that indicates whether this object is in an immutable state.</summary>
      <returns>true if this object is in an immutable state; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.SetterBaseCollection">
      <summary>Represents a collection of objects that inherit from <see cref="T:System.Windows.SetterBase" />.</summary>
    </member>
    <member name="M:System.Windows.SetterBaseCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.SetterBaseCollection" /> class. </summary>
    </member>
    <member name="P:System.Windows.SetterBaseCollection.IsSealed">
      <summary>Gets a value that indicates whether the collection is in a read-only state.</summary>
      <returns>true if this object is in a read-only state and cannot be changed; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Size">
      <summary>Describes the width and height of an object. </summary>
    </member>
    <member name="M:System.Windows.Size.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Size" /> structure and assigns it an initial <paramref name="width" /> and <paramref name="height" />.</summary>
      <param name="width">The initial width of the instance of <see cref="T:System.Windows.Size" />.</param>
      <param name="height">The initial height of the instance of <see cref="T:System.Windows.Size" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="width" /> or <paramref name="height" /> are less than 0.</exception>
    </member>
    <member name="P:System.Windows.Size.Empty">
      <summary>Gets a value that represents a static empty <see cref="T:System.Windows.Size" />. </summary>
      <returns>An empty instance of <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Object)">
      <summary>Compares an object to an instance of <see cref="T:System.Windows.Size" /> for equality. </summary>
      <returns>true if the sizes are equal; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Object" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size)">
      <summary>Compares a value to an instance of <see cref="T:System.Windows.Size" /> for equality. </summary>
      <returns>true if the instances of <see cref="T:System.Windows.Size" /> are equal; otherwise, false.</returns>
      <param name="value">The size to compare to this current instance of <see cref="T:System.Windows.Size" />.</param>
    </member>
    <member name="M:System.Windows.Size.GetHashCode">
      <summary>Gets the hash code for this instance of <see cref="T:System.Windows.Size" />. </summary>
      <returns>The hash code for this instance of <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="P:System.Windows.Size.Height">
      <summary>Gets or sets the height of this instance of <see cref="T:System.Windows.Size" />. </summary>
      <returns>The <see cref="P:System.Windows.Size.Height" /> of this instance of <see cref="T:System.Windows.Size" />, in pixels. The default is 0. The value cannot be negative.</returns>
      <exception cref="T:System.ArgumentException">Specified a value less than 0.</exception>
    </member>
    <member name="P:System.Windows.Size.IsEmpty">
      <summary>Gets a value that indicates whether this instance of <see cref="T:System.Windows.Size" /> is <see cref="P:System.Windows.Size.Empty" />. </summary>
      <returns>true if this instance of size is <see cref="P:System.Windows.Size.Empty" />; otherwise false.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Equality(System.Windows.Size,System.Windows.Size)">
      <summary>Compares two instances of <see cref="T:System.Windows.Size" /> for equality. </summary>
      <returns>true if the two instances of <see cref="T:System.Windows.Size" /> are equal; otherwise false.</returns>
      <param name="size1">The first instance of <see cref="T:System.Windows.Size" /> to compare.</param>
      <param name="size2">The second instance of <see cref="T:System.Windows.Size" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Size.op_Inequality(System.Windows.Size,System.Windows.Size)">
      <summary>Compares two instances of <see cref="T:System.Windows.Size" /> for inequality. </summary>
      <returns>true if the instances of <see cref="T:System.Windows.Size" /> are not equal; otherwise false.</returns>
      <param name="size1">The first instance of <see cref="T:System.Windows.Size" /> to compare.</param>
      <param name="size2">The second instance of <see cref="T:System.Windows.Size" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Size.ToString">
      <summary>Returns a string representation of this <see cref="T:System.Windows.Size" />.</summary>
      <returns>A string representation of this <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="P:System.Windows.Size.Width">
      <summary>Gets or sets the width of this instance of <see cref="T:System.Windows.Size" />. </summary>
      <returns>The <see cref="P:System.Windows.Size.Width" /> of this instance of <see cref="T:System.Windows.Size" />, in pixels. The default value is 0. The value cannot be negative.</returns>
      <exception cref="T:System.ArgumentException">Specified a value less than 0.</exception>
    </member>
    <member name="T:System.Windows.SizeChangedEventArgs">
      <summary>Provides data related to the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event. </summary>
    </member>
    <member name="P:System.Windows.SizeChangedEventArgs.NewSize">
      <summary>Gets the new size of the object reporting the size change.</summary>
      <returns>The new size. The <see cref="T:System.Windows.Size" /> structure contains the new height and width.</returns>
    </member>
    <member name="P:System.Windows.SizeChangedEventArgs.PreviousSize">
      <summary>Gets the previous size of the object reporting the size change.</summary>
      <returns>The previous size. </returns>
    </member>
    <member name="T:System.Windows.SizeChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.StartupEventArgs">
      <summary>Contains the event data for the <see cref="E:System.Windows.Application.Startup" /> event.</summary>
    </member>
    <member name="P:System.Windows.StartupEventArgs.InitParams">
      <summary>Gets the initialization parameters that were passed as part of HTML initialization of a Silverlight plug-in.</summary>
      <returns>The set of initialization parameters, as a dictionary with key strings and value strings.</returns>
    </member>
    <member name="T:System.Windows.StartupEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Application.Startup" /> event. </summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Style">
      <summary>Contains property setters that can be shared between instances of a type.</summary>
    </member>
    <member name="M:System.Windows.Style.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Style" /> class. </summary>
    </member>
    <member name="M:System.Windows.Style.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Style" /> class to use on the specified <see cref="T:System.Type" />. </summary>
      <param name="targetType">The type to which the style will apply.</param>
    </member>
    <member name="P:System.Windows.Style.BasedOn">
      <summary>Gets or sets a defined style that is the basis of the current style.</summary>
      <returns>A defined style that is the basis of the current style. The default value is null.</returns>
    </member>
    <member name="P:System.Windows.Style.IsSealed">
      <summary>Gets a value that indicates whether the style is read-only and cannot be changed.</summary>
      <returns>true if the style is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Style.Seal">
      <summary>Locks the style so that the <see cref="P:System.Windows.Style.TargetType" /> property or any <see cref="T:System.Windows.Setter" /> in the <see cref="P:System.Windows.Style.Setters" /> collection cannot be changed.</summary>
    </member>
    <member name="P:System.Windows.Style.Setters">
      <summary>Gets a collection of <see cref="T:System.Windows.Setter" /> objects.</summary>
      <returns>A collection of <see cref="T:System.Windows.Setter" /> objects. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Windows.Style.TargetType">
      <summary>Gets or sets the type for which the style is intended.</summary>
      <returns>The type of object to which the style is applied.</returns>
    </member>
    <member name="T:System.Windows.StyleTypedPropertyAttribute">
      <summary>Represents an attribute that is applied to the class definition and reports the <see cref="P:System.Windows.Style.TargetType" /> of the properties that are of type <see cref="T:System.Windows.Style" />.</summary>
    </member>
    <member name="M:System.Windows.StyleTypedPropertyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.StyleTypedPropertyAttribute" /> class.</summary>
    </member>
    <member name="P:System.Windows.StyleTypedPropertyAttribute.Property">
      <summary>Gets or sets the name of the property that is of type <see cref="T:System.Windows.Style" />.</summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="P:System.Windows.StyleTypedPropertyAttribute.StyleTargetType">
      <summary>Gets or sets the <see cref="P:System.Windows.Style.TargetType" /> of the <see cref="P:System.Windows.StyleTypedPropertyAttribute.Property" /> this attribute is specifying. </summary>
      <returns>The <see cref="P:System.Windows.Style.TargetType" /> of the <see cref="P:System.Windows.StyleTypedPropertyAttribute.Property" /> this attribute is specifying.</returns>
    </member>
    <member name="T:System.Windows.SystemColors">
      <summary>Contains system colors, system brushes, and system resource keys that correspond to system display elements.</summary>
    </member>
    <member name="P:System.Windows.SystemColors.ActiveBorderColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of the active window's border.</summary>
      <returns>The color of the active window's border.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.ActiveCaptionColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the background color of the active window's title bar.</summary>
      <returns>The background color of the active window's title bar.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.ActiveCaptionTextColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of the text in the active window's title bar.</summary>
      <returns>The color of the active window's title bar.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.AppWorkspaceColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of the application workspace.</summary>
      <returns>The color of the application workspace.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.ControlColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the face color of a three-dimensional display element.</summary>
      <returns>The face color of a three-dimensional display element.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.ControlDarkColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the shadow color of a three-dimensional display element.</summary>
      <returns>The shadow color of a three-dimensional display element.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.ControlDarkDarkColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the dark shadow color of a three-dimensional display element.</summary>
      <returns>The dark shadow color of a three-dimensional display element.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.ControlLightColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the light color of a three-dimensional display element.</summary>
      <returns>The light color of a three-dimensional display element.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.ControlLightLightColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the highlight color of a three-dimensional display element.</summary>
      <returns>The highlight color of a three-dimensional display element.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.ControlTextColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of text in a three-dimensional display element.</summary>
      <returns>The color of text in a three-dimensional display element.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.DesktopColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of the desktop.</summary>
      <returns>The color of the desktop.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.GrayTextColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of disabled text.</summary>
      <returns>The color of disabled text.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.HighlightColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the background color of selected items.</summary>
      <returns>The background color of selected items.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.HighlightTextColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of the text of selected items.</summary>
      <returns>The color of the text of selected items.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.InactiveBorderColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of an inactive window's border.</summary>
      <returns>The color of an inactive window's border.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.InactiveCaptionColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the background color of an inactive window's title bar.</summary>
      <returns>The background color of an inactive window's title bar.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.InactiveCaptionTextColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of the text of an inactive window's title bar.</summary>
      <returns>The color of the text of an inactive window's title bar.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.InfoColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the background color for the <see cref="T:System.Windows.Controls.ToolTip" /> control.</summary>
      <returns>The background color for the <see cref="T:System.Windows.Controls.ToolTip" /> control.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.InfoTextColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the text color for the <see cref="T:System.Windows.Controls.ToolTip" /> control.</summary>
      <returns>The text color for the <see cref="T:System.Windows.Controls.ToolTip" /> control.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.MenuColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of a menu's background.</summary>
      <returns>The color of a menu's background.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.MenuTextColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of a menu's text.</summary>
      <returns>The color of a menu's text.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.ScrollBarColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the background color of a scroll bar.</summary>
      <returns>The background color of a scroll bar.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.WindowColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the background color in the client area of a window.</summary>
      <returns>The background color in the client area of a window.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.WindowFrameColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of a window frame.</summary>
      <returns>The color of a window frame.</returns>
    </member>
    <member name="P:System.Windows.SystemColors.WindowTextColor">
      <summary>Gets a <see cref="T:System.Windows.Media.Color" /> structure that is the color of the text in the client area of a window.</summary>
      <returns>The color of the text in the client area of a window.</returns>
    </member>
    <member name="T:System.Windows.SystemParameters">
      <summary>Contains properties that you can use to query system settings.</summary>
    </member>
    <member name="P:System.Windows.SystemParameters.HighContrast">
      <summary>Gets a value that indicates whether the client computer is in high-contrast mode.</summary>
      <returns>true if the client computer is in high-contrast mode; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.SystemParameters.WheelScrollLines">
      <summary>Gets a value that indicates the number of lines to scroll vertically in response to mouse wheel events.</summary>
      <returns>The number of lines to scroll vertically in response to mouse wheel events.</returns>
    </member>
    <member name="T:System.Windows.TemplateBindingExpression">
      <summary>Supports template binding.</summary>
    </member>
    <member name="T:System.Windows.TemplatePartAttribute">
      <summary>Represents an attribute that is applied to the class definition to identify the types of the named parts that are used for control templating.</summary>
    </member>
    <member name="M:System.Windows.TemplatePartAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.TemplatePartAttribute" /> class</summary>
    </member>
    <member name="P:System.Windows.TemplatePartAttribute.Name">
      <summary>Gets or sets a string that reports the object model name of a template part.</summary>
      <returns>A string that should be used as the name of a template part in a template.</returns>
    </member>
    <member name="P:System.Windows.TemplatePartAttribute.Type">
      <summary>Gets or sets a string that reports the <see cref="T:System.Type" /> of a template part.</summary>
      <returns>A <see cref="T:System.Type" /> object that reports the type of a template part.</returns>
    </member>
    <member name="T:System.Windows.TemplateVisualStateAttribute">
      <summary>Specifies that a control can be in a certain state and that a <see cref="T:System.Windows.VisualState" /> is expected in the control's <see cref="T:System.Windows.Controls.ControlTemplate" />.</summary>
    </member>
    <member name="M:System.Windows.TemplateVisualStateAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.TemplateVisualStateAttribute" /> class. </summary>
    </member>
    <member name="P:System.Windows.TemplateVisualStateAttribute.GroupName">
      <summary>Gets or sets the name of the group that the state belongs to.</summary>
      <returns>The name of the group that the state belongs to.</returns>
    </member>
    <member name="P:System.Windows.TemplateVisualStateAttribute.Name">
      <summary>Gets or sets the name of the state that the control can be in.</summary>
      <returns>The name of the state that the control can be in.</returns>
    </member>
    <member name="T:System.Windows.TextAlignment">
      <summary>Specifies whether text is centered, left-aligned, or right-aligned.</summary>
    </member>
    <member name="F:System.Windows.TextAlignment.Center">
      <summary>Text is centered within the container.</summary>
    </member>
    <member name="F:System.Windows.TextAlignment.Left">
      <summary>Text is aligned to the left edge of the container.</summary>
    </member>
    <member name="F:System.Windows.TextAlignment.Right">
      <summary>Text is aligned to the right edge of the container.</summary>
    </member>
    <member name="F:System.Windows.TextAlignment.Justify">
      <summary>Text is justified within the container.</summary>
    </member>
    <member name="T:System.Windows.TextDecorationCollection">
      <summary>Provides the value for the <see cref="P:System.Windows.Controls.TextBlock.TextDecorations" /> and <see cref="P:System.Windows.Documents.Inline.TextDecorations" /> properties.</summary>
    </member>
    <member name="T:System.Windows.TextDecorations">
      <summary>Implements a set of predefined text decorations.</summary>
    </member>
    <member name="P:System.Windows.TextDecorations.Underline">
      <summary>Specifies an underlined text decoration.</summary>
      <returns>A <see cref="T:System.Windows.TextDecorationCollection" /> that represents an underlined text decoration.</returns>
    </member>
    <member name="T:System.Windows.TextTrimming">
      <summary>Describes how text is trimmed when it overflows the edge of its containing box.</summary>
    </member>
    <member name="F:System.Windows.TextTrimming.None">
      <summary>Text is not trimmed.</summary>
    </member>
    <member name="F:System.Windows.TextTrimming.WordEllipsis">
      <summary>Text is trimmed at a word boundary. An ellipsis (...) is drawn in place of remaining text.</summary>
    </member>
    <member name="T:System.Windows.TextWrapping">
      <summary>Specifies whether text wraps when it reaches the edge of its container.</summary>
    </member>
    <member name="F:System.Windows.TextWrapping.Wrap">
      <summary>Line breaking occurs if a line of text overflows beyond the available width of its container. Line breaking occurs even if the standard line-breaking algorithm cannot determine any line break opportunity, such as when a line of text includes a long word that is constrained by a fixed-width container without scrolling.</summary>
    </member>
    <member name="F:System.Windows.TextWrapping.NoWrap">
      <summary>No line wrapping is performed.</summary>
    </member>
    <member name="T:System.Windows.Thickness">
      <summary>Describes the thickness of a frame around a rectangle. Four <see cref="T:System.Double" /> values describe the <see cref="P:System.Windows.Thickness.Left" />, <see cref="P:System.Windows.Thickness.Top" />, <see cref="P:System.Windows.Thickness.Right" />, and <see cref="P:System.Windows.Thickness.Bottom" /> sides of the rectangle, respectively. </summary>
    </member>
    <member name="M:System.Windows.Thickness.#ctor(System.Double)">
      <summary>Initializes a <see cref="T:System.Windows.Thickness" /> structure that has the specified uniform length on each side. </summary>
      <param name="uniformLength">The uniform length applied to all four sides of the bounding rectangle.</param>
    </member>
    <member name="M:System.Windows.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a <see cref="T:System.Windows.Thickness" /> structure that has specific lengths (supplied as a <see cref="T:System.Double" />) applied to each side of the rectangle. </summary>
      <param name="left">The thickness for the left side of the rectangle.</param>
      <param name="top">The thickness for the upper side of the rectangle.</param>
      <param name="right">The thickness for the right side of the rectangle</param>
      <param name="bottom">The thickness for the lower side of the rectangle.</param>
    </member>
    <member name="P:System.Windows.Thickness.Bottom">
      <summary>Gets or sets the width, in pixels, of the lower side of the bounding rectangle.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the width, in pixels, of the lower side of the bounding rectangle for this instance of <see cref="T:System.Windows.Thickness" />. The default is 0.</returns>
    </member>
    <member name="M:System.Windows.Thickness.Equals(System.Object)">
      <summary>Compares this <see cref="T:System.Windows.Thickness" /> structure to another <see cref="T:System.Object" /> for equality.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Windows.Thickness.Equals(System.Windows.Thickness)">
      <summary>Compares this <see cref="T:System.Windows.Thickness" /> structure to another <see cref="T:System.Windows.Thickness" /> structure for equality.</summary>
      <returns>true if the two instances of <see cref="T:System.Windows.Thickness" /> are equal; otherwise, false.</returns>
      <param name="thickness">An instance of <see cref="T:System.Windows.Thickness" /> to compare for equality.</param>
    </member>
    <member name="M:System.Windows.Thickness.GetHashCode">
      <summary>Returns the hash code of the structure.</summary>
      <returns>A hash code for this instance of <see cref="T:System.Windows.Thickness" />.</returns>
    </member>
    <member name="P:System.Windows.Thickness.Left">
      <summary>Gets or sets the width, in pixels, of the left side of the bounding rectangle. </summary>
      <returns>A <see cref="T:System.Double" /> that represents the width, in pixels, of the left side of the bounding rectangle for this instance of <see cref="T:System.Windows.Thickness" />. The default is 0.</returns>
    </member>
    <member name="M:System.Windows.Thickness.op_Equality(System.Windows.Thickness,System.Windows.Thickness)">
      <summary>Compares the value of two <see cref="T:System.Windows.Thickness" /> structures for equality.</summary>
      <returns>true if the two instances of <see cref="T:System.Windows.Thickness" /> are equal; otherwise, false.</returns>
      <param name="t1">The first structure to compare.</param>
      <param name="t2">The other structure to compare.</param>
    </member>
    <member name="M:System.Windows.Thickness.op_Inequality(System.Windows.Thickness,System.Windows.Thickness)">
      <summary>Compares two <see cref="T:System.Windows.Thickness" /> structures for inequality. </summary>
      <returns>true if the two instances of <see cref="T:System.Windows.Thickness" /> are not equal; otherwise, false.</returns>
      <param name="t1">The first structure to compare.</param>
      <param name="t2">The other structure to compare.</param>
    </member>
    <member name="P:System.Windows.Thickness.Right">
      <summary>Gets or sets the width, in pixels, of the right side of the bounding rectangle. </summary>
      <returns>A <see cref="T:System.Double" /> that represents the width, in pixels, of the right side of the bounding rectangle for this instance of <see cref="T:System.Windows.Thickness" />. The default is 0.</returns>
    </member>
    <member name="P:System.Windows.Thickness.Top">
      <summary>Gets or sets the width, in pixels, of the upper side of the bounding rectangle.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the width, in pixels, of the upper side of the bounding rectangle for this instance of <see cref="T:System.Windows.Thickness" />. The default is 0.</returns>
    </member>
    <member name="M:System.Windows.Thickness.ToString">
      <summary>Returns the string representation of the <see cref="T:System.Windows.Thickness" /> structure.</summary>
      <returns>A <see cref="T:System.String" /> that represents the <see cref="T:System.Windows.Thickness" /> value.</returns>
    </member>
    <member name="T:System.Windows.TriggerAction">
      <summary>Serves as the base class for <see cref="T:System.Windows.Media.Animation.BeginStoryboard" />.</summary>
    </member>
    <member name="T:System.Windows.TriggerActionCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Animation.BeginStoryboard" /> objects.</summary>
    </member>
    <member name="M:System.Windows.TriggerActionCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.TriggerActionCollection" /> class.</summary>
    </member>
    <member name="T:System.Windows.TriggerBase">
      <summary>Serves as the base class for <see cref="T:System.Windows.EventTrigger" />.</summary>
    </member>
    <member name="T:System.Windows.TriggerCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.EventTrigger" /> objects. </summary>
    </member>
    <member name="T:System.Windows.UIElement">
      <summary>
        <see cref="T:System.Windows.UIElement" /> is a base class for most of the objects that have visual appearance and can process basic input in Silverlight. </summary>
    </member>
    <member name="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
      <summary>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <paramref name="handledEventsToo" /> as true to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route. </summary>
      <param name="routedEvent">An identifier for the routed event to be handled.</param>
      <param name="handler">A reference to the handler implementation.</param>
      <param name="handledEventsToo">true to register the handler such that it is invoked even when the routed event is marked handled in its event data; false to register the handler with the default condition that it will not be invoked if the routed event is already marked handled. The default is false. Do not routinely ask to rehandle a routed event. For more information, see Remarks.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routedEvent" /> or<paramref name=" handler" /> is null<paramref name="." /></exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="routedEvent" /> does not represent a supported routed event.-or-<paramref name="handler" /> does not implement a supported delegate.</exception>
      <exception cref="T:System.NotImplementedException">Attempted to add handler for an event not supported by the current platform variation.</exception>
    </member>
    <member name="P:System.Windows.UIElement.AllowDrop">
      <summary>Gets or sets a value that determines whether this <see cref="T:System.Windows.UIElement" /> can be a drop target for purposes of Silverlight drag-and-drop operations.</summary>
      <returns>true if this <see cref="T:System.Windows.UIElement" /> can be a drop target for purposes of Silverlight drag-and-drop operations; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.UIElement.AllowDropProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.AllowDrop" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.AllowDrop" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
      <summary>Positions child objects and determines a size for a <see cref="T:System.Windows.UIElement" />. Parent objects that implement custom layout for their child elements should call this method from their layout override implementations to form a recursive layout update.</summary>
      <param name="finalRect">The final size that the parent computes for the child in layout, provided as a <see cref="T:System.Windows.Rect" /> value.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="finalRect" /> contained a <see cref="F:System.Double.NaN" /> or infinite value. See Remarks.</exception>
    </member>
    <member name="P:System.Windows.UIElement.CacheMode">
      <summary>Gets or sets a value that indicates that rendered content should be cached when possible.</summary>
      <returns>A value that indicates that rendered content should be cached when possible. If you specify a value of <see cref="T:System.Windows.Media.CacheMode" />, rendering operations from <see cref="P:System.Windows.UIElement.RenderTransform" /> and <see cref="P:System.Windows.UIElement.Opacity" /> execute on the graphics processing unit (GPU), if available. The default is null, which does not enable a cached composition mode. </returns>
    </member>
    <member name="F:System.Windows.UIElement.CacheModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.CacheMode" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.CacheMode" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement.CaptureMouse">
      <summary>Sets mouse capture to a <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>Returns true if the object has mouse capture; otherwise, returns false.</returns>
    </member>
    <member name="P:System.Windows.UIElement.Clip">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Geometry" /> used to define the outline of the contents of a <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>The geometry to be used for clipping area sizing. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.UIElement.ClipProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Clip" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Clip" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.DesiredSize">
      <summary>Gets the size that this <see cref="T:System.Windows.UIElement" /> computed during the measure pass of the layout process. </summary>
      <returns>The size that this <see cref="T:System.Windows.UIElement" /> computed during the measure pass of the layout process.</returns>
    </member>
    <member name="E:System.Windows.UIElement.DragEnter">
      <summary>Occurs when the input system reports an underlying drag event with this element as the target. </summary>
    </member>
    <member name="E:System.Windows.UIElement.DragLeave">
      <summary>Occurs when the input system reports an underlying drag event with this element as the origin. </summary>
    </member>
    <member name="E:System.Windows.UIElement.DragOver">
      <summary>Occurs when the input system reports an underlying drag event with this element as the potential drop target. </summary>
    </member>
    <member name="E:System.Windows.UIElement.Drop">
      <summary>Occurs when the input system reports an underlying drop event with this element as the drop target.</summary>
    </member>
    <member name="P:System.Windows.UIElement.Effect">
      <summary>Gets or sets the pixel-shader effect to use for rendering this <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>The pixel-shader effect to use for rendering this <see cref="T:System.Windows.UIElement" />. The default is null (no effects).</returns>
    </member>
    <member name="F:System.Windows.UIElement.EffectProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Effect" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Effect" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.UIElement.GotFocus">
      <summary>Occurs when a <see cref="T:System.Windows.UIElement" /> receives focus.</summary>
    </member>
    <member name="M:System.Windows.UIElement.InvalidateArrange">
      <summary>Invalidates the arrange state (layout) for a <see cref="T:System.Windows.UIElement" />. After the invalidation, the <see cref="T:System.Windows.UIElement" /> will have its layout updated, which will occur asynchronously. </summary>
    </member>
    <member name="M:System.Windows.UIElement.InvalidateMeasure">
      <summary>Invalidates the measurement state (layout) for a <see cref="T:System.Windows.UIElement" />. </summary>
    </member>
    <member name="P:System.Windows.UIElement.IsHitTestVisible">
      <summary>Gets or sets whether the contained area of this <see cref="T:System.Windows.UIElement" /> can return true values for hit testing. </summary>
      <returns>true if the contained area of this <see cref="T:System.Windows.UIElement" /> can be used for hit-testing; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:System.Windows.UIElement.IsHitTestVisibleProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.UIElement.KeyDown">
      <summary>Occurs when a keyboard key is pressed while the <see cref="T:System.Windows.UIElement" /> has focus.</summary>
    </member>
    <member name="F:System.Windows.UIElement.KeyDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.KeyDown" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.KeyDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.KeyUp">
      <summary>Occurs when a keyboard key is released while the <see cref="T:System.Windows.UIElement" />  has focus.</summary>
    </member>
    <member name="F:System.Windows.UIElement.KeyUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.LostFocus">
      <summary>Occurs when a <see cref="T:System.Windows.UIElement" /> loses focus.</summary>
    </member>
    <member name="E:System.Windows.UIElement.LostMouseCapture">
      <summary>Occurs when the <see cref="T:System.Windows.UIElement" /> loses mouse capture.</summary>
    </member>
    <member name="E:System.Windows.UIElement.ManipulationCompleted">
      <summary>Occurs when a manipulation and inertia on the <see cref="T:System.Windows.UIElement" /> is complete.</summary>
    </member>
    <member name="F:System.Windows.UIElement.ManipulationCompletedEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.ManipulationDelta">
      <summary>Occurs when the input device changes position during a manipulation.</summary>
    </member>
    <member name="F:System.Windows.UIElement.ManipulationDeltaEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.ManipulationStarted">
      <summary>Occurs when an input device begins a manipulation on the <see cref="T:System.Windows.UIElement" />.</summary>
    </member>
    <member name="F:System.Windows.UIElement.ManipulationStartedEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.UIElement.Measure(System.Windows.Size)">
      <summary>Updates the <see cref="P:System.Windows.UIElement.DesiredSize" /> of a <see cref="T:System.Windows.UIElement" />. Typically, objects that implement custom layout for their layout children call this method from their own <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> implementations to form a recursive layout update.</summary>
      <param name="availableSize">The available space that a parent can allocate a child object. A child object can request a larger space than what is available; the provided size might be accommodated if scrolling or other resize behavior is possible in that particular container.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="availableSize" /> contained a <see cref="F:System.Double.NaN" /> value. See Remarks.</exception>
    </member>
    <member name="E:System.Windows.UIElement.MouseEnter">
      <summary>Occurs when the mouse (or a stylus) enters the bounding area of a <see cref="T:System.Windows.UIElement" />.</summary>
    </member>
    <member name="E:System.Windows.UIElement.MouseLeave">
      <summary>Occurs when the mouse (or the stylus) leaves the bounding area of a <see cref="T:System.Windows.UIElement" />.</summary>
    </member>
    <member name="E:System.Windows.UIElement.MouseLeftButtonDown">
      <summary>Occurs when the left mouse button is pressed (or when the tip of the stylus touches the tablet) while the mouse pointer is over a <see cref="T:System.Windows.UIElement" />.</summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseLeftButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseLeftButtonUp">
      <summary>Occurs when the left mouse button is released (or the tip of the stylus is removed from the tablet) while the mouse (or the stylus) is over a <see cref="T:System.Windows.UIElement" /> (or while a <see cref="T:System.Windows.UIElement" /> holds mouse capture).</summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseLeftButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseMove">
      <summary>Occurs when the coordinate position of the mouse (or stylus) changes while over a <see cref="T:System.Windows.UIElement" /> (or while a <see cref="T:System.Windows.UIElement" /> holds mouse capture).</summary>
    </member>
    <member name="E:System.Windows.UIElement.MouseRightButtonDown">
      <summary>Occurs when the right mouse button is pressed while the mouse pointer is over a <see cref="T:System.Windows.UIElement" />.</summary>
    </member>
    <member name="E:System.Windows.UIElement.MouseRightButtonUp">
      <summary>Occurs when the right mouse button is released while the mouse pointer is over a <see cref="T:System.Windows.UIElement" />. However, this event will only be raised if a caller marks the preceding <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> event as handled; see Remarks.</summary>
    </member>
    <member name="E:System.Windows.UIElement.MouseWheel">
      <summary>Occurs when the user rotates the mouse wheel while the mouse pointer is over a <see cref="T:System.Windows.UIElement" />, or the <see cref="T:System.Windows.UIElement" /> has focus.</summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseWheelEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseWheel" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseWheel" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.UIElement.OnCreateAutomationPeer">
      <summary>When implemented in a derived class, returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the Silverlight automation infrastructure.</summary>
      <returns>The class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> subclass to return.</returns>
    </member>
    <member name="M:System.Windows.UIElement.OnManipulationCompleted(System.Object,System.Windows.Input.ManipulationCompletedEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event occurs.</summary>
      <param name="sender">The object where the handler is attached.</param>
      <param name="e">Event data for the event.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnManipulationDelta(System.Object,System.Windows.Input.ManipulationDeltaEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event occurs.</summary>
      <param name="sender">The object where the handler is attached.</param>
      <param name="e">Event data for the event.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnManipulationStarted(System.Object,System.Windows.Input.ManipulationStartedEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> event occurs.</summary>
      <param name="sender">The object where the handler is attached.</param>
      <param name="e">Event data for the event.</param>
    </member>
    <member name="P:System.Windows.UIElement.Opacity">
      <summary>Gets or sets the degree of the object's opacity.</summary>
      <returns>A value between 0 and 1.0 that declares the opacity factor, with 1.0 meaning full opacity and 0 meaning transparent. The default value is 1.0.</returns>
    </member>
    <member name="P:System.Windows.UIElement.OpacityMask">
      <summary>Gets or sets the brush used to alter the opacity of regions of this object.</summary>
      <returns>A brush that describes the opacity applied to this object. The default is null.</returns>
    </member>
    <member name="F:System.Windows.UIElement.OpacityMaskProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Clip" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.UIElement.OpacityProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.Projection">
      <summary>Gets or sets the perspective projection (3-D effect) to apply when rendering this <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>The perspective projection to apply when rendering this <see cref="T:System.Windows.UIElement" />. The default is null (no perspective applied).</returns>
    </member>
    <member name="F:System.Windows.UIElement.ProjectionProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Projection" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Projection" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement.ReleaseMouseCapture">
      <summary>Removes mouse capture from a <see cref="T:System.Windows.UIElement" />. After this call, typically no object holds mouse capture.</summary>
    </member>
    <member name="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
      <summary>Removes the specified routed event handler from this <see cref="T:System.Windows.UIElement" />. </summary>
      <param name="routedEvent">The identifier of the routed event for which the handler is attached.</param>
      <param name="handler">The specific handler implementation to remove from the event handler collection on this <see cref="T:System.Windows.UIElement" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="routedEvent" /> or<paramref name=" handler" /> is null<paramref name="." /></exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="routedEvent" /> does not represent a supported routed event.-or-<paramref name="handler" /> does not implement a supported delegate.</exception>
      <exception cref="T:System.NotImplementedException">Attempted to remove handler for an event not supported by the current platform variation.</exception>
    </member>
    <member name="P:System.Windows.UIElement.RenderSize">
      <summary>Gets the final render size of a <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>The rendered size for this object. There is no default value.</returns>
    </member>
    <member name="P:System.Windows.UIElement.RenderTransform">
      <summary>Gets or sets transform information that affects the rendering position of a <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>Describes the specifics of the desired render transform. The default value is null.</returns>
    </member>
    <member name="P:System.Windows.UIElement.RenderTransformOrigin">
      <summary>Gets or sets the origin point of any possible render transform declared by <see cref="P:System.Windows.UIElement.RenderTransform" />, relative to the bounds of the <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>The origin point of the render transform. The default value is a point with value 0,0.</returns>
    </member>
    <member name="F:System.Windows.UIElement.RenderTransformOriginProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.UIElement.RenderTransformProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.RenderTransform" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.RenderTransform" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.UIElement.TextInput">
      <summary>Occurs when a UI element gets text in a device-independent manner. </summary>
    </member>
    <member name="F:System.Windows.UIElement.TextInputEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.TextInput" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.TextInput" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.TextInputStart">
      <summary>Occurs when a UI element initially gets text in a device-independent manner. </summary>
    </member>
    <member name="F:System.Windows.UIElement.TextInputStartEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.TextInputStart" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.TextInputStart" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.TextInputUpdate">
      <summary>Occurs when text continues to be composed via an input method editor (IME).</summary>
    </member>
    <member name="F:System.Windows.UIElement.TextInputUpdateEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.TextInputUpdate" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.TextInputUpdate" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.UIElement.TransformToVisual(System.Windows.UIElement)">
      <summary>Returns a transform object that can be used to transform coordinates from the <see cref="T:System.Windows.UIElement" /> to the specified object.</summary>
      <returns>The transform information as an object. Call <see cref="M:System.Windows.Media.GeneralTransform.Transform(System.Windows.Point)" /> on this object to get a practical transform.</returns>
      <param name="visual">The object to compare to the current object for purposes of obtaining the transform.</param>
    </member>
    <member name="M:System.Windows.UIElement.UpdateLayout">
      <summary>Ensures that all positions of child objects of a <see cref="T:System.Windows.UIElement" /> are properly updated for layout. </summary>
    </member>
    <member name="P:System.Windows.UIElement.UseLayoutRounding">
      <summary>Gets or sets a value that determines whether rendering for the object and its visual subtree should use rounding behavior that aligns rendering to whole pixels.</summary>
      <returns>true if rendering and layout should use layout rounding to whole pixels; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:System.Windows.UIElement.UseLayoutRoundingProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.UseLayoutRounding" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.UseLayoutRounding" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.Visibility">
      <summary>Gets or sets the visibility of a <see cref="T:System.Windows.UIElement" />. A <see cref="T:System.Windows.UIElement" /> that is not visible does not render and does not communicate its desired size to layout.</summary>
      <returns>A value of the enumeration. The default value is <see cref="F:System.Windows.Visibility.Visible" />.</returns>
    </member>
    <member name="F:System.Windows.UIElement.VisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Visibility" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Visibility" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.VerticalAlignment">
      <summary>Describes how a child element is vertically positioned or stretched within a parent's layout slot. </summary>
    </member>
    <member name="F:System.Windows.VerticalAlignment.Top">
      <summary>The element is aligned to the top of the parent's layout slot.</summary>
    </member>
    <member name="F:System.Windows.VerticalAlignment.Center">
      <summary>The element is aligned to the center of the parent's layout slot.</summary>
    </member>
    <member name="F:System.Windows.VerticalAlignment.Bottom">
      <summary>The element is aligned to the bottom of the parent's layout slot. </summary>
    </member>
    <member name="F:System.Windows.VerticalAlignment.Stretch">
      <summary>The element is stretched to fill the entire layout slot of the parent element.</summary>
    </member>
    <member name="T:System.Windows.Visibility">
      <summary>Specifies the display state of an element. </summary>
    </member>
    <member name="F:System.Windows.Visibility.Visible">
      <summary>Display the element.</summary>
    </member>
    <member name="F:System.Windows.Visibility.Collapsed">
      <summary>Do not display the element, and do not reserve space for it in layout.</summary>
    </member>
    <member name="T:System.Windows.VisualState">
      <summary>Represents the visual appearance of the control when it is in a specific state.</summary>
    </member>
    <member name="M:System.Windows.VisualState.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.VisualState" /> class. </summary>
    </member>
    <member name="P:System.Windows.VisualState.Name">
      <summary>Gets the name of the <see cref="T:System.Windows.VisualState" />.</summary>
      <returns>The name of the <see cref="T:System.Windows.VisualState" />.</returns>
    </member>
    <member name="P:System.Windows.VisualState.Storyboard">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.Animation.Storyboard" /> that defines the appearance of the control when it is the state that is represented by the <see cref="T:System.Windows.VisualState" />. </summary>
      <returns>A Storyboard that defines the appearance of the control when it is the state that is represented by the <see cref="T:System.Windows.VisualState" />.</returns>
    </member>
    <member name="T:System.Windows.VisualStateChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> and <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanged" /> events. </summary>
    </member>
    <member name="M:System.Windows.VisualStateChangedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.VisualStateChangedEventArgs" /> class. </summary>
    </member>
    <member name="P:System.Windows.VisualStateChangedEventArgs.Control">
      <summary>Gets the <see cref="T:System.Windows.Controls.Control" /> that is transitioning states.</summary>
      <returns>The <see cref="T:System.Windows.Controls.Control" /> that is transitioning states.</returns>
    </member>
    <member name="P:System.Windows.VisualStateChangedEventArgs.NewState">
      <summary>Gets the state the <see cref="T:System.Windows.Controls.Control" /> is transitioning to or has transitioned to.</summary>
      <returns>The state the <see cref="T:System.Windows.Controls.Control" /> is transitioning to or has transitioned to.</returns>
    </member>
    <member name="P:System.Windows.VisualStateChangedEventArgs.OldState">
      <summary>Gets the state the <see cref="T:System.Windows.Controls.Control" /> is transitioning from or has transitioned from.</summary>
      <returns>The state the <see cref="T:System.Windows.Controls.Control" /> is transitioning from or has transitioned from.</returns>
    </member>
    <member name="T:System.Windows.VisualStateGroup">
      <summary>Contains mutually exclusive <see cref="T:System.Windows.VisualState" /> objects and <see cref="T:System.Windows.VisualTransition" /> objects that are used to go from one state to another.</summary>
    </member>
    <member name="M:System.Windows.VisualStateGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.VisualStateGroup" /> class. </summary>
    </member>
    <member name="P:System.Windows.VisualStateGroup.CurrentState">
      <summary>Gets the most recently set <see cref="T:System.Windows.VisualState" /> from a successful call to the <see cref="M:System.Windows.VisualStateManager.GoToState(System.Windows.Controls.Control,System.String,System.Boolean)" /> method.</summary>
      <returns>The most recently set <see cref="T:System.Windows.VisualState" /> from a successful call to the <see cref="M:System.Windows.VisualStateManager.GoToState(System.Windows.Controls.Control,System.String,System.Boolean)" /> method.</returns>
    </member>
    <member name="E:System.Windows.VisualStateGroup.CurrentStateChanged">
      <summary>Occurs after a control transitions into a different state.</summary>
    </member>
    <member name="E:System.Windows.VisualStateGroup.CurrentStateChanging">
      <summary>Occurs when a control begins transitioning into a different state.</summary>
    </member>
    <member name="P:System.Windows.VisualStateGroup.Name">
      <summary>Gets the name of the <see cref="T:System.Windows.VisualStateGroup" />.</summary>
      <returns>The name of the <see cref="T:System.Windows.VisualStateGroup" />.</returns>
    </member>
    <member name="P:System.Windows.VisualStateGroup.States">
      <summary>Gets the collection of mutually exclusive <see cref="T:System.Windows.VisualState" /> objects.</summary>
      <returns>The collection of mutually exclusive <see cref="T:System.Windows.VisualState" /> objects.</returns>
    </member>
    <member name="P:System.Windows.VisualStateGroup.Transitions">
      <summary>Gets the collection of <see cref="T:System.Windows.VisualTransition" /> objects.</summary>
      <returns>The collection of <see cref="T:System.Windows.VisualTransition" /> objects.</returns>
    </member>
    <member name="T:System.Windows.VisualStateManager">
      <summary>Manages states and the logic for transitioning between states for controls.</summary>
    </member>
    <member name="M:System.Windows.VisualStateManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.VisualStateManager" /> class. </summary>
    </member>
    <member name="P:System.Windows.VisualStateManager.CustomVisualStateManager">
      <summary>Gets or sets the <see cref="T:System.Windows.VisualStateManager" /> that transitions between the states of a control. </summary>
      <returns>The <see cref="T:System.Windows.VisualStateManager" /> that transitions between the states of a control. The default is null.</returns>
    </member>
    <member name="F:System.Windows.VisualStateManager.CustomVisualStateManagerProperty">
      <summary>Identifies the <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.VisualStateManager.GetCustomVisualStateManager(System.Windows.FrameworkElement)">
      <summary>Gets the value of the <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> attached property.</summary>
      <returns>The <see cref="T:System.Windows.VisualStateManager" /> that transitions between the states of a control. </returns>
      <param name="obj">The element from which to get the <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null.</exception>
    </member>
    <member name="M:System.Windows.VisualStateManager.GetVisualStateGroups(System.Windows.FrameworkElement)">
      <summary>Gets the value of the VisualStateManager.VisualStateGroups attached property.</summary>
      <returns>The collection of <see cref="T:System.Windows.VisualStateGroup" /> objects that is associated with the specified object.</returns>
      <param name="obj">The element from which to get the VisualStateManager.VisualStateGroups.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null.</exception>
    </member>
    <member name="M:System.Windows.VisualStateManager.GoToState(System.Windows.Controls.Control,System.String,System.Boolean)">
      <summary>Transitions the control between two states.</summary>
      <returns>true if the control successfully transitioned to the new state; otherwise, false.</returns>
      <param name="control">The control to transition between states. </param>
      <param name="stateName">The state to transition to.</param>
      <param name="useTransitions">true to use a <see cref="T:System.Windows.VisualTransition" /> to transition between states; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="control" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateName" /> is null.</exception>
    </member>
    <member name="M:System.Windows.VisualStateManager.GoToStateCore(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.String,System.Windows.VisualStateGroup,System.Windows.VisualState,System.Boolean)">
      <summary>Transitions a control between states.</summary>
      <returns>true if the control successfully transitioned to the new state; otherwise, false.</returns>
      <param name="control">The control to transition between states. </param>
      <param name="templateRoot">The root element of the control's <see cref="T:System.Windows.Controls.ControlTemplate" />.</param>
      <param name="stateName">The name of the state to transition to.</param>
      <param name="group">The <see cref="T:System.Windows.VisualStateGroup" /> that the state belongs to.</param>
      <param name="state">The representation of the state to transition to.</param>
      <param name="useTransitions">true to use a <see cref="T:System.Windows.VisualTransition" /> to transition between states; otherwise, false.</param>
    </member>
    <member name="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.Controls.Control)">
      <summary>Raises the <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanged" /> event on the specified <see cref="T:System.Windows.VisualStateGroup" />.</summary>
      <param name="stateGroup">The object on which the <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> event</param>
      <param name="oldState">The state that the control transitioned from.</param>
      <param name="newState">The state that the control transitioned to.</param>
      <param name="control">The control that transitioned states.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateGroup" /> is null.-or-<paramref name="newState" /> is null.-or-<paramref name="control" /> is null.</exception>
    </member>
    <member name="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.Controls.Control)">
      <summary>Raises the <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> event on the specified <see cref="T:System.Windows.VisualStateGroup" />.</summary>
      <param name="stateGroup">The object on which the <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> event</param>
      <param name="oldState">The state that the control is transitioning from.</param>
      <param name="newState">The state that the control is transitioning to.</param>
      <param name="control">The control that is transitioning states.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateGroup" /> is null.-or-<paramref name="newState" /> is null.-or-<paramref name="control" /> is null.</exception>
    </member>
    <member name="M:System.Windows.VisualStateManager.SetCustomVisualStateManager(System.Windows.FrameworkElement,System.Windows.VisualStateManager)">
      <summary>Sets the value of the <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> attached property.</summary>
      <param name="obj">The object on which to set the property.</param>
      <param name="value">The <see cref="T:System.Windows.VisualStateManager" /> that transitions between the states of a control.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null.</exception>
    </member>
    <member name="T:System.Windows.VisualTransition">
      <summary>Represents the visual behavior that occurs when the control transitions from one state to another.</summary>
    </member>
    <member name="M:System.Windows.VisualTransition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.VisualTransition" /> class. </summary>
    </member>
    <member name="P:System.Windows.VisualTransition.From">
      <summary>Gets or sets the name of the <see cref="T:System.Windows.VisualState" /> to transition from.</summary>
      <returns>The name of the <see cref="T:System.Windows.VisualState" /> to transition from.</returns>
    </member>
    <member name="P:System.Windows.VisualTransition.GeneratedDuration">
      <summary>Gets or sets the amount of time it takes to move from one state to another.</summary>
      <returns>The amount of time it takes to move from one state to another.</returns>
    </member>
    <member name="P:System.Windows.VisualTransition.GeneratedEasingFunction">
      <summary>Gets or sets the easing function applied to the generated animations.</summary>
      <returns>An <see cref="T:System.Windows.Media.Animation.IEasingFunction" /> that is applied to the generated animations.</returns>
    </member>
    <member name="P:System.Windows.VisualTransition.Storyboard">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Animation.Storyboard" /> that occurs when the transition occurs.</summary>
      <returns>The <see cref="T:System.Windows.Media.Animation.Storyboard" /> that occurs when the transition occurs.</returns>
    </member>
    <member name="P:System.Windows.VisualTransition.To">
      <summary>Gets or sets the name of the <see cref="T:System.Windows.VisualState" /> to transition to.</summary>
      <returns>The name of the <see cref="T:System.Windows.VisualState" /> to transition to.</returns>
    </member>
    <member name="T:System.Windows.Window">
      <summary>Represents an out-of-browser application window.</summary>
    </member>
    <member name="M:System.Windows.Window.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Window" /> class. </summary>
    </member>
    <member name="M:System.Windows.Window.Activate">
      <summary>Attempts to activate the application window by bringing it to the foreground and setting the input focus to it. </summary>
      <returns>true if the window was successfully activated; otherwise, false.</returns>
      <exception cref="T:System.NotSupportedException">The application is not running outside the browser. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The current thread is not the UI thread.</exception>
    </member>
    <member name="M:System.Windows.Window.Close">
      <summary>Closes the application window unless the <see cref="E:System.Windows.Window.Closing" /> event is canceled. </summary>
      <exception cref="T:System.NotSupportedException">The application is not running outside the browser. </exception>
      <exception cref="T:System.Security.SecurityException">When calling this method, except in response to a user-initiated action, the <see cref="E:System.Windows.Application.Startup" /> event has already occurred and <see cref="P:System.Windows.Application.HasElevatedPermissions" /> is false.</exception>
    </member>
    <member name="E:System.Windows.Window.Closing">
      <summary>Occurs when the window is about to close.</summary>
      <exception cref="T:System.NotSupportedException">When adding or removing an event handler, the application is not running outside the browser. </exception>
    </member>
    <member name="M:System.Windows.Window.DragMove">
      <summary>In trusted applications, begins a mouse drag operation to move the window. </summary>
      <exception cref="T:System.UnauthorizedAccessException">The current thread is not the UI thread.</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="P:System.Windows.Application.HasElevatedPermissions" /> is false.</exception>
    </member>
    <member name="M:System.Windows.Window.DragResize(System.Windows.WindowResizeEdge)">
      <summary>In trusted applications, begins a mouse drag operation to move the specified window edge or corner.</summary>
      <param name="resizeEdge">The edge or corner that the user is dragging.</param>
      <exception cref="T:System.UnauthorizedAccessException">The current thread is not the UI thread.</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="P:System.Windows.Application.HasElevatedPermissions" /> is false.</exception>
    </member>
    <member name="P:System.Windows.Window.Height">
      <summary>Gets or sets the height of the application window in pixels. </summary>
      <returns>The height of the application window in pixels. The default is the <see cref="P:System.Windows.WindowSettings.Height" /> setting in the application manifest.</returns>
      <exception cref="T:System.NotSupportedException">The application is not running outside the browser. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The current thread is not the UI thread.</exception>
      <exception cref="T:System.Security.SecurityException">When setting this property, except in response to a user-initiated action, the <see cref="E:System.Windows.Application.Startup" /> event has already occurred and <see cref="P:System.Windows.Application.HasElevatedPermissions" /> is false.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is greater than the available screen height.</exception>
    </member>
    <member name="P:System.Windows.Window.IsActive">
      <summary>Gets a value that indicates whether the window is active.</summary>
      <returns>true if the window is active; otherwise, false.</returns>
      <exception cref="T:System.NotSupportedException">The application is not running outside the browser. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The current thread is not the UI thread.</exception>
    </member>
    <member name="P:System.Windows.Window.Left">
      <summary>Gets or sets the position of the left edge of the application window; see Remarks for restrictions on setting this property at run time.</summary>
      <returns>The position of the left edge of the application window. The default is the <see cref="P:System.Windows.WindowSettings.Left" /> setting in the application manifest.</returns>
      <exception cref="T:System.NotSupportedException">The application is not running outside the browser. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The current thread is not the UI thread.</exception>
    </member>
    <member name="P:System.Windows.Window.Top">
      <summary>Gets or sets the position of the top edge of the application window; see Remarks for restrictions on setting this property at run time.</summary>
      <returns>The position of the top edge of the application window. The default is the <see cref="P:System.Windows.WindowSettings.Top" /> setting in the application manifest.</returns>
      <exception cref="T:System.NotSupportedException">The application is not running outside the browser. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The current thread is not the UI thread.</exception>
    </member>
    <member name="P:System.Windows.Window.TopMost">
      <summary>Gets or sets a value that indicates whether the application window is always displayed in front of other windows.</summary>
      <returns>true if the application window is topmost; otherwise, false. The default is false.</returns>
      <exception cref="T:System.NotSupportedException">The application is not running outside the browser. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The current thread is not the UI thread.</exception>
      <exception cref="T:System.Security.SecurityException">When setting this property, except in response to a user-initiated action, the <see cref="E:System.Windows.Application.Startup" /> event has already occurred and <see cref="P:System.Windows.Application.HasElevatedPermissions" /> is false.</exception>
    </member>
    <member name="P:System.Windows.Window.Width">
      <summary>Gets or sets the width of the application window in pixels. </summary>
      <returns>The width of the application window in pixels. The default is the <see cref="P:System.Windows.WindowSettings.Width" /> setting in the application manifest.</returns>
      <exception cref="T:System.NotSupportedException">The application is not running outside the browser. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The current thread is not the UI thread.</exception>
      <exception cref="T:System.Security.SecurityException">When setting this property, except in response to a user-initiated action, the <see cref="E:System.Windows.Application.Startup" /> event has already occurred and <see cref="P:System.Windows.Application.HasElevatedPermissions" /> is false.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is greater than the available screen width.</exception>
    </member>
    <member name="P:System.Windows.Window.WindowState">
      <summary>Gets or sets a value that indicates whether the window is maximized, minimized, or in the normal state.</summary>
      <returns>A value that indicates the current state of the window. The default is <see cref="F:System.Windows.WindowState.Normal" />.</returns>
      <exception cref="T:System.NotSupportedException">The application is not running outside the browser. </exception>
      <exception cref="T:System.UnauthorizedAccessException">The current thread is not the UI thread.</exception>
      <exception cref="T:System.Security.SecurityException">When setting this property, except in response to a user-initiated action, the <see cref="E:System.Windows.Application.Startup" /> event has already occurred and <see cref="P:System.Windows.Application.HasElevatedPermissions" /> is false.</exception>
    </member>
    <member name="T:System.Windows.WindowResizeEdge">
      <summary>Defines constants that represent the edges and corners of a Silverlight out-of-browser application window.</summary>
    </member>
    <member name="F:System.Windows.WindowResizeEdge.Left">
      <summary>The left edge of the window.</summary>
    </member>
    <member name="F:System.Windows.WindowResizeEdge.Right">
      <summary>The right edge of the window.</summary>
    </member>
    <member name="F:System.Windows.WindowResizeEdge.Top">
      <summary>The top edge of the window.</summary>
    </member>
    <member name="F:System.Windows.WindowResizeEdge.TopLeft">
      <summary>The top left corner of the window.</summary>
    </member>
    <member name="F:System.Windows.WindowResizeEdge.TopRight">
      <summary>The top right corner of the window.</summary>
    </member>
    <member name="F:System.Windows.WindowResizeEdge.Bottom">
      <summary>The bottom edge of the window.</summary>
    </member>
    <member name="F:System.Windows.WindowResizeEdge.BottomLeft">
      <summary>The bottom left corner of the window.</summary>
    </member>
    <member name="F:System.Windows.WindowResizeEdge.BottomRight">
      <summary>The bottom right corner of the window.</summary>
    </member>
    <member name="T:System.Windows.WindowSettings">
      <summary>Represents information about an out-of-browser application window.</summary>
    </member>
    <member name="M:System.Windows.WindowSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.WindowSettings" /> class. </summary>
    </member>
    <member name="P:System.Windows.WindowSettings.Height">
      <summary>Gets the initial window height of the application.</summary>
      <returns>The initial window height of the application.</returns>
    </member>
    <member name="F:System.Windows.WindowSettings.HeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.WindowSettings.Height" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.WindowSettings.Height" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.WindowSettings.Left">
      <summary>Gets the initial position of the left edge of the out-of-browser application window when <see cref="P:System.Windows.WindowSettings.WindowStartupLocation" /> is <see cref="F:System.Windows.WindowStartupLocation.Manual" />.</summary>
      <returns>The initial position of the left edge of the application window.</returns>
    </member>
    <member name="F:System.Windows.WindowSettings.LeftProperty">
      <summary>Identifies the <see cref="P:System.Windows.WindowSettings.Left" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.WindowSettings.Left" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.WindowSettings.Title">
      <summary>Gets the full title of the out-of-browser application for display in the title bar of the application window.</summary>
      <returns>The full title of the application.</returns>
    </member>
    <member name="F:System.Windows.WindowSettings.TitleProperty">
      <summary>Identifies the <see cref="P:System.Windows.WindowSettings.Title" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.WindowSettings.Title" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.WindowSettings.Top">
      <summary>Gets the initial position of the top edge of the out-of-browser application window when <see cref="P:System.Windows.WindowSettings.WindowStartupLocation" /> is <see cref="F:System.Windows.WindowStartupLocation.Manual" />.</summary>
      <returns>The initial position of the top edge of the application window.</returns>
    </member>
    <member name="F:System.Windows.WindowSettings.TopProperty">
      <summary>Identifies the <see cref="P:System.Windows.WindowSettings.Top" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.WindowSettings.Top" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.WindowSettings.Width">
      <summary>Gets the initial window width of the application.</summary>
      <returns>The initial window width of the application.</returns>
    </member>
    <member name="F:System.Windows.WindowSettings.WidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.WindowSettings.Width" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.WindowSettings.Width" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.WindowSettings.WindowStartupLocation">
      <summary>Gets a value that indicates how the out-of-browser application window is positioned at startup. </summary>
      <returns>A value that indicates how the application window is positioned at startup.</returns>
    </member>
    <member name="F:System.Windows.WindowSettings.WindowStartupLocationProperty">
      <summary>Identifies the <see cref="P:System.Windows.WindowSettings.WindowStartupLocation" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.WindowSettings.WindowStartupLocation" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.WindowSettings.WindowStyle">
      <summary>Gets a value that indicates the appearance of the title bar and border for the out-of-browser application window.</summary>
      <returns>A value that indicates how the title bar and border should appear. </returns>
    </member>
    <member name="F:System.Windows.WindowSettings.WindowStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.WindowSettings.WindowStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.WindowSettings.WindowStyle" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.WindowStartupLocation">
      <summary>Defines constants that indicate how an out-of-browser application window is positioned at startup.</summary>
    </member>
    <member name="F:System.Windows.WindowStartupLocation.CenterScreen">
      <summary>The application window is centered in the screen, and the <see cref="P:System.Windows.WindowSettings.Top" /> and <see cref="P:System.Windows.WindowSettings.Left" /> settings are ignored. </summary>
    </member>
    <member name="F:System.Windows.WindowStartupLocation.Manual">
      <summary>The application window is positioned according to the <see cref="P:System.Windows.WindowSettings.Top" /> and <see cref="P:System.Windows.WindowSettings.Left" /> settings.</summary>
    </member>
    <member name="T:System.Windows.WindowState">
      <summary>Defines constants that indicate the state of an out-of-browser application window.</summary>
    </member>
    <member name="F:System.Windows.WindowState.Normal">
      <summary>The application window is in its normal state, occupying screen space based on its <see cref="P:System.Windows.Window.Height" /> and <see cref="P:System.Windows.Window.Width" /> values.</summary>
    </member>
    <member name="F:System.Windows.WindowState.Minimized">
      <summary>The application window is minimized to the taskbar.</summary>
    </member>
    <member name="F:System.Windows.WindowState.Maximized">
      <summary>The application window is maximized to occupy the entire client area of the screen.</summary>
    </member>
    <member name="T:System.Windows.WindowStyle">
      <summary>Defines constants that indicate the appearance of the title bar and border of an out-of-browser application window.</summary>
    </member>
    <member name="F:System.Windows.WindowStyle.SingleBorderWindow">
      <summary>The window displays a title bar and border. </summary>
    </member>
    <member name="F:System.Windows.WindowStyle.None">
      <summary>The window does not display a title bar or border. </summary>
    </member>
    <member name="F:System.Windows.WindowStyle.BorderlessRoundCornersWindow">
      <summary>The window does not display a title bar or border, and the window corners are rounded.</summary>
    </member>
    <member name="T:System.Windows.Automation.AutomationElementIdentifiers">
      <summary>Contains values used as automation property identifiers by UI automation providers and UI automation clients.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AcceleratorKeyProperty">
      <summary>Identifies the accelerator key automation property. The accelerator key property value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AccessKeyProperty">
      <summary>Identifies the access key automation property. The access key property value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AutomationIdProperty">
      <summary>Identifies the automation element identifier  automation property. The automation element identifier value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.BoundingRectangleProperty">
      <summary>Identifies the bounding rectangle automation property. The bounding rectangle property value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ClassNameProperty">
      <summary>Identifies the class name automation property. The class name property value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" /> method. </summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ClickablePointProperty">
      <summary>Identifies the clickable point automation property. A valid clickable point property value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ControlTypeProperty">
      <summary>Identifies the control type  automation property. The control type property value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" /> method. </summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.HasKeyboardFocusProperty">
      <summary>Identifies the keyboard focus automation property. The keyboard focus state is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.HelpTextProperty">
      <summary>Identifies the help text automation property. The help text property value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsContentElementProperty">
      <summary>Identifies the content element determination automation property. The content element status indicates whether the element contains content that is valuable to the end user. The current status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsControlElementProperty">
      <summary>Identifies the control element determination automation property. The control element status indicates whether the element contains user interface components that can be manipulated. The current status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsEnabledProperty">
      <summary>Identifies the enabled determination automation property. The enabled status indicates whether the item referenced by the automation peer is enabled. The current status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsKeyboardFocusableProperty">
      <summary>Identifies the keyboard-focusable determination automation property. The keyboard focusable status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsOffscreenProperty">
      <summary>Identifies the offscreen determination automation property. The offscreen status indicates whether the item referenced by the automation peer is off the screen. The current status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" /> method. </summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsPasswordProperty">
      <summary>Identifies the password determination automation property. The password status indicates whether the item referenced by the automation peer contains a password. The current status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsRequiredForFormProperty">
      <summary>Identifies the form requirement determination automation property. The form requirement status indicates whether the element must be completed on a form. The current status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ItemStatusProperty">
      <summary>Identifies the item status automation property. The current item status is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ItemTypeProperty">
      <summary>Identifies the item type automation property. The item type value is returned by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.LabeledByProperty">
      <summary>Identifies the labeled-by peer automation property. The current label peer is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.LocalizedControlTypeProperty">
      <summary>Identifies the localized control type automation property. The current localized control type is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlTypeCore" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.NameProperty">
      <summary>Identifies the element name automation property. The current name is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.OrientationProperty">
      <summary>Identifies the orientation automation property. The current orientation value is returned by the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.AutomationProperties">
      <summary>Provides support for getting or setting the value of instance-level values of automation properties. These property values are set as attached properties (typically in XAML) and supplement or override automation property values from a control's <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />. </summary>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.AcceleratorKey">
      <summary>Gets or sets the accelerator key string for the element.</summary>
      <returns>The accelerator key string for the element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.AcceleratorKeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.AccessKey">
      <summary>Gets or sets the access key for the element.</summary>
      <returns>The access key for the element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.AccessKeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.AutomationId">
      <summary>Gets or set the string that uniquely identifies the element to UI automation.</summary>
      <returns>The string that uniquely identifies the element to UI automation.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.AutomationIdProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> attached property.</returns>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetAcceleratorKey(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The accelerator key, as a string.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetAccessKey(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The access key, as a string.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetAutomationId(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The UI Automation identifier for the specified element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetHelpText(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The help text for the specified element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetIsRequiredForForm(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>true if the specified element is required for completion of a form; otherwise, false.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetItemStatus(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The item status of the element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetItemType(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The item type of the element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetLabeledBy(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The element that is targeted by the label. </returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetName(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The name of the specified element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.HelpText">
      <summary>Gets or sets the help text for the element.</summary>
      <returns>The help text for the specified element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.HelpTextProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm">
      <summary>Gets or sets a value that indicates whether the element is required to be filled out on a form.</summary>
      <returns>true if the element is required to be filled out on a form; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.IsRequiredForFormProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.ItemStatus">
      <summary>Gets or sets a description of the status of an item in an element.</summary>
      <returns>The status of an item in an element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.ItemStatusProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.ItemType">
      <summary>Gets or sets a description of the type of the specified element.</summary>
      <returns>The description of the type of the specified element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.ItemTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.LabeledBy">
      <summary>Gets or sets the element that contains the text label for the element.</summary>
      <returns>The element that contains the text label for the element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.LabeledByProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.Name">
      <summary>Gets or sets the automation name of the element.</summary>
      <returns>The name of the element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.NameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> attached property. </returns>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetAcceleratorKey(System.Windows.DependencyObject,System.String)">
      <summary>Sets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.</param>
      <param name="value">The accelerator key value to set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetAccessKey(System.Windows.DependencyObject,System.String)">
      <summary>Sets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.</param>
      <param name="value">The access key value to set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetAutomationId(System.Windows.DependencyObject,System.String)">
      <summary>Sets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.</param>
      <param name="value">The UI automation identifier value to set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetHelpText(System.Windows.DependencyObject,System.String)">
      <summary>Sets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.</param>
      <param name="value">The help text.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetIsRequiredForForm(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.</param>
      <param name="value">true to specify that the element is required to be filled out on a form; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetItemStatus(System.Windows.DependencyObject,System.String)">
      <summary>Sets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.</param>
      <param name="value">The item status.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetItemType(System.Windows.DependencyObject,System.String)">
      <summary>Sets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.</param>
      <param name="value">The item type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetLabeledBy(System.Windows.DependencyObject,System.Windows.UIElement)">
      <summary>Sets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.</param>
      <param name="value">The UI element that represents the label for <paramref name="element" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetName(System.Windows.DependencyObject,System.String)">
      <summary>Sets the value of the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> for which to set the property.</param>
      <param name="value">The object name.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Automation.AutomationProperty">
      <summary>Identifies a property of <see cref="T:System.Windows.Automation.AutomationElementIdentifiers" />. </summary>
    </member>
    <member name="T:System.Windows.Automation.AutomationTextAttribute">
      <summary>Identifies UI Automation text attributes.</summary>
    </member>
    <member name="T:System.Windows.Automation.DockPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IDockProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPatternIdentifiers.DockPositionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IDockProvider.DockPosition" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.DockPosition">
      <summary>Contains values that specify the dock position of an object within a docking container.</summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Top">
      <summary>Indicates that the UI automation element is docked along the top edge of the docking container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Left">
      <summary>Indicates that the UI automation element is docked along the left edge of the docking container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Bottom">
      <summary>Indicates that the UI automation element is docked along the bottom edge of the docking container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Right">
      <summary>Indicates that the UI automation element is docked along the right edge of the docking container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Fill">
      <summary>Indicates that the UI automation element is docked along all edges of the docking container and fills all available space within the container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.None">
      <summary>Indicates that the UI automation element is not docked to any edge of the docking container</summary>
    </member>
    <member name="T:System.Windows.Automation.ElementNotAvailableException">
      <summary>The exception that is thrown when an attempt is made to access a UI automation element corresponding to a part of the user interface that is no longer available.</summary>
    </member>
    <member name="M:System.Windows.Automation.ElementNotAvailableException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotAvailableException" /> class. </summary>
    </member>
    <member name="T:System.Windows.Automation.ElementNotEnabledException">
      <summary>The exception that is thrown when an attempt is made through UI automation to manipulate a control that is not enabled. </summary>
    </member>
    <member name="M:System.Windows.Automation.ElementNotEnabledException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotEnabledException" /> class. </summary>
    </member>
    <member name="T:System.Windows.Automation.ExpandCollapsePatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IExpandCollapseProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapsePatternIdentifiers.ExpandCollapseStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.ExpandCollapseState">
      <summary>Contains values that specify the <see cref="P:System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState" /> automation property value of a UI automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.Collapsed">
      <summary>No child nodes, controls, or content of the UI automation element are displayed.</summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.Expanded">
      <summary>All child nodes, controls or content of the UI automation element are displayed.</summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.PartiallyExpanded">
      <summary>Some, but not all, child nodes, controls, or content of the UI automation element are displayed. </summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.LeafNode">
      <summary>The UI automation element has no child nodes, controls, or content to display.</summary>
    </member>
    <member name="T:System.Windows.Automation.GridItemPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IGridItemProvider" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.ColumnProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.Column" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.ColumnSpanProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.ContainingGridProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.RowProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.Row" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.RowSpanProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.RowSpan" /> property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.GridPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IGridProvider" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridPatternIdentifiers.ColumnCountProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridProvider.ColumnCount" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.GridPatternIdentifiers.RowCountProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridProvider.RowCount" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.MultipleViewPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IMultipleViewProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.MultipleViewPatternIdentifiers.CurrentViewProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IMultipleViewProvider.CurrentView" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.MultipleViewPatternIdentifiers.SupportedViewsProperty">
      <summary>Identifies the automation property that gets the control-specific collection of views.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.RangeValuePatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IRangeValueProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.IsReadOnlyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.LargeChangeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.MaximumProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.MinimumProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.SmallChangeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.RowOrColumnMajor">
      <summary>Specifies whether data in a table should be read primarily by row or by column.</summary>
    </member>
    <member name="F:System.Windows.Automation.RowOrColumnMajor.RowMajor">
      <summary>Data in the table should be read row by row. </summary>
    </member>
    <member name="F:System.Windows.Automation.RowOrColumnMajor.ColumnMajor">
      <summary>Data in the table should be read column by column. </summary>
    </member>
    <member name="F:System.Windows.Automation.RowOrColumnMajor.Indeterminate">
      <summary>The best way to present the data is indeterminate.</summary>
    </member>
    <member name="T:System.Windows.Automation.ScrollAmount">
      <summary>Contains values that are used by the <see cref="T:System.Windows.Automation.Provider.IScrollProvider" /> pattern to indicate the direction and distance to scroll.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.LargeDecrement">
      <summary>Specifies that scrolling is performed in large decrements, which is equivalent to pressing the PAGE UP key or to clicking a blank part of a scrollbar. If the distance represented by the PAGE UP key is not a relevant amount for the control, or if no scrollbar exists, the value represents an amount equal to the size of the currently visible window.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.SmallDecrement">
      <summary>Specifies that scrolling is performed in small decrements, which is equivalent to pressing an arrow key or to clicking the arrow button on a scrollbar. </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.NoAmount">
      <summary>Specifies that scrolling should not be performed.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.LargeIncrement">
      <summary>Specifies that scrolling is performed in large increments, which is equivalent to pressing the PAGE DOWN key or to clicking a blank part of a scrollbar. If the distance represented by the PAGE DOWN key is not a relevant amount for the control, or if no scrollbar exists, the value represents an amount equal to the size of the currently visible region.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.SmallIncrement">
      <summary>Specifies that scrolling is performed in small increments, which equivalent to pressing an arrow key or to clicking the arrow button on a scrollbar. </summary>
    </member>
    <member name="T:System.Windows.Automation.ScrollPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IScrollProvider" /> pattern, as well as the <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> constant.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.HorizontallyScrollableProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontallyScrollable" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.HorizontalScrollPercentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.HorizontalViewSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalViewSize" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll">
      <summary>Specifies that scrolling should not be performed.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.VerticallyScrollableProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticallyScrollable" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.VerticalScrollPercentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.VerticalViewSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalViewSize" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.SelectionItemPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPatternIdentifiers.IsSelectedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPatternIdentifiers.SelectionContainerProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.SelectionPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.CanSelectMultipleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.IsSelectionRequiredProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.SelectionProperty">
      <summary>Identifies the property that gets the selected items in a container.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.SupportedTextSelection">
      <summary>Contains values that specify whether a text provider supports selection and, if so, whether it supports a single, continuous selection or multiple, disjoint selections.</summary>
    </member>
    <member name="F:System.Windows.Automation.SupportedTextSelection.None">
      <summary>Does not support text selections.</summary>
    </member>
    <member name="F:System.Windows.Automation.SupportedTextSelection.Single">
      <summary>Supports a single, continuous text selection.</summary>
    </member>
    <member name="F:System.Windows.Automation.SupportedTextSelection.Multiple">
      <summary>Supports multiple, disjoint text selections.</summary>
    </member>
    <member name="T:System.Windows.Automation.TableItemPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.ITableProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.TableItemPatternIdentifiers.ColumnHeaderItemsProperty">
      <summary>Identifies the automation property that retrieves all the column headers associated with a table item or cell.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.TableItemPatternIdentifiers.RowHeaderItemsProperty">
      <summary>Identifies the automation property that retrieves all the row headers associated with a table item or cell.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.TablePatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.ITableProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.TablePatternIdentifiers.ColumnHeadersProperty">
      <summary>Identifies the automation property that is accessed by the  <see cref="M:System.Windows.Automation.Provider.ITableProvider.GetColumnHeaders" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.TablePatternIdentifiers.RowHeadersProperty">
      <summary>Identifies the automation property that is accessed by the <see cref="M:System.Windows.Automation.Provider.ITableProvider.GetRowHeaders" /> method.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.TablePatternIdentifiers.RowOrColumnMajorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ITableProvider.RowOrColumnMajor" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.TextPatternIdentifiers">
      <summary>Contains values that are used as identifiers for the <see cref="T:System.Windows.Automation.Provider.ITextProvider" /> class.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute">
      <summary>Identifies the AnimationStyle attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.BackgroundColorAttribute">
      <summary>Identifies the BackgroundColor attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.BulletStyleAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Automation.Text.BulletStyle" /> attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.CapStyleAttribute">
      <summary>Identifies the CapStyle attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.CultureAttribute">
      <summary>Identifies the Culture (<see cref="T:System.Globalization.CultureInfo" />) attribute of a text range. Includes the sub-language level; for example, specifies French–Switzerland (fr-CH) instead of merely French (fr). </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.FontNameAttribute">
      <summary>Identifies the FontName attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.FontSizeAttribute">
      <summary>Identifies the FontSize attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.FontWeightAttribute">
      <summary>Identifies the FontWeight attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.ForegroundColorAttribute">
      <summary>Identifies the ForegroundColor attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.HorizontalTextAlignmentAttribute">
      <summary>Identifies the HorizontalTextAlignment attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IndentationFirstLineAttribute">
      <summary>Identifies the IndentationFirstLine attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IndentationLeadingAttribute">
      <summary>Identifies the IndentationLeadingattribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IndentationTrailingAttribute">
      <summary>Identifies the IndentationTrailingattribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IsHiddenAttribute">
      <summary>Identifies the IsHidden attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IsItalicAttribute">
      <summary>Identifies the IsItalic attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IsReadOnlyAttribute">
      <summary>Identifies the IsReadOnly attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IsSubscriptAttribute">
      <summary>Identifies the IsSubscript attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IsSuperscriptAttribute">
      <summary>Identifies the IsSuperscript attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.MarginBottomAttribute">
      <summary>Identifies the MarginBottom attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.MarginLeadingAttribute">
      <summary>Identifies the MarginLeading attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.MarginTopAttribute">
      <summary>Identifies the MarginTop attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.MarginTrailingAttribute">
      <summary>Identifies the MarginTrailing attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.OutlineStylesAttribute">
      <summary>Identifies the OutlineStyles attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.OverlineColorAttribute">
      <summary>Identifies the OverlineColor attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.OverlineStyleAttribute">
      <summary>Identifies the OverlineStyle attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.StrikethroughColorAttribute">
      <summary>Identifies the StrikethroughColor attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.StrikethroughStyleAttribute">
      <summary>Identifies the StrikethroughStyle attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.TabsAttribute">
      <summary>Identifies the Tabs attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.TextFlowDirectionsAttribute">
      <summary>Identifies the TextFlowDirections attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.UnderlineColorAttribute">
      <summary>Identifies the UnderlineColor attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.UnderlineStyleAttribute">
      <summary>Identifies the UnderlineStyle attribute of a text range. </summary>
    </member>
    <member name="T:System.Windows.Automation.TogglePatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IToggleProvider" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.TogglePatternIdentifiers.ToggleStateProperty">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ToggleState" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.ToggleState">
      <summary>Contains values that specify the <see cref="T:System.Windows.Automation.ToggleState" /> of a UI automation element</summary>
    </member>
    <member name="F:System.Windows.Automation.ToggleState.Off">
      <summary>The UI automation element is not selected, checked, marked, or otherwise activated.</summary>
    </member>
    <member name="F:System.Windows.Automation.ToggleState.On">
      <summary>The UI automation element  is selected, checked, marked, or otherwise activated.</summary>
    </member>
    <member name="F:System.Windows.Automation.ToggleState.Indeterminate">
      <summary>The UI automation element is in an indeterminate state.</summary>
    </member>
    <member name="T:System.Windows.Automation.TransformPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.ITransformProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.TransformPatternIdentifiers.CanMoveProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanMove" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.TransformPatternIdentifiers.CanResizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanResize" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.TransformPatternIdentifiers.CanRotateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanRotate" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.ValuePatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IValueProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.ValuePatternIdentifiers.IsReadOnlyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ValuePatternIdentifiers.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IValueProvider.Value" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.WindowInteractionState">
      <summary>Defines values that specify the current state of the window for purposes of user or programmatic interaction.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.Running">
      <summary>The window is running. This does not guarantee that the window is responding or ready for user interaction.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.Closing">
      <summary>The window is closing. </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.ReadyForUserInteraction">
      <summary>The window is ready for user interaction.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.BlockedByModalWindow">
      <summary>The window is blocked by a modal window. </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.NotResponding">
      <summary>The window is not responding. </summary>
    </member>
    <member name="T:System.Windows.Automation.WindowPatternIdentifiers">
      <summary>Contains values used as automation property identifiers specifically for properties of the <see cref="T:System.Windows.Automation.Provider.IWindowProvider" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.CanMaximizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IWindowProvider.Maximizable" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.CanMinimizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IWindowProvider.Minimizable" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.IsModalProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IWindowProvider.IsModal" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.IsTopmostProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IWindowProvider.IsTopmost" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.WindowInteractionStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IWindowProvider.InteractionState" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.WindowVisualStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IWindowProvider.VisualState" /> automation property.</summary>
      <returns>The automation property identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.WindowVisualState">
      <summary>Contains values that specify the visual state of a window for the <see cref="T:System.Windows.Automation.Provider.IWindowProvider" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowVisualState.Normal">
      <summary>Specifies that the window is normal (restored). </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowVisualState.Maximized">
      <summary>Specifies that the window is maximized. </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowVisualState.Minimized">
      <summary>Specifies that the window is minimized.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationControlType">
      <summary>Specifies the control type that is exposed to the UI automation client.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Button">
      <summary>A button control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Calendar">
      <summary>A calendar control, such as a date picker.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.CheckBox">
      <summary>A check box control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ComboBox">
      <summary>A combo box control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Edit">
      <summary>An edit control, such as a text box.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Hyperlink">
      <summary>A hyperlink control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Image">
      <summary>An image control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ListItem">
      <summary>A list item control, which is a child item of a list control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.List">
      <summary>A list control, such as a list box.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Menu">
      <summary>A menu control, such as a top-level menu in an application window.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.MenuBar">
      <summary>A menu bar control, which generally contains a set of top-level menus.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.MenuItem">
      <summary>A menu item control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ProgressBar">
      <summary>A progress bar control, which visually indicates the progress of a lengthy operation.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.RadioButton">
      <summary>A radio button control, which is a selection mechanism allowing exactly one selected item in a group.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ScrollBar">
      <summary>A scroll bar control, such as a scroll bar in an application window.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Slider">
      <summary>A slider control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Spinner">
      <summary>A spinner control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.StatusBar">
      <summary>A status bar control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Tab">
      <summary>A tab control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.TabItem">
      <summary>A tab item control, which represents a page of a tab control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Text">
      <summary>An edit control, such as a text box or rich text box.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ToolBar">
      <summary>A toolbar, such as the control that contains a set of command buttons in an application window.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ToolTip">
      <summary>A tooltip control, an informational window that appears as a result of moving the pointer over a control or sometimes when tabbing to a control using the keyboard.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Tree">
      <summary>A tree control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.TreeItem">
      <summary>A node in a tree control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Custom">
      <summary>A control that is not one of the defined control types.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Group">
      <summary>A group control, which acts as a container for other controls.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Thumb">
      <summary>The control in a scrollbar that can be dragged to a different position.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.DataGrid">
      <summary>A data grid control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.DataItem">
      <summary>A data item control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Document">
      <summary>A document control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.SplitButton">
      <summary>A split button, which is a button that performs a default action and can also expand to a list of other possible actions.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Window">
      <summary>A window frame, which contains child objects.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Pane">
      <summary>A pane control.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Header">
      <summary>A header control, which is a container for the labels of rows and columns of information.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.HeaderItem">
      <summary>A header item, which is the label for a row or column of information.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Table">
      <summary>A table.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.TitleBar">
      <summary>The caption bar on a window.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Separator">
      <summary>A separator, which creates a visual division in controls such as menus and toolbars.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationEvents">
      <summary>Specifies the event that is raised by the element through the associated <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.ToolTipOpened">
      <summary>The event that is raised when a tooltip is opened.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.ToolTipClosed">
      <summary>The event that is raised when a tooltip is closed.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.MenuOpened">
      <summary>The event that is raised when a menu is opened. .</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.MenuClosed">
      <summary>The event that is raised when a menu is closed. </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.AutomationFocusChanged">
      <summary>The event that is raised when the focus has changed. See <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.InvokePatternOnInvoked">
      <summary>The event that is raised when a control is activated. See <see cref="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementAddedToSelection">
      <summary>The event that is raised when an item is added to a collection of selected items. See <see cref="M:System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementRemovedFromSelection">
      <summary>The event that is raised when an item is removed from a collection of selected items. See <see cref="M:System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementSelected">
      <summary>The event that is raised when a single item is selected (which clears any previous selection). See <see cref="M:System.Windows.Automation.Provider.ISelectionItemProvider.Select" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionPatternOnInvalidated">
      <summary>The event that is raised when a selection in a container has changed significantly.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.TextPatternOnTextSelectionChanged">
      <summary>The event that is raised when the text selection is modified. Note that Silverlight 2 does not specifically expose a TextPattern, and <see cref="T:System.Windows.Controls.TextBox" /> uses <see cref="T:System.Windows.Automation.Provider.IValueProvider" /> instead.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.TextPatternOnTextChanged">
      <summary>The event that is raised when textual content is modified. Note that Silverlight 2 does not specifically expose a TextPattern, and <see cref="T:System.Windows.Controls.TextBox" /> uses <see cref="T:System.Windows.Automation.Provider.IValueProvider" /> instead.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.AsyncContentLoaded">
      <summary>The event that is raised when content is loaded asynchronously.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.PropertyChanged">
      <summary>The event that is raised when a property has changed.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.StructureChanged">
      <summary>The event that is raised when the UI Automation tree structure is changed.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationOrientation">
      <summary>Specifies the orientation direction in which a control can be presented. </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationOrientation.None">
      <summary>The control does not have an orientation. </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationOrientation.Horizontal">
      <summary>The control is presented horizontally.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationOrientation.Vertical">
      <summary>The control is presented horizontally.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationPeer">
      <summary>Provides a base class that exposes an automation peer for an associated class to UI automation. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.#ctor">
      <summary>Provides initialization for base class values when they are called by the constructor of a derived class.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.AutomationPeer.EventsSource">
      <summary>Gets or sets an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> that is reported to the automation client as a source for all the events that come from this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> that is the source of events.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey">
      <summary>Gets the accelerator key combinations for the object that is associated with the UI automation peer. </summary>
      <returns>The accelerator key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKeyCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" />.</summary>
      <returns>The accelerator key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey">
      <summary>Gets the access key for the element that is associated with the automation peer.</summary>
      <returns>The access key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKeyCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" />.</summary>
      <returns>The access key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType">
      <summary>Gets the control type for the element that is associated with the UI automation peer.</summary>
      <returns>The control type.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlTypeCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The control type.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> of the element that is associated with the automation peer.</summary>
      <returns>The automation identifier.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationIdCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" />.</summary>
      <returns>The automation identifier.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle">
      <summary>Gets the <see cref="T:System.Windows.Rect" /> object that represents the screen coordinates of the element that is associated with the automation peer.</summary>
      <returns>The bounding rectangle.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangleCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" />.</summary>
      <returns>The bounding rectangle.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren">
      <summary>Gets the collection of child elements that are represented in the UI automation tree as immediate child elements of the automation peer.</summary>
      <returns>The collection of child elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetChildrenCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.</summary>
      <returns>The collection of child elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName">
      <summary>Gets a name that is used with <see cref="T:System.Windows.Automation.Peers.AutomationControlType" />, to differentiate the control that is represented by this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />. </summary>
      <returns>The class name. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClassNameCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The class name.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint">
      <summary>Gets a <see cref="T:System.Windows.Point" /> on the element that is associated with the automation peer that responds to a mouse click. </summary>
      <returns>A point in the clickable area of the element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePointCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" />.</summary>
      <returns>A point within the clickable area of the element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText">
      <summary>Gets text that describes the functionality of the control that is associated with the automation peer. </summary>
      <returns>The help text.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpTextCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" />.</summary>
      <returns>The help text.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus">
      <summary>Gets text that conveys the visual status of the element that is associated with this automation peer. </summary>
      <returns>The item status.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatusCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" />.</summary>
      <returns>The item status.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType">
      <summary>Gets a string that describes what kind of item an element represents. </summary>
      <returns>The kind of item.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemTypeCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" />.</summary>
      <returns>The kind of item.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the <see cref="T:System.Windows.UIElement" /> that is targeted to the element. </summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the element that is targeted by the <see cref="T:System.Windows.UIElement" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledByCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the element that is targeted by the <see cref="T:System.Windows.UIElement" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType">
      <summary>Gets a localized string that represents the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> value for the control that is associated with this automation peer.</summary>
      <returns>The type of the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlTypeCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType" />.</summary>
      <returns>The type of the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetName">
      <summary>Gets text that describes the element that is associated with this automation peer.</summary>
      <returns>The name.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetNameCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The name.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation">
      <summary>Gets a value that indicates the explicit control orientation, if any.</summary>
      <returns>The orientation of the control as a value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientationCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" />.</summary>
      <returns>The orientation of the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetParent">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> that is the parent of this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</summary>
      <returns>The parent automation peer.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>When overridden in a derived class, gets the control pattern that is associated with the specified <see cref="T:System.Windows.Automation.Peers.PatternInterface" />.</summary>
      <returns>The object that implements the pattern interface; null if this peer does not support this interface.</returns>
      <param name="patternInterface">A value from the <see cref="T:System.Windows.Automation.Peers.PatternInterface" /> enumeration.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus">
      <summary>Gets a value that indicates whether the element that is associated with this automation peer currently has keyboard focus.</summary>
      <returns>true if the element has keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocusCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" />.</summary>
      <returns>true if the element has keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.InvalidatePeer">
      <summary>Triggers recalculation of the main properties of the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> and raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> notification to the automation client if the properties have changed. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement">
      <summary>Gets a value that indicates whether the element that is associated with this automation peer contains data that is presented to the user.</summary>
      <returns>true if the element is a content element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElementCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" />.</summary>
      <returns>true if the element is a content element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement">
      <summary>Gets a value that indicates whether the element is understood by the user as interactive or as contributing to the logical structure of the control in the GUI.</summary>
      <returns>true if the element is a control; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElementCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" />.</summary>
      <returns>true if the element is a control; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled">
      <summary>Gets a value that indicates whether the element associated with this automation peer supports interaction.</summary>
      <returns>true if the element supports interaction; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabledCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled" />.</summary>
      <returns>true if the automation peer can receive and send events; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable">
      <summary>Gets a value that indicates whether the element can accept keyboard focus.</summary>
      <returns>true if the element can accept keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusableCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.</summary>
      <returns>true if the element can accept keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen">
      <summary>Gets a value that indicates whether an element is off the screen.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreenCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" />.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword">
      <summary>Gets a value that indicates whether the element contains sensitive content.</summary>
      <returns>true if the element contains sensitive content such as a password; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsPasswordCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" />.</summary>
      <returns>true if the element contains sensitive content; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm">
      <summary>Gets a value that indicates whether the element that is associated with this peer must be completed on a form.</summary>
      <returns>true if the element must be completed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForFormCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" />.</summary>
      <returns>true if the element must be completed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.ListenerExists(System.Windows.Automation.Peers.AutomationEvents)">
      <summary>Gets a value that indicates whether UI automation is listening for the specified event. </summary>
      <returns>true if UI automation is listening for the specified event; otherwise, false.</returns>
      <param name="eventId">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.PeerFromProvider(System.Windows.Automation.Provider.IRawElementProviderSimple)">
      <summary>Gets an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the specified <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple" /> proxy.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</returns>
      <param name="provider">The class that implements <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.ProviderFromPeer(System.Windows.Automation.Peers.AutomationPeer)">
      <summary>Gets the <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple" /> proxy for the specified <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</summary>
      <returns>The proxy.</returns>
      <param name="peer">The automation peer.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents)">
      <summary>Raises an automation event.</summary>
      <param name="eventId">The event identifier for the event to raise, as a value of the enumeration. See <see cref="T:System.Windows.Automation.Peers.AutomationEvents" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.RaisePropertyChangedEvent(System.Windows.Automation.AutomationProperty,System.Object,System.Object)">
      <summary>Raises an event to notify the automation client of a changed property value.</summary>
      <param name="property">The property that changed.</param>
      <param name="oldValue">The previous value of the property.</param>
      <param name="newValue">The new value of the property.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus">
      <summary>Sets the keyboard focus on the element that is associated with this automation peer.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.SetFocusCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus" />.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.ButtonAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Button" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonAutomationPeer.#ctor(System.Windows.Controls.Button)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ButtonAutomationPeer" /> class.</summary>
      <param name="owner">The element associated with this automation peer.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.Button" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class that is associated with this UI automation peer.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the object that supports the specified control pattern of the element that is associated with this automation peer.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke" />.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.ButtonBaseAutomationPeer">
      <summary>Represents a base class for exposing classes derived from <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonBaseAutomationPeer.#ctor(System.Windows.Controls.Primitives.ButtonBase)">
      <summary>Provides initialization for base class values when called by the constructor of a derived class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> to associate with this peer.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ButtonBaseAutomationPeer.GetNameCore">
      <summary>Gets the name of the class of the object associated with this <see cref="T:System.Windows.Automation.Peers.ButtonBaseAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>A string that contains the class name, minus the accelerator key.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.CheckBox" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.CheckBoxAutomationPeer.#ctor(System.Windows.Controls.CheckBox)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.CheckBox" /> to associate with this <see cref="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.CheckBoxAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> for the element associated with this <see cref="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CheckBoxAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class for the object associated with this <see cref="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.ComboBox" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.#ctor(System.Windows.Controls.ComboBox)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.ComboBox" /> instance to associate with this <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.CreateItemAutomationPeer(System.Object)">
      <summary>Creates an automation peer for an individual item in the <see cref="T:System.Windows.Controls.ComboBox" /> associated with this <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" />.</summary>
      <returns>The new <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" /> for the specified item in the list.</returns>
      <param name="item">The item to create the automation peer for.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for this <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The control type as a value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the class that is associated with this <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for this <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="pattern">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse" />.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.IExpandCollapseProvider.Expand" />.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.ComboBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState" />.</summary>
      <returns>The state of the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ComboBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly" />.</summary>
      <returns>true if the control is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ComboBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.IValueProvider.SetValue(System.String)" />.</summary>
      <param name="value">The value of the control.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.ComboBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#Value">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IValueProvider.Value" />.</summary>
      <returns>The value of the control.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.FrameworkElement" /> types (including controls) to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.#ctor(System.Windows.FrameworkElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.FrameworkElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.CreatePeerForElement(System.Windows.UIElement)">
      <summary>Creates a <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> for the specified <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.</returns>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.FromElement(System.Windows.UIElement)">
      <summary>Returns the <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> for the specified <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />, or null if the <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> was not created by the <see cref="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.CreatePeerForElement(System.Windows.UIElement)" /> method.</returns>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetAcceleratorKeyCore">
      <summary>Returns the accelerator key for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" />.</summary>
      <returns>The <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetAcceleratorKey(System.Windows.DependencyObject)" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetAccessKeyCore">
      <summary>Returns the access key for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" />.</summary>
      <returns>The access key for the element that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetAutomationControlTypeCore">
      <summary>Returns the control type for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetAutomationIdCore">
      <summary>Returns the string that uniquely identifies the <see cref="T:System.Windows.FrameworkElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" />.</summary>
      <returns>The automation identifier for the element associated with the <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />, or <see cref="F:System.String.Empty" /> if there is no automation identifier.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetBoundingRectangleCore">
      <summary>Returns the <see cref="T:System.Windows.Rect" /> that represents the bounding rectangle of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" />.</summary>
      <returns>The <see cref="T:System.Windows.Rect" /> that contains the coordinates of the element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetChildrenCore">
      <summary>Returns the collection of child elements of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.</summary>
      <returns>A list of child <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetClassNameCore">
      <summary>Returns the name of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The name of the owner type that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. See Remarks.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetClickablePointCore">
      <summary>Returns a <see cref="T:System.Windows.Point" /> that represents the clickable space that is on the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" />.</summary>
      <returns>The <see cref="T:System.Windows.Point" /> on the element that allows a click.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetHelpTextCore">
      <summary>Returns the string that describes the functionality of the <see cref="T:System.Windows.FrameworkElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" />.</summary>
      <returns>The help text, or <see cref="F:System.String.Empty" /> if there is no help text.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetItemStatusCore">
      <summary>Returns a string that communicates the visual status of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" />.</summary>
      <returns>The string that contains the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetItemStatus(System.Windows.DependencyObject)" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetItemTypeCore">
      <summary>Returns a human-readable string that contains the item type that the <see cref="T:System.Windows.UIElement" /> for this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> represents. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" />.</summary>
      <returns>The string that contains the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetItemType(System.Windows.DependencyObject)" />. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetLabeledByCore">
      <summary>Returns the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the <see cref="T:System.Windows.UIElement" /> that targets the <see cref="T:System.Windows.FrameworkElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the element that is targeted by the <see cref="T:System.Windows.UIElement" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetLocalizedControlTypeCore">
      <summary>Returns the localized version of the control type for the owner type that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType" />.</summary>
      <returns>The string that contains the type of control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetNameCore">
      <summary>Returns the text label of the <see cref="T:System.Windows.FrameworkElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The text label of the element that is associated with this automation peer.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetOrientationCore">
      <summary>Returns a value that indicates whether the element that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> is laid out in a specific direction. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationOrientation.None" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Returns the control pattern for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.</summary>
      <returns>See Remarks.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.HasKeyboardFocusCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> currently has keyboard input focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" />.</summary>
      <returns>true if the element has keyboard input focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsContentElementCore">
      <summary>Returns a value that indicates whether the element that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> is an element that contains data that is presented to the user. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" />.</summary>
      <returns>true if the element contains data for the user to read; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsControlElementCore">
      <summary>Returns a value that indicates whether the element  that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> is understood by the end user as interactive. Optionally, the user might understand the element as contributing to the logical structure of the control in the GUI. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" />.</summary>
      <returns>true if the element is interactive; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsEnabledCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> is enabled. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled" />.</summary>
      <returns>true if the element is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsKeyboardFocusableCore">
      <summary>Returns a value that indicates whether the element that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> can accept keyboard focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.</summary>
      <returns>true if the element is focusable by the keyboard; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsOffscreenCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> is off the screen. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" />.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsPasswordCore">
      <summary>Returns a value that indicates whether the element that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> contains protected content. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" />.</summary>
      <returns>true if the element contains sensitive content; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.IsRequiredForFormCore">
      <summary>Returns a value that indicates whether the element that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" /> is required to be completed on a form. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" />.</summary>
      <returns>The value that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetIsRequiredForForm(System.Windows.DependencyObject)" />, if the value is set; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.Owner">
      <summary>Gets the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />.</summary>
      <returns>The element that owns this peer class.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.FrameworkElementAutomationPeer.SetFocusCore">
      <summary>Sets the keyboard input focus on the element that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus" />.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.HyperlinkButton" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.#ctor(System.Windows.Controls.HyperlinkButton)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.HyperlinkButton" /> to associate with the <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.HyperlinkButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.HyperlinkButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string that contains "Hyperlink".</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.HyperlinkButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.IsControlElementCore">
      <summary>Gets a value that indicates whether the element that is associated with this automation peer is an element that contains data that is presented to the user.</summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke" />.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.ImageAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Image" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ImageAutomationPeer.#ctor(System.Windows.Controls.Image)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ImageAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Image" /> to associate with this <see cref="T:System.Windows.Automation.Peers.ImageAutomationPeer" />.</param>
    </member>
    <member name="T:System.Windows.Automation.Peers.ItemAutomationPeer">
      <summary>Exposes a data item in an <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection to UI automation. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.#ctor(System.Object,System.Windows.Automation.Peers.ItemsControlAutomationPeer)">
      <summary>Provides initialization for base class values when called by the constructor of a derived class.</summary>
      <param name="item">The data item in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />.</param>
      <param name="itemsControlAutomationPeer">The <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer" /> that is associated with the <see cref="T:System.Windows.Controls.ItemsControl" /> that holds the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.#ctor(System.Windows.UIElement)">
      <summary>Provides initialization for base class values when called by the constructor of a derived class.</summary>
      <param name="item">The data item in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetAcceleratorKeyCore">
      <summary>Returns the accelerator key for the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" />.</summary>
      <returns>The <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetAcceleratorKey(System.Windows.DependencyObject)" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetAccessKeyCore">
      <summary>Returns the access key for the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" />.</summary>
      <returns>The access key for the element that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetAutomationControlTypeCore">
      <summary>Returns the control type for the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetAutomationIdCore">
      <summary>Returns the string that uniquely identifies the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" />.</summary>
      <returns>The automation identifier for the element associated with the <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />, or <see cref="F:System.String.Empty" /> if there is no automation identifier.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetBoundingRectangleCore">
      <summary>Returns the <see cref="T:System.Windows.Rect" /> that represents the bounding rectangle of the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" />.</summary>
      <returns>The <see cref="T:System.Windows.Rect" /> that contains the coordinates of the element item.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetChildrenCore">
      <summary>Returns the collection of child elements of the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.</summary>
      <returns>A list of child <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetClassNameCore">
      <summary>Returns the class name of the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The name of the owner type that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. See Remarks.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetClickablePointCore">
      <summary>Returns a <see cref="T:System.Windows.Point" /> that represents the clickable space that is on the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" />.</summary>
      <returns>The <see cref="T:System.Windows.Point" /> on the element that allows a click.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetHelpTextCore">
      <summary>Returns the string that describes the functionality of the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. his method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" />.</summary>
      <returns>The help text, or <see cref="F:System.String.Empty" /> if there is no help text.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetItemStatusCore">
      <summary>Returns a string that communicates the visual status of the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" />.</summary>
      <returns>The string that contains the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetItemStatus(System.Windows.DependencyObject)" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetItemTypeCore">
      <summary>Returns a human-readable string that contains the type of item that the item represents. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" />.</summary>
      <returns>The item type string.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetLabeledByCore">
      <summary>Returns the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the object that targets the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy" />.</summary>
      <returns>An automation peer for the targeting object.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetLocalizedControlTypeCore">
      <summary>Returns the localized version of the control type for the owner type that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType" />.</summary>
      <returns>The string that contains the type of control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetNameCore">
      <summary>Gets the text label of the <see cref="T:System.Windows.UIElement" /> that corresponds to the data item in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The text label.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetOrientationCore">
      <summary>Returns a value that indicates whether the element that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> is laid out in a specific direction. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Returns the control pattern for the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.HasKeyboardFocusCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> currently has keyboard input focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" />.</summary>
      <returns>true if the element has keyboard input focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.IsContentElementCore">
      <summary>Returns a value that indicates whether the element that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> is an element that contains data that is presented to the user. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" />.</summary>
      <returns>true if the element contains data for the user to read; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.IsControlElementCore">
      <summary>Returns a value that indicates whether the element  that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> is understood by the end user as interactive. Optionally, the user might understand the element as contributing to the logical structure of the control in the GUI. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" />.</summary>
      <returns>true if the element is interactive; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.IsEnabledCore">
      <summary>Returns a value that indicates whether the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> is enabled. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled" />.</summary>
      <returns>true if the element is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.IsKeyboardFocusableCore">
      <summary>Returns a value that indicates whether the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> can accept keyboard focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.</summary>
      <returns>true if the element is focusable by the keyboard; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.IsOffscreenCore">
      <summary>Returns a value that indicates whether the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> is off the screen. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" />.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.IsPasswordCore">
      <summary>Returns a value that indicates whether the element that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> contains protected content. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" />.</summary>
      <returns>true if the element contains sensitive content; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.IsRequiredForFormCore">
      <summary>Returns a value that indicates whether the item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> is required to be completed on a form. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" />.</summary>
      <returns>The value that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetIsRequiredForForm(System.Windows.DependencyObject)" />, if the value is set; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ItemAutomationPeer.Item">
      <summary>Gets the data item in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />.</summary>
      <returns>The data item.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ItemAutomationPeer.ItemsControlAutomationPeer">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer" /> that is associated with the <see cref="T:System.Windows.Controls.ItemsControl" /> that holds the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer" /> associated with the <see cref="T:System.Windows.Controls.ItemsControl" /> that holds the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemAutomationPeer.SetFocusCore">
      <summary>Sets the keyboard input focus on the element that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus" />.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.ItemsControl" /> types to UI automation. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemsControlAutomationPeer.#ctor(System.Windows.Controls.ItemsControl)">
      <summary>Provides initialization for base class values when called by the constructor of a derived class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.ItemsControl" /> to associate with this <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemsControlAutomationPeer.CreateItemAutomationPeer(System.Object)">
      <summary>When overridden in a derived class, creates a new instance of the <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> for a data item in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection of this <see cref="T:System.Windows.Controls.ItemsControl" />.</summary>
      <returns>An object that exposes the data item to UI automation.</returns>
      <param name="item">The data item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemsControlAutomationPeer.GetChildrenCore">
      <summary>Gets the collection of child elements of the <see cref="T:System.Windows.Controls.ItemsControl" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer" />. </summary>
      <returns>The collection of child elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ItemsControlAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets a control pattern for the <see cref="T:System.Windows.Controls.ItemsControl" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values that indicates the control pattern.</param>
    </member>
    <member name="T:System.Windows.Automation.Peers.ListBoxAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.ListBox" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxAutomationPeer.#ctor(System.Windows.Controls.ListBox)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.ListBox" /> to associate with the <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxAutomationPeer.CreateItemAutomationPeer(System.Object)">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" /> for a data item in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection of this <see cref="T:System.Windows.Controls.ListBox" />.</summary>
      <returns>An object that exposes the data item to UI automation.</returns>
      <param name="item">The data item that is associated with this <see cref="T:System.Windows.Automation.Peers.ItemAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.ListBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.List" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.ListBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>By default, the string value of ListBox.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer">
      <summary>Exposes the items in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection of a <see cref="T:System.Windows.Controls.ListBox" /> to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxItemAutomationPeer.#ctor(System.Object,System.Windows.Automation.Peers.SelectorAutomationPeer)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" /> class using the specified selector automation peer. </summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.ListBoxItem" /> instance that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" />.</param>
      <param name="selectorAutomationPeer">The <see cref="T:System.Windows.Automation.Peers.SelectorAutomationPeer" /> that is associated with the <see cref="T:System.Windows.Controls.ListBox" /> that holds the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxItemAutomationPeer.#ctor(System.Windows.Controls.ListBoxItem)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.ListBoxItem" /> instance that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxItemAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.ListBoxItem" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxItemAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.ListBoxItem" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>By default, the string ListBoxItem.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.ListBoxItem" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ListBoxItemAutomationPeer.System#Windows#Automation#Provider#IScrollItemProvider#ScrollIntoView">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView" />.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.MediaElementAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.MediaElement" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.MediaElementAutomationPeer.#ctor(System.Windows.Controls.MediaElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.MediaElementAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.MediaElement" /> to associate with the <see cref="T:System.Windows.Automation.Peers.MediaElementAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.MediaElementAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.MediaElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.MediaElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.MediaElementAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.MediaElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.MediaElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The string MediaElement.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.MultiScaleImage" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer.#ctor(System.Windows.Controls.MultiScaleImage)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer" /> class. </summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.MultiScaleImage" /> to associate with the <see cref="T:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.MultiScaleImage" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.MultiScaleImage" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.MultiScaleImageAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The string MultiScaleImage.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.PasswordBoxAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.PasswordBox" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.PasswordBoxAutomationPeer.#ctor(System.Windows.Controls.PasswordBox)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.PasswordBoxAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.PasswordBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.PasswordBoxAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.PasswordBoxAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.PasswordBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.PasswordBoxAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.PasswordBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly" />.</summary>
      <returns>true if the value is read-only; false if it can be modified. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.PasswordBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.IValueProvider.SetValue(System.String)" />.</summary>
      <param name="value">The value to set.</param>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">Owner of this peer is not enabled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is passed as null.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.PasswordBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#Value">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IValueProvider.Value" />. Always throws an exception.</summary>
      <returns>Not applicable; always throws an exception.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown in all cases.</exception>
    </member>
    <member name="T:System.Windows.Automation.Peers.PatternInterface">
      <summary>Specifies the control pattern that the <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)" /> method returns.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Invoke">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IInvokeProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Selection">
      <summary>The <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Value">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IValueProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.RangeValue">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IRangeValueProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Scroll">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IScrollProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.ScrollItem">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IScrollItemProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.ExpandCollapse">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IExpandCollapseProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Grid">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IGridProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.GridItem">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IGridItemProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.MultipleView">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IMultipleViewProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Window">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IWindowProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.SelectionItem">
      <summary>The <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Dock">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IDockProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Table">
      <summary>The <see cref="T:System.Windows.Automation.Provider.ITableProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.TableItem">
      <summary>The <see cref="T:System.Windows.Automation.Provider.ITableItemProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Toggle">
      <summary>The <see cref="T:System.Windows.Automation.Provider.IToggleProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Transform">
      <summary>The <see cref="T:System.Windows.Automation.Provider.ITransformProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Text">
      <summary>The <see cref="T:System.Windows.Automation.Provider.ITextProvider" /> control pattern interface.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.ProgressBar" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ProgressBarAutomationPeer.#ctor(System.Windows.Controls.ProgressBar)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.ProgressBar" /> to associate with the <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ProgressBarAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.ProgressBar" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ProgressBarAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.ProgressBar" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The string ProgressBar.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ProgressBarAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.ProgressBar" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.ProgressBarAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly" />.</summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ProgressBarAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#LargeChange">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" />.</summary>
      <returns>The large-change value supported by the control, or <see cref="F:System.Double.NaN" /> if this option is not supported. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ProgressBarAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SetValue(System.Double)">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.IRangeValueProvider.SetValue(System.Double)" />. Always throws an exception.</summary>
      <param name="val">The value to set. </param>
      <exception cref="T:System.InvalidOperationException">Thrown in all cases.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.ProgressBarAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SmallChange">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" />.</summary>
      <returns>The small-change value supported by the control, or <see cref="F:System.Double.NaN" /> if this option is not supported. </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.RadioButton" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.#ctor(System.Windows.Controls.RadioButton)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.RadioButton" /> to associate with the <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.RadioButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.RadioButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The string RadioButton.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.RadioButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Controls.CheckBox" /> for this peer is not checked.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.RadioButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected" />.</summary>
      <returns>true if the element is selected; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Controls.CheckBox" /> for this peer is checked.</exception>
    </member>
    <member name="M:System.Windows.Automation.Peers.RadioButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.ISelectionItemProvider.Select" />.</summary>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">
        <see cref="T:System.Windows.Controls.CheckBox" /> for this peer is not enabled.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.RadioButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer" />.</summary>
      <returns>The provider that supports <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />. </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.RangeBaseAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.RangeBaseAutomationPeer.#ctor(System.Windows.Controls.Primitives.RangeBase)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.RangeBaseAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> to associate with the <see cref="T:System.Windows.Automation.Peers.RangeBaseAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.RangeBaseAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RangeBaseAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly" />.</summary>
      <returns>true if the value is read-only; false if it can be modified. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#LargeChange">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" />.</summary>
      <returns>The large-change value supported by the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Maximum">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" />.</summary>
      <returns>The maximum value supported by the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Minimum">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" />.</summary>
      <returns>The minimum value supported by the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SetValue(System.Double)">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.IRangeValueProvider.SetValue(System.Double)" />.</summary>
      <param name="val">The value to set. </param>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">The owner of this peer is not enabled.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set value outside of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> and <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> of the owner control.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SmallChange">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" />.</summary>
      <returns>The small-change value supported by the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.RangeBaseAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Value">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" />.</summary>
      <returns>The value of the control.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.RepeatButtonAutomationPeer.#ctor(System.Windows.Controls.Primitives.RepeatButton)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> to associate with the <see cref="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.RepeatButtonAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RepeatButtonAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The string RepeatButton.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RepeatButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.RepeatButtonAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke" />.</summary>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">Owner control is not enabled.</exception>
    </member>
    <member name="T:System.Windows.Automation.Peers.RichTextBoxAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.RichTextBox" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.RichTextBoxAutomationPeer.#ctor(System.Windows.Controls.RichTextBox)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.RichTextBoxAutomationPeer" /> class. </summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.RichTextBox" /> owner of the automation peer.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.RichTextBoxAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.RichTextBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RichTextBoxAutomationPeer.GetChildrenCore">
      <summary>Returns the collection of child elements of the <see cref="T:System.Windows.Controls.RichTextBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.</summary>
      <returns>A list of child <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RichTextBoxAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.RichTextBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The string RichTextArea.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.RichTextBoxAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.RepeatButtonAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface; or null, if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="T:System.Windows.Automation.Peers.ScrollBarAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollBarAutomationPeer.#ctor(System.Windows.Controls.Primitives.ScrollBar)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ScrollBarAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> to associate with the <see cref="T:System.Windows.Automation.Peers.ScrollBarAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollBarAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ScrollBarAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollBarAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ScrollBarAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The string ScrollBar.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollBarAutomationPeer.GetClickablePointCore">
      <summary>Gets a clickable point for this control.</summary>
      <returns>A point that is clickable within the control, or a point with <see cref="F:System.Double.NaN" /> coordinates, if no point is clickable within the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollBarAutomationPeer.GetOrientationCore">
      <summary>Gets the orientation of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> control associated with this peer.</summary>
      <returns>The orientation of the scroll bar, as a value of the enumeration.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.ScrollViewerAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.ScrollViewer" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.#ctor(System.Windows.Controls.ScrollViewer)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ScrollViewerAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.ScrollViewer" /> object that is associated with this <see cref="T:System.Windows.Automation.Peers.ScrollViewerAutomationPeer" />. instance.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.ScrollViewer" /> object that is associated with this <see cref="T:System.Windows.Automation.Peers.ScrollViewerAutomationPeer" /> instance. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.GetClassNameCore">
      <summary>Gets the text name of the <see cref="T:System.Windows.Controls.ScrollViewer" /> object that is associated with this <see cref="T:System.Windows.Automation.Peers.ScrollViewerAutomationPeer" /> instance. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The string ScrollViewer.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the object that supports the specified control pattern of the element that is associated with this automation peer.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.IsControlElementCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.Controls.ScrollViewer" /> object associated with this peer is understood by the user as interactive or as contributing to the logical structure in UI.</summary>
      <returns>true value to indicate that the owner control is interactive; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#HorizontallyScrollable">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontallyScrollable" />.</summary>
      <returns>true if the control can scroll horizontally; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#HorizontalScrollPercent">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent" />.</summary>
      <returns>The horizontal scroll position as a percentage of the total content area in the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#HorizontalViewSize">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalViewSize" />.</summary>
      <returns>The horizontal size of the viewable region as a percentage of the total content area in the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.IScrollProvider.Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)" />.</summary>
      <param name="horizontalAmount">The horizontal increment specific to the control.</param>
      <param name="verticalAmount">The vertical increment specific to the control.</param>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">Owner control not enabled.</exception>
      <exception cref="T:System.InvalidOperationException">Current scrollable state of a particular scroll axis does not support a scroll action.</exception>
    </member>
    <member name="M:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#SetScrollPercent(System.Double,System.Double)">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.IScrollProvider.SetScrollPercent(System.Double,System.Double)" />.</summary>
      <param name="horizontalPercent">The horizontal position as a percentage of the content area's total range.</param>
      <param name="verticalPercent">The vertical position as a percentage of the content area's total range.</param>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">Owner control not enabled.</exception>
      <exception cref="T:System.InvalidOperationException">Current scrollable state of a particular scroll axis does not support a scroll action.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Specified an input parameter that was less than 0 or greater than 100.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#VerticallyScrollable">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticallyScrollable" />.</summary>
      <returns>true if the control can scroll vertically; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#VerticalScrollPercent">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent" />.</summary>
      <returns>The vertical scroll position as a percentage of the total content area in the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ScrollViewerAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#VerticalViewSize">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalViewSize" />.</summary>
      <returns>The vertical size of the viewable region as a percentage of the total content area in the control.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.SelectorAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.Selector" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorAutomationPeer.#ctor(System.Windows.Controls.Primitives.Selector)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.SelectorAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.Selector" /> instance that is associated with this <see cref="T:System.Windows.Automation.Peers.SelectorAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.Primitives.Selector" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.SelectorAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.Primitives.Selector" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.SelectorAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.SelectorAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple" />.</summary>
      <returns>true if multiple selection is allowed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.ISelectionProvider.GetSelection" />.</summary>
      <returns>A list of UI automation providers. </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.SelectorAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired" />.</summary>
      <returns>true if selection is required; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.SelectorItemAutomationPeer">
      <summary>Exposes the items in a <see cref="T:System.Windows.Controls.Primitives.Selector" /> to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorItemAutomationPeer.#ctor(System.Object,System.Windows.Automation.Peers.SelectorAutomationPeer)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.SelectorItemAutomationPeer" /> using the specified selector automation peer. </summary>
      <param name="owner">The <see cref="T:System.Windows.UIElement" /> instance to associate with this <see cref="T:System.Windows.Automation.Peers.SelectorItemAutomationPeer" />.</param>
      <param name="selectorAutomationPeer">The <see cref="T:System.Windows.Automation.Peers.SelectorAutomationPeer" /> that is associated with the control that holds the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorItemAutomationPeer.#ctor(System.Windows.UIElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.SelectorItemAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.UIElement" /> instance to associate with this <see cref="T:System.Windows.Automation.Peers.SelectorItemAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the element that is associated with this <see cref="T:System.Windows.Automation.Peers.SelectorItemAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection" />.</summary>
      <exception cref="T:System.NotImplementedException">Owner element is not enabled.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.SelectorItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected" />.</summary>
      <returns>true if an item is selected; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection" />.</summary>
      <exception cref="T:System.NotImplementedException">Owner element is not enabled.</exception>
    </member>
    <member name="M:System.Windows.Automation.Peers.SelectorItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.ISelectionItemProvider.Select" />.</summary>
      <exception cref="T:System.NotImplementedException">Owner element is not enabled.</exception>
      <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Windows.Controls.Primitives.Selector" /> for the item was not found through the relevant <see cref="P:System.Windows.Automation.Peers.ItemAutomationPeer.ItemsControlAutomationPeer" /> value.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.SelectorItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer" />.</summary>
      <returns>The UI automation provider.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.SliderAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Slider" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.SliderAutomationPeer.#ctor(System.Windows.Controls.Slider)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.SliderAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Slider" /> to associate with the <see cref="T:System.Windows.Automation.Peers.SliderAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.SliderAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.Slider" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.SliderAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.SliderAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.Slider" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.SliderAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The string Slider.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.SliderAutomationPeer.GetClickablePointCore">
      <summary>Gets a clickable point on the control.</summary>
      <returns>A <see cref="T:System.Windows.Point" /> structure containing a point on the control that is clickable. </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.TextBlockAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.TextBlock" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBlockAutomationPeer.#ctor(System.Windows.Controls.TextBlock)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.TextBlockAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.TextBlock" /> to associate with the <see cref="T:System.Windows.Automation.Peers.TextBlockAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBlockAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.TextBlock" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TextBlockAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBlockAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.TextBlock" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TextBlockAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The string TextBlock.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBlockAutomationPeer.GetNameCore">
      <summary>Gets the label of the <see cref="T:System.Windows.Controls.TextBlock" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TextBlockAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The label of the element that is associated with this automation peer. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBlockAutomationPeer.IsControlElementCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.Controls.TextBlock" /> associated with this peer is understood by the user as interactive or as contributing to the logical structure of the UI.</summary>
      <returns>false if the element is part of an applied template; otherwise, true. </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.TextBoxAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.TextBox" /> types to  UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBoxAutomationPeer.#ctor(System.Windows.Controls.TextBox)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.TextBoxAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.TextBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TextBoxAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBoxAutomationPeer.GetNameCore">
      <summary>Gets the text label of the <see cref="T:System.Windows.Controls.TextBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TextBoxAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The text label of the element that is associated with this automation peer.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBoxAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.Controls.TextBox" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TextBoxAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="P:System.Windows.Automation.Peers.TextBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly" />.</summary>
      <returns>true if the value is read-only; false if it can be modified. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TextBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.IValueProvider.SetValue(System.String)" />.</summary>
      <param name="value">The new value.</param>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">Owner control is not enabled.</exception>
      <exception cref="T:System.InvalidOperationException">Owner control is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> provided as null.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.TextBoxAutomationPeer.System#Windows#Automation#Provider#IValueProvider#Value">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IValueProvider.Value" />.</summary>
      <returns>The value of the control as a string. </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.ThumbAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.Thumb" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ThumbAutomationPeer.#ctor(System.Windows.Controls.Primitives.Thumb)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ThumbAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.Thumb" /> to associate with the <see cref="T:System.Windows.Automation.Peers.ThumbAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ThumbAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ThumbAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ThumbAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ThumbAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The string Thumb.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> types to UI automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ToggleButtonAutomationPeer.#ctor(System.Windows.Controls.Primitives.ToggleButton)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> to associate with this <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ToggleButtonAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>A value of the enumeration. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ToggleButtonAutomationPeer.GetClassNameCore">
      <summary>Gets the text name of the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The string Button.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ToggleButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern implementation for this <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" />.</summary>
      <returns>The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.</returns>
      <param name="patternInterface">One of the enumeration values that indicates the control pattern.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ToggleButtonAutomationPeer.System#Windows#Automation#Provider#IToggleProvider#Toggle">
      <summary>For a description of this member, see <see cref="M:System.Windows.Automation.Provider.IToggleProvider.Toggle" />.</summary>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">Owner control is not enabled.</exception>
    </member>
    <member name="P:System.Windows.Automation.Peers.ToggleButtonAutomationPeer.System#Windows#Automation#Provider#IToggleProvider#ToggleState">
      <summary>For a description of this member, see <see cref="P:System.Windows.Automation.Provider.IToggleProvider.ToggleState" />.</summary>
      <returns>The toggle state of the control.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IDockProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to controls that expose their dock properties in a docking container. </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IDockProvider.DockPosition">
      <summary>Gets the current <see cref="T:System.Windows.Automation.DockPosition" /> of the control in a docking container.</summary>
      <returns>The <see cref="T:System.Windows.Automation.DockPosition" /> of the control, relative to the boundaries of the docking container and to other elements in the container.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IDockProvider.SetDockPosition(System.Windows.Automation.DockPosition)">
      <summary>Docks the control in a docking container.</summary>
      <param name="dockPosition">The dock position, relative to the boundaries of the docking container and to other elements in the container.</param>
    </member>
    <member name="T:System.Windows.Automation.Provider.IExpandCollapseProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to controls that visually expand to display content and that collapse to hide content.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse">
      <summary>Hides all nodes, controls, or content that are descendants of the control.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IExpandCollapseProvider.Expand">
      <summary>Displays all child nodes, controls, or content of the control.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState">
      <summary>Gets the state (expanded or collapsed) of the control.</summary>
      <returns>The state (expanded or collapsed) of the control.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IGridItemProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to individual child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.IGridProvider" />. </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.Column">
      <summary>Gets the ordinal number of the column that contains the cell or item.</summary>
      <returns>A zero-based ordinal number that identifies the column that contains the cell or item.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan">
      <summary>Gets the number of columns that are spanned by a cell or item.</summary>
      <returns>The number of columns. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid">
      <summary>Gets a UI automation provider that implements <see cref="T:System.Windows.Automation.Provider.IGridProvider" /> and that represents the container of the cell or item.</summary>
      <returns>A UI automation provider that implements the <see cref="F:System.Windows.Automation.Peers.PatternInterface.Grid" /> control pattern and that represents the cell or item container. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.Row">
      <summary>Gets the ordinal number of the row that contains the cell or item.</summary>
      <returns>A zero-based ordinal number that identifies the row that contains the cell or item. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.RowSpan">
      <summary>Gets the number of rows spanned by a cell or item.</summary>
      <returns>The number of rows. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IGridProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to controls that act as containers for a collection of child elements. </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridProvider.ColumnCount">
      <summary>Gets the total number of columns in a grid.</summary>
      <returns>The total number of columns in a grid.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IGridProvider.GetItem(System.Int32,System.Int32)">
      <summary>Retrieves the UI automation provider for the specified cell.</summary>
      <returns>The UI automation provider for the specified cell.</returns>
      <param name="row">The ordinal number of the row that contains the cell.</param>
      <param name="column">The ordinal number of the column that contains the cell.</param>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridProvider.RowCount">
      <summary>Gets the total number of rows in a grid.</summary>
      <returns>The total number of rows in a grid.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IInvokeProvider">
      <summary>Exposes a method to support UI automation access to controls that initiate or perform a single, unambiguous action and do not maintain state when activated. </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke">
      <summary>Sends a request to activate a control and initiate its single, unambiguous action.</summary>
    </member>
    <member name="T:System.Windows.Automation.Provider.IMultipleViewProvider">
      <summary>Exposes methods and properties to support UI automation client access to controls that provide, and are able to switch between, multiple representations of the same set of information or child controls.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IMultipleViewProvider.CurrentView">
      <summary>Gets the current control-specific view.</summary>
      <returns>The value (<paramref name="viewId" />) for the current view of the UI automation element. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IMultipleViewProvider.GetSupportedViews">
      <summary>Retrieves a collection of control-specific view identifiers.</summary>
      <returns>A collection of values that identifies the views available for a UI automation element. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IMultipleViewProvider.GetViewName(System.Int32)">
      <summary>Retrieves the name of a control-specific view.</summary>
      <returns>A localized name for the view.</returns>
      <param name="viewId">The view identifier.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.IMultipleViewProvider.SetCurrentView(System.Int32)">
      <summary>Sets the current control-specific view. </summary>
      <param name="viewId">A view identifier.</param>
    </member>
    <member name="T:System.Windows.Automation.Provider.IRangeValueProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to controls that can be set to a value within a range.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly">
      <summary>Gets a value that indicates whether the value of a control is read-only. </summary>
      <returns>true if the value is read-only; false if it can be modified. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange">
      <summary>Gets the value that is added to or subtracted from the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property when a large change is made, such as with the PAGE DOWN key.</summary>
      <returns>The large-change value that is supported by the control, or null if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" />. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum">
      <summary>Gets the maximum range value that is supported by the control.</summary>
      <returns>The maximum value that is supported by the control, or null if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" />. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum">
      <summary>Gets the minimum range value that is supported by the control.</summary>
      <returns>The minimum value that is supported by the control, or null if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" />. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRangeValueProvider.SetValue(System.Double)">
      <summary>Sets the value of the control.</summary>
      <param name="value">The value to set.</param>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange">
      <summary>Gets the value that is added to or subtracted from the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property when a small change is made, such as with an arrow key.</summary>
      <returns>The small-change value supported by the control, or null if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" />. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.Value">
      <summary>Gets the value of the control.</summary>
      <returns>The value of the control, or null if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IRawElementProviderSimple">
      <summary>Provides methods and properties that expose basic information about a UI element.</summary>
    </member>
    <member name="T:System.Windows.Automation.Provider.IScrollItemProvider">
      <summary>Exposes methods and properties to support access by UI automation client to individual child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.IScrollProvider" />.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView">
      <summary>Scrolls the content area of a container object in order to display the control within the visible region (viewport) of the container.</summary>
    </member>
    <member name="T:System.Windows.Automation.Provider.IScrollProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to a control that acts as a scrollable container for a collection of child objects. The children of this control must implement <see cref="T:System.Windows.Automation.Provider.IScrollItemProvider" />.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.HorizontallyScrollable">
      <summary>Gets a value that indicates whether the control can scroll horizontally.</summary>
      <returns>true if the control can scroll horizontally; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent">
      <summary>Gets the current horizontal scroll position.</summary>
      <returns>The horizontal scroll position as a percentage of the total content area within the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalViewSize">
      <summary>Gets the current horizontal view size.</summary>
      <returns>The horizontal size of the viewable region as a percentage of the total content area within the control. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IScrollProvider.Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
      <summary>Scrolls the visible region of the content area horizontally, vertically, or both.</summary>
      <param name="horizontalAmount">The horizontal increment that is specific to the control. Pass <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> if the control cannot be scrolled in this direction.</param>
      <param name="verticalAmount">The vertical increment that is specific to the control. Pass <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> if the control cannot be scrolled in this direction.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.IScrollProvider.SetScrollPercent(System.Double,System.Double)">
      <summary>Sets the horizontal and vertical scroll position as a percentage of the total content area within the control.</summary>
      <param name="horizontalPercent">The horizontal position as a percentage of the content area's total range. Pass <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> if the control cannot be scrolled in this direction.</param>
      <param name="verticalPercent">The vertical position as a percentage of the content area's total range. Pass <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> if the control cannot be scrolled in this direction.</param>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.VerticallyScrollable">
      <summary>Gets a value that indicates whether the control can scroll vertically.</summary>
      <returns>true if the control can scroll vertically; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent">
      <summary>Gets the current vertical scroll position.</summary>
      <returns>The vertical scroll position as a percentage of the total content area within the control. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.VerticalViewSize">
      <summary>Gets the vertical view size.</summary>
      <returns>The vertical size of the viewable region as a percentage of the total content area within the control. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ISelectionItemProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to individual, selectable child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection">
      <summary>Adds the current element to the collection of selected items.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected">
      <summary>Gets a value that indicates whether an item is selected. </summary>
      <returns>true if the element is selected; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection">
      <summary>Removes the current element from the collection of selected items.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionItemProvider.Select">
      <summary>Clears any existing selection and then selects the current element.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer">
      <summary>Gets the UI automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and acts as the container for the calling object.</summary>
      <returns>The UI automation provider.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ISelectionProvider">
      <summary>Exposes methods and properties to support access by a UI Automation client to controls that act as containers for a collection of individual, selectable child items. The children of this control must implement <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" />.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple">
      <summary>Gets a value that indicates whether the UI automation provider allows more than one child element to be selected concurrently.</summary>
      <returns>true if multiple selection is allowed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionProvider.GetSelection">
      <summary>Retrieves a UI automation provider for each child element that is selected.</summary>
      <returns>A generic list of UI automation providers. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired">
      <summary>Gets a value that indicates whether the UI automation provider requires at least one child element to be selected.</summary>
      <returns>true if selection is required; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITableItemProvider">
      <summary>Exposes methods and properties to support UI automation client access to child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.ITableProvider" />. </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableItemProvider.GetColumnHeaderItems">
      <summary>Retrieves an array of UI automation providers representing all the column headers associated with a table item or cell.</summary>
      <returns>An array of UI automation providers. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableItemProvider.GetRowHeaderItems">
      <summary>Retrieves an array of UI automation providers representing all the row headers associated with a table item or cell.</summary>
      <returns>An array of UI automation providers. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITableProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to controls that act as containers for a collection of child elements. The children of this element must implement <see cref="T:System.Windows.Automation.Provider.ITableItemProvider" /> and be organized in a two-dimensional logical coordinate system that can be traversed (a UI automation client can move to adjacent controls, which are headers or cells of the table) by using the keyboard.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableProvider.GetColumnHeaders">
      <summary>Returns a collection of UI Automation providers that represents all the column headers in a table.</summary>
      <returns>An array of UI automation providers. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableProvider.GetRowHeaders">
      <summary>Returns a collection of UI Automation providers that represents all row headers in the table.</summary>
      <returns>An array of UI automation providers.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITableProvider.RowOrColumnMajor">
      <summary>Gets the primary direction of traversal for the table.</summary>
      <returns>The primary direction of traversal, as a value of the enumeration. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITextProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that contain text.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITextProvider.DocumentRange">
      <summary>Gets a text range that encloses the main text of a document. </summary>
      <returns>A text range that encloses the main text of a document. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextProvider.GetSelection">
      <summary>Retrieves a collection of disjoint text ranges that are associated with the current text selection or selections. </summary>
      <returns>A collection of disjoint text ranges.</returns>
      <exception cref="T:System.InvalidOperationException">If the UI Automation provider does not support text selection.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextProvider.GetVisibleRanges">
      <summary>Retrieves an array of disjoint text ranges from a text container. Each text range begins with the first partially visible line and ends with the last partially visible line. </summary>
      <returns>The collection of visible text ranges within a container or an empty array. This method never returns null.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextProvider.RangeFromChild(System.Windows.Automation.Provider.IRawElementProviderSimple)">
      <summary>Retrieves a text range that encloses a child element, such as an image, hyperlink, or other embedded object. </summary>
      <returns>A range that spans the child element.</returns>
      <param name="childElement">The enclosed object.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextProvider.RangeFromPoint(System.Windows.Point)">
      <summary>Returns the degenerate (empty) text range that is nearest to the specified screen coordinates. </summary>
      <returns>A degenerate range nearest the specified location. This method never returns null.</returns>
      <param name="screenLocation">The location, in screen coordinates. </param>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection">
      <summary>Gets a value that specifies whether a text provider supports selection, and if it does, the type of selection that is supported.</summary>
      <returns>A value of <see cref="T:System.Windows.Automation.SupportedTextSelection" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITextRangeProvider">
      <summary>Exposes methods and properties to support UI automation client access to a span of continuous text in a text container that implements <see cref="T:System.Windows.Automation.Provider.ITextProvider" />.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection">
      <summary>Adds to the collection of highlighted text in a text container that supports multiple disjoint selections.</summary>
      <exception cref="T:System.InvalidOperationException">The text provider does not support multiple disjoint selections.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.Clone">
      <summary>Returns a new <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /> that is identical to the original <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /> and that inherits all the properties of the original. </summary>
      <returns>The new text range. This method never returns null.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)">
      <summary>Returns a value that indicates whether the span (the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> endpoint through the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint) of a text range is the same as another text range. </summary>
      <returns>true if the span of both text ranges is identical; otherwise, false. </returns>
      <param name="range">A text range to compare.</param>
      <exception cref="T:System.ArgumentException">The range to compare does not come from the same text provider.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
      <summary>Returns a value that specifies whether two text ranges have identical endpoints.</summary>
      <returns>Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint. Returns zero if the caller's endpoint is at the same location as the target endpoint. Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint. </returns>
      <param name="endpoint">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the caller.</param>
      <param name="targetRange">The target range for comparison.</param>
      <param name="targetEndpoint">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the target.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="targetRange" /> is from a different text provider.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
      <summary>Expands the text range to the specified text unit.</summary>
      <param name="unit">The textual unit.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)">
      <summary>Returns a text range subset that has the specified attribute ID and attribute value. </summary>
      <returns>A text range that has a matching attribute ID and attribute value; otherwise, null. </returns>
      <param name="attributeId">The attribute ID to search for.</param>
      <param name="value">The attribute value to search for. This value must match the specified attribute type. </param>
      <param name="backward">true if the last occurring text range should be returned instead of the first; otherwise, false. </param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)">
      <summary>Returns a text range subset that contains the specified text.</summary>
      <returns>A text range that matches the specified text; otherwise, null.</returns>
      <param name="text">The text string to search for.</param>
      <param name="backward">true to return the last occurring text range instead of the first; otherwise, false.</param>
      <param name="ignoreCase">true to ignore case; otherwise, false.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
      <summary>Retrieves the value of the specified attribute ID across the text range. </summary>
      <returns>Retrieves an object that represents the value of the specified attribute. See Remarks.</returns>
      <param name="attributeId">The text attribute ID.</param>
      <exception cref="T:System.ArgumentException">The specified attribute ID is not valid.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles">
      <summary>Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</summary>
      <returns>An array of bounding rectangles for each full or partial line of text in a text range. See Remarks.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.GetChildren">
      <summary>Retrieves a collection of all the embedded objects that exist within the text range. </summary>
      <returns>A collection of child objects that exist within the range. Child objects that overlap with the text range but are not completely enclosed by it are also included in the collection. Returns an empty collection if no child objects exist.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement">
      <summary>Returns the innermost element that encloses the text range. </summary>
      <returns>The enclosing control, typically the text provider that provides the text range. However, if the text provider supports child text elements such as tables or hyperlinks, the enclosing element can be a descendant of the text provider. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
      <summary>Retrieves the plain text of the range. </summary>
      <returns>The plain text of the text range, which might represent a portion of the full string truncated at the specified <paramref name="maxLength" />. </returns>
      <param name="maxLength">The maximum length of the string to return. Use -1 to specify an unlimited length.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxLength" /> is less than -1.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
      <summary>Moves the text range the specified number of text units.</summary>
      <returns>The number of units actually moved. This value can be less than the <paramref name="count" /> requested if either of the new text range endpoints is greater than or less than the <see cref="P:System.Windows.Automation.Provider.ITextProvider.DocumentRange" /> endpoints. </returns>
      <param name="unit">The text unit boundary.</param>
      <param name="count">The number of text units to move.A positive value moves the text range forward; a negative value moves the text range backward; and a value of 0 has no effect.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
      <summary>Moves one endpoint of a text range to the specified endpoint of a second text range. </summary>
      <param name="endpoint">The endpoint to move.</param>
      <param name="targetRange">Another range from the same text provider.</param>
      <param name="targetEndpoint">An endpoint on the other range.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
      <summary>Moves one endpoint of the text range the specified number of text units within the document range. </summary>
      <returns>The number of units actually moved. This value can be less than the <paramref name="count" /> requested if moving the endpoint extends beyond the start or end of the document.</returns>
      <param name="endpoint">The endpoint to move.</param>
      <param name="unit">The textual unit for moving.</param>
      <param name="count">The number of units to move. A positive value moves the endpoint forward; a negative value moves the endpoint backward; and a value of 0 has no effect.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection">
      <summary>From the collection of highlighted text in a text container that supports multiple disjoint selections, removes a highlighted section of text that corresponds to the caller's <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints.</summary>
      <exception cref="T:System.InvalidOperationException">The text provider does not support multiple disjoint .</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)">
      <summary>Causes the text control to scroll vertically until the text range is visible in the viewport. </summary>
      <param name="alignToTop">true if the text control should be scrolled so that the text range is flush with the top of the viewport; false if the text range is flush with the bottom of the viewport. </param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.Select">
      <summary>Highlights text in the text control that corresponds to the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints of the text range. </summary>
      <exception cref="T:System.InvalidOperationException">Text selection is not supported by the text control.</exception>
    </member>
    <member name="T:System.Windows.Automation.Provider.IToggleProvider">
      <summary>Exposes methods and properties to support UI automation client access to controls that can cycle through a set of states and maintain a particular state.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IToggleProvider.Toggle">
      <summary>Cycles through the toggle states of a control.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IToggleProvider.ToggleState">
      <summary>Gets the toggle state of the control.</summary>
      <returns>The toggle state of the control, as a value of the enumeration. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITransformProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to controls or elements that can be moved, resized, or rotated within a two-dimensional space.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITransformProvider.CanMove">
      <summary>Gets a value that indicates whether the element can be moved.</summary>
      <returns>true if the element can be moved; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITransformProvider.CanResize">
      <summary>Gets a value that indicates whether the element can be resized.</summary>
      <returns>true if the element can be resized; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITransformProvider.CanRotate">
      <summary>Gets a value that indicates whether the element can be rotated.</summary>
      <returns>true if the element can be rotated; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITransformProvider.Move(System.Double,System.Double)">
      <summary>Moves the control.</summary>
      <param name="x">The absolute screen coordinates of the left side of the control.</param>
      <param name="y">The absolute screen coordinates of the top of the control.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITransformProvider.Resize(System.Double,System.Double)">
      <summary>Resizes the control. </summary>
      <param name="width">The new width of the window, in pixels.</param>
      <param name="height">The new height of the window, in pixels.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITransformProvider.Rotate(System.Double)">
      <summary>Rotates the control.</summary>
      <param name="degrees">The number of degrees to rotate the control. A positive number rotates the control clockwise. A negative number rotates the control counterclockwise.</param>
    </member>
    <member name="T:System.Windows.Automation.Provider.IValueProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to controls that have an intrinsic value that does not span a range and that can be represented as a string. </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly">
      <summary>Gets a value that indicates whether the value of a control is read-only. </summary>
      <returns>true if the value is read-only; false if it can be modified. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IValueProvider.SetValue(System.String)">
      <summary>Sets the value of a control.</summary>
      <param name="value">The value to set. The provider is responsible for converting the value to the appropriate data type.</param>
    </member>
    <member name="P:System.Windows.Automation.Provider.IValueProvider.Value">
      <summary>Gets the value of the control.</summary>
      <returns>The value of the control.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IWindowProvider">
      <summary>Exposes methods and properties to support access by a UI automation client to controls that provide fundamental window-based functionality within a traditional graphical user interface (GUI). </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IWindowProvider.Close">
      <summary>Closes the window.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.InteractionState">
      <summary>Gets the interaction state of the window. </summary>
      <returns>The interaction state of the control, as a value of the enumeration. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.IsModal">
      <summary>Gets a value that specifies whether the window is modal.</summary>
      <returns>true if the window is modal; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.IsTopmost">
      <summary>Gets a value that specifies whether the window is the topmost element in the z-order of layout.</summary>
      <returns>true if the window is topmost; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.Maximizable">
      <summary>Gets a value that specifies whether the window can be maximized.</summary>
      <returns>true if the window can be maximized; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.Minimizable">
      <summary>Gets a value that specifies whether the window can be minimized. </summary>
      <returns>true if the window can be minimized; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)">
      <summary>Changes the visual state of the window (such as minimizing or maximizing it).</summary>
      <param name="state">The visual state of the window to change to, as a value of the enumeration.</param>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.VisualState">
      <summary>Gets the visual state of the window. </summary>
      <returns>The visual state of the window, as a value of the enumeration. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)">
      <summary>Blocks the calling code for the specified time or until the associated process enters an idle state, whichever completes first. </summary>
      <returns>true if the window has entered the idle state; false if the timeout occurred.</returns>
      <param name="milliseconds">The amount of time, in milliseconds, to wait for the associated process to become idle.</param>
    </member>
    <member name="T:System.Windows.Automation.Text.TextPatternRangeEndpoint">
      <summary>Identifies text range endpoints for methods of  <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start">
      <summary>The start point of the range.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End">
      <summary>The endpoint of the range. </summary>
    </member>
    <member name="T:System.Windows.Automation.Text.TextUnit">
      <summary>Represents pre-defined units of text for the purposes of navigation within a document. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Character">
      <summary>Specifies that the text unit is one character in length.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Format">
      <summary>Specifies that the text unit is the length of a single, common format specification, such as bold, italic, or similar.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Word">
      <summary>Specifies that the text unit is one word in length.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Line">
      <summary>Specifies that the text unit is one line in length.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Paragraph">
      <summary>Specifies that the text unit is one paragraph in length.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Page">
      <summary>Specifies that the text unit is one document-specific page in length.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Document">
      <summary>Specifies that the text unit is an entire document in length.</summary>
    </member>
    <member name="T:System.Windows.Controls.Border">
      <summary>Draws a border, background, or both around another object.</summary>
    </member>
    <member name="M:System.Windows.Controls.Border.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Border" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.Border.Background">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that fills the background of the border.</summary>
      <returns>The brush that fills the background.</returns>
    </member>
    <member name="F:System.Windows.Controls.Border.BackgroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Border.Background" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Border.Background" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Border.BorderBrush">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to create the border.</summary>
      <returns>The brush that fills the border.  </returns>
    </member>
    <member name="F:System.Windows.Controls.Border.BorderBrushProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Border.BorderBrush" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Border.BorderBrush" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Border.BorderThickness">
      <summary>Gets or sets the thickness of the border.</summary>
      <returns>The thickness of the border in pixels.  The default is 0 on all four sides.</returns>
    </member>
    <member name="F:System.Windows.Controls.Border.BorderThicknessProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Border.BorderThickness" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Border.BorderThickness" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Border.Child">
      <summary>Gets or sets the child element to draw the border around.</summary>
      <returns>The <see cref="T:System.Windows.UIElement" /> to apply the border to.</returns>
    </member>
    <member name="P:System.Windows.Controls.Border.CornerRadius">
      <summary>Gets or sets the radius for the corners of the border.</summary>
      <returns>The degree to which the corners are rounded.</returns>
    </member>
    <member name="F:System.Windows.Controls.Border.CornerRadiusProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Border.CornerRadius" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Border.CornerRadius" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Border.Padding">
      <summary>Gets or sets the distance between the border and its child object.</summary>
      <returns>The dimensions of the space between the border and its child as a <see cref="T:System.Windows.Thickness" /> value. The <see cref="T:System.Windows.Thickness" /> values are in pixels.</returns>
    </member>
    <member name="F:System.Windows.Controls.Border.PaddingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Border.Padding" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Border.Padding" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Button">
      <summary>Represents a button control.</summary>
    </member>
    <member name="M:System.Windows.Controls.Button.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Button" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.Button.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Button" /> when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.Button.OnClick">
      <summary>Raises the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event. </summary>
    </member>
    <member name="M:System.Windows.Controls.Button.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.ButtonAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>
        <see cref="T:System.Windows.Automation.Peers.ButtonAutomationPeer" /> for the <see cref="T:System.Windows.Controls.Button" /> object.</returns>
    </member>
    <member name="T:System.Windows.Controls.Canvas">
      <summary>Defines an area within which you can explicitly position child objects by using coordinates that are relative to the area. </summary>
    </member>
    <member name="M:System.Windows.Controls.Canvas.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Canvas" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.Canvas.ArrangeOverride(System.Windows.Size)">
      <summary>Provides the behavior for the "arrange" pass of Silverlight layout.</summary>
      <returns>The actual size used.</returns>
      <param name="arrangeSize">The size that this object should use to arrange its child objects.</param>
    </member>
    <member name="M:System.Windows.Controls.Canvas.GetLeft(System.Windows.UIElement)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.Canvas.Left" /> attached property for a given object. </summary>
      <returns>The <see cref="P:System.Windows.Controls.Canvas.Left" /> value of the specified object.</returns>
      <param name="element">The object from which the property value is read.</param>
    </member>
    <member name="M:System.Windows.Controls.Canvas.GetTop(System.Windows.UIElement)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.Canvas.Top" /> attached property for a given object. </summary>
      <returns>The <see cref="P:System.Windows.Controls.Canvas.Top" /> value of the specified object.</returns>
      <param name="element">The object from which the property value is read.</param>
    </member>
    <member name="M:System.Windows.Controls.Canvas.GetZIndex(System.Windows.UIElement)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> attached property for a given object. </summary>
      <returns>The <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> value of the requested object. The maximum allowed value for <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> is Int16.MaxValue – 1 = 32766.</returns>
      <param name="element">The object from which the property value is read.</param>
    </member>
    <member name="P:System.Windows.Controls.Canvas.Left">
      <summary>Gets or sets the distance between the left side of an object and the left side of its parent <see cref="T:System.Windows.Controls.Canvas" />.</summary>
      <returns>The offset position from the left side of a parent <see cref="T:System.Windows.Controls.Canvas" />, in pixels. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.Canvas.LeftProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Canvas.Left" /> attached property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Canvas.Left" /> attached property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Canvas.MeasureOverride(System.Windows.Size)">
      <summary>Provides the behavior for the "measure" pass of Silverlight layout. </summary>
      <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes.</returns>
      <param name="constraint">The available size that this object can give to child objects. Infinity can be specified as a value to indicate that the object will size to whatever content is available.</param>
    </member>
    <member name="M:System.Windows.Controls.Canvas.SetLeft(System.Windows.UIElement,System.Double)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.Canvas.Left" /> attached property for a given object. </summary>
      <param name="element">The object to which the property value is written.</param>
      <param name="length">The <see cref="P:System.Windows.Controls.Canvas.Left" /> value of the specified element.</param>
    </member>
    <member name="M:System.Windows.Controls.Canvas.SetTop(System.Windows.UIElement,System.Double)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.Canvas.Top" /> attached property for a given object. </summary>
      <param name="element">The object to which the property value is written.</param>
      <param name="length">The <see cref="P:System.Windows.Controls.Canvas.Top" /> value of the specified object.</param>
    </member>
    <member name="M:System.Windows.Controls.Canvas.SetZIndex(System.Windows.UIElement,System.Int32)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> attached property for a given object. </summary>
      <param name="element">The object to which the property value is written.</param>
      <param name="value">The <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> value of the specified object.</param>
    </member>
    <member name="P:System.Windows.Controls.Canvas.Top">
      <summary>Gets or sets the distance between the top of an element and the top of its parent <see cref="T:System.Windows.Controls.Canvas" />. </summary>
      <returns>The offset position from the top of a parent <see cref="T:System.Windows.Controls.Canvas" />, in pixels. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.Canvas.TopProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Canvas.Top" /> attached property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Canvas.Top" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Canvas.ZIndex">
      <summary>Gets or sets the z-order rendering behavior of objects in a <see cref="T:System.Windows.Controls.Canvas" />. </summary>
      <returns>The z-order of the object within the <see cref="T:System.Windows.Controls.Canvas" />. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.Canvas.ZIndexProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> attached property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Canvas.ZIndex" /> attached property.</returns>
    </member>
    <member name="T:System.Windows.Controls.CheckBox">
      <summary>Represents a control that a user can select (check) or clear (uncheck).</summary>
    </member>
    <member name="M:System.Windows.Controls.CheckBox.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.CheckBox" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.CheckBox.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.CheckBoxAutomationPeer" /> for the check box object.</returns>
    </member>
    <member name="T:System.Windows.Controls.CleanUpVirtualizedItemEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.VirtualizingStackPanel.CleanUpVirtualizedItemEvent" /> event.</summary>
    </member>
    <member name="P:System.Windows.Controls.CleanUpVirtualizedItemEventArgs.Cancel">
      <summary>Gets or sets a value that indicates whether this item should not be re-virtualized.</summary>
      <returns>true if you want to prevent revirtualization of this item; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Controls.CleanUpVirtualizedItemEventArgs.UIElement">
      <summary>Gets an instance of the visual element that represents the data value.</summary>
      <returns>The <see cref="T:System.Windows.UIElement" /> that represents the data value.</returns>
    </member>
    <member name="P:System.Windows.Controls.CleanUpVirtualizedItemEventArgs.Value">
      <summary>Gets an <see cref="T:System.Object" /> that represents the original data value.</summary>
      <returns>The <see cref="T:System.Object" /> that represents the original data value.</returns>
    </member>
    <member name="T:System.Windows.Controls.CleanUpVirtualizedItemEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Controls.VirtualizingStackPanel.CleanUpVirtualizedItemEvent" /> attached events.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.ClickMode">
      <summary>Specifies when the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event should be raised for a control. </summary>
    </member>
    <member name="F:System.Windows.Controls.ClickMode.Release">
      <summary>Specifies that the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event should be raised when the left mouse button is pressed and released, and the mouse pointer is over the control. If you are using the keyboard, specifies that the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event should be raised when the SPACEBAR or ENTER key is pressed and released, and the control has keyboard focus.</summary>
    </member>
    <member name="F:System.Windows.Controls.ClickMode.Press">
      <summary>Specifies that the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event should be raised when the mouse button is pressed and the mouse pointer is over the control. If you are using the keyboard, specifies that the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event should be raised when the SPACEBAR or ENTER is pressed and the control has keyboard focus.</summary>
    </member>
    <member name="F:System.Windows.Controls.ClickMode.Hover">
      <summary>Specifies that the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event should be raised when the mouse pointer moves over the control. </summary>
    </member>
    <member name="T:System.Windows.Controls.ColumnDefinition">
      <summary>Defines column-specific properties that apply to <see cref="T:System.Windows.Controls.Grid" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Controls.ColumnDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ColumnDefinition" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.ColumnDefinition.ActualWidth">
      <summary>Gets a value that represents the actual calculated width of a <see cref="T:System.Windows.Controls.ColumnDefinition" />. </summary>
      <returns>A <see cref="T:System.Double" /> that represents the actual calculated width in pixels. The default is 0.</returns>
    </member>
    <member name="P:System.Windows.Controls.ColumnDefinition.MaxWidth">
      <summary>Gets or sets a value that represents the maximum width of a <see cref="T:System.Windows.Controls.ColumnDefinition" />.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the maximum width in pixels. The default is <see cref="F:System.Double.PositiveInfinity" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ColumnDefinition.MaxWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ColumnDefinition.MaxWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ColumnDefinition.MaxWidth" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ColumnDefinition.MinWidth">
      <summary>Gets or sets a value that represents the minimum width of a <see cref="T:System.Windows.Controls.ColumnDefinition" />. </summary>
      <returns>A <see cref="T:System.Double" /> that represents the minimum width in pixels. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.ColumnDefinition.MinWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ColumnDefinition.MinWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ColumnDefinition.MinWidth" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ColumnDefinition.Width">
      <summary>Gets the calculated width of a <see cref="T:System.Windows.Controls.ColumnDefinition" /> element, or sets the <see cref="T:System.Windows.GridLength" /> value of a column that is defined by the <see cref="T:System.Windows.Controls.ColumnDefinition" />. </summary>
      <returns>The <see cref="T:System.Windows.GridLength" /> that represents the width of the column. The default value is 1.0.</returns>
    </member>
    <member name="F:System.Windows.Controls.ColumnDefinition.WidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ColumnDefinition.Width" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ColumnDefinition.Width" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.ColumnDefinitionCollection">
      <summary>Provides access to an ordered, strongly typed collection of <see cref="T:System.Windows.Controls.ColumnDefinition" /> objects.</summary>
    </member>
    <member name="T:System.Windows.Controls.ComboBox">
      <summary>Represents a selection control that combines a non-editable text box and a drop-down containing a list box that allows users to select an item from a list. </summary>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ComboBox" /> class. . </summary>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.ArrangeOverride(System.Windows.Size)">
      <summary>Arranges and sizes the combo box control and its contents.</summary>
      <returns>The actual size of the combo box.</returns>
      <param name="arrangeBounds">The size allowed for the combo box control.</param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>Removes all templates, styles, and bindings for the object displayed as a <see cref="T:System.Windows.Controls.ComboBoxItem" />.</summary>
      <param name="element">The container element to clear.</param>
      <param name="item">The item that is contained in the <see cref="T:System.Windows.Controls.ComboBoxItem" />.</param>
    </member>
    <member name="E:System.Windows.Controls.ComboBox.DropDownClosed">
      <summary>Occurs when the drop-down portion of the combo box closes.</summary>
    </member>
    <member name="E:System.Windows.Controls.ComboBox.DropDownOpened">
      <summary>Occurs when the drop-down portion of the combo box opens.</summary>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.GetContainerForItemOverride">
      <summary>Retrieves an empty combo box item.</summary>
      <returns>An empty combo box item.</returns>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.IsDropDownOpen">
      <summary>Gets or sets a value that indicates whether the drop-down portion of the combo box is currently open.</summary>
      <returns>true if the drop-down portion is open; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.ComboBox.IsDropDownOpenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ComboBox.IsDropDownOpen" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ComboBox.IsDropDownOpen" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.IsEditable">
      <summary>Gets a value that indicates whether the user can edit text in the text box portion of a combo box. This property always returns false.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.IsItemItsOwnContainerOverride(System.Object)">
      <summary>Determines whether the specified item is (or is eligible to be) its own item container. </summary>
      <returns>true if the item is a <see cref="T:System.Windows.Controls.ComboBoxItem" />; otherwise, false. The default is false.</returns>
      <param name="item">The item to evaluate.</param>
    </member>
    <member name="F:System.Windows.Controls.ComboBox.IsSelectionActiveProperty">
      <summary>Identifies the IsSelectionActive attached property.</summary>
      <returns>The identifier for the IsSelectionActive attached property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.IsSelectionBoxHighlighted">
      <summary>Gets a value that indicates whether the <see cref="P:System.Windows.Controls.ComboBox.SelectionBoxItem" /> is highlighted.</summary>
      <returns>true if the <see cref="P:System.Windows.Controls.ComboBox.SelectionBoxItem" /> is highlighted; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.ItemContainerStyle">
      <summary>Gets or sets the style applied to the container generated for each item in the combo box.</summary>
      <returns>The style applied to the container generated for each item in the combo box.</returns>
    </member>
    <member name="F:System.Windows.Controls.ComboBox.ItemContainerStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ComboBox.ItemContainerStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ComboBox.ItemContainerStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.MaxDropDownHeight">
      <summary>Gets or sets the maximum height of the drop-down that lists combo box items.</summary>
      <returns>The maximum height of the drop-down that lists combo box items. The default is infinity.</returns>
    </member>
    <member name="F:System.Windows.Controls.ComboBox.MaxDropDownHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ComboBox.MaxDropDownHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ComboBox.MaxDropDownHeight" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.ComboBox" /> when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.ComboBoxAutomationPeer" /> for the <see cref="T:System.Windows.Controls.ComboBox" /> object.</returns>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnDropDownClosed(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.ComboBox.DropDownClosed" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnDropDownOpened(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Controls.ComboBox.DropDownOpened" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> event.</summary>
      <param name="e">The event data</param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseEnter" /> event that occurs when the mouse pointer enters this control.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeave" /> event that occurs when the mouse pointer leaves the combo box.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event that occurs when the left mouse button is pressed while the mouse pointer is over the combo box.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseWheel" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseWheelEventArgs" />that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ComboBox.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>Prepares the specified element to display the specified item.</summary>
      <param name="element">The container element used to display the specified item.</param>
      <param name="item">The item to display.</param>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.SelectionBoxItem">
      <summary>Gets the item displayed in the selection box.</summary>
      <returns>The item displayed in the selection box.</returns>
    </member>
    <member name="P:System.Windows.Controls.ComboBox.SelectionBoxItemTemplate">
      <summary>Gets the template applied to the selection box content. </summary>
      <returns>The template applied to the selection box content.</returns>
    </member>
    <member name="T:System.Windows.Controls.ComboBoxItem">
      <summary>Represents a selectable item contained in a <see cref="T:System.Windows.Controls.ComboBox" /> control.</summary>
    </member>
    <member name="M:System.Windows.Controls.ComboBoxItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ComboBoxItem" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.ComboBoxItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" />event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.ContentChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.RichTextBox.ContentChanged" /> event.</summary>
    </member>
    <member name="T:System.Windows.Controls.ContentChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Controls.RichTextBox.ContentChanged" /> event.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.ContentControl">
      <summary>Represents a control with a single piece of content. Controls such as <see cref="T:System.Windows.Controls.Button" />, <see cref="T:System.Windows.Controls.CheckBox" />, and <see cref="T:System.Windows.Controls.ScrollViewer" /> directly or indirectly inherit from this class.</summary>
    </member>
    <member name="M:System.Windows.Controls.ContentControl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ContentControl" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.ContentControl.Content">
      <summary>Gets or sets the value of the <see cref="T:System.Windows.Controls.ContentControl" /> dependency property.</summary>
      <returns>An object that contains the control's content. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ContentControl.ContentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ContentControl.Content" /> dependency property </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ContentControl.Content" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ContentControl.ContentTemplate">
      <summary>Gets or sets the data template that is used to display the content of the <see cref="T:System.Windows.Controls.ContentControl" />.</summary>
      <returns>The data template that is used to display the content of the <see cref="T:System.Windows.Controls.ContentControl" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ContentControl.ContentTemplateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplate" /> dependency property </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplate" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ContentControl.OnContentChanged(System.Object,System.Object)">
      <summary>Called when the value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes. </summary>
      <param name="oldContent">The old value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
      <param name="newContent">The new value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
    </member>
    <member name="T:System.Windows.Controls.ContentPresenter">
      <summary>Displays the content of a <see cref="T:System.Windows.Controls.ContentPresenter" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.ContentPresenter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ContentPresenter" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.ContentPresenter.Content">
      <summary>Gets or sets the data that is used to generate the child elements of a <see cref="T:System.Windows.Controls.ContentPresenter" />.</summary>
      <returns>The data that is used to generate the child elements. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ContentPresenter.ContentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ContentPresenter.Content" /> dependency property </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ContentPresenter.Content" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ContentPresenter.ContentTemplate">
      <summary>Gets or sets the template that is used to display the content of the control.</summary>
      <returns>A <see cref="T:System.Windows.DataTemplate" /> that defines the visualization of the content. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ContentPresenter.ContentTemplateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ContentPresenter.ContentTemplate" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ContentPresenter.ContentTemplate" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Control">
      <summary>Represents the base class for UI elements that use a <see cref="T:System.Windows.Controls.ControlTemplate" /> to define their appearance. </summary>
    </member>
    <member name="M:System.Windows.Controls.Control.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Control" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.Control.ApplyTemplate">
      <summary>Loads the relevant control template so that its parts can be referenced.</summary>
      <returns>Returns whether the visual tree was rebuilt by this call. true indicates the tree was rebuilt; false indicates that the previous visual tree was retained.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.Background">
      <summary>Gets or sets a brush that provides the background of the control.</summary>
      <returns>The brush that provides the background of the control. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.BackgroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.Background" /> dependency property </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.Background" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.BorderBrush">
      <summary>Gets or sets a brush that describes the border background of a control.</summary>
      <returns>The brush that is used to fill the control's border; the default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.BorderBrushProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.BorderBrush" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.BorderBrush" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.BorderThickness">
      <summary>Gets or sets the border thickness of a control. </summary>
      <returns>A thickness value; the default is a thickness of 0 on all four sides.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.BorderThicknessProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.BorderThickness" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.BorderThickness" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.DefaultStyleKey">
      <summary>Gets or sets the key that references the default style for the control.</summary>
      <returns>The key that references the default style for the control. To work correctly as part of theme style lookup, this value is expected to be the <see cref="T:System.Type" /> of the control being styled.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.DefaultStyleKeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.DefaultStyleKey" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.DefaultStyleKey" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Control.Focus">
      <summary>Attempts to set the focus on the control.</summary>
      <returns>true if focus was set to the control, or focus was already on the control. false if the control is not focusable.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.FontFamily">
      <summary>Gets or sets the font used to display text in the control.</summary>
      <returns>The font used to display text in the control. The default is the "Portable User Interface".</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.FontFamilyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.FontFamily" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.FontFamily" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.FontSize">
      <summary>Gets or sets the size of the text in this control.</summary>
      <returns>The size of the text in the <see cref="T:System.Windows.Controls.Control" />. The default is 11 (in pixels).</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.FontSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.FontStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.FontStyle" /> dependency property.f</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.FontStretch">
      <summary>Gets or sets the degree to which a font is condensed or expanded on the screen.</summary>
      <returns>One of the values that specifies the degree to which a font is condensed or expanded on the screen. The default is <see cref="P:System.Windows.FontStretches.Normal" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.FontStretchProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.FontStretch" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.FontStretch" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.FontStyle">
      <summary>Gets or sets the style in which the text is rendered.</summary>
      <returns>One of the values that specifies the style in which the text is rendered.  The default is <see cref="P:System.Windows.FontStyles.Normal" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.FontStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.FontStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.FontStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.FontWeight">
      <summary>Gets or sets the thickness of the specified font.</summary>
      <returns>One of the values that specifies the thickness of the specified font. The default is <see cref="P:System.Windows.FontWeights.Normal" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.FontWeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.FontWeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.FontWeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.Foreground">
      <summary>Gets or sets a brush that describes the foreground color.</summary>
      <returns>The brush that paints the foreground of the control. The default value is <see cref="P:System.Windows.Media.Colors.Black" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.ForegroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.Foreground" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.Foreground" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Control.GetTemplateChild(System.String)">
      <summary>Retrieves the named element in the instantiated <see cref="T:System.Windows.Controls.ControlTemplate" /> visual tree.</summary>
      <returns>The named element from the template, if found. Can return null if no element with name <paramref name="childName" /> was found in the template.</returns>
      <param name="childName">The name of element to find.</param>
    </member>
    <member name="P:System.Windows.Controls.Control.HorizontalContentAlignment">
      <summary>Gets or sets the horizontal alignment of the control's content. </summary>
      <returns>One of the <see cref="T:System.Windows.HorizontalAlignment" /> values. The default is <see cref="F:System.Windows.HorizontalAlignment.Center" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.HorizontalContentAlignmentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.HorizontalContentAlignment" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.HorizontalContentAlignment" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.IsEnabled">
      <summary>Gets or sets a value indicating whether the user can interact with the control. </summary>
      <returns>true if the user can interact with the control; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.Controls.Control.IsEnabledChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.Control.IsEnabled" /> property changes.</summary>
    </member>
    <member name="F:System.Windows.Controls.Control.IsEnabledProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.IsEnabled" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.IsEnabled" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.IsTabStop">
      <summary>Gets or sets a value that indicates whether a control is included in tab navigation. </summary>
      <returns>true if the control is included in tab navigation; otherwise, false. The default is true.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.IsTabStopProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.IsTabStop" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.IsTabStop" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Control.OnDragEnter(System.Windows.DragEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement.DragEnter" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnDragLeave(System.Windows.DragEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement.DragLeave" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnDragOver(System.Windows.DragEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement.DragOver" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnDrop(System.Windows.DragEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement.Drop" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.GotFocus" /> event occurs.</summary>
      <param name="e">The data for the event. </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.KeyDown" /> event occurs.</summary>
      <param name="e">The data for the event. </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.KeyUp" /> event occurs.</summary>
      <param name="e">The data for the event. </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.LostFocus" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> event occurs to provide handling for the event in a derived class without attaching a delegate. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.MouseEnter" /> event occurs.</summary>
      <param name="e">The data for the event. </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.MouseLeave" /> event occurs.</summary>
      <param name="e">The data for the event. </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event occurs.</summary>
      <param name="e">The data for the event. </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> event occurs.</summary>
      <param name="e">The data for the event. </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.MouseMove" /> event occurs.</summary>
      <param name="e">The data for the event. </param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.MouseWheel" /> event occurs to provide handling for the event in a derived class without attaching a delegate. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement.TextInput" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnTextInputStart(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement.TextInputStart" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnTextInputUpdate(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement.TextInputUpdate" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data</param>
    </member>
    <member name="P:System.Windows.Controls.Control.Padding">
      <summary>Gets or sets the padding inside a control.</summary>
      <returns>The amount of space between the content of a <see cref="T:System.Windows.Controls.Control" /> and its <see cref="P:System.Windows.FrameworkElement.Margin" /> or <see cref="T:System.Windows.Controls.Border" />.  The default is a thickness of 0 on all four sides.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.PaddingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.Padding" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.Padding" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.TabIndex">
      <summary>Gets or sets a value that determines the order in which elements receive focus when the user navigates through controls by using the TAB key.</summary>
      <returns>A value that determines the order of logical navigation for a device. The default value is <see cref="F:System.Int32.MaxValue" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.TabIndexProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.TabIndex" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.TabIndex" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.TabNavigation">
      <summary>Gets or sets a value that modifies how tabbing and <see cref="P:System.Windows.Controls.Control.TabIndex" /> work for this control.</summary>
      <returns>A value of the enumeration. The default is <see cref="F:System.Windows.Input.KeyboardNavigationMode.Local" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.TabNavigationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.TabNavigation" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.TabNavigation" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.Template">
      <summary>Gets or sets a control template. </summary>
      <returns>The template that defines the appearance of the <see cref="T:System.Windows.Controls.Control" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.TemplateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.Template" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.Template" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Control.VerticalContentAlignment">
      <summary>Gets or sets the vertical alignment of the control's content.</summary>
      <returns>One of the <see cref="T:System.Windows.VerticalAlignment" /> values. The default is <see cref="F:System.Windows.VerticalAlignment.Center" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Control.VerticalContentAlignmentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Control.VerticalContentAlignment" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Control.VerticalContentAlignment" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.ControlTemplate">
      <summary>Defines the element tree that is applied as a control template.</summary>
    </member>
    <member name="M:System.Windows.Controls.ControlTemplate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ControlTemplate" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.ControlTemplate.TargetType">
      <summary>Gets or sets the type to which the <see cref="T:System.Windows.Controls.ControlTemplate" /> is applied.</summary>
      <returns>The type to which the <see cref="T:System.Windows.Controls.ControlTemplate" /> is applied.</returns>
    </member>
    <member name="T:System.Windows.Controls.Grid">
      <summary>Defines a flexible grid area that consists of columns and rows.</summary>
    </member>
    <member name="M:System.Windows.Controls.Grid.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Grid" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.Grid.ArrangeOverride(System.Windows.Size)">
      <summary>Arranges the content of a <see cref="T:System.Windows.Controls.Grid" /> element.</summary>
      <returns>
        <see cref="T:System.Windows.Size" /> that represents the arranged size of this <see cref="T:System.Windows.Controls.Grid" /> element and its children.</returns>
      <param name="arrangeSize">Specifies the size this <see cref="T:System.Windows.Controls.Grid" /> element should use to arrange its child elements.</param>
    </member>
    <member name="P:System.Windows.Controls.Grid.Column">
      <summary>Gets or sets a value that indicates which column child content within a <see cref="T:System.Windows.Controls.Grid" /> should appear in. </summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the column in which child content should appear. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Controls.Grid.ColumnDefinitions">
      <summary>Gets a <see cref="T:System.Windows.Controls.ColumnDefinitionCollection" /> defined on this instance of <see cref="T:System.Windows.Controls.Grid" />. </summary>
      <returns>A <see cref="T:System.Windows.Controls.ColumnDefinitionCollection" /> defined on this instance of <see cref="T:System.Windows.Controls.Grid" /></returns>
    </member>
    <member name="F:System.Windows.Controls.Grid.ColumnProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Grid.Column" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Grid.Column" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Grid.ColumnSpan">
      <summary>Gets or sets a value that indicates the total number of columns that child content spans within a <see cref="T:System.Windows.Controls.Grid" />.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the number of columns that child content should span. The default value is 1.</returns>
    </member>
    <member name="F:System.Windows.Controls.Grid.ColumnSpanProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Grid.ColumnSpan" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Grid.ColumnSpan" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Grid.GetColumn(System.Windows.FrameworkElement)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.Grid.Column" /> attached property from the specified <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The value of the <see cref="P:System.Windows.Controls.Grid.Column" /> attached property.  This is a zero-based index.</returns>
      <param name="element">The element from which to read the property value.</param>
    </member>
    <member name="M:System.Windows.Controls.Grid.GetColumnSpan(System.Windows.FrameworkElement)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.Grid.ColumnSpan" /> attached property from the specified <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>The value of the <see cref="P:System.Windows.Controls.Grid.ColumnSpan" /> attached property.</returns>
      <param name="element">The element from which to read the property value.</param>
    </member>
    <member name="M:System.Windows.Controls.Grid.GetRow(System.Windows.FrameworkElement)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.Grid.Row" /> attached property from the specified <see cref="T:System.Windows.FrameworkElement" />. </summary>
      <returns>The value of the <see cref="P:System.Windows.Controls.Grid.Row" /> attached property.</returns>
      <param name="element">The element from which to read the property value.</param>
    </member>
    <member name="M:System.Windows.Controls.Grid.GetRowSpan(System.Windows.FrameworkElement)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.Grid.RowSpan" /> attached property from the specified <see cref="T:System.Windows.FrameworkElement" />. </summary>
      <returns>The value of the <see cref="P:System.Windows.Controls.Grid.RowSpan" /> attached property.</returns>
      <param name="element">The element from which to read the property value.</param>
    </member>
    <member name="M:System.Windows.Controls.Grid.MeasureOverride(System.Windows.Size)">
      <summary>Measures the children of a <see cref="T:System.Windows.Controls.Grid" /> in anticipation of arranging them during the <see cref="M:System.Windows.Controls.Grid.ArrangeOverride(System.Windows.Size)" /> pass.</summary>
      <returns>
        <see cref="T:System.Windows.Size" /> that represents the maximum area available to the child content for layout.</returns>
      <param name="constraint">Indicates an upper limit size that should not be exceeded.</param>
    </member>
    <member name="P:System.Windows.Controls.Grid.Row">
      <summary>Gets or sets a value that indicates which row child content within a <see cref="T:System.Windows.Controls.Grid" /> should appear in.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the row in which child content should appear. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Controls.Grid.RowDefinitions">
      <summary>Gets a <see cref="T:System.Windows.Controls.RowDefinitionCollection" /> defined on this instance of <see cref="T:System.Windows.Controls.Grid" />. </summary>
      <returns>A <see cref="T:System.Windows.Controls.RowDefinitionCollection" /> defined on this instance of <see cref="T:System.Windows.Controls.Grid" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Grid.RowProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Grid.Row" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Grid.Row" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Grid.RowSpan">
      <summary>Gets or sets a value that indicates the total number of rows that child content spans within a <see cref="T:System.Windows.Controls.Grid" />.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the number of rows that child content should span. The default value is 1.</returns>
    </member>
    <member name="F:System.Windows.Controls.Grid.RowSpanProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Grid.RowSpan" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Grid.RowSpan" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Grid.SetColumn(System.Windows.FrameworkElement,System.Int32)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.Grid.Column" /> attached property to the specified <see cref="T:System.Windows.FrameworkElement" />. </summary>
      <param name="element">The element on which to set the <see cref="P:System.Windows.Controls.Grid.Column" /> attached property.</param>
      <param name="value">The property value to set.</param>
    </member>
    <member name="M:System.Windows.Controls.Grid.SetColumnSpan(System.Windows.FrameworkElement,System.Int32)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.Grid.ColumnSpan" /> attached property to the specified <see cref="T:System.Windows.FrameworkElement" />. </summary>
      <param name="element">The element on which to set the <see cref="P:System.Windows.Controls.Grid.ColumnSpan" /> attached property.</param>
      <param name="value">The property value to set.</param>
    </member>
    <member name="M:System.Windows.Controls.Grid.SetRow(System.Windows.FrameworkElement,System.Int32)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.Grid.Row" /> attached property to the specified <see cref="T:System.Windows.FrameworkElement" />. </summary>
      <param name="element">The element on which to set the <see cref="P:System.Windows.Controls.Grid.Row" /> attached property.</param>
      <param name="value">The property value to set.</param>
    </member>
    <member name="M:System.Windows.Controls.Grid.SetRowSpan(System.Windows.FrameworkElement,System.Int32)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.Grid.RowSpan" /> attached property to the specified <see cref="T:System.Windows.FrameworkElement" />. </summary>
      <param name="element">The element on which to set the <see cref="P:System.Windows.Controls.Grid.RowSpan" /> attached property.</param>
      <param name="value">The property value to set.</param>
    </member>
    <member name="P:System.Windows.Controls.Grid.ShowGridLines">
      <summary>Gets or sets a value that indicates whether grid lines are visible within this <see cref="T:System.Windows.Controls.Grid" />. </summary>
      <returns>true if grid lines are visible; otherwise, false. The default value is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Grid.ShowGridLinesProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Grid.ShowGridLines" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Grid.ShowGridLines" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.HyperlinkButton">
      <summary>Represents a button control that displays a hyperlink.</summary>
    </member>
    <member name="M:System.Windows.Controls.HyperlinkButton.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.HyperlinkButton" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.HyperlinkButton.NavigateUri">
      <summary>Gets or sets the URI to navigate to when the <see cref="T:System.Windows.Controls.HyperlinkButton" /> is clicked. </summary>
      <returns>The URI to navigate to when the <see cref="T:System.Windows.Controls.HyperlinkButton" /> is clicked.</returns>
    </member>
    <member name="F:System.Windows.Controls.HyperlinkButton.NavigateUriProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.HyperlinkButton.NavigateUri" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.HyperlinkButton.NavigateUri" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.HyperlinkButton.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.HyperlinkButton" /> when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.HyperlinkButton.OnClick">
      <summary>Provides handling for the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="P:System.Windows.Controls.HyperlinkButton.NavigateUri" /> property is not or cannot be converted to an absolute URI.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Controls.HyperlinkButton.TargetName" /> property is set to a value that contains embedded whitespace.</exception>
    </member>
    <member name="M:System.Windows.Controls.HyperlinkButton.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer" /> for the hyperlink button object. </returns>
    </member>
    <member name="P:System.Windows.Controls.HyperlinkButton.TargetName">
      <summary>Gets or sets the name of the target window or frame that the Web page should open in, or the name of the object within the Silverlight application to navigate to.</summary>
      <returns>Gets or sets the name of the target window or frame that the Web page should open in, or the name of the object within the Silverlight application to navigate to.</returns>
    </member>
    <member name="F:System.Windows.Controls.HyperlinkButton.TargetNameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.HyperlinkButton.TargetName" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.HyperlinkButton.TargetName" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Image">
      <summary>Represents a control that displays an image in the JPEG or PNG file formats.</summary>
    </member>
    <member name="M:System.Windows.Controls.Image.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Image" /> class. </summary>
    </member>
    <member name="E:System.Windows.Controls.Image.ImageFailed">
      <summary>Occurs when there is an error associated with image retrieval or format.</summary>
    </member>
    <member name="E:System.Windows.Controls.Image.ImageOpened">
      <summary>Occurs when the image source is downloaded and decoded with no failure. You can use this event to determine the size of an image before rendering it.</summary>
    </member>
    <member name="P:System.Windows.Controls.Image.Source">
      <summary>Gets or sets the source for the image.</summary>
      <returns>A source object for the drawn image.</returns>
    </member>
    <member name="F:System.Windows.Controls.Image.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Image.Source" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Image.Source" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Image.Stretch">
      <summary>Gets or sets a value that describes how an <see cref="T:System.Windows.Controls.Image" /> should be stretched to fill the destination rectangle. </summary>
      <returns>
        <see cref="T:System.Windows.Media.Stretch" />A value of the enumeration that specifies how the source image is applied if the <see cref="P:System.Windows.FrameworkElement.Height" /> and <see cref="P:System.Windows.FrameworkElement.Width" /> of the <see cref="T:System.Windows.Controls.Image" /> are specified and are different than the source image's height and width.The default value is Uniform.</returns>
    </member>
    <member name="F:System.Windows.Controls.Image.StretchProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Image.Stretch" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Image.Stretch" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.INavigate">
      <summary>Defines a method for internal navigation in a Silverlight application.</summary>
    </member>
    <member name="M:System.Windows.Controls.INavigate.Navigate(System.Uri)">
      <summary>Displays the content located at the specified URI.</summary>
      <returns>true if the content was successfully displayed; otherwise, false.</returns>
      <param name="source">The URI of the content to display. </param>
    </member>
    <member name="T:System.Windows.Controls.InkPresenter">
      <summary>Implements a rectangular surface that displays ink strokes.</summary>
    </member>
    <member name="M:System.Windows.Controls.InkPresenter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.InkPresenter" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.InkPresenter.Strokes">
      <summary>Gets or sets the strokes that the <see cref="T:System.Windows.Controls.InkPresenter" /> displays.</summary>
      <returns>The collection of ink strokes that are displayed by the <see cref="T:System.Windows.Controls.InkPresenter" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.InkPresenter.StrokesProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.InkPresenter.Strokes" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.InkPresenter.Strokes" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.ItemCollection">
      <summary>Holds the list of items that represent the content of an <see cref="T:System.Windows.Controls.ItemsControl" />.</summary>
    </member>
    <member name="E:System.Windows.Controls.ItemCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>Occurs when the items list of the collection has changed, or the collection is reset.</summary>
    </member>
    <member name="T:System.Windows.Controls.ItemContainerGenerator">
      <summary>Provides mappings between the items of an <see cref="T:System.Windows.Controls.ItemsControl" /> and their container elements.</summary>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.ContainerFromIndex(System.Int32)">
      <summary>Returns the container for the item at the specified index within the <see cref="T:System.Windows.Controls.ItemCollection" />.</summary>
      <returns>The container for the item at the specified index within the item collection, if the item has a container; otherwise, null.</returns>
      <param name="index">The index of the item to retrieve.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.ContainerFromItem(System.Object)">
      <summary>Returns the container corresponding to the specified item.</summary>
      <returns>A container that corresponds to the specified item, if the item has a container and exists in the collection; otherwise, null.</returns>
      <param name="item">The item to retrieve the container for.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.GeneratorPositionFromIndex(System.Int32)">
      <summary>Gets the generated position of the item at the specified index.</summary>
      <returns>The position of the item as generated by the <see cref="T:System.Windows.Controls.ItemContainerGenerator" />.</returns>
      <param name="itemIndex">The index of the item to retrieve the position of.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.IndexFromContainer(System.Windows.DependencyObject)">
      <summary>Returns the index to the item that has the specified, generated container.</summary>
      <returns>The index to the item that corresponds to the specified generated container.</returns>
      <param name="container">The generated container to retrieve the item index for.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.IndexFromGeneratorPosition(System.Windows.Controls.Primitives.GeneratorPosition)">
      <summary>Returns the index that maps to the specified <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that is the index which maps to the specified <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</returns>
      <param name="position">The <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />  for the desired index.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.ItemFromContainer(System.Windows.DependencyObject)">
      <summary>Returns the item that corresponds to the specified, generated container.</summary>
      <returns>The contained item, or the container if it does not contain an item.</returns>
      <param name="container">The <see cref="T:System.Windows.DependencyObject" /> that corresponds to the item to be returned.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="container" /> is null.</exception>
    </member>
    <member name="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged">
      <summary>Occurs when the contents of the items collection changes.</summary>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.System#Windows#Controls#Primitives#IItemContainerGenerator#GenerateNext(System.Boolean@)">
      <summary>Returns the container element used to display the next item, and whether the container element has been newly generated (realized).</summary>
      <returns>A <see cref="T:System.Windows.DependencyObject" /> that is the container element which is used to display the next item.</returns>
      <param name="isNewlyRealized">true if the returned <see cref="T:System.Windows.DependencyObject" /> is newly generated (realized); otherwise, false.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.System#Windows#Controls#Primitives#IItemContainerGenerator#GetItemContainerGeneratorForPanel(System.Windows.Controls.Panel)">
      <summary>Returns the <see cref="T:System.Windows.Controls.ItemContainerGenerator" /> appropriate for use by the specified panel. </summary>
      <returns>An <see cref="T:System.Windows.Controls.ItemContainerGenerator" /> appropriate for use by the specified panel.</returns>
      <param name="panel">The panel for which to return an appropriate <see cref="T:System.Windows.Controls.ItemContainerGenerator" />.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.System#Windows#Controls#Primitives#IItemContainerGenerator#PrepareItemContainer(System.Windows.DependencyObject)">
      <summary>Prepares the specified element as the container for the corresponding item.</summary>
      <param name="container">The container to prepare. Normally, <paramref name="container" /> is the result of the previous call to <see cref="M:System.Windows.Controls.Primitives.IItemContainerGenerator.GenerateNext(System.Boolean@)" />.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.System#Windows#Controls#Primitives#IItemContainerGenerator#Remove(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32)">
      <summary>Removes one or more generated (realized) items.</summary>
      <param name="position">The <see cref="T:System.Int32" /> index of the element to remove. <paramref name="position" /> must refer to a previously generated (realized) item, which means its offset must be zero.</param>
      <param name="count">The <see cref="T:System.Int32" /> number of elements to remove, starting at <paramref name="position" />.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.System#Windows#Controls#Primitives#IItemContainerGenerator#RemoveAll">
      <summary>Removes all generated (realized) items.</summary>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.System#Windows#Controls#Primitives#IItemContainerGenerator#StartAt(System.Windows.Controls.Primitives.GeneratorPosition,System.Windows.Controls.Primitives.GeneratorDirection,System.Boolean)">
      <summary>Prepares the generator to generate items, starting at the specified <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />, and in the specified <see cref="T:System.Windows.Controls.Primitives.GeneratorDirection" />, and controlling whether or not to start at a generated (realized) item.</summary>
      <returns>An <see cref="T:System.IDisposable" /> object that tracks the lifetime of the generation process.</returns>
      <param name="position">A <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />, that specifies the position of the item to start generating items at.</param>
      <param name="direction">Specifies the position of the item to start generating items at.</param>
      <param name="allowStartAtRealizedItem">A <see cref="T:System.Boolean" /> that specifies whether to start at a generated (realized) item.</param>
    </member>
    <member name="M:System.Windows.Controls.ItemContainerGenerator.System#Windows#Controls#Primitives#IRecyclingItemContainerGenerator#Recycle(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32)">
      <summary>Disassociates item containers from their data items and saves the containers so they can be reused later for other data items.</summary>
      <param name="position">The zero-based index of the first element to reuse. <paramref name="position" /> must refer to a previously generated (realized) item.</param>
      <param name="count">The number of elements to reuse, starting at <paramref name="position" />.</param>
    </member>
    <member name="T:System.Windows.Controls.ItemsControl">
      <summary>Represents a control that can be used to present a collection of items.</summary>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ItemsControl" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>Undoes the effects of the <see cref="M:System.Windows.Controls.ItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)" /> method.</summary>
      <param name="element">The container element.</param>
      <param name="item">The item.</param>
    </member>
    <member name="P:System.Windows.Controls.ItemsControl.DisplayMemberPath">
      <summary>Gets or sets the name or path of the property that is displayed for each data item.</summary>
      <returns>The name or path of the property that is displayed for each the data item in the control.  The default is an empty string ("").</returns>
    </member>
    <member name="F:System.Windows.Controls.ItemsControl.DisplayMemberPathProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ItemsControl.DisplayMemberPath" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ItemsControl.DisplayMemberPath" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.GetContainerForItemOverride">
      <summary>Creates or identifies the element that is used to display the given item.</summary>
      <returns>The element that is used to display the given item.</returns>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.GetItemsOwner(System.Windows.DependencyObject)">
      <summary>Returns the <see cref="T:System.Windows.Controls.ItemsControl" /> that the specified element hosts items for.</summary>
      <returns>The <see cref="T:System.Windows.Controls.ItemsControl" /> that the specified element hosts items for, or null.</returns>
      <param name="element">The host element. </param>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.IsItemItsOwnContainerOverride(System.Object)">
      <summary>Determines if the specified item is (or is eligible to be) its own container.</summary>
      <returns>true if the item is (or is eligible to be) its own container; otherwise, false.</returns>
      <param name="item">The item to check.</param>
    </member>
    <member name="P:System.Windows.Controls.ItemsControl.ItemContainerGenerator">
      <summary>Gets the <see cref="T:System.Windows.Controls.ItemContainerGenerator" /> associated with this <see cref="T:System.Windows.Controls.ItemsControl" />.</summary>
      <returns>The <see cref="T:System.Windows.Controls.ItemContainerGenerator" /> associated with this <see cref="T:System.Windows.Controls.ItemsControl" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.ItemsControl.Items">
      <summary>Gets the collection used to generate the content of the control.</summary>
      <returns>The collection that is used to generate the content of the control, if it exists; otherwise, null. The default is an empty collection.</returns>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.ItemsControlFromItemContainer(System.Windows.DependencyObject)">
      <summary>Returns the <see cref="T:System.Windows.Controls.ItemsControl" /> that owns the specified container element.</summary>
      <returns>The <see cref="T:System.Windows.Controls.ItemsControl" /> that owns the specified container element; otherwise, null.</returns>
      <param name="container">The container element to return the <see cref="T:System.Windows.Controls.ItemsControl" /> for.</param>
    </member>
    <member name="P:System.Windows.Controls.ItemsControl.ItemsPanel">
      <summary>Gets or sets the template that defines the panel that controls the layout of items.</summary>
      <returns>An <see cref="T:System.Windows.Controls.ItemsPanelTemplate" /> that defines the panel to use for the layout of the items. The default value for the <see cref="T:System.Windows.Controls.ItemsControl" /> is an <see cref="T:System.Windows.Controls.ItemsPanelTemplate" /> that specifies a <see cref="T:System.Windows.Controls.StackPanel" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ItemsControl.ItemsPanelProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ItemsControl.ItemsPanel" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ItemsControl.ItemsPanel" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ItemsControl.ItemsSource">
      <summary>Gets or sets a collection used to generate the content of the <see cref="T:System.Windows.Controls.ItemsControl" />. </summary>
      <returns>The  object that is used to generate the content of the <see cref="T:System.Windows.Controls.ItemsControl" />. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ItemsControl.ItemsSourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ItemsControl.ItemTemplate">
      <summary>Gets or sets the <see cref="T:System.Windows.DataTemplate" /> used to display each item. </summary>
      <returns>The template that specifies the visualization of the data objects. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ItemsControl.ItemTemplateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Called when the value of the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> property changes.</summary>
      <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> that contains the event data</param>
    </member>
    <member name="M:System.Windows.Controls.ItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>Prepares the specified element to display the specified item. </summary>
      <param name="element">The element used to display the specified item.</param>
      <param name="item">The item to display.</param>
    </member>
    <member name="T:System.Windows.Controls.ItemsPanelTemplate">
      <summary>Specifies the panel that the <see cref="T:System.Windows.Controls.ItemsPresenter" /> creates for the layout of the items of an <see cref="T:System.Windows.Controls.ItemsControl" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.ItemsPanelTemplate.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ItemsPanelTemplate" /> class. </summary>
    </member>
    <member name="T:System.Windows.Controls.ItemsPresenter">
      <summary>Specifies where items are placed in a control, usually an <see cref="T:System.Windows.Controls.ItemsControl" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.ItemsPresenter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ItemsPresenter" /> class. </summary>
    </member>
    <member name="T:System.Windows.Controls.ListBox">
      <summary>Contains a list of selectable items. </summary>
    </member>
    <member name="M:System.Windows.Controls.ListBox.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ListBox" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.ListBox.GetContainerForItemOverride">
      <summary>Creates or identifies the element used to display a specified item. </summary>
      <returns>A <see cref="T:System.Windows.Controls.ListBoxItem" /> corresponding to a specified item.</returns>
    </member>
    <member name="M:System.Windows.Controls.ListBox.IsItemItsOwnContainerOverride(System.Object)">
      <summary>Determines if the specified item is (or is eligible to be) its own item container. </summary>
      <returns>true if the item is its own item container; otherwise, false.</returns>
      <param name="item">The specified item.</param>
    </member>
    <member name="F:System.Windows.Controls.ListBox.IsSelectionActiveProperty">
      <summary>Identifies the IsSelectionActive dependency property. </summary>
      <returns>The identifier for the IsSelectionActive dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ListBox.ItemContainerStyle">
      <summary>Gets or sets the style that is used when rendering the item containers. </summary>
      <returns>The style applied to the item containers. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ListBox.ItemContainerStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ListBox.ItemContainerStyle" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ListBox.ItemContainerStyle" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ListBox.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.ListBox" /> control when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.ListBox.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" /> for the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.ListBoxAutomationPeer" /> for the <see cref="T:System.Windows.Controls.ListBox" /> object.</returns>
    </member>
    <member name="M:System.Windows.Controls.ListBox.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ListBox.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged" /> event.</summary>
      <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ListBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> event that occurs when a key is pressed while the control has focus.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ListBox.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ListBox.ScrollIntoView(System.Object)">
      <summary>Causes the object to scroll into view. </summary>
      <param name="item">The object to scroll.</param>
    </member>
    <member name="M:System.Windows.Controls.ListBox.SelectAll">
      <summary>Selects all the items in the <see cref="T:System.Windows.Controls.ListBox" />.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.Windows.Controls.ListBox.SelectionMode" /> is set to <see cref="F:System.Windows.Controls.SelectionMode.Single" /></exception>
    </member>
    <member name="P:System.Windows.Controls.ListBox.SelectedItems">
      <summary>Gets the list of currently selected items for the <see cref="T:System.Windows.Controls.ListBox" /> control.</summary>
      <returns>The list of currently selected items for the <see cref="T:System.Windows.Controls.ListBox" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.ListBox.SelectionMode">
      <summary>Gets or sets the selection behavior for the <see cref="T:System.Windows.Controls.ListBox" /> control.</summary>
      <returns>One of the <see cref="T:System.Windows.Controls.SelectionMode" /> values.</returns>
    </member>
    <member name="F:System.Windows.Controls.ListBox.SelectionModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ListBox.SelectionMode" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ListBox.SelectionMode" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.ListBoxItem">
      <summary>Represents a selectable item in a <see cref="T:System.Windows.Controls.ListBox" />. </summary>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ListBoxItem" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.ListBoxItem.IsSelected">
      <summary>Gets or sets a value that indicates whether a <see cref="T:System.Windows.Controls.ListBoxItem" /> is selected. </summary>
      <returns>true if the item is selected; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.ListBoxItem.IsSelectedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ListBoxItem.IsSelected" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ListBoxItem.IsSelected" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.ListBoxItem" /> control when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" /> for the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.ListBoxItemAutomationPeer" /> for the <see cref="T:System.Windows.Controls.ListBoxItem" />.</returns>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseEnter" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeave" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.MediaElement">
      <summary>Represents an object that contains audio, video, or both.</summary>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.#ctor">
      <summary>Instantiates a new instance of the <see cref="T:System.Windows.Controls.MediaElement" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Attributes">
      <summary>Gets the collection of attributes that corresponds to the current entry in the ASX file that <see cref="P:System.Windows.Controls.MediaElement.Source" /> is set to.</summary>
      <returns>The collection of attributes that corresponds to the current entry in the ASX file that <see cref="P:System.Windows.Controls.MediaElement.Source" /> is set to.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.AttributesProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.Attributes" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.Attributes" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.AudioStreamCount">
      <summary>Gets the number of audio streams available in the current media file. </summary>
      <returns>The number of audio streams that exist in the source media file. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.AudioStreamCountProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.AudioStreamCount" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.AudioStreamCount" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.AudioStreamIndex">
      <summary>Gets or sets the index of the audio stream that plays along with the video component. The collection of audio streams is composed at run time and represents all audio streams available within the media file. </summary>
      <returns>The index within the media file of the audio component that plays along with the video component. The index can be unspecified, in which case the value is null. The default value is null (see the "Remarks" section).</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.AudioStreamIndexProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.AudioStreamIndex" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.AudioStreamIndex" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.AutoPlay">
      <summary>Gets or sets a value that indicates whether media will begin playback automatically when the <see cref="P:System.Windows.Controls.MediaElement.Source" /> property is set. </summary>
      <returns>true if playback is automatic; otherwise, false. The default value is true.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.AutoPlayProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.AutoPlay" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.AutoPlay" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Balance">
      <summary>Gets or sets a ratio of volume across stereo speakers. </summary>
      <returns>The ratio of volume across speakers in the range between -1 and 1. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.BalanceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.Balance" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.Balance" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.BufferingProgress">
      <summary>Gets a value that indicates the current buffering progress. </summary>
      <returns>The amount of buffering that is completed for media content. The value ranges from 0 to 1. Multiply by 100 to obtain a percentage. The default value is 0.</returns>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.BufferingProgressChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.MediaElement.BufferingProgress" /> property changes.</summary>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.BufferingProgressProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.BufferingProgress" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.BufferingProgress" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.BufferingTime">
      <summary>Gets or sets the amount of time to buffer.</summary>
      <returns>The amount of time to buffer. The default value is a <see cref="T:System.TimeSpan" /> with value of 5 seconds (0:0:05).</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.BufferingTimeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.BufferingTime" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.BufferingTime" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.CanPause">
      <summary>Gets a value indicating if media can be paused if the <see cref="M:System.Windows.Controls.MediaElement.Pause" /> method is called. </summary>
      <returns>true if the media can be paused; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.CanPauseProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.CanPause" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.CanPause" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.CanSeek">
      <summary>Gets a value indicating if media can be repositioned by setting the value of the <see cref="P:System.Windows.Controls.MediaElement.Position" /> property. </summary>
      <returns>true if the media can be repositioned; otherwise, false.The default value is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.CanSeekProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.CanSeek" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.CanSeek" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.CurrentState">
      <summary>Gets the status of the <see cref="T:System.Windows.Controls.MediaElement" />. </summary>
      <returns>The current state of the <see cref="T:System.Windows.Controls.MediaElement" />. The state can be one of the following (as defined in the <see cref="T:System.Windows.Media.MediaElementState" /> enumeration): <see cref="F:System.Windows.Media.MediaElementState.Buffering" />, <see cref="F:System.Windows.Media.MediaElementState.Closed" />, <see cref="F:System.Windows.Media.MediaElementState.Opening" />, <see cref="F:System.Windows.Media.MediaElementState.Paused" />, <see cref="F:System.Windows.Media.MediaElementState.Playing" />, or <see cref="F:System.Windows.Media.MediaElementState.Stopped" />.The default value is <see cref="F:System.Windows.Media.MediaElementState.Closed" />.</returns>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.CurrentStateChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.Controls.MediaElement.CurrentState" /> property changes.</summary>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.CurrentStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.CurrentState" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.CurrentState" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.DownloadProgress">
      <summary>Gets a percentage value indicating the amount of download completed for content located on a remote server.</summary>
      <returns>A value that indicates the amount of download completed for content that is located on a remote server. The value ranges from 0 to 1. Multiply by 100 to obtain a percentage. The default value is 0.</returns>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.DownloadProgressChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.MediaElement.DownloadProgress" /> property has changed.</summary>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.DownloadProgressOffset">
      <summary>Gets the offset of the download progress. </summary>
      <returns>The offset of the download progress.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.DownloadProgressOffsetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.DownloadProgressOffset" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.DownloadProgressOffset" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.DownloadProgressProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.DownloadProgress" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.DownloadProgress" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.DroppedFramesPerSecond">
      <summary>Gets the number of frames per second being dropped by the media.</summary>
      <returns>The number of frames per second being dropped by the media.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.DroppedFramesPerSecondProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.DroppedFramesPerSecond" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.DroppedFramesPerSecond" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.IsMuted">
      <summary>Gets or sets a value indicating whether the audio is muted. </summary>
      <returns>true if audio is muted; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.IsMutedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.IsMuted" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.IsMuted" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.LicenseAcquirer">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.LicenseAcquirer" /> associated with the <see cref="T:System.Windows.Controls.MediaElement" />. The <see cref="T:System.Windows.Media.LicenseAcquirer" /> handles acquiring licenses for DRM encrypted content.</summary>
      <returns>The <see cref="T:System.Windows.Media.LicenseAcquirer" /> associated with the <see cref="T:System.Windows.Controls.MediaElement" />. The default is null.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Windows.Media.LicenseAcquirer" /> is null.</exception>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.LogReady">
      <summary>Occurs when the log is ready.</summary>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.MarkerReached">
      <summary>Occurs when a timeline marker is encountered during media playback.</summary>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Markers">
      <summary>Gets the collection of timeline markers associated with the currently loaded media file.</summary>
      <returns>The collection of timeline markers (represented as <see cref="T:System.Windows.Media.TimelineMarker" /> objects) associated with the currently loaded media file. The default value is an empty collection.</returns>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.MediaEnded">
      <summary>Occurs when the <see cref="T:System.Windows.Controls.MediaElement" />  is no longer playing audio or video.</summary>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.MediaFailed">
      <summary>Occurs when there is an error associated with the media <see cref="P:System.Windows.Controls.MediaElement.Source" />.</summary>
    </member>
    <member name="E:System.Windows.Controls.MediaElement.MediaOpened">
      <summary>Occurs when the media stream has been validated and opened, and the file headers have been read.</summary>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.NaturalDuration">
      <summary>Gets the duration of the media file currently opened.</summary>
      <returns>The natural duration of the media. The default value is <see cref="P:System.Windows.Duration.Automatic" />, which is the value held if you query this property before <see cref="E:System.Windows.Controls.MediaElement.MediaOpened" />. </returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.NaturalDurationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.NaturalDuration" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.NaturalDuration" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.NaturalVideoHeight">
      <summary>Gets the height of the video associated with the media.</summary>
      <returns>The height of the video that is associated with the media, in pixels. Audio files will return 0. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.NaturalVideoHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.NaturalVideoHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.NaturalVideoHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.NaturalVideoWidth">
      <summary>Gets the width of the video associated with the media.</summary>
      <returns>The width of the video associated with the media. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.NaturalVideoWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.NaturalVideoWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.NaturalVideoWidth" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.Pause">
      <summary>Pauses media at the current position.</summary>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.Play">
      <summary>Plays media from the current position.</summary>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Position">
      <summary>Gets or sets the current position of progress through the media's playback time.</summary>
      <returns>The amount of time since the beginning of the media. The default is a <see cref="T:System.TimeSpan" /> with value 0:0:0.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.PositionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.Position" /> dependency property.</summary>
      <returns>The identifier the <see cref="P:System.Windows.Controls.MediaElement.Position" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.RenderedFramesPerSecond">
      <summary>Gets the number of frames per second being rendered by the media.</summary>
      <returns>The number of frames per second being rendered by the media.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.RenderedFramesPerSecondProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.RenderedFramesPerSecond" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.RenderedFramesPerSecond" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.RequestLog">
      <summary>Sends a request to generate a log which will then be raised through the <see cref="E:System.Windows.Controls.MediaElement.LogReady" /> event.</summary>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.SetSource(System.IO.Stream)">
      <summary>Sets the <see cref="P:System.Windows.Controls.MediaElement.Source" /> property using the supplied stream.</summary>
      <param name="stream">A stream that contains a valid media source.</param>
      <exception cref="T:System.ArgumentNullException">The s<paramref name="tream" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.SetSource(System.Windows.Media.MediaStreamSource)">
      <summary>This sets the source of a <see cref="T:System.Windows.Controls.MediaElement" /> to a subclass of <see cref="T:System.Windows.Media.MediaStreamSource" />.</summary>
      <param name="mediaStreamSource">A subclass of <see cref="T:System.Windows.Media.MediaStreamSource" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="mediaStreamSource" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The specified <paramref name="mediaStreamSource" /> is invalid, or does not exist.</exception>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Source">
      <summary>Gets or sets a media source on the <see cref="T:System.Windows.Controls.MediaElement" />. </summary>
      <returns>A string that specifies the source of the element, as a Uniform Resource Identifier (URI). The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.Source" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.Source" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.MediaElement.Stop">
      <summary>Stops and resets media to be played from the beginning.</summary>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Stretch">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> value that describes how a <see cref="T:System.Windows.Controls.MediaElement" /> fills the destination rectangle. </summary>
      <returns>A value of the enumeration that specifies the stretch behavior for the rendered media. The default value is Uniform.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.StretchProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.Stretch" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.Stretch" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.Volume">
      <summary>Gets or sets the media's volume. </summary>
      <returns>The media's volume represented on a linear scale between 0 and 1. The default is 0.5.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.VolumeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.Volume" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.Volume" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.MultiScaleImage">
      <summary>Enables users to open a multi-resolution image, which can be zoomed in on and panned across. </summary>
    </member>
    <member name="M:System.Windows.Controls.MultiScaleImage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.MultiScaleImage" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.AllowDownloading">
      <summary>Gets or sets a value that indicates whether downloading is permitted by this <see cref="T:System.Windows.Controls.MultiScaleImage" />. </summary>
      <returns>true if downloading is permitted by this <see cref="T:System.Windows.Controls.MultiScaleImage" />. false if downloading is not permitted by this <see cref="T:System.Windows.Controls.MultiScaleImage" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.AllowDownloadingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.AllowDownloading" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.AllowDownloading" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.AspectRatio">
      <summary>Gets the aspect ratio of the image used as the source of the <see cref="T:System.Windows.Controls.MultiScaleImage" />. The aspect ratio is the width of the image divided by its height.</summary>
      <returns>The aspect ratio of the image used as the source of the <see cref="T:System.Windows.Controls.MultiScaleImage" />. The aspect ratio is the width of the image divided by its height.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.AspectRatioProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.AspectRatio" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.AspectRatio" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.BlurFactor">
      <summary>Gets or sets the extent that data is blurred while rendering.</summary>
      <returns>The extent that data is blurred while rendering. A value of 2 means that data is twice as blurry (one level lower), while a value of 0.5 means that data is sharper (one level higher). The default is 1.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.BlurFactorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.BlurFactor" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.BlurFactor" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.MultiScaleImage.ElementToLogicalPoint(System.Windows.Point)">
      <summary>Gets a point with logical coordinates (values between 0 and 1) from a point of the <see cref="T:System.Windows.Controls.MultiScaleImage" />. </summary>
      <returns>The logical point translated from the <paramref name="elementPoint" />.</returns>
      <param name="elementPoint">The point on the <see cref="T:System.Windows.Controls.MultiScaleImage" /> to translate into a point with logical coordinates (values between 0 and 1).</param>
    </member>
    <member name="E:System.Windows.Controls.MultiScaleImage.ImageFailed">
      <summary>Occurs if the download of a tile times out or fails for another reason.</summary>
    </member>
    <member name="E:System.Windows.Controls.MultiScaleImage.ImageOpenFailed">
      <summary>Occurs if the first piece of metadata used to open the image fails. If this event occurs no parts of the image will open successfully.</summary>
    </member>
    <member name="E:System.Windows.Controls.MultiScaleImage.ImageOpenSucceeded">
      <summary>Occurs when the first piece of metadata that is needed to load the rest of the tiles opens.</summary>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.IsDownloading">
      <summary>Gets a value that indicates whether the image is still downloading.</summary>
      <returns>true if the image is still downloading. false if all the needed tiles have been downloaded. If the image is moved, <see cref="P:System.Windows.Controls.MultiScaleImage.IsDownloading" /> may become true again.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.IsDownloadingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.IsDownloading" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.IsDownloading" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.IsIdle">
      <summary>Gets a value that indicates whether Deep Zoom is done downloading, decoding, blending, and animating (if springs are being used) images. </summary>
      <returns>true, if Deep Zoom is done downloading, decoding, blending, and animating (if springs are being used) images. Otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.IsIdleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.IsIdle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.IsIdle" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.MultiScaleImage.LogicalToElementPoint(System.Windows.Point)">
      <summary>Gets a point with pixel coordinates relative to the <see cref="T:System.Windows.Controls.MultiScaleImage" /> from a logical point (values between 0 and 1).</summary>
      <returns>A point with pixel coordinates relative to the <see cref="T:System.Windows.Controls.MultiScaleImage" /> translated from <paramref name="logicalPoint" />.</returns>
      <param name="logicalPoint">The logical point to translate into pixel coordinates relative to the <see cref="T:System.Windows.Controls.MultiScaleImage" />.</param>
    </member>
    <member name="E:System.Windows.Controls.MultiScaleImage.MotionFinished">
      <summary>Occurs when the zoom or pan animation ends. </summary>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.Source">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.MultiScaleTileSource" /> object that is used as the source for the <see cref="T:System.Windows.Controls.MultiScaleImage" />.</summary>
      <returns>The <see cref="T:System.Windows.Media.MultiScaleTileSource" /> object that is used as the source for the <see cref="T:System.Windows.Controls.MultiScaleImage" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.Source" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.Source" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.SubImages">
      <summary>Gets the collection of <see cref="T:System.Windows.Controls.MultiScaleSubImage" /> objects within the multiresolution image that is used by the <see cref="T:System.Windows.Controls.MultiScaleImage" />.</summary>
      <returns>The collection of <see cref="T:System.Windows.Controls.MultiScaleSubImage" /> objects within the multiresolution image that is used by the <see cref="T:System.Windows.Controls.MultiScaleImage" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.SubImagesProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.SubImages" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.SubImages" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.UseSprings">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.Controls.MultiScaleImage" /> uses spring animations.</summary>
      <returns>true if the <see cref="T:System.Windows.Controls.MultiScaleImage" /> uses spring animations; otherwise, false. The default value is true.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.UseSpringsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.UseSprings" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.UseSprings" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.MultiScaleImage.ViewportChanged">
      <summary>Occurs when the viewport (the area of the image displayed) changes. </summary>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.ViewportOrigin">
      <summary>Gets or sets the top-left corner of the area of the image to be displayed. </summary>
      <returns>The top-left corner of the rectangular area of the image to be displayed. </returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.ViewportOriginProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.ViewportOrigin" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.ViewportOrigin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleImage.ViewportWidth">
      <summary>Gets or sets the width of the area of the image displayed.</summary>
      <returns>The width of the area of the image displayed. </returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleImage.ViewportWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleImage.ViewportWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleImage.ViewportWidth" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.MultiScaleImage.ZoomAboutLogicalPoint(System.Double,System.Double,System.Double)">
      <summary>Enables a user to zoom in on a point of the <see cref="T:System.Windows.Controls.MultiScaleImage" />.</summary>
      <param name="zoomIncrementFactor">Specifies the zoom. This number is greater than 0. A value of 1 specifies that the image fit the allotted page size exactly. A number greater than 1 specifies to zoom in. If a value of 0 or less is used, failure is returned and no zoom changes are applied.  </param>
      <param name="zoomCenterLogicalX">X coordinate for the point on the <see cref="T:System.Windows.Controls.MultiScaleImage" /> that is zoomed in on. This is a logical point (between 0 and 1). </param>
      <param name="zoomCenterLogicalY">Y coordinate for the point on the <see cref="T:System.Windows.Controls.MultiScaleImage" /> that is zoomed in on. This is a logical point (between 0 and 1).</param>
    </member>
    <member name="T:System.Windows.Controls.MultiScaleSubImage">
      <summary>This class holds the properties for each sub-image within the <see cref="T:System.Windows.Controls.MultiScaleImage" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.MultiScaleSubImage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleSubImage.AspectRatio">
      <summary>Gets the aspect ratio of the image used as the source of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" />. The aspect ratio is the width of the image divided by its height.</summary>
      <returns>The aspect ratio of the image used as the source of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" />. The aspect ratio is the width of the image divided by its height.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleSubImage.AspectRatioProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleSubImage.AspectRatio" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleSubImage.AspectRatio" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleSubImage.Opacity">
      <summary>Gets or sets the degree of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" /> opacity.</summary>
      <returns>A value between 0 and 1.0 that declares the opacity, with 1.0 meaning full opacity and 0 meaning transparent. The default value is 1.0.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleSubImage.OpacityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleSubImage.Opacity" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleSubImage.Opacity" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleSubImage.ViewportOrigin">
      <summary>Gets or sets the top-left corner of the area of the image to be displayed.</summary>
      <returns>The point of the top-left corner of the rectangular area of the image to be displayed.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleSubImage.ViewportOriginProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleSubImage.ViewportOrigin" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleSubImage.ViewportOrigin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleSubImage.ViewportWidth">
      <summary>Gets or sets the width of the area of the image displayed.</summary>
      <returns>The width of the area of the image displayed. </returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleSubImage.ViewportWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleSubImage.ViewportWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleSubImage.ViewportWidth" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MultiScaleSubImage.ZIndex">
      <summary>Gets or sets a value that represents the z-order rendering behavior of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" />. Z-order determines the relative rendering order of objects (which object is on top of which other objects).</summary>
      <returns>The value that represents the z-order rendering behavior of the <see cref="T:System.Windows.Controls.MultiScaleSubImage" />. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.MultiScaleSubImage.ZIndexProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MultiScaleSubImage.ZIndex" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MultiScaleSubImage.ZIndex" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.NotifyEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.WebBrowser.ScriptNotify" /> event.</summary>
    </member>
    <member name="P:System.Windows.Controls.NotifyEventArgs.Value">
      <summary>Gets or sets the JavaScript method name that is passed to the Silverlight plug-in. </summary>
      <returns>The JavaScript method name that is passed to the Silverlight plug-in.</returns>
    </member>
    <member name="T:System.Windows.Controls.OpenFileDialog">
      <summary>Provides a dialog box that enables the user to select one or more files. </summary>
    </member>
    <member name="M:System.Windows.Controls.OpenFileDialog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.OpenFileDialog" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.OpenFileDialog.File">
      <summary>Gets a <see cref="T:System.IO.FileInfo" /> object for the selected file. If multiple files are selected, returns the first selected file.</summary>
      <returns>The selected file. If multiple files are selected, returns the first selected file.</returns>
    </member>
    <member name="P:System.Windows.Controls.OpenFileDialog.Files">
      <summary>Gets a collection of <see cref="T:System.IO.FileInfo" /> objects for the selected files.</summary>
      <returns>A collection of <see cref="T:System.IO.FileInfo" /> objects for the selected files.</returns>
    </member>
    <member name="P:System.Windows.Controls.OpenFileDialog.Filter">
      <summary>Gets or sets a filter string that specifies the file types and descriptions to display in the <see cref="T:System.Windows.Controls.OpenFileDialog" />.</summary>
      <returns>A filter string that specifies the file types and descriptions to display in the <see cref="T:System.Windows.Controls.OpenFileDialog" />. The default is <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentException">The filter string does not contain at least one vertical bar (|).</exception>
    </member>
    <member name="P:System.Windows.Controls.OpenFileDialog.FilterIndex">
      <summary>Gets or sets the index of the selected item in the <see cref="T:System.Windows.Controls.OpenFileDialog" /> filter drop-down list.</summary>
      <returns>The index of the selected item in the <see cref="T:System.Windows.Controls.OpenFileDialog" /> filter drop-down list. The default is 1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The filter index is less than 1.</exception>
    </member>
    <member name="P:System.Windows.Controls.OpenFileDialog.Multiselect">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.Controls.OpenFileDialog" /> allows users to select multiple files.</summary>
      <returns>true if multiple selections are allowed; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Windows.Controls.OpenFileDialog.ShowDialog">
      <summary>Displays an <see cref="T:System.Windows.Controls.OpenFileDialog" /> that is modal to the Web browser window.</summary>
      <returns>true if the user clicked OK; false if the user clicked Cancel or closed the dialog box.</returns>
      <exception cref="T:System.InvalidOperationException">
                Silverlight was unable to display the dialog box.</exception>
      <exception cref="T:System.Security.SecurityException">Active Scripting in Internet Explorer is disabled.-or-The call to the <see cref="M:System.Windows.Controls.OpenFileDialog.ShowDialog" /> method was not made from user-initiated code.</exception>
    </member>
    <member name="T:System.Windows.Controls.Orientation">
      <summary>Defines the different orientations that a control or layout can have.</summary>
    </member>
    <member name="F:System.Windows.Controls.Orientation.Vertical">
      <summary>The control or layout should be vertically oriented.</summary>
    </member>
    <member name="F:System.Windows.Controls.Orientation.Horizontal">
      <summary>The control or layout should be horizontally oriented.</summary>
    </member>
    <member name="T:System.Windows.Controls.Panel">
      <summary>Provides a base class for all <see cref="T:System.Windows.Controls.Panel" /> elements. Use <see cref="T:System.Windows.Controls.Panel" /> elements to position and arrange child objects in Silverlight-based applications. </summary>
    </member>
    <member name="M:System.Windows.Controls.Panel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Panel" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.Panel.Background">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.Brush" /> that is used to fill the panel. </summary>
      <returns>The brush used to fill the panel. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.Panel.BackgroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Panel.Background" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Panel.Background" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Panel.Children">
      <summary>Gets the collection of child elements of the panel. </summary>
      <returns>The collection of child objects. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Windows.Controls.Panel.IsItemsHost">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Controls.Panel" /> is a container for UI items that are generated by an <see cref="T:System.Windows.Controls.ItemsControl" />.</summary>
      <returns>true if this instance of <see cref="T:System.Windows.Controls.Panel" /> is an items host; otherwise, false. The default value is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Panel.IsItemsHostProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Panel.IsItemsHost" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Panel.IsItemsHost" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.PasswordBox">
      <summary>Represents a control for entering passwords.</summary>
    </member>
    <member name="M:System.Windows.Controls.PasswordBox.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.PasswordBox" /> class</summary>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.BaselineOffset">
      <summary>Gets a value by which each line of text is offset from a baseline.</summary>
      <returns>The amount by which each line of text is offset from the baseline, in device independent pixels. <see cref="F:System.Double.NaN" /> indicates that an optimal baseline offset is automatically calculated from the current font characteristics. The default is <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.CaretBrush">
      <summary>Gets or sets the brush that is used to render the vertical bar that indicates the insertion point.</summary>
      <returns>The brush that is used to render the vertical bar that indicates the insertion point.</returns>
    </member>
    <member name="F:System.Windows.Controls.PasswordBox.CaretBrushProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.PasswordBox.CaretBrush" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.PasswordBox.CaretBrush" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.FontSource">
      <summary>Gets or sets the font source that is applied to the password box for rendering content.</summary>
      <returns>The font source used to render content in the text box. The default is null.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value set is not a valid source.</exception>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.MaxLength">
      <summary>Gets or sets the maximum length for passwords to be handled by this <see cref="T:System.Windows.Controls.PasswordBox" />.</summary>
      <returns>An integer specifying the maximum length, in character, for passwords to be handled by this <see cref="T:System.Windows.Controls.PasswordBox" />. A value of zero (0) means no limit.The default value is 0 (no length limit).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is set to a negative value.</exception>
    </member>
    <member name="F:System.Windows.Controls.PasswordBox.MaxLengthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.PasswordBox.MaxLength" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.PasswordBox.MaxLength" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.Password">
      <summary>Gets or sets the password currently held by the <see cref="T:System.Windows.Controls.PasswordBox" />.</summary>
      <returns>A string representing the password currently held by the <see cref="T:System.Windows.Controls.PasswordBox" />.The default value is <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentNullException">The property is set to a null value.</exception>
    </member>
    <member name="E:System.Windows.Controls.PasswordBox.PasswordChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.Controls.PasswordBox.Password" /> property changes.</summary>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.PasswordChar">
      <summary>Gets or sets the masking character for the <see cref="T:System.Windows.Controls.PasswordBox" />. </summary>
      <returns>A masking character to echo when the user enters text into the <see cref="T:System.Windows.Controls.PasswordBox" />. The default value is a bullet character (●). </returns>
    </member>
    <member name="F:System.Windows.Controls.PasswordBox.PasswordCharProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.PasswordBox.PasswordChar" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.PasswordBox.PasswordChar" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Controls.PasswordBox.PasswordProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.PasswordBox.Password" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.PasswordBox.Password" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.PasswordBox.SelectAll">
      <summary>Selects all the character in the <see cref="T:System.Windows.Controls.PasswordBox" />.</summary>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.SelectionBackground">
      <summary>Gets or sets the brush used to render the background for the selected text.</summary>
      <returns>The brush that fills the background of the selected text.</returns>
    </member>
    <member name="F:System.Windows.Controls.PasswordBox.SelectionBackgroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.PasswordBox.SelectionBackground" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.PasswordBox.SelectionBackground" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.PasswordBox.SelectionForeground">
      <summary>Gets or sets the brush used for the selected text in the <see cref="T:System.Windows.Controls.PasswordBox" />.</summary>
      <returns>The brush used for the selected text in the <see cref="T:System.Windows.Controls.PasswordBox" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.PasswordBox.SelectionForegroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.PasswordBox.SelectionForeground" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.PasswordBox.SelectionForeground" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.ProgressBar">
      <summary>Represents a control that indicates the progress of an operation.</summary>
    </member>
    <member name="M:System.Windows.Controls.ProgressBar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ProgressBar" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.ProgressBar.IsIndeterminate">
      <summary>Gets or sets a value that indicates whether the progress bar reports generic progress with a repeating pattern or reports progress based on the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property. </summary>
      <returns>true if the progress bar reports generic progress with a repeating pattern; false if the progress bar reports progress based on the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.ProgressBar.IsIndeterminateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ProgressBar.IsIndeterminate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ProgressBar.IsIndeterminate" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ProgressBar.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.ProgressBar" /> control when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.ProgressBar.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.ProgressBarAutomationPeer" /> for the <see cref="T:System.Windows.Controls.ProgressBar" /> object.</returns>
    </member>
    <member name="M:System.Windows.Controls.ProgressBar.OnValueChanged(System.Double,System.Double)">
      <summary>Called when value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property changes.</summary>
      <param name="oldValue">The previous value.</param>
      <param name="newValue">The new value.</param>
    </member>
    <member name="T:System.Windows.Controls.RadioButton">
      <summary>Represents a button that allows a user to select a single option from a group of options.</summary>
    </member>
    <member name="M:System.Windows.Controls.RadioButton.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.RadioButton" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.RadioButton.GroupName">
      <summary>Gets or sets the name that specifies which <see cref="T:System.Windows.Controls.RadioButton" /> controls are mutually exclusive.</summary>
      <returns>The name that specifies which <see cref="T:System.Windows.Controls.RadioButton" /> controls are mutually exclusive. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.RadioButton.GroupNameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.RadioButton.GroupName" /> dependency property. </summary>
      <returns>The identifier for <see cref="P:System.Windows.Controls.RadioButton.GroupName" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.RadioButton.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>An <see cref="T:System.Windows.Automation.Peers.RadioButtonAutomationPeer" /> for the radio button object.</returns>
    </member>
    <member name="M:System.Windows.Controls.RadioButton.OnToggle">
      <summary>Sets the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsChecked" /> property to true.</summary>
    </member>
    <member name="T:System.Windows.Controls.RichTextBox">
      <summary>Represents a rich text editing control that supports formatted text, hyperlinks, inline images, and other rich content.</summary>
    </member>
    <member name="M:System.Windows.Controls.RichTextBox.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.RichTextBox" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.RichTextBox.AcceptsReturn">
      <summary>Gets or sets a value that determines whether the <see cref="T:System.Windows.Controls.RichTextBox" /> allows and displays the newline or return characters.</summary>
      <returns>true if the <see cref="T:System.Windows.Controls.RichTextBox" /> allows newline characters; otherwise, false. The default is false. </returns>
    </member>
    <member name="F:System.Windows.Controls.RichTextBox.AcceptsReturnProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.RichTextBox.AcceptsReturn" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.RichTextBox.AcceptsReturn" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.RichTextBox.BaselineOffset">
      <summary>Gets a value that each line of text is offset from the baseline.</summary>
      <returns>The amount that each line of text is offset from the baseline, in device independent pixels. <see cref="F:System.Double.NaN" /> indicates that an optimal baseline offset is automatically calculated from the current font characteristics. The default is <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.RichTextBox.Blocks">
      <summary>Gets the contents of the <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
      <returns>A <see cref="T:System.Windows.Documents.BlockCollection" /> that contains the contents of the <see cref="T:System.Windows.Controls.RichTextBox" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.RichTextBox.CaretBrush">
      <summary>Gets or sets the brush that is used to render the vertical bar that indicates the insertion point.</summary>
      <returns>A brush that is used to render the vertical bar that indicates the insertion point.</returns>
    </member>
    <member name="F:System.Windows.Controls.RichTextBox.CaretBrushProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.RichTextBox.CaretBrush" /> dependency property.</summary>
      <returns>Identifier for the <see cref="P:System.Windows.Controls.RichTextBox.CaretBrush" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.RichTextBox.ContentChanged">
      <summary>Occurs when the content changes in a <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
    </member>
    <member name="P:System.Windows.Controls.RichTextBox.ContentEnd">
      <summary>Gets a <see cref="T:System.Windows.Documents.TextPointer" /> that indicates the end of content in the <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
      <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> that indicates the end of content in the <see cref="T:System.Windows.Controls.RichTextBox" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.RichTextBox.ContentStart">
      <summary>Gets a <see cref="T:System.Windows.Documents.TextPointer" /> that indicates the start of content in the <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
      <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> that indicates the start of content in the <see cref="T:System.Windows.Controls.RichTextBox" />.</returns>
    </member>
    <member name="M:System.Windows.Controls.RichTextBox.GetPositionFromPoint(System.Windows.Point)">
      <summary>Returns a <see cref="T:System.Windows.Documents.TextPointer" /> that indicates the closest insertion position for the specified point.</summary>
      <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> that indicates the closest insertion position for the specified point.</returns>
      <param name="point">A <see cref="T:System.Windows.Point" /> object that specifies the insertion position to retrieve.</param>
    </member>
    <member name="P:System.Windows.Controls.RichTextBox.HorizontalScrollBarVisibility">
      <summary>Gets or sets the visibility of the horizontal scroll bar.</summary>
      <returns>The visibility of the horizontal scroll bar. The default is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Hidden" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.RichTextBox.IsReadOnly">
      <summary>Gets or sets a value that determines whether the user can change the text in the <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
      <returns>true if the <see cref="T:System.Windows.Controls.RichTextBox" /> is read-only; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.RichTextBox.IsReadOnlyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.RichTextBox.IsReadOnly" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.RichTextBox.IsReadOnly" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.RichTextBox.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.RichTextBoxAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.RichTextBoxAutomationPeer" /> for the <see cref="T:System.Windows.Controls.RichTextBox" /> object.</returns>
    </member>
    <member name="M:System.Windows.Controls.RichTextBox.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.GotFocus" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.RichTextBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.UIElement.KeyDown" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.RichTextBox.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.KeyUp" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.RichTextBox.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.LostFocus" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.RichTextBox.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.RichTextBox.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.MouseEnter" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.RichTextBox.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.MouseLeave" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.RichTextBox.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.RichTextBox.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.RichTextBox.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.MouseMove" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.RichTextBox.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.TextInput" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.RichTextBox.OnTextInputStart(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.TextInputStart" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.RichTextBox.OnTextInputUpdate(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.TextInputUpdate" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.RichTextBox.SelectAll">
      <summary>Selects the entire contents in the <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
    </member>
    <member name="P:System.Windows.Controls.RichTextBox.Selection">
      <summary>Gets the <see cref="T:System.Windows.Documents.TextSelection" /> in the <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
      <returns>A <see cref="T:System.Windows.Documents.TextSelection" /> that represents the selected text in the <see cref="T:System.Windows.Controls.RichTextBox" />.</returns>
    </member>
    <member name="E:System.Windows.Controls.RichTextBox.SelectionChanged">
      <summary>Occurs when the text selection has changed.</summary>
    </member>
    <member name="P:System.Windows.Controls.RichTextBox.TextAlignment">
      <summary>Gets or sets how the text should be aligned in the text box.</summary>
      <returns>One of the <see cref="T:System.Windows.TextAlignment" /> enumeration values. The default is Left.</returns>
    </member>
    <member name="F:System.Windows.Controls.RichTextBox.TextAlignmentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.RichTextBox.TextAlignment" /> dependency property.</summary>
      <returns>Identifier for the <see cref="P:System.Windows.Controls.RichTextBox.TextAlignment" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.RichTextBox.TextWrapping">
      <summary>Gets or sets how text wrapping occurs if a line of text extends beyond the available width of the <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
      <returns>One of the <see cref="T:System.Windows.TextWrapping" /> values. The default is <see cref="F:System.Windows.TextWrapping.NoWrap" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.RichTextBox.TextWrappingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.RichTextBox.TextWrapping" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.RichTextBox.TextWrapping" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.RichTextBox.VerticalScrollBarVisibility">
      <summary>Gets or sets the visibility of the vertical scroll bar.</summary>
      <returns>The visibility of the vertical scroll bar. The default is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Hidden" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.RichTextBox.Xaml">
      <summary>Gets or sets a XAML representation of the content in the <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
      <returns>A <see cref="T:System.String" /> object that is a XAML representation of the content in the <see cref="T:System.Windows.Controls.RichTextBox" />.</returns>
    </member>
    <member name="T:System.Windows.Controls.RowDefinition">
      <summary>Defines row-specific properties that apply to <see cref="T:System.Windows.Controls.Grid" /> elements.</summary>
    </member>
    <member name="M:System.Windows.Controls.RowDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.RowDefinition" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.RowDefinition.ActualHeight">
      <summary>Gets a value that represents the calculated height of the <see cref="T:System.Windows.Controls.RowDefinition" />.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the calculated height in pixels. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Controls.RowDefinition.Height">
      <summary>Gets the calculated height of a <see cref="T:System.Windows.Controls.RowDefinition" /> element, or sets the <see cref="T:System.Windows.GridLength" /> value of a row that is defined by the <see cref="T:System.Windows.Controls.RowDefinition" />. </summary>
      <returns>The <see cref="T:System.Windows.GridLength" /> that represents the height of the row. The default value is 1.0.</returns>
    </member>
    <member name="F:System.Windows.Controls.RowDefinition.HeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.RowDefinition.Height" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.RowDefinition.Height" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.RowDefinition.MaxHeight">
      <summary>Gets or sets a value that represents the maximum height of a <see cref="T:System.Windows.Controls.RowDefinition" />.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the maximum height. </returns>
    </member>
    <member name="F:System.Windows.Controls.RowDefinition.MaxHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.RowDefinition.MaxHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.RowDefinition.MaxHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.RowDefinition.MinHeight">
      <summary>Gets or sets a value that represents the minimum allowed height of a <see cref="T:System.Windows.Controls.RowDefinition" />. </summary>
      <returns>A <see cref="T:System.Double" /> that represents the minimum allowed height. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.RowDefinition.MinHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.RowDefinition.MinHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.RowDefinition.MinHeight" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.RowDefinitionCollection">
      <summary>Provides access to an ordered, strongly typed collection of <see cref="T:System.Windows.Controls.RowDefinition" /> objects.</summary>
    </member>
    <member name="T:System.Windows.Controls.SaveFileDialog">
      <summary>Provides a dialog box that enables the user to specify options for saving a file.</summary>
    </member>
    <member name="M:System.Windows.Controls.SaveFileDialog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.SaveFileDialog" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.SaveFileDialog.DefaultExt">
      <summary>Gets or sets the default file name extension applied to files that are saved with the <see cref="T:System.Windows.Controls.SaveFileDialog" />.</summary>
      <returns>The default file name extension applied to files that are saved with the <see cref="T:System.Windows.Controls.SaveFileDialog" />, which can optionally include the dot character (.).</returns>
    </member>
    <member name="P:System.Windows.Controls.SaveFileDialog.Filter">
      <summary>Gets or sets a filter string that specifies the files types and descriptions to display in the <see cref="T:System.Windows.Controls.SaveFileDialog" />.</summary>
      <returns>A filter string that specifies the file types and descriptions to display in the <see cref="T:System.Windows.Controls.SaveFileDialog" />. The default is <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentException">The filter string does not contain at least one vertical bar (|).</exception>
    </member>
    <member name="P:System.Windows.Controls.SaveFileDialog.FilterIndex">
      <summary>Gets or sets the index of the selected item in the Save as type drop-down list.</summary>
      <returns>The index of the selected item in the Save as type filter drop-down list. The default is 1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The filter index is less than 1.</exception>
    </member>
    <member name="M:System.Windows.Controls.SaveFileDialog.OpenFile">
      <summary>Opens the file specified by the <see cref="P:System.Windows.Controls.SaveFileDialog.SafeFileName" /> property.</summary>
      <returns>A read-write stream for the file specified by the <see cref="P:System.Windows.Controls.SaveFileDialog.SafeFileName" /> property.</returns>
      <exception cref="T:System.InvalidOperationException">No file was selected in the dialog box.</exception>
    </member>
    <member name="P:System.Windows.Controls.SaveFileDialog.SafeFileName">
      <summary>Gets the file name for the selected file associated with the <see cref="T:System.Windows.Controls.SaveFileDialog" />.</summary>
      <returns>The file name for the selected file associated with the <see cref="T:System.Windows.Controls.SaveFileDialog" />. The default is <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.Windows.Controls.SaveFileDialog.ShowDialog">
      <summary>Displays a <see cref="T:System.Windows.Controls.SaveFileDialog" /> that is modal to the Web browser window.</summary>
      <returns>true if the user clicked Save; false if the user clicked Cancel or closed the dialog box.</returns>
      <exception cref="T:System.InvalidOperationException">
                Silverlight was unable to display the dialog box due to an improperly formatted filter, an invalid filter index or other reasons.</exception>
      <exception cref="T:System.Security.SecurityException">Active Scripting in Internet Explorer is disabled.-or-The call to the <see cref="M:System.Windows.Controls.OpenFileDialog.ShowDialog" /> method was not made from user-initiated code.</exception>
    </member>
    <member name="T:System.Windows.Controls.ScrollBarVisibility">
      <summary>Specifies the visibility of a scrollbar within a <see cref="T:System.Windows.Controls.ScrollViewer" /> control.</summary>
    </member>
    <member name="F:System.Windows.Controls.ScrollBarVisibility.Disabled">
      <summary>A <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> does not appear even when the viewport cannot display all of the content. The dimension of the content is set to the corresponding dimension of the <see cref="T:System.Windows.Controls.ScrollViewer" /> parent. For a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, the width of the content is set to the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportWidth" /> of the <see cref="T:System.Windows.Controls.ScrollViewer" />. For a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, the height of the content is set to the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportHeight" /> of the <see cref="T:System.Windows.Controls.ScrollViewer" />.</summary>
    </member>
    <member name="F:System.Windows.Controls.ScrollBarVisibility.Auto">
      <summary>A <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> appears and the dimension of the <see cref="T:System.Windows.Controls.ScrollViewer" /> is applied to the content when the viewport cannot display all of the content. For a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, the width of the content is set to the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportWidth" /> of the <see cref="T:System.Windows.Controls.ScrollViewer" />. For a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, the height of the content is set to the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportHeight" /> of the <see cref="T:System.Windows.Controls.ScrollViewer" />.</summary>
    </member>
    <member name="F:System.Windows.Controls.ScrollBarVisibility.Hidden">
      <summary>A <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> does not appear even when the viewport cannot display all of the content. The dimension of the <see cref="T:System.Windows.Controls.ScrollViewer" /> is not applied to the content.</summary>
    </member>
    <member name="F:System.Windows.Controls.ScrollBarVisibility.Visible">
      <summary>A <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> always appears. The dimension of the <see cref="T:System.Windows.Controls.ScrollViewer" /> is applied to the content. For a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, the width of the content is set to the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportWidth" /> of the <see cref="T:System.Windows.Controls.ScrollViewer" />. For a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, the height of the content is set to the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportHeight" /> of the <see cref="T:System.Windows.Controls.ScrollViewer" />.</summary>
    </member>
    <member name="T:System.Windows.Controls.ScrollContentPresenter">
      <summary>Displays the content of a <see cref="T:System.Windows.Controls.ScrollViewer" /> control.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ScrollContentPresenter" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.CanHorizontallyScroll">
      <summary>Gets or sets a value that indicates whether scrolling on the horizontal axis is possible.</summary>
      <returns>true if scrolling is possible; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.CanVerticallyScroll">
      <summary>Gets or sets a value that indicates whether scrolling on the vertical axis is possible.</summary>
      <returns>true if scrolling is possible; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.ExtentHeight">
      <summary>Gets the vertical size of the extent.</summary>
      <returns>The vertical size of the extent.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.ExtentWidth">
      <summary>Gets the horizontal size of the extent.</summary>
      <returns>The horizontal size of the extent.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.HorizontalOffset">
      <summary>Gets or sets the distance the content has been scrolled horizontally.</summary>
      <returns>The distance the content has been scrolled horizontally.</returns>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.LineDown">
      <summary>Scrolls the <see cref="T:System.Windows.Controls.ScrollContentPresenter" /> content downward by one line.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.LineLeft">
      <summary>Scrolls the <see cref="T:System.Windows.Controls.ScrollContentPresenter" /> content to the left by a predetermined amount.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.LineRight">
      <summary>Scrolls the <see cref="T:System.Windows.Controls.ScrollContentPresenter" /> content to the right by a predetermined amount.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.LineUp">
      <summary>Scrolls the <see cref="T:System.Windows.Controls.ScrollContentPresenter" /> content upward by one line.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.MakeVisible(System.Windows.UIElement,System.Windows.Rect)">
      <summary>Forces content to scroll until the coordinate space of a visual object is visible.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> that represents the visible region. </returns>
      <param name="visual">A <see cref="T:System.Windows.UIElement" /> that becomes visible.</param>
      <param name="rectangle">The bounding rectangle that identifies the coordinate space to make visible.</param>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.MouseWheelDown">
      <summary>Scrolls down within content after a user clicks the wheel button on a mouse.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.MouseWheelLeft">
      <summary>Scrolls left within content after a user clicks the wheel button on a mouse.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.MouseWheelRight">
      <summary>Scrolls right within content after a user clicks the wheel button on a mouse.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.MouseWheelUp">
      <summary>Scrolls up within content after a user clicks the wheel button on a mouse.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.ScrollContentPresenter" /> when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.PageDown">
      <summary>Scrolls down within the content by one page.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.PageLeft">
      <summary>Scrolls left within the content by one page.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.PageRight">
      <summary>Scrolls right within the content by one page.</summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.PageUp">
      <summary>Scrolls up within the content by one page.</summary>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.ScrollOwner">
      <summary>Gets or sets the <see cref="T:System.Windows.Controls.ScrollViewer" /> element that controls scrolling behavior.</summary>
      <returns>The <see cref="T:System.Windows.Controls.ScrollViewer" /> element that controls scrolling behavior.</returns>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.SetHorizontalOffset(System.Double)">
      <summary>Sets the distance the content has been scrolled horizontally.</summary>
      <param name="offset">The distance the content has been scrolled horizontally.</param>
    </member>
    <member name="M:System.Windows.Controls.ScrollContentPresenter.SetVerticalOffset(System.Double)">
      <summary>Sets the distance the content has been scrolled vertically.</summary>
      <param name="offset">The distance the content has been scrolled vertically.</param>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.VerticalOffset">
      <summary>Gets or sets the distance the content has been scrolled vertically.</summary>
      <returns>The distance the content has been scrolled vertically.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.ViewportHeight">
      <summary>Gets the vertical size of the viewport.</summary>
      <returns>The vertical size of the viewport.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollContentPresenter.ViewportWidth">
      <summary>Gets the horizontal size of the viewport.</summary>
      <returns>The horizontal size of the viewport.</returns>
    </member>
    <member name="T:System.Windows.Controls.ScrollViewer">
      <summary>Represents a scrollable area that can contain other visible elements. </summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ScrollViewer" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibility">
      <summary>Gets a value that indicates whether the horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> is visible. </summary>
      <returns>A <see cref="T:System.Windows.Visibility" /> that indicates whether the horizontal scroll bar is visible. The default value is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Hidden" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibility" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibility" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibility">
      <summary>Gets a value that indicates whether the vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> is visible. </summary>
      <returns>A <see cref="T:System.Windows.Visibility" /> that indicates whether the vertical scroll bar is visible. The default value is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Visible" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibility" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibility" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ExtentHeight">
      <summary>Gets the vertical size of all the content for display in the <see cref="T:System.Windows.Controls.ScrollViewer" />.</summary>
      <returns>The vertical size of all the content for display in the <see cref="T:System.Windows.Controls.ScrollViewer" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ExtentHeightProperty">
      <summary>Identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ExtentHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ExtentHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ExtentWidth">
      <summary>Gets the horizontal size of all the content for display in the <see cref="T:System.Windows.Controls.ScrollViewer" />.</summary>
      <returns>The horizontal size of all the content for display in the <see cref="T:System.Windows.Controls.ScrollViewer" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ExtentWidthProperty">
      <summary>Identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ExtentWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ExtentWidth" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.GetHorizontalScrollBarVisibility(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibility" /> dependency property from a specified element.</summary>
      <returns>The value of the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibility" /> dependency property.</returns>
      <param name="element">The element from which the property value is read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.GetVerticalScrollBarVisibility(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibility" /> dependency property from a specified element.</summary>
      <returns>The value of the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibility" /> dependency property.</returns>
      <param name="element">The element from which the property value is read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.HorizontalOffset">
      <summary>Gets a value that contains the horizontal offset of the scrolled content. </summary>
      <returns>The horizontal offset of the scrolled content. The default value is 0.0.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.HorizontalOffsetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalOffset" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalOffset" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibility">
      <summary>Gets or sets a value that indicates whether a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> should be displayed.</summary>
      <returns>A <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> value that indicates whether a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> should be displayed. The default value is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Hidden" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibility" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibility" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.InvalidateScrollInfo">
      <summary>Called when the value of properties that describe the size and location of the scroll area change. </summary>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.ScrollViewer" /> control when a new template is applied.</summary>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ScrollableHeight">
      <summary>Gets a value that represents the vertical size of the area that can be scrolled; the difference between the width of the extent and the width of the viewport.</summary>
      <returns>The vertical size of the area that can be scrolled. This property has no default value.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ScrollableHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableHeight" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ScrollableWidth">
      <summary>Gets a value that represents the horizontal size of the area that can be scrolled; the difference between the width of the extent and the width of the viewport.. </summary>
      <returns>The horizontal size of the area that can be scrolled. This property has no default value.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ScrollableWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableWidth" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ScrollableWidth" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.ScrollToHorizontalOffset(System.Double)">
      <summary>Scrolls the content that is within the <see cref="T:System.Windows.Controls.ScrollViewer" /> to the specified horizontal offset position.</summary>
      <param name="offset">The position that the content scrolls to.</param>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.ScrollToVerticalOffset(System.Double)">
      <summary>Scrolls the content that is within the <see cref="T:System.Windows.Controls.ScrollViewer" /> to the specified vertical offset position.</summary>
      <param name="offset">The position that the content scrolls to.</param>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.SetHorizontalScrollBarVisibility(System.Windows.DependencyObject,System.Windows.Controls.ScrollBarVisibility)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibility" /> dependency property to a specified element.</summary>
      <param name="element">The element on which to set the property value.</param>
      <param name="horizontalScrollBarVisibility">The property value to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.ScrollViewer.SetVerticalScrollBarVisibility(System.Windows.DependencyObject,System.Windows.Controls.ScrollBarVisibility)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibility" /> dependency property to a specified element.</summary>
      <param name="element">The element on which to set the property value.</param>
      <param name="verticalScrollBarVisibility">The property value to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.VerticalOffset">
      <summary>Gets a value that contains the vertical offset of the scrolled content.</summary>
      <returns>The vertical offset of the scrolled content. The default value is 0.0.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.VerticalOffsetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalOffset" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalOffset" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibility">
      <summary>Gets or sets a value that indicates whether a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> should be displayed. </summary>
      <returns>A <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> value that indicates whether a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> should be displayed. The default value is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Visible" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibility" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibility" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ViewportHeight">
      <summary>Gets a value that contains the vertical size of the viewable content. </summary>
      <returns>The vertical size of the viewable content. This property has no default value.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ViewportHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportHeight" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ScrollViewer.ViewportWidth">
      <summary>Gets a value that contains the horizontal size of the viewable content.</summary>
      <returns>The horizontal size of the viewable content. The default value is 0.0.</returns>
    </member>
    <member name="F:System.Windows.Controls.ScrollViewer.ViewportWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportWidth" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ScrollViewer.ViewportWidth" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.SelectionChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.Primitives.Selector.SelectionChanged" /> event.</summary>
    </member>
    <member name="M:System.Windows.Controls.SelectionChangedEventArgs.#ctor(System.Collections.IList,System.Collections.IList)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.SelectionChangedEventArgs" /> class. </summary>
      <param name="removedItems">The items that were unselected.</param>
      <param name="addedItems">The items that were selected.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="removedItems" /> or <paramref name="addedItems" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.SelectionChangedEventArgs.AddedItems">
      <summary>Gets a list that contains the items that were selected. </summary>
      <returns>The items that were selected in this event.</returns>
    </member>
    <member name="P:System.Windows.Controls.SelectionChangedEventArgs.RemovedItems">
      <summary>Gets a list that contains the items that were unselected. </summary>
      <returns>The items that were unselected in this event.</returns>
    </member>
    <member name="T:System.Windows.Controls.SelectionChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Controls.Primitives.Selector.SelectionChanged" /> event. </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.SelectionMode">
      <summary>Defines the selection behavior for a <see cref="T:System.Windows.Controls.ListBox" />. </summary>
    </member>
    <member name="F:System.Windows.Controls.SelectionMode.Single">
      <summary>The user can select only one item at a time. </summary>
    </member>
    <member name="F:System.Windows.Controls.SelectionMode.Multiple">
      <summary>The user can select multiple items without pressing a modifier key.</summary>
    </member>
    <member name="F:System.Windows.Controls.SelectionMode.Extended">
      <summary>The user can select multiple items by pressing a modifier key.</summary>
    </member>
    <member name="T:System.Windows.Controls.Slider">
      <summary>Represents a control that lets the user select from a range of values by moving a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control along a track.</summary>
    </member>
    <member name="M:System.Windows.Controls.Slider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Slider" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.Slider.IsDirectionReversed">
      <summary>Gets or sets a value that indicates the direction of increasing value. </summary>
      <returns>true if the direction of increasing value is to the left for a horizontal slider or down for a vertical slider; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Slider.IsDirectionReversedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Slider.IsDirectionReversed" /> dependency property.</summary>
    </member>
    <member name="P:System.Windows.Controls.Slider.IsFocused">
      <summary>Gets a value indicating whether the slider control has focus.</summary>
      <returns>true if the slider control has focus; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Slider.IsFocusedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Slider.IsFocused" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Slider.IsFocused" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Slider" /> control when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.SliderAutomationPeer" /> object for use by the automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.SliderAutomationPeer" /> object for use by the slider control.</returns>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnMaximumChanged(System.Double,System.Double)">
      <summary>Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> property changes.</summary>
      <param name="oldMaximum">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> property.</param>
      <param name="newMaximum">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> property.</param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnMinimumChanged(System.Double,System.Double)">
      <summary>Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> property changes.</summary>
      <param name="oldMinimum">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> property.</param>
      <param name="newMinimum">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> property.</param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.MouseEnter" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeave" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Slider.OnValueChanged(System.Double,System.Double)">
      <summary>Updates the current position of the <see cref="T:System.Windows.Controls.Slider" /> when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property changes.</summary>
      <param name="oldValue">The old <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Slider" />.</param>
      <param name="newValue">The new <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Slider" />.</param>
    </member>
    <member name="P:System.Windows.Controls.Slider.Orientation">
      <summary>Gets or sets the orientation of a <see cref="T:System.Windows.Controls.Slider" />. </summary>
      <returns>One of the <see cref="T:System.Windows.Controls.Orientation" /> values. The default is <see cref="F:System.Windows.Controls.Orientation.Horizontal" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Slider.OrientationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Slider.Orientation" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Slider.Orientation" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.StackPanel">
      <summary>Arranges child elements into a single line that can be oriented horizontally or vertically. </summary>
    </member>
    <member name="M:System.Windows.Controls.StackPanel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.StackPanel" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.StackPanel.ArrangeOverride(System.Windows.Size)">
      <summary>Positions child elements and determines a size for the derived class. </summary>
      <returns>The actual size used.</returns>
      <param name="arrangeSize">The final area within the parent that this element should use to arrange itself and its children.</param>
    </member>
    <member name="M:System.Windows.Controls.StackPanel.MeasureOverride(System.Windows.Size)">
      <summary>Measures the size in layout required for child elements and determines a size for the derived class. </summary>
      <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
      <param name="constraint">The available size that this element can give to child elements.</param>
    </member>
    <member name="P:System.Windows.Controls.StackPanel.Orientation">
      <summary>Gets or sets the dimension by which child elements are stacked.  </summary>
      <returns>One of the enumeration values that specifies the orientation of child elements. The default is <see cref="F:System.Windows.Controls.Orientation.Vertical" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.StackPanel.OrientationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.StackPanel.Orientation" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.StackPanel.Orientation" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.StretchDirection">
      <summary>Describes the direction that content is scaled.</summary>
    </member>
    <member name="F:System.Windows.Controls.StretchDirection.UpOnly">
      <summary>The content scales upward only when it is smaller than the parent. If the content is larger, no scaling downward is performed.</summary>
    </member>
    <member name="F:System.Windows.Controls.StretchDirection.DownOnly">
      <summary>The content scales downward only when it is larger than the parent. If the content is smaller, no scaling upward is performed.</summary>
    </member>
    <member name="F:System.Windows.Controls.StretchDirection.Both">
      <summary>The content stretches to fit the parent according to the <see cref="P:System.Windows.Controls.Viewbox.Stretch" /> property.</summary>
    </member>
    <member name="T:System.Windows.Controls.TextBlock">
      <summary>Provides a lightweight control for displaying small amounts of text..</summary>
    </member>
    <member name="M:System.Windows.Controls.TextBlock.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.TextBlock" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.BaselineOffset">
      <summary>Returns a value by which each line of text is offset from a baseline.</summary>
      <returns>The amount by which each line of text is offset from the baseline, in device independent pixels. . <see cref="F:System.Double.NaN" /> indicates that an optimal baseline offset is automatically calculated from the current font characteristics. The default is <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.FontFamily">
      <summary>Gets or sets the preferred top-level font family for the text content in this element. </summary>
      <returns>A <see cref="T:System.Windows.Media.FontFamily" /> object that specifies the preferred font family, or a primary preferred font family with one or more fallback font families. For information about defaults, see the <see cref="T:System.Windows.Media.FontFamily" /> class topic.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="FontFamily" /> is null.</exception>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.FontFamilyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.FontFamily" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.FontFamily" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.FontSize">
      <summary>Gets or sets the font size for the text content in this element. </summary>
      <returns>A non-negative value that specifies the font size, measured in pixels. The default is 11.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.FontSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.FontSize" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.FontSize" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.FontSource">
      <summary>Gets or sets the font source that is applied to the text for rendering content.</summary>
      <returns>The font source that is used to render content in the text box.  The default is null.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.FontStretch">
      <summary>Gets or sets the font stretch for the text content in this element. </summary>
      <returns>The requested font stretch, which is a <see cref="T:System.Windows.FontStretch" /> that is obtained from one of the <see cref="T:System.Windows.FontStretches" /> property values. The default is <see cref="P:System.Windows.FontStretches.Normal" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.FontStretchProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.FontStretch" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.FontStretch" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.FontStyle">
      <summary>Gets or sets the font style for the content in this element. </summary>
      <returns>The requested font style, which is a <see cref="T:System.Windows.FontStyle" /> that is obtained from one of the <see cref="T:System.Windows.FontStyles" /> property values. The default is <see cref="P:System.Windows.FontStyles.Normal" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.FontStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.FontStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.FontStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.FontWeight">
      <summary>Gets or sets the top-level font weight for the <see cref="T:System.Windows.Controls.TextBlock" />.</summary>
      <returns>The requested font weight, which is a <see cref="T:System.Windows.FontWeight" /> that is obtained from one of the <see cref="T:System.Windows.FontWeights" /> property values. The default is <see cref="P:System.Windows.FontWeights.Normal" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.FontWeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.FontWeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.FontWeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.Foreground">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> to apply to the text contents of the <see cref="T:System.Windows.Controls.TextBlock" />. </summary>
      <returns>The brush used to apply to the text contents. The default is a <see cref="T:System.Windows.Media.SolidColorBrush" /> with a <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> value of <see cref="P:System.Windows.Media.Colors.Black" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.ForegroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.Foreground" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.Foreground" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.Inlines">
      <summary>Gets the collection of inline text elements within a <see cref="T:System.Windows.Controls.TextBlock" />.</summary>
      <returns>A collection that holds all inline text elements from the <see cref="T:System.Windows.Controls.TextBlock" />.The default is an empty collection.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.LineHeight">
      <summary>Gets or sets the height of each line of content. </summary>
      <returns>The height of each line in pixels. A value of <see cref="F:System.Double.NaN" /> (equivalent to an attribute value of "Auto") indicates that the line height is determined automatically from the current font characteristics. The default is <see cref="F:System.Double.NaN" />.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Controls.TextBlock.LineHeight" /> is set to a non-positive value.</exception>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.LineHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.LineHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.LineHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.LineStackingStrategy">
      <summary>Gets or sets a value that indicates how a line box is determined for each line of text in the <see cref="T:System.Windows.Controls.TextBlock" />. </summary>
      <returns>A value that indicates how a line box is determined for each line of text in the <see cref="T:System.Windows.Controls.TextBlock" />. The default is <see cref="F:System.Windows.LineStackingStrategy.MaxHeight" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.LineStackingStrategyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.LineStackingStrategy" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.LineStackingStrategy" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.Padding">
      <summary>Gets or sets a value that indicates the thickness of padding space between the boundaries of the content area and the content displayed by a <see cref="T:System.Windows.Controls.TextBlock" />.</summary>
      <returns>A <see cref="T:System.Windows.Thickness" /> structure that specifies the amount of padding to apply.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.PaddingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.Padding" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.Padding" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.Text">
      <summary>Gets or sets the text contents of a <see cref="T:System.Windows.Controls.TextBlock" />. </summary>
      <returns>A string that specifies the text contents of this <see cref="T:System.Windows.Controls.TextBlock" />. The default is an empty string.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.TextAlignment">
      <summary>Gets or sets a value that indicates the horizontal alignment of text content. </summary>
      <returns>The text alignment. The default is <see cref="F:System.Windows.TextAlignment.Left" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.TextAlignmentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.TextAlignment" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.TextAlignment" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.TextDecorations">
      <summary>Gets or sets a value that specifies the text decorations that are applied to the content in a <see cref="T:System.Windows.Controls.TextBlock" /> element. </summary>
      <returns>A <see cref="T:System.Windows.TextDecorationCollection" />, or null if no text decorations are applied.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.TextDecorationsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.TextDecorations" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBlock.TextDecorations" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.TextProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.Text" /> dependency property.</summary>
      <returns>The identifier of the <see cref="P:System.Windows.Controls.TextBlock.Text" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.TextTrimming">
      <summary>Gets or sets the text trimming behavior to employ when content overflows the content area.</summary>
      <returns>One of the <see cref="T:System.Windows.TextTrimming" /> values that specifies the text trimming behavior to employ. The default is <see cref="F:System.Windows.TextTrimming.None" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.TextTrimmingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.TextTrimming" /> dependency property.</summary>
      <returns>The identifier of the <see cref="P:System.Windows.Controls.TextBlock.TextTrimming" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBlock.TextWrapping">
      <summary>Gets or sets how the <see cref="T:System.Windows.Controls.TextBlock" /> wraps text.</summary>
      <returns>A value that indicates how the <see cref="T:System.Windows.Controls.TextBlock" /> wraps text. The default is <see cref="F:System.Windows.TextWrapping.NoWrap" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBlock.TextWrappingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBlock.TextWrapping" /> dependency property. </summary>
      <returns>The identifier of the <see cref="P:System.Windows.Controls.TextBlock.TextWrapping" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.TextBox">
      <summary>Represents a control that can be used to display single-format, multi-line text.</summary>
    </member>
    <member name="M:System.Windows.Controls.TextBox.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.TextBox" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.TextBox.AcceptsReturn">
      <summary>Gets or sets the value that determines whether the text box allows and displays the newline or return characters.</summary>
      <returns>true if the text box allows newline characters; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.AcceptsReturnProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.AcceptsReturn" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBox.AcceptsReturn" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.BaselineOffset">
      <summary>Gets a value by which each line of text is offset from a baseline.</summary>
      <returns>The amount by which each line of text is offset from the baseline, in device independent pixels. <see cref="F:System.Double.NaN" /> indicates that an optimal baseline offset is automatically calculated from the current font characteristics. The default is <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.CaretBrush">
      <summary>Gets or sets the brush that is used to render the vertical bar that indicates the insertion point.</summary>
      <returns>A brush that is used to render the vertical bar that indicates the insertion point.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.CaretBrushProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.CaretBrush" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBox.CaretBrush" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.FontSource">
      <summary>Gets or sets the font source that is applied to the <see cref="T:System.Windows.Controls.TextBox" /> for rendering content.</summary>
      <returns>The font source used to render content in the text box. The default is null.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value set is not a valid source.</exception>
    </member>
    <member name="M:System.Windows.Controls.TextBox.GetRectFromCharacterIndex(System.Int32)">
      <summary>Returns the rectangle for the leading edge of the character at the specified index.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> object that represents a rectangle for the leading edge of the character at the specified character index, or <see cref="P:System.Windows.Rect.Empty" /> if a bounding rectangle cannot be determined. </returns>
      <param name="charIndex">The zero-based character index of the character for which to retrieve the rectangle.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.GetRectFromCharacterIndex(System.Int32,System.Boolean)">
      <summary>Returns the rectangle for the leading or trailing edge of the character at the specified index.</summary>
      <returns>A rectangle for an edge of the character at the specified character index, or Empty if a bounding rectangle cannot be determined. </returns>
      <param name="charIndex">The zero-based character index of the character for which to retrieve the rectangle.</param>
      <param name="trailingEdge">true to get the trailing edge of the character; false to get the leading edge of the character.</param>
    </member>
    <member name="P:System.Windows.Controls.TextBox.HorizontalScrollBarVisibility">
      <summary>Gets or sets the visibility of the horizontal scroll bar.</summary>
      <returns>The visibility of the horizontal scroll bar. The default is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Hidden" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.InputScope">
      <summary>Gets or sets the context for input use by this <see cref="T:System.Windows.Controls.TextBox" />. </summary>
      <returns>The input scope, which modifies how input from alternative input methods is interpreted. The default value is a null reference (Nothing in Visual Basic).</returns>
      <exception cref="T:System.NotImplementedException">API is not supported by the current platform variation.</exception>
    </member>
    <member name="F:System.Windows.Controls.TextBox.InputScopeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.InputScope" /> dependency property.</summary>
      <returns>Identifier for the <see cref="P:System.Windows.Controls.TextBox.InputScope" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.IsReadOnly">
      <summary>Gets or sets the value that determines if the user can change the text in the text box.</summary>
      <returns>true if the text box is read-only; otherwise, false.  The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.IsReadOnlyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.IsReadOnly" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBox.IsReadOnly" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.MaxLength">
      <summary>Gets or sets the value that determines the maximum number of characters allowed for user input.</summary>
      <returns>The maximum number of characters allowed for user input.  The default is 0.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value set is less than 0.</exception>
      <exception cref="T:System.ArgumentNullException">The value set is null.</exception>
    </member>
    <member name="F:System.Windows.Controls.TextBox.MaxLengthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.MaxLength" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBox.MaxLength" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.TextBoxAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.TextBoxAutomationPeer" /> for the <see cref="T:System.Windows.Controls.TextBox" /> object.</returns>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Called before <see cref="E:System.Windows.UIElement.GotFocus" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Called when <see cref="E:System.Windows.UIElement.KeyDown" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Called before <see cref="E:System.Windows.UIElement.KeyUp" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Called before <see cref="E:System.Windows.UIElement.LostFocus" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Called before <see cref="E:System.Windows.UIElement.MouseEnter" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Called before <see cref="E:System.Windows.UIElement.MouseLeave" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Called before <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event occurs.</summary>
      <param name="e">The data for the event. The event data reports that the left mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Called before <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> event occurs.</summary>
      <param name="e">The data for the event. The event data reports that the left mouse button was released.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Called before <see cref="E:System.Windows.UIElement.MouseMove" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.TextInput" /> event occurs.</summary>
      <param name="e">Provides data about the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnTextInputStart(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.TextInputStart" /> event occurs.</summary>
      <param name="e">Provides data about the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.OnTextInputUpdate(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Called before the <see cref="E:System.Windows.UIElement.TextInputUpdate" /> event occurs.</summary>
      <param name="e">Provides data about the event.</param>
    </member>
    <member name="M:System.Windows.Controls.TextBox.Select(System.Int32,System.Int32)">
      <summary>Selects a range of text in the text box.</summary>
      <param name="start">The zero-based index of the first character in the selection.</param>
      <param name="length">The length of the selection, in characters.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="start" /> or <paramref name="length" /> value is negative.</exception>
    </member>
    <member name="M:System.Windows.Controls.TextBox.SelectAll">
      <summary>Selects the entire contents of the text box.</summary>
    </member>
    <member name="P:System.Windows.Controls.TextBox.SelectedText">
      <summary>Gets or sets the content of the current selection in the text box.</summary>
      <returns>The currently selected text in the text box.  If no text is selected, the value is <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentNullException">The value is set to null.</exception>
    </member>
    <member name="P:System.Windows.Controls.TextBox.SelectionBackground">
      <summary>Gets or sets the brush that fills the background of the selected text.</summary>
      <returns>The brush that fills the background of the selected text.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.SelectionBackgroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.SelectionBackground" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBox.SelectionBackground" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.TextBox.SelectionChanged">
      <summary>Occurs when the text selection has changed.</summary>
    </member>
    <member name="P:System.Windows.Controls.TextBox.SelectionForeground">
      <summary>Gets or sets the brush used for the selected text in the text box.</summary>
      <returns>The brush used for the selected text in the text box.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.SelectionForegroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.SelectionForeground" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBox.SelectionForeground" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.SelectionLength">
      <summary>Gets or sets the number of characters in the current selection in the text box.</summary>
      <returns>The number of characters in the current selection in the text box, or 0 if there is no selection.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than 0.</exception>
    </member>
    <member name="P:System.Windows.Controls.TextBox.SelectionStart">
      <summary>Gets or sets the starting position of the text selected in the text box.</summary>
      <returns>The starting position of the current selection.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than 0.</exception>
    </member>
    <member name="P:System.Windows.Controls.TextBox.Text">
      <summary>Gets or sets the text contents of the text box.</summary>
      <returns>A string containing the text contents of the text box. The default is an empty string ("").</returns>
      <exception cref="T:System.ArgumentNullException">The value is set to null.</exception>
    </member>
    <member name="P:System.Windows.Controls.TextBox.TextAlignment">
      <summary>Gets or sets how the text should be aligned in the text box.</summary>
      <returns>One of the <see cref="T:System.Windows.TextAlignment" /> enumeration values.  The default is <see cref="F:System.Windows.TextAlignment.Left" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.TextAlignmentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.TextAlignment" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBox.TextAlignment" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.TextBox.TextChanged">
      <summary>Occurs when content changes in the text box.</summary>
    </member>
    <member name="F:System.Windows.Controls.TextBox.TextProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.Text" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBox.Text" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.TextWrapping">
      <summary>Gets or sets how line breaking occurs if a line of text extends beyond the available width of the text box.</summary>
      <returns>One of the <see cref="T:System.Windows.TextWrapping" /> values. The default is <see cref="F:System.Windows.TextWrapping.NoWrap" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.TextBox.TextWrappingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.TextWrapping" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.TextBox.TextWrapping" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.VerticalScrollBarVisibility">
      <summary>Gets or sets the visibility of the vertical scroll bar.</summary>
      <returns>The visibility of the vertical scroll bar. The default is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Hidden" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.TextBox.Watermark">
      <summary>Gets or sets the content displayed as a watermark in the <see cref="T:System.Windows.Controls.TextBox" /> when it is empty.</summary>
      <returns>The content displayed as a watermark in the <see cref="T:System.Windows.Controls.TextBox" /> when it is empty.</returns>
      <exception cref="T:System.NotImplementedException">API is not supported by the current platform variation.</exception>
    </member>
    <member name="F:System.Windows.Controls.TextBox.WatermarkProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.TextBox.Watermark" /> dependency property.</summary>
      <returns>Identifier for the <see cref="P:System.Windows.Controls.TextBox.Watermark" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.TextChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.TextBox.TextChanged" /> event.</summary>
    </member>
    <member name="T:System.Windows.Controls.TextChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Controls.TextBox.TextChanged" /> event.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.ToolTip">
      <summary>Represents a control that creates a pop-up window that displays information for an element in the UI. </summary>
    </member>
    <member name="M:System.Windows.Controls.ToolTip.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ToolTip" /> class. </summary>
    </member>
    <member name="E:System.Windows.Controls.ToolTip.Closed">
      <summary>Occurs when a <see cref="T:System.Windows.Controls.ToolTip" /> is closed and is no longer visible. </summary>
    </member>
    <member name="P:System.Windows.Controls.ToolTip.HorizontalOffset">
      <summary>Gets or sets the horizontal distance between the target origin and the pop-up alignment point. </summary>
      <returns>The horizontal distance between the target origin and the pop-up alignment point. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTip.HorizontalOffsetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ToolTip.HorizontalOffset" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ToolTip.HorizontalOffset" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ToolTip.IsOpen">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.Controls.ToolTip" /> is visible.</summary>
      <returns>true if the <see cref="T:System.Windows.Controls.ToolTip" /> is visible; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTip.IsOpenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ToolTip.IsOpen" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ToolTip.IsOpen" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ToolTip.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.ToolTip" /> when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.ToolTip.OnCreateAutomationPeer">
      <summary>Returns an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>An <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the <see cref="T:System.Windows.Controls.ToolTip" /> object.</returns>
    </member>
    <member name="E:System.Windows.Controls.ToolTip.Opened">
      <summary>Occurs when a <see cref="T:System.Windows.Controls.ToolTip" /> becomes visible.</summary>
    </member>
    <member name="P:System.Windows.Controls.ToolTip.Placement">
      <summary>Gets or sets how the <see cref="T:System.Windows.Controls.ToolTip" /> should be positioned in relation to the <see cref="P:System.Windows.Controls.ToolTip.PlacementTarget" />.</summary>
      <returns>One of the <see cref="T:System.Windows.Controls.Primitives.PlacementMode" /> values. The default is <see cref="F:System.Windows.Controls.Primitives.PlacementMode.Mouse" />. </returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTip.PlacementProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ToolTip.Placement" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ToolTip.Placement" />dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ToolTip.PlacementTarget">
      <summary>Gets or sets the visual element or control that the tool tip should be positioned in relation to when opened by the <see cref="T:System.Windows.Controls.ToolTipService" />.</summary>
      <returns>The visual element or control that the tool tip should be positioned in relation to when opened by the <see cref="T:System.Windows.Controls.ToolTipService" />. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTip.PlacementTargetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ToolTip.PlacementTarget" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ToolTip.PlacementTarget" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ToolTip.VerticalOffset">
      <summary>Gets or sets the vertical distance between the target origin and the pop-up alignment point.</summary>
      <returns>The vertical distance between the target origin and the pop-up alignment point. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTip.VerticalOffsetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ToolTip.VerticalOffset" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ToolTip.VerticalOffset" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.ToolTipService">
      <summary>Represents a service that provides static methods to display a tooltip.</summary>
    </member>
    <member name="M:System.Windows.Controls.ToolTipService.GetPlacement(System.Windows.DependencyObject)">
      <summary>Gets the relative position of the specified tooltip.</summary>
      <returns>The relative position of the specified tooltip.</returns>
      <param name="element">The tooltip retrieve the position of.</param>
    </member>
    <member name="M:System.Windows.Controls.ToolTipService.GetPlacementTarget(System.Windows.DependencyObject)">
      <summary>Gets the visual element that the tooltip is positioned relative to.</summary>
      <returns>The visual element that the tooltip is positioned relative to.</returns>
      <param name="element">The tooltip to retrieve the visual element of.</param>
    </member>
    <member name="M:System.Windows.Controls.ToolTipService.GetToolTip(System.Windows.DependencyObject)">
      <summary>Gets the tooltip for an object.</summary>
      <returns>The object's tooltip value.</returns>
      <param name="element">The object from which the property value is read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.ToolTipService.Placement">
      <summary>Gets or sets the position of the tooltip in relation to its target visual element.</summary>
      <returns>The position of the tooltip in relation to its target visual element.</returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTipService.PlacementProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ToolTip.Placement" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ToolTip.Placement" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.ToolTipService.PlacementTarget">
      <summary>Gets or sets the visual element that the tooltip should be positioned in relation to.</summary>
      <returns>The visual element that the tooltip should be displayed in relation to.</returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTipService.PlacementTargetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ToolTip.PlacementTarget" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ToolTip.PlacementTarget" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.ToolTipService.SetPlacement(System.Windows.DependencyObject,System.Windows.Controls.Primitives.PlacementMode)">
      <summary>Sets the position of the specified <see cref="P:System.Windows.Controls.ToolTipService.ToolTip" /> using the specified placement mode.</summary>
      <param name="element">The tooltip to set the position of.</param>
      <param name="value">One of the <see cref="T:System.Windows.Controls.Primitives.PlacementMode" /> values that specify where the tooltip should appear relative to the control that is the placement target. </param>
    </member>
    <member name="M:System.Windows.Controls.ToolTipService.SetPlacementTarget(System.Windows.DependencyObject,System.Windows.UIElement)">
      <summary>Sets the position of the specified <see cref="P:System.Windows.Controls.ToolTipService.ToolTip" /> relative to the specified value element.</summary>
      <param name="element">The tooltip to set the position of.</param>
      <param name="value">The visual element to set the tooltip for.</param>
    </member>
    <member name="M:System.Windows.Controls.ToolTipService.SetToolTip(System.Windows.DependencyObject,System.Object)">
      <summary>Sets the tooltip for an object.</summary>
      <param name="element">The object to which the attached property is written.</param>
      <param name="value">The value to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.ToolTipService.ToolTip">
      <summary>Gets or sets a tooltip to be attached to a control.</summary>
      <returns>The tooltip to display for a control.</returns>
    </member>
    <member name="F:System.Windows.Controls.ToolTipService.ToolTipProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.ToolTipService.ToolTip" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.ToolTipService.ToolTip" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.UIElementCollection">
      <summary>Represents an ordered collection of <see cref="T:System.Windows.UIElement" /> objects.</summary>
    </member>
    <member name="T:System.Windows.Controls.UserControl">
      <summary>Provides the base class for defining a new control that encapsulates related existing controls and provides its own logic.</summary>
    </member>
    <member name="M:System.Windows.Controls.UserControl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.UserControl" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.UserControl.Content">
      <summary>Gets or sets the content that is contained within a user control.</summary>
      <returns>The content of the user control.</returns>
    </member>
    <member name="F:System.Windows.Controls.UserControl.ContentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.UserControl.Content" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.UserControl.Content" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Validation">
      <summary>Provides methods and attached properties that support data validation and govern the visual state of the control.</summary>
    </member>
    <member name="P:System.Windows.Controls.Validation.Errors">
      <summary>Gets a collection of <see cref="T:System.Windows.Controls.ValidationError" /> objects associated with the binding target element. </summary>
      <returns>A collection of <see cref="T:System.Windows.Controls.ValidationError" /> objects associated with the binding target element. </returns>
    </member>
    <member name="F:System.Windows.Controls.Validation.ErrorsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Validation.Errors" /> attached property.</summary>
    </member>
    <member name="M:System.Windows.Controls.Validation.GetErrors(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.Validation.Errors" /> attached property for the specified element.</summary>
      <returns>A collection of <see cref="T:System.Windows.Controls.ValidationError" /> objects associated with the specified element. </returns>
      <param name="element">The element to retrieve the errors for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Validation.GetHasError(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:System.Windows.Controls.Validation.HasError" /> attached property for the specified element.</summary>
      <returns>true if any binding on the specified element has a validation error; otherwise, false. </returns>
      <param name="element">The element to check for errors.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.Validation.HasError">
      <summary>Gets a value that indicates whether any binding on the target element has a validation error. </summary>
      <returns>true if any binding on the target element has a validation error; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.Controls.Validation.HasErrorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Validation.HasError" /> attached property.</summary>
    </member>
    <member name="T:System.Windows.Controls.ValidationError">
      <summary>Represents a validation error that is generated by the binding engine when an exception occurs during target-to-source updates. </summary>
    </member>
    <member name="P:System.Windows.Controls.ValidationError.ErrorContent">
      <summary>Gets the error message. </summary>
      <returns>The error message. </returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationError.Exception">
      <summary>Gets the exception that caused the validation error.</summary>
      <returns>The exception that caused the validation error.</returns>
    </member>
    <member name="T:System.Windows.Controls.ValidationErrorEventAction">
      <summary>Describes the reason a <see cref="E:System.Windows.FrameworkElement.BindingValidationError" /> event has occurred.</summary>
    </member>
    <member name="F:System.Windows.Controls.ValidationErrorEventAction.Added">
      <summary>A new <see cref="T:System.Windows.Controls.ValidationError" /> has occurred.</summary>
    </member>
    <member name="F:System.Windows.Controls.ValidationErrorEventAction.Removed">
      <summary>An existing <see cref="T:System.Windows.Controls.ValidationError" /> has been removed.</summary>
    </member>
    <member name="T:System.Windows.Controls.ValidationErrorEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.FrameworkElement.BindingValidationError" /> event.</summary>
    </member>
    <member name="P:System.Windows.Controls.ValidationErrorEventArgs.Action">
      <summary>Gets the state of the validation error.</summary>
      <returns>One of the enumeration values that indicates the state of the validation error.</returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationErrorEventArgs.Error">
      <summary>Gets the validation error that caused the <see cref="E:System.Windows.FrameworkElement.BindingValidationError" /> event.</summary>
      <returns>A <see cref="T:System.Windows.Controls.ValidationError" /> object that contains the exception that caused the validation error.</returns>
    </member>
    <member name="P:System.Windows.Controls.ValidationErrorEventArgs.Handled">
      <summary>Gets or sets the value that marks the routed event as handled.</summary>
      <returns>true if the event is handled; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Controls.Viewbox">
      <summary>Defines a content decorator that can stretch and scale a single child to fill the available space. </summary>
    </member>
    <member name="M:System.Windows.Controls.Viewbox.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Viewbox" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.Viewbox.Child">
      <summary>Gets or sets the single child element of a <see cref="T:System.Windows.Controls.Viewbox" /> element.</summary>
      <returns>The single child element of a <see cref="T:System.Windows.Controls.Viewbox" /> element.</returns>
    </member>
    <member name="P:System.Windows.Controls.Viewbox.Stretch">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Stretch" /> mode, which determines how content fits into the available space.</summary>
      <returns>A <see cref="T:System.Windows.Media.Stretch" /> mode, which determines how content fits in the available space. The default is <see cref="F:System.Windows.Media.Stretch.Uniform" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.Viewbox.StretchDirection">
      <summary>Gets or sets the <see cref="T:System.Windows.Controls.StretchDirection" />, which determines how scaling is applied to the contents of a <see cref="T:System.Windows.Controls.Viewbox" />.</summary>
      <returns>A <see cref="T:System.Windows.Controls.StretchDirection" />, which determines how scaling is applied to the contents of a <see cref="T:System.Windows.Controls.Viewbox" />. The default is <see cref="F:System.Windows.Controls.StretchDirection.Both" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Viewbox.StretchDirectionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Viewbox.StretchDirection" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Viewbox.StretchDirection" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Controls.Viewbox.StretchProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Viewbox.Stretch" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Viewbox.Stretch" /> dependency property. </returns>
    </member>
    <member name="T:System.Windows.Controls.VirtualizationMode">
      <summary>Specifies the method the <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> uses to manage virtualizing its child items.</summary>
    </member>
    <member name="F:System.Windows.Controls.VirtualizationMode.Standard">
      <summary>Create and discard the item containers.</summary>
    </member>
    <member name="F:System.Windows.Controls.VirtualizationMode.Recycling">
      <summary>Reuse the item containers.</summary>
    </member>
    <member name="T:System.Windows.Controls.VirtualizingPanel">
      <summary>Provides a framework for <see cref="T:System.Windows.Controls.Panel" /> elements that virtualize their visual children. </summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingPanel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.VirtualizingPanel" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingPanel.AddInternalChild(System.Windows.UIElement)">
      <summary>Adds the specified <see cref="T:System.Windows.UIElement" /> to the <see cref="P:System.Windows.Controls.Panel.Children" /> collection of a <see cref="T:System.Windows.Controls.VirtualizingPanel" /> element.</summary>
      <param name="child">The <see cref="T:System.Windows.UIElement" /> child to add to the collection.</param>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingPanel.BringIndexIntoView(System.Int32)">
      <summary>When implemented in a derived class, generates the item at the specified index location and makes it visible.</summary>
      <param name="index">The index position of the item that is generated and made visible.</param>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingPanel.InsertInternalChild(System.Int32,System.Windows.UIElement)">
      <summary>Adds the specified <see cref="T:System.Windows.UIElement" /> to the collection of a <see cref="T:System.Windows.Controls.VirtualizingPanel" /> element at the specified index position.</summary>
      <param name="index">The index position within the collection at which the child element is inserted.</param>
      <param name="child">The <see cref="T:System.Windows.UIElement" /> child to add to the collection.</param>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingPanel.ItemContainerGenerator">
      <summary>Gets a value that identifies the <see cref="T:System.Windows.Controls.ItemContainerGenerator" /> for this <see cref="T:System.Windows.Controls.VirtualizingPanel" />.</summary>
      <returns>The <see cref="T:System.Windows.Controls.ItemContainerGenerator" /> for this <see cref="T:System.Windows.Controls.VirtualizingPanel" />.</returns>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingPanel.OnClearChildren">
      <summary>Called when the collection of child elements is cleared by the base <see cref="T:System.Windows.Controls.Panel" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingPanel.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
      <summary>Called when the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection that is associated with the <see cref="T:System.Windows.Controls.ItemsControl" /> for this <see cref="T:System.Windows.Controls.Panel" /> changes.</summary>
      <param name="sender">The <see cref="T:System.Object" /> that raised the event.</param>
      <param name="args">Provides data for the <see cref="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged" /> event.</param>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingPanel.RemoveInternalChildRange(System.Int32,System.Int32)">
      <summary>Removes child elements from the <see cref="P:System.Windows.Controls.Panel.Children" /> collection.</summary>
      <param name="index">The beginning index position within the collection at which the first child element is removed.</param>
      <param name="range">The total number of child elements to remove from the collection.</param>
    </member>
    <member name="T:System.Windows.Controls.VirtualizingStackPanel">
      <summary>Arranges and virtualizes content on a single line that is oriented either horizontally or vertically.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.ArrangeOverride(System.Windows.Size)">
      <summary>Arranges the content of a <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> element.</summary>
      <returns>The <see cref="T:System.Windows.Size" /> that represents the arranged size of this <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> element and its child elements.</returns>
      <param name="arrangeSize">The <see cref="T:System.Windows.Size" /> that this element should use to arrange its child elements.</param>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.CanHorizontallyScroll">
      <summary>Gets or sets a value that indicates whether a <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> can scroll in the horizontal dimension.</summary>
      <returns>true if content can scroll in the horizontal dimension; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.CanVerticallyScroll">
      <summary>Gets or sets a value that indicates whether content can scroll in the vertical dimension.</summary>
      <returns>true if content can scroll in the vertical dimension; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.Controls.VirtualizingStackPanel.CleanUpVirtualizedItemEvent">
      <summary>Occurs when an item that is hosted by the <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> is re-virtualized.</summary>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.ExtentHeight">
      <summary>Gets a value that contains the vertical size of the extent.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the vertical size of the extent, in pixels. The default is 0.</returns>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.ExtentWidth">
      <summary>Gets a value that contains the horizontal size of the extent.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the horizontal size of the extent, in pixels. The default is 0.</returns>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.GetIsVirtualizing(System.Windows.DependencyObject)">
      <summary>Gets a value that determines whether the <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> is virtualizing its content.</summary>
      <returns>true if the <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> is virtualizing its content; otherwise false.</returns>
      <param name="o">The object being virtualized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.GetVirtualizationMode(System.Windows.DependencyObject)">
      <summary>Returns the <see cref="T:System.Windows.Controls.VirtualizationMode" /> for the specified object.</summary>
      <returns>One of the enumeration values that specifies whether the object uses container recycling.</returns>
      <param name="element">The object from which the <see cref="T:System.Windows.Controls.VirtualizationMode" /> is read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.HorizontalOffset">
      <summary>Gets a value that contains the horizontal offset of the scrolled content.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the horizontal offset of the scrolled content, in pixels. The default is 0.</returns>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.IsVirtualizing">
      <summary>Gets a value that indicates that this <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> is virtualizing its child collection.</summary>
      <returns>true if this instance of <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> is virtualizing its child collection; otherwise false. The default is true.</returns>
    </member>
    <member name="F:System.Windows.Controls.VirtualizingStackPanel.IsVirtualizingProperty">
      <summary>A value that indicates whether the <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> is using virtualization.</summary>
      <returns>A value that indicates whether the <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> is using virtualization.</returns>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.LineDown">
      <summary>Scrolls content downward by one logical unit.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.LineLeft">
      <summary>Scrolls content to the left by one logical unit.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.LineRight">
      <summary>Scrolls content to the right by one logical unit.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.LineUp">
      <summary>Scrolls content upward by one logical unit.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.MakeVisible(System.Windows.UIElement,System.Windows.Rect)">
      <summary>Scrolls to the specified coordinates and makes that portion of a <see cref="T:System.Windows.UIElement" /> visible.</summary>
      <returns>Rectangular area of the <see cref="T:System.Windows.UIElement" /> now visible.</returns>
      <param name="visual">The <see cref="T:System.Windows.UIElement" /> that becomes visible.</param>
      <param name="rectangle">A <see cref="T:System.Windows.Rect" /> that represents the coordinate space within a <see cref="T:System.Windows.UIElement" />.</param>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.MeasureOverride(System.Windows.Size)">
      <summary>Measures the child elements of a <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> in anticipation of arranging them during the <see cref="M:System.Windows.Controls.VirtualizingStackPanel.ArrangeOverride(System.Windows.Size)" /> pass.</summary>
      <returns>The <see cref="T:System.Windows.Size" /> that represents the desired size of the element.</returns>
      <param name="constraint">An upper limit <see cref="T:System.Windows.Size" /> that should not be exceeded.</param>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.MouseWheelDown">
      <summary>Scrolls content logically downward in response to a downward click of the mouse wheel button.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.MouseWheelLeft">
      <summary>Scrolls content logically to the left in response to a left click of the mouse wheel button.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.MouseWheelRight">
      <summary>Scrolls content logically to the right in response to a right click of the mouse wheel button.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.MouseWheelUp">
      <summary>Scrolls content logically upward in response to an upward click of the mouse wheel button.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.OnCleanUpVirtualizedItem(System.Windows.Controls.CleanUpVirtualizedItemEventArgs)">
      <summary>Called when an item that is hosted by the <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> is re-virtualized.</summary>
      <param name="e">Data about the event.</param>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.OnClearChildren">
      <summary>Called when the collection of child elements is cleared by the base <see cref="T:System.Windows.Controls.Panel" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
      <summary>Called when the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection that is associated with the <see cref="T:System.Windows.Controls.ItemsControl" /> for this <see cref="T:System.Windows.Controls.Panel" /> changes.</summary>
      <param name="sender">The <see cref="T:System.Object" /> that raised the event.</param>
      <param name="args">Provides data for the <see cref="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged" /> event.</param>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.Orientation">
      <summary>Gets or sets a value that describes the horizontal or vertical orientation of stacked content.</summary>
      <returns>Dependency property identifier field: <see cref="F:System.Windows.Controls.VirtualizingStackPanel.OrientationProperty" />The <see cref="T:System.Windows.Controls.Orientation" /> of child content. The default is <see cref="F:System.Windows.Controls.Orientation.Vertical" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.VirtualizingStackPanel.OrientationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.VirtualizingStackPanel.Orientation" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.VirtualizingStackPanel.Orientation" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.PageDown">
      <summary>Scrolls content downward by one page.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.PageLeft">
      <summary>Scrolls content to the left by one page.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.PageRight">
      <summary>Scrolls content to the right by one page.</summary>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.PageUp">
      <summary>Scrolls content upward by one page.</summary>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.ScrollOwner">
      <summary>Gets or sets a value that identifies the container that controls scrolling behavior in this <see cref="T:System.Windows.Controls.VirtualizingStackPanel" />.</summary>
      <returns>The <see cref="T:System.Windows.Controls.ScrollViewer" /> that owns scrolling for this <see cref="T:System.Windows.Controls.VirtualizingStackPanel" />.</returns>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.SetHorizontalOffset(System.Double)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.VirtualizingStackPanel.HorizontalOffset" /> property.</summary>
      <param name="offset">The value of the <see cref="P:System.Windows.Controls.VirtualizingStackPanel.HorizontalOffset" /> property.</param>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.SetVerticalOffset(System.Double)">
      <summary>Sets the value of the <see cref="P:System.Windows.Controls.VirtualizingStackPanel.VerticalOffset" /> property.</summary>
      <param name="offset">The value of the <see cref="P:System.Windows.Controls.VirtualizingStackPanel.VerticalOffset" /> property.</param>
    </member>
    <member name="M:System.Windows.Controls.VirtualizingStackPanel.SetVirtualizationMode(System.Windows.DependencyObject,System.Windows.Controls.VirtualizationMode)">
      <summary>Sets the <see cref="T:System.Windows.Controls.VirtualizationMode" /> on the specified object.</summary>
      <param name="element">The element on which to set the <see cref="T:System.Windows.Controls.VirtualizationMode" />.</param>
      <param name="value">One of the enumeration values that specifies whether <paramref name="element" /> uses container recycling.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.VerticalOffset">
      <summary>Gets a value that represents how far down the content is currently scrolled.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the vertical offset of the scrolled content, in pixels. The default is 0.</returns>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.ViewportHeight">
      <summary>Gets a value that contains the vertical size of the viewport (visible area) of the content.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the vertical size of the viewport (visible area) of the content, in pixels. The default is 0.</returns>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.ViewportWidth">
      <summary>Gets a value that contains the horizontal size of the viewport (visible area) of the content.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the vertical size of the viewport (visible area) of the content, in pixels. The default is 0.</returns>
    </member>
    <member name="P:System.Windows.Controls.VirtualizingStackPanel.VirtualizationMode">
      <summary>Specifies how a panel in an <see cref="T:System.Windows.Controls.ItemsControl" /> virtualizes its child items.</summary>
      <returns>One of the <see cref="T:System.Windows.Controls.VirtualizationMode" /> values.</returns>
    </member>
    <member name="F:System.Windows.Controls.VirtualizingStackPanel.VirtualizationModeProperty">
      <summary>The current virtualization mode of the <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> (whether it is <see cref="F:System.Windows.Controls.VirtualizationMode.Recycling" /> or not).</summary>
    </member>
    <member name="T:System.Windows.Controls.WebBrowser">
      <summary>Hosts HTML content within the Silverlight plug-in.</summary>
    </member>
    <member name="M:System.Windows.Controls.WebBrowser.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.WebBrowser" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.WebBrowser.InvokeScript(System.String)">
      <summary>Executes the specified script, which is defined in the currently loaded HTML.</summary>
      <returns>The result of the script invocation.</returns>
      <param name="scriptName">The name of the script to execute.</param>
      <exception cref="T:System.Security.SecurityException">The script target is at a cross-domain location.</exception>
    </member>
    <member name="M:System.Windows.Controls.WebBrowser.InvokeScript(System.String,System.String[])">
      <summary>Executes the specified script function, which is defined in the currently loaded HTML, with the specified arguments.</summary>
      <returns>The result of the script invocation.</returns>
      <param name="scriptName">The name of the script to execute.</param>
      <param name="args">The arguments to pass to the script function.</param>
      <exception cref="T:System.Security.SecurityException">The script target is at a cross-domain location.</exception>
    </member>
    <member name="E:System.Windows.Controls.WebBrowser.LoadCompleted">
      <summary>Occurs when top-level navigation completes and the content loads into the <see cref="T:System.Windows.Controls.WebBrowser" /> control or when an error occurs during loading.</summary>
    </member>
    <member name="M:System.Windows.Controls.WebBrowser.Navigate(System.Uri)">
      <summary>Loads the HTML content at the specified URI.</summary>
      <param name="source">The URI of the HTML content to load.</param>
      <exception cref="T:System.Security.SecurityException">The HTML content to load is from a cross-domain location.</exception>
    </member>
    <member name="M:System.Windows.Controls.WebBrowser.NavigateToString(System.String)">
      <summary>Displays the specified HTML content.</summary>
      <param name="text">The HTML content to display in the <see cref="T:System.Windows.Controls.WebBrowser" /> control.</param>
    </member>
    <member name="M:System.Windows.Controls.WebBrowser.SaveToString">
      <summary>Saves the source for the HTML content currently displayed in the <see cref="T:System.Windows.Controls.WebBrowser" /> as a string.</summary>
      <returns>The string representation of the source for the currently displayed HTML content.</returns>
      <exception cref="T:System.Security.SecurityException">The HTML content to be saved is from a cross-domain location.</exception>
    </member>
    <member name="E:System.Windows.Controls.WebBrowser.ScriptNotify">
      <summary>Occurs when the content contained in the <see cref="T:System.Windows.Controls.WebBrowser" /> control passes a string to the Silverlight plug-in by using JavaScript. </summary>
    </member>
    <member name="P:System.Windows.Controls.WebBrowser.Source">
      <summary>Gets or sets the URI source of the HTML content to display in the <see cref="T:System.Windows.Controls.WebBrowser" /> control.</summary>
      <returns>The URI source of the HTML content to display in the <see cref="T:System.Windows.Controls.WebBrowser" /> control.</returns>
    </member>
    <member name="T:System.Windows.Controls.WebBrowserBrush">
      <summary>Provides a brush that renders the currently hosted HTML.</summary>
    </member>
    <member name="M:System.Windows.Controls.WebBrowserBrush.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.WebBrowserBrush" /> class. </summary>
    </member>
    <member name="M:System.Windows.Controls.WebBrowserBrush.Redraw">
      <summary>Forces the brush to asynchronously redraw itself.</summary>
    </member>
    <member name="M:System.Windows.Controls.WebBrowserBrush.SetSource(System.Windows.Controls.WebBrowser)">
      <summary>Sets the source of the content for the <see cref="T:System.Windows.Controls.WebBrowserBrush" />.</summary>
      <param name="source">The <see cref="T:System.Windows.Controls.WebBrowser" /> hosting the HTML content that is the source for the brush.</param>
    </member>
    <member name="P:System.Windows.Controls.WebBrowserBrush.SourceName">
      <summary>Gets the name of the source <see cref="T:System.Windows.Controls.WebBrowser" /> control that provides the HTML content.</summary>
      <returns>The <see cref="P:System.Windows.FrameworkElement.Name" /> of the <see cref="T:System.Windows.Controls.WebBrowser" /> that provides the HTML content.</returns>
    </member>
    <member name="F:System.Windows.Controls.WebBrowserBrush.SourceNameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.WebBrowserBrush.SourceName" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.WebBrowserBrush.SourceName" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Control.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.Controls.Control.ManipulationCompleted" /> event occurs. This member overrides <see cref="M:System.Windows.UIElement.OnManipulationCompleted(System.Object,System.Windows.Input.ManipulationCompletedEventArgs)" />.</summary>
      <param name="e">Event data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.Controls.Control.ManipulationDelta" /> event occurs. This member overrides <see cref="M:System.Windows.UIElement.OnManipulationDelta(System.Object,System.Windows.Input.ManipulationDeltaEventArgs)" />.</summary>
      <param name="e">Event data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.Control.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.Controls.Control.ManipulationStarted" /> event occurs. This member overrides <see cref="M:System.Windows.UIElement.OnManipulationStarted(System.Object,System.Windows.Input.ManipulationStartedEventArgs)" />.</summary>
      <param name="e">Event data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.Controls.ListBoxItem.ManipulationCompleted" /> event occurs. This member overrides <see cref="M:System.Windows.UIElement.OnManipulationCompleted(System.Object,System.Windows.Input.ManipulationCompletedEventArgs)" />.</summary>
      <param name="e">Event data for the event.</param>
    </member>
    <member name="M:System.Windows.Controls.ListBoxItem.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.Controls.ListBoxItem.ManipulationStarted" /> event occurs. This member overrides <see cref="M:System.Windows.UIElement.OnManipulationStarted(System.Object,System.Windows.Input.ManipulationStartedEventArgs)" />.</summary>
      <param name="e">Event data for the event.</param>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.IsUsedForExternalVideoOnly"></member>
    <member name="F:System.Windows.Controls.MediaElement.IsUsedForExternalVideoOnlyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.IsUsedForExternalVideoOnly" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.IsUsedForExternalVideoOnly" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.MediaElement.VideoSessionHandle">
      <summary>[SECURITY CRITICAL] Gets the handle to the video session.</summary>
      <returns>The handle to the video session.</returns>
    </member>
    <member name="F:System.Windows.Controls.MediaElement.VideoSessionHandleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.MediaElement.VideoSessionHandle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.MediaElement.VideoSessionHandle" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ButtonBase">
      <summary>Represents the base class for all button controls, such as <see cref="T:System.Windows.Controls.Button" />, <see cref="T:System.Windows.Controls.Primitives.RepeatButton" />, and <see cref="T:System.Windows.Controls.HyperlinkButton" />. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> class. </summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.ButtonBase.Click">
      <summary>Occurs when a <see cref="T:System.Windows.Controls.Button" /> is clicked. </summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode">
      <summary>Gets or sets when the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event occurs.</summary>
      <returns>When the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event occurs. The default value is <see cref="F:System.Windows.Controls.ClickMode.Release" />. </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> dependency property </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ButtonBase.Command">
      <summary>Gets or sets the command to invoke when this button is pressed. </summary>
      <returns>The command to invoke when this button is pressed. The default is null.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ButtonBase.CommandParameter">
      <summary>Gets or sets the parameter to pass to the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> property.</summary>
      <returns>The parameter to pass to the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> property. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ButtonBase.CommandParameterProperty">
      <summary>Identifier for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandParameter" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandParameter" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ButtonBase.CommandProperty">
      <summary>Identifier for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ButtonBase.IsFocused">
      <summary>Gets a value that determines whether the button has focus.</summary>
      <returns>true if the control has focus; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ButtonBase.IsFocusedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsFocused" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsFocused" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ButtonBase.IsMouseOver">
      <summary>Gets a value indicating whether the mouse pointer is located over this button control.</summary>
      <returns>true to indicate the mouse pointer is over the button control, otherwise false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ButtonBase.IsMouseOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsMouseOver" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsMouseOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed">
      <summary>Gets a value that indicates whether a <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> is currently in a pressed state.</summary>
      <returns>true if the <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> is in a pressed state; otherwise false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ButtonBase.IsPressedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnClick">
      <summary>Raises the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</summary>
      <param name="e">The event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Called when the value of the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> property changes.</summary>
      <param name="e">The data for <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> event that occurs when the user presses a key while this control has focus.</summary>
      <param name="e">The event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event that occurs when the user releases a key while this control has focus.</summary>
      <param name="e">The event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</summary>
      <param name="e">The event data for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Provides handling for the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.MouseEnter" /> event that occurs when the mouse enters this control. </summary>
      <param name="e">The event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeave" /> routed event that occurs when the mouse leaves an element. </summary>
      <param name="e">The event data for the <see cref="E:System.Windows.UIElement.MouseLeave" /> event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> event that occurs when the left mouse button is pressed while the mouse pointer is over this control.</summary>
      <param name="e">The event data. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> event that occurs when the left mouse button is released while the mouse pointer is over this control. </summary>
      <param name="e">The event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.MouseMove" /> event that occurs when the mouse pointer moves while over this element.</summary>
      <param name="e">The event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DragCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.Primitives.Thumb.DragCompleted" /> event that occurs when a user completes a drag operation with the mouse of a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DragCompletedEventArgs.#ctor(System.Double,System.Double,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DragCompletedEventArgs" /> class. </summary>
      <param name="horizontalChange">The horizontal change in position of the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control, resulting from the drag operation.</param>
      <param name="verticalChange">The vertical change in position of the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control, resulting from the drag operation.</param>
      <param name="canceled">A value that indicates whether the drag operation was canceled by a call to the <see cref="M:System.Windows.Controls.Primitives.Thumb.CancelDrag" /> method.</param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragCompletedEventArgs.Canceled">
      <summary>Gets a value that indicates whether the drag operation was canceled.</summary>
      <returns>true if the drag operation was canceled; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragCompletedEventArgs.HorizontalChange">
      <summary>Gets the horizontal distance between the current mouse position and the thumb coordinates.</summary>
      <returns>The horizontal distance between the current mouse position and the thumb coordinates.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragCompletedEventArgs.VerticalChange">
      <summary>Gets the vertical distance between the current mouse position and the thumb coordinates.</summary>
      <returns>The vertical distance between the current mouse position and the thumb coordinates.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DragCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Controls.Primitives.Thumb.DragCompleted" /> event of a <see cref="T:System.Windows.Controls.Primitives.Thumb" />. </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DragDeltaEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event that occurs one or more times when a user drags a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control with the mouse..</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DragDeltaEventArgs.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DragDeltaEventArgs" /> class.</summary>
      <param name="horizontalChange">The horizontal change in the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> position since the last <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event.</param>
      <param name="verticalChange">The vertical change in the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> position since the last <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event.</param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragDeltaEventArgs.HorizontalChange">
      <summary>Gets the horizontal change in the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> position since the last <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event.</summary>
      <returns>The horizontal change in the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> position since the last <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragDeltaEventArgs.VerticalChange">
      <summary>Gets the vertical change in the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> position since the last <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event.</summary>
      <returns>The vertical change in the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> position since the last <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DragDeltaEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Controls.Primitives.Thumb.DragDelta" /> event of a <see cref="T:System.Windows.Controls.Primitives.Thumb" />. </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DragStartedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.Primitives.Thumb.DragStarted" /> event that occurs when a user drags a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control with the mouse. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DragStartedEventArgs.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DragStartedEventArgs" /> class.</summary>
      <param name="horizontalOffset">The horizontal distance between the current mouse position and the thumb coordinates.</param>
      <param name="verticalOffset">The vertical distance between the current mouse position and the thumb coordinates.</param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragStartedEventArgs.HorizontalOffset">
      <summary>Gets the horizontal distance between the current mouse position and the thumb coordinates.</summary>
      <returns>The horizontal distance between the current mouse position and the thumb coordinates.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DragStartedEventArgs.VerticalOffset">
      <summary>Gets the vertical distance between the current mouse position and the thumb coordinates.</summary>
      <returns>The vertical distance between the current mouse position and the thumb coordinates.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DragStartedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Controls.Primitives.Thumb.DragStarted" /> event of a <see cref="T:System.Windows.Controls.Primitives.Thumb" />. </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.GeneratorDirection">
      <summary>Specifies the direction in which item generation will occur. </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.GeneratorDirection.Forward">
      <summary>Specifies to generate items in a forward direction.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.GeneratorDirection.Backward">
      <summary>Specifies to generate items in a backward direction.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.GeneratorPosition">
      <summary>
        <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" /> is used to describe the position of an item that is managed by <see cref="T:System.Windows.Controls.ItemContainerGenerator" />.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.GeneratorPosition.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" /> with the specified index and offset.</summary>
      <param name="index">An <see cref="T:System.Int32" /> index that is relative to the generated (realized) items. -1 is a special value that refers to a fictitious item at the beginning or the end of the items list.</param>
      <param name="offset">An <see cref="T:System.Int32" /> offset that is relative to the ungenerated (unrealized) items near the indexed item. An offset of 0 refers to the indexed element itself, an offset 1 refers to the next ungenerated (unrealized) item, and an offset of -1 refers to the previous item.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.GeneratorPosition.Equals(System.Object)">
      <summary>Compares the specified instance and the current instance of <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" /> for value equality.</summary>
      <returns>true if <paramref name="o" /> and this instance of <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" /> have the same values.</returns>
      <param name="o">The <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" /> instance to compare.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.GeneratorPosition.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</summary>
      <returns>The hash code for this <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.GeneratorPosition.Index">
      <summary>Gets or sets the <see cref="T:System.Int32" /> index that is relative to the generated (realized) items.</summary>
      <returns>An <see cref="T:System.Int32" /> index that is relative to the generated (realized) items.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.GeneratorPosition.Offset">
      <summary>Gets or sets the <see cref="T:System.Int32" /> offset that is relative to the ungenerated (unrealized) items near the indexed item.</summary>
      <returns>An <see cref="T:System.Int32" /> offset that is relative to the ungenerated (unrealized) items near the indexed item.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.GeneratorPosition.op_Equality(System.Windows.Controls.Primitives.GeneratorPosition,System.Windows.Controls.Primitives.GeneratorPosition)">
      <summary>Compares two <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" /> objects for value equality.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="gp1">The first instance to compare.</param>
      <param name="gp2">The second instance to compare.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.GeneratorPosition.op_Inequality(System.Windows.Controls.Primitives.GeneratorPosition,System.Windows.Controls.Primitives.GeneratorPosition)">
      <summary>Compares two <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" /> objects for value inequality.</summary>
      <returns>true if the values are not equal; otherwise, false.</returns>
      <param name="gp1">The first instance to compare.</param>
      <param name="gp2">The second instance to compare.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.GeneratorPosition.ToString">
      <summary>Returns a string representation of this instance of <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</summary>
      <returns>A string representation of this instance of <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.IItemContainerGenerator">
      <summary>An interface that is implemented by classes which are responsible for generating UI content on behalf of a host.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IItemContainerGenerator.GenerateNext(System.Boolean@)">
      <summary>Returns the container element used to display the next item, and whether the container element has been newly generated (realized).</summary>
      <returns>A <see cref="T:System.Windows.DependencyObject" /> that is the container element which is used to display the next item.</returns>
      <param name="isNewlyRealized">Is true if the returned <see cref="T:System.Windows.DependencyObject" /> is newly generated (realized); otherwise, false.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IItemContainerGenerator.GeneratorPositionFromIndex(System.Int32)">
      <summary>Returns the <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" /> object that maps to the item at the specified index.</summary>
      <returns>An <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" /> object that maps to the item at the specified index.</returns>
      <param name="itemIndex">The index of desired item.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IItemContainerGenerator.GetItemContainerGeneratorForPanel(System.Windows.Controls.Panel)">
      <summary>Returns the <see cref="T:System.Windows.Controls.ItemContainerGenerator" /> appropriate for use by the specified panel. </summary>
      <returns>An <see cref="T:System.Windows.Controls.ItemContainerGenerator" /> appropriate for use by the specified panel.</returns>
      <param name="panel">The panel for which to return an appropriate <see cref="T:System.Windows.Controls.ItemContainerGenerator" />.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IItemContainerGenerator.IndexFromGeneratorPosition(System.Windows.Controls.Primitives.GeneratorPosition)">
      <summary>Returns the index that maps to the specified <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that is the index which maps to the specified <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</returns>
      <param name="position">The index of desired item.The <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />  for the desired index.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IItemContainerGenerator.PrepareItemContainer(System.Windows.DependencyObject)">
      <summary>Prepares the specified element as the container for the corresponding item.</summary>
      <param name="container">The container to prepare. Normally, <paramref name="container" /> is the result of the previous call to <see cref="M:System.Windows.Controls.Primitives.IItemContainerGenerator.GenerateNext(System.Boolean@)" />.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IItemContainerGenerator.Remove(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32)">
      <summary>Removes one or more generated (realized) items.</summary>
      <param name="position">The <see cref="T:System.Int32" /> index of the element to remove. <paramref name="position" /> must refer to a previously generated (realized) item, which means its offset must be zero.</param>
      <param name="count">The <see cref="T:System.Int32" /> number of elements to remove, starting at <paramref name="position" />.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IItemContainerGenerator.RemoveAll">
      <summary>Removes all generated (realized) items.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IItemContainerGenerator.StartAt(System.Windows.Controls.Primitives.GeneratorPosition,System.Windows.Controls.Primitives.GeneratorDirection,System.Boolean)">
      <summary>Prepares the generator to generate items, starting at the specified <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />, and in the specified <see cref="T:System.Windows.Controls.Primitives.GeneratorDirection" />, and controlling whether or not to start at a generated (realized) item.</summary>
      <returns>An <see cref="T:System.IDisposable" /> object that tracks the lifetime of the generation process.</returns>
      <param name="position">A <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />, that specifies the position of the item to start generating items at.</param>
      <param name="direction">Specifies the position of the item to start generating items at.</param>
      <param name="allowStartAtRealizedItem">A <see cref="T:System.Boolean" /> that specifies whether to start at a generated (realized) item.</param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.IRecyclingItemContainerGenerator">
      <summary>Extends the <see cref="T:System.Windows.Controls.Primitives.IItemContainerGenerator" /> interface to reuse the UI content it generates. Classes that are responsible for generating user interface (UI) content on behalf of a host implement this interface.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IRecyclingItemContainerGenerator.Recycle(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32)">
      <summary>Disassociates item containers from their data items and saves the containers so they can be reused later for other data items.</summary>
      <param name="position">The zero-based index of the first element to reuse. <paramref name="position" /> must refer to a previously generated (realized) item.</param>
      <param name="count">The number of elements to reuse, starting at <paramref name="position" />.</param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.IScrollInfo">
      <summary>Represents the main scrollable region inside a <see cref="T:System.Windows.Controls.ScrollViewer" /> control.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.IScrollInfo.CanHorizontallyScroll">
      <summary>Gets or sets a value that indicates whether scrolling on the horizontal axis is possible.</summary>
      <returns>true if scrolling is possible; otherwise false. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.IScrollInfo.CanVerticallyScroll">
      <summary>Gets or sets a value that indicates whether scrolling on the vertical axis is possible.</summary>
      <returns>true if scrolling is possible; otherwise false. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.IScrollInfo.ExtentHeight">
      <summary>Gets the vertical size of the extent.</summary>
      <returns>A <see cref="T:System.Double" /> that represents, in device independent pixels, the vertical size of the extent. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.IScrollInfo.ExtentWidth">
      <summary>Gets the horizontal size of the extent.</summary>
      <returns>A <see cref="T:System.Double" /> that represents, in device independent pixels, the horizontal size of the extent. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.IScrollInfo.HorizontalOffset">
      <summary>Gets the horizontal offset of the scrolled content.</summary>
      <returns>A <see cref="T:System.Double" /> that represents, in device independent pixels, the horizontal offset. Valid values are between zero and the <see cref="P:System.Windows.Controls.Primitives.IScrollInfo.ExtentWidth" /> minus the <see cref="P:System.Windows.Controls.Primitives.IScrollInfo.ViewportWidth" />. This property has no default value.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.LineDown">
      <summary>Scrolls down within the content by one logical unit.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.LineLeft">
      <summary>Scrolls left within the content by one logical unit.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.LineRight">
      <summary>Scrolls right within the content by one logical unit.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.LineUp">
      <summary>Scrolls up within the content by one logical unit.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.MakeVisible(System.Windows.UIElement,System.Windows.Rect)">
      <summary>Forces content to scroll until the coordinate space of a visual object is visible.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> that is visible.</returns>
      <param name="visual">A <see cref="T:System.Windows.UIElement" /> that becomes visible.</param>
      <param name="rectangle">A bounding rectangle that identifies the coordinate space to make visible.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.MouseWheelDown">
      <summary>Scrolls down within the content after the user clicks the wheel button on a mouse.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.MouseWheelLeft">
      <summary>Scrolls left within the content after the user clicks the wheel button on a mouse.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.MouseWheelRight">
      <summary>Scrolls right within the content after the user clicks the wheel button on a mouse.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.MouseWheelUp">
      <summary>Scrolls up within the content after the user clicks the wheel button on a mouse.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.PageDown">
      <summary>Scrolls down within the content by one page.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.PageLeft">
      <summary>Scrolls left within the content by one page.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.PageRight">
      <summary>Scrolls right within the content by one page.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.PageUp">
      <summary>Scrolls up within the content by one page.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.IScrollInfo.ScrollOwner">
      <summary>Gets or sets a <see cref="T:System.Windows.Controls.ScrollViewer" /> element that controls scrolling behavior.</summary>
      <returns>A <see cref="T:System.Windows.Controls.ScrollViewer" /> element that controls scrolling behavior. This property has no default value.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.SetHorizontalOffset(System.Double)">
      <summary>Sets the amount of horizontal offset.</summary>
      <param name="offset">The amount that content is horizontally offset from the containing viewport.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.IScrollInfo.SetVerticalOffset(System.Double)">
      <summary>Sets the amount of vertical offset.</summary>
      <param name="offset">The amount that content is vertically offset from the containing viewport.</param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.IScrollInfo.VerticalOffset">
      <summary>Gets the vertical offset of the scrolled content.</summary>
      <returns>A <see cref="T:System.Double" /> that represents, in device independent pixels, the vertical offset of the scrolled content. Valid values are between zero and the <see cref="P:System.Windows.Controls.Primitives.IScrollInfo.ExtentHeight" /> minus the <see cref="P:System.Windows.Controls.Primitives.IScrollInfo.ViewportHeight" />. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.IScrollInfo.ViewportHeight">
      <summary>Gets the vertical size of the viewport for this content.</summary>
      <returns>A <see cref="T:System.Double" /> that represents, in device independent pixels, the vertical size of the viewport for this content. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.IScrollInfo.ViewportWidth">
      <summary>Gets the horizontal size of the viewport for this content.</summary>
      <returns>A <see cref="T:System.Double" /> that represents, in device independent pixels, the horizontal size of the viewport for this content. This property has no default value.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ItemsChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged" /> event.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ItemsChangedEventArgs.Action">
      <summary>Gets the action that occurred on the items collection.</summary>
      <returns>Returns the action that occurred.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ItemsChangedEventArgs.ItemCount">
      <summary>Gets the number of items that were involved in the change.</summary>
      <returns>Integer that represents the number of items involved in the change.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ItemsChangedEventArgs.ItemUICount">
      <summary>Gets the number of UI elements involved in the change.</summary>
      <returns>Integer that represents the number of UI elements involved in the change.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ItemsChangedEventArgs.OldPosition">
      <summary>Gets the position in the collection before the change occurred.</summary>
      <returns>Returns a <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ItemsChangedEventArgs.Position">
      <summary>Gets the position in the collection where the change occurred.</summary>
      <returns>Returns a <see cref="T:System.Windows.Controls.Primitives.GeneratorPosition" />.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ItemsChangedEventHandler">
      <summary>Represents the method that will handle the  <see cref="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged" /> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.LayoutInformation">
      <summary>Defines methods that provide additional information about the layout of an element.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.LayoutInformation.GetLayoutClip(System.Windows.FrameworkElement)">
      <summary>Returns the visible region of the specified element.</summary>
      <returns>The visible region of the clipped element, or null if the element was not clipped during layout.</returns>
      <param name="element">The element whose layout clip geometry is desired.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.LayoutInformation.GetLayoutExceptionElement(System.Windows.Threading.Dispatcher)">
      <summary>Returns the element that was being processed by the layout system at the moment of an unhandled exception.</summary>
      <returns>The element being processed at the time of an unhandled exception.</returns>
      <param name="dispatcher">The <see cref="T:System.Windows.Threading.Dispatcher" /> object that defines the scope of the operation.  There is one dispatcher per layout engine instance.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.LayoutInformation.GetLayoutSlot(System.Windows.FrameworkElement)">
      <summary>Returns the layout slot, or bounding box, that contains the specified element.</summary>
      <returns>The area assigned to the element for layout.</returns>
      <param name="element">The element whose layout slot is desired.</param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.PlacementMode">
      <summary>Specifies the preferred location for positioning a <see cref="T:System.Windows.Controls.ToolTip" /> relative to a visual element.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.PlacementMode.Bottom">
      <summary>Indicates that the preferred location of the tooltip is at the bottom of the target element. </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.PlacementMode.Right">
      <summary>Indicates that the preferred location of the tooltip is at the right of the target element.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.PlacementMode.Mouse">
      <summary>Indicates that the preferred location of the tooltip is at the mouse pointer location.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.PlacementMode.Left">
      <summary>Indicates that the preferred location of the tooltip is at the left of the target element.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.PlacementMode.Top">
      <summary>Indicates that the preferred location of the tooltip is at the top of the target element.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.Popup">
      <summary>Displays content on top of existing Silverlight content, within the bounds of the Silverlight control.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Popup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.Popup" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Popup.Child">
      <summary>Gets or sets the content to be hosted in the popup. </summary>
      <returns>The content to be hosted in the popup.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Popup.ChildProperty">
      <summary>Gets the identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.Child" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.Child" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.Primitives.Popup.Closed">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" /> property is set to false.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Popup.HorizontalOffset">
      <summary>Gets or sets the distance between the left side of the Silverlight control and the left side of the popup. </summary>
      <returns>The distance, in pixels, between the left side of the Silverlight control and the left side of the popup.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Popup.HorizontalOffsetProperty">
      <summary>Gets the identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.HorizontalOffset" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.HorizontalOffset" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Popup.IsOpen">
      <summary>Gets or sets whether the popup is currently displaying on the screen.</summary>
      <returns>true if the popup is currently displaying; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Popup.IsOpenProperty">
      <summary>Gets the identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.Primitives.Popup.Opened">
      <summary>Occurs when the <see cref="P:System.Windows.Controls.Primitives.Popup.IsOpen" /> property is set to true.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Popup.VerticalOffset">
      <summary>Gets or sets the distance between the top of the Silverlight control and the top of the popup. </summary>
      <returns>The distance, in pixels, from the top of the Silverlight control and the top of the popup.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty">
      <summary>Gets the identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.VerticalOffset" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.Popup.VerticalOffset" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.RangeBase">
      <summary>Represents an element that has a value within a specific range, such as the <see cref="T:System.Windows.Controls.ProgressBar" />, <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />, and <see cref="T:System.Windows.Controls.Slider" /> controls.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RangeBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> class. </summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RangeBase.LargeChange">
      <summary>Gets or sets a value to be added to or subtracted from the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of a <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> control. </summary>
      <returns>
        <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> to add to or subtract from the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> element. The default is 1. </returns>
      <exception cref="T:System.ArgumentException">The new value is <see cref="F:System.Double.NaN" />, less than zero, or <see cref="M:System.Double.IsInfinity(System.Double)" /> is true.</exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RangeBase.LargeChangeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RangeBase.Maximum">
      <summary>Gets or sets the highest possible <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the range element. </summary>
      <returns>The highest possible <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the range element. The default is 1.</returns>
      <exception cref="T:System.ArgumentException">The new value is either <see cref="F:System.Double.NaN" /> or <see cref="M:System.Double.IsInfinity(System.Double)" /> is true.</exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RangeBase.MaximumProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RangeBase.Minimum">
      <summary>Gets or sets the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> possible <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the range element. </summary>
      <returns>
        <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> possible <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the range element. The default is 0.</returns>
      <exception cref="T:System.ArgumentException">The new value is either <see cref="F:System.Double.NaN" /> or <see cref="M:System.Double.IsInfinity(System.Double)" /> is true.</exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RangeBase.MinimumProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RangeBase.OnMaximumChanged(System.Double,System.Double)">
      <summary>Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> property changes. </summary>
      <param name="oldMaximum">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> property.</param>
      <param name="newMaximum">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum" /> property.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RangeBase.OnMinimumChanged(System.Double,System.Double)">
      <summary>Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> property changes. </summary>
      <param name="oldMinimum">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> property.</param>
      <param name="newMinimum">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> property.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RangeBase.OnValueChanged(System.Double,System.Double)">
      <summary>Raises the <see cref="E:System.Windows.Controls.Primitives.RangeBase.ValueChanged" /> routed event. </summary>
      <param name="oldValue">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property.</param>
      <param name="newValue">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> property.</param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RangeBase.SmallChange">
      <summary>Gets or sets a <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> to be added to or subtracted from the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of a <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> control. </summary>
      <returns>
        <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> to add to or subtract from the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> element. The default is 0.1. </returns>
      <exception cref="T:System.ArgumentException">The new value is <see cref="F:System.Double.NaN" />, less than zero, or <see cref="M:System.Double.IsInfinity(System.Double)" /> is true.</exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RangeBase.SmallChangeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RangeBase.ToString">
      <summary>Provides a string representation of a <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> object. </summary>
      <returns>Returns the string representation of a <see cref="T:System.Windows.Controls.Primitives.RangeBase" /> object.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RangeBase.Value">
      <summary>Gets or sets the current setting of the range control, which may be coerced. </summary>
      <returns>The current setting of the range control, which may be coerced. The default is 0.</returns>
      <exception cref="T:System.ArgumentException">The new value is either <see cref="F:System.Double.NaN" /> or <see cref="M:System.Double.IsInfinity(System.Double)" /> is true.</exception>
    </member>
    <member name="E:System.Windows.Controls.Primitives.RangeBase.ValueChanged">
      <summary>Occurs when the range value changes. </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RangeBase.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.RepeatButton">
      <summary>Represents a control that raises its <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event repeatedly from the time it is pressed until it is released.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RepeatButton.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> class.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RepeatButton.Delay">
      <summary>Gets or sets the time, in milliseconds, the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> waits when it is pressed before it starts repeating the click action.</summary>
      <returns>The time, in milliseconds, the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> waits when it is pressed before it starts repeating the click action. The default is 250.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Controls.Primitives.RepeatButton.Delay" /> is set to a value less than 0.</exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RepeatButton.DelayProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.RepeatButton.Delay" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.RepeatButton.Delay" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.RepeatButton.Interval">
      <summary>Gets or sets the time, in milliseconds, between repetitions of the click action, as soon as repeating starts.</summary>
      <returns>The time, in milliseconds, between repetitions of the click action, as soon as repeating starts. The default is 250.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Controls.Primitives.RepeatButton.Interval" /> is set to a value less than 0.</exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.RepeatButton.IntervalProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.RepeatButton.Interval" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.RepeatButton.Interval" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.RepeatButton.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.RepeatButton" /> control when a new template is applied.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ScrollBar">
      <summary>Represents a control that provides a scroll bar that has a sliding <see cref="T:System.Windows.Controls.Primitives.Thumb" /> whose position corresponds to a value.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ScrollBar.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ScrollBar.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> control when a new template is applied.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ScrollBar.Orientation">
      <summary>Gets or sets whether the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> is displayed horizontally or vertically. </summary>
      <returns>An <see cref="T:System.Windows.Controls.Orientation" /> enumeration value that defines whether the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> is displayed horizontally or vertically. The default is <see cref="F:System.Windows.Controls.Orientation.Horizontal" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollBar.OrientationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.ScrollBar.Orientation" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.ScrollBar.Orientation" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.Primitives.ScrollBar.Scroll">
      <summary>Occurs one or more times as content scrolls in a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> when the user moves the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> by using the mouse.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ScrollBar.ViewportSize">
      <summary>Gets or sets the amount of the scrollable content that is currently visible. </summary>
      <returns>The amount of the scrollable content that is currently visible. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollBar.ViewportSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.ScrollBar.ViewportSize" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.ScrollBar.ViewportSize" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ScrollEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.Primitives.ScrollBar.Scroll" /> event. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ScrollEventArgs.#ctor(System.Windows.Controls.Primitives.ScrollEventType,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.ScrollEventArgs" /> class. </summary>
      <param name="scrollEventType">A <see cref="T:System.Windows.Controls.Primitives.ScrollEventType" /> describing the event.</param>
      <param name="newValue">The new <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ScrollEventArgs.NewValue">
      <summary>Gets the new <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
      <returns>The <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value" /> of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> after the event.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ScrollEventArgs.ScrollEventType">
      <summary>Gets a <see cref="T:System.Windows.Controls.Primitives.ScrollEventType" /> describing the event.</summary>
      <returns>A <see cref="T:System.Windows.Controls.Primitives.ScrollEventType" /> describing the event.</returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ScrollEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Controls.Primitives.ScrollBar.Scroll" /> event of a <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">A <see cref="T:System.Windows.Controls.Primitives.ScrollEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ScrollEventType">
      <summary>Specifies the type of <see cref="E:System.Windows.Controls.Primitives.ScrollBar.Scroll" /> event that occurred. </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.EndScroll">
      <summary>Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> was dragged to a new position and is now no longer being dragged by the user.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.First">
      <summary>Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> position of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />. </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.LargeDecrement">
      <summary>Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved a specified distance, as determined by the value of <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" />. The <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to the left for a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> or upward for a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />. </summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.LargeIncrement">
      <summary>Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved a specified distance, as determined by the value of <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange" />. The <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to the right for a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> or downward for a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.Last">
      <summary>Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum" /> position of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.SmallDecrement">
      <summary>Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved a specified distance, as determined by the value of <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" />. The <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to the left for a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> or upward for a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.SmallIncrement">
      <summary>Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved a specified distance, as determined by the value of <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange" />. The <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to the right for a horizontal <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> or downward for a vertical <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.ThumbPosition">
      <summary>Specifies that the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> moved to a new position because the user selected Scroll Here in the shortcut menu of the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ScrollEventType.ThumbTrack">
      <summary>The <see cref="T:System.Windows.Controls.Primitives.Thumb" /> was dragged and caused a <see cref="E:System.Windows.UIElement.MouseMove" /> event. A <see cref="E:System.Windows.Controls.Primitives.ScrollBar.Scroll" /> event of this <see cref="T:System.Windows.Controls.Primitives.ScrollEventType" /> may occur more than one time when the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> is dragged in the <see cref="T:System.Windows.Controls.Primitives.ScrollBar" />.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.Selector">
      <summary>Represents a control that allows a user to select an item from a collection of items.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Selector.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>Removes any bindings and templates applied to the item container for the specified content.</summary>
      <param name="element">The combo box item used to display the specified content.</param>
      <param name="item">The item content.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Selector.GetIsSelectionActive(System.Windows.DependencyObject)">
      <summary>Gets a value that indicates whether the specified <see cref="T:System.Windows.Controls.Primitives.Selector" /> has the focus.</summary>
      <returns>true to indicate that the <see cref="T:System.Windows.Controls.Primitives.Selector" /> has the focus; otherwise, false. </returns>
      <param name="element">The <see cref="T:System.Windows.Controls.Primitives.Selector" /> to evaluate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Selector.IsSynchronizedWithCurrentItem">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.Controls.Primitives.Selector" /> should keep the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedItem" /> synchronized with the current item in the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> property.</summary>
      <returns>true if the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedItem" /> is always synchronized with the current item; false if the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedItem" /> is never synchronized with the current item; null if the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedItem" /> is synchronized with the current item only if the <see cref="T:System.Windows.Controls.Primitives.Selector" /> uses a <see cref="T:System.ComponentModel.ICollectionView" />. The default is null.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Controls.Primitives.Selector.IsSynchronizedWithCurrentItem" /> is set to true.</exception>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Selector.IsSynchronizedWithCurrentItemProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.Selector.IsSynchronizedWithCurrentItem" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.Selector.IsSynchronizedWithCurrentItem" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Selector.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.Selector" /> control when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Selector.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Updates the current selected item when the <see cref="P:System.Windows.Controls.ItemsControl.Items" /> collection has changed.</summary>
      <param name="e">Contains data about changes in the items collection.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Selector.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>Prepares the specified element to display the specified item.</summary>
      <param name="element">The element used to display the specified item.</param>
      <param name="item">The item to display</param>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Selector.SelectedIndex">
      <summary>Gets or sets the index of the selected item.</summary>
      <returns>The index of the selected item. The default is -1.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Selector.SelectedIndexProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedIndex" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedIndex" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Selector.SelectedItem">
      <summary>Gets or sets the selected item.</summary>
      <returns>The selected item. The default is null. </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Selector.SelectedItemProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedItem" /> dependency property.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Selector.SelectedValue">
      <summary>Gets or sets the value of the selected item, obtained by using the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedValuePath" />.</summary>
      <returns>The value of the selected item, obtained by using the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedValuePath" />, or null if no item is selected. The default value is null.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Selector.SelectedValuePath">
      <summary>Gets or sets the property path that is used to get the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedValue" /> property of the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedItem" /> property. </summary>
      <returns>The property path that is used to get the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedValue" /> property of the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedItem" /> property. The default is <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Selector.SelectedValuePathProperty">
      <summary>Gets the identifier for the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedValuePath" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedValuePath" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Selector.SelectedValueProperty">
      <summary>Gets the identifier for the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedValue" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedValue" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Controls.Primitives.Selector.SelectionChanged">
      <summary>Occurs when the currently selected item changes.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Selector.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary>Signals the object that initialization is starting.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Selector.System#ComponentModel#ISupportInitialize#EndInit">
      <summary>Signals the object that initialization is complete.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.Thumb">
      <summary>Represents a control that can be dragged by the user.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Thumb.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> class.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Thumb.CancelDrag">
      <summary>Cancels a drag operation for the <see cref="T:System.Windows.Controls.Primitives.Thumb" />.</summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.Thumb.DragCompleted">
      <summary>Occurs when the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control loses mouse capture.</summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.Thumb.DragDelta">
      <summary>Occurs one or more times as the mouse pointer is moved when a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control has logical focus and mouse capture. </summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.Thumb.DragStarted">
      <summary>Occurs when a <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control receives logical focus and mouse capture.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Thumb.IsDragging">
      <summary>Gets whether the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control has focus and mouse capture.</summary>
      <returns>true if the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control has focus and mouse capture; otherwise false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Thumb.IsDraggingProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.Thumb.IsDragging" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.Thumb.IsDragging" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.Thumb.IsFocused">
      <summary>Gets whether the thumb has focus.</summary>
      <returns>true to indicate the thumb has focus; otherwise false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.Thumb.IsFocusedProperty">
      <summary>Gets the identifier for the <see cref="P:System.Windows.Controls.Primitives.Thumb.IsFocused" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.Thumb.IsFocused" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.Thumb.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.Thumb" /> control when a new template is applied.</summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.ToggleButton">
      <summary>Base class for controls that can switch states, such as <see cref="T:System.Windows.Controls.CheckBox" /> and <see cref="T:System.Windows.Controls.RadioButton" />. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> class. </summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.ToggleButton.Checked">
      <summary>Occurs when a <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is checked.</summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.ToggleButton.Indeterminate">
      <summary>Occurs when the state of a <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is switched to the indeterminate state.</summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ToggleButton.IsChecked">
      <summary>Gets or sets whether the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is checked.</summary>
      <returns>true if the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is checked; false if the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is unchecked; otherwise null. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ToggleButton.IsCheckedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsChecked" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsChecked" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.ToggleButton.IsThreeState">
      <summary>Gets or sets whether the control supports two or three states.</summary>
      <returns>true if the control supports three states; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.ToggleButton.IsThreeStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsThreeState" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsThreeState" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.OnApplyTemplate">
      <summary>Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> when a new template is applied.</summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.OnClick">
      <summary>Called when the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is clicked by the mouse or the keyboard. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.OnContentChanged(System.Object,System.Object)">
      <summary>Called when the <see cref="T:System.Windows.Controls.ContentControl" /> property changes.</summary>
      <param name="oldContent">The content to be replaced.</param>
      <param name="newContent">The new content to display.</param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" /> for use by the Silverlight automation infrastructure.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.ToggleButtonAutomationPeer" /> for the <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> object.</returns>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.OnToggle">
      <summary>Called by the <see cref="M:System.Windows.Controls.Primitives.ToggleButton.OnClick" /> method to implement toggle behavior. </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.ToggleButton.ToString">
      <summary>Returns the string representation of a <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> object. </summary>
      <returns>String representation of a <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> object.</returns>
    </member>
    <member name="E:System.Windows.Controls.Primitives.ToggleButton.Unchecked">
      <summary>Occurs when a <see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is unchecked.</summary>
    </member>
    <member name="T:System.Windows.Data.Binding">
      <summary>Defines a binding that connects the properties of binding targets and data sources.</summary>
    </member>
    <member name="M:System.Windows.Data.Binding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.Binding" /> class.</summary>
    </member>
    <member name="M:System.Windows.Data.Binding.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.Binding" /> class with an initial property path for the data source.</summary>
      <param name="path">The initial property path for the source of the binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.BindsDirectlyToSource">
      <summary>Gets or sets a value that indicates whether the binding ignores any <see cref="T:System.ComponentModel.ICollectionView" /> settings on the data source. </summary>
      <returns>true if the binding binds directly to the data source; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Data.Binding.Converter">
      <summary>Gets or sets the converter object that is called by the binding engine to modify the data as it is passed between the source and target, or vice versa.</summary>
      <returns>The <see cref="T:System.Windows.Data.IValueConverter" /> object that modifies the data.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.ConverterCulture">
      <summary>Gets or sets the culture to be used by the <see cref="P:System.Windows.Data.Binding.Converter" />.</summary>
      <returns>The <see cref="T:System.Globalization.CultureInfo" /> used by the <see cref="P:System.Windows.Data.Binding.Converter" />.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.ConverterParameter">
      <summary>Gets or sets a parameter that can be used in the <see cref="P:System.Windows.Data.Binding.Converter" /> logic.</summary>
      <returns>A parameter to be passed to the <see cref="P:System.Windows.Data.Binding.Converter" />.  This can be used in the conversion logic.  The default is null.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.ElementName">
      <summary>Gets or sets the name of the element to use as the binding source object.</summary>
      <returns>The value of the <see cref="P:System.Windows.FrameworkElement.Name" /> property or x:Name Attribute of the element to bind to. The default is null.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.-or-The <see cref="P:System.Windows.Data.Binding.Source" /> or <see cref="P:System.Windows.Data.Binding.RelativeSource" /> property has already been set.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.Mode">
      <summary>Gets or sets a value that indicates the direction of the data flow in the binding.</summary>
      <returns>One of the <see cref="T:System.Windows.Data.BindingMode" /> values. The default is <see cref="F:System.Windows.Data.BindingMode.OneWay" />.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.NotifyOnValidationError">
      <summary>Gets or sets a value that indicates whether the <see cref="E:System.Windows.FrameworkElement.BindingValidationError" /> event is raised on validation errors.</summary>
      <returns>true if the <see cref="E:System.Windows.FrameworkElement.BindingValidationError" /> event is raised; otherwise, false. The default is false.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.Path">
      <summary>Gets or sets the path to the binding source property.</summary>
      <returns>The property path for the source of the binding. See <see cref="T:System.Windows.PropertyPath" /> or Property Path Syntax.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.RelativeSource">
      <summary>Gets or sets the binding source by specifying its location relative to the position of the binding target.</summary>
      <returns>The relative location of the binding source to use. The default is null.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.-or-The <see cref="P:System.Windows.Data.Binding.ElementName" /> or <see cref="P:System.Windows.Data.Binding.Source" /> property has already been set.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.Source">
      <summary>Gets or sets the data source for the binding.</summary>
      <returns>The source object that contains the data for the binding.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.-or-The <see cref="P:System.Windows.Data.Binding.ElementName" /> or <see cref="P:System.Windows.Data.Binding.RelativeSource" /> property has already been set.</exception>
    </member>
    <member name="M:System.Windows.Data.Binding.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary>Signals the object that initialization is starting.</summary>
    </member>
    <member name="M:System.Windows.Data.Binding.System#ComponentModel#ISupportInitialize#EndInit">
      <summary>Signals the object that initialization is complete.</summary>
    </member>
    <member name="P:System.Windows.Data.Binding.UpdateSourceTrigger">
      <summary>Gets or sets a value that determines the timing of binding source updates for two-way bindings.</summary>
      <returns>A value that determines when the binding source is updated. The default is <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />. </returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.ValidatesOnDataErrors">
      <summary>Gets or sets a value that indicates whether the binding engine will report validation errors from an <see cref="T:System.ComponentModel.IDataErrorInfo" /> implementation on the bound data entity.</summary>
      <returns>true if the binding engine will report <see cref="T:System.ComponentModel.IDataErrorInfo" /> validation errors; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Data.Binding.ValidatesOnExceptions">
      <summary>Gets or sets a value that indicates whether the binding engine will report exception validation errors.</summary>
      <returns>true if the binding engine will report exception validation errors; otherwise, false.  The default is false.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.Binding" /> has already been attached to a target element, and cannot be modified.</exception>
    </member>
    <member name="P:System.Windows.Data.Binding.ValidatesOnNotifyDataErrors">
      <summary>Gets or sets a value that indicates whether the binding engine will report validation errors from an <see cref="T:System.ComponentModel.INotifyDataErrorInfo" /> implementation on the bound data entity.</summary>
      <returns>true if the binding engine will report <see cref="T:System.ComponentModel.INotifyDataErrorInfo" /> validation errors; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.Windows.Data.BindingBase">
      <summary>Provides an abstract base class for the <see cref="T:System.Windows.Data.Binding" /> class. </summary>
    </member>
    <member name="M:System.Windows.Data.BindingBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.BindingBase" /> class. </summary>
    </member>
    <member name="M:System.Windows.Data.BindingBase.CheckSealed">
      <summary>Throws an exception if the binding has already been attached to a binding target.</summary>
      <exception cref="T:System.InvalidOperationException">The binding has already been attached to a binding target.</exception>
    </member>
    <member name="P:System.Windows.Data.BindingBase.FallbackValue">
      <summary>Gets or sets the value to use when the binding is unable to return a value.</summary>
      <returns>The value to use when the binding is unable to return a value. The default is null.</returns>
      <exception cref="T:System.InvalidOperationException">When setting this property, the binding has already been attached to a binding target.</exception>
    </member>
    <member name="P:System.Windows.Data.BindingBase.StringFormat">
      <summary>Gets or sets a string that specifies how to format the binding if it displays the bound value as a string.</summary>
      <returns>A string that specifies how to format the binding if it displays the bound value as a string. The default is null.</returns>
      <exception cref="T:System.InvalidOperationException">When setting this property, the binding has already been attached to a binding target.</exception>
    </member>
    <member name="P:System.Windows.Data.BindingBase.TargetNullValue">
      <summary>Gets or sets the value that is used in the target when the value of the source is null.</summary>
      <returns>The value that is used in the target when the value of the source is null.</returns>
      <exception cref="T:System.InvalidOperationException">When setting this property, the binding has already been attached to a binding target.</exception>
    </member>
    <member name="T:System.Windows.Data.BindingExpression">
      <summary>Contains information about a single binding within a <see cref="T:System.Windows.Data.Binding" /> object.</summary>
    </member>
    <member name="P:System.Windows.Data.BindingExpression.DataItem">
      <summary>Gets the binding source object that this <see cref="T:System.Windows.Data.BindingExpression" /> uses.</summary>
      <returns>The binding source object that this <see cref="T:System.Windows.Data.BindingExpression" /> uses.</returns>
    </member>
    <member name="P:System.Windows.Data.BindingExpression.ParentBinding">
      <summary>Returns the <see cref="T:System.Windows.Data.Binding" /> object of the current <see cref="T:System.Windows.Data.BindingExpression" />.</summary>
      <returns>The <see cref="T:System.Windows.Data.Binding" /> object of the current <see cref="T:System.Windows.Data.BindingExpression" />.</returns>
    </member>
    <member name="M:System.Windows.Data.BindingExpression.UpdateSource">
      <summary>Sends the current binding target value to the binding source property in <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> bindings.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Data.BindingExpression" /> is detached from the binding target. </exception>
    </member>
    <member name="T:System.Windows.Data.BindingExpressionBase">
      <summary>Represents the base class for the <see cref="T:System.Windows.Data.BindingExpression" /> class. </summary>
    </member>
    <member name="T:System.Windows.Data.BindingMode">
      <summary>Describes how the data propagates in a binding.</summary>
    </member>
    <member name="F:System.Windows.Data.BindingMode.OneWay">
      <summary>Updates the target property when the binding is created.  Changes to the source object can also propagate to the target.</summary>
    </member>
    <member name="F:System.Windows.Data.BindingMode.OneTime">
      <summary>Updates the target property when the binding is created.</summary>
    </member>
    <member name="F:System.Windows.Data.BindingMode.TwoWay">
      <summary>Updates either the target or the source object when either changes.  When the binding is created, the target property is updated from the source.</summary>
    </member>
    <member name="T:System.Windows.Data.BindingOperations">
      <summary>Provides the static <see cref="M:System.Windows.Data.BindingOperations.SetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" /> method. </summary>
    </member>
    <member name="M:System.Windows.Data.BindingOperations.SetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.Data.BindingBase)">
      <summary>Creates and associates a new <see cref="T:System.Windows.Data.BindingExpressionBase" /> with the specified binding target property.</summary>
      <returns>An object that contains information about the binding. </returns>
      <param name="target">The target to set the binding to. </param>
      <param name="dp">The property on the target to bind. </param>
      <param name="binding">The binding to assign to the target property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.-or-<paramref name="dp" /> is null.-or-<paramref name="binding" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not of type <see cref="T:System.Windows.FrameworkElement" /> or <see cref="T:System.Windows.Data.CollectionViewSource" />.-or-<paramref name="target" /> is of type <see cref="T:System.Windows.Data.CollectionViewSource" /> and <paramref name="binding" /> has a <see cref="P:System.Windows.Data.Binding.Source" /> value of null.-or-<paramref name="binding" /> has a <see cref="P:System.Windows.Data.Binding.Mode" /> value of <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> and an empty <see cref="P:System.Windows.Data.Binding.Path" /> value. </exception>
    </member>
    <member name="T:System.Windows.Data.CollectionViewGroup">
      <summary>Represents a group created by a <see cref="T:System.Windows.Data.PagedCollectionView" /> object based on its <see cref="P:System.Windows.Data.PagedCollectionView.GroupDescriptions" />.</summary>
    </member>
    <member name="M:System.Windows.Data.CollectionViewGroup.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.CollectionViewGroup" /> class with the specified group name.</summary>
      <param name="name">The name of the group.</param>
    </member>
    <member name="P:System.Windows.Data.CollectionViewGroup.IsBottomLevel">
      <summary>Gets a value that indicates whether this group has any subgroups.</summary>
      <returns>true if this group is at the bottom level and does not have any subgroups; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Data.CollectionViewGroup.ItemCount">
      <summary>Gets the number of data items in the subtree under this group.</summary>
      <returns>The number of data items in the subtree under this group.</returns>
    </member>
    <member name="P:System.Windows.Data.CollectionViewGroup.Items">
      <summary>Gets the items that are immediate children of the group.</summary>
      <returns>A read-only collection of the immediate items in this group. This is either a collection of subgroups or a collection of data items if this group does not have any subgroups.</returns>
    </member>
    <member name="P:System.Windows.Data.CollectionViewGroup.Name">
      <summary>Gets the name of this group.</summary>
      <returns>The name of this group.</returns>
    </member>
    <member name="M:System.Windows.Data.CollectionViewGroup.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Data.CollectionViewGroup.PropertyChanged" /> event with the provided arguments.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="E:System.Windows.Data.CollectionViewGroup.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="P:System.Windows.Data.CollectionViewGroup.ProtectedItemCount">
      <summary>Gets or sets the number of data items in the subtree under this group.</summary>
      <returns>The number of data items in the subtree under this group.</returns>
    </member>
    <member name="P:System.Windows.Data.CollectionViewGroup.ProtectedItems">
      <summary>Gets the immediate items that are contained in this group.</summary>
      <returns>The immediate items that are contained in this group.</returns>
    </member>
    <member name="E:System.Windows.Data.CollectionViewGroup.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>For a description of this member, see <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
    </member>
    <member name="T:System.Windows.Data.CollectionViewSource">
      <summary>The XAML proxy of a collection view class.</summary>
    </member>
    <member name="M:System.Windows.Data.CollectionViewSource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.CollectionViewSource" /> class.</summary>
    </member>
    <member name="P:System.Windows.Data.CollectionViewSource.Culture">
      <summary>Gets or sets the cultural information for any operations of the view that might differ by culture, such as sorting.</summary>
      <returns>The culture to use during view operations.</returns>
    </member>
    <member name="M:System.Windows.Data.CollectionViewSource.DeferRefresh">
      <summary>Enters a defer cycle that you can use to merge changes to the view and delay automatic refresh.</summary>
      <returns>An <see cref="T:System.IDisposable" /> object that you can use to dispose of the calling object.</returns>
    </member>
    <member name="E:System.Windows.Data.CollectionViewSource.Filter">
      <summary>Provides filtering logic.</summary>
    </member>
    <member name="P:System.Windows.Data.CollectionViewSource.GroupDescriptions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.GroupDescription" /> objects that describe how items in the collection are grouped in the view.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.GroupDescription" /> objects that describe how items in the collection are grouped in the view.</returns>
    </member>
    <member name="M:System.Windows.Data.CollectionViewSource.OnCollectionViewTypeChanged(System.Type,System.Type)">
      <summary>Invoked when the collection view type changes.</summary>
      <param name="oldCollectionViewType">The old collection view type.</param>
      <param name="newCollectionViewType">The new collection view type.</param>
    </member>
    <member name="M:System.Windows.Data.CollectionViewSource.OnSourceChanged(System.Object,System.Object)">
      <summary>Invoked when the <see cref="P:System.Windows.Data.CollectionViewSource.Source" /> property changes.</summary>
      <param name="oldSource">The old value of the <see cref="P:System.Windows.Data.CollectionViewSource.Source" /> property.</param>
      <param name="newSource">The new value of the <see cref="P:System.Windows.Data.CollectionViewSource.Source" /> property.</param>
    </member>
    <member name="P:System.Windows.Data.CollectionViewSource.SortDescriptions">
      <summary>Gets a collection of <see cref="T:System.ComponentModel.SortDescription" /> objects that describe how the items in the collection are sorted in the view.</summary>
      <returns>A collection of <see cref="T:System.ComponentModel.SortDescription" /> objects that describe how the items in the collection are sorted in the view.</returns>
    </member>
    <member name="P:System.Windows.Data.CollectionViewSource.Source">
      <summary>Gets or sets the collection object from which to create this view.</summary>
      <returns>The collection object from which to create this view. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Data.CollectionViewSource.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Data.CollectionViewSource.Source" /> dependency property.</summary>
    </member>
    <member name="M:System.Windows.Data.CollectionViewSource.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary>Signals the object that initialization is starting.</summary>
    </member>
    <member name="M:System.Windows.Data.CollectionViewSource.System#ComponentModel#ISupportInitialize#EndInit">
      <summary>Signals the object that initialization is complete.</summary>
    </member>
    <member name="P:System.Windows.Data.CollectionViewSource.View">
      <summary>Gets the view object that is currently associated with this instance of <see cref="T:System.Windows.Data.CollectionViewSource" />.</summary>
      <returns>The view object that is currently associated with this instance of <see cref="T:System.Windows.Data.CollectionViewSource" />.</returns>
    </member>
    <member name="F:System.Windows.Data.CollectionViewSource.ViewProperty">
      <summary>Identifies the <see cref="P:System.Windows.Data.CollectionViewSource.View" /> dependency property.</summary>
    </member>
    <member name="T:System.Windows.Data.FilterEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Data.CollectionViewSource.Filter" /> event.</summary>
    </member>
    <member name="P:System.Windows.Data.FilterEventArgs.Accepted">
      <summary>Gets or sets a value that indicates whether the item passes the filter criteria.</summary>
      <returns>true if the item passes the filter; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Data.FilterEventArgs.Item">
      <summary>Gets the object that the filter should test.</summary>
      <returns>The object that the filter should test. The default is null.</returns>
    </member>
    <member name="T:System.Windows.Data.FilterEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Data.CollectionViewSource.Filter" /> event.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Data.IValueConverter">
      <summary>Exposes methods that allow modifying the data as it passes through the binding engine.</summary>
    </member>
    <member name="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Modifies the source data before passing it to the target for display in the UI.</summary>
      <returns>The value to be passed to the target dependency property.</returns>
      <param name="value">The source data being passed to the target.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
      <param name="parameter">An optional parameter to be used in the converter logic.</param>
      <param name="culture">The culture of the conversion.</param>
    </member>
    <member name="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> bindings.</summary>
      <returns>The value to be passed to the source object.</returns>
      <param name="value">The target data being passed to the source.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
      <param name="parameter">An optional parameter to be used in the converter logic.</param>
      <param name="culture">The culture of the conversion.</param>
    </member>
    <member name="T:System.Windows.Data.PropertyGroupDescription">
      <summary>Describes the grouping of items by using a property name as the criteria.</summary>
    </member>
    <member name="M:System.Windows.Data.PropertyGroupDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.PropertyGroupDescription" /> class.</summary>
    </member>
    <member name="M:System.Windows.Data.PropertyGroupDescription.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.PropertyGroupDescription" /> class with the specified property name.</summary>
      <param name="propertyName">The name of the property that specifies which group an item belongs to.</param>
    </member>
    <member name="M:System.Windows.Data.PropertyGroupDescription.#ctor(System.String,System.Windows.Data.IValueConverter)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.PropertyGroupDescription" /> class with the specified property name and converter.</summary>
      <param name="propertyName">The name of the property that specifies which group an item belongs to. If this parameter is null, the item itself is passed to the value converter.</param>
      <param name="converter">An <see cref="T:System.Windows.Data.IValueConverter" /> object to apply to the property value or the item to produce the final value that is used to determine which group(s) an item belongs to. The converter may return a collection, which indicates that the items can appear in more than one group.</param>
    </member>
    <member name="M:System.Windows.Data.PropertyGroupDescription.#ctor(System.String,System.Windows.Data.IValueConverter,System.StringComparison)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.PropertyGroupDescription" /> class with the specified property name, converter, and string comparison.</summary>
      <param name="propertyName">The name of the property that specifies which group an item belongs to. If this parameter is null, the item itself is passed to the value converter.</param>
      <param name="converter">An <see cref="T:System.Windows.Data.IValueConverter" /> object to apply to the property value or the item to produce the final value that is used to determine which group(s) an item belongs to. The converter may return a collection, which indicates that the items can appear in more than one group.</param>
      <param name="stringComparison">A <see cref="T:System.StringComparison" /> value that specifies the comparison between the value of an item and the name of a group.</param>
    </member>
    <member name="P:System.Windows.Data.PropertyGroupDescription.Converter">
      <summary>Gets or sets a converter to apply to the property value or the item to produce the final value that is used to determine which group(s) an item belongs to.</summary>
      <returns>The converter to apply. The default is null.</returns>
    </member>
    <member name="M:System.Windows.Data.PropertyGroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
      <summary>Returns the group name(s) for the specified item.</summary>
      <returns>The group name(s) for the specified item.</returns>
      <param name="item">The item to return group names for.</param>
      <param name="level">The level of grouping.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to supply to the converter</param>
    </member>
    <member name="M:System.Windows.Data.PropertyGroupDescription.NamesMatch(System.Object,System.Object)">
      <summary>Returns a value that indicates whether the group name and the item name match, which indicates that the item belongs to the group.</summary>
      <returns>true if the names match, which indicates that the item belongs to the group; otherwise, false.</returns>
      <param name="groupName">The name of the group to check.</param>
      <param name="itemName">The name of the item to check.</param>
    </member>
    <member name="P:System.Windows.Data.PropertyGroupDescription.PropertyName">
      <summary>Gets or sets the name of the property that is used to determine which group(s) an item belongs to.</summary>
      <returns>The name of the property that is used to determine which group(s) an item belongs to. The default is null.</returns>
    </member>
    <member name="P:System.Windows.Data.PropertyGroupDescription.StringComparison">
      <summary>Gets or sets a <see cref="T:System.StringComparison" /> value that specifies the comparison between the value of an item (as determined by <see cref="P:System.Windows.Data.PropertyGroupDescription.PropertyName" /> and <see cref="P:System.Windows.Data.PropertyGroupDescription.Converter" />) and the name of a group.</summary>
      <returns>An enumeration value that specifies the comparison between the value of an item and the name of a group. The default is <see cref="F:System.StringComparison.Ordinal" />.</returns>
    </member>
    <member name="T:System.Windows.Data.RelativeSource">
      <summary>Implements a markup extension that describes the location of the binding source relative to the position of the binding target.</summary>
    </member>
    <member name="M:System.Windows.Data.RelativeSource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.RelativeSource" /> class by using default relative source mode. </summary>
    </member>
    <member name="M:System.Windows.Data.RelativeSource.#ctor(System.Windows.Data.RelativeSourceMode)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Data.RelativeSource" /> class by using the specified relative source mode. </summary>
      <param name="mode">The relative source mode to use for the related binding.</param>
    </member>
    <member name="P:System.Windows.Data.RelativeSource.Mode">
      <summary>Gets or sets a value that describes the location of the binding source relative to the position of the binding target.</summary>
      <returns>A value of the enumeration.</returns>
      <exception cref="T:System.InvalidOperationException">When setting this property, the property has already been set to a different value.</exception>
    </member>
    <member name="T:System.Windows.Data.RelativeSourceMode">
      <summary>Defines constants that describe the location of the binding source relative to the position of the binding target.</summary>
    </member>
    <member name="F:System.Windows.Data.RelativeSourceMode.TemplatedParent">
      <summary>Refers to the element to which the template (in which the data-bound element exists) is applied. This is similar to setting a TemplateBinding Markup Extension and is only applicable if the <see cref="T:System.Windows.Data.Binding" /> is within a template.</summary>
    </member>
    <member name="F:System.Windows.Data.RelativeSourceMode.Self">
      <summary>Refers to the element on which you are setting the binding and allows you to bind one property of that element to another property on the same element.</summary>
    </member>
    <member name="T:System.Windows.Data.UpdateSourceTrigger">
      <summary>Defines constants that indicate when a binding source is updated by its binding target in two-way binding. </summary>
    </member>
    <member name="F:System.Windows.Data.UpdateSourceTrigger.Default">
      <summary>The binding source is updated automatically when the binding target value changes.</summary>
    </member>
    <member name="F:System.Windows.Data.UpdateSourceTrigger.Explicit">
      <summary>The binding source is updated only when you call the <see cref="M:System.Windows.Data.BindingExpression.UpdateSource" /> method.</summary>
    </member>
    <member name="T:System.Windows.Documents.Block">
      <summary>An abstract class that provides a base for all block-level content elements.</summary>
    </member>
    <member name="M:System.Windows.Documents.Block.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.Block" /> class. </summary>
    </member>
    <member name="P:System.Windows.Documents.Block.TextAlignment">
      <summary>Gets or sets the horizontal alignment of the text content. </summary>
      <returns>Dependency property identifier field: <see cref="F:System.Windows.Documents.Block.TextAlignmentProperty" />The horizontal alignment of the text content. The default is <see cref="F:System.Windows.TextAlignment.Left" />.</returns>
    </member>
    <member name="F:System.Windows.Documents.Block.TextAlignmentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Block.TextAlignment" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Block.TextAlignment" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Documents.BlockCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Documents.Block" /> elements. </summary>
    </member>
    <member name="T:System.Windows.Documents.Bold">
      <summary>Provides an inline-level content element that causes content to render with a bold font weight. </summary>
    </member>
    <member name="M:System.Windows.Documents.Bold.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.Bold" /> class. </summary>
    </member>
    <member name="T:System.Windows.Documents.FontSource">
      <summary>Represents one or more fonts created from a stream.</summary>
    </member>
    <member name="M:System.Windows.Documents.FontSource.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.FontSource" /> class. </summary>
      <param name="stream">The stream that contains the font source. </param>
    </member>
    <member name="M:System.Windows.Documents.FontSource.#ctor(System.Windows.Media.GlyphTypeface)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.FontSource" /> class. </summary>
      <param name="glyphtypeface">The <see cref="T:System.Windows.Media.GlyphTypeface" /> object that contains the font file.</param>
    </member>
    <member name="T:System.Windows.Documents.Glyphs">
      <summary>Provides a visual representation of letters, characters, or symbols, in a specific font and style.</summary>
    </member>
    <member name="M:System.Windows.Documents.Glyphs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.Glyphs" /> class.</summary>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.Fill">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to render the glyphs.</summary>
      <returns>The brush to use to render the glyphs. The default is null, which is evaluated as <see cref="P:System.Windows.Media.Colors.Transparent" /> for rendering.</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.FillProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Glyphs.Fill" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Glyphs.Fill" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.FontRenderingEmSize">
      <summary>Gets or sets the em size used for rendering the glyphs.</summary>
      <returns>The em size used for rendering. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.FontRenderingEmSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Glyphs.FontRenderingEmSize" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Glyphs.FontRenderingEmSize" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.FontSource">
      <summary>Gets or sets the font source that is applied to the <see cref="T:System.Windows.Documents.Glyphs" /> for rendering content.</summary>
      <returns>The font source used to render content in the <see cref="T:System.Windows.Documents.Glyphs" />. The default is a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.FontUri">
      <summary>Gets or sets the location of the font used for rendering the glyphs.</summary>
      <returns>The URI source of the font. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.FontUriProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Glyphs.FontUri" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Glyphs.FontUri" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.Indices">
      <summary>Gets or sets the glyph indices for the glyphs.</summary>
      <returns>A string that defines glyph indices as well as other glyph specifics in a string mini-language. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.IndicesProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Glyphs.Indices" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Glyphs.Indices" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.OriginX">
      <summary>Gets or sets the x origin for the glyphs.</summary>
      <returns>The x origin of the <see cref="T:System.Windows.Documents.Glyphs" />, in pixels. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.OriginXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Glyphs.OriginX" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Glyphs.OriginX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.OriginY">
      <summary>Gets or sets the y origin for the glyphs.</summary>
      <returns>The y origin of the <see cref="T:System.Windows.Documents.Glyphs" />, in pixels. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.OriginYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Glyphs.OriginY" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Glyphs.OriginY" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.StyleSimulations">
      <summary>Gets or sets the style simulations applied to the glyphs.</summary>
      <returns>One of the enumeration values that specifies the style simulations to apply to the glyphs. The default is None.</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.StyleSimulationsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Glyphs.StyleSimulations" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Glyphs.StyleSimulations" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Glyphs.UnicodeString">
      <summary>Gets or sets the Unicode string to render in glyphs.</summary>
      <returns>A Unicode string with XAML-compatible encoding. The default is an empty string.</returns>
    </member>
    <member name="F:System.Windows.Documents.Glyphs.UnicodeStringProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Glyphs.UnicodeString" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Glyphs.UnicodeString" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Documents.Hyperlink">
      <summary>Provides an inline-level content element that provides facilities for hosting hyperlinks. </summary>
    </member>
    <member name="M:System.Windows.Documents.Hyperlink.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.Hyperlink" /> class. </summary>
    </member>
    <member name="E:System.Windows.Documents.Hyperlink.Click">
      <summary>Occurs when the left mouse button is clicked on a <see cref="T:System.Windows.Documents.Hyperlink" />.</summary>
    </member>
    <member name="P:System.Windows.Documents.Hyperlink.Command">
      <summary>Gets or sets a command to associate with the <see cref="T:System.Windows.Documents.Hyperlink" />. </summary>
      <returns>A command to associate with the <see cref="T:System.Windows.Documents.Hyperlink" />. The default is null.</returns>
    </member>
    <member name="P:System.Windows.Documents.Hyperlink.CommandParameter">
      <summary>Gets or sets command parameters associated with the command specified by the <see cref="P:System.Windows.Documents.Hyperlink.Command" /> property. </summary>
      <returns>An object specifying parameters for the command specified by the <see cref="P:System.Windows.Documents.Hyperlink.Command" /> property. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Documents.Hyperlink.CommandParameterProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Hyperlink.CommandParameter" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Hyperlink.CommandParameter" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Documents.Hyperlink.CommandProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Hyperlink.Command" /> dependency property.</summary>
      <returns>Identifier for the <see cref="P:System.Windows.Documents.Hyperlink.Command" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Hyperlink.MouseOverForeground">
      <summary>Gets or sets the brush that paints the foreground color when the mouse pointer moves over the <see cref="T:System.Windows.Documents.Hyperlink" />.</summary>
      <returns>The brush that paints the foreground color when the mouse pointer moves over the <see cref="T:System.Windows.Documents.Hyperlink" />.</returns>
    </member>
    <member name="F:System.Windows.Documents.Hyperlink.MouseOverForegroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Hyperlink.MouseOverForeground" /> dependency property.</summary>
      <returns>Identifier for the <see cref="P:System.Windows.Documents.Hyperlink.MouseOverForeground" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Hyperlink.MouseOverTextDecorations">
      <summary>Gets or sets the <see cref="T:System.Windows.TextDecorationCollection" /> that decorates the <see cref="T:System.Windows.Documents.Hyperlink" />.</summary>
      <returns>A <see cref="T:System.Windows.TextDecorationCollection" /> that decorates the <see cref="T:System.Windows.Documents.Hyperlink" />.</returns>
    </member>
    <member name="F:System.Windows.Documents.Hyperlink.MouseOverTextDecorationsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Hyperlink.MouseOverTextDecorations" /> dependency property.</summary>
      <returns>Identifier for the <see cref="P:System.Windows.Documents.Hyperlink.MouseOverTextDecorations" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Hyperlink.NavigateUri">
      <summary>Gets or sets a URI to navigate to when the <see cref="T:System.Windows.Documents.Hyperlink" /> is activated. </summary>
      <returns>The URI to navigate to when the <see cref="T:System.Windows.Documents.Hyperlink" /> is activated. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Documents.Hyperlink.NavigateUriProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Hyperlink.NavigateUri" /> dependency property.</summary>
      <returns>Identifier for the <see cref="P:System.Windows.Documents.Hyperlink.NavigateUri" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Hyperlink.TargetName">
      <summary>Gets or sets the name of a target window or frame for the <see cref="T:System.Windows.Documents.Hyperlink" />. </summary>
      <returns>A string that specifies the name of a target window or frame for the <see cref="T:System.Windows.Documents.Hyperlink" />.</returns>
    </member>
    <member name="F:System.Windows.Documents.Hyperlink.TargetNameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Hyperlink.TargetName" /> dependency property.</summary>
      <returns>Identifier for the <see cref="P:System.Windows.Documents.Hyperlink.TargetName" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Documents.Inline">
      <summary>Provides a base for inline flow content element behavior.</summary>
    </member>
    <member name="M:System.Windows.Documents.Inline.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.Inline" /> class.</summary>
    </member>
    <member name="F:System.Windows.Documents.Inline.FontFamilyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.TextElement.FontFamily" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.TextElement.FontFamily" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.FontSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.TextElement.FontSize" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.TextElement.FontSize" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.FontStretchProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.TextElement.FontStretch" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.TextElement.FontStretch" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.FontStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.TextElement.FontStyle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.TextElement.FontStyle" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.FontWeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.TextElement.FontWeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.TextElement.FontWeight" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.ForegroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.TextElement.Foreground" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.TextElement.Foreground" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.LanguageProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.TextElement.Language" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.TextElement.Language" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.TextDecorations">
      <summary>Gets or sets a value that specifies the text decorations that are applied to the content in an <see cref="T:System.Windows.Documents.Inline" /> element.</summary>
      <returns>A <see cref="T:System.Windows.TextDecorationCollection" />, or null if no text decorations are applied.</returns>
    </member>
    <member name="F:System.Windows.Documents.Inline.TextDecorationsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.Inline.TextDecorations" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.Inline.TextDecorations" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Documents.InlineCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Documents.Inline" /> elements.</summary>
    </member>
    <member name="M:System.Windows.Documents.InlineCollection.Add(System.String)">
      <summary>Adds a string to the collection.</summary>
      <param name="text">The text to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Documents.InlineUIContainer">
      <summary>Provides an inline content element that enables <see cref="T:System.Windows.UIElement" /> types to be embedded in content.</summary>
    </member>
    <member name="M:System.Windows.Documents.InlineUIContainer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.InlineUIContainer" /> class. </summary>
    </member>
    <member name="P:System.Windows.Documents.InlineUIContainer.Child">
      <summary>Gets or sets the <see cref="T:System.Windows.UIElement" /> hosted by the <see cref="T:System.Windows.Documents.InlineUIContainer" />.</summary>
      <returns>The <see cref="T:System.Windows.UIElement" /> hosted by the <see cref="T:System.Windows.Documents.InlineUIContainer" />.</returns>
    </member>
    <member name="T:System.Windows.Documents.Italic">
      <summary>Provides an inline-level flow content element that causes content to render with an italic font style. </summary>
    </member>
    <member name="M:System.Windows.Documents.Italic.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.Italic" /> class. </summary>
    </member>
    <member name="T:System.Windows.Documents.LineBreak">
      <summary>Represents an inline element that causes a new line to begin in content when rendered in a text container.</summary>
    </member>
    <member name="M:System.Windows.Documents.LineBreak.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.LineBreak" /> class.</summary>
    </member>
    <member name="T:System.Windows.Documents.LogicalDirection">
      <summary>Specifies a logical direction in which to perform certain text operations, such as inserting, retrieving, or navigating through text relative to a specified position (a <see cref="T:System.Windows.Documents.TextPointer" />).</summary>
    </member>
    <member name="F:System.Windows.Documents.LogicalDirection.Backward">
      <summary>Backward, or from right to left.</summary>
    </member>
    <member name="F:System.Windows.Documents.LogicalDirection.Forward">
      <summary>Forward, or from left to right.</summary>
    </member>
    <member name="T:System.Windows.Documents.Paragraph">
      <summary>Provides a block-level content element that is used to group content into a paragraph. </summary>
    </member>
    <member name="M:System.Windows.Documents.Paragraph.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.Paragraph" /> class. </summary>
    </member>
    <member name="P:System.Windows.Documents.Paragraph.Inlines">
      <summary>Gets an <see cref="T:System.Windows.Documents.InlineCollection" /> containing the top-level <see cref="T:System.Windows.Documents.Inline" /> elements that include the contents of the <see cref="T:System.Windows.Documents.Paragraph" />.</summary>
      <returns>An <see cref="T:System.Windows.Documents.InlineCollection" /> containing the <see cref="T:System.Windows.Documents.Inline" /> elements that include the contents of the <see cref="T:System.Windows.Documents.Paragraph" />.</returns>
    </member>
    <member name="T:System.Windows.Documents.Run">
      <summary>Represents a discrete section of formatted or unformatted text.</summary>
    </member>
    <member name="M:System.Windows.Documents.Run.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.Run" /> class.</summary>
    </member>
    <member name="P:System.Windows.Documents.Run.FlowDirection">
      <summary>Gets or sets the direction that text and other user interface elements flow within the <see cref="T:System.Windows.Documents.Run" /> element that controls their layout. </summary>
      <returns>The direction that text and other UI elements flow within the <see cref="T:System.Windows.Documents.Run" /> element, as a value of the enumeration. The default value is <see cref="F:System.Windows.FlowDirection.LeftToRight" />.</returns>
    </member>
    <member name="F:System.Windows.Documents.Run.FlowDirectionProperty">
      <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.Documents.Run.Text">
      <summary>Gets or sets the text contents of the <see cref="T:System.Windows.Documents.Run" />.</summary>
      <returns>A string specifying the text contents of the <see cref="T:System.Windows.Documents.Run" />. The default is <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="T:System.Windows.Documents.Section">
      <summary>A block-level element used for grouping other <see cref="T:System.Windows.Documents.Block" /> elements.</summary>
    </member>
    <member name="P:System.Windows.Documents.Section.Blocks">
      <summary>Gets a <see cref="T:System.Windows.Documents.BlockCollection" /> containing the top-level <see cref="T:System.Windows.Documents.Block" /> elements that comprise the contents of the <see cref="T:System.Windows.Documents.Section" />.</summary>
      <returns>A <see cref="T:System.Windows.Documents.BlockCollection" /> containing the <see cref="T:System.Windows.Documents.Block" /> elements that comprise the contents of the <see cref="T:System.Windows.Documents.Section" />. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Documents.Section.HasTrailingParagraphBreakOnPaste">
      <summary>Gets or sets a value that indicates whether or not a trailing paragraph break should be inserted after the last paragraph when placing the contents of a root Section element on the clipboard.</summary>
      <returns>true indicate that a trailing paragraph break should be included; otherwise false.</returns>
    </member>
    <member name="T:System.Windows.Documents.Span">
      <summary>Groups other <see cref="T:System.Windows.Documents.Inline" /> content elements.</summary>
    </member>
    <member name="M:System.Windows.Documents.Span.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.Span" /> class. </summary>
    </member>
    <member name="P:System.Windows.Documents.Span.Inlines">
      <summary>Gets an <see cref="T:System.Windows.Documents.InlineCollection" /> containing the top-level inline elements that include the contents of <see cref="T:System.Windows.Documents.Span" />.</summary>
      <returns>An <see cref="T:System.Windows.Documents.InlineCollection" /> containing the Inline elements that include the contents of the <see cref="T:System.Windows.Documents.Span" />. This property has no default value.</returns>
    </member>
    <member name="T:System.Windows.Documents.TextElement">
      <summary>An abstract class used as the base class for the abstract <see cref="T:System.Windows.Documents.Block" /> and <see cref="T:System.Windows.Documents.Inline" /> classes.</summary>
    </member>
    <member name="P:System.Windows.Documents.TextElement.ContentEnd">
      <summary>Gets a <see cref="T:System.Windows.Documents.TextPointer" /> that represents the end of the content in the element.</summary>
      <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> that represents the end of the content in the <see cref="T:System.Windows.Documents.TextElement" />.</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.ContentStart">
      <summary>Gets a <see cref="T:System.Windows.Documents.TextPointer" /> that represents the start of content in the element.</summary>
      <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> that represents the start of the content in the <see cref="T:System.Windows.Documents.TextElement" />.</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.ElementEnd">
      <summary>Gets a <see cref="T:System.Windows.Documents.TextPointer" /> that represents the position just after the end of the element.</summary>
      <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> that represents the position just after the end of the <see cref="T:System.Windows.Documents.TextElement" />.</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.ElementStart">
      <summary>Gets a <see cref="T:System.Windows.Documents.TextPointer" /> that represents the position just before the start of the element.</summary>
      <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> that represents the position just before the start of the <see cref="T:System.Windows.Documents.TextElement" />.</returns>
    </member>
    <member name="M:System.Windows.Documents.TextElement.FindName(System.String)">
      <summary>Gets an object in the Silverlight object model by referencing the object's x:Name or <see cref="P:System.Windows.Documents.TextElement.Name" /> attribute value. </summary>
      <returns>The object that has the specified name, or null if no object is retrieved.</returns>
      <param name="name">The name of the object to retrieve.</param>
    </member>
    <member name="P:System.Windows.Documents.TextElement.FontFamily">
      <summary>Gets or sets the preferred top-level font family for the content of the element.</summary>
      <returns>The preferred font family, or a primary preferred font family with one or more fallback font families. See <see cref="T:System.Windows.Media.FontFamily" /> for default information.</returns>
    </member>
    <member name="F:System.Windows.Documents.TextElement.FontFamilyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.TextElement.FontFamily" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Documents.TextElement.FontFamily" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.FontSize">
      <summary>Gets or sets the font size for the content of the element.</summary>
      <returns>The desired font size in pixels. The default is 11 pixels.</returns>
    </member>
    <member name="F:System.Windows.Documents.TextElement.FontSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.TextElement.FontSize" /> dependency property.</summary>
      <returns>Identifier for the <see cref="P:System.Windows.Documents.TextElement.FontSize" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.FontStretch">
      <summary>Gets or sets the glyph width of the font in a family to select.</summary>
      <returns>One of the <see cref="T:System.Windows.FontStretches" /> property values, specifying the desired font stretch. The default is <see cref="P:System.Windows.FontStretches.Normal" />.</returns>
    </member>
    <member name="F:System.Windows.Documents.TextElement.FontStretchProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.TextElement.FontStretch" /> dependency property.</summary>
      <returns>Identifier for the <see cref="P:System.Windows.Documents.TextElement.FontStretch" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.FontStyle">
      <summary>Gets or sets the font style for the content in this element.</summary>
      <returns>One of the <see cref="T:System.Windows.FontStyles" /> property values, specifying the font style. The default is <see cref="P:System.Windows.FontStyles.Normal" />.</returns>
    </member>
    <member name="F:System.Windows.Documents.TextElement.FontStyleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.TextElement.FontStyle" /> dependency property.</summary>
      <returns>Identifier for the <see cref="P:System.Windows.Documents.TextElement.FontStyle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.FontWeight">
      <summary>Gets or sets the top-level font weight to select from the font family for the content in this element.</summary>
      <returns>One of the <see cref="T:System.Windows.FontWeights" /> property values, specifying the font weight. The default is <see cref="P:System.Windows.FontWeights.Normal" />.</returns>
    </member>
    <member name="F:System.Windows.Documents.TextElement.FontWeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.TextElement.FontWeight" /> dependency property.</summary>
      <returns>Identifier for the <see cref="P:System.Windows.Documents.TextElement.FontWeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.Foreground">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> to apply to the content in this element.</summary>
      <returns>The brush that is applied to the text contents. The default is a <see cref="T:System.Windows.Media.SolidColorBrush" /> with <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> value <see cref="P:System.Windows.Media.Colors.Black" />.</returns>
    </member>
    <member name="F:System.Windows.Documents.TextElement.ForegroundProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.TextElement.Foreground" /> dependency property.</summary>
      <returns>Identifier for the <see cref="P:System.Windows.Documents.TextElement.Foreground" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.Language">
      <summary>Gets or sets the language of the content within an <see cref="T:System.Windows.Documents.TextElement" /> element.</summary>
      <returns>A value of type <see cref="T:System.Windows.Markup.XmlLanguage" />. The default is a <see cref="T:System.Windows.Markup.XmlLanguage" /> value created with the string en-US (<see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> is "en-US").</returns>
    </member>
    <member name="F:System.Windows.Documents.TextElement.LanguageProperty">
      <summary>Identifies the <see cref="P:System.Windows.Documents.TextElement.Language" /> dependency property.</summary>
      <returns>Identifier for the <see cref="P:System.Windows.Documents.TextElement.Language" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Documents.TextElement.Name">
      <summary>Gets or sets a unique identification for the object. <see cref="P:System.Windows.Documents.TextElement.Name" /> can only be set from initial parsing of XAML.</summary>
      <returns>The unique identifier for the object. This property is read-only for code, but write-only for XAML, due to special parser handling of XAML properties named "Name".</returns>
    </member>
    <member name="M:System.Windows.Documents.TextElement.OnCreateAutomationPeer">
      <summary>Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the Silverlight infrastructure.</summary>
      <returns>The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</returns>
    </member>
    <member name="T:System.Windows.Documents.TextElementCollection`1">
      <summary>Provides standard facilities for creating and managing a type-safe, ordered collection of <see cref="T:System.Windows.Documents.TextElement" /> objects.</summary>
      <typeparam name="T">Type constraint for type safety of the constrained collection implementation.</typeparam>
    </member>
    <member name="T:System.Windows.Documents.TextPointer">
      <summary>Represents a position within a <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)">
      <summary>Performs an ordinal comparison between the positions specified by the current <see cref="T:System.Windows.Documents.TextPointer" /> and a second specified <see cref="T:System.Windows.Documents.TextPointer" />.</summary>
      <returns>-1 if the current <see cref="T:System.Windows.Documents.TextPointer" /> precedes position; 0 if the locations are the same; +1 if the current <see cref="T:System.Windows.Documents.TextPointer" /> follows positions.</returns>
      <param name="position">A <see cref="T:System.Windows.Documents.TextPointer" /> that specifies a position to compare to the current position.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> specifies a position from a different <see cref="T:System.Windows.Controls.RichTextBox" /> associated with the current position.</exception>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)">
      <summary>Returns a bounding box for content that borders the current <see cref="T:System.Windows.Documents.TextPointer" /> in the specified logical direction.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> for content that borders the current <see cref="T:System.Windows.Documents.TextPointer" /> in the specified direction, or <see cref="P:System.Windows.Rect.Empty" /> if current and valid layout information is unavailable.</returns>
      <param name="direction">One of the <see cref="T:System.Windows.Documents.LogicalDirection" /> values that specify the logical direction in which to find a content bounding box.</param>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)">
      <summary>Returns a <see cref="T:System.Windows.Documents.TextPointer" /> to the next insertion position in the specified logical direction.</summary>
      <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> that identifies the next insertion position in the requested direction, or null if no next insertion position can be found.</returns>
      <param name="direction">One of the <see cref="T:System.Windows.Documents.LogicalDirection" /> values that specify the logical direction in which to search for the next insertion position.</param>
    </member>
    <member name="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)">
      <summary>Returns a <see cref="T:System.Windows.Documents.TextPointer" /> to the position indicated by the specified offset, in symbols, from the beginning of the current <see cref="T:System.Windows.Documents.TextPointer" /> and in the specified direction.</summary>
      <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> to the position indicated by the specified offset and in the direction specified by the direction parameter, or null if the offset extends past the end of the content.</returns>
      <param name="offset">An offset, in symbols, for which to calculate and return the position. If the offset is negative, the returned <see cref="T:System.Windows.Documents.TextPointer" /> precedes the current <see cref="T:System.Windows.Documents.TextPointer" />; otherwise, it follows.</param>
      <param name="direction">One of the <see cref="T:System.Windows.Documents.LogicalDirection" /> values that specifies the logical direction of the returned <see cref="T:System.Windows.Documents.TextPointer" />.</param>
    </member>
    <member name="P:System.Windows.Documents.TextPointer.IsAtInsertionPosition">
      <summary>Gets a value that indicates whether the current position is an insertion.</summary>
      <returns>true if the current position is an insertion position; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Documents.TextPointer.LogicalDirection">
      <summary>Gets the logical direction associated with the current position, which is used to disambiguate content associated with the current position.</summary>
      <returns>The <see cref="T:System.Windows.Documents.LogicalDirection" /> value that is associated with the current position.</returns>
    </member>
    <member name="P:System.Windows.Documents.TextPointer.Parent">
      <summary>Gets the logical parent that contains the current position.</summary>
      <returns>The logical parent that contains the current position. Can return the <see cref="T:System.Windows.Controls.RichTextBox" /> when at the top of the content stack.</returns>
    </member>
    <member name="T:System.Windows.Documents.TextSelection">
      <summary>Encapsulates the selection state for the <see cref="T:System.Windows.Controls.RichTextBox" /> control.</summary>
    </member>
    <member name="M:System.Windows.Documents.TextSelection.ApplyPropertyValue(System.Windows.DependencyProperty,System.Object)">
      <summary>Applies the specified formatting property and value to the current selection.</summary>
      <param name="formattingProperty">A formatting property to apply.</param>
      <param name="value">The value for the formatting property.</param>
    </member>
    <member name="P:System.Windows.Documents.TextSelection.End">
      <summary>Gets a <see cref="T:System.Windows.Documents.TextPointer" /> that represents the end of the current selection.</summary>
      <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> that represents the end of the current selection.</returns>
    </member>
    <member name="M:System.Windows.Documents.TextSelection.GetPropertyValue(System.Windows.DependencyProperty)">
      <summary>Gets the value of the specified formatting property on the current selection.</summary>
      <returns>An object that indicates the value of the specified formatting property on the current selection.</returns>
      <param name="formattingProperty">A formatting property to get the value of on the current selection.</param>
    </member>
    <member name="M:System.Windows.Documents.TextSelection.Insert(System.Windows.Documents.TextElement)">
      <summary>Inserts the current selection as a <see cref="T:System.Windows.Documents.TextElement" />.</summary>
      <param name="element">The <see cref="T:System.Windows.Documents.TextElement" /> to be inserted.</param>
    </member>
    <member name="M:System.Windows.Documents.TextSelection.Select(System.Windows.Documents.TextPointer,System.Windows.Documents.TextPointer)">
      <summary>Updates the current selection, taking two <see cref="T:System.Windows.Documents.TextPointer" /> positions to indicate the updated selection.</summary>
      <param name="anchorPosition">A fixed anchor position that marks one end of the updated selection.</param>
      <param name="movingPosition">A movable position that marks the other end of the updated selection.</param>
      <exception cref="T:System.ArgumentException">Position specifies a position from a different <see cref="T:System.Windows.Controls.RichTextBox" /> associated with the current position.</exception>
    </member>
    <member name="P:System.Windows.Documents.TextSelection.Start">
      <summary>Gets a <see cref="T:System.Windows.Documents.TextPointer" /> that represents the beginning of the current selection.</summary>
      <returns>A <see cref="T:System.Windows.Documents.TextPointer" /> that represents the beginning of the current selection.</returns>
    </member>
    <member name="P:System.Windows.Documents.TextSelection.Text">
      <summary>Gets or sets the plain text contents of the current selection.</summary>
      <returns>A string that contains the plain text contents of the current selection.</returns>
    </member>
    <member name="P:System.Windows.Documents.TextSelection.Xaml">
      <summary>Gets the XAML representation of the current selection. </summary>
      <returns>A <see cref="T:System.String" /> that is a XAML representation of the current selection. This XAML representation is the same XAML that is applied to the clipboard for a copy operation.</returns>
    </member>
    <member name="T:System.Windows.Documents.Underline">
      <summary>Provides an inline-level content element that causes content to render with an underlined text decoration.</summary>
    </member>
    <member name="M:System.Windows.Documents.Underline.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.Underline" /> class. </summary>
    </member>
    <member name="M:System.Windows.Documents.Inline.FindName(System.String)">
      <summary>Gets an object in the Silverlight object model by referencing the object's x:Name or <see cref="P:System.Windows.Documents.Inline.Name" /> attribute value.</summary>
      <returns>The object that has the specified name, or null if no object is retrieved.</returns>
      <param name="name">The name of the object to retrieve.</param>
    </member>
    <member name="P:System.Windows.Documents.Inline.FontFamily">
      <summary>Gets or sets the preferred top-level font family for the content in this element. </summary>
      <returns>The preferred font family, or a primary preferred font family with one or more fallback font families. See <see cref="T:System.Windows.Media.FontFamily" /> for default information.</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.FontSize">
      <summary>Gets or sets the font size for the content in this element. </summary>
      <returns>The desired font size in pixels. The default is 11 pixels.</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.FontStretch">
      <summary>Gets or sets the glyph width of the font in a family to select.</summary>
      <returns>One of the <see cref="T:System.Windows.FontStretches" /> property values, specifying the desired font stretch. The default is <see cref="P:System.Windows.FontStretches.Normal" />.</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.FontStyle">
      <summary>Gets or sets the font style for the content in this element.</summary>
      <returns>One of the <see cref="T:System.Windows.FontStyles" /> property values, specifying the font style. The default is <see cref="P:System.Windows.FontStyles.Normal" />.</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.FontWeight">
      <summary>Gets or sets the top-level font weight to select from the font family for the content in this element.</summary>
      <returns>One of the <see cref="T:System.Windows.FontWeights" /> property values, specifying the font weight. The default is <see cref="P:System.Windows.FontWeights.Normal" />.</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.Foreground">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> to apply to the content in this element. </summary>
      <returns>The brush that is applied to the text contents. The default is a <see cref="T:System.Windows.Media.SolidColorBrush" /> with <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> value <see cref="P:System.Windows.Media.Colors.Black" />.</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.Language">
      <summary>Gets or sets the language of the content within an <see cref="T:System.Windows.Documents.Inline" /> element.</summary>
      <returns>A value of type <see cref="T:System.Windows.Markup.XmlLanguage" />. The default is a <see cref="T:System.Windows.Markup.XmlLanguage" /> value created with the string en-US (<see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> is "en-US").</returns>
    </member>
    <member name="P:System.Windows.Documents.Inline.Name">
      <summary>Gets or sets a unique identification for the object. <see cref="P:System.Windows.Documents.Inline.Name" /> can only be set from initial parsing of XAML.</summary>
      <returns>The unique identifier for the object. This property is read-only for code, but write-only for XAML, due to special parser handling of XAML properties named "Name".</returns>
    </member>
    <member name="T:System.Windows.Ink.DrawingAttributes">
      <summary>Specifies drawing attributes that are used to draw a <see cref="T:System.Windows.Ink.Stroke" />.</summary>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.DrawingAttributes" /> class. </summary>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.Color">
      <summary>Gets or sets the color that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The color that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />. The default is Black.</returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.Height">
      <summary>Gets or sets the height of the stylus that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The height of the stylus that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />. The default is 2 pixels.</returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.OutlineColor">
      <summary>Gets or sets the outline color that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The outline color of the stylus that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />. The default is Black.</returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.Width">
      <summary>Gets or sets the width of the stylus that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The width of the stylus that is used to draw a <see cref="T:System.Windows.Ink.Stroke" />. The default is 2 pixels.</returns>
    </member>
    <member name="T:System.Windows.Ink.Stroke">
      <summary>Represents a collection of points that correspond to a stylus-down, move, and stylus-up sequence.</summary>
    </member>
    <member name="M:System.Windows.Ink.Stroke.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.Stroke" /> class.</summary>
    </member>
    <member name="M:System.Windows.Ink.Stroke.#ctor(System.Windows.Input.StylusPointCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.Stroke" /> class with the specified <see cref="T:System.Windows.Input.StylusPointCollection" />.</summary>
      <param name="stylusPoints">A <see cref="T:System.Windows.Input.StylusPointCollection" /> that represents the <see cref="T:System.Windows.Ink.Stroke" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stylusPoints" /> does not contain any stylus points.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylusPoints" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Ink.Stroke.DrawingAttributes">
      <summary>Gets or sets the properties of the stroke, such as <see cref="P:System.Windows.Ink.DrawingAttributes.Height" />, <see cref="P:System.Windows.Ink.DrawingAttributes.Width" />, <see cref="P:System.Windows.Ink.DrawingAttributes.Color" />, or <see cref="P:System.Windows.Ink.DrawingAttributes.OutlineColor" />. </summary>
      <returns>The <see cref="T:System.Windows.Ink.DrawingAttributes" /> of the stroke.</returns>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetBounds">
      <summary>Retrieves the bounding box for the <see cref="T:System.Windows.Ink.Stroke" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> structure defining the bounding box for the <see cref="T:System.Windows.Ink.Stroke" /> object.</returns>
    </member>
    <member name="M:System.Windows.Ink.Stroke.HitTest(System.Windows.Input.StylusPointCollection)">
      <summary>Indicates whether a specified <see cref="T:System.Windows.Input.StylusPointCollection" /> intersects with a <see cref="T:System.Windows.Ink.Stroke" /> object.</summary>
      <returns>true if the specified <see cref="T:System.Windows.Input.StylusPointCollection" /> intersects with the <see cref="T:System.Windows.Ink.Stroke" /> object; otherwise, false.</returns>
      <param name="stylusPointCollection">The <see cref="T:System.Windows.Input.StylusPointCollection" /> used to check for intersection with the <see cref="T:System.Windows.Ink.Stroke" /> object.</param>
    </member>
    <member name="P:System.Windows.Ink.Stroke.StylusPoints">
      <summary>Gets or sets the stylus points of the <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The <see cref="T:System.Windows.Input.StylusPointCollection" /> that contains the stylus points that represent the current <see cref="T:System.Windows.Ink.Stroke" />.</returns>
    </member>
    <member name="T:System.Windows.Ink.StrokeCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Ink.Stroke" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.StrokeCollection" /> class. </summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.GetBounds">
      <summary>Returns the bounds of the strokes in the collection.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> that contains the bounds of the strokes in the <see cref="T:System.Windows.Ink.StrokeCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.HitTest(System.Windows.Input.StylusPointCollection)">
      <summary>Indicates whether a specified <see cref="T:System.Windows.Input.StylusPointCollection" /> intersects with a <see cref="T:System.Windows.Ink.StrokeCollection" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the strokes that intersect with the points in the specified <see cref="T:System.Windows.Input.StylusPointCollection" />.</returns>
      <param name="stylusPointCollection">The <see cref="T:System.Windows.Input.StylusPointCollection" /> used to check for intersection with the <see cref="T:System.Windows.Ink.Stroke" /> object.</param>
    </member>
    <member name="T:System.Windows.Input.Cursor">
      <summary>Represents the image used for the mouse pointer.</summary>
    </member>
    <member name="M:System.Windows.Input.Cursor.ToString">
      <summary>Returns the string representation of the <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>The string representation of the cursor. This corresponds to the active <see cref="T:System.Windows.Input.Cursors" /> property name.</returns>
    </member>
    <member name="T:System.Windows.Input.Cursors">
      <summary>Defines a set of default mouse pointer images for Silverlight.</summary>
    </member>
    <member name="P:System.Windows.Input.Cursors.Arrow">
      <summary>Represents an Arrow <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>An Arrow <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Eraser">
      <summary>Represents an Eraser <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>An Eraser <see cref="T:System.Windows.Input.Cursor" />. </returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Hand">
      <summary>Represents a Hand <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>A Hand <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.IBeam">
      <summary>Represents an IBeam <see cref="T:System.Windows.Input.Cursor" />, which is typically used to show where the text cursor appears when the mouse is clicked. </summary>
      <returns>An IBeam <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.None">
      <summary>Represents a special <see cref="T:System.Windows.Input.Cursor" /> that is invisible. </summary>
      <returns>The None <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.SizeNESW">
      <summary>Represents a SizeNESW <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>A SizeNESW <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.SizeNS">
      <summary>Represents a SizeNS <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>A SizeNS <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.SizeNWSE">
      <summary>Represents a SizeNWSE <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>A SizeNWSE <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.SizeWE">
      <summary>Represents a SizeWE <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>A SizeWE <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Stylus">
      <summary>Represents a Stylus <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>A Stylus <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Wait">
      <summary>Represents a Wait<see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>A Wait <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="T:System.Windows.Input.FocusManager">
      <summary>Provides utility methods related to element focus, without the need to handle focus-related events.</summary>
    </member>
    <member name="M:System.Windows.Input.FocusManager.GetFocusedElement">
      <summary>Queries the Silverlight focus system to determine which object has focus. </summary>
      <returns>The object that currently has focus.  Typically, this is a <see cref="T:System.Windows.Controls.Control" /> class. </returns>
    </member>
    <member name="T:System.Windows.Input.ICommand">
      <summary>Defines the contract for commanding, using the same contract as used in WPF.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
      <summary>Defines the method that determines whether the command can execute in its current state.</summary>
      <returns>true if this command can be executed; otherwise, false.</returns>
      <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null. </param>
    </member>
    <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
      <summary>Occurs when changes occur that affect whether the command should execute.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
      <summary>Defines the method to be called when the command is invoked.</summary>
      <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null. </param>
    </member>
    <member name="T:System.Windows.Input.ImeConversionModeValues">
      <summary>Describes a mode of input conversion to be performed by an input method editor interacting with a Silverlight-based application.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Alphanumeric">
      <summary>The input method uses alphanumeric conversion mode. </summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Native">
      <summary>The input method uses a native character (Hiragana, Hangul, Chinese) conversion mode. </summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Katakana">
      <summary>The input method uses Katakana conversion mode. </summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.FullShape">
      <summary>The input method uses full-shape conversion mode. </summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Roman">
      <summary>The input method uses Roman character conversion mode. </summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.CharCode">
      <summary>The input method uses character code conversion mode. </summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.NoConversion">
      <summary>The input method will not perform any input conversion. </summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Eudc">
      <summary>The input method uses EUDC (end user defined character) conversion mode. </summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Symbol">
      <summary>The input method uses symbol conversion mode. </summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Fixed">
      <summary>The input method uses fixed conversion mode. </summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.DoNotCare">
      <summary>The input method does not care what input conversion method is used; the actual conversion method is indeterminate. </summary>
    </member>
    <member name="T:System.Windows.Input.InputMethod">
      <summary>Specifies attached properties that influence input method editor (IME) features and support when used with a Silverlight-based application.</summary>
    </member>
    <member name="M:System.Windows.Input.InputMethod.GetIsInputMethodEnabled(System.Windows.DependencyObject)">
      <summary>Gets the value for the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property on the specified object.</summary>
      <returns>The <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property value.</returns>
      <param name="target">The object to get the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property value from.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not a <see cref="T:System.Windows.Controls.TextBox" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputMethod.GetPreferredImeConversionMode(System.Windows.DependencyObject)">
      <summary>Gets the value for the <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode" /> attached property on the specified object.</summary>
      <returns>The <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode" /> attached property value.</returns>
      <param name="target">The object to get the <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode" /> attached property value from.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not a <see cref="T:System.Windows.Controls.TextBox" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputMethod.GetPreferredImeState(System.Windows.DependencyObject)">
      <summary>Gets the value for the <see cref="P:System.Windows.Input.InputMethod.PreferredImeState" /> attached property on the specified object.</summary>
      <returns>The <see cref="P:System.Windows.Input.InputMethod.PreferredImeState" /> attached property value.</returns>
      <param name="target">The object to get the <see cref="P:System.Windows.Input.InputMethod.PreferredImeState" /> attached property value from.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not a <see cref="T:System.Windows.Controls.TextBox" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Input.InputMethod.IsInputMethodEnabled">
      <summary>Gets or sets a value that determines whether input method editors can be used to provide input for the control where the property is attached.</summary>
      <returns>true if input method editors can be used to provide input; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Input.InputMethod.IsInputMethodEnabledProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethod.PreferredImeConversionMode">
      <summary>Gets or sets a preferred <see cref="T:System.Windows.Input.ImeConversionModeValues" /> value for a specified dependency object.</summary>
      <returns>A preferred <see cref="T:System.Windows.Input.ImeConversionModeValues" /> value for a specified dependency object.</returns>
    </member>
    <member name="F:System.Windows.Input.InputMethod.PreferredImeConversionModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethod.PreferredImeState">
      <summary>Gets or sets a preferred input method state for a specified dependency object.</summary>
      <returns>A preferred input method state for a specified dependency object.</returns>
    </member>
    <member name="F:System.Windows.Input.InputMethod.PreferredImeStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputMethod.PreferredImeState" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.InputMethod.PreferredImeState" /> attached property.</returns>
    </member>
    <member name="M:System.Windows.Input.InputMethod.SetIsInputMethodEnabled(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets the value for the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property on the specified object.</summary>
      <param name="target">The object on which to set the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property value.</param>
      <param name="value">The value to set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not a <see cref="T:System.Windows.Controls.TextBox" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputMethod.SetPreferredImeConversionMode(System.Windows.DependencyObject,System.Windows.Input.ImeConversionModeValues)">
      <summary>Sets the value for the <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode" /> attached property on the specified object.</summary>
      <param name="target">The object on which to set the <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode" /> attached property value.</param>
      <param name="value">The value to set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not a <see cref="T:System.Windows.Controls.TextBox" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputMethod.SetPreferredImeState(System.Windows.DependencyObject,System.Windows.Input.InputMethodState)">
      <summary>Sets the value for the <see cref="P:System.Windows.Input.InputMethod.PreferredImeState" /> attached property on the specified object.</summary>
      <param name="target">The object on which to set the <see cref="P:System.Windows.Input.InputMethod.PreferredImeState" /> attached property value.</param>
      <param name="value">The value to set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not a <see cref="T:System.Windows.Controls.TextBox" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Input.InputMethodState">
      <summary>Describes the state of an input method editor when it interacts with a Silverlight-based application.</summary>
    </member>
    <member name="F:System.Windows.Input.InputMethodState.Off">
      <summary>The input method editor is off for purposes of generating device independent input. </summary>
    </member>
    <member name="F:System.Windows.Input.InputMethodState.On">
      <summary>The input method editor is on. </summary>
    </member>
    <member name="F:System.Windows.Input.InputMethodState.DoNotCare">
      <summary>The input method is in an indeterminate state. </summary>
    </member>
    <member name="T:System.Windows.Input.InputScope">
      <summary>Represents information related to the scope of data provided by an input method.</summary>
    </member>
    <member name="M:System.Windows.Input.InputScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputScope" /> class. </summary>
    </member>
    <member name="P:System.Windows.Input.InputScope.Names">
      <summary>Gets or sets the input scope names, as a list of strings.</summary>
      <returns>The input scope names, as a list of strings.</returns>
    </member>
    <member name="T:System.Windows.Input.InputScopeConverter">
      <summary>Provides type conversion support for the <see cref="T:System.Windows.Input.InputScope" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.InputScopeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputScopeConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.InputScopeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert an object of one type to the <see cref="T:System.Windows.Input.InputScope" /> type. </summary>
      <returns>true if <paramref name="sourceType" /> is type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from. </param>
    </member>
    <member name="M:System.Windows.Input.InputScopeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether conversion is possible to the specified type from a <see cref="T:System.Windows.Input.InputScope" /> object.</summary>
      <returns>This implementation always returns false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="destinationType">The intended destination type for the conversion.</param>
    </member>
    <member name="M:System.Windows.Input.InputScopeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to an <see cref="T:System.Windows.Input.InputScope" /> object. </summary>
      <returns>The <see cref="T:System.Windows.Input.InputScope" /> created from converting source.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">Describes the intended <see cref="T:System.Globalization.CultureInfo" /> for the conversion.</param>
      <param name="source">The object that the converter should convert.</param>
    </member>
    <member name="M:System.Windows.Input.InputScopeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified value object to the specified type. </summary>
      <returns>The converted object.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">Describes the intended <see cref="T:System.Globalization.CultureInfo" /> for the conversion.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The intended destination type for the conversion.</param>
    </member>
    <member name="T:System.Windows.Input.InputScopeName">
      <summary>Defines a name for text input patterns.</summary>
    </member>
    <member name="M:System.Windows.Input.InputScopeName.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputScopeName" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.InputScopeName.#ctor(System.Windows.Input.InputScopeNameValue)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputScopeName" /> class using an initializing <see cref="T:System.Windows.Input.InputScopeNameValue" />.</summary>
      <param name="nameValue">The input scope name value, as a value of the <see cref="T:System.Windows.Input.InputScopeNameValue" /> enumeration.</param>
    </member>
    <member name="P:System.Windows.Input.InputScopeName.NameValue">
      <summary>Gets or sets the input scope name value, which modifies how input from alternative input methods is interpreted.</summary>
      <returns>A value of the enumeration.</returns>
    </member>
    <member name="T:System.Windows.Input.InputScopeNameConverter">
      <summary>Provides type conversion support for the <see cref="T:System.Windows.Input.InputScopeName" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.InputScopeNameConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputScopeNameConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.InputScopeNameConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert an object of one type to the <see cref="T:System.Windows.Input.InputScopeName" /> type. </summary>
      <returns>true if <paramref name="sourceType" /> is type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from. </param>
    </member>
    <member name="M:System.Windows.Input.InputScopeNameConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether conversion is possible to the specified type from a <see cref="T:System.Windows.Input.InputScopeName" /> object.</summary>
      <returns>true if <paramref name="destinationType" /> is a type that this converter can convert to <see cref="T:System.Windows.Input.InputScopeName" />; otherwise, false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="destinationType">The intended destination type for the conversion.</param>
    </member>
    <member name="M:System.Windows.Input.InputScopeNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to an <see cref="T:System.Windows.Input.InputScopeName" /> object. </summary>
      <returns>The <see cref="T:System.Windows.Input.InputScopeName" /> created from converting source.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">Describes the intended <see cref="T:System.Globalization.CultureInfo" /> for the conversion.</param>
      <param name="source">The object that the converter should convert.</param>
    </member>
    <member name="M:System.Windows.Input.InputScopeNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified value object to the specified type. </summary>
      <returns>The converted object.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">Describes the intended <see cref="T:System.Globalization.CultureInfo" /> for the conversion.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The intended destination type for the conversion.</param>
    </member>
    <member name="T:System.Windows.Input.InputScopeNameValue">
      <summary>Specifies the input scope name, which modifies how input from alternative input methods is interpreted.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.AddressCity">
      <summary>The text input pattern for a city address.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.AddressCountryName">
      <summary>The text input pattern for the name of a country/region.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.AddressCountryShortName">
      <summary>The text input pattern for the abbreviated name of a country/region.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.AddressStateOrProvince">
      <summary>The text input pattern for a state or province.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.AddressStreet">
      <summary>The text input pattern for a street address.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.AlphanumericFullWidth">
      <summary>The text input pattern for alphanumeric full-width characters.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.AlphanumericHalfWidth">
      <summary>The text input pattern for alphanumeric half-width characters.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.ApplicationEnd">
      <summary>Not supported. For internal use in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Bopomofo">
      <summary>The text input pattern for the Bopomofo Mandarin Chinese phonetic transcription system.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Chat">
      <summary>The SIP layout for text messaging, which recognizes pre-defined abbreviations. Supported only in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.CurrencyAmount">
      <summary>The text input pattern for amount of currency.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.CurrencyAmountAndSymbol">
      <summary>The text input pattern for amount and symbol of currency.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.CurrencyChinese">
      <summary>The text input pattern for Chinese currency.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Date">
      <summary>The text input pattern for a calendar date.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.DateDay">
      <summary>The text input pattern for the numeric day in a calendar date.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.DateDayName">
      <summary>The text input pattern for the name of the day in a calendar date.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.DateMonth">
      <summary>The text input pattern for the numeric month in a calendar date.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.DateMonthName">
      <summary>The text input pattern for the name of the month in a calendar date.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.DateYear">
      <summary>The text input pattern for the year in a calendar date.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Default">
      <summary>The default handling of input commands.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Digits">
      <summary>The text input pattern for digits.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.EmailNameOrAddress">
      <summary>The SIP layout for an e-mail name or address. Supported only in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.EmailSmtpAddress">
      <summary>The text input pattern for a Simple Mail Transfer Protocol (SMTP) email address.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.EmailUserName">
      <summary>The text input pattern for an email user name.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.FileName">
      <summary>The text input pattern for a file name.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.FullFilePath">
      <summary>The text input pattern for the full path of a file.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Hanja">
      <summary>The text input pattern for Hanja characters.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Hiragana">
      <summary>The text input pattern for the Hiragana writing system.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.KatakanaFullWidth">
      <summary>The text input pattern for full-width Katakana characters.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.KatakanaHalfWidth">
      <summary>The text input pattern for half-width Katakana characters.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.LogOnName">
      <summary>The text input pattern for a log on name.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Maps">
      <summary>The SIP layout for entering a map location. Supported only in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.NameOrPhoneNumber">
      <summary>The SIP layout for SMS To field. Supported only in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Number">
      <summary>The text input pattern for a number.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.NumberFullWidth">
      <summary>The text input pattern for a full-width number.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.OneChar">
      <summary>The text input pattern for one character.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Password">
      <summary>The text input pattern for a password.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.PersonalFullName">
      <summary>The text input pattern for a person's full name.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.PersonalGivenName">
      <summary>The text input pattern for a person's given name.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.PersonalMiddleName">
      <summary>The text input pattern for a person's middle name.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.PersonalNamePrefix">
      <summary>The text input pattern for the prefix of a person's name.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.PersonalNameSuffix">
      <summary>The text input pattern for the suffix of a person's name.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.PersonalSurname">
      <summary>The text input pattern for a person's surname.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.PhraseList">
      <summary>The text input pattern for a phrase list.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.PostalAddress">
      <summary>The text input pattern for a postal address.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.PostalCode">
      <summary>The text input pattern for a postal code.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Private">
      <summary>Not supported. For internal use in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.RegularExpression">
      <summary>The text input pattern for a regular expression.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Search">
      <summary>The SIP layout for a search query. Supported only in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Srgs">
      <summary>The text input pattern for the Speech Recognition Grammar Specification (SRGS).</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.TelephoneAreaCode">
      <summary>The text input pattern for a telephone area code.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.TelephoneCountryCode">
      <summary>The text input pattern for a telephone country/region code.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.TelephoneLocalNumber">
      <summary>The text input pattern for a telephone local number.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.TelephoneNumber">
      <summary>The text input pattern for a telephone number.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Text">
      <summary>The software input panel (SIP) layout for standard text input. Supported only in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Time">
      <summary>The text input pattern for the time.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.TimeHour">
      <summary>The text input pattern for the hour of the time.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.TimeMinorSec">
      <summary>The text input pattern for the minutes or seconds of time.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Url">
      <summary>The text input pattern for a Uniform Resource Locator (URL).</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Xml">
      <summary>The text input pattern for XML.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.EnumString">
      <summary>Not supported. For internal use in Silverlight for Windows Phone.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Yomi">
      <summary>Not supported. For internal use in Silverlight for Windows Phone.</summary>
    </member>
    <member name="T:System.Windows.Input.Key">
      <summary>Specifies the possible key values on a keyboard. </summary>
    </member>
    <member name="F:System.Windows.Input.Key.None">
      <summary>A special value indicating no key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Back">
      <summary>The BACKSPACE key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Tab">
      <summary>The TAB key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Enter">
      <summary>The ENTER key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Shift">
      <summary>The SHIFT key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Ctrl">
      <summary>The CTRL (control) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Alt">
      <summary>The ALT key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.CapsLock">
      <summary>The CAPSLOCK key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Escape">
      <summary>The ESC (also known as ESCAPE) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Space">
      <summary>The SPACE key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageUp">
      <summary>The PAGEUP key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageDown">
      <summary>The PAGEDOWN key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.End">
      <summary>The END key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Home">
      <summary>The HOME key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Left">
      <summary>The left arrow key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Up">
      <summary>The up arrow key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Right">
      <summary>The right arrow key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Down">
      <summary>The down arrow key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Insert">
      <summary>The INSERT key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Delete">
      <summary>The DEL (also known as DELETE) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D0">
      <summary>The 0 (zero) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D1">
      <summary>The 1 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D2">
      <summary>The 2 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D3">
      <summary>The 3 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D4">
      <summary>The 4 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D5">
      <summary>The 5 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D6">
      <summary>The 6 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D7">
      <summary>The 7 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D8">
      <summary>The 8 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D9">
      <summary>The 9 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.A">
      <summary>The A key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.B">
      <summary>The B key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.C">
      <summary>The C key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D">
      <summary>The D key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.E">
      <summary>The E key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F">
      <summary>The F key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.G">
      <summary>The G key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.H">
      <summary>The H key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.I">
      <summary>The I key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.J">
      <summary>The J key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.K">
      <summary>The K key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.L">
      <summary>The L key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.M">
      <summary>The M key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.N">
      <summary>The N key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.O">
      <summary>The O key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.P">
      <summary>The P key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Q">
      <summary>The Q key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.R">
      <summary>The R key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.S">
      <summary>The S key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.T">
      <summary>The T key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.U">
      <summary>The U key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.V">
      <summary>The V key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.W">
      <summary>The W key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.X">
      <summary>The X key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Y">
      <summary>The Y key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Z">
      <summary>The Z key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F1">
      <summary>The F1 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F2">
      <summary>The F2 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F3">
      <summary>The F3 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F4">
      <summary>The F4 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F5">
      <summary>The F5 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F6">
      <summary>The F6 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F7">
      <summary>The F7 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F8">
      <summary>The F8 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F9">
      <summary>The F9 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F10">
      <summary>The F10 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F11">
      <summary>The F11 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F12">
      <summary>The F12 key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad0">
      <summary>The 0 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad1">
      <summary>The 1 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad2">
      <summary>The 2 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad3">
      <summary>The 3 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad4">
      <summary>The 4 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad5">
      <summary>The 5 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad6">
      <summary>The 6 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad7">
      <summary>The 7 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad8">
      <summary>The 8 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad9">
      <summary>The 9 key on the number pad.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Multiply">
      <summary>The * (MULTIPLY) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Add">
      <summary>The + (ADD) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Subtract">
      <summary>The - (SUBTRACT) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Decimal">
      <summary>The . (DECIMAL) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Divide">
      <summary>The / (DIVIDE) key.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Unknown">
      <summary>A special value indicating the key is out of range of this enumeration.</summary>
    </member>
    <member name="T:System.Windows.Input.Keyboard">
      <summary>Represents the keyboard device. </summary>
    </member>
    <member name="P:System.Windows.Input.Keyboard.Modifiers">
      <summary>Gets the set of <see cref="T:System.Windows.Input.ModifierKeys" /> that are currently pressed. </summary>
      <returns>A bitwise combination of the enumeration values.</returns>
    </member>
    <member name="T:System.Windows.Input.KeyboardNavigationMode">
      <summary>Specifies the tabbing behavior across tab stops for a Silverlight tabbing sequence within a container.</summary>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigationMode.Local">
      <summary>Tab indexes are considered on the local subtree only inside this container.</summary>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigationMode.Cycle">
      <summary>Focus returns to the first or the last keyboard navigation stop inside of a container when the first or last keyboard navigation stop is reached.</summary>
    </member>
    <member name="F:System.Windows.Input.KeyboardNavigationMode.Once">
      <summary>The container and all of its child elements as a whole receive focus only once. </summary>
    </member>
    <member name="T:System.Windows.Input.KeyEventArgs">
      <summary>Provides event data for the <see cref="E:System.Windows.UIElement.KeyUp" /> and <see cref="E:System.Windows.UIElement.KeyDown" /> events.</summary>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.Handled">
      <summary>Gets or sets a value that marks the routed event as handled. A true value for Handled prevents most handlers along the event route from handling the same event again.</summary>
      <returns>true to mark the routed event handled; false to leave the routed event unhandled, which permits the event to potentially route further. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.Key">
      <summary>Gets the keyboard key associated with the event. </summary>
      <returns>One of the enumeration values that indicates the key referenced by the event.</returns>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.PlatformKeyCode">
      <summary>Gets an integer value that represents the key that is pressed or released (depending on which event is raised). This value is the nonportable key code, which is operating system–specific.</summary>
      <returns>The key code value.</returns>
    </member>
    <member name="T:System.Windows.Input.KeyEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.UIElement.KeyUp" /> and <see cref="E:System.Windows.UIElement.KeyDown" /> events.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.ManipulationCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event. </summary>
    </member>
    <member name="M:System.Windows.Input.ManipulationCompletedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ManipulationCompletedEventArgs" /> class. </summary>
    </member>
    <member name="P:System.Windows.Input.ManipulationCompletedEventArgs.FinalVelocities">
      <summary>Gets the velocities that are used for the manipulation.</summary>
      <returns>The velocities that are used for the manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationCompletedEventArgs.Handled">
      <summary>Gets or sets a value that marks the routed event as handled. Setting to true prevents most handlers along the event route from handling the same event again.</summary>
      <returns>true to mark the routed event handled; false to leave the routed event unhandled, which permits the event to potentially route further. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationCompletedEventArgs.IsInertial">
      <summary>Gets whether the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event occurs during inertia.</summary>
      <returns>true if the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event occurs during inertia; false if the event occurs while the user's input device has contact with the element.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationCompletedEventArgs.ManipulationContainer">
      <summary>Gets the container that defines the coordinates for the manipulation.</summary>
      <returns>The container element.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationCompletedEventArgs.ManipulationOrigin">
      <summary>Gets the point from which the manipulation originated.</summary>
      <returns>The point from which the manipulation originated.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation">
      <summary>Gets the total transformation that occurs during the current manipulation.</summary>
      <returns>The total transformation that occurs during the current manipulation.</returns>
    </member>
    <member name="T:System.Windows.Input.ManipulationDelta">
      <summary>Contains transformation data that is accumulated when manipulation events occur.</summary>
    </member>
    <member name="M:System.Windows.Input.ManipulationDelta.#ctor(System.Windows.Point,System.Windows.Point)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ManipulationDelta" /> class, using initial data. </summary>
      <param name="translation">Translation transformation to report.</param>
      <param name="scale">Initial scale transformation to report.</param>
    </member>
    <member name="P:System.Windows.Input.ManipulationDelta.Scale">
      <summary>Gets the amount the manipulation has resized as a multiplier.</summary>
      <returns>The amount the manipulation has resized as a multiplier.</returns>
    </member>
    <member name="F:System.Windows.Input.ManipulationDelta.ScaleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.ManipulationDelta.Scale" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.ManipulationDelta.Scale" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationDelta.Translation">
      <summary>Gets the linear motion of the manipulation.</summary>
      <returns>The linear motion of the manipulation.</returns>
    </member>
    <member name="F:System.Windows.Input.ManipulationDelta.TranslationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.ManipulationDelta.Translation" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.ManipulationDelta.Translation" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Input.ManipulationDeltaEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event. </summary>
    </member>
    <member name="M:System.Windows.Input.ManipulationDeltaEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ManipulationDeltaEventArgs" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.ManipulationDeltaEventArgs.Complete">
      <summary>Completes the manipulation without inertia.</summary>
    </member>
    <member name="P:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation">
      <summary>Gets the accumulated changes of the current manipulation, as a <see cref="T:System.Windows.Input.ManipulationDelta" />.</summary>
      <returns>The accumulated changes of the current manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation">
      <summary>Gets the most recent changes of the current manipulation, as a <see cref="T:System.Windows.Input.ManipulationDelta" />.</summary>
      <returns>The most recent changes of the current manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationDeltaEventArgs.Handled">
      <summary>Gets or sets a value that marks the routed event as handled. Setting to true prevents most handlers along the event route from handling the same event again.</summary>
      <returns>true to mark the routed event handled; false to leave the routed event unhandled, which permits the event to potentially route further. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial">
      <summary>Gets whether the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event occurs during inertia.</summary>
      <returns>true if the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event occurs during inertia; false if the event occurs while the user's input device has contact with the element.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer">
      <summary>Gets the container that defines the coordinates for the manipulation.</summary>
      <returns>The container element.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin">
      <summary>Gets the point from which the manipulation originated.</summary>
      <returns>The point from which the manipulation originated.</returns>
    </member>
    <member name="M:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia">
      <summary>Starts inertia on the manipulation by ignoring subsequent contact movements and raising the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> event.</summary>
    </member>
    <member name="P:System.Windows.Input.ManipulationDeltaEventArgs.Velocities">
      <summary>Gets the rates of the most recent changes to the manipulation.</summary>
      <returns>The rates of the most recent changes to the manipulation.</returns>
    </member>
    <member name="T:System.Windows.Input.ManipulationStartedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> event. </summary>
    </member>
    <member name="M:System.Windows.Input.ManipulationStartedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ManipulationStartedEventArgs" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.ManipulationStartedEventArgs.Complete">
      <summary>Completes the manipulation without inertia.</summary>
    </member>
    <member name="P:System.Windows.Input.ManipulationStartedEventArgs.Handled">
      <summary>Gets or sets a value that marks the routed event as handled. Setting to true prevents most handlers along the event route from handling the same event again.</summary>
      <returns>true to mark the routed event handled; false to leave the routed event unhandled, which permits the event to potentially route further. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer">
      <summary>Gets the container that defines the coordinates for the manipulation.</summary>
      <returns>The container element.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin">
      <summary>Gets the point from which the manipulation originated.</summary>
      <returns>The point from which the manipulation originated.</returns>
    </member>
    <member name="T:System.Windows.Input.ManipulationVelocities">
      <summary>Describes the speed at which manipulations occurs.</summary>
    </member>
    <member name="M:System.Windows.Input.ManipulationVelocities.#ctor(System.Windows.Point,System.Windows.Point)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ManipulationVelocities" /> class using initial values. </summary>
      <param name="linear">Linear rate to report.</param>
      <param name="expansion">Expansion rate to report.</param>
    </member>
    <member name="P:System.Windows.Input.ManipulationVelocities.ExpansionVelocity">
      <summary>Gets the rate at which the manipulation resized. </summary>
      <returns>The rate at which the manipulation resized. </returns>
    </member>
    <member name="F:System.Windows.Input.ManipulationVelocities.ExpansionVelocityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.ManipulationVelocities.ExpansionVelocity" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.ManipulationVelocities.ExpansionVelocity" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationVelocities.LinearVelocity">
      <summary>Gets the speed of linear motion.</summary>
      <returns>The speed of linear motion.</returns>
    </member>
    <member name="F:System.Windows.Input.ManipulationVelocities.LinearVelocityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.ManipulationVelocities.LinearVelocity" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.ManipulationVelocities.LinearVelocity" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Input.ModifierKeys">
      <summary>Specifies the set of modifier keys. </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.None">
      <summary>No modifiers are pressed. </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Alt">
      <summary>The ALT key is pressed.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Control">
      <summary>The CTRL key is pressed.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Shift">
      <summary>The SHIFT key is pressed.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Windows">
      <summary>The Windows logo key is pressed.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Apple">
      <summary>The Apple key (also known as the Open Apple key) is pressed.</summary>
    </member>
    <member name="T:System.Windows.Input.MouseButtonEventArgs">
      <summary>Provides event data for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> and <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> events. </summary>
    </member>
    <member name="P:System.Windows.Input.MouseButtonEventArgs.Handled">
      <summary>Gets or sets a value that marks the routed event as handled. A true value for Handled prevents most handlers along the event route from handling the same event again.</summary>
      <returns>true to mark the routed event handled. false to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is false.</returns>
    </member>
    <member name="T:System.Windows.Input.MouseButtonEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> and <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> events. </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.MouseEventArgs">
      <summary>Provides data for mouse-related events that do not specifically involve mouse buttons, for example <see cref="E:System.Windows.UIElement.MouseMove" />.</summary>
    </member>
    <member name="M:System.Windows.Input.MouseEventArgs.GetPosition(System.Windows.UIElement)">
      <summary>Returns the x- and y-coordinates of the mouse pointer position, optionally evaluated against a coordinate origin of a supplied <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>A <see cref="T:System.Windows.Point" /> that represents the current x- and y-coordinates of the mouse pointer position. If null was passed as <paramref name="relativeTo" />, this coordinate is for the overall Silverlight plug-in content area. If a non-null <paramref name="relativeTo" /> was passed, this coordinate is relative to the object referenced by <paramref name="relativeTo" />.</returns>
      <param name="relativeTo">Any <see cref="T:System.Windows.UIElement" />-derived object that is contained by the Silverlight plug-in and connected to the object tree. To specify the object relative to the overall Silverlight coordinate system, use a <paramref name="relativeTo" /> value of null.</param>
    </member>
    <member name="P:System.Windows.Input.MouseEventArgs.StylusDevice">
      <summary>Gets an object that reports stylus device information, such as the collection of stylus points associated with the input.</summary>
      <returns>The stylus device information object.</returns>
    </member>
    <member name="T:System.Windows.Input.MouseEventHandler">
      <summary>Represents the method that will handle mouse related routed events that do not specifically involve mouse buttons; for example, <see cref="E:System.Windows.UIElement.MouseMove" />.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.MouseWheelEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.UIElement.MouseWheel" /> routed event. </summary>
    </member>
    <member name="P:System.Windows.Input.MouseWheelEventArgs.Delta">
      <summary>Gets a value that indicates the amount that the mouse wheel rotated relative to its starting state or to the last occurrence of the event. </summary>
      <returns>An integer value that provides a factor of how much the mouse wheel rotated. This value can be a negative integer; see Remarks.</returns>
    </member>
    <member name="P:System.Windows.Input.MouseWheelEventArgs.Handled">
      <summary>Gets or sets a value that marks the routed event as handled, and prevents most handlers along the event route from rehandling the same event.</summary>
      <returns>true if the routed event is marked as handled. false if the routed event is kept unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is false.</returns>
    </member>
    <member name="T:System.Windows.Input.MouseWheelEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.UIElement.MouseWheel" /> routed event.</summary>
      <param name="sender">The object where the event handler is attached. </param>
      <param name="e">The event data for the event.</param>
    </member>
    <member name="T:System.Windows.Input.StylusDevice">
      <summary>Reports stylus device information, such as the collection of stylus points associated with the input.</summary>
    </member>
    <member name="P:System.Windows.Input.StylusDevice.DeviceType">
      <summary>Gets the type of the tablet device.</summary>
      <returns>The type of the tablet device.</returns>
    </member>
    <member name="M:System.Windows.Input.StylusDevice.GetStylusPoints(System.Windows.UIElement)">
      <summary>Returns the stylus points collected since the last mouse event.</summary>
      <returns>A collection of the stylus points collected since the last mouse event.</returns>
      <param name="relativeTo">Specifies the offset for the object (typically an <see cref="T:System.Windows.Controls.InkPresenter" />) that should be applied to captured points.</param>
    </member>
    <member name="P:System.Windows.Input.StylusDevice.Inverted">
      <summary>Gets or sets a value that indicates whether the stylus is inverted.</summary>
      <returns>true if the stylus is inverted; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Windows.Input.StylusPoint">
      <summary>Represents a single point collected while the user is entering ink strokes with the stylus or mouse.</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPoint.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPoint" /> class. </summary>
      <param name="x">The x-coordinate of the <see cref="T:System.Windows.Input.StylusPoint" /> in a pixel grid.</param>
      <param name="y">The y-coordinate of the <see cref="T:System.Windows.Input.StylusPoint" /> in a pixel grid.</param>
    </member>
    <member name="P:System.Windows.Input.StylusPoint.PressureFactor">
      <summary>Gets or sets the pressure factor of the stylus on the screen.</summary>
      <returns>The pressure factor of the stylus on the screen. The default is 0.5.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Windows.Input.StylusPoint.PressureFactor" />
                is set to a value that is less than 0 or greater than 1.0.</exception>
    </member>
    <member name="P:System.Windows.Input.StylusPoint.X">
      <summary>Gets or sets the value for the x-coordinate of the <see cref="T:System.Windows.Input.StylusPoint" />.</summary>
      <returns>The x-coordinate of the <see cref="T:System.Windows.Input.StylusPoint" /> in a pixel grid. The default is 0.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Windows.Input.StylusPoint.X" /> is set a value that evaluates to infinity or a value that is not a number.</exception>
    </member>
    <member name="P:System.Windows.Input.StylusPoint.Y">
      <summary>Gets or sets the value for the y-coordinate of the <see cref="T:System.Windows.Input.StylusPoint" />.</summary>
      <returns>The y-coordinate of the <see cref="T:System.Windows.Input.StylusPoint" /> in a pixel grid. The default is 0.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Windows.Input.StylusPoint.Y" /> is set a value that evaluates to infinity or a value that is not a number.</exception>
    </member>
    <member name="T:System.Windows.Input.StylusPointCollection">
      <summary>Represents a collection of related <see cref="T:System.Windows.Input.StylusPoint" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.StylusPointCollection" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.StylusPointCollection.Add(System.Windows.Input.StylusPointCollection)">
      <summary>Adds a collection of <see cref="T:System.Windows.Input.StylusPoint" /> objects to the collection. </summary>
      <param name="stylusPoints">The collection of <see cref="T:System.Windows.Input.StylusPoint" /> objects to add to the collection.</param>
    </member>
    <member name="T:System.Windows.Input.TabletDeviceType">
      <summary>Defines values for the type of devices the tablet device uses.</summary>
    </member>
    <member name="F:System.Windows.Input.TabletDeviceType.Mouse">
      <summary>Indicates the tablet device is a mouse.</summary>
    </member>
    <member name="F:System.Windows.Input.TabletDeviceType.Stylus">
      <summary>Indicates the tablet device is a stylus.</summary>
    </member>
    <member name="F:System.Windows.Input.TabletDeviceType.Touch">
      <summary>Indicates the tablet device is a touch screen.</summary>
    </member>
    <member name="T:System.Windows.Input.TextComposition">
      <summary>Represents a composition related to text input which includes the composition text itself.</summary>
    </member>
    <member name="P:System.Windows.Input.TextComposition.CompositionText">
      <summary>Gets the composition text for this text composition.</summary>
      <returns>The composition text for this text composition.</returns>
    </member>
    <member name="T:System.Windows.Input.TextCompositionEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.UIElement.TextInput" /> routed event. </summary>
    </member>
    <member name="P:System.Windows.Input.TextCompositionEventArgs.Handled">
      <summary>Gets or sets a value that marks the routed event as handled, and prevents most handlers along the event route from handling the same event again.</summary>
      <returns>true to mark the routed event handled. false to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Input.TextCompositionEventArgs.Text">
      <summary>Gets or sets the text string that of the text composition.</summary>
      <returns>The text string of the text composition.</returns>
    </member>
    <member name="P:System.Windows.Input.TextCompositionEventArgs.TextComposition">
      <summary>Gets or sets the text in the composition as a <see cref="T:System.Windows.Input.TextComposition" /> object.</summary>
      <returns>The text in the composition, as a <see cref="T:System.Windows.Input.TextComposition" /> object.</returns>
    </member>
    <member name="T:System.Windows.Input.TextCompositionEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.UIElement.TextInput" /> routed event.</summary>
      <param name="sender">The object where the event handler is attached. </param>
      <param name="e">Event data for the event.</param>
    </member>
    <member name="T:System.Windows.Input.Touch">
      <summary>Provides an application-level service that processes multitouch input from the operating system and raises the Silverlight-specific <see cref="E:System.Windows.Input.Touch.FrameReported" /> event.</summary>
    </member>
    <member name="E:System.Windows.Input.Touch.FrameReported">
      <summary>Occurs when the input system promotes a Windows 7 multitouch message for Silverlight.</summary>
    </member>
    <member name="T:System.Windows.Input.TouchAction">
      <summary>Describes the action of a specific touch point.</summary>
    </member>
    <member name="F:System.Windows.Input.TouchAction.Down">
      <summary>A touch action from a TOUCHEVENTF_DOWN message.</summary>
    </member>
    <member name="F:System.Windows.Input.TouchAction.Move">
      <summary>A touch action from a TOUCHEVENTF_MOVE message.</summary>
    </member>
    <member name="F:System.Windows.Input.TouchAction.Up">
      <summary>A touch action from a TOUCHEVENTF_UP message.</summary>
    </member>
    <member name="T:System.Windows.Input.TouchDevice">
      <summary>Identifies a "device" that produced the touch point. This is not a literal device, instead it distinguishes touch points through a down/move/up sequence.</summary>
    </member>
    <member name="M:System.Windows.Input.TouchDevice.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.TouchDevice" /> class. </summary>
    </member>
    <member name="P:System.Windows.Input.TouchDevice.DirectlyOver">
      <summary>Gets the topmost <see cref="T:System.Windows.UIElement" /> object that the mouse is over at the time that this touch point was produced.</summary>
      <returns>The topmost (in Z-order) <see cref="T:System.Windows.UIElement" /> object that the mouse is over at the time that this touch point was produced.</returns>
    </member>
    <member name="F:System.Windows.Input.TouchDevice.DirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.TouchDevice.DirectlyOver" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.TouchDevice.DirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Input.TouchDevice.Id">
      <summary>Gets a unique ID as provided by the operating system for a particular touch device.</summary>
      <returns>A unique ID for a particular touch device.</returns>
    </member>
    <member name="F:System.Windows.Input.TouchDevice.IdProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.TouchDevice.Id" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.TouchDevice.Id" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Input.TouchFrameEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Input.Touch.FrameReported" /> event. </summary>
    </member>
    <member name="M:System.Windows.Input.TouchFrameEventArgs.GetPrimaryTouchPoint(System.Windows.UIElement)">
      <summary>Returns the primary touch point for the reported frame as a <see cref="T:System.Windows.Input.TouchPoint" /> value. The touch point can be evaluated against a coordinate reference point instead of the absolute Silverlight coordinates.</summary>
      <returns>The primary touch point for the reported frame.</returns>
      <param name="relativeTo">A coordinate reference point that can be used to offset the coordinates of the return value <see cref="T:System.Windows.Input.TouchPoint" /> . If you want the reference to be based on Silverlight absolute coordinates, specify <paramref name="relativeTo" /> as null.</param>
    </member>
    <member name="M:System.Windows.Input.TouchFrameEventArgs.GetTouchPoints(System.Windows.UIElement)">
      <summary>Returns a collection of all <see cref="T:System.Windows.Input.TouchPoint" /> values in the reported frame. The touch point can be evaluated against a coordinate reference point instead of the absolute Silverlight coordinates.</summary>
      <returns>A collection of <see cref="T:System.Windows.Input.TouchPoint" /> values.</returns>
      <param name="relativeTo">A coordinate reference point that can be used to offset the coordinates of all <see cref="T:System.Windows.Input.TouchPoint" /> items in the returned collection. If you want the reference to be based on Silverlight absolute coordinates, specify <paramref name="relativeTo" /> as null.</param>
    </member>
    <member name="M:System.Windows.Input.TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp">
      <summary>Disables automatic mouse-event promotion for the primary touch point until all touch points report as <see cref="F:System.Windows.Input.TouchAction.Up" />.</summary>
      <exception cref="T:System.InvalidOperationException">No primary touch point was recorded.-or-The primary touch point has an action other than <see cref="F:System.Windows.Input.TouchAction.Down" />.</exception>
    </member>
    <member name="P:System.Windows.Input.TouchFrameEventArgs.Timestamp">
      <summary>Gets an integer time-stamp value for the event.</summary>
      <returns>An integer time-stamp value for the event.</returns>
    </member>
    <member name="T:System.Windows.Input.TouchFrameEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Input.Touch.FrameReported" /> event of <see cref="T:System.Windows.Input.Touch" />.</summary>
      <param name="sender">The object where the event is handled.</param>
      <param name="e">Data for the event.</param>
    </member>
    <member name="T:System.Windows.Input.TouchPoint">
      <summary>Represents a single touch point from a multitouch message source.</summary>
    </member>
    <member name="M:System.Windows.Input.TouchPoint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.TouchPoint" /> class. </summary>
    </member>
    <member name="P:System.Windows.Input.TouchPoint.Action">
      <summary>Gets the type of action (up, down, move) that the <see cref="T:System.Windows.Input.TouchPoint" /> represents.</summary>
      <returns>A value of the <see cref="T:System.Windows.Input.TouchAction" /> enumeration.</returns>
    </member>
    <member name="F:System.Windows.Input.TouchPoint.ActionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.TouchPoint.Action" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.TouchPoint.Action" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Input.TouchPoint.Position">
      <summary>Gets the X,Y coordinate position of the touch point as a <see cref="T:System.Windows.Point" />.</summary>
      <returns>A <see cref="T:System.Windows.Point" /> value that reports the coordinate position of the touch point.</returns>
    </member>
    <member name="F:System.Windows.Input.TouchPoint.PositionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.TouchPoint.Position" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.TouchPoint.Position" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Input.TouchPoint.Size">
      <summary>Gets the rectangular area that is reported as the touch-point contact area.</summary>
      <returns>A <see cref="T:System.Windows.Size" /> value. If the device that is used for multitouch input does not support reporting a touch size area, this property reports a <see cref="T:System.Windows.Size" /> with values of -1, instead of null.</returns>
    </member>
    <member name="F:System.Windows.Input.TouchPoint.SizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.TouchPoint.Size" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.TouchPoint.Size" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Input.TouchPoint.TouchDevice">
      <summary>Gets the specific device type that produced the touch point.</summary>
      <returns>A <see cref="P:System.Windows.Input.TouchPoint.TouchDevice" /> value that reports specific information about the generating device.</returns>
    </member>
    <member name="F:System.Windows.Input.TouchPoint.TouchDeviceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.TouchPoint.TouchDevice" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.TouchPoint.TouchDevice" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Input.TouchPointCollection">
      <summary>Contains a collection of <see cref="T:System.Windows.Input.TouchPoint" /> values.</summary>
    </member>
    <member name="P:System.Windows.Input.ManipulationCompletedEventArgs.IsTapEvent">
      <summary>Gets whether the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event occurs during a tap event.</summary>
      <returns>true if the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event occurs during a tap event; otherwise false.</returns>
    </member>
    <member name="M:System.Windows.Input.ManipulationDelta.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ManipulationDelta" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.ManipulationVelocities.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ManipulationVelocities" /> class. </summary>
    </member>
    <member name="T:System.Windows.Interop.Content">
      <summary>Reports details about the Silverlight-based application's instantiation settings, and exposes some of the HTML DOM values for the hosted Silverlight plug-in instance. <see cref="T:System.Windows.Interop.Content" /> contains APIs that specifically relate to the Silverlight content area (the area declared by the width and height in the initialization).</summary>
    </member>
    <member name="M:System.Windows.Interop.Content.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Interop.Content" /> class.</summary>
    </member>
    <member name="P:System.Windows.Interop.Content.ActualHeight">
      <summary>Gets the browser-determined height of the Silverlight plug-in content area.</summary>
      <returns>The browser-determined height of the Silverlight plug-in content area, in pixels. The default value is the height of the Silverlight plug-in, as specified by the HTML object element that instantiated it. </returns>
    </member>
    <member name="P:System.Windows.Interop.Content.ActualWidth">
      <summary>Gets the browser-determined width of the Silverlight plug-in content area.</summary>
      <returns>The browser-determined width of the Silverlight plug-in content area, in pixels. The default value is the width of the Silverlight plug-in, as specified by the HTML object element that instantiated it. </returns>
    </member>
    <member name="E:System.Windows.Interop.Content.FullScreenChanged">
      <summary>Occurs when the hosted Silverlight plug-in either enters or exits full-screen mode.</summary>
    </member>
    <member name="P:System.Windows.Interop.Content.FullScreenOptions">
      <summary>Gets or sets a value that indicates the behavior of full-screen mode.</summary>
      <returns>A value that indicates the behavior of full-screen mode. </returns>
    </member>
    <member name="P:System.Windows.Interop.Content.IsFullScreen">
      <summary>Gets or sets a value that indicates whether the Silverlight plug-in is displaying in full-screen mode.</summary>
      <returns>true if the Silverlight plug-in displays as a full-screen plug-in. false if the Silverlight plug-in displays as an embedded plug-in.</returns>
    </member>
    <member name="E:System.Windows.Interop.Content.Resized">
      <summary>Occurs when the <see cref="P:System.Windows.Interop.Content.ActualHeight" /> or the <see cref="P:System.Windows.Interop.Content.ActualWidth" /> of the Silverlight plug-in change.</summary>
    </member>
    <member name="E:System.Windows.Interop.Content.Zoomed">
      <summary>Occurs when the zoom setting in the host browser window changes or is initialized. </summary>
    </member>
    <member name="P:System.Windows.Interop.Content.ZoomFactor">
      <summary>Gets the factor by which the current browser window resizes its contents.  </summary>
      <returns>The zoom setting for the current browser window. </returns>
    </member>
    <member name="T:System.Windows.Interop.FullScreenOptions">
      <summary>Defines constants that indicate the behavior of full-screen mode. </summary>
    </member>
    <member name="F:System.Windows.Interop.FullScreenOptions.None">
      <summary>The application uses the default full-screen behavior.</summary>
    </member>
    <member name="F:System.Windows.Interop.FullScreenOptions.StaysFullScreenWhenUnfocused">
      <summary>The application does not exit full-screen mode when other applications gain focus. </summary>
    </member>
    <member name="T:System.Windows.Interop.HostingRenderTargetBitmap">
      <summary>Enables a native Silverlight host, such as Expression Blend or Visual Studio, to convert a <see cref="T:System.Windows.UIElement" /> object into a bitmap.</summary>
    </member>
    <member name="M:System.Windows.Interop.HostingRenderTargetBitmap.#ctor(System.Int32,System.Int32,System.IntPtr)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.Windows.Interop.HostingRenderTargetBitmap" /> class. </summary>
      <param name="width">The width of the <see cref="T:System.Windows.UIElement" /> to convert.</param>
      <param name="height">The height of the <see cref="T:System.Windows.UIElement" /> to convert.</param>
      <param name="bitmap">A pointer to the target bitmap.</param>
    </member>
    <member name="M:System.Windows.Interop.HostingRenderTargetBitmap.Render(System.Windows.UIElement)">
      <summary>Renders the <see cref="T:System.Windows.UIElement" /> object to the bitmap pointer specified in the constructor.</summary>
      <returns>The dirty rectangle. </returns>
      <param name="visual">The object to render.</param>
    </member>
    <member name="T:System.Windows.Interop.NavigationStateChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Interop.SilverlightHost.NavigationStateChanged" /> event. </summary>
    </member>
    <member name="M:System.Windows.Interop.NavigationStateChangedEventArgs.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Interop.NavigationStateChangedEventArgs" /> class. </summary>
      <param name="previousNavigationState">The URI fragment that represents the previous navigation state. </param>
      <param name="newNavigationState">The URI fragment that represents the new navigation state.</param>
    </member>
    <member name="P:System.Windows.Interop.NavigationStateChangedEventArgs.NewNavigationState">
      <summary>Gets the URI fragment that represents the new navigation state. </summary>
      <returns>The URI fragment that represents the new navigation state. </returns>
    </member>
    <member name="P:System.Windows.Interop.NavigationStateChangedEventArgs.PreviousNavigationState">
      <summary>Gets the URI fragment that represents the previous navigation state. </summary>
      <returns>The URI fragment that represents the previous navigation state. </returns>
    </member>
    <member name="T:System.Windows.Interop.Settings">
      <summary>Reports details about the Silverlight-based application's instantiation settings, and exposes some of the HTML DOM values for the hosted Silverlight plug-in instance. </summary>
    </member>
    <member name="M:System.Windows.Interop.Settings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Interop.Settings" /> object.</summary>
    </member>
    <member name="P:System.Windows.Interop.Settings.EnableAutoZoom">
      <summary>Gets or sets a value that indicates whether the Silverlight plug-in will resize its content based on the current browser zoom setting. </summary>
      <returns>true if Silverlight responds to the browser zoom setting; otherwise, false. The default is true if there is no handler for the <see cref="E:System.Windows.Interop.Content.Zoomed" /> event; otherwise, the default is false. </returns>
    </member>
    <member name="P:System.Windows.Interop.Settings.EnableCacheVisualization">
      <summary>Gets or sets a value that indicates whether to use a non-production analysis visualization mode, which shows areas of a page that are being GPU accelerated with a colored overlay. Do not use in production code.</summary>
      <returns>true if cache visualization is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Interop.Settings.EnableFrameRateCounter">
      <summary>Gets or sets a value that indicates whether a diagnostic frame rate counter should appear in the status area of the hosting browser. (Microsoft Internet Explorer only.)</summary>
      <returns>true if the frame rate counter is enabled. false if the frame rate counter is disabled. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Interop.Settings.EnableGPUAcceleration">
      <summary>Gets a value that indicates whether to use graphics processor unit (GPU) hardware acceleration for cached compositions, which potentially results in graphics optimization. </summary>
      <returns>true if hardware acceleration is enabled; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Interop.Settings.EnableHTMLAccess">
      <summary>Gets a value that indicates whether the Silverlight plug-in allows hosted content or its runtime to access the HTML DOM.</summary>
      <returns>true if hosted content can access the browser DOM; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Interop.Settings.EnableRedrawRegions">
      <summary>Gets or sets a value that indicates whether to show the areas of the Silverlight plug-in that are being redrawn each frame.</summary>
      <returns>true if the areas of the plug-in that are being redrawn each frame are shown; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Interop.Settings.MaxFrameRate">
      <summary>Gets or sets the maximum number of frames to render per second.</summary>
      <returns>An integer value that specifies the maximum number of frames to render per second. The default value is 60.</returns>
    </member>
    <member name="P:System.Windows.Interop.Settings.Windowless">
      <summary>Gets a value that indicates whether the Silverlight plug-in displays as a windowless plug-in. (Applies to Windows versions of Silverlight only.)</summary>
      <returns>true if the Silverlight plug-in displays as a windowless plug-in; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Interop.SilverlightHost">
      <summary>Reports details about the Silverlight-based application's instantiation settings, and exposes some of the HTML DOM values for the hosted Silverlight plug-in instance.</summary>
    </member>
    <member name="M:System.Windows.Interop.SilverlightHost.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Interop.SilverlightHost" /> class.</summary>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.Background">
      <summary>Gets the background color value that was applied to the Silverlight plug-in as part of instantiation settings.</summary>
      <returns>The background color for the Silverlight plug-in.</returns>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.Content">
      <summary>Gets the "Content" sub-object of this <see cref="T:System.Windows.Interop.SilverlightHost" />.</summary>
      <returns>The "Content" sub-object.</returns>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.InitParams">
      <summary>Gets the initialization parameters that were passed as part of HTML initialization of a Silverlight plug-in.</summary>
      <returns>The set of initialization parameters, as a dictionary with key strings and value strings.</returns>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.IsLoaded">
      <summary>Gets a value that indicates whether the hosted Silverlight plug-in has finished loading.</summary>
      <returns>true if the plug-in has finished loading; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Interop.SilverlightHost.IsVersionSupported(System.String)">
      <summary>Returns a value that indicates whether the installed Silverlight plug-in supports the specified version. </summary>
      <returns>true if the version can be supported by the installation; otherwise, false.</returns>
      <param name="versionStr">The version to check, in the form of major.minor.build.revision See Remarks for more information about the string form.</param>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.NavigationState">
      <summary>Gets or sets a URI fragment that represents the current navigation state.</summary>
      <returns>A URI fragment that represents the current navigation state.</returns>
      <exception cref="T:System.ArgumentNullException">When setting this property, the specified value is null.</exception>
    </member>
    <member name="E:System.Windows.Interop.SilverlightHost.NavigationStateChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Interop.SilverlightHost.NavigationState" /> property changes value.</summary>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.Settings">
      <summary>Gets the "Settings" sub-object of this <see cref="T:System.Windows.Interop.SilverlightHost" />.</summary>
      <returns>The "Settings" sub-object.</returns>
    </member>
    <member name="P:System.Windows.Interop.SilverlightHost.Source">
      <summary>Gets the URI of the package or XAML file that specifies the XAML content to render.</summary>
      <returns>The URI of the package, XAML file, or XAML scripting tag that contains the content to load into the Silverlight plug-in.</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentPropertyAttribute">
      <summary>Specifies which property of a class can be interpreted to be the content property when the class is parsed by a XAML processor.</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> class, using the specified content property name.</summary>
      <param name="name">The content property name.</param>
    </member>
    <member name="P:System.Windows.Markup.ContentPropertyAttribute.Name">
      <summary>Gets the name of the property that is the declared content property.</summary>
      <returns>A string that contains the name of the property that is the content property.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlParseException">
      <summary>The exception that is thrown when a XAML parsing exception occurs.</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlParseException.LineNumber">
      <summary>Gets the line number where the exception occurred.</summary>
      <returns>The number of the line on which the XAML parsing exception occurred.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlParseException.LinePosition">
      <summary>Gets the position in the line where the exception occurred.</summary>
      <returns>The position on the line where the XAML parsing exception occurred.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlReader">
      <summary>Provides a XAML processor engine for parsing XAML and creating corresponding Silverlight object trees.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlReader.Load(System.String)">
      <summary>Parses a well-formed XAML fragment and creates a corresponding Silverlight object tree, and returns the root of the object tree.</summary>
      <returns>The root object of the Silverlight object tree.</returns>
      <param name="xaml">A string that contains a valid XAML fragment.</param>
    </member>
    <member name="M:System.Windows.Markup.XamlReader.LoadWithInitialTemplateValidation(System.String)">
      <summary>[SECURITY CRITICAL] Cannot be called.</summary>
      <returns>Cannot be called.</returns>
      <param name="xaml">Cannot be called.</param>
    </member>
    <member name="T:System.Windows.Markup.XmlLanguage">
      <summary>Represents culture information for use in XML and XAML markup.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.Equals(System.Object)">
      <summary>Checks for equality of an object to the current object.</summary>
      <returns>true if the objects are the same object; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare to the calling object.</param>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.GetHashCode">
      <summary>Serves as a hash function for the <see cref="T:System.Windows.Markup.XmlLanguage" /> class.</summary>
      <returns>An integer hash value.</returns>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)">
      <summary>Returns a <see cref="T:System.Windows.Markup.XmlLanguage" /> instance, based on a string representing the language per RFC 3066.</summary>
      <returns>A new <see cref="T:System.Windows.Markup.XmlLanguage" /> with the provided string as its <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> value.</returns>
      <param name="ietfLanguageTag">An RFC 3066 language string, or an empty string ("").</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ietfLanguageTag" /> cannot be processed as a valid IETF language.</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag">
      <summary>Gets the string representation of the language tag.</summary>
      <returns>A string that represents the language tag.</returns>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.op_Equality(System.Windows.Markup.XmlLanguage,System.Windows.Markup.XmlLanguage)">
      <summary>Determines whether two specified <see cref="T:System.Windows.Markup.XmlLanguage" /> objects have the same value. </summary>
      <returns>true if the value of <paramref name="xmlLanguage1" /> is the same as the value of <paramref name="xmlLanguage2" />; otherwise, false.</returns>
      <param name="xmlLanguage1">The first <see cref="T:System.Windows.Markup.XmlLanguage" /> to compare.</param>
      <param name="xmlLanguage2">The second <see cref="T:System.Windows.Markup.XmlLanguage" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Markup.XmlLanguage.op_Inequality(System.Windows.Markup.XmlLanguage,System.Windows.Markup.XmlLanguage)">
      <summary>Determines whether two specified <see cref="T:System.Windows.Markup.XmlLanguage" /> objects have a different value. </summary>
      <returns>true if the value of <paramref name="xmlLanguage1" /> is different from the value of <paramref name="xmlLanguage2" />; otherwise, false.</returns>
      <param name="xmlLanguage1">The first <see cref="T:System.Windows.Markup.XmlLanguage" /> to compare.</param>
      <param name="xmlLanguage2">The second <see cref="T:System.Windows.Markup.XmlLanguage" /> to compare.</param>
    </member>
    <member name="T:System.Windows.Markup.XmlnsDefinitionAttribute">
      <summary>Specifies a mapping in an assembly between an XML namespace (xmlns) and a CLR namespace.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDefinitionAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> class.</summary>
      <param name="xmlNamespace">Specifies the <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace" />  value.</param>
      <param name="clrNamespace">Specifies the <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace" /> value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> or <paramref name="clrNamespace" /> are null.</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.AssemblyName">
      <summary>Gets or sets the name of the assembly that contains the <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace" />.</summary>
      <returns>The name of the assembly that contains the <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace">
      <summary>Gets the CLR namespace that is mapped to <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace" /> by the attribute. </summary>
      <returns>The CLR namespace that is mapped to <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace" /> by the attribute. </returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace">
      <summary>Gets the XML namespace (xmlns) that is mapped to <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace" /> by the attribute.</summary>
      <returns>The XML namespace (xmlns) that is mapped to <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace" /> by the attribute.</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsPrefixAttribute">
      <summary>Specifies a recommended prefix to associate with an XML namespace when writing elements and attributes in a XAML file.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsPrefixAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlnsPrefixAttribute" /> class.</summary>
      <param name="xmlNamespace">The URI of the relevant XML namespace (use a string, not a true <see cref="T:System.Uri" /> type).</param>
      <param name="prefix">The recommended prefix to use when mapping the XML namespace.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> or <paramref name="prefix" /> are null.</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.Prefix">
      <summary>Gets the recommended prefix to associate with the XML namespace.</summary>
      <returns>A string that provides the recommended prefix to use when mapping the <see cref="P:System.Windows.Markup.XmlnsPrefixAttribute.XmlNamespace" /> namespace.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.XmlNamespace">
      <summary>Gets the XML namespace URI.</summary>
      <returns>A string that provides the URI for the relevant XML namespace.</returns>
    </member>
    <member name="T:System.Windows.Media.AcquireLicenseCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Media.LicenseAcquirer.AcquireLicenseCompleted" /> event. </summary>
    </member>
    <member name="P:System.Windows.Media.AcquireLicenseCompletedEventArgs.ResponseCustomData">
      <summary>Gets any custom data returned from the server in the license response.</summary>
      <returns>Any custom data returned from the server in the license response. If there is no custom data to return, you get an empty string. </returns>
      <exception cref="T:System.InvalidOperationException">If accessing this property when the license acquisition was canceled or if an error occurred.</exception>
    </member>
    <member name="T:System.Windows.Media.AlignmentX">
      <summary>Describes how content is positioned horizontally in a container. </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentX.Left">
      <summary>The contents align toward the left of the container. </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentX.Center">
      <summary>The contents align toward the center of the container. </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentX.Right">
      <summary>The contents align toward the right of the container. </summary>
    </member>
    <member name="T:System.Windows.Media.AlignmentY">
      <summary>Describes how content is positioned vertically in a container. </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentY.Top">
      <summary>The contents align toward the upper edge of the container. </summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentY.Center">
      <summary>The contents align toward the center of the container.</summary>
    </member>
    <member name="F:System.Windows.Media.AlignmentY.Bottom">
      <summary>The contents align toward the lower edge of the container. </summary>
    </member>
    <member name="T:System.Windows.Media.ArcSegment">
      <summary>Represents an elliptical arc between two points. </summary>
    </member>
    <member name="M:System.Windows.Media.ArcSegment.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.ArcSegment" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.IsLargeArc">
      <summary>Gets or sets a value that indicates whether the arc should be greater than 180 degrees.</summary>
      <returns>true if the arc should be greater than 180 degrees; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.IsLargeArcProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.ArcSegment.IsLargeArc" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.ArcSegment.IsLargeArc" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.Point">
      <summary>Gets or sets the endpoint of the elliptical arc.</summary>
      <returns>The point to which the arc is drawn. The default is a <see cref="T:System.Windows.Point" /> with value 0,0. </returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.PointProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.ArcSegment.Point" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.ArcSegment.Point" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.RotationAngle">
      <summary>Gets or sets the amount (in degrees) by which the ellipse is rotated about the x-axis.  </summary>
      <returns>The amount (in degrees) by which the ellipse is rotated about the x-axis. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.RotationAngleProperty">
      <summary>Identifies the  <see cref="P:System.Windows.Media.ArcSegment.RotationAngle" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.ArcSegment.RotationAngle" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.Size">
      <summary>Gets or sets the x- and y-radius of the arc as a <see cref="T:System.Windows.Size" /> structure. </summary>
      <returns>A <see cref="T:System.Windows.Size" /> structure that describes the x- and y-radius of the elliptical arc. The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Width" /> property specifies the arc's x-radius; its <see cref="P:System.Windows.Size.Height" /> property specifies the arc's y-radius. The default is a <see cref="T:System.Windows.Size" /> with value 0,0.</returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.SizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.ArcSegment.Size" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.ArcSegment.Size" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.Media.ArcSegment.SweepDirection">
      <summary>Gets or sets a value that specifies whether the arc is drawn in the <see cref="F:System.Windows.Media.SweepDirection.Clockwise" /> or <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" /> direction.</summary>
      <returns>One of the enumeration values that specifies the direction in which the arc is drawn. The default is <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" />.</returns>
    </member>
    <member name="F:System.Windows.Media.ArcSegment.SweepDirectionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.ArcSegment.SweepDirection" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.ArcSegment.SweepDirection" /> dependency property identifier.</returns>
    </member>
    <member name="T:System.Windows.Media.AudioCaptureDevice">
      <summary>Describes either the desired or supported formats for an audio capture device, such as a microphone.</summary>
    </member>
    <member name="P:System.Windows.Media.AudioCaptureDevice.AudioFrameSize">
      <summary>Gets or sets the intended audio frame size.</summary>
      <returns>The audio frame size, in milliseconds. The default is 1000. See Remarks.</returns>
    </member>
    <member name="F:System.Windows.Media.AudioCaptureDevice.AudioFrameSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.AudioCaptureDevice.AudioFrameSize" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.AudioCaptureDevice.AudioFrameSize" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.AudioCaptureDevice.DesiredFormat">
      <summary>Gets or sets the desired audio format to be used by this audio capture device.</summary>
      <returns>The desired audio format, as an <see cref="T:System.Windows.Media.AudioFormat" /> object, that is used by this audio capture device. The default value is null.</returns>
    </member>
    <member name="P:System.Windows.Media.AudioCaptureDevice.SupportedFormats">
      <summary>Gets a generic collection of supported audio formats for this audio capture device.</summary>
      <returns>A generic collection of <see cref="T:System.Windows.Media.AudioFormat" /> objects that represents the supported audio formats for this audio capture device.</returns>
    </member>
    <member name="T:System.Windows.Media.AudioCaptureDeviceCollection">
      <summary>Specifies a collection of <see cref="T:System.Windows.Media.AudioCaptureDevice" /> objects.</summary>
    </member>
    <member name="T:System.Windows.Media.AudioFormat">
      <summary>Provides specific technical information about an audio format that is used by audio capture devices.</summary>
    </member>
    <member name="P:System.Windows.Media.AudioFormat.BitsPerSample">
      <summary>Gets the number of bits that are used to store the audio information for a single sample of an audio format.</summary>
      <returns>The number of bits that are used to store the audio information for a single sample of an audio format.</returns>
    </member>
    <member name="P:System.Windows.Media.AudioFormat.Channels">
      <summary>Gets the number of channels that are provided by the audio format.</summary>
      <returns>The number of channels that are provided by the audio format.</returns>
    </member>
    <member name="P:System.Windows.Media.AudioFormat.SamplesPerSecond">
      <summary>Gets the number of samples per second that are provided by the audio format.</summary>
      <returns>The number of samples per second that are provided by the audio format.</returns>
    </member>
    <member name="P:System.Windows.Media.AudioFormat.WaveFormat">
      <summary>Gets the encoding format of the audio format as a <see cref="T:System.Windows.Media.WaveFormatType" /> value.</summary>
      <returns>The encoding format of the audio format.</returns>
    </member>
    <member name="T:System.Windows.Media.AudioSink">
      <summary>Exposes the capture graph for audio devices. Derive from this class to receive audio information and to obtain the capture graph through <see cref="P:System.Windows.Media.AudioSink.CaptureSource" />.</summary>
    </member>
    <member name="M:System.Windows.Media.AudioSink.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.AudioSink" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.AudioSink.CaptureSource">
      <summary>Gets or sets a capture source that is associated with this <see cref="T:System.Windows.Media.AudioSink" />.</summary>
      <returns>A capture source that is associated with this <see cref="T:System.Windows.Media.AudioSink" />.</returns>
    </member>
    <member name="M:System.Windows.Media.AudioSink.Finalize">
      <summary>Frees the resources that are used by the <see cref="T:System.Windows.Media.AudioSink" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.AudioSink.OnCaptureStarted">
      <summary>When overridden in a derived class, is invoked when an audio device starts capturing audio data. </summary>
    </member>
    <member name="M:System.Windows.Media.AudioSink.OnCaptureStopped">
      <summary>When overridden in a derived class, is invoked when an audio device stops capturing audio data. </summary>
    </member>
    <member name="M:System.Windows.Media.AudioSink.OnFormatChange(System.Windows.Media.AudioFormat)">
      <summary>When overridden in a derived class, is invoked when an audio device reports an audio format change. </summary>
      <param name="audioFormat">The new audio format.</param>
    </member>
    <member name="M:System.Windows.Media.AudioSink.OnSamples(System.Int64,System.Int64,System.Byte[])">
      <summary>When overridden in a derived class, is invoked when an audio device captures a complete audio sample. </summary>
      <param name="sampleData">A byte stream that contains audio data, to be interpreted per the relevant audio format information.</param>
    </member>
    <member name="T:System.Windows.Media.BezierSegment">
      <summary>Represents a cubic Bezier curve drawn between two points. </summary>
    </member>
    <member name="M:System.Windows.Media.BezierSegment.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.BezierSegment" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.BezierSegment.Point1">
      <summary>Gets or sets the first control point of the curve. </summary>
      <returns>The first control point of the curve. The default is a <see cref="T:System.Windows.Point" /> with value 0,0.</returns>
    </member>
    <member name="F:System.Windows.Media.BezierSegment.Point1Property">
      <summary>Identifies the <see cref="P:System.Windows.Media.BezierSegment.Point1" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.BezierSegment.Point1" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.BezierSegment.Point2">
      <summary>Gets or sets the second control point of the curve.</summary>
      <returns>The second control point of the curve.</returns>
    </member>
    <member name="F:System.Windows.Media.BezierSegment.Point2Property">
      <summary>Identifies the <see cref="P:System.Windows.Media.BezierSegment.Point2" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.BezierSegment.Point2" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.BezierSegment.Point3">
      <summary>Gets or sets the end point of the curve.</summary>
      <returns>The end point of the curve.</returns>
    </member>
    <member name="F:System.Windows.Media.BezierSegment.Point3Property">
      <summary>Identifies the <see cref="P:System.Windows.Media.BezierSegment.Point3" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.BezierSegment.Point3" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.BitmapCache">
      <summary>Represents the behavior of caching a visual element or tree of elements as bitmap surfaces. This can yield significant performance improvements for some scenarios.</summary>
    </member>
    <member name="M:System.Windows.Media.BitmapCache.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.BitmapCache" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.BitmapCache.RenderAtScale">
      <summary>Gets or sets the scale at which the object is rendered on the cached bitmap surface. Use this property for cached objects that are scaled to improve performance. </summary>
      <returns>The scale at which the object is rendered as a cached bitmap. If you specify a negative number, an error will be thrown. The default is 1.</returns>
    </member>
    <member name="F:System.Windows.Media.BitmapCache.RenderAtScaleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.BitmapCache.RenderAtScale" /> dependency property.</summary>
    </member>
    <member name="T:System.Windows.Media.Brush">
      <summary>Defines objects used to paint graphical objects. Classes that derive from <see cref="T:System.Windows.Media.Brush" /> describe how the area is painted.</summary>
    </member>
    <member name="M:System.Windows.Media.Brush.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Brush" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.Brush.Opacity">
      <summary>Gets or sets the degree of opacity of a <see cref="T:System.Windows.Media.Brush" />.  </summary>
      <returns>The value of the <see cref="P:System.Windows.Media.Brush.Opacity" /> property is expressed as a value between 0 and 1.0. The default value is 1.0. </returns>
    </member>
    <member name="F:System.Windows.Media.Brush.OpacityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Brush.Opacity" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.Brush.Opacity" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.Media.Brush.RelativeTransform">
      <summary>Gets or sets the transformation that is applied to the brush using relative coordinates. </summary>
      <returns>The transformation that is applied to the brush using relative coordinates. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Brush.RelativeTransformProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Brush.RelativeTransform" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.Brush.RelativeTransform" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.Media.Brush.Transform">
      <summary>Gets or sets the transformation that is applied to the brush.</summary>
      <returns>The transformation to apply to the brush.</returns>
    </member>
    <member name="F:System.Windows.Media.Brush.TransformProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Brush.Transform" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.Media.Brush.Transform" /> dependency property identifier.</returns>
    </member>
    <member name="T:System.Windows.Media.BrushMappingMode">
      <summary>Specifies the coordinate system used by a <see cref="T:System.Windows.Media.Brush" />. </summary>
    </member>
    <member name="F:System.Windows.Media.BrushMappingMode.Absolute">
      <summary>The coordinate system is not relative to a bounding box. Values are interpreted directly in local space.  </summary>
    </member>
    <member name="F:System.Windows.Media.BrushMappingMode.RelativeToBoundingBox">
      <summary>The coordinate system is relative to a bounding box: 0 indicates 0 percent of the bounding box, and 1 indicates 100 percent of the bounding box. For example, (0.5, 0.5) describes a point in the middle of the bounding box, and (1, 1) describes a point at the bottom right of the bounding box. </summary>
    </member>
    <member name="T:System.Windows.Media.CacheMode">
      <summary>Represents cached content. </summary>
    </member>
    <member name="M:System.Windows.Media.CacheMode.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.CacheMode" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.CaptureDevice">
      <summary>Provides common properties for <see cref="T:System.Windows.Media.AudioCaptureDevice" /> and <see cref="T:System.Windows.Media.VideoCaptureDevice" />.</summary>
    </member>
    <member name="P:System.Windows.Media.CaptureDevice.FriendlyName">
      <summary>Gets the UI display name for the capture device.</summary>
      <returns>The UI display name for the capture device.</returns>
    </member>
    <member name="F:System.Windows.Media.CaptureDevice.FriendlyNameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.CaptureDevice.FriendlyName" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.CaptureDevice.FriendlyName" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.CaptureDevice.IsDefaultDevice">
      <summary>Gets a value that declares whether the capture device is the default device for its type (audio or video).</summary>
      <returns>true if this <see cref="T:System.Windows.Media.CaptureDevice" /> represents the default device for its type; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Media.CaptureDevice.IsDefaultDeviceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.CaptureDevice.IsDefaultDevice" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.CaptureDevice.IsDefaultDevice" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.CaptureDeviceConfiguration">
      <summary>Represents a helper class for obtaining information about available capture devices (audio or video) and requesting client user permission to access the captures from available devices.</summary>
    </member>
    <member name="P:System.Windows.Media.CaptureDeviceConfiguration.AllowedDeviceAccess">
      <summary>Gets a value that reports whether a user has previously granted device access based on their stored response to the device access UI prompt.</summary>
      <returns>true if the user has previously granted device access based on their response to the access request dialog box prompt, or if the request is automatically granted in some circumstances. false if the user does not grant access or if the request is denied by other factors. See Remarks.</returns>
    </member>
    <member name="M:System.Windows.Media.CaptureDeviceConfiguration.GetAvailableAudioCaptureDevices">
      <summary>Returns a collection of <see cref="T:System.Windows.Media.AudioCaptureDevice" /> objects that represent the available audio capture devices on the client system.</summary>
      <returns>A generic read-only collection of <see cref="T:System.Windows.Media.AudioCaptureDevice" /> objects that represent the available audio capture devices on the client system.</returns>
    </member>
    <member name="M:System.Windows.Media.CaptureDeviceConfiguration.GetAvailableVideoCaptureDevices">
      <summary>Returns a collection of <see cref="T:System.Windows.Media.VideoCaptureDevice" /> objects that represent the available video capture devices on the client system.</summary>
      <returns>A generic read-only collection of <see cref="T:System.Windows.Media.VideoCaptureDevice" /> objects that represent the available video capture devices on the client system.</returns>
    </member>
    <member name="M:System.Windows.Media.CaptureDeviceConfiguration.GetDefaultAudioCaptureDevice">
      <summary>Returns the <see cref="T:System.Windows.Media.AudioCaptureDevice" /> object that represent the default audio capture devices on the client system.</summary>
      <returns>The <see cref="T:System.Windows.Media.AudioCaptureDevice" /> object that represent the default audio capture devices on the client system.</returns>
    </member>
    <member name="M:System.Windows.Media.CaptureDeviceConfiguration.GetDefaultVideoCaptureDevice">
      <summary>Returns the <see cref="T:System.Windows.Media.VideoCaptureDevice" /> object that represent the default video capture devices on the client system.</summary>
      <returns>The <see cref="T:System.Windows.Media.VideoCaptureDevice" /> object that represent the default video capture devices on the client system.</returns>
    </member>
    <member name="M:System.Windows.Media.CaptureDeviceConfiguration.RequestDeviceAccess">
      <summary>Requests access for all possible capture devices (audio or video) that are available on the client system.</summary>
      <returns>true if the user grants device access based on their response to the access request dialog prompt, or if the request is automatically granted in some circumstances. false if the user does not grant access or if the request is denied by other factors. See Remarks.</returns>
    </member>
    <member name="T:System.Windows.Media.CaptureImageCompletedEventArgs">
      <summary>Provides event data for the <see cref="E:System.Windows.Media.CaptureSource.CaptureImageCompleted" /> event of the <see cref="T:System.Windows.Media.CaptureSource" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.CaptureImageCompletedEventArgs.#ctor(System.Windows.Media.Imaging.WriteableBitmap)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.CaptureImageCompletedEventArgs" /> using an image source to report in event data.</summary>
    </member>
    <member name="P:System.Windows.Media.CaptureImageCompletedEventArgs.Result">
      <summary>Gets the <see cref="T:System.Windows.Media.Imaging.WriteableBitmap" /> image source to report in event data.</summary>
      <returns>The image source that is returned asynchronously through this event data, as a result of a <see cref="M:System.Windows.Media.CaptureSource.CaptureImageAsync" /> call.</returns>
    </member>
    <member name="T:System.Windows.Media.CaptureSource">
      <summary>Provides methods that work with specific audio or video captures from the associated capture device.</summary>
    </member>
    <member name="M:System.Windows.Media.CaptureSource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.CaptureSource" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.CaptureSource.AudioCaptureDevice">
      <summary>Gets or sets the associated audio capture device that is relevant to this capture.</summary>
      <returns>The associated audio capture device that is relevant to this capture.</returns>
    </member>
    <member name="F:System.Windows.Media.CaptureSource.AudioCaptureDeviceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.CaptureSource.AudioCaptureDevice" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.CaptureSource.AudioCaptureDevice" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Media.CaptureSource.CaptureFailed">
      <summary>Occurs when a requested capture operation does not generate a captured sample.</summary>
    </member>
    <member name="M:System.Windows.Media.CaptureSource.CaptureImageAsync">
      <summary>Initiates an asynchronous image capture request. Retrieve the returned image by handling the <see cref="E:System.Windows.Media.CaptureSource.CaptureImageCompleted" /> event on this <see cref="T:System.Windows.Media.CaptureSource" />.</summary>
    </member>
    <member name="E:System.Windows.Media.CaptureSource.CaptureIma